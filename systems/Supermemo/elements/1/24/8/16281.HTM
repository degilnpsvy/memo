<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>6.6 Simple Generic Data Types</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This chapter describes those of Guile&#8217;s simple data types which are primarily used for their role as items of generic data. By<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>simple</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>we mean data types that are not primarily used as containers to hold other data &#8212; i.e. pairs, lists, vectors and so on. For the documentation of such<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>compound</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>data types, see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Compound-Data-Types">Compound Data Types</A>.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Booleans">Booleans</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>True/false values.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Numbers">Numbers</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Numerical data types.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#Characters">Characters</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Single characters.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#Character-Sets">Character Sets</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Sets of characters.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#Strings">Strings</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Sequences of characters.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=6 href="https://www.gnu.org/software/guile/manual/guile.html#Bytevectors">Bytevectors</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Sequences of bytes.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=7 href="https://www.gnu.org/software/guile/manual/guile.html#Symbols">Symbols</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Symbols.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=8 href="https://www.gnu.org/software/guile/manual/guile.html#Keywords">Keywords</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Self-quoting, customizable display keywords.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=9 href="https://www.gnu.org/software/guile/manual/guile.html#Other-Types">Other Types</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>"Functionality-centric" data types.</TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Booleans></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Numbers" rel=next>Numbers</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Simple-Data-Types" rel=up>Simple Data Types</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Booleans-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.6.1 Booleans</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Booleans></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The two boolean values are<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for true and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for false. They can also be written as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#true</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#false</CODE>, as per R7RS.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Boolean values are returned by predicate procedures, such as the general equality predicates<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq?</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eqv?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Equality">Equality</A>) and numerical and string comparison operators like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string=?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#String-Comparison">String Comparison</A>) and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;=</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Comparison">Comparison</A>).</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(&lt;= 3 8)
&#8658; #t

(&lt;= 3 -3)
&#8658; #f

(equal? "house" "houses")
&#8658; #f

(eq? #f #f)
&#8658;
#t
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In test condition contexts like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>if</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cond</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Conditionals">Conditionals</A>), where a group of subexpressions will be evaluated only if a<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>condition</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression evaluates to &#8220;true&#8221;, &#8220;true&#8221; means any value at all except<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(if #t "yes" "no")
&#8658; "yes"

(if 0 "yes" "no")
&#8658; "yes"

(if #f "yes" "no")
&#8658; "no"
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A result of this asymmetry is that typical Scheme source code more often uses<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>explicitly than<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE>:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is necessary to represent an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>if</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cond</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>false value, whereas<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not necessary to represent an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>if</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cond</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>true value.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">It is important to note that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>not</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN>equivalent to any other Scheme value. In particular,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not the same as the number 0 (like in C and C++), and not the same as the &#8220;empty list&#8221; (like in some Lisp dialects).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In C, the two Scheme boolean values are available as the two constants<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_BOOL_T</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_BOOL_F</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>. Care must be taken with the false value<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_BOOL_F</CODE>: it is not false when used in C conditionals. In order to test for it, use<CODE>scm_is_false</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_is_true</CODE>.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-not-3></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-not></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>not</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-scm_005fnot></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_not</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, else return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-boolean_003f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-boolean_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>boolean?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-scm_005fboolean_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_boolean_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is either<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, else return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fBOOL_005fT></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_BOOL_T</STRONG></DT>
<DD>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>representation of the Scheme object<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fBOOL_005fF></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_BOOL_F</STRONG></DT>
<DD>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>representation of the Scheme object<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fis_005ftrue></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_is_true</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM obj)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, else return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>1</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fis_005ffalse></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_is_false</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM obj)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, else return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fis_005fbool></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_is_bool</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM obj)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is either<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, else return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005ffrom_005fbool></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_bool</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(int val)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0</CODE>, else return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fto_005fbool></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_to_bool</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM val)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_BOOL_T</CODE>, return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_BOOL_F</CODE>, else signal a &#8216;wrong type&#8217; error.</P>
<P>You should probably use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_is_true</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead of this function when you just want to test a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value for trueness.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Numbers></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Characters" rel=next>Characters</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Booleans" rel=prev>Booleans</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Simple-Data-Types" rel=up>Simple Data Types</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Numerical-data-types></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.6.2 Numerical data types</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Numbers></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile supports a rich &#8220;tower&#8221; of numerical types &#8212; integer, rational, real and complex &#8212; and provides an extensive set of mathematical and scientific functions for operating on numerical data. This section of the manual documents those types and functions.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">You may also find it illuminating to read R5RS&#8217;s presentation of numbers in Scheme, which is particularly clear and accessible: see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/r5rs.html#Numbers">Numbers</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>R5RS</CITE>.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Numerical-Tower">Numerical Tower</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Scheme&#8217;s numerical "tower".</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Integers">Integers</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Whole numbers.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#Reals-and-Rationals">Reals and Rationals</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Real and rational numbers.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#Complex-Numbers">Complex Numbers</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Complex numbers.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#Exactness">Exactness</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Exactness and inexactness.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=6 href="https://www.gnu.org/software/guile/manual/guile.html#Number-Syntax">Number Syntax</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Read syntax for numerical data.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=7 href="https://www.gnu.org/software/guile/manual/guile.html#Integer-Operations">Integer Operations</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Operations on integer values.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=8 href="https://www.gnu.org/software/guile/manual/guile.html#Comparison">Comparison</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Comparison predicates.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=9 href="https://www.gnu.org/software/guile/manual/guile.html#Conversion">Conversion</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Converting numbers to and from strings.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Complex">Complex</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Complex number operations.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Arithmetic">Arithmetic</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Arithmetic functions.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Scientific">Scientific</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Scientific functions.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Bitwise-Operations">Bitwise Operations</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Logical AND, OR, NOT, and so on.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Random">Random</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Random number generation.</TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Numerical-Tower></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Integers" rel=next>Integers</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Numbers" rel=up>Numbers</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Scheme_0027s-Numerical-_0060_0060Tower_0027_0027></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.2.1 Scheme&#8217;s Numerical &#8220;Tower&#8221;</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-number_003f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Scheme&#8217;s numerical &#8220;tower&#8221; consists of the following categories of numbers:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DT><EM>integers</EM></DT>
<DD>
<P>Whole numbers, positive or negative; e.g. &#8211;5, 0, 18.</P></DD>
<DT><EM>rationals</EM></DT>
<DD>
<P>The set of numbers that can be expressed as<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>p</VAR>/<VAR>q</VAR></EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>p</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are integers; e.g.<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>9/16</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>works, but pi (an irrational number) doesn&#8217;t. These include integers (<EM><VAR>n</VAR>/1</EM>).</P></DD>
<DT><EM>real numbers</EM></DT>
<DD>
<P>The set of numbers that describes all possible positions along a one-dimensional line. This includes rationals as well as irrational numbers.</P></DD>
<DT><EM>complex numbers</EM></DT>
<DD>
<P>The set of numbers that describes all possible positions in a two dimensional space. This includes real as well as imaginary numbers (<EM><VAR>a</VAR>+<VAR>b</VAR>i</EM>, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>a</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>real part</EM>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>b</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>imaginary part</EM>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>i</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the square root of -1.)</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">It is called a tower because each category &#8220;sits on&#8221; the one that follows it, in the sense that every integer is also a rational, every rational is also real, and every real number is also a complex number (but with zero imaginary part).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In addition to the classification into integers, rationals, reals and complex numbers, Scheme also distinguishes between whether a number is represented exactly or not. For example, the result of<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>2*sin(pi/4)</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is exactly<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>2^(1/2)</EM>, but Guile can represent neither<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pi/4</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>nor<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>2^(1/2)</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>exactly. Instead, it stores an inexact approximation, using the C type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>double</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile can represent exact rationals of any magnitude, inexact rationals that fit into a C<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>double</CODE>, and inexact complex numbers with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>double</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>real and imaginary parts.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>number?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>predicate may be applied to any Scheme value to discover whether the value is any of the supported numerical types.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-number_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>number?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-scm_005fnumber_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_number_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is any kind of number, else<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For example:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(number? 3)
&#8658; #t

(number? "hello there!")
&#8658; #f

(define pi 3.141592654)
(number? pi)
&#8658; #t
</PRE></DIV>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fis_005fnumber></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_is_number</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM obj)</EM></DT>
<DD>
<P>This is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_is_true (scm_number_p (obj))</CODE>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The next few subsections document each of Guile&#8217;s numerical data types in detail.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Integers></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Reals-and-Rationals" rel=next>Reals and Rationals</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Numerical-Tower" rel=prev>Numerical Tower</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Numbers" rel=up>Numbers</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Integers-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.2.2 Integers</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Integer-numbers></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-integer_003f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Integers are whole numbers, that is numbers with no fractional part, such as 2, 83, and -3789.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Integers in Guile can be arbitrarily big, as shown by the following example.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(define (factorial n)
  (let loop ((n n) (product 1))
    (if (= n 0)
        product
        (loop (- n 1) (* product n)))))

(factorial 3)
&#8658; 6

(factorial 20)
&#8658; 2432902008176640000

(- (factorial 45))
&#8658; -119622220865480194561963161495657715064383733760000000000
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Readers whose background is in programming languages where integers are limited by the need to fit into just 4 or 8 bytes of memory may find this surprising, or suspect that Guile&#8217;s representation of integers is inefficient. In fact, Guile achieves a near optimal balance of convenience and efficiency by using the host computer&#8217;s native representation of integers where possible, and a more general representation where the required number does not fit in the native form. Conversion between these two representations is automatic and completely invisible to the Scheme level programmer.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">C has a host of different integer types, and Guile offers a host of functions to convert between them and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>representation. For example, a C<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be handled with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_to_int</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_from_int</CODE>. Guile also defines a few C integer types of its own, to help with differences between systems.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">C integer types that are not covered can be handled with the generic<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_to_signed_integer</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_from_signed_integer</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for signed types, or with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_to_unsigned_integer</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_from_unsigned_integer</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for unsigned types.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Scheme integers can be exact and inexact. For example, a number written as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>3.0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with an explicit decimal-point is inexact, but it is also an integer. The functions<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>integer?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_is_integer</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>report true for such a number, but the functions<CODE>exact-integer?</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_is_exact_integer</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_is_signed_integer</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_is_unsigned_integer</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>only allow exact integers and thus report false. Likewise, the conversion functions like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_to_signed_integer</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>only accept exact integers.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The motivation for this behavior is that the inexactness of a number should not be lost silently. If you want to allow inexact integers, you can explicitly insert a call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>inexact-&gt;exact</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or to its C equivalent<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_inexact_to_exact</CODE>. (Only inexact integers will be converted by this call into exact integers; inexact non-integers will become exact fractions.)</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-integer_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>integer?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-scm_005finteger_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_integer_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an exact or inexact integer number, else return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(integer? 487)
&#8658; #t

(integer? 3.0)
&#8658; #t

(integer? -3.4)
&#8658; #f

(integer? +inf.0)
&#8658; #f
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fis_005finteger></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_is_integer</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM x)</EM></DT>
<DD>
<P>This is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_is_true (scm_integer_p (x))</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-exact_002dinteger_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>exact-integer?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-scm_005fexact_005finteger_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_exact_integer_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an exact integer number, else return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(exact-integer? 37)
&#8658; #t

(exact-integer? 3.0)
&#8658; #f
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fis_005fexact_005finteger></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_is_exact_integer</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM x)</EM></DT>
<DD>
<P>This is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_is_true (scm_exact_integer_p (x))</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005ft_005fint8></A>C Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_t_int8</STRONG></DT>
<DT><A name=index-scm_005ft_005fuint8></A>C Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_t_uint8</STRONG></DT>
<DT><A name=index-scm_005ft_005fint16></A>C Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_t_int16</STRONG></DT>
<DT><A name=index-scm_005ft_005fuint16></A>C Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_t_uint16</STRONG></DT>
<DT><A name=index-scm_005ft_005fint32></A>C Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_t_int32</STRONG></DT>
<DT><A name=index-scm_005ft_005fuint32></A>C Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_t_uint32</STRONG></DT>
<DT><A name=index-scm_005ft_005fint64></A>C Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_t_int64</STRONG></DT>
<DT><A name=index-scm_005ft_005fuint64></A>C Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_t_uint64</STRONG></DT>
<DT><A name=index-scm_005ft_005fintmax></A>C Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_t_intmax</STRONG></DT>
<DT><A name=index-scm_005ft_005fuintmax></A>C Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_t_uintmax</STRONG></DT>
<DD>
<P>The C types are equivalent to the corresponding ISO C types but are defined on all platforms, with the exception of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_t_int64</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_t_uint64</CODE>, which are only defined when a 64-bit type is available. For example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_t_int8</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int8_t</CODE>.</P>
<P>You can regard these definitions as a stop-gap measure until all platforms provide these types. If you know that all the platforms that you are interested in already provide these types, it is better to use them directly instead of the types provided by Guile.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fis_005fsigned_005finteger></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_is_signed_integer</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM x, scm_t_intmax min, scm_t_intmax max)</EM></DT>
<DT><A name=index-scm_005fis_005funsigned_005finteger></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_is_unsigned_integer</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM x, scm_t_uintmax min, scm_t_uintmax max)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>represents an exact integer that is between<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>min</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>max</VAR>, inclusive.</P>
<P>These functions can be used to check whether a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value will fit into a given range, such as the range of a given C integer type. If you just want to convert a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value to a given C integer type, use one of the conversion functions directly.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fto_005fsigned_005finteger></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_intmax</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_to_signed_integer</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM x, scm_t_intmax min, scm_t_intmax max)</EM></DT>
<DT><A name=index-scm_005fto_005funsigned_005finteger></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_uintmax</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_to_unsigned_integer</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM x, scm_t_uintmax min, scm_t_uintmax max)</EM></DT>
<DD>
<P>When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>represents an exact integer that is between<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>min</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>max</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>inclusive, return that integer. Else signal an error, either a &#8216;wrong-type&#8217; error when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not an exact integer, or an &#8216;out-of-range&#8217; error when it doesn&#8217;t fit the given range.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005ffrom_005fsigned_005finteger></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_signed_integer</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_intmax x)</EM></DT>
<DT><A name=index-scm_005ffrom_005funsigned_005finteger></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_unsigned_integer</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_uintmax x)</EM></DT>
<DD>
<P>Return the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value that represents the integer<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>. This function will always succeed and will always return an exact number.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fto_005fchar></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>char</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_to_char</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM x)</EM></DT>
<DT><A name=index-scm_005fto_005fschar></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>signed char</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_to_schar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM x)</EM></DT>
<DT><A name=index-scm_005fto_005fuchar></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>unsigned char</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_to_uchar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM x)</EM></DT>
<DT><A name=index-scm_005fto_005fshort></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>short</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_to_short</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM x)</EM></DT>
<DT><A name=index-scm_005fto_005fushort></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>unsigned short</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_to_ushort</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM x)</EM></DT>
<DT><A name=index-scm_005fto_005fint></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_to_int</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM x)</EM></DT>
<DT><A name=index-scm_005fto_005fuint></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>unsigned int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_to_uint</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM x)</EM></DT>
<DT><A name=index-scm_005fto_005flong></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>long</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_to_long</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM x)</EM></DT>
<DT><A name=index-scm_005fto_005fulong></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>unsigned long</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_to_ulong</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM x)</EM></DT>
<DT><A name=index-scm_005fto_005flong_005flong></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>long long</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_to_long_long</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM x)</EM></DT>
<DT><A name=index-scm_005fto_005fulong_005flong></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>unsigned long long</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_to_ulong_long</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM x)</EM></DT>
<DT><A name=index-scm_005fto_005fsize_005ft></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>size_t</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_to_size_t</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM x)</EM></DT>
<DT><A name=index-scm_005fto_005fssize_005ft></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>ssize_t</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_to_ssize_t</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM x)</EM></DT>
<DT><A name=index-scm_005fto_005fptrdiff_005ft></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_ptrdiff</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_to_ptrdiff_t</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM x)</EM></DT>
<DT><A name=index-scm_005fto_005fint8></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_int8</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_to_int8</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM x)</EM></DT>
<DT><A name=index-scm_005fto_005fuint8></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_uint8</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_to_uint8</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM x)</EM></DT>
<DT><A name=index-scm_005fto_005fint16></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_int16</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_to_int16</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM x)</EM></DT>
<DT><A name=index-scm_005fto_005fuint16></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_uint16</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_to_uint16</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM x)</EM></DT>
<DT><A name=index-scm_005fto_005fint32></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_int32</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_to_int32</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM x)</EM></DT>
<DT><A name=index-scm_005fto_005fuint32></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_uint32</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_to_uint32</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM x)</EM></DT>
<DT><A name=index-scm_005fto_005fint64></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_int64</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_to_int64</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM x)</EM></DT>
<DT><A name=index-scm_005fto_005fuint64></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_uint64</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_to_uint64</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM x)</EM></DT>
<DT><A name=index-scm_005fto_005fintmax></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_intmax</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_to_intmax</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM x)</EM></DT>
<DT><A name=index-scm_005fto_005fuintmax></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_uintmax</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_to_uintmax</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM x)</EM></DT>
<DD>
<P>When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>represents an exact integer that fits into the indicated C type, return that integer. Else signal an error, either a &#8216;wrong-type&#8217; error when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not an exact integer, or an &#8216;out-of-range&#8217; error when it doesn&#8217;t fit the given range.</P>
<P>The functions<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_to_long_long</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_to_ulong_long</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_to_int64</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_to_uint64</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are only available when the corresponding types are.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005ffrom_005fchar></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_char</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(char x)</EM></DT>
<DT><A name=index-scm_005ffrom_005fschar></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_schar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(signed char x)</EM></DT>
<DT><A name=index-scm_005ffrom_005fuchar></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_uchar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(unsigned char x)</EM></DT>
<DT><A name=index-scm_005ffrom_005fshort></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_short</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(short x)</EM></DT>
<DT><A name=index-scm_005ffrom_005fushort></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_ushort</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(unsigned short x)</EM></DT>
<DT><A name=index-scm_005ffrom_005fint></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_int</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(int x)</EM></DT>
<DT><A name=index-scm_005ffrom_005fuint></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_uint</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(unsigned int x)</EM></DT>
<DT><A name=index-scm_005ffrom_005flong></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_long</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(long x)</EM></DT>
<DT><A name=index-scm_005ffrom_005fulong></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_ulong</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(unsigned long x)</EM></DT>
<DT><A name=index-scm_005ffrom_005flong_005flong></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_long_long</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(long long x)</EM></DT>
<DT><A name=index-scm_005ffrom_005fulong_005flong></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_ulong_long</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(unsigned long long x)</EM></DT>
<DT><A name=index-scm_005ffrom_005fsize_005ft></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_size_t</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(size_t x)</EM></DT>
<DT><A name=index-scm_005ffrom_005fssize_005ft></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_ssize_t</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(ssize_t x)</EM></DT>
<DT><A name=index-scm_005ffrom_005fptrdiff_005ft></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_ptrdiff_t</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_ptrdiff x)</EM></DT>
<DT><A name=index-scm_005ffrom_005fint8></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_int8</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_int8 x)</EM></DT>
<DT><A name=index-scm_005ffrom_005fuint8></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_uint8</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_uint8 x)</EM></DT>
<DT><A name=index-scm_005ffrom_005fint16></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_int16</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_int16 x)</EM></DT>
<DT><A name=index-scm_005ffrom_005fuint16></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_uint16</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_uint16 x)</EM></DT>
<DT><A name=index-scm_005ffrom_005fint32></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_int32</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_int32 x)</EM></DT>
<DT><A name=index-scm_005ffrom_005fuint32></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_uint32</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_uint32 x)</EM></DT>
<DT><A name=index-scm_005ffrom_005fint64></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_int64</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_int64 x)</EM></DT>
<DT><A name=index-scm_005ffrom_005fuint64></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_uint64</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_uint64 x)</EM></DT>
<DT><A name=index-scm_005ffrom_005fintmax></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_intmax</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_intmax x)</EM></DT>
<DT><A name=index-scm_005ffrom_005fuintmax></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_uintmax</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_uintmax x)</EM></DT>
<DD>
<P>Return the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value that represents the integer<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>. These functions will always succeed and will always return an exact number.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fto_005fmpz></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_to_mpz</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM val, mpz_t rop)</EM></DT>
<DD>
<P>Assign<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the multiple precision integer<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rop</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be an exact integer, otherwise an error will be signalled.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rop</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must have been initialized with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mpz_init</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>before this function is called. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rop</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is no longer needed the occupied space must be freed with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mpz_clear</CODE>. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gmplib.org/manual/Initializing-Integers.html#Initializing-Integers">Initializing Integers</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>GNU MP Manual</CITE>, for details.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005ffrom_005fmpz></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_mpz</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(mpz_t val)</EM></DT>
<DD>
<P>Return the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value that represents<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val</VAR>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Reals-and-Rationals></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Complex-Numbers" rel=next>Complex Numbers</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Integers" rel=prev>Integers</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Numbers" rel=up>Numbers</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Real-and-Rational-Numbers></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.2.3 Real and Rational Numbers</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Real-numbers></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Rational-numbers></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-real_003f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-rational_003f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Mathematically, the real numbers are the set of numbers that describe all possible points along a continuous, infinite, one-dimensional line. The rational numbers are the set of all numbers that can be written as fractions<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>p</VAR>/<VAR>q</VAR>, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>p</VAR>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are integers. All rational numbers are also real, but there are real numbers that are not rational, for example<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>the square root of 2</EM>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pi</EM>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile can represent both exact and inexact rational numbers, but it cannot represent precise finite irrational numbers. Exact rationals are represented by storing the numerator and denominator as two exact integers. Inexact rationals are stored as floating point numbers using the C type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>double</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Exact rationals are written as a fraction of integers. There must be no whitespace around the slash:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>1/2
-22/7
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Even though the actual encoding of inexact rationals is in binary, it may be helpful to think of it as a decimal number with a limited number of significant figures and a decimal point somewhere, since this corresponds to the standard notation for non-whole numbers. For example:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>0.34
-0.00000142857931198
-5648394822220000000000.0
4.0
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The limited precision of Guile&#8217;s encoding means that any finite &#8220;real&#8221; number in Guile can be written in a rational form, by multiplying and then dividing by sufficient powers of 10 (or in fact, 2). For example, &#8216;<SAMP>-0.00000142857931198</SAMP>&#8217; is the same as -142857931198 divided by 100000000000000000. In Guile&#8217;s current incarnation, therefore, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>rational?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>real?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>predicates are equivalent for finite numbers.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Dividing by an exact zero leads to a error message, as one might expect. However, dividing by an inexact zero does not produce an error. Instead, the result of the division is either plus or minus infinity, depending on the sign of the divided number and the sign of the zero divisor (some platforms support signed zeroes &#8216;<SAMP>-0.0</SAMP>&#8217; and &#8216;<SAMP>+0.0</SAMP>&#8217;; &#8216;<SAMP>0.0</SAMP>&#8217; is the same as &#8216;<SAMP>+0.0</SAMP>&#8217;).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Dividing zero by an inexact zero yields a<SPAN class=Apple-converted-space>&nbsp;</SPAN><ACRONYM>NaN</ACRONYM><SPAN class=Apple-converted-space>&nbsp;</SPAN>(&#8216;not a number&#8217;) value, although they are actually considered numbers by Scheme. Attempts to compare a<SPAN class=Apple-converted-space>&nbsp;</SPAN><ACRONYM>NaN</ACRONYM><SPAN class=Apple-converted-space>&nbsp;</SPAN>value with any number (including itself) using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>=</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&gt;</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;=</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&gt;=</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>always returns<CODE>#f</CODE>. Although a<SPAN class=Apple-converted-space>&nbsp;</SPAN><ACRONYM>NaN</ACRONYM><SPAN class=Apple-converted-space>&nbsp;</SPAN>value is not<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>=</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to itself, it is both<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eqv?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to itself and other<SPAN class=Apple-converted-space>&nbsp;</SPAN><ACRONYM>NaN</ACRONYM><SPAN class=Apple-converted-space>&nbsp;</SPAN>values. However, the preferred way to test for them is by using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nan?</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The real<SPAN class=Apple-converted-space>&nbsp;</SPAN><ACRONYM>NaN</ACRONYM><SPAN class=Apple-converted-space>&nbsp;</SPAN>values and infinities are written &#8216;<SAMP>+nan.0</SAMP>&#8217;, &#8216;<SAMP>+inf.0</SAMP>&#8217; and &#8216;<SAMP>-inf.0</SAMP>&#8217;. This syntax is also recognized by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as an extension to the usual Scheme syntax. These special values are considered by Scheme to be inexact real numbers but not rational. Note that non-real complex numbers may also contain infinities or<SPAN class=Apple-converted-space>&nbsp;</SPAN><ACRONYM>NaN</ACRONYM><SPAN class=Apple-converted-space>&nbsp;</SPAN>values in their real or imaginary parts. To test a real number to see if it is infinite, a<SPAN class=Apple-converted-space>&nbsp;</SPAN><ACRONYM>NaN</ACRONYM><SPAN class=Apple-converted-space>&nbsp;</SPAN>value, or neither, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>inf?</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nan?</CODE>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>finite?</CODE>, respectively. Every real number in Scheme belongs to precisely one of those three classes.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">On platforms that follow<SPAN class=Apple-converted-space>&nbsp;</SPAN><ACRONYM>IEEE</ACRONYM><SPAN class=Apple-converted-space>&nbsp;</SPAN>754 for their floating point arithmetic, the &#8216;<SAMP>+inf.0</SAMP>&#8217;, &#8216;<SAMP>-inf.0</SAMP>&#8217;, and &#8216;<SAMP>+nan.0</SAMP>&#8217; values are implemented using the corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><ACRONYM>IEEE</ACRONYM><SPAN class=Apple-converted-space>&nbsp;</SPAN>754 values. They behave in arithmetic operations like<SPAN class=Apple-converted-space>&nbsp;</SPAN><ACRONYM>IEEE</ACRONYM><SPAN class=Apple-converted-space>&nbsp;</SPAN>754 describes it, i.e.,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(= +nan.0 +nan.0)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8658;<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-real_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>real?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-scm_005freal_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_real_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a real number, else<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>. Note that the sets of integer and rational values form subsets of the set of real numbers, so the predicate will also be fulfilled if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an integer number or a rational number.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-rational_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>rational?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-scm_005frational_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_rational_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a rational number,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise. Note that the set of integer values forms a subset of the set of rational numbers, i.e. the predicate will also be fulfilled if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an integer number.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-rationalize></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>rationalize</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x eps</EM></DT>
<DT><A name=index-scm_005frationalize></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_rationalize</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x, eps)</EM></DT>
<DD>
<P>Returns the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>simplest</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>rational number differing from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>by no more than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>eps</VAR>.</P>
<P>As required by<SPAN class=Apple-converted-space>&nbsp;</SPAN><ACRONYM>R5RS</ACRONYM>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>rationalize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>only returns an exact result when both its arguments are exact. Thus, you might need to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>inexact-&gt;exact</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on the arguments.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(rationalize (inexact-&gt;exact 1.2) 1/100)
&#8658; 6/5
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-inf_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>inf?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-scm_005finf_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_inf_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the real number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is &#8216;<SAMP>+inf.0</SAMP>&#8217; or &#8216;<SAMP>-inf.0</SAMP>&#8217;. Otherwise return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-nan_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>nan?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-scm_005fnan_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_nan_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the real number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is &#8216;<SAMP>+nan.0</SAMP>&#8217;, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-finite_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>finite?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-scm_005ffinite_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_finite_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the real number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is neither infinite nor a NaN,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-nan></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>nan</STRONG></DT>
<DT><A name=index-scm_005fnan></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_nan</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Return &#8216;<SAMP>+nan.0</SAMP>&#8217;, a<SPAN class=Apple-converted-space>&nbsp;</SPAN><ACRONYM>NaN</ACRONYM><SPAN class=Apple-converted-space>&nbsp;</SPAN>value.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-inf></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>inf</STRONG></DT>
<DT><A name=index-scm_005finf></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_inf</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Return &#8216;<SAMP>+inf.0</SAMP>&#8217;, positive infinity.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-numerator></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>numerator</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-scm_005fnumerator></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_numerator</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x)</EM></DT>
<DD>
<P>Return the numerator of the rational number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-denominator></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>denominator</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-scm_005fdenominator></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_denominator</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x)</EM></DT>
<DD>
<P>Return the denominator of the rational number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fis_005freal></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_is_real</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM val)</EM></DT>
<DT><A name=index-scm_005fis_005frational></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_is_rational</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM val)</EM></DT>
<DD>
<P>Equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_is_true (scm_real_p (val))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_is_true (scm_rational_p (val))</CODE>, respectively.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fto_005fdouble></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>double</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_to_double</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM val)</EM></DT>
<DD>
<P>Returns the number closest to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>that is representable as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>double</CODE>. Returns infinity for a<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>that is too large in magnitude. The argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a real number.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005ffrom_005fdouble></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_double</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(double val)</EM></DT>
<DD>
<P>Return the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value that represents<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val</VAR>. The returned value is inexact according to the predicate<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>inexact?</CODE>, but it will be exactly equal to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val</VAR>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Complex-Numbers></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Exactness" rel=next>Exactness</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Reals-and-Rationals" rel=prev>Reals and Rationals</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Numbers" rel=up>Numbers</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Complex-Numbers-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.2.4 Complex Numbers</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Complex-numbers></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-complex_003f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Complex numbers are the set of numbers that describe all possible points in a two-dimensional space. The two coordinates of a particular point in this space are known as the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>real</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>imaginary</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>parts of the complex number that describes that point.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In Guile, complex numbers are written in rectangular form as the sum of their real and imaginary parts, using the symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>i</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to indicate the imaginary part.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>3+4i
&#8658;
3.0+4.0i

(* 3-8i 2.3+0.3i)
&#8658;
9.3-17.5i
</PRE></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-polar-form></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Polar form can also be used, with an &#8216;<SAMP>@</SAMP>&#8217; between magnitude and angle,</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>1@3.141592 &#8658; -1.0      (approx)
-1@1.57079 &#8658; 0.0-1.0i  (approx)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile represents a complex number as a pair of inexact reals, so the real and imaginary parts of a complex number have the same properties of inexactness and limited precision as single inexact real numbers.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that each part of a complex number may contain any inexact real value, including the special values &#8216;<SAMP>+nan.0</SAMP>&#8217;, &#8216;<SAMP>+inf.0</SAMP>&#8217; and &#8216;<SAMP>-inf.0</SAMP>&#8217;, as well as either of the signed zeroes &#8216;<SAMP>0.0</SAMP>&#8217; or &#8216;<SAMP>-0.0</SAMP>&#8217;.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-complex_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>complex?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DT><A name=index-scm_005fcomplex_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_complex_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(z)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>z</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a complex number,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise. Note that the sets of real, rational and integer values form subsets of the set of complex numbers, i.e. the predicate will also be fulfilled if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>z</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a real, rational or integer number.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fis_005fcomplex></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_is_complex</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM val)</EM></DT>
<DD>
<P>Equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_is_true (scm_complex_p (val))</CODE>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Exactness></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Number-Syntax" rel=next>Number Syntax</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Complex-Numbers" rel=prev>Complex Numbers</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Numbers" rel=up>Numbers</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Exact-and-Inexact-Numbers></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.2.5 Exact and Inexact Numbers</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Exact-numbers></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Inexact-numbers></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-exact_003f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-inexact_003f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-exact_002d_003einexact-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-inexact_002d_003eexact-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">R5RS requires that, with few exceptions, a calculation involving inexact numbers always produces an inexact result. To meet this requirement, Guile distinguishes between an exact integer value such as &#8216;<SAMP>5</SAMP>&#8217; and the corresponding inexact integer value which, to the limited precision available, has no fractional part, and is printed as &#8216;<SAMP>5.0</SAMP>&#8217;. Guile will only convert the latter value to the former when forced to do so by an invocation of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>inexact-&gt;exact</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The only exception to the above requirement is when the values of the inexact numbers do not affect the result. For example<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(expt n 0)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is &#8216;<SAMP>1</SAMP>&#8217; for any value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>n</CODE>, therefore<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(expt 5.0 0)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is permitted to return an exact &#8216;<SAMP>1</SAMP>&#8217;.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-exact_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>exact?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DT><A name=index-scm_005fexact_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_exact_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(z)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>z</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is exact,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(exact? 2)
&#8658; #t

(exact? 0.5)
&#8658; #f

(exact? (/ 2))
&#8658; #t
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fis_005fexact></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_is_exact</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM z)</EM></DT>
<DD>
<P>Return a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>z</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is exact, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise. This is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_is_true (scm_exact_p (z))</CODE>.</P>
<P>An alternate approch to testing the exactness of a number is to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_is_signed_integer</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_is_unsigned_integer</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-inexact_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>inexact?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DT><A name=index-scm_005finexact_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_inexact_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(z)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>z</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is inexact,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>else.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fis_005finexact></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_is_inexact</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM z)</EM></DT>
<DD>
<P>Return a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>z</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is inexact, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise. This is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_is_true (scm_inexact_p (z))</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-inexact_002d_003eexact></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>inexact-&gt;exact</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DT><A name=index-scm_005finexact_005fto_005fexact></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_inexact_to_exact</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(z)</EM></DT>
<DD>
<P>Return an exact number that is numerically closest to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>z</VAR>, when there is one. For inexact rationals, Guile returns the exact rational that is numerically equal to the inexact rational. Inexact complex numbers with a non-zero imaginary part can not be made exact.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(inexact-&gt;exact 0.5)
&#8658; 1/2
</PRE></DIV>
<P>The following happens because 12/10 is not exactly representable as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>double</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(on most platforms). However, when reading a decimal number that has been marked exact with the &#8220;#e&#8221; prefix, Guile is able to represent it correctly.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(inexact-&gt;exact 1.2)  
&#8658; 5404319552844595/4503599627370496

#e1.2
&#8658; 6/5
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-exact_002d_003einexact></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>exact-&gt;inexact</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DT><A name=index-scm_005fexact_005fto_005finexact></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_exact_to_inexact</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(z)</EM></DT>
<DD>
<P>Convert the number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>z</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to its inexact representation.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Number-Syntax></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Integer-Operations" rel=next>Integer Operations</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Exactness" rel=prev>Exactness</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Numbers" rel=up>Numbers</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Read-Syntax-for-Numerical-Data></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.2.6 Read Syntax for Numerical Data</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The read syntax for integers is a string of digits, optionally preceded by a minus or plus character, a code indicating the base in which the integer is encoded, and a code indicating whether the number is exact or inexact. The supported base codes are:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DT><CODE>#b</CODE></DT>
<DT><CODE>#B</CODE></DT>
<DD>
<P>the integer is written in binary (base 2)</P></DD>
<DT><CODE>#o</CODE></DT>
<DT><CODE>#O</CODE></DT>
<DD>
<P>the integer is written in octal (base 8)</P></DD>
<DT><CODE>#d</CODE></DT>
<DT><CODE>#D</CODE></DT>
<DD>
<P>the integer is written in decimal (base 10)</P></DD>
<DT><CODE>#x</CODE></DT>
<DT><CODE>#X</CODE></DT>
<DD>
<P>the integer is written in hexadecimal (base 16)</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If the base code is omitted, the integer is assumed to be decimal. The following examples show how these base codes are used.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>-13
&#8658; -13

#d-13
&#8658; -13

#x-13
&#8658; -19

#b+1101
&#8658; 13

#o377
&#8658; 255
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The codes for indicating exactness (which can, incidentally, be applied to all numerical values) are:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DT><CODE>#e</CODE></DT>
<DT><CODE>#E</CODE></DT>
<DD>
<P>the number is exact</P></DD>
<DT><CODE>#i</CODE></DT>
<DT><CODE>#I</CODE></DT>
<DD>
<P>the number is inexact.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If the exactness indicator is omitted, the number is exact unless it contains a radix point. Since Guile can not represent exact complex numbers, an error is signalled when asking for them.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(exact? 1.2)
&#8658; #f

(exact? #e1.2)
&#8658; #t

(exact? #e+1i)
ERROR: Wrong type argument
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile also understands the syntax &#8216;<SAMP>+inf.0</SAMP>&#8217; and &#8216;<SAMP>-inf.0</SAMP>&#8217; for plus and minus infinity, respectively. The value must be written exactly as shown, that is, they always must have a sign and exactly one zero digit after the decimal point. It also understands &#8216;<SAMP>+nan.0</SAMP>&#8217; and &#8216;<SAMP>-nan.0</SAMP>&#8217; for the special &#8216;not-a-number&#8217; value. The sign is ignored for &#8216;not-a-number&#8217; and the value is always printed as &#8216;<SAMP>+nan.0</SAMP>&#8217;.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Integer-Operations></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Comparison" rel=next>Comparison</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Number-Syntax" rel=prev>Number Syntax</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Numbers" rel=up>Numbers</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Operations-on-Integer-Values></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.2.7 Operations on Integer Values</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-odd_003f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-even_003f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-quotient-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-remainder-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-modulo-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-gcd-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-lcm-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-odd_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>odd?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n</EM></DT>
<DT><A name=index-scm_005fodd_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_odd_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(n)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an odd number,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-even_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>even?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n</EM></DT>
<DT><A name=index-scm_005feven_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_even_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(n)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an even number,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-quotient></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>quotient</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n d</EM></DT>
<DT><A name=index-remainder></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>remainder</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n d</EM></DT>
<DT><A name=index-scm_005fquotient></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_quotient</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(n, d)</EM></DT>
<DT><A name=index-scm_005fremainder></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_remainder</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(n, d)</EM></DT>
<DD>
<P>Return the quotient or remainder from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>divided by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>d</VAR>. The quotient is rounded towards zero, and the remainder will have the same sign as<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>. In all cases quotient and remainder satisfy<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>=<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR>*<VAR>d</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>+<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR></EM>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(remainder 13 4) &#8658; 1
(remainder -13 4) &#8658; -1
</PRE></DIV>
<P>See also<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>truncate-quotient</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>truncate-remainder</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and related operations in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Arithmetic">Arithmetic</A>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-modulo></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>modulo</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n d</EM></DT>
<DT><A name=index-scm_005fmodulo></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_modulo</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(n, d)</EM></DT>
<DD>
<P>Return the remainder from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>divided by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>d</VAR>, with the same sign as<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>d</VAR>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(modulo 13 4) &#8658; 1
(modulo -13 4) &#8658; 3
(modulo 13 -4) &#8658; -3
(modulo -13 -4) &#8658; -1
</PRE></DIV>
<P>See also<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>floor-quotient</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>floor-remainder</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and related operations in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Arithmetic">Arithmetic</A>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-gcd></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>gcd</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x&#8230;</EM></DT>
<DT><A name=index-scm_005fgcd></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_gcd</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x, y)</EM></DT>
<DD>
<P>Return the greatest common divisor of all arguments. If called without arguments, 0 is returned.</P>
<P>The C function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gcd</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>always takes two arguments, while the Scheme function can take an arbitrary number.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-lcm></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>lcm</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x&#8230;</EM></DT>
<DT><A name=index-scm_005flcm></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_lcm</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x, y)</EM></DT>
<DD>
<P>Return the least common multiple of the arguments. If called without arguments, 1 is returned.</P>
<P>The C function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_lcm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>always takes two arguments, while the Scheme function can take an arbitrary number.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-modulo_002dexpt></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>modulo-expt</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n k m</EM></DT>
<DT><A name=index-scm_005fmodulo_005fexpt></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_modulo_expt</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(n, k, m)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>raised to the integer exponent<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR>, modulo<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>m</VAR>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(modulo-expt 2 3 5)
   &#8658; 3
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-exact_002dinteger_002dsqrt></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM></EM><STRONG>exact-integer-sqrt</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>k</VAR></EM></DT>
<DT><A name=index-scm_005fexact_005finteger_005fsqrt></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_exact_integer_sqrt</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR>, SCM *<VAR>s</VAR>, SCM *<VAR>r</VAR>)</EM></DT>
<DD>
<P>Return two exact non-negative integers<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>such that<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>k</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>=<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR>^2 +<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR></EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>s</VAR>^2 &lt;=<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt; (<VAR>s</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>+ 1)^2</EM>. An error is raised if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not an exact non-negative integer.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(exact-integer-sqrt 10) &#8658; 3 and 1
</PRE></DIV></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Comparison></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Conversion" rel=next>Conversion</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Integer-Operations" rel=prev>Integer Operations</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Numbers" rel=up>Numbers</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Comparison-Predicates></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.2.8 Comparison Predicates</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-zero_003f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-positive_003f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-negative_003f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The C comparison functions below always takes two arguments, while the Scheme functions can take an arbitrary number. Also keep in mind that the C functions return one of the Scheme boolean values<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_BOOL_T</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_BOOL_F</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>which are both true as far as C is concerned. Thus, always write<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_is_true (scm_num_eq_p (x, y))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>when testing the two Scheme numbers<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>y</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for equality, for example.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003d></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>=</STRONG></DT>
<DT><A name=index-scm_005fnum_005feq_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_num_eq_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x, y)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if all parameters are numerically equal.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003c></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;</STRONG></DT>
<DT><A name=index-scm_005fless_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_less_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x, y)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the list of parameters is monotonically increasing.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003e></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&gt;</STRONG></DT>
<DT><A name=index-scm_005fgr_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_gr_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x, y)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the list of parameters is monotonically decreasing.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003c_003d></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;=</STRONG></DT>
<DT><A name=index-scm_005fleq_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_leq_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x, y)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the list of parameters is monotonically non-decreasing.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003e_003d></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&gt;=</STRONG></DT>
<DT><A name=index-scm_005fgeq_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_geq_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x, y)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the list of parameters is monotonically non-increasing.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-zero_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>zero?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DT><A name=index-scm_005fzero_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_zero_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(z)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>z</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an exact or inexact number equal to zero.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-positive_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>positive?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-scm_005fpositive_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_positive_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an exact or inexact number greater than zero.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-negative_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>negative?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-scm_005fnegative_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_negative_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an exact or inexact number less than zero.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Conversion></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Complex" rel=next>Complex</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Comparison" rel=prev>Comparison</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Numbers" rel=up>Numbers</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Converting-Numbers-To-and-From-Strings></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.2.9 Converting Numbers To and From Strings</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-number_002d_003estring-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-string_002d_003enumber-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following procedures read and write numbers according to their external representation as defined by R5RS (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/r5rs.html#Lexical-structure">R5RS Lexical Structure</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>The Revised^5 Report on the Algorithmic Language Scheme</CITE>). See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Number-Input-and-Output">the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 i18n)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module</A>, for locale-dependent number parsing.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-number_002d_003estring></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>number-&gt;string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n [radix]</EM></DT>
<DT><A name=index-scm_005fnumber_005fto_005fstring></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_number_to_string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(n, radix)</EM></DT>
<DD>
<P>Return a string holding the external representation of the number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>radix</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is inexact, a radix of 10 will be used.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002d_003enumber></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-&gt;number</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>string [radix]</EM></DT>
<DT><A name=index-scm_005fstring_005fto_005fnumber></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_to_number</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(string, radix)</EM></DT>
<DD>
<P>Return a number of the maximally precise representation expressed by the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>string</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>radix</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be an exact integer, either 2, 8, 10, or 16. If supplied,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>radix</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a default radix that may be overridden by an explicit radix prefix in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>string</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(e.g. "#o177"). If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>radix</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not supplied, then the default radix is 10. If string is not a syntactically valid notation for a number, then<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string-&gt;number</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005flocale_005fstringn_005fto_005fnumber></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_locale_stringn_to_number</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const char *string, size_t len, unsigned radix)</EM></DT>
<DD>
<P>As per<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string-&gt;number</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>above, but taking a C string, as pointer and length. The string characters should be in the current locale encoding (<CODE>locale</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the name refers only to that, there&#8217;s no locale-dependent parsing).</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Complex></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Arithmetic" rel=next>Arithmetic</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Conversion" rel=prev>Conversion</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Numbers" rel=up>Numbers</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Complex-Number-Operations></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.2.10 Complex Number Operations</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-make_002drectangular-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-make_002dpolar-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-real_002dpart-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-imag_002dpart-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-magnitude-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-angle-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002drectangular></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-rectangular</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>real_part imaginary_part</EM></DT>
<DT><A name=index-scm_005fmake_005frectangular></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_rectangular</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(real_part, imaginary_part)</EM></DT>
<DD>
<P>Return a complex number constructed of the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>real-part</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>imaginary-part</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>parts.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dpolar></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-polar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>mag ang</EM></DT>
<DT><A name=index-scm_005fmake_005fpolar></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_polar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(mag, ang)</EM></DT>
<DD><A name=index-polar-form-1></A>
<P>Return the complex number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mag</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>* e^(i *<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ang</VAR>).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-real_002dpart></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>real-part</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DT><A name=index-scm_005freal_005fpart></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_real_part</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(z)</EM></DT>
<DD>
<P>Return the real part of the number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>z</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-imag_002dpart></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>imag-part</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DT><A name=index-scm_005fimag_005fpart></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_imag_part</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(z)</EM></DT>
<DD>
<P>Return the imaginary part of the number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>z</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-magnitude></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>magnitude</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DT><A name=index-scm_005fmagnitude></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_magnitude</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(z)</EM></DT>
<DD>
<P>Return the magnitude of the number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>z</VAR>. This is the same as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>abs</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for real arguments, but also allows complex numbers.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-angle></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>angle</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DT><A name=index-scm_005fangle></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_angle</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(z)</EM></DT>
<DD>
<P>Return the angle of the complex number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>z</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fmake_005frectangular></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_make_rectangular</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(double re, double im)</EM></DT>
<DT><A name=index-scm_005fc_005fmake_005fpolar></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_make_polar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(double x, double y)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_make_rectangular</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_make_polar</CODE>, respectively, but these functions take<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>double</CODE>s as their arguments.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005freal_005fpart></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>double</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_real_part</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(z)</EM></DT>
<DT><A name=index-scm_005fc_005fimag_005fpart></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>double</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_imag_part</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(z)</EM></DT>
<DD>
<P>Returns the real or imaginary part of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>z</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>double</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fmagnitude></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>double</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_magnitude</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(z)</EM></DT>
<DT><A name=index-scm_005fc_005fangle></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>double</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_angle</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(z)</EM></DT>
<DD>
<P>Returns the magnitude or angle of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>z</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>double</CODE>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Arithmetic></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Scientific" rel=next>Scientific</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Complex" rel=prev>Complex</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Numbers" rel=up>Numbers</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Arithmetic-Functions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.2.11 Arithmetic Functions</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-max-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-min-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-_002b-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-_002a-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-_002d-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-_002f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-1_002b></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-1_002d></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-abs-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-floor-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-ceiling-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-truncate-3></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-round-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-euclidean_002f-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-euclidean_002dquotient-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-euclidean_002dremainder-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-floor_002f-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-floor_002dquotient-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-floor_002dremainder-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-ceiling_002f-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-ceiling_002dquotient-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-ceiling_002dremainder-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-truncate_002f-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-truncate_002dquotient-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-truncate_002dremainder-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-centered_002f-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-centered_002dquotient-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-centered_002dremainder-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-round_002f-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-round_002dquotient-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-round_002dremainder-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The C arithmetic functions below always takes two arguments, while the Scheme functions can take an arbitrary number. When you need to invoke them with just one argument, for example to compute the equivalent of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(- x)</CODE>, pass<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_UNDEFINED</CODE>as the second one:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_difference (x, SCM_UNDEFINED)</CODE>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_002b></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>+</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z1 &#8230;</EM></DT>
<DT><A name=index-scm_005fsum></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_sum</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(z1, z2)</EM></DT>
<DD>
<P>Return the sum of all parameter values. Return 0 if called without any parameters.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_002d></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>-</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z1 z2 &#8230;</EM></DT>
<DT><A name=index-scm_005fdifference></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_difference</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(z1, z2)</EM></DT>
<DD>
<P>If called with one argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>z1</VAR>, -<VAR>z1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned. Otherwise the sum of all but the first argument are subtracted from the first argument.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_002a></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>*</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z1 &#8230;</EM></DT>
<DT><A name=index-scm_005fproduct></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_product</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(z1, z2)</EM></DT>
<DD>
<P>Return the product of all arguments. If called without arguments, 1 is returned.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_002f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>/</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z1 z2 &#8230;</EM></DT>
<DT><A name=index-scm_005fdivide></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_divide</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(z1, z2)</EM></DT>
<DD>
<P>Divide the first argument by the product of the remaining arguments. If called with one argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>z1</VAR>, 1/<VAR>z1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-1_002b-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>1+</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DT><A name=index-scm_005foneplus></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_oneplus</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(z)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>z</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>+ 1</EM>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-1_002d-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>1-</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DT><A name=index-scm_005foneminus></A>C function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_oneminus</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(z)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>z</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>- 1</EM>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-abs></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>abs</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-scm_005fabs></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_abs</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x)</EM></DT>
<DD>
<P>Return the absolute value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>.</P>
<P><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a number with zero imaginary part. To calculate the magnitude of a complex number, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>magnitude</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-max></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>max</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x1 x2 &#8230;</EM></DT>
<DT><A name=index-scm_005fmax></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_max</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x1, x2)</EM></DT>
<DD>
<P>Return the maximum of all parameter values.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-min></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>min</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x1 x2 &#8230;</EM></DT>
<DT><A name=index-scm_005fmin></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_min</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x1, x2)</EM></DT>
<DD>
<P>Return the minimum of all parameter values.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-truncate></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>truncate</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-scm_005ftruncate_005fnumber></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_truncate_number</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x)</EM></DT>
<DD>
<P>Round the inexact number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>towards zero.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-round></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>round</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-scm_005fround_005fnumber></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_round_number</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x)</EM></DT>
<DD>
<P>Round the inexact number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the nearest integer. When exactly halfway between two integers, round to the even one.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-floor></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>floor</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-scm_005ffloor></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_floor</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x)</EM></DT>
<DD>
<P>Round the number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>towards minus infinity.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-ceiling></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>ceiling</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-scm_005fceiling></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_ceiling</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x)</EM></DT>
<DD>
<P>Round the number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>towards infinity.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005ftruncate></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>double</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_truncate</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(double x)</EM></DT>
<DT><A name=index-scm_005fc_005fround></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>double</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_round</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(double x)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_truncate_number</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_round_number</CODE>, respectively, but these functions take and return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>double</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>values.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-euclidean_002f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM></EM><STRONG>euclidean/</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR></EM></DT>
<DT><A name=index-euclidean_002dquotient></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM></EM><STRONG>euclidean-quotient</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR></EM></DT>
<DT><A name=index-euclidean_002dremainder></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM></EM><STRONG>euclidean-remainder</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR></EM></DT>
<DT><A name=index-scm_005feuclidean_005fdivide></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_euclidean_divide</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>, SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>, SCM *<VAR>q</VAR>, SCM *<VAR>r</VAR>)</EM></DT>
<DT><A name=index-scm_005feuclidean_005fquotient></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_euclidean_quotient</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>, SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>)</EM></DT>
<DT><A name=index-scm_005feuclidean_005fremainder></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_euclidean_remainder</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>, SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>)</EM></DT>
<DD>
<P>These procedures accept two real numbers<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>, where the divisor<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be non-zero.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>euclidean-quotient</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the integer<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>euclidean-remainder</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the real number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>such that<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>=<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR>*<VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>+<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR></EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>0 &lt;=<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt; |<VAR>y</VAR>|</EM>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>euclidean/</CODE>returns both<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR>, and is more efficient than computing each separately. Note that when<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt; 0</EM>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>euclidean-quotient</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>floor(<VAR>x</VAR>/<VAR>y</VAR>)</EM>, otherwise it returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>ceiling(<VAR>x</VAR>/<VAR>y</VAR>)</EM>.</P>
<P>Note that these operators are equivalent to the R6RS operators<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>div</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mod</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>div-and-mod</CODE>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(euclidean-quotient 123 10) &#8658; 12
(euclidean-remainder 123 10) &#8658; 3
(euclidean/ 123 10) &#8658; 12 and 3
(euclidean/ 123 -10) &#8658; -12 and 3
(euclidean/ -123 10) &#8658; -13 and 7
(euclidean/ -123 -10) &#8658; 13 and 7
(euclidean/ -123.2 -63.5) &#8658; 2.0 and 3.8
(euclidean/ 16/3 -10/7) &#8658; -3 and 22/21
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-floor_002f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM></EM><STRONG>floor/</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR></EM></DT>
<DT><A name=index-floor_002dquotient></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM></EM><STRONG>floor-quotient</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR></EM></DT>
<DT><A name=index-floor_002dremainder></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM></EM><STRONG>floor-remainder</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR></EM></DT>
<DT><A name=index-scm_005ffloor_005fdivide></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_floor_divide</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>, SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>, SCM *<VAR>q</VAR>, SCM *<VAR>r</VAR>)</EM></DT>
<DT><A name=index-scm_005ffloor_005fquotient></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_floor_quotient</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(<VAR>x</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>)</EM></DT>
<DT><A name=index-scm_005ffloor_005fremainder></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_floor_remainder</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(<VAR>x</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>)</EM></DT>
<DD>
<P>These procedures accept two real numbers<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>, where the divisor<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be non-zero.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>floor-quotient</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the integer<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>floor-remainder</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the real number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>such that<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>q</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>= floor(<VAR>x</VAR>/<VAR>y</VAR>)</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>=<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR>*<VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>+<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR></EM>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>floor/</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns both<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR>, and is more efficient than computing each separately. Note that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR>, if non-zero, will have the same sign as<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>.</P>
<P>When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are integers,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>floor-remainder</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is equivalent to the R5RS integer-only operator<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>modulo</CODE>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(floor-quotient 123 10) &#8658; 12
(floor-remainder 123 10) &#8658; 3
(floor/ 123 10) &#8658; 12 and 3
(floor/ 123 -10) &#8658; -13 and -7
(floor/ -123 10) &#8658; -13 and 7
(floor/ -123 -10) &#8658; 12 and -3
(floor/ -123.2 -63.5) &#8658; 1.0 and -59.7
(floor/ 16/3 -10/7) &#8658; -4 and -8/21
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-ceiling_002f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM></EM><STRONG>ceiling/</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR></EM></DT>
<DT><A name=index-ceiling_002dquotient></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM></EM><STRONG>ceiling-quotient</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR></EM></DT>
<DT><A name=index-ceiling_002dremainder></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM></EM><STRONG>ceiling-remainder</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR></EM></DT>
<DT><A name=index-scm_005fceiling_005fdivide></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_ceiling_divide</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>, SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>, SCM *<VAR>q</VAR>, SCM *<VAR>r</VAR>)</EM></DT>
<DT><A name=index-scm_005fceiling_005fquotient></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_ceiling_quotient</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(<VAR>x</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>)</EM></DT>
<DT><A name=index-scm_005fceiling_005fremainder></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_ceiling_remainder</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(<VAR>x</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>)</EM></DT>
<DD>
<P>These procedures accept two real numbers<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>, where the divisor<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be non-zero.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ceiling-quotient</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the integer<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ceiling-remainder</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the real number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>such that<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>q</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>= ceiling(<VAR>x</VAR>/<VAR>y</VAR>)</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>=<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR>*<VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>+<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR></EM>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ceiling/</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns both<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR>, and is more efficient than computing each separately. Note that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR>, if non-zero, will have the opposite sign of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(ceiling-quotient 123 10) &#8658; 13
(ceiling-remainder 123 10) &#8658; -7
(ceiling/ 123 10) &#8658; 13 and -7
(ceiling/ 123 -10) &#8658; -12 and 3
(ceiling/ -123 10) &#8658; -12 and -3
(ceiling/ -123 -10) &#8658; 13 and 7
(ceiling/ -123.2 -63.5) &#8658; 2.0 and 3.8
(ceiling/ 16/3 -10/7) &#8658; -3 and 22/21
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-truncate_002f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM></EM><STRONG>truncate/</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR></EM></DT>
<DT><A name=index-truncate_002dquotient></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM></EM><STRONG>truncate-quotient</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR></EM></DT>
<DT><A name=index-truncate_002dremainder></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM></EM><STRONG>truncate-remainder</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR></EM></DT>
<DT><A name=index-scm_005ftruncate_005fdivide></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_truncate_divide</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>, SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>, SCM *<VAR>q</VAR>, SCM *<VAR>r</VAR>)</EM></DT>
<DT><A name=index-scm_005ftruncate_005fquotient></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_truncate_quotient</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(<VAR>x</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>)</EM></DT>
<DT><A name=index-scm_005ftruncate_005fremainder></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_truncate_remainder</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(<VAR>x</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>)</EM></DT>
<DD>
<P>These procedures accept two real numbers<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>, where the divisor<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be non-zero.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>truncate-quotient</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the integer<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>truncate-remainder</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the real number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>such that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>x</VAR>/<VAR>y</VAR></EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>rounded toward zero, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>=<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR>*<VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>+<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR></EM>.<CODE>truncate/</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns both<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR>, and is more efficient than computing each separately. Note that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR>, if non-zero, will have the same sign as<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>.</P>
<P>When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are integers, these operators are equivalent to the R5RS integer-only operators<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>quotient</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>remainder</CODE>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(truncate-quotient 123 10) &#8658; 12
(truncate-remainder 123 10) &#8658; 3
(truncate/ 123 10) &#8658; 12 and 3
(truncate/ 123 -10) &#8658; -12 and 3
(truncate/ -123 10) &#8658; -12 and -3
(truncate/ -123 -10) &#8658; 12 and -3
(truncate/ -123.2 -63.5) &#8658; 1.0 and -59.7
(truncate/ 16/3 -10/7) &#8658; -3 and 22/21
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-centered_002f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM></EM><STRONG>centered/</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR></EM></DT>
<DT><A name=index-centered_002dquotient></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM></EM><STRONG>centered-quotient</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR></EM></DT>
<DT><A name=index-centered_002dremainder></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM></EM><STRONG>centered-remainder</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR></EM></DT>
<DT><A name=index-scm_005fcentered_005fdivide></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_centered_divide</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>, SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>, SCM *<VAR>q</VAR>, SCM *<VAR>r</VAR>)</EM></DT>
<DT><A name=index-scm_005fcentered_005fquotient></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_centered_quotient</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>, SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>)</EM></DT>
<DT><A name=index-scm_005fcentered_005fremainder></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_centered_remainder</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>, SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>)</EM></DT>
<DD>
<P>These procedures accept two real numbers<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>, where the divisor<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be non-zero.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>centered-quotient</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the integer<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>centered-remainder</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the real number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>such that<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>=<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR>*<VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>+<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR></EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>-|<VAR>y</VAR>/2| &lt;=<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt; |<VAR>y</VAR>/2|</EM>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>centered/</CODE>returns both<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR>, and is more efficient than computing each separately.</P>
<P>Note that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>centered-quotient</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>x</VAR>/<VAR>y</VAR></EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>rounded to the nearest integer. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>x</VAR>/<VAR>y</VAR></EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>lies exactly half-way between two integers, the tie is broken according to the sign of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt; 0</EM>, ties are rounded toward positive infinity, otherwise they are rounded toward negative infinity. This is a consequence of the requirement that<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>-|<VAR>y</VAR>/2| &lt;=<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt; |<VAR>y</VAR>/2|</EM>.</P>
<P>Note that these operators are equivalent to the R6RS operators<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>div0</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mod0</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>div0-and-mod0</CODE>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(centered-quotient 123 10) &#8658; 12
(centered-remainder 123 10) &#8658; 3
(centered/ 123 10) &#8658; 12 and 3
(centered/ 123 -10) &#8658; -12 and 3
(centered/ -123 10) &#8658; -12 and -3
(centered/ -123 -10) &#8658; 12 and -3
(centered/ 125 10) &#8658; 13 and -5
(centered/ 127 10) &#8658; 13 and -3
(centered/ 135 10) &#8658; 14 and -5
(centered/ -123.2 -63.5) &#8658; 2.0 and 3.8
(centered/ 16/3 -10/7) &#8658; -4 and -8/21
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-round_002f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM></EM><STRONG>round/</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR></EM></DT>
<DT><A name=index-round_002dquotient></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM></EM><STRONG>round-quotient</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR></EM></DT>
<DT><A name=index-round_002dremainder></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM></EM><STRONG>round-remainder</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR></EM></DT>
<DT><A name=index-scm_005fround_005fdivide></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_round_divide</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>, SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>, SCM *<VAR>q</VAR>, SCM *<VAR>r</VAR>)</EM></DT>
<DT><A name=index-scm_005fround_005fquotient></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_round_quotient</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(<VAR>x</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>)</EM></DT>
<DT><A name=index-scm_005fround_005fremainder></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_round_remainder</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(<VAR>x</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>)</EM></DT>
<DD>
<P>These procedures accept two real numbers<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>, where the divisor<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be non-zero.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>round-quotient</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the integer<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>round-remainder</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the real number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>such that<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>=<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR>*<VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>+<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR></EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>x</VAR>/<VAR>y</VAR></EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>rounded to the nearest integer, with ties going to the nearest even integer.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>round/</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns both<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR>, and is more efficient than computing each separately.</P>
<P>Note that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>round/</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>centered/</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are almost equivalent, but their behavior differs when<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>x</VAR>/<VAR>y</VAR></EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>lies exactly half-way between two integers. In this case,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>round/</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>chooses the nearest even integer, whereas<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>centered/</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>chooses in such a way to satisfy the constraint<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>-|<VAR>y</VAR>/2| &lt;=<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt; |<VAR>y</VAR>/2|</EM>, which is stronger than the corresponding constraint for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>round/</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>-|<VAR>y</VAR>/2| &lt;=<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;= |<VAR>y</VAR>/2|</EM>. In particular, when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are integers, the number of possible remainders returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>centered/</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<EM>|<VAR>y</VAR>|</EM>, whereas the number of possible remainders returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>round/</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>|<VAR>y</VAR>|+1</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is even.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(round-quotient 123 10) &#8658; 12
(round-remainder 123 10) &#8658; 3
(round/ 123 10) &#8658; 12 and 3
(round/ 123 -10) &#8658; -12 and 3
(round/ -123 10) &#8658; -12 and -3
(round/ -123 -10) &#8658; 12 and -3
(round/ 125 10) &#8658; 12 and 5
(round/ 127 10) &#8658; 13 and -3
(round/ 135 10) &#8658; 14 and -5
(round/ -123.2 -63.5) &#8658; 2.0 and 3.8
(round/ 16/3 -10/7) &#8658; -4 and -8/21
</PRE></DIV></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Scientific></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Bitwise-Operations" rel=next>Bitwise Operations</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Arithmetic" rel=prev>Arithmetic</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Numbers" rel=up>Numbers</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Scientific-Functions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.2.12 Scientific Functions</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following procedures accept any kind of number as arguments, including complex numbers.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-sqrt-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-sqrt></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>sqrt</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DD>
<P>Return the square root of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>z</VAR>. Of the two possible roots (positive and negative), the one with a positive real part is returned, or if that&#8217;s zero then a positive imaginary part. Thus,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(sqrt 9.0)       &#8658; 3.0
(sqrt -9.0)      &#8658; 0.0+3.0i
(sqrt 1.0+1.0i)  &#8658; 1.09868411346781+0.455089860562227i
(sqrt -1.0-1.0i) &#8658; 0.455089860562227-1.09868411346781i
</PRE></DIV></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-expt-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-expt></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>expt</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z1 z2</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>z1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>raised to the power of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>z2</VAR>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-sin-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-sin></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>sin</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DD>
<P>Return the sine of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>z</VAR>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-cos-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-cos></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cos</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DD>
<P>Return the cosine of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>z</VAR>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-tan-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-tan></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>tan</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DD>
<P>Return the tangent of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>z</VAR>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-asin-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-asin></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>asin</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DD>
<P>Return the arcsine of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>z</VAR>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-acos-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-acos></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>acos</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DD>
<P>Return the arccosine of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>z</VAR>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-atan-3></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-atan></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>atan</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DT><A name=index-atan-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>atan</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>y x</EM></DT>
<DD>
<P>Return the arctangent of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>z</VAR>, or of<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>y</VAR>/<VAR>x</VAR></EM>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-exp-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-exp></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>exp</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DD>
<P>Return e to the power of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>z</VAR>, where e is the base of natural logarithms (2.71828&#8230;).</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-log-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-log></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>log</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DD>
<P>Return the natural logarithm of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>z</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-log10></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>log10</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DD>
<P>Return the base 10 logarithm of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>z</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-sinh></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>sinh</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DD>
<P>Return the hyperbolic sine of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>z</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-cosh></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cosh</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DD>
<P>Return the hyperbolic cosine of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>z</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-tanh></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>tanh</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DD>
<P>Return the hyperbolic tangent of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>z</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-asinh></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>asinh</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DD>
<P>Return the hyperbolic arcsine of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>z</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-acosh></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>acosh</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DD>
<P>Return the hyperbolic arccosine of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>z</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-atanh></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>atanh</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>z</EM></DT>
<DD>
<P>Return the hyperbolic arctangent of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>z</VAR>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Bitwise-Operations></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Random" rel=next>Random</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Scientific" rel=prev>Scientific</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Numbers" rel=up>Numbers</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Bitwise-Operations-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.2.13 Bitwise Operations</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For the following bitwise functions, negative numbers are treated as infinite precision twos-complements. For instance<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>-6</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is bits<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>&#8230;111010</EM>, with infinitely many ones on the left. It can be seen that adding 6 (binary 110) to such a bit pattern gives all zeros.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-logand></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>logand</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n1 n2 &#8230;</EM></DT>
<DT><A name=index-scm_005flogand></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_logand</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(n1, n2)</EM></DT>
<DD>
<P>Return the bitwise<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL>AND</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the integer arguments.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(logand) &#8658; -1
(logand 7) &#8658; 7
(logand #b111 #b011 #b001) &#8658; 1
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-logior></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>logior</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n1 n2 &#8230;</EM></DT>
<DT><A name=index-scm_005flogior></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_logior</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(n1, n2)</EM></DT>
<DD>
<P>Return the bitwise<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL>OR</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the integer arguments.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(logior) &#8658; 0
(logior 7) &#8658; 7
(logior #b000 #b001 #b011) &#8658; 3
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-logxor></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>logxor</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n1 n2 &#8230;</EM></DT>
<DT><A name=index-scm_005floxor></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_loxor</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(n1, n2)</EM></DT>
<DD>
<P>Return the bitwise<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL>XOR</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the integer arguments. A bit is set in the result if it is set in an odd number of arguments.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(logxor) &#8658; 0
(logxor 7) &#8658; 7
(logxor #b000 #b001 #b011) &#8658; 2
(logxor #b000 #b001 #b011 #b011) &#8658; 1
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-lognot></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>lognot</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n</EM></DT>
<DT><A name=index-scm_005flognot></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_lognot</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(n)</EM></DT>
<DD>
<P>Return the integer which is the ones-complement of the integer argument, ie. each 0 bit is changed to 1 and each 1 bit to 0.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(number-&gt;string (lognot #b10000000) 2)
   &#8658; "-10000001"
(number-&gt;string (lognot #b0) 2)
   &#8658; "-1"
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-logtest></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>logtest</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>j k</EM></DT>
<DT><A name=index-scm_005flogtest></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_logtest</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(j, k)</EM></DT>
<DD>
<P>Test whether<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>j</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>have any 1 bits in common. This is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(not (zero? (logand j k)))</CODE>, but without actually calculating the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>logand</CODE>, just testing for non-zero.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(logtest #b0100 #b1011) &#8658; #f
(logtest #b0100 #b0111) &#8658; #t
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-logbit_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>logbit?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>index j</EM></DT>
<DT><A name=index-scm_005flogbit_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_logbit_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(index, j)</EM></DT>
<DD>
<P>Test whether bit number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>index</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>j</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is set.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>index</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>starts from 0 for the least significant bit.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(logbit? 0 #b1101) &#8658; #t
(logbit? 1 #b1101) &#8658; #f
(logbit? 2 #b1101) &#8658; #t
(logbit? 3 #b1101) &#8658; #t
(logbit? 4 #b1101) &#8658; #f
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-ash></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>ash</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n count</EM></DT>
<DT><A name=index-scm_005fash></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_ash</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(n, count)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>floor(n * 2^count)</EM>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be exact integers.</P>
<P>With<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>viewed as an infinite-precision twos-complement integer,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ash</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>means a left shift introducing zero bits when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is positive, or a right shift dropping bits when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is negative. This is an &#8220;arithmetic&#8221; shift.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(number-&gt;string (ash #b1 3) 2)     &#8658; "1000"
(number-&gt;string (ash #b1010 -1) 2) &#8658; "101"

;; -23 is bits ...11101001, -6 is bits ...111010
(ash -23 -2) &#8658; -6
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-round_002dash></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>round-ash</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n count</EM></DT>
<DT><A name=index-scm_005fround_005fash></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_round_ash</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(n, count)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>round(n * 2^count)</EM>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be exact integers.</P>
<P>With<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>viewed as an infinite-precision twos-complement integer,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>round-ash</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>means a left shift introducing zero bits when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is positive, or a right shift rounding to the nearest integer (with ties going to the nearest even integer) when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is negative. This is a rounded &#8220;arithmetic&#8221; shift.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(number-&gt;string (round-ash #b1 3) 2)     &#8658; \"1000\"
(number-&gt;string (round-ash #b1010 -1) 2) &#8658; \"101\"
(number-&gt;string (round-ash #b1010 -2) 2) &#8658; \"10\"
(number-&gt;string (round-ash #b1011 -2) 2) &#8658; \"11\"
(number-&gt;string (round-ash #b1101 -2) 2) &#8658; \"11\"
(number-&gt;string (round-ash #b1110 -2) 2) &#8658; \"100\"
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-logcount></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>logcount</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n</EM></DT>
<DT><A name=index-scm_005flogcount></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_logcount</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(n)</EM></DT>
<DD>
<P>Return the number of bits in integer<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is positive, the 1-bits in its binary representation are counted. If negative, the 0-bits in its two&#8217;s-complement binary representation are counted. If zero, 0 is returned.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(logcount #b10101010)
   &#8658; 4
(logcount 0)
   &#8658; 0
(logcount -2)
   &#8658; 1
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-integer_002dlength></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>integer-length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n</EM></DT>
<DT><A name=index-scm_005finteger_005flength></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_integer_length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(n)</EM></DT>
<DD>
<P>Return the number of bits necessary to represent<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>.</P>
<P>For positive<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>this is how many bits to the most significant one bit. For negative<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>it&#8217;s how many bits to the most significant zero bit in twos complement form.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(integer-length #b10101010) &#8658; 8
(integer-length #b1111)     &#8658; 4
(integer-length 0)          &#8658; 0
(integer-length -1)         &#8658; 0
(integer-length -256)       &#8658; 8
(integer-length -257)       &#8658; 9
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-integer_002dexpt></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>integer-expt</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n k</EM></DT>
<DT><A name=index-scm_005finteger_005fexpt></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_integer_expt</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(n, k)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>raised to the power<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be an exact integer,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be any number.</P>
<P>Negative<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is supported, and results in<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>1/n^abs(k)</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the usual way.<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>n</VAR>^0</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 1, as usual, and that includes<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>0^0</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 1.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(integer-expt 2 5)   &#8658; 32
(integer-expt -3 3)  &#8658; -27
(integer-expt 5 -3)  &#8658; 1/125
(integer-expt 0 0)   &#8658; 1
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bit_002dextract></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bit-extract</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n start end</EM></DT>
<DT><A name=index-scm_005fbit_005fextract></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bit_extract</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(n, start, end)</EM></DT>
<DD>
<P>Return the integer composed of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(inclusive) through<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(exclusive) bits of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR>th bit becomes the 0-th bit in the result.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(number-&gt;string (bit-extract #b1101101010 0 4) 2)
   &#8658; "1010"
(number-&gt;string (bit-extract #b1101101010 4 9) 2)
   &#8658; "10110"
</PRE></DIV></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Random></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Bitwise-Operations" rel=prev>Bitwise Operations</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Numbers" rel=up>Numbers</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Random-Number-Generation></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.2.14 Random Number Generation</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Pseudo-random numbers are generated from a random state object, which can be created with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>seed-&gt;random-state</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>datum-&gt;random-state</CODE>. An external representation (i.e. one which can written with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and read with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read</CODE>) of a random state object can be obtained via<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>random-state-&gt;datum</CODE>. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>state</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameter to the various functions below is optional, it defaults to the state object in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*random-state*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>variable.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-copy_002drandom_002dstate></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>copy-random-state</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[state]</EM></DT>
<DT><A name=index-scm_005fcopy_005frandom_005fstate></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_copy_random_state</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(state)</EM></DT>
<DD>
<P>Return a copy of the random state<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>state</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-random></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>random</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n [state]</EM></DT>
<DT><A name=index-scm_005frandom></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_random</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(n, state)</EM></DT>
<DD>
<P>Return a number in [0,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>).</P>
<P>Accepts a positive integer or real n and returns a number of the same type between zero (inclusive) and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(exclusive). The values returned have a uniform distribution.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-random_003aexp></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>random:exp</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[state]</EM></DT>
<DT><A name=index-scm_005frandom_005fexp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_random_exp</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(state)</EM></DT>
<DD>
<P>Return an inexact real in an exponential distribution with mean 1. For an exponential distribution with mean<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>u</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(*<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>u</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(random:exp))</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-random_003ahollow_002dsphere_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>random:hollow-sphere!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vect [state]</EM></DT>
<DT><A name=index-scm_005frandom_005fhollow_005fsphere_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_random_hollow_sphere_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vect, state)</EM></DT>
<DD>
<P>Fills<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vect</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with inexact real random numbers the sum of whose squares is equal to 1.0. Thinking of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vect</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as coordinates in space of dimension<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>=</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(vector-length<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vect</VAR>)</CODE>, the coordinates are uniformly distributed over the surface of the unit n-sphere.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-random_003anormal></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>random:normal</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[state]</EM></DT>
<DT><A name=index-scm_005frandom_005fnormal></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_random_normal</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(state)</EM></DT>
<DD>
<P>Return an inexact real in a normal distribution. The distribution used has mean 0 and standard deviation 1. For a normal distribution with mean<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>m</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and standard deviation<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>d</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(+<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>m</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(*<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>d</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(random:normal)))</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-random_003anormal_002dvector_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>random:normal-vector!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vect [state]</EM></DT>
<DT><A name=index-scm_005frandom_005fnormal_005fvector_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_random_normal_vector_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vect, state)</EM></DT>
<DD>
<P>Fills<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vect</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with inexact real random numbers that are independent and standard normally distributed (i.e., with mean 0 and variance 1).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-random_003asolid_002dsphere_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>random:solid-sphere!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vect [state]</EM></DT>
<DT><A name=index-scm_005frandom_005fsolid_005fsphere_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_random_solid_sphere_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vect, state)</EM></DT>
<DD>
<P>Fills<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vect</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with inexact real random numbers the sum of whose squares is less than 1.0. Thinking of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vect</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as coordinates in space of dimension<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>=</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(vector-length<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vect</VAR>)</CODE>, the coordinates are uniformly distributed within the unit<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>-sphere.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-random_003auniform></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>random:uniform</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[state]</EM></DT>
<DT><A name=index-scm_005frandom_005funiform></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_random_uniform</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(state)</EM></DT>
<DD>
<P>Return a uniformly distributed inexact real random number in [0,1).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-seed_002d_003erandom_002dstate></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>seed-&gt;random-state</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>seed</EM></DT>
<DT><A name=index-scm_005fseed_005fto_005frandom_005fstate></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_seed_to_random_state</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(seed)</EM></DT>
<DD>
<P>Return a new random state using<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>seed</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-datum_002d_003erandom_002dstate></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>datum-&gt;random-state</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>datum</EM></DT>
<DT><A name=index-scm_005fdatum_005fto_005frandom_005fstate></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_datum_to_random_state</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(datum)</EM></DT>
<DD>
<P>Return a new random state from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>datum</VAR>, which should have been obtained by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>random-state-&gt;datum</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-random_002dstate_002d_003edatum></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>random-state-&gt;datum</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>state</EM></DT>
<DT><A name=index-scm_005frandom_005fstate_005fto_005fdatum></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_random_state_to_datum</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(state)</EM></DT>
<DD>
<P>Return a datum representation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>state</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>that may be written out and read back with the Scheme reader.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-random_002dstate_002dfrom_002dplatform></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>random-state-from-platform</STRONG></DT>
<DT><A name=index-scm_005frandom_005fstate_005ffrom_005fplatform></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_random_state_from_platform</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Construct a new random state seeded from a platform-specific source of entropy, appropriate for use in non-security-critical applications. Currently<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>/dev/urandom</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is tried first, or else the seed is based on the time, date, process ID, an address from a freshly allocated heap cell, an address from the local stack frame, and a high-resolution timer if available.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_002arandom_002dstate_002a></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>*random-state*</STRONG></DT>
<DD>
<P>The global random state used by the above functions when the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>state</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameter is not given.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that the initial value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*random-state*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the same every time Guile starts up. Therefore, if you don&#8217;t pass a<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>state</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameter to the above procedures, and you don&#8217;t set<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*random-state*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(seed-&gt;random-state your-seed)</CODE>, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>your-seed</CODE>is something that<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>isn&#8217;t</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>the same every time, you&#8217;ll get the same sequence of &#8220;random&#8221; numbers on every run.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For example, unless the relevant source code has changed,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(map random (cdr (iota 30)))</CODE>, if the first use of random numbers since Guile started up, will always give:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(map random (cdr (iota 19)))
&#8658;
(0 1 1 2 2 2 1 2 6 7 10 0 5 3 12 5 5 12)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To seed the random state in a sensible way for non-security-critical applications, do this during initialization of your program:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(set! *random-state* (random-state-from-platform))
</PRE></DIV>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Characters></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Character-Sets" rel=next>Character Sets</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Numbers" rel=prev>Numbers</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Simple-Data-Types" rel=up>Simple Data Types</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Characters-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.6.3 Characters</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Characters></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In Scheme, there is a data type to describe a single character.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Defining what exactly a character<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>is</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be more complicated than it seems. Guile follows the advice of R6RS and uses The Unicode Standard to help define what a character is. So, for Guile, a character is anything in the Unicode Character Database.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-code-point></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Unicode-code-point></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The Unicode Character Database is basically a table of characters indexed using integers called &#8217;code points&#8217;. Valid code points are in the ranges 0 to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#xD7FF</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>inclusive or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#xE000</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#x10FFFF</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>inclusive, which is about 1.1 million code points.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-designated-code-point></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-code-point_002c-designated></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Any code point that has been assigned to a character or that has otherwise been given a meaning by Unicode is called a &#8217;designated code point&#8217;. Most of the designated code points, about 200,000 of them, indicate characters, accents or other combining marks that modify other characters, symbols, whitespace, and control characters. Some are not characters but indicators that suggest how to format or display neighboring characters.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-reserved-code-point></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-code-point_002c-reserved></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If a code point is not a designated code point &#8211; if it has not been assigned to a character by The Unicode Standard &#8211; it is a &#8217;reserved code point&#8217;, meaning that they are reserved for future use. Most of the code points, about 800,000, are &#8217;reserved code points&#8217;.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">By convention, a Unicode code point is written as &#8220;U+XXXX&#8221; where &#8220;XXXX&#8221; is a hexadecimal number. Please note that this convenient notation is not valid code. Guile does not interpret &#8220;U+XXXX&#8221; as a character.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In Scheme, a character literal is written as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\<VAR>name</VAR></CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the name of the character that you want. Printable characters have their usual single character name; for example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\a</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a lower case<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>a</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Some of the code points are &#8217;combining characters&#8217; that are not meant to be printed by themselves but are instead meant to modify the appearance of the previous character. For combining characters, an alternate form of the character literal is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>followed by U+25CC (a small, dotted circle), followed by the combining character. This allows the combining character to be drawn on the circle, not on the backslash of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Many of the non-printing characters, such as whitespace characters and control characters, also have names.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The most commonly used non-printing characters have long character names, described in the table below.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>Character Name</TD>
<TD>Codepoint</TD></TR>
<TR>
<TD><CODE>#\nul</CODE></TD>
<TD>U+0000</TD></TR>
<TR>
<TD><CODE>#\alarm</CODE></TD>
<TD>u+0007</TD></TR>
<TR>
<TD><CODE>#\backspace</CODE></TD>
<TD>U+0008</TD></TR>
<TR>
<TD><CODE>#\tab</CODE></TD>
<TD>U+0009</TD></TR>
<TR>
<TD><CODE>#\linefeed</CODE></TD>
<TD>U+000A</TD></TR>
<TR>
<TD><CODE>#\newline</CODE></TD>
<TD>U+000A</TD></TR>
<TR>
<TD><CODE>#\vtab</CODE></TD>
<TD>U+000B</TD></TR>
<TR>
<TD><CODE>#\page</CODE></TD>
<TD>U+000C</TD></TR>
<TR>
<TD><CODE>#\return</CODE></TD>
<TD>U+000D</TD></TR>
<TR>
<TD><CODE>#\esc</CODE></TD>
<TD>U+001B</TD></TR>
<TR>
<TD><CODE>#\space</CODE></TD>
<TD>U+0020</TD></TR>
<TR>
<TD><CODE>#\delete</CODE></TD>
<TD>U+007F</TD></TR></TBODY></TABLE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">There are also short names for all of the &#8220;C0 control characters&#8221; (those with code points below 32). The following table lists the short name for each character.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD width="25%">0 =<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\nul</CODE></TD>
<TD width="25%">1 =<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\soh</CODE></TD>
<TD width="25%">2 =<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\stx</CODE></TD>
<TD width="25%">3 =<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\etx</CODE></TD></TR>
<TR>
<TD width="25%">4 =<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\eot</CODE></TD>
<TD width="25%">5 =<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\enq</CODE></TD>
<TD width="25%">6 =<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\ack</CODE></TD>
<TD width="25%">7 =<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\bel</CODE></TD></TR>
<TR>
<TD width="25%">8 =<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\bs</CODE></TD>
<TD width="25%">9 =<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\ht</CODE></TD>
<TD width="25%">10 =<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\lf</CODE></TD>
<TD width="25%">11 =<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\vt</CODE></TD></TR>
<TR>
<TD width="25%">12 =<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\ff</CODE></TD>
<TD width="25%">13 =<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\cr</CODE></TD>
<TD width="25%">14 =<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\so</CODE></TD>
<TD width="25%">15 =<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\si</CODE></TD></TR>
<TR>
<TD width="25%">16 =<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\dle</CODE></TD>
<TD width="25%">17 =<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\dc1</CODE></TD>
<TD width="25%">18 =<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\dc2</CODE></TD>
<TD width="25%">19 =<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\dc3</CODE></TD></TR>
<TR>
<TD width="25%">20 =<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\dc4</CODE></TD>
<TD width="25%">21 =<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\nak</CODE></TD>
<TD width="25%">22 =<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\syn</CODE></TD>
<TD width="25%">23 =<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\etb</CODE></TD></TR>
<TR>
<TD width="25%">24 =<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\can</CODE></TD>
<TD width="25%">25 =<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\em</CODE></TD>
<TD width="25%">26 =<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\sub</CODE></TD>
<TD width="25%">27 =<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\esc</CODE></TD></TR>
<TR>
<TD width="25%">28 =<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\fs</CODE></TD>
<TD width="25%">29 =<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\gs</CODE></TD>
<TD width="25%">30 =<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\rs</CODE></TD>
<TD width="25%">31 =<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\us</CODE></TD></TR>
<TR>
<TD width="25%">32 =<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\sp</CODE></TD></TR></TBODY></TABLE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The short name for the &#8220;delete&#8221; character (code point U+007F) is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\del</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The R7RS name for the &#8220;escape&#8221; character (code point U+001B) is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\escape</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">There are also a few alternative names left over for compatibility with previous versions of Guile.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<TBODY>
<TR>
<TD>Alternate</TD>
<TD>Standard</TD></TR>
<TR>
<TD><CODE>#\nl</CODE></TD>
<TD><CODE>#\newline</CODE></TD></TR>
<TR>
<TD><CODE>#\np</CODE></TD>
<TD><CODE>#\page</CODE></TD></TR>
<TR>
<TD><CODE>#\null</CODE></TD>
<TD><CODE>#\nul</CODE></TD></TR></TBODY></TABLE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Characters may also be written using their code point values. They can be written with as an octal number, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\10</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\bs</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\177</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\del</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If one prefers hex to octal, there is an additional syntax for character escapes:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\xHHHH</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8211; the letter &#8217;x&#8217; followed by a hexadecimal number of one to eight digits.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-char_003f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-scm_005fchar_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a character, else<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Fundamentally, the character comparison operations below are numeric comparisons of the character&#8217;s code points.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-char_003d_003f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_003d_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char=?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if code point of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is equal to the code point of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>, else<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-char_003c_003f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_003c_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char&lt;?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the code point of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is less than the code point of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>, else<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-char_003c_003d_003f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_003c_003d_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char&lt;=?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the code point of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is less than or equal to the code point of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>, else<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-char_003e_003f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_003e_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char&gt;?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the code point of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is greater than the code point of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>, else<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-char_003e_003d_003f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_003e_003d_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char&gt;=?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the code point of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is greater than or equal to the code point of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>, else<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-case-folding></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Case-insensitive character comparisons use<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>Unicode case folding</EM>. In case folding comparisons, if a character is lowercase and has an uppercase form that can be expressed as a single character, it is converted to uppercase before comparison. All other characters undergo no conversion before the comparison occurs. This includes the German sharp S (Eszett) which is not uppercased before conversion because its uppercase form has two characters. Unicode case folding is language independent: it uses rules that are generally true, but, it cannot cover all cases for all languages.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-char_002dci_003d_003f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dci_003d_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-ci=?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the case-folded code point of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the same as the case-folded code point of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>, else<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-char_002dci_003c_003f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dci_003c_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-ci&lt;?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the case-folded code point of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is less than the case-folded code point of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>, else<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-char_002dci_003c_003d_003f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dci_003c_003d_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-ci&lt;=?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the case-folded code point of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is less than or equal to the case-folded code point of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>, else<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-char_002dci_003e_003f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dci_003e_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-ci&gt;?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the case-folded code point of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is greater than the case-folded code point of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>, else<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-char_002dci_003e_003d_003f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dci_003e_003d_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-ci&gt;=?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the case-folded code point of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is greater than or equal to the case-folded code point of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>, else<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-char_002dalphabetic_003f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dalphabetic_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-alphabetic?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>chr</EM></DT>
<DT><A name=index-scm_005fchar_005falphabetic_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_alphabetic_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(chr)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>chr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is alphabetic, else<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-char_002dnumeric_003f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dnumeric_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-numeric?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>chr</EM></DT>
<DT><A name=index-scm_005fchar_005fnumeric_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_numeric_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(chr)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>chr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is numeric, else<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-char_002dwhitespace_003f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dwhitespace_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-whitespace?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>chr</EM></DT>
<DT><A name=index-scm_005fchar_005fwhitespace_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_whitespace_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(chr)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>chr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is whitespace, else<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-char_002dupper_002dcase_003f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dupper_002dcase_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-upper-case?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>chr</EM></DT>
<DT><A name=index-scm_005fchar_005fupper_005fcase_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_upper_case_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(chr)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>chr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is uppercase, else<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-char_002dlower_002dcase_003f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dlower_002dcase_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-lower-case?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>chr</EM></DT>
<DT><A name=index-scm_005fchar_005flower_005fcase_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_lower_case_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(chr)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>chr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is lowercase, else<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dis_002dboth_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-is-both?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>chr</EM></DT>
<DT><A name=index-scm_005fchar_005fis_005fboth_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_is_both_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(chr)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>chr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is either uppercase or lowercase, else<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dgeneral_002dcategory></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-general-category</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>chr</EM></DT>
<DT><A name=index-scm_005fchar_005fgeneral_005fcategory></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_general_category</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(chr)</EM></DT>
<DD>
<P>Return a symbol giving the two-letter name of the Unicode general category assigned to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>chr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if no named category is assigned. The following table provides a list of category names along with their meanings.</P>
<TABLE>
<TBODY>
<TR>
<TD width="10%">Lu</TD>
<TD width="40%">Uppercase letter</TD>
<TD width="10%">Pf</TD>
<TD width="40%">Final quote punctuation</TD></TR>
<TR>
<TD width="10%">Ll</TD>
<TD width="40%">Lowercase letter</TD>
<TD width="10%">Po</TD>
<TD width="40%">Other punctuation</TD></TR>
<TR>
<TD width="10%">Lt</TD>
<TD width="40%">Titlecase letter</TD>
<TD width="10%">Sm</TD>
<TD width="40%">Math symbol</TD></TR>
<TR>
<TD width="10%">Lm</TD>
<TD width="40%">Modifier letter</TD>
<TD width="10%">Sc</TD>
<TD width="40%">Currency symbol</TD></TR>
<TR>
<TD width="10%">Lo</TD>
<TD width="40%">Other letter</TD>
<TD width="10%">Sk</TD>
<TD width="40%">Modifier symbol</TD></TR>
<TR>
<TD width="10%">Mn</TD>
<TD width="40%">Non-spacing mark</TD>
<TD width="10%">So</TD>
<TD width="40%">Other symbol</TD></TR>
<TR>
<TD width="10%">Mc</TD>
<TD width="40%">Combining spacing mark</TD>
<TD width="10%">Zs</TD>
<TD width="40%">Space separator</TD></TR>
<TR>
<TD width="10%">Me</TD>
<TD width="40%">Enclosing mark</TD>
<TD width="10%">Zl</TD>
<TD width="40%">Line separator</TD></TR>
<TR>
<TD width="10%">Nd</TD>
<TD width="40%">Decimal digit number</TD>
<TD width="10%">Zp</TD>
<TD width="40%">Paragraph separator</TD></TR>
<TR>
<TD width="10%">Nl</TD>
<TD width="40%">Letter number</TD>
<TD width="10%">Cc</TD>
<TD width="40%">Control</TD></TR>
<TR>
<TD width="10%">No</TD>
<TD width="40%">Other number</TD>
<TD width="10%">Cf</TD>
<TD width="40%">Format</TD></TR>
<TR>
<TD width="10%">Pc</TD>
<TD width="40%">Connector punctuation</TD>
<TD width="10%">Cs</TD>
<TD width="40%">Surrogate</TD></TR>
<TR>
<TD width="10%">Pd</TD>
<TD width="40%">Dash punctuation</TD>
<TD width="10%">Co</TD>
<TD width="40%">Private use</TD></TR>
<TR>
<TD width="10%">Ps</TD>
<TD width="40%">Open punctuation</TD>
<TD width="10%">Cn</TD>
<TD width="40%">Unassigned</TD></TR>
<TR>
<TD width="10%">Pe</TD>
<TD width="40%">Close punctuation</TD>
<TD width="10%"></TD>
<TD width="40%"></TD></TR>
<TR>
<TD width="10%">Pi</TD>
<TD width="40%">Initial quote punctuation</TD>
<TD width="10%"></TD>
<TD width="40%"></TD></TR></TBODY></TABLE></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-char_002d_003einteger-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002d_003einteger></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-&gt;integer</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>chr</EM></DT>
<DT><A name=index-scm_005fchar_005fto_005finteger></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_to_integer</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(chr)</EM></DT>
<DD>
<P>Return the code point of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>chr</VAR>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-integer_002d_003echar-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-integer_002d_003echar></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>integer-&gt;char</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n</EM></DT>
<DT><A name=index-scm_005finteger_005fto_005fchar></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_integer_to_char</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(n)</EM></DT>
<DD>
<P>Return the character that has code point<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>. The integer<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a valid code point. Valid code points are in the ranges 0 to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#xD7FF</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>inclusive or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#xE000</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#x10FFFF</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>inclusive.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-char_002dupcase-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dupcase></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-upcase</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>chr</EM></DT>
<DT><A name=index-scm_005fchar_005fupcase></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_upcase</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(chr)</EM></DT>
<DD>
<P>Return the uppercase character version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>chr</VAR>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-char_002ddowncase-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002ddowncase></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-downcase</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>chr</EM></DT>
<DT><A name=index-scm_005fchar_005fdowncase></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_downcase</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(chr)</EM></DT>
<DD>
<P>Return the lowercase character version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>chr</VAR>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-char_002dtitlecase-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dtitlecase></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-titlecase</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>chr</EM></DT>
<DT><A name=index-scm_005fchar_005ftitlecase></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_titlecase</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(chr)</EM></DT>
<DD>
<P>Return the titlecase character version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>chr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>if one exists; otherwise return the uppercase version.</P>
<P>For most characters these will be the same, but the Unicode Standard includes certain digraph compatibility characters, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>U+01F3</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8220;dz&#8221;, for which the uppercase and titlecase characters are different (<CODE>U+01F1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8220;DZ&#8221; and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>U+01F2</CODE>&#8220;Dz&#8221; in this case, respectively).</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-scm_005ft_005fwchar></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fupcase></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_wchar</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_upcase</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_wchar<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>c</VAR>)</EM></DT>
<DT><A name=index-scm_005fc_005fdowncase></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_wchar</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_downcase</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_wchar<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>c</VAR>)</EM></DT>
<DT><A name=index-scm_005fc_005ftitlecase></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_wchar</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_titlecase</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_wchar<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>c</VAR>)</EM></DT>
<DD>
<P>These C functions take an integer representation of a Unicode codepoint and return the codepoint corresponding to its uppercase, lowercase, and titlecase forms respectively. The type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_t_wchar</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a signed, 32-bit integer.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Character-Sets></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Strings" rel=next>Strings</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Characters" rel=prev>Characters</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Simple-Data-Types" rel=up>Simple Data Types</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Character-Sets-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.6.4 Character Sets</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The features described in this section correspond directly to SRFI-14.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The data type<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>charset</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>implements sets of characters (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Characters">Characters</A>). Because the internal representation of character sets is not visible to the user, a lot of procedures for handling them are provided.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Character sets can be created, extended, tested for the membership of a characters and be compared to other character sets.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Character-Set-Predicates_002fComparison">Character Set Predicates/Comparison</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Iterating-Over-Character-Sets">Iterating Over Character Sets</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Enumerate charset elements.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#Creating-Character-Sets">Creating Character Sets</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Making new charsets.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#Querying-Character-Sets">Querying Character Sets</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Test charsets for membership etc.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#Character_002dSet-Algebra">Character-Set Algebra</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Calculating new charsets.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=6 href="https://www.gnu.org/software/guile/manual/guile.html#Standard-Character-Sets">Standard Character Sets</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Variables containing predefined charsets.</TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Character-Set-Predicates_002fComparison></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Iterating-Over-Character-Sets" rel=next>Iterating Over Character Sets</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Character-Sets" rel=up>Character Sets</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Character-Set-Predicates_002fComparison-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.4.1 Character Set Predicates/Comparison</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Use these procedures for testing whether an object is a character set, or whether several character sets are equal or subsets of each other.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char-set-hash</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be used for calculating a hash value, maybe for usage in fast lookup procedures.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-scm_005fchar_005fset_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a character set,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_003d></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set=</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>char_set &#8230;</EM></DT>
<DT><A name=index-scm_005fchar_005fset_005feq></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_eq</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(char_sets)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if all given character sets are equal.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_003c_003d></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set&lt;=</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>char_set &#8230;</EM></DT>
<DT><A name=index-scm_005fchar_005fset_005fleq></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_leq</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(char_sets)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if every character set<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>char_set</VAR>i is a subset of character set<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>char_set</VAR>i+1.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_002dhash></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set-hash</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>cs [bound]</EM></DT>
<DT><A name=index-scm_005fchar_005fset_005fhash></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_hash</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(cs, bound)</EM></DT>
<DD>
<P>Compute a hash value for the character set<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cs</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bound</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is given and non-zero, it restricts the returned value to the range 0 &#8230;<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bound</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>- 1.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Iterating-Over-Character-Sets></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Creating-Character-Sets" rel=next>Creating Character Sets</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Character-Set-Predicates_002fComparison" rel=prev>Character Set Predicates/Comparison</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Character-Sets" rel=up>Character Sets</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Iterating-Over-Character-Sets-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.4.2 Iterating Over Character Sets</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Character set cursors are a means for iterating over the members of a character sets. After creating a character set cursor with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char-set-cursor</CODE>, a cursor can be dereferenced with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char-set-ref</CODE>, advanced to the next member with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char-set-cursor-next</CODE>. Whether a cursor has passed past the last element of the set can be checked with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>end-of-char-set?</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Additionally, mapping and (un-)folding procedures for character sets are provided.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_002dcursor></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set-cursor</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>cs</EM></DT>
<DT><A name=index-scm_005fchar_005fset_005fcursor></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_cursor</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(cs)</EM></DT>
<DD>
<P>Return a cursor into the character set<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cs</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>cs cursor</EM></DT>
<DT><A name=index-scm_005fchar_005fset_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(cs, cursor)</EM></DT>
<DD>
<P>Return the character at the current cursor position<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cursor</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the character set<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cs</VAR>. It is an error to pass a cursor for which<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>end-of-char-set?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns true.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_002dcursor_002dnext></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set-cursor-next</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>cs cursor</EM></DT>
<DT><A name=index-scm_005fchar_005fset_005fcursor_005fnext></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_cursor_next</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(cs, cursor)</EM></DT>
<DD>
<P>Advance the character set cursor<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cursor</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the next character in the character set<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cs</VAR>. It is an error if the cursor given satisfies<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>end-of-char-set?</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-end_002dof_002dchar_002dset_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>end-of-char-set?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>cursor</EM></DT>
<DT><A name=index-scm_005fend_005fof_005fchar_005fset_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_end_of_char_set_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(cursor)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cursor</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>has reached the end of a character set,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_002dfold></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set-fold</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>kons knil cs</EM></DT>
<DT><A name=index-scm_005fchar_005fset_005ffold></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_fold</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(kons, knil, cs)</EM></DT>
<DD>
<P>Fold the procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>kons</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>over the character set<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cs</VAR>, initializing it with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>knil</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_002dunfold></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set-unfold</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>p f g seed [base_cs]</EM></DT>
<DT><A name=index-scm_005fchar_005fset_005funfold></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_unfold</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(p, f, g, seed, base_cs)</EM></DT>
<DD>
<P>This is a fundamental constructor for character sets.</P>
<UL>
<LI><VAR>g</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used to generate a series of &#8220;seed&#8221; values from the initial seed:<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>seed</VAR>, (<VAR>g</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>seed</VAR>), (<VAR>g</VAR>^2<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>seed</VAR>), (<VAR>g</VAR>^3<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>seed</VAR>), &#8230;</LI>
<LI><VAR>p</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>tells us when to stop &#8211; when it returns true when applied to one of the seed values.</LI>
<LI><VAR>f</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>maps each seed value to a character. These characters are added to the base character set<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>base_cs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to form the result;<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>base_cs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>defaults to the empty set.</LI></UL></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_002dunfold_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set-unfold!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>p f g seed base_cs</EM></DT>
<DT><A name=index-scm_005fchar_005fset_005funfold_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_unfold_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(p, f, g, seed, base_cs)</EM></DT>
<DD>
<P>This is a fundamental constructor for character sets.</P>
<UL>
<LI><VAR>g</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used to generate a series of &#8220;seed&#8221; values from the initial seed:<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>seed</VAR>, (<VAR>g</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>seed</VAR>), (<VAR>g</VAR>^2<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>seed</VAR>), (<VAR>g</VAR>^3<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>seed</VAR>), &#8230;</LI>
<LI><VAR>p</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>tells us when to stop &#8211; when it returns true when applied to one of the seed values.</LI>
<LI><VAR>f</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>maps each seed value to a character. These characters are added to the base character set<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>base_cs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to form the result;<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>base_cs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>defaults to the empty set.</LI></UL></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_002dfor_002deach></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set-for-each</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc cs</EM></DT>
<DT><A name=index-scm_005fchar_005fset_005ffor_005feach></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_for_each</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(proc, cs)</EM></DT>
<DD>
<P>Apply<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to every character in the character set<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cs</VAR>. The return value is not specified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_002dmap></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set-map</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc cs</EM></DT>
<DT><A name=index-scm_005fchar_005fset_005fmap></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_map</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(proc, cs)</EM></DT>
<DD>
<P>Map the procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>over every character in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cs</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a character -&gt; character procedure.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Creating-Character-Sets></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Querying-Character-Sets" rel=next>Querying Character Sets</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Iterating-Over-Character-Sets" rel=prev>Iterating Over Character Sets</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Character-Sets" rel=up>Character Sets</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Creating-Character-Sets-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.4.3 Creating Character Sets</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">New character sets are produced with these procedures.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_002dcopy></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set-copy</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>cs</EM></DT>
<DT><A name=index-scm_005fchar_005fset_005fcopy></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_copy</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(cs)</EM></DT>
<DD>
<P>Return a newly allocated character set containing all characters in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cs</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>chr &#8230;</EM></DT>
<DT><A name=index-scm_005fchar_005fset></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(chrs)</EM></DT>
<DD>
<P>Return a character set containing all given characters.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-list_002d_003echar_002dset></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list-&gt;char-set</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>list [base_cs]</EM></DT>
<DT><A name=index-scm_005flist_005fto_005fchar_005fset></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_list_to_char_set</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(list, base_cs)</EM></DT>
<DD>
<P>Convert the character list<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to a character set. If the character set<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>base_cs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is given, the character in this set are also included in the result.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-list_002d_003echar_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list-&gt;char-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>list base_cs</EM></DT>
<DT><A name=index-scm_005flist_005fto_005fchar_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_list_to_char_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(list, base_cs)</EM></DT>
<DD>
<P>Convert the character list<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to a character set. The characters are added to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>base_cs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>base_cs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002d_003echar_002dset></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-&gt;char-set</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str [base_cs]</EM></DT>
<DT><A name=index-scm_005fstring_005fto_005fchar_005fset></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_to_char_set</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str, base_cs)</EM></DT>
<DD>
<P>Convert the string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to a character set. If the character set<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>base_cs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is given, the characters in this set are also included in the result.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002d_003echar_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-&gt;char-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str base_cs</EM></DT>
<DT><A name=index-scm_005fstring_005fto_005fchar_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_to_char_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str, base_cs)</EM></DT>
<DD>
<P>Convert the string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to a character set. The characters from the string are added to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>base_cs</VAR>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>base_cs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_002dfilter></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set-filter</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pred cs [base_cs]</EM></DT>
<DT><A name=index-scm_005fchar_005fset_005ffilter></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_filter</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pred, cs, base_cs)</EM></DT>
<DD>
<P>Return a character set containing every character from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>so that it satisfies<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred</VAR>. If provided, the characters from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>base_cs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are added to the result.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_002dfilter_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set-filter!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pred cs base_cs</EM></DT>
<DT><A name=index-scm_005fchar_005fset_005ffilter_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_filter_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pred, cs, base_cs)</EM></DT>
<DD>
<P>Return a character set containing every character from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>so that it satisfies<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred</VAR>. The characters are added to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>base_cs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>base_cs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-ucs_002drange_002d_003echar_002dset></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>ucs-range-&gt;char-set</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lower upper [error [base_cs]]</EM></DT>
<DT><A name=index-scm_005fucs_005frange_005fto_005fchar_005fset></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_ucs_range_to_char_set</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(lower, upper, error, base_cs)</EM></DT>
<DD>
<P>Return a character set containing all characters whose character codes lie in the half-open range [<VAR>lower</VAR>,<VAR>upper</VAR>).</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>error</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a true value, an error is signalled if the specified range contains characters which are not contained in the implemented character range. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>error</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, these characters are silently left out of the resulting character set.</P>
<P>The characters in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>base_cs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are added to the result, if given.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-ucs_002drange_002d_003echar_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>ucs-range-&gt;char-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lower upper error base_cs</EM></DT>
<DT><A name=index-scm_005fucs_005frange_005fto_005fchar_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_ucs_range_to_char_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(lower, upper, error, base_cs)</EM></DT>
<DD>
<P>Return a character set containing all characters whose character codes lie in the half-open range [<VAR>lower</VAR>,<VAR>upper</VAR>).</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>error</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a true value, an error is signalled if the specified range contains characters which are not contained in the implemented character range. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>error</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, these characters are silently left out of the resulting character set.</P>
<P>The characters are added to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>base_cs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>base_cs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_002d_003echar_002dset></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>-&gt;char-set</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-scm_005fto_005fchar_005fset></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_to_char_set</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x)</EM></DT>
<DD>
<P>Coerces x into a char-set.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be a string, character or char-set. A string is converted to the set of its constituent characters; a character is converted to a singleton set; a char-set is returned as-is.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Querying-Character-Sets></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Character_002dSet-Algebra" rel=next>Character-Set Algebra</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Creating-Character-Sets" rel=prev>Creating Character Sets</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Character-Sets" rel=up>Character Sets</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Querying-Character-Sets-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.4.4 Querying Character Sets</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Access the elements and other information of a character set with these procedures.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0025char_002dset_002ddump></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>%char-set-dump</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>cs</EM></DT>
<DD>
<P>Returns an association list containing debugging information for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cs</VAR>. The association list has the following entries.</P>
<DL compact>
<DT><CODE>char-set</CODE></DT>
<DD>
<P>The char-set itself</P></DD>
<DT><CODE>len</CODE></DT>
<DD>
<P>The number of groups of contiguous code points the char-set contains</P></DD>
<DT><CODE>ranges</CODE></DT>
<DD>
<P>A list of lists where each sublist is a range of code points and their associated characters</P></DD></DL>
<P>The return value of this function cannot be relied upon to be consistent between versions of Guile and should not be used in code.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_002dsize></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set-size</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>cs</EM></DT>
<DT><A name=index-scm_005fchar_005fset_005fsize></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_size</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(cs)</EM></DT>
<DD>
<P>Return the number of elements in character set<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cs</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_002dcount></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set-count</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pred cs</EM></DT>
<DT><A name=index-scm_005fchar_005fset_005fcount></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_count</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pred, cs)</EM></DT>
<DD>
<P>Return the number of the elements int the character set<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>which satisfy the predicate<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_002d_003elist></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set-&gt;list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>cs</EM></DT>
<DT><A name=index-scm_005fchar_005fset_005fto_005flist></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_to_list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(cs)</EM></DT>
<DD>
<P>Return a list containing the elements of the character set<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cs</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_002d_003estring></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set-&gt;string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>cs</EM></DT>
<DT><A name=index-scm_005fchar_005fset_005fto_005fstring></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_to_string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(cs)</EM></DT>
<DD>
<P>Return a string containing the elements of the character set<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cs</VAR>. The order in which the characters are placed in the string is not defined.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_002dcontains_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set-contains?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>cs ch</EM></DT>
<DT><A name=index-scm_005fchar_005fset_005fcontains_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_contains_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(cs, ch)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the character<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ch</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is contained in the character set<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cs</VAR>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_002devery></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set-every</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pred cs</EM></DT>
<DT><A name=index-scm_005fchar_005fset_005fevery></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_every</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pred, cs)</EM></DT>
<DD>
<P>Return a true value if every character in the character set<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>satisfies the predicate<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_002dany></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set-any</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pred cs</EM></DT>
<DT><A name=index-scm_005fchar_005fset_005fany></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_any</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pred, cs)</EM></DT>
<DD>
<P>Return a true value if any character in the character set<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>satisfies the predicate<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred</VAR>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Character_002dSet-Algebra></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Standard-Character-Sets" rel=next>Standard Character Sets</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Querying-Character-Sets" rel=prev>Querying Character Sets</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Character-Sets" rel=up>Character Sets</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Character_002dSet-Algebra-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.4.5 Character-Set Algebra</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Character sets can be manipulated with the common set algebra operation, such as union, complement, intersection etc. All of these procedures provide side-effecting variants, which modify their character set argument(s).</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_002dadjoin></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set-adjoin</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>cs chr &#8230;</EM></DT>
<DT><A name=index-scm_005fchar_005fset_005fadjoin></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_adjoin</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(cs, chrs)</EM></DT>
<DD>
<P>Add all character arguments to the first argument, which must be a character set.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_002ddelete></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set-delete</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>cs chr &#8230;</EM></DT>
<DT><A name=index-scm_005fchar_005fset_005fdelete></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_delete</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(cs, chrs)</EM></DT>
<DD>
<P>Delete all character arguments from the first argument, which must be a character set.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_002dadjoin_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set-adjoin!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>cs chr &#8230;</EM></DT>
<DT><A name=index-scm_005fchar_005fset_005fadjoin_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_adjoin_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(cs, chrs)</EM></DT>
<DD>
<P>Add all character arguments to the first argument, which must be a character set.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_002ddelete_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set-delete!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>cs chr &#8230;</EM></DT>
<DT><A name=index-scm_005fchar_005fset_005fdelete_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_delete_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(cs, chrs)</EM></DT>
<DD>
<P>Delete all character arguments from the first argument, which must be a character set.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_002dcomplement></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set-complement</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>cs</EM></DT>
<DT><A name=index-scm_005fchar_005fset_005fcomplement></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_complement</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(cs)</EM></DT>
<DD>
<P>Return the complement of the character set<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cs</VAR>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that the complement of a character set is likely to contain many reserved code points (code points that are not associated with characters). It may be helpful to modify the output of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char-set-complement</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>by computing its intersection with the set of designated code points,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char-set:designated</CODE>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_002dunion></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set-union</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>cs &#8230;</EM></DT>
<DT><A name=index-scm_005fchar_005fset_005funion></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_union</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(char_sets)</EM></DT>
<DD>
<P>Return the union of all argument character sets.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_002dintersection></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set-intersection</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>cs &#8230;</EM></DT>
<DT><A name=index-scm_005fchar_005fset_005fintersection></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_intersection</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(char_sets)</EM></DT>
<DD>
<P>Return the intersection of all argument character sets.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_002ddifference></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set-difference</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>cs1 cs &#8230;</EM></DT>
<DT><A name=index-scm_005fchar_005fset_005fdifference></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_difference</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(cs1, char_sets)</EM></DT>
<DD>
<P>Return the difference of all argument character sets.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_002dxor></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set-xor</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>cs &#8230;</EM></DT>
<DT><A name=index-scm_005fchar_005fset_005fxor></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_xor</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(char_sets)</EM></DT>
<DD>
<P>Return the exclusive-or of all argument character sets.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_002ddiff_002bintersection></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set-diff+intersection</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>cs1 cs &#8230;</EM></DT>
<DT><A name=index-scm_005fchar_005fset_005fdiff_005fplus_005fintersection></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_diff_plus_intersection</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(cs1, char_sets)</EM></DT>
<DD>
<P>Return the difference and the intersection of all argument character sets.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_002dcomplement_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set-complement!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>cs</EM></DT>
<DT><A name=index-scm_005fchar_005fset_005fcomplement_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_complement_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(cs)</EM></DT>
<DD>
<P>Return the complement of the character set<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cs</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_002dunion_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set-union!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>cs1 cs &#8230;</EM></DT>
<DT><A name=index-scm_005fchar_005fset_005funion_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_union_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(cs1, char_sets)</EM></DT>
<DD>
<P>Return the union of all argument character sets.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_002dintersection_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set-intersection!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>cs1 cs &#8230;</EM></DT>
<DT><A name=index-scm_005fchar_005fset_005fintersection_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_intersection_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(cs1, char_sets)</EM></DT>
<DD>
<P>Return the intersection of all argument character sets.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_002ddifference_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set-difference!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>cs1 cs &#8230;</EM></DT>
<DT><A name=index-scm_005fchar_005fset_005fdifference_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_difference_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(cs1, char_sets)</EM></DT>
<DD>
<P>Return the difference of all argument character sets.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_002dxor_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set-xor!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>cs1 cs &#8230;</EM></DT>
<DT><A name=index-scm_005fchar_005fset_005fxor_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_xor_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(cs1, char_sets)</EM></DT>
<DD>
<P>Return the exclusive-or of all argument character sets.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_002ddiff_002bintersection_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set-diff+intersection!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>cs1 cs2 cs &#8230;</EM></DT>
<DT><A name=index-scm_005fchar_005fset_005fdiff_005fplus_005fintersection_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_diff_plus_intersection_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(cs1, cs2, char_sets)</EM></DT>
<DD>
<P>Return the difference and the intersection of all argument character sets.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Standard-Character-Sets></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Character_002dSet-Algebra" rel=prev>Character-Set Algebra</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Character-Sets" rel=up>Character Sets</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Standard-Character-Sets-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.4.6 Standard Character Sets</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In order to make the use of the character set data type and procedures useful, several predefined character set variables exist.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-codeset></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-charset></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-locale></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">These character sets are locale independent and are not recomputed upon a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setlocale</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>call. They contain characters from the whole range of Unicode code points. For instance,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char-set:letter</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>contains about 100,000 characters.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_003alower_002dcase></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set:lower-case</STRONG></DT>
<DT><A name=index-scm_005fchar_005fset_005flower_005fcase></A>C Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_lower_case</STRONG></DT>
<DD>
<P>All lower-case characters.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_003aupper_002dcase></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set:upper-case</STRONG></DT>
<DT><A name=index-scm_005fchar_005fset_005fupper_005fcase></A>C Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_upper_case</STRONG></DT>
<DD>
<P>All upper-case characters.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_003atitle_002dcase></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set:title-case</STRONG></DT>
<DT><A name=index-scm_005fchar_005fset_005ftitle_005fcase></A>C Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_title_case</STRONG></DT>
<DD>
<P>All single characters that function as if they were an upper-case letter followed by a lower-case letter.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_003aletter></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set:letter</STRONG></DT>
<DT><A name=index-scm_005fchar_005fset_005fletter></A>C Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_letter</STRONG></DT>
<DD>
<P>All letters. This includes<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char-set:lower-case</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char-set:upper-case</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char-set:title-case</CODE>, and many letters that have no case at all. For example, Chinese and Japanese characters typically have no concept of case.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_003adigit></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set:digit</STRONG></DT>
<DT><A name=index-scm_005fchar_005fset_005fdigit></A>C Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_digit</STRONG></DT>
<DD>
<P>All digits.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_003aletter_002bdigit></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set:letter+digit</STRONG></DT>
<DT><A name=index-scm_005fchar_005fset_005fletter_005fand_005fdigit></A>C Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_letter_and_digit</STRONG></DT>
<DD>
<P>The union of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char-set:letter</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char-set:digit</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_003agraphic></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set:graphic</STRONG></DT>
<DT><A name=index-scm_005fchar_005fset_005fgraphic></A>C Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_graphic</STRONG></DT>
<DD>
<P>All characters which would put ink on the paper.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_003aprinting></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set:printing</STRONG></DT>
<DT><A name=index-scm_005fchar_005fset_005fprinting></A>C Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_printing</STRONG></DT>
<DD>
<P>The union of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char-set:graphic</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char-set:whitespace</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_003awhitespace></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set:whitespace</STRONG></DT>
<DT><A name=index-scm_005fchar_005fset_005fwhitespace></A>C Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_whitespace</STRONG></DT>
<DD>
<P>All whitespace characters.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_003ablank></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set:blank</STRONG></DT>
<DT><A name=index-scm_005fchar_005fset_005fblank></A>C Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_blank</STRONG></DT>
<DD>
<P>All horizontal whitespace characters, which notably includes<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\space</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\tab</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_003aiso_002dcontrol></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set:iso-control</STRONG></DT>
<DT><A name=index-scm_005fchar_005fset_005fiso_005fcontrol></A>C Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_iso_control</STRONG></DT>
<DD>
<P>The ISO control characters are the C0 control characters (U+0000 to U+001F), delete (U+007F), and the C1 control characters (U+0080 to U+009F).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_003apunctuation></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set:punctuation</STRONG></DT>
<DT><A name=index-scm_005fchar_005fset_005fpunctuation></A>C Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_punctuation</STRONG></DT>
<DD>
<P>All punctuation characters, such as the characters<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>!"#%&amp;'()*,-./:;?@[\\]_{}</CODE></P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_003asymbol></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set:symbol</STRONG></DT>
<DT><A name=index-scm_005fchar_005fset_005fsymbol></A>C Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_symbol</STRONG></DT>
<DD>
<P>All symbol characters, such as the characters<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$+&lt;=&gt;^`|~</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_003ahex_002ddigit></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set:hex-digit</STRONG></DT>
<DT><A name=index-scm_005fchar_005fset_005fhex_005fdigit></A>C Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_hex_digit</STRONG></DT>
<DD>
<P>The hexadecimal digits<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0123456789abcdefABCDEF</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_003aascii></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set:ascii</STRONG></DT>
<DT><A name=index-scm_005fchar_005fset_005fascii></A>C Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_ascii</STRONG></DT>
<DD>
<P>All ASCII characters.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_003aempty></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set:empty</STRONG></DT>
<DT><A name=index-scm_005fchar_005fset_005fempty></A>C Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_empty</STRONG></DT>
<DD>
<P>The empty character set.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_003adesignated></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set:designated</STRONG></DT>
<DT><A name=index-scm_005fchar_005fset_005fdesignated></A>C Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_designated</STRONG></DT>
<DD>
<P>This character set contains all designated code points. This includes all the code points to which Unicode has assigned a character or other meaning.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dset_003afull></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-set:full</STRONG></DT>
<DT><A name=index-scm_005fchar_005fset_005ffull></A>C Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_set_full</STRONG></DT>
<DD>
<P>This character set contains all possible code points. This includes both designated and reserved code points.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Strings></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Bytevectors" rel=next>Bytevectors</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Character-Sets" rel=prev>Character Sets</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Simple-Data-Types" rel=up>Simple Data Types</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Strings-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.6.5 Strings</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Strings></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Strings are fixed-length sequences of characters. They can be created by calling constructor procedures, but they can also literally get entered at the<SPAN class=Apple-converted-space>&nbsp;</SPAN><ACRONYM>REPL</ACRONYM><SPAN class=Apple-converted-space>&nbsp;</SPAN>or in Scheme source files.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Strings always carry the information about how many characters they are composed of with them, so there is no special end-of-string character, like in C. That means that Scheme strings can contain any character, even the &#8216;<SAMP>#\nul</SAMP>&#8217; character &#8216;<SAMP>\0</SAMP>&#8217;.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To use strings efficiently, you need to know a bit about how Guile implements them. In Guile, a string consists of two parts, a head and the actual memory where the characters are stored. When a string (or a substring of it) is copied, only a new head gets created, the memory is usually not copied. The two heads start out pointing to the same memory.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When one of these two strings is modified, as with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string-set!</CODE>, their common memory does get copied so that each string has its own memory and modifying one does not accidentally modify the other as well. Thus, Guile&#8217;s strings are &#8216;copy on write&#8217;; the actual copying of their memory is delayed until one string is written to.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This implementation makes functions like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>substring</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>very efficient in the common case that no modifications are done to the involved strings.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If you do know that your strings are getting modified right away, you can use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>substring/copy</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>substring</CODE>. This function performs the copy immediately at the time of creation. This is more efficient, especially in a multi-threaded program. Also,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>substring/copy</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can avoid the problem that a short substring holds on to the memory of a very large original string that could otherwise be recycled.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If you want to avoid the copy altogether, so that modifications of one string show up in the other, you can use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>substring/shared</CODE>. The strings created by this procedure are called<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>mutation sharing substrings</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>since the substring and the original string share modifications to each other.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If you want to prevent modifications, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>substring/read-only</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile provides all procedures of SRFI-13 and a few more.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#String-Syntax">String Syntax</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Read syntax for strings.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#String-Predicates">String Predicates</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Testing strings for certain properties.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#String-Constructors">String Constructors</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Creating new string objects.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#List_002fString-Conversion">List/String Conversion</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Converting from/to lists of characters.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#String-Selection">String Selection</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Select portions from strings.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=6 href="https://www.gnu.org/software/guile/manual/guile.html#String-Modification">String Modification</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Modify parts or whole strings.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=7 href="https://www.gnu.org/software/guile/manual/guile.html#String-Comparison">String Comparison</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Lexicographic ordering predicates.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=8 href="https://www.gnu.org/software/guile/manual/guile.html#String-Searching">String Searching</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Searching in strings.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=9 href="https://www.gnu.org/software/guile/manual/guile.html#Alphabetic-Case-Mapping">Alphabetic Case Mapping</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Convert the alphabetic case of strings.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Reversing-and-Appending-Strings">Reversing and Appending Strings</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Appending strings to form a new string.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Mapping-Folding-and-Unfolding">Mapping Folding and Unfolding</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Iterating over strings.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Miscellaneous-String-Operations">Miscellaneous String Operations</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Replicating, insertion, parsing, ...</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Representing-Strings-as-Bytes">Representing Strings as Bytes</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Encoding and decoding strings.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Conversion-to_002ffrom-C">Conversion to/from C</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#String-Internals">String Internals</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>The storage strategy for strings.</TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=String-Syntax></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#String-Predicates" rel=next>String Predicates</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Strings" rel=up>Strings</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=String-Read-Syntax></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.5.1 String Read Syntax</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The read syntax for strings is an arbitrarily long sequence of characters enclosed in double quotes (<CODE>"</CODE>).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Backslash is an escape character and can be used to insert the following special characters.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>\"</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>\\</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are R5RS standard,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>\|</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is R7RS standard, the next seven are R6RS standard &#8212; notice they follow C syntax &#8212; and the remaining four are Guile extensions.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DT><CODE>\\</CODE></DT>
<DD>
<P>Backslash character.</P></DD>
<DT><CODE>\"</CODE></DT>
<DD>
<P>Double quote character (an unescaped<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is otherwise the end of the string).</P></DD>
<DT><CODE>\|</CODE></DT>
<DD>
<P>Vertical bar character.</P></DD>
<DT><CODE>\a</CODE></DT>
<DD>
<P>Bell character (ASCII 7).</P></DD>
<DT><CODE>\f</CODE></DT>
<DD>
<P>Formfeed character (ASCII 12).</P></DD>
<DT><CODE>\n</CODE></DT>
<DD>
<P>Newline character (ASCII 10).</P></DD>
<DT><CODE>\r</CODE></DT>
<DD>
<P>Carriage return character (ASCII 13).</P></DD>
<DT><CODE>\t</CODE></DT>
<DD>
<P>Tab character (ASCII 9).</P></DD>
<DT><CODE>\v</CODE></DT>
<DD>
<P>Vertical tab character (ASCII 11).</P></DD>
<DT><CODE>\b</CODE></DT>
<DD>
<P>Backspace character (ASCII 8).</P></DD>
<DT><CODE>\0</CODE></DT>
<DD>
<P>NUL character (ASCII 0).</P></DD>
<DT><CODE>\</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>followed by newline (ASCII 10)</DT>
<DD>
<P>Nothing. This way if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>\</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the last character in a line, the string will continue with the first character from the next line, without a line break.</P>
<P>If the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hungry-eol-escapes</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>reader option is enabled, which is not the case by default, leading whitespace on the next line is discarded.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>"foo\
  bar"
&#8658; "foo  bar"
(read-enable 'hungry-eol-escapes)
"foo\
  bar"
&#8658; "foobar"
</PRE></DIV></DD>
<DT><CODE>\xHH</CODE></DT>
<DD>
<P>Character code given by two hexadecimal digits. For example<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>\x7f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for an ASCII DEL (127).</P></DD>
<DT><CODE>\uHHHH</CODE></DT>
<DD>
<P>Character code given by four hexadecimal digits. For example<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>\u0100</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for a capital A with macron (U+0100).</P></DD>
<DT><CODE>\UHHHHHH</CODE></DT>
<DD>
<P>Character code given by six hexadecimal digits. For example<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>\U010402</CODE>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following are examples of string literals:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>"foo"
"bar plonk"
"Hello World"
"\"Hi\", he said."
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The three escape sequences<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>\xHH</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>\uHHHH</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>\UHHHHHH</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>were chosen to not break compatibility with code written for previous versions of Guile. The R6RS specification suggests a different, incompatible syntax for hex escapes:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>\xHHHH;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8211; a character code followed by one to eight hexadecimal digits terminated with a semicolon. If this escape format is desired instead, it can be enabled with the reader option<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>r6rs-hex-escapes</CODE>.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(read-enable 'r6rs-hex-escapes)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For more on reader options, See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Scheme-Read">Scheme Read</A>.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=String-Predicates></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#String-Constructors" rel=next>String Constructors</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#String-Syntax" rel=prev>String Syntax</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Strings" rel=up>Strings</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=String-Predicates-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.5.2 String Predicates</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following procedures can be used to check whether a given string fulfills some specified property.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-string_003f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-scm_005fstring_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a string, else<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fis_005fstring></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_is_string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM obj)</EM></DT>
<DD>
<P>Returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a string,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dnull_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-null?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str</EM></DT>
<DT><A name=index-scm_005fstring_005fnull_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_null_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR>&#8217;s length is zero, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(string-null? "")  &#8658; #t
y                    &#8658; "foo"
(string-null? y)     &#8658; #f
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dany></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-any</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>char_pred s [start [end]]</EM></DT>
<DT><A name=index-scm_005fstring_005fany></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_any</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(char_pred, s, start, end)</EM></DT>
<DD>
<P>Check if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>char_pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true for any character in string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR>.</P>
<P><VAR>char_pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be a character to check for any equal to that, or a character set (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Character-Sets">Character Sets</A>) to check for any in that set, or a predicate procedure to call.</P>
<P>For a procedure, calls<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>char_pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>c)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are made successively on the characters from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>char_pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns true (ie. non-<CODE>#f</CODE>),<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string-any</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>stops and that return value is the return from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string-any</CODE>. The call on the last character (ie. at<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>end</VAR>-1</EM>), if that point is reached, is a tail call.</P>
<P>If there are no characters in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(ie.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>equals<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR>) then the return is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002devery></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-every</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>char_pred s [start [end]]</EM></DT>
<DT><A name=index-scm_005fstring_005fevery></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_every</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(char_pred, s, start, end)</EM></DT>
<DD>
<P>Check if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>char_pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true for every character in string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR>.</P>
<P><VAR>char_pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be a character to check for every character equal to that, or a character set (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Character-Sets">Character Sets</A>) to check for every character being in that set, or a predicate procedure to call.</P>
<P>For a procedure, calls<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>char_pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>c)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are made successively on the characters from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>char_pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string-every</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>stops and returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>. The call on the last character (ie. at<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>end</VAR>-1</EM>), if that point is reached, is a tail call and the return from that call is the return from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string-every</CODE>.</P>
<P>If there are no characters in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(ie.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>equals<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR>) then the return is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=String-Constructors></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#List_002fString-Conversion" rel=next>List/String Conversion</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#String-Predicates" rel=prev>String Predicates</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Strings" rel=up>Strings</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=String-Constructors-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.5.3 String Constructors</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The string constructor procedures create new string objects, possibly initializing them with some specified character data. See also See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#String-Selection">String Selection</A>, for ways to create strings from existing strings.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>char&#8230;</EM></DT>
<DD><A name=index-string-2></A>
<P>Return a newly allocated string made from the given character arguments.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(string #\x #\y #\z) &#8658; "xyz"
(string)             &#8658; ""
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-list_002d_003estring></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list-&gt;string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst</EM></DT>
<DT><A name=index-scm_005fstring></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(lst)</EM></DT>
<DD><A name=index-list_002d_003estring-2></A>
<P>Return a newly allocated string made from a list of characters.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(list-&gt;string '(#\a #\b #\c)) &#8658; "abc"
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-reverse_002dlist_002d_003estring></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>reverse-list-&gt;string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst</EM></DT>
<DT><A name=index-scm_005freverse_005flist_005fto_005fstring></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_reverse_list_to_string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(lst)</EM></DT>
<DD>
<P>Return a newly allocated string made from a list of characters, in reverse order.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(reverse-list-&gt;string '(#\a #\B #\c)) &#8658; "cBa"
</PRE></DIV></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-make_002dstring-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dstring></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>k [chr]</EM></DT>
<DT><A name=index-scm_005fmake_005fstring></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(k, chr)</EM></DT>
<DD>
<P>Return a newly allocated string of length<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>chr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is given, then all elements of the string are initialized to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>chr</VAR>, otherwise the contents of the string are unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fmake_005fstring></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_make_string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(size_t len, SCM chr)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_make_string</CODE>, but expects the length as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>size_t</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dtabulate></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-tabulate</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc len</EM></DT>
<DT><A name=index-scm_005fstring_005ftabulate></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_tabulate</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(proc, len)</EM></DT>
<DD>
<P><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an integer-&gt;char procedure. Construct a string of size<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>len</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>by applying<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to each index to produce the corresponding string element. The order in which<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is applied to the indices is not specified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002djoin></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-join</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>ls [delimiter [grammar]]</EM></DT>
<DT><A name=index-scm_005fstring_005fjoin></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_join</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(ls, delimiter, grammar)</EM></DT>
<DD>
<P>Append the string in the string list<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ls</VAR>, using the string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>delimiter</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a delimiter between the elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ls</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>grammar</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a symbol which specifies how the delimiter is placed between the strings, and defaults to the symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>infix</CODE>.</P>
<DL compact>
<DT><CODE>infix</CODE></DT>
<DD>
<P>Insert the separator between list elements. An empty string will produce an empty list.</P></DD>
<DT><CODE>strict-infix</CODE></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>infix</CODE>, but will raise an error if given the empty list.</P></DD>
<DT><CODE>suffix</CODE></DT>
<DD>
<P>Insert the separator after every list element.</P></DD>
<DT><CODE>prefix</CODE></DT>
<DD>
<P>Insert the separator before each list element.</P></DD></DL></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=List_002fString-Conversion></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#String-Selection" rel=next>String Selection</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#String-Constructors" rel=prev>String Constructors</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Strings" rel=up>Strings</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=List_002fString-conversion></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.5.4 List/String conversion</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When processing strings, it is often convenient to first convert them into a list representation by using the procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string-&gt;list</CODE>, work with the resulting list, and then convert it back into a string. These procedures are useful for similar tasks.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-string_002d_003elist-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002d_003elist></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-&gt;list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str [start [end]]</EM></DT>
<DT><A name=index-scm_005fsubstring_005fto_005flist></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_substring_to_list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str, start, end)</EM></DT>
<DT><A name=index-scm_005fstring_005fto_005flist></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_to_list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str)</EM></DT>
<DD>
<P>Convert the string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>into a list of characters.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dsplit></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-split</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str char_pred</EM></DT>
<DT><A name=index-scm_005fstring_005fsplit></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_split</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str, char_pred)</EM></DT>
<DD>
<P>Split the string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>into a list of substrings delimited by appearances of characters that</P>
<UL>
<LI>equal<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>char_pred</VAR>, if it is a character,</LI>
<LI>satisfy the predicate<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>char_pred</VAR>, if it is a procedure,</LI>
<LI>are in the set<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>char_pred</VAR>, if it is a character set.</LI></UL>
<P>Note that an empty substring between separator characters will result in an empty string in the result list.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(string-split "root:x:0:0:root:/root:/bin/bash" #\:)
&#8658;
("root" "x" "0" "0" "root" "/root" "/bin/bash")

(string-split "::" #\:)
&#8658;
("" "" "")

(string-split "" #\:)
&#8658;
("")
</PRE></DIV></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=String-Selection></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#String-Modification" rel=next>String Modification</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#List_002fString-Conversion" rel=prev>List/String Conversion</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Strings" rel=up>Strings</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=String-Selection-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.5.5 String Selection</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Portions of strings can be extracted by these procedures.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string-ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>delivers individual characters whereas<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>substring</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be used to extract substrings from longer strings.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-string_002dlength-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dlength></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>string</EM></DT>
<DT><A name=index-scm_005fstring_005flength></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(string)</EM></DT>
<DD>
<P>Return the number of characters in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>string</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fstring_005flength></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>size_t</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_string_length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM str)</EM></DT>
<DD>
<P>Return the number of characters in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>size_t</CODE>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-string_002dref-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str k</EM></DT>
<DT><A name=index-scm_005fstring_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str, k)</EM></DT>
<DD>
<P>Return character<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>using zero-origin indexing.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a valid index of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fstring_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_string_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM str, size_t k)</EM></DT>
<DD>
<P>Return character<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>using zero-origin indexing.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a valid index of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-string_002dcopy-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dcopy></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-copy</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str [start [end]]</EM></DT>
<DT><A name=index-scm_005fsubstring_005fcopy></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_substring_copy</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str, start, end)</EM></DT>
<DT><A name=index-scm_005fstring_005fcopy></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_copy</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str)</EM></DT>
<DD>
<P>Return a copy of the given string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR>.</P>
<P>The returned string shares storage with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>initially, but it is copied as soon as one of the two strings is modified.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-substring-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-substring></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>substring</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str start [end]</EM></DT>
<DT><A name=index-scm_005fsubstring></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_substring</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str, start, end)</EM></DT>
<DD>
<P>Return a new string formed from the characters of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>beginning with index<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(inclusive) and ending with index<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(exclusive).<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a string,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be exact integers satisfying:</P>
<P>0 &lt;=<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;=<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;=<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(string-length<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR>)</CODE>.</P>
<P>The returned string shares storage with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>initially, but it is copied as soon as one of the two strings is modified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-substring_002fshared></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>substring/shared</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str start [end]</EM></DT>
<DT><A name=index-scm_005fsubstring_005fshared></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_substring_shared</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str, start, end)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>substring</CODE>, but the strings continue to share their storage even if they are modified. Thus, modifications to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>show up in the new string, and vice versa.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-substring_002fcopy></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>substring/copy</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str start [end]</EM></DT>
<DT><A name=index-scm_005fsubstring_005fcopy-1></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_substring_copy</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str, start, end)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>substring</CODE>, but the storage for the new string is copied immediately.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-substring_002fread_002donly></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>substring/read-only</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str start [end]</EM></DT>
<DT><A name=index-scm_005fsubstring_005fread_005fonly></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_substring_read_only</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str, start, end)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>substring</CODE>, but the resulting string can not be modified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fsubstring></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_substring</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM str, size_t start, size_t end)</EM></DT>
<DT><A name=index-scm_005fc_005fsubstring_005fshared></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_substring_shared</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM str, size_t start, size_t end)</EM></DT>
<DT><A name=index-scm_005fc_005fsubstring_005fcopy></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_substring_copy</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM str, size_t start, size_t end)</EM></DT>
<DT><A name=index-scm_005fc_005fsubstring_005fread_005fonly></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_substring_read_only</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM str, size_t start, size_t end)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_substring</CODE>, etc. but the bounds are given as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>size_t</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dtake></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-take</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s n</EM></DT>
<DT><A name=index-scm_005fstring_005ftake></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_take</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s, n)</EM></DT>
<DD>
<P>Return the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>first characters of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002ddrop></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-drop</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s n</EM></DT>
<DT><A name=index-scm_005fstring_005fdrop></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_drop</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s, n)</EM></DT>
<DD>
<P>Return all but the first<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>characters of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dtake_002dright></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-take-right</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s n</EM></DT>
<DT><A name=index-scm_005fstring_005ftake_005fright></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_take_right</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s, n)</EM></DT>
<DD>
<P>Return the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>last characters of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002ddrop_002dright></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-drop-right</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s n</EM></DT>
<DT><A name=index-scm_005fstring_005fdrop_005fright></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_drop_right</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s, n)</EM></DT>
<DD>
<P>Return all but the last<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>characters of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dpad></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-pad</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s len [chr [start [end]]]</EM></DT>
<DT><A name=index-string_002dpad_002dright></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-pad-right</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s len [chr [start [end]]]</EM></DT>
<DT><A name=index-scm_005fstring_005fpad></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_pad</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s, len, chr, start, end)</EM></DT>
<DT><A name=index-scm_005fstring_005fpad_005fright></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_pad_right</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s, len, chr, start, end)</EM></DT>
<DD>
<P>Take characters<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>from the string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and either pad with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>chr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or truncate them to give<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>len</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>characters.</P>
<P><CODE>string-pad</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>pads or truncates on the left, so for example</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(string-pad "x" 3)     &#8658; "  x"
(string-pad "abcde" 3) &#8658; "cde"
</PRE></DIV>
<P><CODE>string-pad-right</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>pads or truncates on the right, so for example</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(string-pad-right "x" 3)     &#8658; "x  "
(string-pad-right "abcde" 3) &#8658; "abc"
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dtrim></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-trim</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s [char_pred [start [end]]]</EM></DT>
<DT><A name=index-string_002dtrim_002dright></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-trim-right</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s [char_pred [start [end]]]</EM></DT>
<DT><A name=index-string_002dtrim_002dboth></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-trim-both</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s [char_pred [start [end]]]</EM></DT>
<DT><A name=index-scm_005fstring_005ftrim></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_trim</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s, char_pred, start, end)</EM></DT>
<DT><A name=index-scm_005fstring_005ftrim_005fright></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_trim_right</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s, char_pred, start, end)</EM></DT>
<DT><A name=index-scm_005fstring_005ftrim_005fboth></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_trim_both</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s, char_pred, start, end)</EM></DT>
<DD>
<P>Trim occurrences of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>char_pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>from the ends of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR>.</P>
<P><CODE>string-trim</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>trims<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>char_pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>characters from the left (start) of the string,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string-trim-right</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>trims them from the right (end) of the string,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string-trim-both</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>trims from both ends.</P>
<P><VAR>char_pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be a character, a character set, or a predicate procedure to call on each character. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>char_pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not given the default is whitespace as per<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char-set:whitespace</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Standard-Character-Sets">Standard Character Sets</A>).</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(string-trim " x ")              &#8658; "x "
(string-trim-right "banana" #\a) &#8658; "banan"
(string-trim-both ".,xy:;" char-set:punctuation)
                  &#8658; "xy"
(string-trim-both "xyzzy" (lambda (c)
                             (or (eqv? c #\x)
                                 (eqv? c #\y))))
                  &#8658; "zz"
</PRE></DIV></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=String-Modification></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#String-Comparison" rel=next>String Comparison</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#String-Selection" rel=prev>String Selection</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Strings" rel=up>Strings</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=String-Modification-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.5.6 String Modification</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">These procedures are for modifying strings in-place. This means that the result of the operation is not a new string; instead, the original string&#8217;s memory representation is modified.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-string_002dset_0021-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str k chr</EM></DT>
<DT><A name=index-scm_005fstring_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str, k, chr)</EM></DT>
<DD>
<P>Store<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>chr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in element<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and return an unspecified value.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a valid index of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fstring_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_string_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM str, size_t k, SCM chr)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_string_set_x</CODE>, but the index is given as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>size_t</CODE>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-string_002dfill_0021-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dfill_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-fill!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str chr [start [end]]</EM></DT>
<DT><A name=index-scm_005fsubstring_005ffill_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_substring_fill_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str, chr, start, end)</EM></DT>
<DT><A name=index-scm_005fstring_005ffill_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_fill_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str, chr)</EM></DT>
<DD>
<P>Stores<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>chr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in every element of the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and returns an unspecified value.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-substring_002dfill_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>substring-fill!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str start end fill</EM></DT>
<DT><A name=index-scm_005fsubstring_005ffill_005fx-1></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_substring_fill_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str, start, end, fill)</EM></DT>
<DD>
<P>Change every character in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>between<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fill</VAR>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(define y (string-copy "abcdefg"))
(substring-fill! y 1 3 #\r)
y
&#8658; "arrdefg"
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-substring_002dmove_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>substring-move!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str1 start1 end1 str2 start2</EM></DT>
<DT><A name=index-scm_005fsubstring_005fmove_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_substring_move_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str1, start1, end1, str2, start2)</EM></DT>
<DD>
<P>Copy the substring of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bounded by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>into<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>beginning at position<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start2</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be the same string.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dcopy_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-copy!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>target tstart s [start [end]]</EM></DT>
<DT><A name=index-scm_005fstring_005fcopy_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_copy_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(target, tstart, s, start, end)</EM></DT>
<DD>
<P>Copy the sequence of characters from index range [<VAR>start</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR>) in string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>target</VAR>, beginning at index<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tstart</VAR>. The characters are copied left-to-right or right-to-left as needed &#8211; the copy is guaranteed to work, even if<VAR>target</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are the same string. It is an error if the copy operation runs off the end of the target string.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=String-Comparison></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#String-Searching" rel=next>String Searching</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#String-Modification" rel=prev>String Modification</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Strings" rel=up>Strings</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=String-Comparison-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.5.7 String Comparison</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The procedures in this section are similar to the character ordering predicates (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Characters">Characters</A>), but are defined on character sequences.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The first set is specified in R5RS and has names that end in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>?</CODE>. The second set is specified in SRFI-13 and the names have not ending<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>?</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The predicates ending in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-ci</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>ignore the character case when comparing strings. For now, case-insensitive comparison is done using the R5RS rules, where every lower-case character that has a single character upper-case form is converted to uppercase before comparison. See See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Text-Collation">the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 i18n)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module</A>, for locale-dependent string comparison.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-string_003d_003f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_003d_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string=?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 s3 &#8230;</EM></DT>
<DD>
<P>Lexicographic equality predicate; return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if all strings are the same length and contain the same characters in the same positions, otherwise return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P>
<P>The procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string-ci=?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>treats upper and lower case letters as though they were the same character, but<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string=?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>treats upper and lower case as distinct characters.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-string_003c_003f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_003c_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string&lt;?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 s3 &#8230;</EM></DT>
<DD>
<P>Lexicographic ordering predicate; return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if, for every pair of consecutive string arguments<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str_i</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str_i+1</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str_i</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is lexicographically less than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str_i+1</VAR>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-string_003c_003d_003f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_003c_003d_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string&lt;=?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 s3 &#8230;</EM></DT>
<DD>
<P>Lexicographic ordering predicate; return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if, for every pair of consecutive string arguments<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str_i</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str_i+1</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str_i</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is lexicographically less than or equal to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str_i+1</VAR>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-string_003e_003f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_003e_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string&gt;?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 s3 &#8230;</EM></DT>
<DD>
<P>Lexicographic ordering predicate; return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if, for every pair of consecutive string arguments<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str_i</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str_i+1</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str_i</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is lexicographically greater than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str_i+1</VAR>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-string_003e_003d_003f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_003e_003d_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string&gt;=?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 s3 &#8230;</EM></DT>
<DD>
<P>Lexicographic ordering predicate; return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if, for every pair of consecutive string arguments<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str_i</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str_i+1</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str_i</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is lexicographically greater than or equal to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str_i+1</VAR>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-string_002dci_003d_003f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dci_003d_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-ci=?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 s3 &#8230;</EM></DT>
<DD>
<P>Case-insensitive string equality predicate; return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if all strings are the same length and their component characters match (ignoring case) at each position; otherwise return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-string_002dci_003c_003f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dci_003c_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-ci&lt;?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 s3 &#8230;</EM></DT>
<DD>
<P>Case insensitive lexicographic ordering predicate; return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if, for every pair of consecutive string arguments<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str_i</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str_i+1</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str_i</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is lexicographically less than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str_i+1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>regardless of case.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-string_003c_003d_003f-3></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dci_003c_003d_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-ci&lt;=?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 s3 &#8230;</EM></DT>
<DD>
<P>Case insensitive lexicographic ordering predicate; return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if, for every pair of consecutive string arguments<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str_i</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str_i+1</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str_i</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is lexicographically less than or equal to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str_i+1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>regardless of case.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-string_002dci_003e_003f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dci_003e_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-ci&gt;?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 s3 &#8230;</EM></DT>
<DD>
<P>Case insensitive lexicographic ordering predicate; return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if, for every pair of consecutive string arguments<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str_i</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str_i+1</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str_i</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is lexicographically greater than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str_i+1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>regardless of case.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-string_002dci_003e_003d_003f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dci_003e_003d_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-ci&gt;=?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 s3 &#8230;</EM></DT>
<DD>
<P>Case insensitive lexicographic ordering predicate; return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if, for every pair of consecutive string arguments<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str_i</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str_i+1</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str_i</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is lexicographically greater than or equal to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str_i+1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>regardless of case.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dcompare></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-compare</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 proc_lt proc_eq proc_gt [start1 [end1 [start2 [end2]]]]</EM></DT>
<DT><A name=index-scm_005fstring_005fcompare></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_compare</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s1, s2, proc_lt, proc_eq, proc_gt, start1, end1, start2, end2)</EM></DT>
<DD>
<P>Apply<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc_lt</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc_eq</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc_gt</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the mismatch index, depending upon whether<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is less than, equal to, or greater than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s2</VAR>. The mismatch index is the largest index<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>i</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>such that for every 0 &lt;=<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>j</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>i</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s1</VAR>[<VAR>j</VAR>] =<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s2</VAR>[<VAR>j</VAR>] &#8211; that is,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>i</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the first position that does not match.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dcompare_002dci></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-compare-ci</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 proc_lt proc_eq proc_gt [start1 [end1 [start2 [end2]]]]</EM></DT>
<DT><A name=index-scm_005fstring_005fcompare_005fci></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_compare_ci</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s1, s2, proc_lt, proc_eq, proc_gt, start1, end1, start2, end2)</EM></DT>
<DD>
<P>Apply<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc_lt</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc_eq</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc_gt</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the mismatch index, depending upon whether<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is less than, equal to, or greater than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s2</VAR>. The mismatch index is the largest index<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>i</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>such that for every 0 &lt;=<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>j</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>i</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s1</VAR>[<VAR>j</VAR>] =<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s2</VAR>[<VAR>j</VAR>] &#8211; that is,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>i</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the first position where the lowercased letters do not match.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_003d></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string=</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 [start1 [end1 [start2 [end2]]]]</EM></DT>
<DT><A name=index-scm_005fstring_005feq></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_eq</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s1, s2, start1, end1, start2, end2)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are not equal, a true value otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_003c_003e></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string&lt;&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 [start1 [end1 [start2 [end2]]]]</EM></DT>
<DT><A name=index-scm_005fstring_005fneq></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_neq</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s1, s2, start1, end1, start2, end2)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are equal, a true value otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_003c></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string&lt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 [start1 [end1 [start2 [end2]]]]</EM></DT>
<DT><A name=index-scm_005fstring_005flt></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_lt</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s1, s2, start1, end1, start2, end2)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is greater or equal to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s2</VAR>, a true value otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_003e></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 [start1 [end1 [start2 [end2]]]]</EM></DT>
<DT><A name=index-scm_005fstring_005fgt></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_gt</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s1, s2, start1, end1, start2, end2)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is less or equal to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s2</VAR>, a true value otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_003c_003d></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string&lt;=</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 [start1 [end1 [start2 [end2]]]]</EM></DT>
<DT><A name=index-scm_005fstring_005fle></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_le</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s1, s2, start1, end1, start2, end2)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is greater to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s2</VAR>, a true value otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_003e_003d></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string&gt;=</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 [start1 [end1 [start2 [end2]]]]</EM></DT>
<DT><A name=index-scm_005fstring_005fge></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_ge</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s1, s2, start1, end1, start2, end2)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is less to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s2</VAR>, a true value otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dci_003d></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-ci=</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 [start1 [end1 [start2 [end2]]]]</EM></DT>
<DT><A name=index-scm_005fstring_005fci_005feq></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_ci_eq</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s1, s2, start1, end1, start2, end2)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are not equal, a true value otherwise. The character comparison is done case-insensitively.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dci_003c_003e></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-ci&lt;&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 [start1 [end1 [start2 [end2]]]]</EM></DT>
<DT><A name=index-scm_005fstring_005fci_005fneq></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_ci_neq</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s1, s2, start1, end1, start2, end2)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are equal, a true value otherwise. The character comparison is done case-insensitively.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dci_003c></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-ci&lt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 [start1 [end1 [start2 [end2]]]]</EM></DT>
<DT><A name=index-scm_005fstring_005fci_005flt></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_ci_lt</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s1, s2, start1, end1, start2, end2)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is greater or equal to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s2</VAR>, a true value otherwise. The character comparison is done case-insensitively.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dci_003e></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-ci&gt;</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 [start1 [end1 [start2 [end2]]]]</EM></DT>
<DT><A name=index-scm_005fstring_005fci_005fgt></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_ci_gt</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s1, s2, start1, end1, start2, end2)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is less or equal to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s2</VAR>, a true value otherwise. The character comparison is done case-insensitively.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dci_003c_003d></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-ci&lt;=</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 [start1 [end1 [start2 [end2]]]]</EM></DT>
<DT><A name=index-scm_005fstring_005fci_005fle></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_ci_le</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s1, s2, start1, end1, start2, end2)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is greater to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s2</VAR>, a true value otherwise. The character comparison is done case-insensitively.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dci_003e_003d></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-ci&gt;=</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 [start1 [end1 [start2 [end2]]]]</EM></DT>
<DT><A name=index-scm_005fstring_005fci_005fge></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_ci_ge</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s1, s2, start1, end1, start2, end2)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is less to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s2</VAR>, a true value otherwise. The character comparison is done case-insensitively.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dhash></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-hash</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s [bound [start [end]]]</EM></DT>
<DT><A name=index-scm_005fsubstring_005fhash></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_substring_hash</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s, bound, start, end)</EM></DT>
<DD>
<P>Compute a hash value for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR>. The optional argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bound</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a non-negative exact integer specifying the range of the hash function. A positive value restricts the return value to the range [0,bound).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dhash_002dci></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-hash-ci</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s [bound [start [end]]]</EM></DT>
<DT><A name=index-scm_005fsubstring_005fhash_005fci></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_substring_hash_ci</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s, bound, start, end)</EM></DT>
<DD>
<P>Compute a hash value for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR>. The optional argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bound</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a non-negative exact integer specifying the range of the hash function. A positive value restricts the return value to the range [0,bound).</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Because the same visual appearance of an abstract Unicode character can be obtained via multiple sequences of Unicode characters, even the case-insensitive string comparison functions described above may return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>when presented with strings containing different representations of the same character. For example, the Unicode character &#8220;LATIN SMALL LETTER S WITH DOT BELOW AND DOT ABOVE&#8221; can be represented with a single character (U+1E69) or by the character &#8220;LATIN SMALL LETTER S&#8221; (U+0073) followed by the combining marks &#8220;COMBINING DOT BELOW&#8221; (U+0323) and &#8220;COMBINING DOT ABOVE&#8221; (U+0307).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For this reason, it is often desirable to ensure that the strings to be compared are using a mutually consistent representation for every character. The Unicode standard defines two methods of normalizing the contents of strings: Decomposition, which breaks composite characters into a set of constituent characters with an ordering defined by the Unicode Standard; and composition, which performs the converse.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">There are two decomposition operations. &#8220;Canonical decomposition&#8221; produces character sequences that share the same visual appearance as the original characters, while &#8220;compatibility decomposition&#8221; produces ones whose visual appearances may differ from the originals but which represent the same abstract character.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">These operations are encapsulated in the following set of normalization forms:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DT><EM>NFD</EM></DT>
<DD>
<P>Characters are decomposed to their canonical forms.</P></DD>
<DT><EM>NFKD</EM></DT>
<DD>
<P>Characters are decomposed to their compatibility forms.</P></DD>
<DT><EM>NFC</EM></DT>
<DD>
<P>Characters are decomposed to their canonical forms, then composed.</P></DD>
<DT><EM>NFKC</EM></DT>
<DD>
<P>Characters are decomposed to their compatibility forms, then composed.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The functions below put their arguments into one of the forms described above.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dnormalize_002dnfd></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-normalize-nfd</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s</EM></DT>
<DT><A name=index-scm_005fstring_005fnormalize_005fnfd></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_normalize_nfd</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s)</EM></DT>
<DD>
<P>Return the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NFD</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>normalized form of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dnormalize_002dnfkd></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-normalize-nfkd</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s</EM></DT>
<DT><A name=index-scm_005fstring_005fnormalize_005fnfkd></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_normalize_nfkd</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s)</EM></DT>
<DD>
<P>Return the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NFKD</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>normalized form of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dnormalize_002dnfc></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-normalize-nfc</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s</EM></DT>
<DT><A name=index-scm_005fstring_005fnormalize_005fnfc></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_normalize_nfc</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s)</EM></DT>
<DD>
<P>Return the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NFC</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>normalized form of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dnormalize_002dnfkc></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-normalize-nfkc</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s</EM></DT>
<DT><A name=index-scm_005fstring_005fnormalize_005fnfkc></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_normalize_nfkc</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s)</EM></DT>
<DD>
<P>Return the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NFKC</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>normalized form of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=String-Searching></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Alphabetic-Case-Mapping" rel=next>Alphabetic Case Mapping</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#String-Comparison" rel=prev>String Comparison</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Strings" rel=up>Strings</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=String-Searching-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.5.8 String Searching</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dindex></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-index</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s char_pred [start [end]]</EM></DT>
<DT><A name=index-scm_005fstring_005findex></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_index</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s, char_pred, start, end)</EM></DT>
<DD>
<P>Search through the string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>from left to right, returning the index of the first occurrence of a character which</P>
<UL>
<LI>equals<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>char_pred</VAR>, if it is character,</LI>
<LI>satisfies the predicate<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>char_pred</VAR>, if it is a procedure,</LI>
<LI>is in the set<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>char_pred</VAR>, if it is a character set.</LI></UL>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if no match is found.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002drindex></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-rindex</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s char_pred [start [end]]</EM></DT>
<DT><A name=index-scm_005fstring_005frindex></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_rindex</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s, char_pred, start, end)</EM></DT>
<DD>
<P>Search through the string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>from right to left, returning the index of the last occurrence of a character which</P>
<UL>
<LI>equals<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>char_pred</VAR>, if it is character,</LI>
<LI>satisfies the predicate<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>char_pred</VAR>, if it is a procedure,</LI>
<LI>is in the set if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>char_pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a character set.</LI></UL>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if no match is found.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dprefix_002dlength></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-prefix-length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 [start1 [end1 [start2 [end2]]]]</EM></DT>
<DT><A name=index-scm_005fstring_005fprefix_005flength></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_prefix_length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s1, s2, start1, end1, start2, end2)</EM></DT>
<DD>
<P>Return the length of the longest common prefix of the two strings.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dprefix_002dlength_002dci></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-prefix-length-ci</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 [start1 [end1 [start2 [end2]]]]</EM></DT>
<DT><A name=index-scm_005fstring_005fprefix_005flength_005fci></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_prefix_length_ci</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s1, s2, start1, end1, start2, end2)</EM></DT>
<DD>
<P>Return the length of the longest common prefix of the two strings, ignoring character case.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dsuffix_002dlength></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-suffix-length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 [start1 [end1 [start2 [end2]]]]</EM></DT>
<DT><A name=index-scm_005fstring_005fsuffix_005flength></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_suffix_length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s1, s2, start1, end1, start2, end2)</EM></DT>
<DD>
<P>Return the length of the longest common suffix of the two strings.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dsuffix_002dlength_002dci></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-suffix-length-ci</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 [start1 [end1 [start2 [end2]]]]</EM></DT>
<DT><A name=index-scm_005fstring_005fsuffix_005flength_005fci></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_suffix_length_ci</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s1, s2, start1, end1, start2, end2)</EM></DT>
<DD>
<P>Return the length of the longest common suffix of the two strings, ignoring character case.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dprefix_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-prefix?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 [start1 [end1 [start2 [end2]]]]</EM></DT>
<DT><A name=index-scm_005fstring_005fprefix_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_prefix_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s1, s2, start1, end1, start2, end2)</EM></DT>
<DD>
<P>Is<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>a prefix of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s2</VAR>?</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dprefix_002dci_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-prefix-ci?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 [start1 [end1 [start2 [end2]]]]</EM></DT>
<DT><A name=index-scm_005fstring_005fprefix_005fci_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_prefix_ci_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s1, s2, start1, end1, start2, end2)</EM></DT>
<DD>
<P>Is<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>a prefix of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s2</VAR>, ignoring character case?</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dsuffix_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-suffix?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 [start1 [end1 [start2 [end2]]]]</EM></DT>
<DT><A name=index-scm_005fstring_005fsuffix_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_suffix_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s1, s2, start1, end1, start2, end2)</EM></DT>
<DD>
<P>Is<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>a suffix of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s2</VAR>?</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dsuffix_002dci_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-suffix-ci?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 [start1 [end1 [start2 [end2]]]]</EM></DT>
<DT><A name=index-scm_005fstring_005fsuffix_005fci_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_suffix_ci_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s1, s2, start1, end1, start2, end2)</EM></DT>
<DD>
<P>Is<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>a suffix of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s2</VAR>, ignoring character case?</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dindex_002dright></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-index-right</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s char_pred [start [end]]</EM></DT>
<DT><A name=index-scm_005fstring_005findex_005fright></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_index_right</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s, char_pred, start, end)</EM></DT>
<DD>
<P>Search through the string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>from right to left, returning the index of the last occurrence of a character which</P>
<UL>
<LI>equals<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>char_pred</VAR>, if it is character,</LI>
<LI>satisfies the predicate<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>char_pred</VAR>, if it is a procedure,</LI>
<LI>is in the set if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>char_pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a character set.</LI></UL>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if no match is found.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dskip></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-skip</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s char_pred [start [end]]</EM></DT>
<DT><A name=index-scm_005fstring_005fskip></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_skip</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s, char_pred, start, end)</EM></DT>
<DD>
<P>Search through the string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>from left to right, returning the index of the first occurrence of a character which</P>
<UL>
<LI>does not equal<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>char_pred</VAR>, if it is character,</LI>
<LI>does not satisfy the predicate<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>char_pred</VAR>, if it is a procedure,</LI>
<LI>is not in the set if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>char_pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a character set.</LI></UL></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dskip_002dright></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-skip-right</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s char_pred [start [end]]</EM></DT>
<DT><A name=index-scm_005fstring_005fskip_005fright></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_skip_right</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s, char_pred, start, end)</EM></DT>
<DD>
<P>Search through the string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>from right to left, returning the index of the last occurrence of a character which</P>
<UL>
<LI>does not equal<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>char_pred</VAR>, if it is character,</LI>
<LI>does not satisfy the predicate<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>char_pred</VAR>, if it is a procedure,</LI>
<LI>is not in the set if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>char_pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a character set.</LI></UL></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dcount></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-count</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s char_pred [start [end]]</EM></DT>
<DT><A name=index-scm_005fstring_005fcount></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_count</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s, char_pred, start, end)</EM></DT>
<DD>
<P>Return the count of the number of characters in the string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>which</P>
<UL>
<LI>equals<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>char_pred</VAR>, if it is character,</LI>
<LI>satisfies the predicate<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>char_pred</VAR>, if it is a procedure.</LI>
<LI>is in the set<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>char_pred</VAR>, if it is a character set.</LI></UL></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dcontains></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-contains</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 [start1 [end1 [start2 [end2]]]]</EM></DT>
<DT><A name=index-scm_005fstring_005fcontains></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_contains</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s1, s2, start1, end1, start2, end2)</EM></DT>
<DD>
<P>Does string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>contain string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s2</VAR>? Return the index in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>occurs as a substring, or false. The optional start/end indices restrict the operation to the indicated substrings.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dcontains_002dci></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-contains-ci</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 [start1 [end1 [start2 [end2]]]]</EM></DT>
<DT><A name=index-scm_005fstring_005fcontains_005fci></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_contains_ci</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s1, s2, start1, end1, start2, end2)</EM></DT>
<DD>
<P>Does string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>contain string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s2</VAR>? Return the index in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>occurs as a substring, or false. The optional start/end indices restrict the operation to the indicated substrings. Character comparison is done case-insensitively.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Alphabetic-Case-Mapping></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Reversing-and-Appending-Strings" rel=next>Reversing and Appending Strings</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#String-Searching" rel=prev>String Searching</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Strings" rel=up>Strings</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Alphabetic-Case-Mapping-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.5.9 Alphabetic Case Mapping</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">These are procedures for mapping strings to their upper- or lower-case equivalents, respectively, or for capitalizing strings.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">They use the basic case mapping rules for Unicode characters. No special language or context rules are considered. The resulting strings are guaranteed to be the same length as the input strings.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Character-Case-Mapping">the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 i18n)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module</A>, for locale-dependent case conversions.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dupcase></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-upcase</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str [start [end]]</EM></DT>
<DT><A name=index-scm_005fsubstring_005fupcase></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_substring_upcase</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str, start, end)</EM></DT>
<DT><A name=index-scm_005fstring_005fupcase></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_upcase</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str)</EM></DT>
<DD>
<P>Upcase every character in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>str</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dupcase_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-upcase!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str [start [end]]</EM></DT>
<DT><A name=index-scm_005fsubstring_005fupcase_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_substring_upcase_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str, start, end)</EM></DT>
<DT><A name=index-scm_005fstring_005fupcase_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_upcase_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str)</EM></DT>
<DD>
<P>Destructively upcase every character in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>str</CODE>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(string-upcase! y)
&#8658; "ARRDEFG"
y
&#8658; "ARRDEFG"
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002ddowncase></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-downcase</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str [start [end]]</EM></DT>
<DT><A name=index-scm_005fsubstring_005fdowncase></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_substring_downcase</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str, start, end)</EM></DT>
<DT><A name=index-scm_005fstring_005fdowncase></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_downcase</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str)</EM></DT>
<DD>
<P>Downcase every character in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002ddowncase_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-downcase!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str [start [end]]</EM></DT>
<DT><A name=index-scm_005fsubstring_005fdowncase_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_substring_downcase_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str, start, end)</EM></DT>
<DT><A name=index-scm_005fstring_005fdowncase_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_downcase_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str)</EM></DT>
<DD>
<P>Destructively downcase every character in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>y
&#8658; "ARRDEFG"
(string-downcase! y)
&#8658; "arrdefg"
y
&#8658; "arrdefg"
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dcapitalize></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-capitalize</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str</EM></DT>
<DT><A name=index-scm_005fstring_005fcapitalize></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_capitalize</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str)</EM></DT>
<DD>
<P>Return a freshly allocated string with the characters in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR>, where the first character of every word is capitalized.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dcapitalize_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-capitalize!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str</EM></DT>
<DT><A name=index-scm_005fstring_005fcapitalize_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_capitalize_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str)</EM></DT>
<DD>
<P>Upcase the first character of every word in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>destructively and return<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>y                      &#8658; "hello world"
(string-capitalize! y) &#8658; "Hello World"
y                      &#8658; "Hello World"
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dtitlecase></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-titlecase</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str [start [end]]</EM></DT>
<DT><A name=index-scm_005fstring_005ftitlecase></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_titlecase</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str, start, end)</EM></DT>
<DD>
<P>Titlecase every first character in a word in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dtitlecase_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-titlecase!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str [start [end]]</EM></DT>
<DT><A name=index-scm_005fstring_005ftitlecase_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_titlecase_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str, start, end)</EM></DT>
<DD>
<P>Destructively titlecase every first character in a word in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Reversing-and-Appending-Strings></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Mapping-Folding-and-Unfolding" rel=next>Mapping Folding and Unfolding</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Alphabetic-Case-Mapping" rel=prev>Alphabetic Case Mapping</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Strings" rel=up>Strings</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Reversing-and-Appending-Strings-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.5.10 Reversing and Appending Strings</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dreverse></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-reverse</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str [start [end]]</EM></DT>
<DT><A name=index-scm_005fstring_005freverse></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_reverse</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str, start, end)</EM></DT>
<DD>
<P>Reverse the string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR>. The optional arguments<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>delimit the region of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to operate on.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dreverse_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-reverse!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str [start [end]]</EM></DT>
<DT><A name=index-scm_005fstring_005freverse_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_reverse_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str, start, end)</EM></DT>
<DD>
<P>Reverse the string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in-place. The optional arguments<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>delimit the region of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to operate on. The return value is unspecified.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-string_002dappend-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dappend></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-append</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>arg &#8230;</EM></DT>
<DT><A name=index-scm_005fstring_005fappend></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_append</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(args)</EM></DT>
<DD>
<P>Return a newly allocated string whose characters form the concatenation of the given strings,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=enddots>...</SMALL>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(let ((h "hello "))
  (string-append h "world"))
&#8658; "hello world"
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dappend_002fshared></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-append/shared</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>arg &#8230;</EM></DT>
<DT><A name=index-scm_005fstring_005fappend_005fshared></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_append_shared</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(args)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string-append</CODE>, but the result may share memory with the argument strings.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dconcatenate></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-concatenate</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>ls</EM></DT>
<DT><A name=index-scm_005fstring_005fconcatenate></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_concatenate</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(ls)</EM></DT>
<DD>
<P>Append the elements (which must be strings) of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ls</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>together into a single string. Guaranteed to return a freshly allocated string.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dconcatenate_002dreverse></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-concatenate-reverse</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>ls [final_string [end]]</EM></DT>
<DT><A name=index-scm_005fstring_005fconcatenate_005freverse></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_concatenate_reverse</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(ls, final_string, end)</EM></DT>
<DD>
<P>Without optional arguments, this procedure is equivalent to</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(string-concatenate (reverse ls))
</PRE></DIV>
<P>If the optional argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>final_string</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified, it is consed onto the beginning to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ls</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>before performing the list-reverse and string-concatenate operations. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is given, only the characters of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>final_string</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>up to index<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR>are used.</P>
<P>Guaranteed to return a freshly allocated string.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dconcatenate_002fshared></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-concatenate/shared</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>ls</EM></DT>
<DT><A name=index-scm_005fstring_005fconcatenate_005fshared></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_concatenate_shared</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(ls)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string-concatenate</CODE>, but the result may share memory with the strings in the list<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ls</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dconcatenate_002dreverse_002fshared></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-concatenate-reverse/shared</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>ls [final_string [end]]</EM></DT>
<DT><A name=index-scm_005fstring_005fconcatenate_005freverse_005fshared></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_concatenate_reverse_shared</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(ls, final_string, end)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string-concatenate-reverse</CODE>, but the result may share memory with the strings in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ls</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>arguments.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Mapping-Folding-and-Unfolding></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Miscellaneous-String-Operations" rel=next>Miscellaneous String Operations</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Reversing-and-Appending-Strings" rel=prev>Reversing and Appending Strings</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Strings" rel=up>Strings</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Mapping_002c-Folding_002c-and-Unfolding></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.5.11 Mapping, Folding, and Unfolding</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dmap></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-map</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc s [start [end]]</EM></DT>
<DT><A name=index-scm_005fstring_005fmap></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_map</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(proc, s, start, end)</EM></DT>
<DD>
<P><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a char-&gt;char procedure, it is mapped over<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR>. The order in which the procedure is applied to the string elements is not specified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dmap_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-map!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc s [start [end]]</EM></DT>
<DT><A name=index-scm_005fstring_005fmap_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_map_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(proc, s, start, end)</EM></DT>
<DD>
<P><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a char-&gt;char procedure, it is mapped over<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR>. The order in which the procedure is applied to the string elements is not specified. The string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is modified in-place, the return value is not specified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dfor_002deach></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-for-each</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc s [start [end]]</EM></DT>
<DT><A name=index-scm_005fstring_005ffor_005feach></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_for_each</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(proc, s, start, end)</EM></DT>
<DD>
<P><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is mapped over<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in left-to-right order. The return value is not specified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dfor_002deach_002dindex></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-for-each-index</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc s [start [end]]</EM></DT>
<DT><A name=index-scm_005fstring_005ffor_005feach_005findex></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_for_each_index</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(proc, s, start, end)</EM></DT>
<DD>
<P>Call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>i)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for each index i in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR>, from left to right.</P>
<P>For example, to change characters to alternately upper and lower case,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define str (string-copy "studly"))
(string-for-each-index
    (lambda (i)
      (string-set! str i
        ((if (even? i) char-upcase char-downcase)
         (string-ref str i))))
    str)
str &#8658; "StUdLy"
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dfold></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-fold</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>kons knil s [start [end]]</EM></DT>
<DT><A name=index-scm_005fstring_005ffold></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_fold</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(kons, knil, s, start, end)</EM></DT>
<DD>
<P>Fold<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>kons</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>over the characters of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR>, with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>knil</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the terminating element, from left to right.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>kons</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must expect two arguments: The actual character and the last result of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>kons</VAR>&#8217; application.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dfold_002dright></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-fold-right</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>kons knil s [start [end]]</EM></DT>
<DT><A name=index-scm_005fstring_005ffold_005fright></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_fold_right</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(kons, knil, s, start, end)</EM></DT>
<DD>
<P>Fold<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>kons</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>over the characters of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR>, with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>knil</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the terminating element, from right to left.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>kons</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must expect two arguments: The actual character and the last result of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>kons</VAR>&#8217; application.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dunfold></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-unfold</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>p f g seed [base [make_final]]</EM></DT>
<DT><A name=index-scm_005fstring_005funfold></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_unfold</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(p, f, g, seed, base, make_final)</EM></DT>
<DD>
<UL>
<LI><VAR>g</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used to generate a series of<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>seed</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>values from the initial<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>seed</VAR>:<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>seed</VAR>, (<VAR>g</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>seed</VAR>), (<VAR>g</VAR>^2<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>seed</VAR>), (<VAR>g</VAR>^3<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>seed</VAR>), &#8230;</LI>
<LI><VAR>p</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>tells us when to stop &#8211; when it returns true when applied to one of these seed values.</LI>
<LI><VAR>f</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>maps each seed value to the corresponding character in the result string. These chars are assembled into the string in a left-to-right order.</LI>
<LI><VAR>base</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the optional initial/leftmost portion of the constructed string; it default to the empty string.</LI>
<LI><VAR>make_final</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is applied to the terminal seed value (on which<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>p</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns true) to produce the final/rightmost portion of the constructed string. The default is nothing extra.</LI></UL></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dunfold_002dright></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-unfold-right</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>p f g seed [base [make_final]]</EM></DT>
<DT><A name=index-scm_005fstring_005funfold_005fright></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_unfold_right</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(p, f, g, seed, base, make_final)</EM></DT>
<DD>
<UL>
<LI><VAR>g</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used to generate a series of<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>seed</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>values from the initial<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>seed</VAR>:<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>seed</VAR>, (<VAR>g</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>seed</VAR>), (<VAR>g</VAR>^2<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>seed</VAR>), (<VAR>g</VAR>^3<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>seed</VAR>), &#8230;</LI>
<LI><VAR>p</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>tells us when to stop &#8211; when it returns true when applied to one of these seed values.</LI>
<LI><VAR>f</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>maps each seed value to the corresponding character in the result string. These chars are assembled into the string in a right-to-left order.</LI>
<LI><VAR>base</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the optional initial/rightmost portion of the constructed string; it default to the empty string.</LI>
<LI><VAR>make_final</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is applied to the terminal seed value (on which<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>p</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns true) to produce the final/leftmost portion of the constructed string. It defaults to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(lambda (x) )</CODE>.</LI></UL></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Miscellaneous-String-Operations></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Representing-Strings-as-Bytes" rel=next>Representing Strings as Bytes</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Mapping-Folding-and-Unfolding" rel=prev>Mapping Folding and Unfolding</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Strings" rel=up>Strings</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Miscellaneous-String-Operations-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.5.12 Miscellaneous String Operations</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-xsubstring></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>xsubstring</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s from [to [start [end]]]</EM></DT>
<DT><A name=index-scm_005fxsubstring></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_xsubstring</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s, from, to, start, end)</EM></DT>
<DD>
<P>This is the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>extended substring</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure that implements replicated copying of a substring of some string.</P>
<P><VAR>s</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a string,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are optional arguments that demarcate a substring of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR>, defaulting to 0 and the length of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR>. Replicate this substring up and down index space, in both the positive and negative directions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>xsubstring</CODE>returns the substring of this string beginning at index<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>from</VAR>, and ending at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>to</VAR>, which defaults to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>from</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>+ (<VAR>end</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>-<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR>).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dxcopy_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-xcopy!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>target tstart s sfrom [sto [start [end]]]</EM></DT>
<DT><A name=index-scm_005fstring_005fxcopy_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_xcopy_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(target, tstart, s, sfrom, sto, start, end)</EM></DT>
<DD>
<P>Exactly the same as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>xsubstring</CODE>, but the extracted text is written into the string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>target</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>starting at index<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tstart</VAR>. The operation is not defined if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(eq?<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>target</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or these arguments share storage &#8211; you cannot copy a string on top of itself.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dreplace></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-replace</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s1 s2 [start1 [end1 [start2 [end2]]]]</EM></DT>
<DT><A name=index-scm_005fstring_005freplace></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_replace</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s1, s2, start1, end1, start2, end2)</EM></DT>
<DD>
<P>Return the string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s1</VAR>, but with the characters<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230;<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>replaced by the characters<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230;<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s2</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dtokenize></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-tokenize</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s [token_set [start [end]]]</EM></DT>
<DT><A name=index-scm_005fstring_005ftokenize></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_tokenize</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s, token_set, start, end)</EM></DT>
<DD>
<P>Split the string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>into a list of substrings, where each substring is a maximal non-empty contiguous sequence of characters from the character set<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>token_set</VAR>, which defaults to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char-set:graphic</CODE>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>indices are provided, they restrict<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string-tokenize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to operating on the indicated substring of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dfilter></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-filter</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>char_pred s [start [end]]</EM></DT>
<DT><A name=index-scm_005fstring_005ffilter></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_filter</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(char_pred, s, start, end)</EM></DT>
<DD>
<P>Filter the string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR>, retaining only those characters which satisfy<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>char_pred</VAR>.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>char_pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a procedure, it is applied to each character as a predicate, if it is a character, it is tested for equality and if it is a character set, it is tested for membership.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002ddelete></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-delete</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>char_pred s [start [end]]</EM></DT>
<DT><A name=index-scm_005fstring_005fdelete></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_delete</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(char_pred, s, start, end)</EM></DT>
<DD>
<P>Delete characters satisfying<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>char_pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR>.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>char_pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a procedure, it is applied to each character as a predicate, if it is a character, it is tested for equality and if it is a character set, it is tested for membership.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Representing-Strings-as-Bytes></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Conversion-to_002ffrom-C" rel=next>Conversion to/from C</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Miscellaneous-String-Operations" rel=prev>Miscellaneous String Operations</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Strings" rel=up>Strings</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Representing-Strings-as-Bytes-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.5.13 Representing Strings as Bytes</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Out in the cold world outside of Guile, not all strings are treated in the same way. Out there there are only bytes, and there are many ways of representing a strings (sequences of characters) as binary data (sequences of bytes).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">As a user, usually you don&#8217;t have to think about this very much. When you type on your keyboard, your system encodes your keystrokes as bytes according to the locale that you have configured on your computer. Guile uses the locale to decode those bytes back into characters &#8211; hopefully the same characters that you typed in.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">All is not so clear when dealing with a system with multiple users, such as a web server. Your web server might get a request from one user for data encoded in the ISO-8859-1 character set, and then another request from a different user for UTF-8 data.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-iconv></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-character-encoding></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile provides an<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>iconv</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>module for converting between strings and sequences of bytes. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Bytevectors">Bytevectors</A>, for more on how Guile represents raw byte sequences. This module gets its name from the common<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL>UNIX</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>command of the same name.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that often it is sufficient to just read and write strings from ports instead of using these functions. To do this, specify the port encoding using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set-port-encoding!</CODE>. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Ports">Ports</A>, for more on ports and character encodings.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Unlike the rest of the procedures in this section, you have to load the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>iconv</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module before having access to these procedures:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (ice-9 iconv))
</PRE></DIV>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002d_003ebytevector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-&gt;bytevector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>string encoding [conversion-strategy]</EM></DT>
<DD>
<P>Encode<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>string</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a sequence of bytes.</P>
<P>The string will be encoded in the character set specified by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>encoding</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>string. If the string has characters that cannot be represented in the encoding, by default this procedure raises an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>encoding-error</CODE>. Pass a<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>conversion-strategy</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument to specify other behaviors.</P>
<P>The return value is a bytevector. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Bytevectors">Bytevectors</A>, for more on bytevectors. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Ports">Ports</A>, for more on character encodings and conversion strategies.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bytevector_002d_003estring></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-&gt;string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bytevector encoding [conversion-strategy]</EM></DT>
<DD>
<P>Decode<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bytevector</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>into a string.</P>
<P>The bytes will be decoded from the character set by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>encoding</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>string. If the bytes do not form a valid encoding, by default this procedure raises an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>decoding-error</CODE>. As with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string-&gt;bytevector</CODE>, pass the optional<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>conversion-strategy</VAR>argument to modify this behavior. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Ports">Ports</A>, for more on character encodings and conversion strategies.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-call_002dwith_002doutput_002dencoded_002dstring></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>call-with-output-encoded-string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>encoding proc [conversion-strategy]</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call-with-output-string</CODE>, but instead of returning a string, returns a encoding of the string according to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>encoding</VAR>, as a bytevector. This procedure can be more efficient than collecting a string and then converting it via<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string-&gt;bytevector</CODE>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Conversion-to_002ffrom-C></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#String-Internals" rel=next>String Internals</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Representing-Strings-as-Bytes" rel=prev>Representing Strings as Bytes</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Strings" rel=up>Strings</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Conversion-to_002ffrom-C-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.5.14 Conversion to/from C</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When creating a Scheme string from a C string or when converting a Scheme string to a C string, the concept of character encoding becomes important.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In C, a string is just a sequence of bytes, and the character encoding describes the relation between these bytes and the actual characters that make up the string. For Scheme strings, character encoding is not an issue (most of the time), since in Scheme you usually treat strings as character sequences, not byte sequences.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Converting to C and converting from C each have their own challenges.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When converting from C to Scheme, it is important that the sequence of bytes in the C string be valid with respect to its encoding. ASCII strings, for example, can&#8217;t have any bytes greater than 127. An ASCII byte greater than 127 is considered<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>ill-formed</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>and cannot be converted into a Scheme character.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Problems can occur in the reverse operation as well. Not all character encodings can hold all possible Scheme characters. Some encodings, like ASCII for example, can only describe a small subset of all possible characters. So, when converting to C, one must first decide what to do with Scheme characters that can&#8217;t be represented in the C string.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Converting a Scheme string to a C string will often allocate fresh memory to hold the result. You must take care that this memory is properly freed eventually. In many cases, this can be achieved by using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_dynwind_free</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>inside an appropriate dynwind context, See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Dynamic-Wind">Dynamic Wind</A>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005ffrom_005flocale_005fstring></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_locale_string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const char *str)</EM></DT>
<DT><A name=index-scm_005ffrom_005flocale_005fstringn></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_locale_stringn</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const char *str, size_t len)</EM></DT>
<DD>
<P>Creates a new Scheme string that has the same contents as<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>when interpreted in the character encoding of the current locale.</P>
<P>For<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_from_locale_string</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be null-terminated.</P>
<P>For<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_from_locale_stringn</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>len</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>specifies the length of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in bytes, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not need to be null-terminated. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>len</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(size_t)-1</CODE>, then<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>does need to be null-terminated and the real length will be found with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strlen</CODE>.</P>
<P>If the C string is ill-formed, an error will be raised.</P>
<P>Note that these functions should<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>not</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>be used to convert C string constants, because there is no guarantee that the current locale will match that of the execution character set, used for string and character constants. Most modern C compilers use UTF-8 by default, so to convert C string constants we recommend<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_from_utf8_string</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005ftake_005flocale_005fstring></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_take_locale_string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(char *str)</EM></DT>
<DT><A name=index-scm_005ftake_005flocale_005fstringn></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_take_locale_stringn</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(char *str, size_t len)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_from_locale_string</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_from_locale_stringn</CODE>, respectively, but also frees<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>free</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>eventually. Thus, you can use this function when you would free<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>anyway immediately after creating the Scheme string. In certain cases, Guile can then use<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>directly as its internal representation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fto_005flocale_005fstring></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>char *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_to_locale_string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM str)</EM></DT>
<DT><A name=index-scm_005fto_005flocale_005fstringn></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>char *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_to_locale_stringn</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM str, size_t *lenp)</EM></DT>
<DD>
<P>Returns a C string with the same contents as<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the character encoding of the current locale. The C string must be freed with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>free</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>eventually, maybe by using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_dynwind_free</CODE>, See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Dynamic-Wind">Dynamic Wind</A>.</P>
<P>For<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_to_locale_string</CODE>, the returned string is null-terminated and an error is signalled when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>contains<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\nul</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>characters.</P>
<P>For<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_to_locale_stringn</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lenp</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>not<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>might contain<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#\nul</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>characters and the length of the returned string in bytes is stored in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*<VAR>lenp</VAR></CODE>. The returned string will not be null-terminated in this case. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lenp</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE>,<CODE>scm_to_locale_stringn</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>behaves like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_to_locale_string</CODE>.</P>
<P>If a character in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>cannot be represented in the character encoding of the current locale, the default port conversion strategy is used. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Ports">Ports</A>, for more on conversion strategies.</P>
<P>If the conversion strategy is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>error</CODE>, an error will be raised. If it is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>substitute</CODE>, a replacement character, such as a question mark, will be inserted in its place. If it is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>escape</CODE>, a hex escape will be inserted in its place.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fto_005flocale_005fstringbuf></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>size_t</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_to_locale_stringbuf</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM str, char *buf, size_t max_len)</EM></DT>
<DD>
<P>Puts<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a C string in the current locale encoding into the memory pointed to by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>buf</VAR>. The buffer at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>buf</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>has room for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>max_len</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_to_local_stringbuf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will never store more than that. No terminating<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>'\0'</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be stored.</P>
<P>The return value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_to_locale_stringbuf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the number of bytes that are needed for all of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR>, regardless of whether<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>buf</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>was large enough to hold them. Thus, when the return value is larger than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>max_len</VAR>, only<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>max_len</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes have been stored and you probably need to try again with a larger buffer.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For most situations, string conversion should occur using the current locale, such as with the functions above. But there may be cases where one wants to convert strings from a character encoding other than the locale&#8217;s character encoding. For these cases, the lower-level functions<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_to_stringn</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_from_stringn</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are provided. These functions should seldom be necessary if one is properly using locales.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005ft_005fstring_005ffailed_005fconversion_005fhandler></A>C Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_t_string_failed_conversion_handler</STRONG></DT>
<DD>
<P>This is an enumerated type that can take one of three values:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_FAILED_CONVERSION_ERROR</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_FAILED_CONVERSION_QUESTION_MARK</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_FAILED_CONVERSION_ESCAPE_SEQUENCE</CODE>. They are used to indicate a strategy for handling characters that cannot be converted to or from a given character encoding.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_FAILED_CONVERSION_ERROR</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>indicates that a conversion should throw an error if some characters cannot be converted.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_FAILED_CONVERSION_QUESTION_MARK</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>indicates that a conversion should replace unconvertable characters with the question mark character. And,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_FAILED_CONVERSION_ESCAPE_SEQUENCE</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>requests that a conversion should replace an unconvertable character with an escape sequence.</P>
<P>While all three strategies apply when converting Scheme strings to C, only<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_FAILED_CONVERSION_ERROR</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_FAILED_CONVERSION_QUESTION_MARK</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be used when converting C strings to Scheme.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_002ascm_005fto_005fstringn></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>char</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>*scm_to_stringn</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM str, size_t *lenp, const char *encoding, scm_t_string_failed_conversion_handler handler)</EM></DT>
<DD>
<P>This function returns a newly allocated C string from the Guile string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR>. The length of the returned string in bytes will be returned in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lenp</VAR>. The character encoding of the C string is passed as the ASCII, null-terminated C string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>encoding</VAR>. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameter gives a strategy for dealing with characters that cannot be converted into<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>encoding</VAR>.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lenp</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE>, this function will return a null-terminated C string. It will throw an error if the string contains a null character.</P>
<P>The Scheme interface to this function is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string-&gt;bytevector</CODE>, from the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ice-9 iconv</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Representing-Strings-as-Bytes">Representing Strings as Bytes</A>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005ffrom_005fstringn></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_stringn</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const char *str, size_t len, const char *encoding, scm_t_string_failed_conversion_handler handler)</EM></DT>
<DD>
<P>This function returns a scheme string from the C string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR>. The length in bytes of the C string is input as<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>len</VAR>. The encoding of the C string is passed as the ASCII, null-terminated C string<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>encoding</CODE>. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameters suggests a strategy for dealing with unconvertable characters.</P>
<P>The Scheme interface to this function is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bytevector-&gt;string</CODE>. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Representing-Strings-as-Bytes">Representing Strings as Bytes</A>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following conversion functions are provided as a convenience for the most commonly used encodings.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005ffrom_005flatin1_005fstring></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_latin1_string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const char *str)</EM></DT>
<DT><A name=index-scm_005ffrom_005futf8_005fstring></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_utf8_string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const char *str)</EM></DT>
<DT><A name=index-scm_005ffrom_005futf32_005fstring></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_utf32_string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const scm_t_wchar *str)</EM></DT>
<DD>
<P>Return a scheme string from the null-terminated C string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR>, which is ISO-8859-1-, UTF-8-, or UTF-32-encoded. These functions should be used to convert hard-coded C string constants into Scheme strings.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005ffrom_005flatin1_005fstringn></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_latin1_stringn</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const char *str, size_t len)</EM></DT>
<DT><A name=index-scm_005ffrom_005futf8_005fstringn></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_utf8_stringn</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const char *str, size_t len)</EM></DT>
<DT><A name=index-scm_005ffrom_005futf32_005fstringn></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_utf32_stringn</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const scm_t_wchar *str, size_t len)</EM></DT>
<DD>
<P>Return a scheme string from C string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR>, which is ISO-8859-1-, UTF-8-, or UTF-32-encoded, of length<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>len</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>len</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the number of bytes pointed to by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_from_latin1_stringn</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_from_utf8_stringn</CODE>; it is the number of elements (code points) in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the case of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_from_utf32_stringn</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_002ascm_005fto_005flatin1_005fstringn></A>C function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>char</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>*scm_to_latin1_stringn</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM str, size_t *lenp)</EM></DT>
<DT><A name=index-_002ascm_005fto_005futf8_005fstringn></A>C function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>char</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>*scm_to_utf8_stringn</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM str, size_t *lenp)</EM></DT>
<DT><A name=index-_002ascm_005fto_005futf32_005fstringn></A>C function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_wchar</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>*scm_to_utf32_stringn</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM str, size_t *lenp)</EM></DT>
<DD>
<P>Return a newly allocated, ISO-8859-1-, UTF-8-, or UTF-32-encoded C string from Scheme string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR>. An error is thrown when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>cannot be converted to the specified encoding. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lenp</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE>, the returned C string will be null terminated, and an error will be thrown if the C string would otherwise contain null characters. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lenp</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE>, the string is not null terminated, and the length of the returned string is returned in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lenp</VAR>. The length returned is the number of bytes for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_to_latin1_stringn</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_to_utf8_stringn</CODE>; it is the number of elements (code points) for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_to_utf32_stringn</CODE>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=String-Internals></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Conversion-to_002ffrom-C" rel=prev>Conversion to/from C</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Strings" rel=up>Strings</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=String-Internals-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.5.15 String Internals</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile stores each string in memory as a contiguous array of Unicode code points along with an associated set of attributes. If all of the code points of a string have an integer range between 0 and 255 inclusive, the code point array is stored as one byte per code point: it is stored as an ISO-8859-1 (aka Latin-1) string. If any of the code points of the string has an integer value greater that 255, the code point array is stored as four bytes per code point: it is stored as a UTF-32 string.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Conversion between the one-byte-per-code-point and four-bytes-per-code-point representations happens automatically as necessary.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">No API is provided to set the internal representation of strings; however, there are pair of procedures available to query it. These are debugging procedures. Using them in production code is discouraged, since the details of Guile&#8217;s internal representation of strings may change from release to release.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dbytes_002dper_002dchar></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-bytes-per-char</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str</EM></DT>
<DT><A name=index-scm_005fstring_005fbytes_005fper_005fchar></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_bytes_per_char</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str)</EM></DT>
<DD>
<P>Return the number of bytes used to encode a Unicode code point in string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR>. The result is one or four.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0025string_002ddump></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>%string-dump</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str</EM></DT>
<DT><A name=index-scm_005fsys_005fstring_005fdump></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_sys_string_dump</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str)</EM></DT>
<DD>
<P>Returns an association list containing debugging information for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR>. The association list has the following entries.</P>
<DL compact>
<DT><CODE>string</CODE></DT>
<DD>
<P>The string itself.</P></DD>
<DT><CODE>start</CODE></DT>
<DD>
<P>The start index of the string into its stringbuf</P></DD>
<DT><CODE>length</CODE></DT>
<DD>
<P>The length of the string</P></DD>
<DT><CODE>shared</CODE></DT>
<DD>
<P>If this string is a substring, it returns its parent string. Otherwise, it returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE></P></DD>
<DT><CODE>read-only</CODE></DT>
<DD>
<P><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the string is read-only</P></DD>
<DT><CODE>stringbuf-chars</CODE></DT>
<DD>
<P>A new string containing this string&#8217;s stringbuf&#8217;s characters</P></DD>
<DT><CODE>stringbuf-length</CODE></DT>
<DD>
<P>The number of characters in this stringbuf</P></DD>
<DT><CODE>stringbuf-shared</CODE></DT>
<DD>
<P><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if this stringbuf is shared</P></DD>
<DT><CODE>stringbuf-wide</CODE></DT>
<DD>
<P><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if this stringbuf&#8217;s characters are stored in a 32-bit buffer, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if they are stored in an 8-bit buffer</P></DD></DL></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Bytevectors></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Symbols" rel=next>Symbols</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Strings" rel=prev>Strings</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Simple-Data-Types" rel=up>Simple Data Types</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Bytevectors-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.6.6 Bytevectors</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-bytevector></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-R6RS></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bytevector</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a raw bit string. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rnrs bytevectors)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module provides the programming interface specified by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.r6rs.org/">Revised^6 Report on the Algorithmic Language Scheme (R6RS)</A>. It contains procedures to manipulate bytevectors and interpret their contents in a number of ways: bytevector contents can be accessed as signed or unsigned integer of various sizes and endianness, as IEEE-754 floating point numbers, or as strings. It is a useful tool to encode and decode binary data.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The R6RS (Section 4.3.4) specifies an external representation for bytevectors, whereby the octets (integers in the range 0&#8211;255) contained in the bytevector are represented as a list prefixed by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#vu8</CODE>:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>#vu8(1 53 204)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">denotes a 3-byte bytevector containing the octets 1, 53, and 204. Like string literals, booleans, etc., bytevectors are &#8220;self-quoting&#8221;, i.e., they do not need to be quoted:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>#vu8(1 53 204)
&#8658; #vu8(1 53 204)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Bytevectors can be used with the binary input/output primitives of the R6RS (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-I_002fO-Ports">R6RS I/O Ports</A>).</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Bytevector-Endianness">Bytevector Endianness</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Dealing with byte order.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Bytevector-Manipulation">Bytevector Manipulation</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Creating, copying, manipulating bytevectors.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#Bytevectors-as-Integers">Bytevectors as Integers</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Interpreting bytes as integers.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#Bytevectors-and-Integer-Lists">Bytevectors and Integer Lists</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Converting to/from an integer list.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#Bytevectors-as-Floats">Bytevectors as Floats</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Interpreting bytes as real numbers.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=6 href="https://www.gnu.org/software/guile/manual/guile.html#Bytevectors-as-Strings">Bytevectors as Strings</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Interpreting bytes as Unicode strings.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=7 href="https://www.gnu.org/software/guile/manual/guile.html#Bytevectors-as-Arrays">Bytevectors as Arrays</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Guile extension to the bytevector API.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=8 href="https://www.gnu.org/software/guile/manual/guile.html#Bytevectors-as-Uniform-Vectors">Bytevectors as Uniform Vectors</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Bytevectors and SRFI-4.</TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Bytevector-Endianness></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Bytevector-Manipulation" rel=next>Bytevector Manipulation</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Bytevectors" rel=up>Bytevectors</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Endianness></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.6.1 Endianness</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-endianness></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-byte-order></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-word-order></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Some of the following procedures take an<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>endianness</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameter. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>endianness</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is defined as the order of bytes in multi-byte numbers: numbers encoded in<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>big endian</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>have their most significant bytes written first, whereas numbers encoded in<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>little endian</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>have their least significant bytes first<A href="https://www.gnu.org/software/guile/manual/guile.html#FOOT5" name=DOCF5><SUP>5</SUP></A>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Little-endian is the native endianness of the IA32 architecture and its derivatives, while big-endian is native to SPARC and PowerPC, among others. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>native-endianness</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure returns the native endianness of the machine it runs on.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-native_002dendianness></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>native-endianness</STRONG></DT>
<DT><A name=index-scm_005fnative_005fendianness></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_native_endianness</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Return a value denoting the native endianness of the host machine.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-endianness-1></A>Scheme Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>endianness</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>symbol</EM></DT>
<DD>
<P>Return an object denoting the endianness specified by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>symbol</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>symbol</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is neither<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>big</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>nor<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>little</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>then an error is raised at expand-time.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fendianness_005fbig></A>C Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_endianness_big</STRONG></DT>
<DT><A name=index-scm_005fendianness_005flittle></A>C Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_endianness_little</STRONG></DT>
<DD>
<P>The objects denoting big- and little-endianness, respectively.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Bytevector-Manipulation></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Bytevectors-as-Integers" rel=next>Bytevectors as Integers</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Bytevector-Endianness" rel=prev>Bytevector Endianness</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Bytevectors" rel=up>Bytevectors</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Manipulating-Bytevectors></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.6.2 Manipulating Bytevectors</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Bytevectors can be created, copied, and analyzed with the following procedures and C functions.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dbytevector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-bytevector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>len [fill]</EM></DT>
<DT><A name=index-scm_005fmake_005fbytevector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_bytevector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(len, fill)</EM></DT>
<DT><A name=index-scm_005fc_005fmake_005fbytevector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_make_bytevector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(size_t len)</EM></DT>
<DD>
<P>Return a new bytevector of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>len</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes. Optionally, if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fill</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is given, fill it with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fill</VAR>;<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fill</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be in the range [-128,255].</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bytevector_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-scm_005fbytevector_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DD>
<P>Return true if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a bytevector.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fis_005fbytevector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_is_bytevector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM obj)</EM></DT>
<DD>
<P>Equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_is_true (scm_bytevector_p (obj))</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bytevector_002dlength></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv</EM></DT>
<DT><A name=index-scm_005fbytevector_005flength></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv)</EM></DT>
<DD>
<P>Return the length in bytes of bytevector<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bv</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fbytevector_005flength></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>size_t</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_bytevector_length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM bv)</EM></DT>
<DD>
<P>Likewise, return the length in bytes of bytevector<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bv</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bytevector_003d_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector=?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv1 bv2</EM></DT>
<DT><A name=index-scm_005fbytevector_005feq_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_eq_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv1, bv2)</EM></DT>
<DD>
<P>Return is<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bv1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>equals to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bv2</VAR>&#8212;i.e., if they have the same length and contents.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bytevector_002dfill_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-fill!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv fill</EM></DT>
<DT><A name=index-scm_005fbytevector_005ffill_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_fill_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, fill)</EM></DT>
<DD>
<P>Fill bytevector<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bv</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fill</VAR>, a byte.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bytevector_002dcopy_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-copy!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>source source-start target target-start len</EM></DT>
<DT><A name=index-scm_005fbytevector_005fcopy_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_copy_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(source, source_start, target, target_start, len)</EM></DT>
<DD>
<P>Copy<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>len</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>source</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>into<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>target</VAR>, starting reading from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>source-start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(a positive index within<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>source</VAR>) and start writing at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>target-start</VAR>. It is permitted for the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>source</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>target</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>regions to overlap.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bytevector_002dcopy></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-copy</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv</EM></DT>
<DT><A name=index-scm_005fbytevector_005fcopy></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_copy</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv)</EM></DT>
<DD>
<P>Return a newly allocated copy of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bv</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fbytevector_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_uint8</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_bytevector_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM bv, size_t index)</EM></DT>
<DD>
<P>Return the byte at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>index</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in bytevector<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bv</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fbytevector_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_bytevector_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM bv, size_t index, scm_t_uint8 value)</EM></DT>
<DD>
<P>Set the byte at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>index</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bv</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Low-level C macros are available. They do not perform any type-checking; as such they should be used with care.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fBYTEVECTOR_005fLENGTH></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>size_t</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_BYTEVECTOR_LENGTH</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv)</EM></DT>
<DD>
<P>Return the length in bytes of bytevector<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bv</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fBYTEVECTOR_005fCONTENTS></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>signed char *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_BYTEVECTOR_CONTENTS</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv)</EM></DT>
<DD>
<P>Return a pointer to the contents of bytevector<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bv</VAR>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Bytevectors-as-Integers></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Bytevectors-and-Integer-Lists" rel=next>Bytevectors and Integer Lists</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Bytevector-Manipulation" rel=prev>Bytevector Manipulation</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Bytevectors" rel=up>Bytevectors</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Interpreting-Bytevector-Contents-as-Integers></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.6.3 Interpreting Bytevector Contents as Integers</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The contents of a bytevector can be interpreted as a sequence of integers of any given size, sign, and endianness.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(let ((bv (make-bytevector 4)))
  (bytevector-u8-set! bv 0 #x12)
  (bytevector-u8-set! bv 1 #x34)
  (bytevector-u8-set! bv 2 #x56)
  (bytevector-u8-set! bv 3 #x78)

  (map (lambda (number)
         (number-&gt;string number 16))
       (list (bytevector-u8-ref bv 0)
             (bytevector-u16-ref bv 0 (endianness big))
             (bytevector-u32-ref bv 0 (endianness little)))))

&#8658; ("12" "1234" "78563412")
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The most generic procedures to interpret bytevector contents as integers are described below.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bytevector_002duint_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-uint-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv index endianness size</EM></DT>
<DT><A name=index-scm_005fbytevector_005fuint_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_uint_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, index, endianness, size)</EM></DT>
<DD>
<P>Return the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR>-byte long unsigned integer at index<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>index</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bv</VAR>, decoded according to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>endianness</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bytevector_002dsint_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-sint-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv index endianness size</EM></DT>
<DT><A name=index-scm_005fbytevector_005fsint_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_sint_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, index, endianness, size)</EM></DT>
<DD>
<P>Return the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR>-byte long signed integer at index<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>index</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bv</VAR>, decoded according to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>endianness</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bytevector_002duint_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-uint-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv index value endianness size</EM></DT>
<DT><A name=index-scm_005fbytevector_005fuint_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_uint_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, index, value, endianness, size)</EM></DT>
<DD>
<P>Set the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR>-byte long unsigned integer at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>index</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>, encoded according to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>endianness</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bytevector_002dsint_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-sint-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv index value endianness size</EM></DT>
<DT><A name=index-scm_005fbytevector_005fsint_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_sint_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, index, value, endianness, size)</EM></DT>
<DD>
<P>Set the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR>-byte long signed integer at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>index</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>, encoded according to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>endianness</VAR>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following procedures are similar to the ones above, but specialized to a given integer size:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bytevector_002du8_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-u8-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv index</EM></DT>
<DT><A name=index-bytevector_002ds8_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-s8-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv index</EM></DT>
<DT><A name=index-bytevector_002du16_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-u16-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv index endianness</EM></DT>
<DT><A name=index-bytevector_002ds16_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-s16-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv index endianness</EM></DT>
<DT><A name=index-bytevector_002du32_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-u32-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv index endianness</EM></DT>
<DT><A name=index-bytevector_002ds32_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-s32-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv index endianness</EM></DT>
<DT><A name=index-bytevector_002du64_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-u64-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv index endianness</EM></DT>
<DT><A name=index-bytevector_002ds64_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-s64-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv index endianness</EM></DT>
<DT><A name=index-scm_005fbytevector_005fu8_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_u8_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, index)</EM></DT>
<DT><A name=index-scm_005fbytevector_005fs8_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_s8_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, index)</EM></DT>
<DT><A name=index-scm_005fbytevector_005fu16_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_u16_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, index, endianness)</EM></DT>
<DT><A name=index-scm_005fbytevector_005fs16_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_s16_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, index, endianness)</EM></DT>
<DT><A name=index-scm_005fbytevector_005fu32_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_u32_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, index, endianness)</EM></DT>
<DT><A name=index-scm_005fbytevector_005fs32_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_s32_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, index, endianness)</EM></DT>
<DT><A name=index-scm_005fbytevector_005fu64_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_u64_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, index, endianness)</EM></DT>
<DT><A name=index-scm_005fbytevector_005fs64_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_s64_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, index, endianness)</EM></DT>
<DD>
<P>Return the unsigned<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>-bit (signed) integer (where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 8, 16, 32 or 64) from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bv</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>index</VAR>, decoded according to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>endianness</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bytevector_002du8_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-u8-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv index value</EM></DT>
<DT><A name=index-bytevector_002ds8_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-s8-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv index value</EM></DT>
<DT><A name=index-bytevector_002du16_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-u16-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv index value endianness</EM></DT>
<DT><A name=index-bytevector_002ds16_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-s16-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv index value endianness</EM></DT>
<DT><A name=index-bytevector_002du32_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-u32-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv index value endianness</EM></DT>
<DT><A name=index-bytevector_002ds32_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-s32-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv index value endianness</EM></DT>
<DT><A name=index-bytevector_002du64_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-u64-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv index value endianness</EM></DT>
<DT><A name=index-bytevector_002ds64_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-s64-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv index value endianness</EM></DT>
<DT><A name=index-scm_005fbytevector_005fu8_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_u8_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, index, value)</EM></DT>
<DT><A name=index-scm_005fbytevector_005fs8_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_s8_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, index, value)</EM></DT>
<DT><A name=index-scm_005fbytevector_005fu16_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_u16_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, index, value, endianness)</EM></DT>
<DT><A name=index-scm_005fbytevector_005fs16_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_s16_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, index, value, endianness)</EM></DT>
<DT><A name=index-scm_005fbytevector_005fu32_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_u32_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, index, value, endianness)</EM></DT>
<DT><A name=index-scm_005fbytevector_005fs32_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_s32_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, index, value, endianness)</EM></DT>
<DT><A name=index-scm_005fbytevector_005fu64_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_u64_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, index, value, endianness)</EM></DT>
<DT><A name=index-scm_005fbytevector_005fs64_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_s64_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, index, value, endianness)</EM></DT>
<DD>
<P>Store<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as an<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>-bit (signed) integer (where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 8, 16, 32 or 64) in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bv</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>index</VAR>, encoded according to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>endianness</VAR>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Finally, a variant specialized for the host&#8217;s endianness is available for each of these functions (with the exception of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>u8</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>accessors, for obvious reasons):</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bytevector_002du16_002dnative_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-u16-native-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv index</EM></DT>
<DT><A name=index-bytevector_002ds16_002dnative_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-s16-native-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv index</EM></DT>
<DT><A name=index-bytevector_002du32_002dnative_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-u32-native-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv index</EM></DT>
<DT><A name=index-bytevector_002ds32_002dnative_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-s32-native-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv index</EM></DT>
<DT><A name=index-bytevector_002du64_002dnative_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-u64-native-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv index</EM></DT>
<DT><A name=index-bytevector_002ds64_002dnative_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-s64-native-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv index</EM></DT>
<DT><A name=index-scm_005fbytevector_005fu16_005fnative_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_u16_native_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, index)</EM></DT>
<DT><A name=index-scm_005fbytevector_005fs16_005fnative_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_s16_native_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, index)</EM></DT>
<DT><A name=index-scm_005fbytevector_005fu32_005fnative_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_u32_native_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, index)</EM></DT>
<DT><A name=index-scm_005fbytevector_005fs32_005fnative_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_s32_native_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, index)</EM></DT>
<DT><A name=index-scm_005fbytevector_005fu64_005fnative_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_u64_native_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, index)</EM></DT>
<DT><A name=index-scm_005fbytevector_005fs64_005fnative_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_s64_native_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, index)</EM></DT>
<DD>
<P>Return the unsigned<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>-bit (signed) integer (where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 8, 16, 32 or 64) from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bv</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>index</VAR>, decoded according to the host&#8217;s native endianness.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bytevector_002du16_002dnative_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-u16-native-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv index value</EM></DT>
<DT><A name=index-bytevector_002ds16_002dnative_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-s16-native-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv index value</EM></DT>
<DT><A name=index-bytevector_002du32_002dnative_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-u32-native-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv index value</EM></DT>
<DT><A name=index-bytevector_002ds32_002dnative_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-s32-native-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv index value</EM></DT>
<DT><A name=index-bytevector_002du64_002dnative_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-u64-native-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv index value</EM></DT>
<DT><A name=index-bytevector_002ds64_002dnative_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-s64-native-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv index value</EM></DT>
<DT><A name=index-scm_005fbytevector_005fu16_005fnative_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_u16_native_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, index, value)</EM></DT>
<DT><A name=index-scm_005fbytevector_005fs16_005fnative_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_s16_native_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, index, value)</EM></DT>
<DT><A name=index-scm_005fbytevector_005fu32_005fnative_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_u32_native_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, index, value)</EM></DT>
<DT><A name=index-scm_005fbytevector_005fs32_005fnative_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_s32_native_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, index, value)</EM></DT>
<DT><A name=index-scm_005fbytevector_005fu64_005fnative_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_u64_native_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, index, value)</EM></DT>
<DT><A name=index-scm_005fbytevector_005fs64_005fnative_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_s64_native_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, index, value)</EM></DT>
<DD>
<P>Store<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as an<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>-bit (signed) integer (where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 8, 16, 32 or 64) in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bv</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>index</VAR>, encoded according to the host&#8217;s native endianness.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Bytevectors-and-Integer-Lists></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Bytevectors-as-Floats" rel=next>Bytevectors as Floats</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Bytevectors-as-Integers" rel=prev>Bytevectors as Integers</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Bytevectors" rel=up>Bytevectors</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Converting-Bytevectors-to_002ffrom-Integer-Lists></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.6.4 Converting Bytevectors to/from Integer Lists</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Bytevector contents can readily be converted to/from lists of signed or unsigned integers:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(bytevector-&gt;sint-list (u8-list-&gt;bytevector (make-list 4 255))
                       (endianness little) 2)
&#8658; (-1 -1)
</PRE></DIV>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bytevector_002d_003eu8_002dlist></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-&gt;u8-list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv</EM></DT>
<DT><A name=index-scm_005fbytevector_005fto_005fu8_005flist></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_to_u8_list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv)</EM></DT>
<DD>
<P>Return a newly allocated list of unsigned 8-bit integers from the contents of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bv</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-u8_002dlist_002d_003ebytevector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>u8-list-&gt;bytevector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst</EM></DT>
<DT><A name=index-scm_005fu8_005flist_005fto_005fbytevector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_u8_list_to_bytevector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(lst)</EM></DT>
<DD>
<P>Return a newly allocated bytevector consisting of the unsigned 8-bit integers listed in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bytevector_002d_003euint_002dlist></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-&gt;uint-list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv endianness size</EM></DT>
<DT><A name=index-scm_005fbytevector_005fto_005fuint_005flist></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_to_uint_list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, endianness, size)</EM></DT>
<DD>
<P>Return a list of unsigned integers of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes representing the contents of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bv</VAR>, decoded according to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>endianness</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bytevector_002d_003esint_002dlist></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-&gt;sint-list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv endianness size</EM></DT>
<DT><A name=index-scm_005fbytevector_005fto_005fsint_005flist></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_to_sint_list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, endianness, size)</EM></DT>
<DD>
<P>Return a list of signed integers of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes representing the contents of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bv</VAR>, decoded according to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>endianness</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-uint_002dlist_002d_003ebytevector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>uint-list-&gt;bytevector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst endianness size</EM></DT>
<DT><A name=index-scm_005fuint_005flist_005fto_005fbytevector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_uint_list_to_bytevector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(lst, endianness, size)</EM></DT>
<DD>
<P>Return a new bytevector containing the unsigned integers listed in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and encoded on<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes according to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>endianness</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-sint_002dlist_002d_003ebytevector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>sint-list-&gt;bytevector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst endianness size</EM></DT>
<DT><A name=index-scm_005fsint_005flist_005fto_005fbytevector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_sint_list_to_bytevector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(lst, endianness, size)</EM></DT>
<DD>
<P>Return a new bytevector containing the signed integers listed in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and encoded on<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes according to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>endianness</VAR>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Bytevectors-as-Floats></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Bytevectors-as-Strings" rel=next>Bytevectors as Strings</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Bytevectors-and-Integer-Lists" rel=prev>Bytevectors and Integer Lists</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Bytevectors" rel=up>Bytevectors</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Interpreting-Bytevector-Contents-as-Floating-Point-Numbers></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.6.5 Interpreting Bytevector Contents as Floating Point Numbers</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-IEEE_002d754-floating-point-numbers></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Bytevector contents can also be accessed as IEEE-754 single- or double-precision floating point numbers (respectively 32 and 64-bit long) using the procedures described here.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bytevector_002dieee_002dsingle_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-ieee-single-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv index endianness</EM></DT>
<DT><A name=index-bytevector_002dieee_002ddouble_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-ieee-double-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv index endianness</EM></DT>
<DT><A name=index-scm_005fbytevector_005fieee_005fsingle_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_ieee_single_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, index, endianness)</EM></DT>
<DT><A name=index-scm_005fbytevector_005fieee_005fdouble_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_ieee_double_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, index, endianness)</EM></DT>
<DD>
<P>Return the IEEE-754 single-precision floating point number from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bv</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>index</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>according to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>endianness</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bytevector_002dieee_002dsingle_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-ieee-single-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv index value endianness</EM></DT>
<DT><A name=index-bytevector_002dieee_002ddouble_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-ieee-double-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv index value endianness</EM></DT>
<DT><A name=index-scm_005fbytevector_005fieee_005fsingle_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_ieee_single_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, index, value, endianness)</EM></DT>
<DT><A name=index-scm_005fbytevector_005fieee_005fdouble_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_ieee_double_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, index, value, endianness)</EM></DT>
<DD>
<P>Store real number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bv</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>index</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>according to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>endianness</VAR>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Specialized procedures are also available:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bytevector_002dieee_002dsingle_002dnative_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-ieee-single-native-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv index</EM></DT>
<DT><A name=index-bytevector_002dieee_002ddouble_002dnative_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-ieee-double-native-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv index</EM></DT>
<DT><A name=index-scm_005fbytevector_005fieee_005fsingle_005fnative_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_ieee_single_native_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, index)</EM></DT>
<DT><A name=index-scm_005fbytevector_005fieee_005fdouble_005fnative_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_ieee_double_native_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, index)</EM></DT>
<DD>
<P>Return the IEEE-754 single-precision floating point number from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bv</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>index</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>according to the host&#8217;s native endianness.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bytevector_002dieee_002dsingle_002dnative_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-ieee-single-native-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv index value</EM></DT>
<DT><A name=index-bytevector_002dieee_002ddouble_002dnative_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-ieee-double-native-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv index value</EM></DT>
<DT><A name=index-scm_005fbytevector_005fieee_005fsingle_005fnative_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_ieee_single_native_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, index, value)</EM></DT>
<DT><A name=index-scm_005fbytevector_005fieee_005fdouble_005fnative_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bytevector_ieee_double_native_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, index, value)</EM></DT>
<DD>
<P>Store real number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bv</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>index</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>according to the host&#8217;s native endianness.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Bytevectors-as-Strings></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Bytevectors-as-Arrays" rel=next>Bytevectors as Arrays</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Bytevectors-as-Floats" rel=prev>Bytevectors as Floats</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Bytevectors" rel=up>Bytevectors</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Interpreting-Bytevector-Contents-as-Unicode-Strings></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.6.6 Interpreting Bytevector Contents as Unicode Strings</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Unicode-string-encoding></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Bytevector contents can also be interpreted as Unicode strings encoded in one of the most commonly available encoding formats. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Representing-Strings-as-Bytes">Representing Strings as Bytes</A>, for a more generic interface.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(utf8-&gt;string (u8-list-&gt;bytevector '(99 97 102 101)))
&#8658; "cafe"

(string-&gt;utf8 "caf&#233;") ;; SMALL LATIN LETTER E WITH ACUTE ACCENT
&#8658; #vu8(99 97 102 195 169)
</PRE></DIV>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002d_003eutf8></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-&gt;utf8</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str</EM></DT>
<DT><A name=index-string_002d_003eutf16></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-&gt;utf16</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str [endianness]</EM></DT>
<DT><A name=index-string_002d_003eutf32></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-&gt;utf32</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str [endianness]</EM></DT>
<DT><A name=index-scm_005fstring_005fto_005futf8></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_to_utf8</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str)</EM></DT>
<DT><A name=index-scm_005fstring_005fto_005futf16></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_to_utf16</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str, endianness)</EM></DT>
<DT><A name=index-scm_005fstring_005fto_005futf32></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_to_utf32</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str, endianness)</EM></DT>
<DD>
<P>Return a newly allocated bytevector that contains the UTF-8, UTF-16, or UTF-32 (aka. UCS-4) encoding of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR>. For UTF-16 and UTF-32,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>endianness</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be the symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>big</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>little</CODE>; when omitted, it defaults to big endian.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-utf8_002d_003estring></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>utf8-&gt;string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>utf</EM></DT>
<DT><A name=index-utf16_002d_003estring></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>utf16-&gt;string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>utf [endianness]</EM></DT>
<DT><A name=index-utf32_002d_003estring></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>utf32-&gt;string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>utf [endianness]</EM></DT>
<DT><A name=index-scm_005futf8_005fto_005fstring></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_utf8_to_string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(utf)</EM></DT>
<DT><A name=index-scm_005futf16_005fto_005fstring></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_utf16_to_string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(utf, endianness)</EM></DT>
<DT><A name=index-scm_005futf32_005fto_005fstring></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_utf32_to_string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(utf, endianness)</EM></DT>
<DD>
<P>Return a newly allocated string that contains from the UTF-8-, UTF-16-, or UTF-32-decoded contents of bytevector<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>utf</VAR>. For UTF-16 and UTF-32,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>endianness</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be the symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>big</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>little</CODE>; when omitted, it defaults to big endian.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Bytevectors-as-Arrays></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Bytevectors-as-Uniform-Vectors" rel=next>Bytevectors as Uniform Vectors</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Bytevectors-as-Strings" rel=prev>Bytevectors as Strings</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Bytevectors" rel=up>Bytevectors</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Accessing-Bytevectors-with-the-Array-API></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.6.7 Accessing Bytevectors with the Array API</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">As an extension to the R6RS, Guile allows bytevectors to be manipulated with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>array</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedures (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Arrays">Arrays</A>). When using these APIs, bytes are accessed one at a time as 8-bit unsigned integers:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define bv #vu8(0 1 2 3))

(array? bv)
&#8658; #t

(array-rank bv)
&#8658; 1

(array-ref bv 2)
&#8658; 2

;; Note the different argument order on array-set!.
(array-set! bv 77 2)
(array-ref bv 2)
&#8658; 77

(array-type bv)
&#8658; vu8
</PRE></DIV>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Bytevectors-as-Uniform-Vectors></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Bytevectors-as-Arrays" rel=prev>Bytevectors as Arrays</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Bytevectors" rel=up>Bytevectors</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Accessing-Bytevectors-with-the-SRFI_002d4-API></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.6.8 Accessing Bytevectors with the SRFI-4 API</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Bytevectors may also be accessed with the SRFI-4 API. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d4-and-Bytevectors">SRFI-4 and Bytevectors</A>, for more information.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Symbols></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Keywords" rel=next>Keywords</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Bytevectors" rel=prev>Bytevectors</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Simple-Data-Types" rel=up>Simple Data Types</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Symbols-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.6.7 Symbols</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Symbols></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Symbols in Scheme are widely used in three ways: as items of discrete data, as lookup keys for alists and hash tables, and to denote variable references.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>symbol</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is similar to a string in that it is defined by a sequence of characters. The sequence of characters is known as the symbol&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>name</EM>. In the usual case &#8212; that is, where the symbol&#8217;s name doesn&#8217;t include any characters that could be confused with other elements of Scheme syntax &#8212; a symbol is written in a Scheme program by writing the sequence of characters that make up the name,<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>without</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>any quotation marks or other special syntax. For example, the symbol whose name is &#8220;multiply-by-2&#8221; is written, simply:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>multiply-by-2
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Notice how this differs from a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>string</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>with contents &#8220;multiply-by-2&#8221;, which is written with double quotation marks, like this:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>"multiply-by-2"
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Looking beyond how they are written, symbols are different from strings in two important respects.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The first important difference is uniqueness. If the same-looking string is read twice from two different places in a program, the result is two<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>different</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>string objects whose contents just happen to be the same. If, on the other hand, the same-looking symbol is read twice from two different places in a program, the result is the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>same</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>symbol object both times.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Given two read symbols, you can use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to test whether they are the same (that is, have the same name).<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the most efficient comparison operator in Scheme, and comparing two symbols like this is as fast as comparing, for example, two numbers. Given two strings, on the other hand, you must use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string=?</CODE>, which are much slower comparison operators, to determine whether the strings have the same contents.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(define sym1 (quote hello))
(define sym2 (quote hello))
(eq? sym1 sym2) &#8658; #t

(define str1 "hello")
(define str2 "hello")
(eq? str1 str2) &#8658; #f
(equal? str1 str2) &#8658; #t
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The second important difference is that symbols, unlike strings, are not self-evaluating. This is why we need the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(quote &#8230;)</CODE>s in the example above:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(quote hello)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>evaluates to the symbol named "hello" itself, whereas an unquoted<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hello</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<EM>read</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the symbol named "hello" and evaluated as a variable reference &#8230; about which more below (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Symbol-Variables">Symbol Variables</A>).</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Symbol-Data">Symbol Data</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Symbols as discrete data.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Symbol-Keys">Symbol Keys</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Symbols as lookup keys.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#Symbol-Variables">Symbol Variables</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Symbols as denoting variables.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#Symbol-Primitives">Symbol Primitives</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Operations related to symbols.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#Symbol-Props">Symbol Props</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Function slots and property lists.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=6 href="https://www.gnu.org/software/guile/manual/guile.html#Symbol-Read-Syntax">Symbol Read Syntax</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Extended read syntax for symbols.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=7 href="https://www.gnu.org/software/guile/manual/guile.html#Symbol-Uninterned">Symbol Uninterned</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Uninterned symbols.</TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Symbol-Data></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Symbol-Keys" rel=next>Symbol Keys</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Symbols" rel=up>Symbols</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Symbols-as-Discrete-Data></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.7.1 Symbols as Discrete Data</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Numbers and symbols are similar to the extent that they both lend themselves to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>comparison. But symbols are more descriptive than numbers, because a symbol&#8217;s name can be used directly to describe the concept for which that symbol stands.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For example, imagine that you need to represent some colours in a computer program. Using numbers, you would have to choose arbitrarily some mapping between numbers and colours, and then take care to use that mapping consistently:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>;; 1=red, 2=green, 3=purple

(if (eq? (colour-of car) 1)
    ...)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">You can make the mapping more explicit and the code more readable by defining constants:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(define red 1)
(define green 2)
(define purple 3)

(if (eq? (colour-of car) red)
    ...)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">But the simplest and clearest approach is not to use numbers at all, but symbols whose names specify the colours that they refer to:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(if (eq? (colour-of car) 'red)
    ...)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The descriptive advantages of symbols over numbers increase as the set of concepts that you want to describe grows. Suppose that a car object can have other properties as well, such as whether it has or uses:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>automatic or manual transmission</LI>
<LI>leaded or unleaded fuel</LI>
<LI>power steering (or not).</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Then a car&#8217;s combined property set could be naturally represented and manipulated as a list of symbols:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(properties-of car1)
&#8658;
(red manual unleaded power-steering)

(if (memq 'power-steering (properties-of car1))
    (display "Unfit people can drive this car.\n")
    (display "You'll need strong arms to drive this car!\n"))
-|
Unfit people can drive this car.
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Remember, the fundamental property of symbols that we are relying on here is that an occurrence of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>'red</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in one part of a program is an<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>indistinguishable</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>symbol from an occurrence of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>'red</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in another part of a program; this means that symbols can usefully be compared using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq?</CODE>. At the same time, symbols have naturally descriptive names. This combination of efficiency and descriptive power makes them ideal for use as discrete data.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Symbol-Keys></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Symbol-Variables" rel=next>Symbol Variables</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Symbol-Data" rel=prev>Symbol Data</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Symbols" rel=up>Symbols</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Symbols-as-Lookup-Keys></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.7.2 Symbols as Lookup Keys</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Given their efficiency and descriptive power, it is natural to use symbols as the keys in an association list or hash table.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To illustrate this, consider a more structured representation of the car properties example from the preceding subsection. Rather than mixing all the properties up together in a flat list, we could use an association list like this:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(define car1-properties '((colour . red)
                          (transmission . manual)
                          (fuel . unleaded)
                          (steering . power-assisted)))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Notice how this structure is more explicit and extensible than the flat list. For example it makes clear that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>manual</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>refers to the transmission rather than, say, the windows or the locking of the car. It also allows further properties to use the same symbols among their possible values without becoming ambiguous:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(define car1-properties '((colour . red)
                          (transmission . manual)
                          (fuel . unleaded)
                          (steering . power-assisted)
                          (seat-colour . red)
                          (locking . manual)))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">With a representation like this, it is easy to use the efficient<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assq-XXX</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>family of procedures (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Association-Lists">Association Lists</A>) to extract or change individual pieces of information:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(assq-ref car1-properties 'fuel) &#8658; unleaded
(assq-ref car1-properties 'transmission) &#8658; manual

(assq-set! car1-properties 'seat-colour 'black)
&#8658;
((colour . red)
 (transmission . manual)
 (fuel . unleaded)
 (steering . power-assisted)
 (seat-colour . black)
 (locking . manual)))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Hash tables also have keys, and exactly the same arguments apply to the use of symbols in hash tables as in association lists. The hash value that Guile uses to decide where to add a symbol-keyed entry to a hash table can be obtained by calling the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>symbol-hash</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-symbol_002dhash></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>symbol-hash</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>symbol</EM></DT>
<DT><A name=index-scm_005fsymbol_005fhash></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_symbol_hash</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(symbol)</EM></DT>
<DD>
<P>Return a hash value for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>symbol</VAR>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Hash-Tables">Hash Tables</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>for information about hash tables in general, and for why you might choose to use a hash table rather than an association list.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Symbol-Variables></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Symbol-Primitives" rel=next>Symbol Primitives</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Symbol-Keys" rel=prev>Symbol Keys</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Symbols" rel=up>Symbols</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Symbols-as-Denoting-Variables></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.7.3 Symbols as Denoting Variables</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When an unquoted symbol in a Scheme program is evaluated, it is interpreted as a variable reference, and the result of the evaluation is the appropriate variable&#8217;s value.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For example, when the expression<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(string-length "abcd")</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is read and evaluated, the sequence of characters<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string-length</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is read as the symbol whose name is "string-length". This symbol is associated with a variable whose value is the procedure that implements string length calculation. Therefore evaluation of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string-length</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>symbol results in that procedure.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The details of the connection between an unquoted symbol and the variable to which it refers are explained elsewhere. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Binding-Constructs">Binding Constructs</A>, for how associations between symbols and variables are created, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Modules">Modules</A>, for how those associations are affected by Guile&#8217;s module system.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Symbol-Primitives></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Symbol-Props" rel=next>Symbol Props</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Symbol-Variables" rel=prev>Symbol Variables</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Symbols" rel=up>Symbols</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Operations-Related-to-Symbols></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.7.4 Operations Related to Symbols</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Given any Scheme value, you can determine whether it is a symbol using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>symbol?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>primitive:</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-symbol_003f-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-symbol_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>symbol?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-scm_005fsymbol_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_symbol_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a symbol, otherwise return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fis_005fsymbol></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_is_symbol</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM val)</EM></DT>
<DD>
<P>Equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_is_true (scm_symbol_p (val))</CODE>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Once you know that you have a symbol, you can obtain its name as a string by calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>symbol-&gt;string</CODE>. Note that Guile differs by default from R5RS on the details of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>symbol-&gt;string</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as regards case-sensitivity:</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-symbol_002d_003estring-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-symbol_002d_003estring></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>symbol-&gt;string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>s</EM></DT>
<DT><A name=index-scm_005fsymbol_005fto_005fstring></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_symbol_to_string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(s)</EM></DT>
<DD>
<P>Return the name of symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a string. By default, Guile reads symbols case-sensitively, so the string returned will have the same case variation as the sequence of characters that caused<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to be created.</P>
<P>If Guile is set to read symbols case-insensitively (as specified by R5RS), and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>comes into being as part of a literal expression (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/r5rs.html#Literal-expressions">Literal expressions</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>The Revised^5 Report on Scheme</CITE>) or by a call to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string-ci-&gt;symbol</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedures, Guile converts any alphabetic characters in the symbol&#8217;s name to lower case before creating the symbol object, so the string returned here will be in lower case.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>was created by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string-&gt;symbol</CODE>, the case of characters in the string returned will be the same as that in the string that was passed to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string-&gt;symbol</CODE>, regardless of Guile&#8217;s case-sensitivity setting at the time<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>was created.</P>
<P>It is an error to apply mutation procedures like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string-set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to strings returned by this procedure.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Most symbols are created by writing them literally in code. However it is also possible to create symbols programmatically using the following procedures:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-symbol></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>symbol</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>char&#8230;</EM></DT>
<DD><A name=index-symbol-1></A>
<P>Return a newly allocated symbol made from the given character arguments.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(symbol #\x #\y #\z) &#8658; xyz
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-list_002d_003esymbol></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list-&gt;symbol</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst</EM></DT>
<DD><A name=index-list_002d_003esymbol-1></A>
<P>Return a newly allocated symbol made from a list of characters.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(list-&gt;symbol '(#\a #\b #\c)) &#8658; abc
</PRE></DIV></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-symbol_002dappend-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-symbol_002dappend></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>symbol-append</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>arg &#8230;</EM></DT>
<DD>
<P>Return a newly allocated symbol whose characters form the concatenation of the given symbols,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=enddots>...</SMALL>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(let ((h 'hello))
  (symbol-append h 'world))
&#8658; helloworld
</PRE></DIV></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-string_002d_003esymbol-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002d_003esymbol></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-&gt;symbol</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>string</EM></DT>
<DT><A name=index-scm_005fstring_005fto_005fsymbol></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_to_symbol</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(string)</EM></DT>
<DD>
<P>Return the symbol whose name is<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>string</VAR>. This procedure can create symbols with names containing special characters or letters in the non-standard case, but it is usually a bad idea to create such symbols because in some implementations of Scheme they cannot be read as themselves.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002dci_002d_003esymbol></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-ci-&gt;symbol</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str</EM></DT>
<DT><A name=index-scm_005fstring_005fci_005fto_005fsymbol></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_string_ci_to_symbol</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str)</EM></DT>
<DD>
<P>Return the symbol whose name is<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR>. If Guile is currently reading symbols case-insensitively,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is converted to lowercase before the returned symbol is looked up or created.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following examples illustrate Guile&#8217;s detailed behaviour as regards the case-sensitivity of symbols:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(read-enable 'case-insensitive)   ; R5RS compliant behaviour

(symbol-&gt;string 'flying-fish)    &#8658; "flying-fish"
(symbol-&gt;string 'Martin)         &#8658; "martin"
(symbol-&gt;string
   (string-&gt;symbol "Malvina"))   &#8658; "Malvina"

(eq? 'mISSISSIppi 'mississippi)  &#8658; #t
(string-&gt;symbol "mISSISSIppi")   &#8658; mISSISSIppi
(eq? 'bitBlt (string-&gt;symbol "bitBlt")) &#8658; #f
(eq? 'LolliPop
  (string-&gt;symbol (symbol-&gt;string 'LolliPop))) &#8658; #t
(string=? "K. Harper, M.D."
  (symbol-&gt;string
    (string-&gt;symbol "K. Harper, M.D."))) &#8658; #t

(read-disable 'case-insensitive)   ; Guile default behaviour

(symbol-&gt;string 'flying-fish)    &#8658; "flying-fish"
(symbol-&gt;string 'Martin)         &#8658; "Martin"
(symbol-&gt;string
   (string-&gt;symbol "Malvina"))   &#8658; "Malvina"

(eq? 'mISSISSIppi 'mississippi)  &#8658; #f
(string-&gt;symbol "mISSISSIppi")   &#8658; mISSISSIppi
(eq? 'bitBlt (string-&gt;symbol "bitBlt")) &#8658; #t
(eq? 'LolliPop
  (string-&gt;symbol (symbol-&gt;string 'LolliPop))) &#8658; #t
(string=? "K. Harper, M.D."
  (symbol-&gt;string
    (string-&gt;symbol "K. Harper, M.D."))) &#8658; #t
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">From C, there are lower level functions that construct a Scheme symbol from a C string in the current locale encoding.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When you want to do more from C, you should convert between symbols and strings using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_symbol_to_string</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_string_to_symbol</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and work with the strings.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005ffrom_005flatin1_005fsymbol></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_latin1_symbol</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const char *name)</EM></DT>
<DT><A name=index-scm_005ffrom_005futf8_005fsymbol></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_utf8_symbol</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const char *name)</EM></DT>
<DD>
<P>Construct and return a Scheme symbol whose name is specified by the null-terminated C string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>. These are appropriate when the C string is hard-coded in the source code.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005ffrom_005flocale_005fsymbol></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_locale_symbol</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const char *name)</EM></DT>
<DT><A name=index-scm_005ffrom_005flocale_005fsymboln></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_locale_symboln</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const char *name, size_t len)</EM></DT>
<DD>
<P>Construct and return a Scheme symbol whose name is specified by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>. For<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_from_locale_symbol</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be null terminated; for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_from_locale_symboln</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>the length of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified explicitly by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>len</VAR>.</P>
<P>Note that these functions should<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>not</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>be used when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a C string constant, because there is no guarantee that the current locale will match that of the execution character set, used for string and character constants. Most modern C compilers use UTF-8 by default, so in such cases we recommend<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_from_utf8_symbol</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005ftake_005flocale_005fsymbol></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_take_locale_symbol</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(char *str)</EM></DT>
<DT><A name=index-scm_005ftake_005flocale_005fsymboln></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_take_locale_symboln</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(char *str, size_t len)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_from_locale_symbol</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_from_locale_symboln</CODE>, respectively, but also frees<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>free</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>eventually. Thus, you can use this function when you would free<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>anyway immediately after creating the Scheme string. In certain cases, Guile can then use<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>directly as its internal representation.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The size of a symbol can also be obtained from C:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fsymbol_005flength></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>size_t</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_symbol_length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM sym)</EM></DT>
<DD>
<P>Return the number of characters in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sym</VAR>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Finally, some applications, especially those that generate new Scheme code dynamically, need to generate symbols for use in the generated code. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gensym</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>primitive meets this need:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-gensym></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>gensym</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[prefix]</EM></DT>
<DT><A name=index-scm_005fgensym></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_gensym</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(prefix)</EM></DT>
<DD>
<P>Create a new symbol with a name constructed from a prefix and a counter value. The string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>prefix</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be specified as an optional argument. Default prefix is &#8216;<SAMP>&nbsp;g</SAMP>&#8217;. The counter is increased by 1 at each call. There is no provision for resetting the counter.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The symbols generated by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gensym</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>likely</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>to be unique, since their names begin with a space and it is only otherwise possible to generate such symbols if a programmer goes out of their way to do so. Uniqueness can be guaranteed by instead using uninterned symbols (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Symbol-Uninterned">Symbol Uninterned</A>), though they can&#8217;t be usefully written out and read back in.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Symbol-Props></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Symbol-Read-Syntax" rel=next>Symbol Read Syntax</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Symbol-Primitives" rel=prev>Symbol Primitives</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Symbols" rel=up>Symbols</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Function-Slots-and-Property-Lists></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.7.5 Function Slots and Property Lists</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In traditional Lisp dialects, symbols are often understood as having three kinds of value at once:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>variable</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>value, which is used when the symbol appears in code in a variable reference context</LI>
<LI>a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>function</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>value, which is used when the symbol appears in code in a function name position (i.e. as the first element in an unquoted list)</LI>
<LI>a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>property list</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>value, which is used when the symbol is given as the first argument to Lisp&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>put</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>get</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>functions.</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Although Scheme (as one of its simplifications with respect to Lisp) does away with the distinction between variable and function namespaces, Guile currently retains some elements of the traditional structure in case they turn out to be useful when implementing translators for other languages, in particular Emacs Lisp.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Specifically, Guile symbols have two extra slots, one for a symbol&#8217;s property list, and one for its &#8220;function value.&#8221; The following procedures are provided to access these slots.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-symbol_002dfref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>symbol-fref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>symbol</EM></DT>
<DT><A name=index-scm_005fsymbol_005ffref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_symbol_fref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(symbol)</EM></DT>
<DD>
<P>Return the contents of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>symbol</VAR>&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>function slot</EM>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-symbol_002dfset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>symbol-fset!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>symbol value</EM></DT>
<DT><A name=index-scm_005fsymbol_005ffset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_symbol_fset_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(symbol, value)</EM></DT>
<DD>
<P>Set the contents of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>symbol</VAR>&#8217;s function slot to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-symbol_002dpref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>symbol-pref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>symbol</EM></DT>
<DT><A name=index-scm_005fsymbol_005fpref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_symbol_pref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(symbol)</EM></DT>
<DD>
<P>Return the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>property list</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>currently associated with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>symbol</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-symbol_002dpset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>symbol-pset!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>symbol value</EM></DT>
<DT><A name=index-scm_005fsymbol_005fpset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_symbol_pset_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(symbol, value)</EM></DT>
<DD>
<P>Set<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>symbol</VAR>&#8217;s property list to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-symbol_002dproperty></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>symbol-property</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sym prop</EM></DT>
<DD>
<P>From<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sym</VAR>&#8217;s property list, return the value for property<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>prop</VAR>. The assumption is that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sym</VAR>&#8217;s property list is an association list whose keys are distinguished from each other using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE>;<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>prop</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be one of the keys in that list. If the property list has no entry for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>prop</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>symbol-property</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-set_002dsymbol_002dproperty_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-symbol-property!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sym prop val</EM></DT>
<DD>
<P>In<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sym</VAR>&#8217;s property list, set the value for property<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>prop</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val</VAR>, or add a new entry for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>prop</VAR>, with value<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val</VAR>, if none already exists. For the structure of the property list, see<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>symbol-property</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-symbol_002dproperty_002dremove_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>symbol-property-remove!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>sym prop</EM></DT>
<DD>
<P>From<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sym</VAR>&#8217;s property list, remove the entry for property<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>prop</VAR>, if there is one. For the structure of the property list, see<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>symbol-property</CODE>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Support for these extra slots may be removed in a future release, and it is probably better to avoid using them. For a more modern and Schemely approach to properties, see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Object-Properties">Object Properties</A>.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Symbol-Read-Syntax></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Symbol-Uninterned" rel=next>Symbol Uninterned</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Symbol-Props" rel=prev>Symbol Props</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Symbols" rel=up>Symbols</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Extended-Read-Syntax-for-Symbols></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.7.6 Extended Read Syntax for Symbols</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-r7rs_002dsymbols></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The read syntax for a symbol is a sequence of letters, digits, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>extended alphabetic characters</EM>, beginning with a character that cannot begin a number. In addition, the special cases of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>...</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are read as symbols even though numbers can begin with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Extended alphabetic characters may be used within identifiers as if they were letters. The set of extended alphabetic characters is:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>! $ % &amp; * + - . / : &lt; = &gt; ? @ ^ _ ~
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In addition to the standard read syntax defined above (which is taken from R5RS (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/r5rs.html#Formal-syntax">Formal syntax</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>The Revised^5 Report on Scheme</CITE>)), Guile provides an extended symbol read syntax that allows the inclusion of unusual characters such as space characters, newlines and parentheses. If (for whatever reason) you need to write a symbol containing characters not mentioned above, you can do so as follows.</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>Begin the symbol with the characters<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#{</CODE>,</LI>
<LI>write the characters of the symbol and</LI>
<LI>finish the symbol with the characters<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>}#</CODE>.</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here are a few examples of this form of read syntax. The first symbol needs to use extended syntax because it contains a space character, the second because it contains a line break, and the last because it looks like a number.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>#{foo bar}#

#{what
ever}#

#{4242}#
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Although Guile provides this extended read syntax for symbols, widespread usage of it is discouraged because it is not portable and not very readable.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Alternatively, if you enable the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>r7rs-symbols</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>read option (see see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Scheme-Read">Scheme Read</A>), you can write arbitrary symbols using the same notation used for strings, except delimited by vertical bars instead of double quotes.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>|foo bar|
|\x3BB; is a greek lambda|
|\| is a vertical bar|
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that there&#8217;s also an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>r7rs-symbols</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>print option (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Scheme-Write">Scheme Write</A>). To enable the use of this notation, evaluate one or both of the following expressions:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(read-enable  'r7rs-symbols)
(print-enable 'r7rs-symbols)
</PRE></DIV>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Symbol-Uninterned></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Symbol-Read-Syntax" rel=prev>Symbol Read Syntax</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Symbols" rel=up>Symbols</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Uninterned-Symbols></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.7.7 Uninterned Symbols</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">What makes symbols useful is that they are automatically kept unique. There are no two symbols that are distinct objects but have the same name. But of course, there is no rule without exception. In addition to the normal symbols that have been discussed up to now, you can also create special<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>uninterned</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>symbols that behave slightly differently.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To understand what is different about them and why they might be useful, we look at how normal symbols are actually kept unique.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Whenever Guile wants to find the symbol with a specific name, for example during<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or when executing<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string-&gt;symbol</CODE>, it first looks into a table of all existing symbols to find out whether a symbol with the given name already exists. When this is the case, Guile just returns that symbol. When not, a new symbol with the name is created and entered into the table so that it can be found later.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Sometimes you might want to create a symbol that is guaranteed &#8216;fresh&#8217;, i.e. a symbol that did not exist previously. You might also want to somehow guarantee that no one else will ever unintentionally stumble across your symbol in the future. These properties of a symbol are often needed when generating code during macro expansion. When introducing new temporary variables, you want to guarantee that they don&#8217;t conflict with variables in other people&#8217;s code.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The simplest way to arrange for this is to create a new symbol but not enter it into the global table of all symbols. That way, no one will ever get access to your symbol by chance. Symbols that are not in the table are called<EM>uninterned</EM>. Of course, symbols that<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>are</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the table are called<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>interned</EM>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">You create new uninterned symbols with the function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-symbol</CODE>. You can test whether a symbol is interned or not with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>symbol-interned?</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Uninterned symbols break the rule that the name of a symbol uniquely identifies the symbol object. Because of this, they can not be written out and read back in like interned symbols. Currently, Guile has no support for reading uninterned symbols. Note that the function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gensym</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not return uninterned symbols for this reason.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dsymbol></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-symbol</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>name</EM></DT>
<DT><A name=index-scm_005fmake_005fsymbol></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_symbol</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(name)</EM></DT>
<DD>
<P>Return a new uninterned symbol with the name<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>. The returned symbol is guaranteed to be unique and future calls to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string-&gt;symbol</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will not return it.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-symbol_002dinterned_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>symbol-interned?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>symbol</EM></DT>
<DT><A name=index-scm_005fsymbol_005finterned_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_symbol_interned_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(symbol)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>symbol</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is interned, otherwise return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For example:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(define foo-1 (string-&gt;symbol "foo"))
(define foo-2 (string-&gt;symbol "foo"))
(define foo-3 (make-symbol "foo"))
(define foo-4 (make-symbol "foo"))

(eq? foo-1 foo-2)
&#8658; #t
; Two interned symbols with the same name are the same object,

(eq? foo-1 foo-3)
&#8658; #f
; but a call to make-symbol with the same name returns a
; distinct object.

(eq? foo-3 foo-4)
&#8658; #f
; A call to make-symbol always returns a new object, even for
; the same name.

foo-3
&#8658; #&lt;uninterned-symbol foo 8085290&gt;
; Uninterned symbols print differently from interned symbols,

(symbol? foo-3)
&#8658; #t
; but they are still symbols,

(symbol-interned? foo-3)
&#8658; #f
; just not interned.
</PRE></DIV>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Keywords></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Other-Types" rel=next>Other Types</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Symbols" rel=prev>Symbols</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Simple-Data-Types" rel=up>Simple Data Types</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Keywords-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.6.8 Keywords</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Keywords></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Keywords are self-evaluating objects with a convenient read syntax that makes them easy to type.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile&#8217;s keyword support conforms to R5RS, and adds a (switchable) read syntax extension to permit keywords to begin with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>:</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as well as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:</CODE>, or to end with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>:</CODE>.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Why-Use-Keywords_003f">Why Use Keywords?</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Motivation for keyword usage.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Coding-With-Keywords">Coding With Keywords</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>How to use keywords.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#Keyword-Read-Syntax">Keyword Read Syntax</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Read syntax for keywords.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#Keyword-Procedures">Keyword Procedures</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Procedures for dealing with keywords.</TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Why-Use-Keywords_003f></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Coding-With-Keywords" rel=next>Coding With Keywords</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Keywords" rel=up>Keywords</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Why-Use-Keywords_003f-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.8.1 Why Use Keywords?</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Keywords are useful in contexts where a program or procedure wants to be able to accept a large number of optional arguments without making its interface unmanageable.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To illustrate this, consider a hypothetical<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-window</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure, which creates a new window on the screen for drawing into using some graphical toolkit. There are many parameters that the caller might like to specify, but which could also be sensibly defaulted, for example:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>color depth &#8211; Default: the color depth for the screen</LI>
<LI>background color &#8211; Default: white</LI>
<LI>width &#8211; Default: 600</LI>
<LI>height &#8211; Default: 400</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-window</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>did not use keywords, the caller would have to pass in a value for each possible argument, remembering the correct argument order and using a special value to indicate the default value for that argument:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(make-window 'default              ;; Color depth
             'default              ;; Background color
             800                   ;; Width
             100                   ;; Height
             &#8230;)                  ;; More make-window arguments
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">With keywords, on the other hand, defaulted arguments are omitted, and non-default arguments are clearly tagged by the appropriate keyword. As a result, the invocation becomes much clearer:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(make-window #:width 800 #:height 100)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">On the other hand, for a simpler procedure with few arguments, the use of keywords would be a hindrance rather than a help. The primitive procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cons</CODE>, for example, would not be improved if it had to be invoked as</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(cons #:car x #:cdr y)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">So the decision whether to use keywords or not is purely pragmatic: use them if they will clarify the procedure invocation at point of call.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Coding-With-Keywords></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Keyword-Read-Syntax" rel=next>Keyword Read Syntax</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Why-Use-Keywords_003f" rel=prev>Why Use Keywords?</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Keywords" rel=up>Keywords</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Coding-With-Keywords-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.8.2 Coding With Keywords</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If a procedure wants to support keywords, it should take a rest argument and then use whatever means is convenient to extract keywords and their corresponding arguments from the contents of that rest argument.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following example illustrates the principle: the code for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-window</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>uses a helper procedure called<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>get-keyword-value</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to extract individual keyword arguments from the rest argument.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(define (get-keyword-value args keyword default)
  (let ((kv (memq keyword args)))
    (if (and kv (&gt;= (length kv) 2))
        (cadr kv)
        default)))

(define (make-window . args)
  (let ((depth  (get-keyword-value args #:depth  screen-depth))
        (bg     (get-keyword-value args #:bg     "white"))
        (width  (get-keyword-value args #:width  800))
        (height (get-keyword-value args #:height 100))
        &#8230;)
    &#8230;))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">But you don&#8217;t need to write<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>get-keyword-value</CODE>. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 optargs)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module provides a set of powerful macros that you can use to implement keyword-supporting procedures like this:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(use-modules (ice-9 optargs))

(define (make-window . args)
  (let-keywords args #f ((depth  screen-depth)
                         (bg     "white")
                         (width  800)
                         (height 100))
    ...))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Or, even more economically, like this:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(use-modules (ice-9 optargs))

(define* (make-window #:key (depth  screen-depth)
                            (bg     "white")
                            (width  800)
                            (height 100))
  ...)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For further details on<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>let-keywords</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and other facilities provided by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 optargs)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module, see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Optional-Arguments">Optional Arguments</A>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To handle keyword arguments from procedures implemented in C, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_c_bind_keyword_arguments</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Keyword-Procedures">Keyword Procedures</A>).</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Keyword-Read-Syntax></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Keyword-Procedures" rel=next>Keyword Procedures</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Coding-With-Keywords" rel=prev>Coding With Keywords</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Keywords" rel=up>Keywords</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Keyword-Read-Syntax-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.8.3 Keyword Read Syntax</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile, by default, only recognizes a keyword syntax that is compatible with R5RS. A token of the form<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:NAME</CODE>, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NAME</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>has the same syntax as a Scheme symbol (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Symbol-Read-Syntax">Symbol Read Syntax</A>), is the external representation of the keyword named<CODE>NAME</CODE>. Keyword objects print using this syntax as well, so values containing keyword objects can be read back into Guile. When used in an expression, keywords are self-quoting objects.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>keyword</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>read option is set to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>'prefix</CODE>, Guile also recognizes the alternative read syntax<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>:NAME</CODE>. Otherwise, tokens of the form<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>:NAME</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are read as symbols, as required by R5RS.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d88-keyword-syntax></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>keyword</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>read option is set to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>'postfix</CODE>, Guile recognizes the SRFI-88 read syntax<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NAME:</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d88">SRFI-88</A>). Otherwise, tokens of this form are read as symbols.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To enable and disable the alternative non-R5RS keyword syntax, you use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read-set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure documented<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Scheme-Read">Scheme Read</A>. Note that the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>prefix</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>postfix</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>syntax are mutually exclusive.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(read-set! keywords 'prefix)

#:type
&#8658;
#:type

:type
&#8658;
#:type

(read-set! keywords 'postfix)

type:
&#8658;
#:type

:type
&#8658;
:type

(read-set! keywords #f)

#:type
&#8658;
#:type

:type
-|
ERROR: In expression :type:
ERROR: Unbound variable: :type
ABORT: (unbound-variable)
</PRE></DIV>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Keyword-Procedures></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Keyword-Read-Syntax" rel=prev>Keyword Read Syntax</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Keywords" rel=up>Keywords</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Keyword-Procedures-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.6.8.4 Keyword Procedures</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-keyword_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>keyword?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-scm_005fkeyword_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_keyword_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a keyword, else<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-keyword_002d_003esymbol></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>keyword-&gt;symbol</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>keyword</EM></DT>
<DT><A name=index-scm_005fkeyword_005fto_005fsymbol></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_keyword_to_symbol</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(keyword)</EM></DT>
<DD>
<P>Return the symbol with the same name as<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>keyword</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-symbol_002d_003ekeyword></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>symbol-&gt;keyword</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>symbol</EM></DT>
<DT><A name=index-scm_005fsymbol_005fto_005fkeyword></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_symbol_to_keyword</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(symbol)</EM></DT>
<DD>
<P>Return the keyword with the same name as<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>symbol</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fis_005fkeyword></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_is_keyword</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM obj)</EM></DT>
<DD>
<P>Equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_is_true (scm_keyword_p (<VAR>obj</VAR>))</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005ffrom_005flocale_005fkeyword></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_locale_keyword</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const char *name)</EM></DT>
<DT><A name=index-scm_005ffrom_005flocale_005fkeywordn></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_locale_keywordn</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const char *name, size_t len)</EM></DT>
<DD>
<P>Equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_symbol_to_keyword (scm_from_locale_symbol (<VAR>name</VAR>))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_symbol_to_keyword (scm_from_locale_symboln (<VAR>name</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>len</VAR>))</CODE>, respectively.</P>
<P>Note that these functions should<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>not</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>be used when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a C string constant, because there is no guarantee that the current locale will match that of the execution character set, used for string and character constants. Most modern C compilers use UTF-8 by default, so in such cases we recommend<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_from_utf8_keyword</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005ffrom_005flatin1_005fkeyword></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_latin1_keyword</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const char *name)</EM></DT>
<DT><A name=index-scm_005ffrom_005futf8_005fkeyword></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_from_utf8_keyword</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const char *name)</EM></DT>
<DD>
<P>Equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_symbol_to_keyword (scm_from_latin1_symbol (<VAR>name</VAR>))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_symbol_to_keyword (scm_from_utf8_symbol (<VAR>name</VAR>))</CODE>, respectively.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fbind_005fkeyword_005farguments></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_bind_keyword_arguments</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const char *subr, SCM rest, scm_t_keyword_arguments_flags flags, SCM keyword1, SCM *argp1, &#8230;, SCM keywordN, SCM *argpN,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_UNDEFINED</CODE>)</EM></DT>
<DD>
<P>Extract the specified keyword arguments from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rest</VAR>, which is not modified. If the keyword argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>keyword1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is present in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rest</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with an associated value, that value is stored in the variable pointed to by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>argp1</VAR>, otherwise the variable is left unchanged. Similarly for the other keywords and argument pointers up to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>keywordN</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>argpN</VAR>. The argument list to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_c_bind_keyword_arguments</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be terminated by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_UNDEFINED</CODE>.</P>
<P>Note that since the variables pointed to by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>argp1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>through<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>argpN</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are left unchanged if the associated keyword argument is not present, they should be initialized to their default values before calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_c_bind_keyword_arguments</CODE>. Alternatively, you can initialize them to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_UNDEFINED</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>before the call, and then use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_UNBNDP</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>after the call to see which ones were provided.</P>
<P>If an unrecognized keyword argument is present in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rest</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>flags</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not contain<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_ALLOW_OTHER_KEYS</CODE>, or if non-keyword arguments are present and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>flags</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not contain<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_ALLOW_NON_KEYWORD_ARGUMENTS</CODE>, an exception is raised.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>subr</VAR>should be the name of the procedure receiving the keyword arguments, for purposes of error reporting.</P>
<P>For example:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>SCM k_delimiter;
SCM k_grammar;
SCM sym_infix;

SCM my_string_join (SCM strings, SCM rest)
{
  SCM delimiter = SCM_UNDEFINED;
  SCM grammar   = sym_infix;

  scm_c_bind_keyword_arguments ("my-string-join", rest, 0,
                                k_delimiter, &amp;delimiter,
                                k_grammar, &amp;grammar,
                                SCM_UNDEFINED);

  if (SCM_UNBNDP (delimiter))
    delimiter = scm_from_utf8_string (" ");

  return scm_string_join (strings, delimiter, grammar);
}

void my_init ()
{
  k_delimiter = scm_from_utf8_keyword ("delimiter");
  k_grammar   = scm_from_utf8_keyword ("grammar");
  sym_infix   = scm_from_utf8_symbol  ("infix");
  scm_c_define_gsubr ("my-string-join", 1, 0, 1, my_string_join);
}
</PRE></DIV></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Other-Types></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Keywords" rel=prev>Keywords</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Simple-Data-Types" rel=up>Simple Data Types</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=g_t_0060_0060Functionality_002dCentric_0027_0027-Data-Types></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.6.9 &#8220;Functionality-Centric&#8221; Data Types</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Procedures and macros are documented in their own sections: see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Procedures">Procedures</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Macros">Macros</A>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Variable objects are documented as part of the description of Guile&#8217;s module system: see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Variables">Variables</A>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Asyncs, dynamic roots and fluids are described in the section on scheduling: see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Scheduling">Scheduling</A>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Hooks are documented in the section on general utility functions: see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Hooks">Hooks</A>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Ports are described in the section on I/O: see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Input-and-Output">Input and Output</A>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Regular expressions are described in their own section: see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Regular-Expressions">Regular Expressions</A>.