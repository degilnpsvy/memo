<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>6.11 General Utility Functions</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This chapter contains information about procedures which are not cleanly tied to a specific data type. Because of their wide range of applications, they are collected in a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>utility</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>chapter.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Equality">Equality</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>When are two values &#8216;the same&#8217;?</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Object-Properties">Object Properties</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>A modern interface to object properties.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#Sorting">Sorting</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Sort utility procedures.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#Copying">Copying</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Copying deep structures.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#General-Conversion">General Conversion</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Converting objects to strings.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=6 href="https://www.gnu.org/software/guile/manual/guile.html#Hooks">Hooks</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>User-customizable event lists.</TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Equality></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Object-Properties" rel=next>Object Properties</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Utility-Functions" rel=up>Utility Functions</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Equality-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.11.1 Equality</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-sameness></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-equality></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">There are three kinds of core equality predicates in Scheme, described below. The same kinds of comparisons arise in other functions, like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>memq</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and friends (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#List-Searching">List Searching</A>).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For all three tests, objects of different types are never equal. So for instance a list and a vector are not<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE>, even if their contents are the same. Exact and inexact numbers are considered different types too, and are hence not equal even if their values are the same.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>eq?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>tests just for the same object (essentially a pointer comparison). This is fast, and can be used when searching for a particular object, or when working with symbols or keywords (which are always unique objects).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>eqv?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>extends<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to look at the value of numbers and characters. It can for instance be used somewhat like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>=</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Comparison">Comparison</A>) but without an error if one operand isn&#8217;t a number.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>equal?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>goes further, it looks (recursively) into the contents of lists, vectors, etc. This is good for instance on lists that have been read or calculated in various places and are the same, just not made up of the same pairs. Such lists look the same (when printed), and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will consider them the same.</P><BR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-eq_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>eq?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DT><A name=index-scm_005feq_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_eq_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x, y)</EM></DT>
<DD><A name=index-eq_003f-3></A>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are the same object, except for numbers and characters. For example,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define x (vector 1 2 3))
(define y (vector 1 2 3))

(eq? x x)  &#8658; #t
(eq? x y)  &#8658; #f
</PRE></DIV>
<P>Numbers and characters are not equal to any other object, but the problem is they&#8217;re not necessarily<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to themselves either. This is even so when the number comes directly from a variable,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(let ((n (+ 2 3)))
  (eq? n n))       &#8658; *unspecified*
</PRE></DIV>
<P>Generally<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eqv?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>below should be used when comparing numbers or characters.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>=</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Comparison">Comparison</A>) or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char=?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Characters">Characters</A>) can be used too.</P>
<P>It&#8217;s worth noting that end-of-list<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>()</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, a symbol of a given name, and a keyword of a given name, are unique objects. There&#8217;s just one of each, so for instance no matter how<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>arises in a program, it&#8217;s the same object and can be compared with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq?</CODE>,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define x (cdr '(123)))
(define y (cdr '(456)))
(eq? x y) &#8658; #t

(define x (string-&gt;symbol "foo"))
(eq? x 'foo) &#8658; #t
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fis_005feq></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_is_eq</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM x, SCM y)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are equal in the sense of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq?</CODE>, otherwise return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0</CODE>.</P><A name=index-_003d_003d></A>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>==</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>operator should not be used on<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>values, an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a C type which cannot necessarily be compared using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>==</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#The-SCM-Type">The SCM Type</A>).</P></DD></DL><BR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-eqv_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>eqv?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DT><A name=index-scm_005feqv_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_eqv_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x, y)</EM></DT>
<DD><A name=index-eqv_003f-3></A>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are the same object, or for characters and numbers the same value.</P>
<P>On objects except characters and numbers,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eqv?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the same as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>above, it&#8217;s true if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are the same object.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are numbers or characters,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eqv?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>compares their type and value. An exact number is not<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eqv?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to an inexact number (even if their value is the same).</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(eqv? 3 (+ 1 2)) &#8658; #t
(eqv? 1 1.0)     &#8658; #f
</PRE></DIV></DD></DL><BR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-equal_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>equal?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DT><A name=index-scm_005fequal_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_equal_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x, y)</EM></DT>
<DD><A name=index-equal_003f-3></A>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are the same type, and their contents or value are equal.</P>
<P>For a pair, string, vector, array or structure,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>compares the contents, and does so using the same<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>recursively, so a deep structure can be traversed.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(equal? (list 1 2 3) (list 1 2 3))   &#8658; #t
(equal? (list 1 2 3) (vector 1 2 3)) &#8658; #f
</PRE></DIV>
<P>For other objects,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>compares as per<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eqv?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>above, which means characters and numbers are compared by type and value (and like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eqv?</CODE>, exact and inexact numbers are not<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE>, even if their value is the same).</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(equal? 3 (+ 1 2)) &#8658; #t
(equal? 1 1.0)     &#8658; #f
</PRE></DIV>
<P>Hash tables are currently only compared as per<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq?</CODE>, so two different tables are not<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE>, even if their contents are the same.</P>
<P><CODE>equal?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not support circular data structures, it may go into an infinite loop if asked to compare two circular lists or similar.</P>
<P>New application-defined object types (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Defining-New-Types-_0028Smobs_0029">Defining New Types (Smobs)</A>) have an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equalp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>handler which is called by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE>. This lets an application traverse the contents or control what is considered<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for two objects of such a type. If there&#8217;s no such handler, the default is to just compare as per<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq?</CODE>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Object-Properties></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Sorting" rel=next>Sorting</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Equality" rel=prev>Equality</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Utility-Functions" rel=up>Utility Functions</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Object-Properties-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.11.2 Object Properties</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">It&#8217;s often useful to associate a piece of additional information with a Scheme object even though that object does not have a dedicated slot available in which the additional information could be stored. Object properties allow you to do just that.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile&#8217;s representation of an object property is a procedure-with-setter (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Procedures-with-Setters">Procedures with Setters</A>) that can be used with the generalized form of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(REFFIXME) to set and retrieve that property for any Scheme object. So, setting a property looks like this:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(set! (my-property obj1) value-for-obj1)
(set! (my-property obj2) value-for-obj2)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">And retrieving values of the same property looks like this:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(my-property obj1)
&#8658;
value-for-obj1

(my-property obj2)
&#8658;
value-for-obj2
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To create an object property in the first place, use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-object-property</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(define my-property (make-object-property))
</PRE></DIV>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dobject_002dproperty></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-object-property</STRONG></DT>
<DD>
<P>Create and return an object property. An object property is a procedure-with-setter that can be called in two ways.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(set! (<VAR>property</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR>)<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>sets<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR>&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>property</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>property</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the current setting of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR>&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>property</VAR>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A single object property created by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-object-property</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can associate distinct property values with all Scheme values that are distinguishable by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(including, for example, integers).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Internally, object properties are implemented using a weak key hash table. This means that, as long as a Scheme value with property values is protected from garbage collection, its property values are also protected. When the Scheme value is collected, its entry in the property table is removed and so the (ex-) property values are no longer protected by the table.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile also implements a more traditional Lispy interface to properties, in which each object has an list of key-value pairs associated with it. Properties in that list are keyed by symbols. This is a legacy interface; you should use weak hash tables or object properties instead.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-object_002dproperties></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>object-properties</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-scm_005fobject_005fproperties></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_object_properties</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR>&#8217;s property list.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-set_002dobject_002dproperties_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-object-properties!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj alist</EM></DT>
<DT><A name=index-scm_005fset_005fobject_005fproperties_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_set_object_properties_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj, alist)</EM></DT>
<DD>
<P>Set<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR>&#8217;s property list to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alist</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-object_002dproperty></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>object-property</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj key</EM></DT>
<DT><A name=index-scm_005fobject_005fproperty></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_object_property</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj, key)</EM></DT>
<DD>
<P>Return the property of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with name<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-set_002dobject_002dproperty_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-object-property!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj key value</EM></DT>
<DT><A name=index-scm_005fset_005fobject_005fproperty_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_set_object_property_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj, key, value)</EM></DT>
<DD>
<P>In<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR>&#8217;s property list, set the property named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Sorting></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Copying" rel=next>Copying</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Object-Properties" rel=prev>Object Properties</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Utility-Functions" rel=up>Utility Functions</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Sorting-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.11.3 Sorting</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-sorting></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-sorting-lists></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-sorting-vectors></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Sorting is very important in computer programs. Therefore, Guile comes with several sorting procedures built-in. As always, procedures with names ending in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are side-effecting, that means that they may modify their parameters in order to produce their results.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The first group of procedures can be used to merge two lists (which must be already sorted on their own) and produce sorted lists containing all elements of the input lists.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-merge></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>merge</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>alist blist less</EM></DT>
<DT><A name=index-scm_005fmerge></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_merge</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(alist, blist, less)</EM></DT>
<DD>
<P>Merge two already sorted lists into one. Given two lists<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alist</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>blist</VAR>, such that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(sorted? alist less?)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(sorted? blist less?)</CODE>, return a new list in which the elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alist</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>blist</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>have been stably interleaved so that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(sorted? (merge alist blist less?) less?)</CODE>. Note: this does _not_ accept vectors.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-merge_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>merge!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>alist blist less</EM></DT>
<DT><A name=index-scm_005fmerge_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_merge_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(alist, blist, less)</EM></DT>
<DD>
<P>Takes two lists<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alist</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>blist</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>such that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(sorted? alist less?)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(sorted? blist less?)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and returns a new list in which the elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alist</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>blist</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>have been stably interleaved so that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(sorted? (merge alist blist less?) less?)</CODE>. This is the destructive variant of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>merge</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>Note: this does _not_ accept vectors.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following procedures can operate on sequences which are either vectors or list. According to the given arguments, they return sorted vectors or lists, respectively. The first of the following procedures determines whether a sequence is already sorted, the other sort a given sequence. The variants with names starting with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stable-</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are special in that they maintain a special property of the input sequences: If two or more elements are the same according to the comparison predicate, they are left in the same order as they appeared in the input.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-sorted_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>sorted?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>items less</EM></DT>
<DT><A name=index-scm_005fsorted_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_sorted_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(items, less)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>items</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a list or vector such that, for each element<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the next element<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>items</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>less</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>. Otherwise return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-sort></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>sort</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>items less</EM></DT>
<DT><A name=index-scm_005fsort></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_sort</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(items, less)</EM></DT>
<DD>
<P>Sort the sequence<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>items</VAR>, which may be a list or a vector.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>less</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used for comparing the sequence elements. This is not a stable sort.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-sort_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>sort!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>items less</EM></DT>
<DT><A name=index-scm_005fsort_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_sort_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(items, less)</EM></DT>
<DD>
<P>Sort the sequence<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>items</VAR>, which may be a list or a vector.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>less</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used for comparing the sequence elements. The sorting is destructive, that means that the input sequence is modified to produce the sorted result. This is not a stable sort.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-stable_002dsort></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stable-sort</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>items less</EM></DT>
<DT><A name=index-scm_005fstable_005fsort></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_stable_sort</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(items, less)</EM></DT>
<DD>
<P>Sort the sequence<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>items</VAR>, which may be a list or a vector.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>less</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used for comparing the sequence elements. This is a stable sort.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-stable_002dsort_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>stable-sort!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>items less</EM></DT>
<DT><A name=index-scm_005fstable_005fsort_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_stable_sort_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(items, less)</EM></DT>
<DD>
<P>Sort the sequence<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>items</VAR>, which may be a list or a vector.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>less</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used for comparing the sequence elements. The sorting is destructive, that means that the input sequence is modified to produce the sorted result. This is a stable sort.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The procedures in the last group only accept lists or vectors as input, as their names indicate.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-sort_002dlist></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>sort-list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>items less</EM></DT>
<DT><A name=index-scm_005fsort_005flist></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_sort_list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(items, less)</EM></DT>
<DD>
<P>Sort the list<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>items</VAR>, using<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>less</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>for comparing the list elements. This is a stable sort.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-sort_002dlist_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>sort-list!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>items less</EM></DT>
<DT><A name=index-scm_005fsort_005flist_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_sort_list_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(items, less)</EM></DT>
<DD>
<P>Sort the list<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>items</VAR>, using<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>less</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>for comparing the list elements. The sorting is destructive, that means that the input list is modified to produce the sorted result. This is a stable sort.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-restricted_002dvector_002dsort_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>restricted-vector-sort!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec less startpos endpos</EM></DT>
<DT><A name=index-scm_005frestricted_005fvector_005fsort_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_restricted_vector_sort_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec, less, startpos, endpos)</EM></DT>
<DD>
<P>Sort the vector<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR>, using<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>less</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>for comparing the vector elements.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>startpos</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(inclusively) and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>endpos</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(exclusively) delimit the range of the vector which gets sorted. The return value is not specified.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Copying></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#General-Conversion" rel=next>General Conversion</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Sorting" rel=prev>Sorting</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Utility-Functions" rel=up>Utility Functions</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Copying-Deep-Structures></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.11.4 Copying Deep Structures</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The procedures for copying lists (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Lists">Lists</A>) only produce a flat copy of the input list, and currently Guile does not even contain procedures for copying vectors.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>copy-tree</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be used for these application, as it does not only copy the spine of a list, but also copies any pairs in the cars of the input lists.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-copy_002dtree></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>copy-tree</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-scm_005fcopy_005ftree></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_copy_tree</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DD>
<P>Recursively copy the data tree that is bound to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR>, and return the new data structure.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>copy-tree</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>recurses down the contents of both pairs and vectors (since both cons cells and vector cells may point to arbitrary objects), and stops recursing when it hits any other object.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=General-Conversion></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Hooks" rel=next>Hooks</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Copying" rel=prev>Copying</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Utility-Functions" rel=up>Utility Functions</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=General-String-Conversion></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.11.5 General String Conversion</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When debugging Scheme programs, but also for providing a human-friendly interface, a procedure for converting any Scheme object into string format is very useful. Conversion from/to strings can of course be done with specialized procedures when the data type of the object to convert is known, but with this procedure, it is often more comfortable.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>object-&gt;string</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>converts an object by using a print procedure for writing to a string port, and then returning the resulting string. Converting an object back from the string is only possible if the object type has a read syntax and the read syntax is preserved by the printing procedure.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-object_002d_003estring></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>object-&gt;string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj [printer]</EM></DT>
<DT><A name=index-scm_005fobject_005fto_005fstring></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_object_to_string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj, printer)</EM></DT>
<DD>
<P>Return a Scheme string obtained by printing<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR>. Printing function can be specified by the optional second argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>printer</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(default:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write</CODE>).</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Hooks></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#General-Conversion" rel=prev>General Conversion</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Utility-Functions" rel=up>Utility Functions</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Hooks-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.11.6 Hooks</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Hooks></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A hook is a list of procedures to be called at well defined points in time. Typically, an application provides a hook<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>h</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and promises its users that it will call all of the procedures in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>h</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>at a defined point in the application&#8217;s processing. By adding its own procedure to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>h</VAR>, an application user can tap into or even influence the progress of the application.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile itself provides several such hooks for debugging and customization purposes: these are listed in a subsection below.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When an application first creates a hook, it needs to know how many arguments will be passed to the hook&#8217;s procedures when the hook is run. The chosen number of arguments (which may be none) is declared when the hook is created, and all the procedures that are added to that hook must be capable of accepting that number of arguments.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A hook is created using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-hook</CODE>. A procedure can be added to or removed from a hook using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>add-hook!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>remove-hook!</CODE>, and all of a hook&#8217;s procedures can be removed together using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>reset-hook!</CODE>. When an application wants to run a hook, it does so using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>run-hook</CODE>.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Hook-Example">Hook Example</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Hook usage by example.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Hook-Reference">Hook Reference</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Reference of all hook procedures.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#C-Hooks">C Hooks</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Hooks for use from C code.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#GC-Hooks">GC Hooks</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Garbage collection hooks.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#REPL-Hooks">REPL Hooks</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Hooks into the Guile REPL.</TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Hook-Example></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Hook-Reference" rel=next>Hook Reference</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Hooks" rel=up>Hooks</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Hook-Usage-by-Example></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.11.6.1 Hook Usage by Example</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Hook usage is shown by some examples in this section. First, we will define a hook of arity 2 &#8212; that is, the procedures stored in the hook will have to accept two arguments.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(define hook (make-hook 2))
hook
&#8658; #&lt;hook 2 40286c90&gt;
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Now we are ready to add some procedures to the newly created hook with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>add-hook!</CODE>. In the following example, two procedures are added, which print different messages and do different things with their arguments.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(add-hook! hook (lambda (x y)
                    (display "Foo: ")
                    (display (+ x y))
                    (newline)))
(add-hook! hook (lambda (x y)
                    (display "Bar: ")
                    (display (* x y))
                    (newline)))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Once the procedures have been added, we can invoke the hook using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>run-hook</CODE>.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(run-hook hook 3 4)
-| Bar: 12
-| Foo: 7
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that the procedures are called in the reverse of the order with which they were added. This is because the default behaviour of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>add-hook!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is to add its procedure to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>front</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the hook&#8217;s procedure list. You can force<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>add-hook!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to add its procedure to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>end</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the list instead by providing a third<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument on the second call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>add-hook!</CODE>.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(add-hook! hook (lambda (x y)
                    (display "Foo: ")
                    (display (+ x y))
                    (newline)))
(add-hook! hook (lambda (x y)
                    (display "Bar: ")
                    (display (* x y))
                    (newline))
                    #t)             ; <SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>&lt;- Change here!</SPAN>

(run-hook hook 3 4)
-| Foo: 7
-| Bar: 12
</PRE></DIV>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Hook-Reference></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#C-Hooks" rel=next>C Hooks</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Hook-Example" rel=prev>Hook Example</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Hooks" rel=up>Hooks</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Hook-Reference-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.11.6.2 Hook Reference</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When you create a hook with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-hook</CODE>, you must specify the arity of the procedures which can be added to the hook. If the arity is not given explicitly as an argument to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-hook</CODE>, it defaults to zero. All procedures of a given hook must have the same arity, and when the procedures are invoked using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>run-hook</CODE>, the number of arguments passed must match the arity specified at hook creation time.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The order in which procedures are added to a hook matters. If the third parameter to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>add-hook!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is omitted or is equal to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, the procedure is added in front of the procedures which might already be on that hook, otherwise the procedure is added at the end. The procedures are always called from the front to the end of the list when they are invoked via<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>run-hook</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The ordering of the list of procedures returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hook-&gt;list</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>matches the order in which those procedures would be called if the hook was run using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>run-hook</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that the C functions in the following entries are for handling<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>Scheme-level</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>hooks in C. There are also<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>C-level</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>hooks which have their own interface (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#C-Hooks">C Hooks</A>).</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dhook></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-hook</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[n_args]</EM></DT>
<DT><A name=index-scm_005fmake_005fhook></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_hook</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(n_args)</EM></DT>
<DD>
<P>Create a hook for storing procedure of arity<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n_args</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n_args</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>defaults to zero. The returned value is a hook object to be used with the other hook procedures.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hook_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hook?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-scm_005fhook_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_hook_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a hook,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hook_002dempty_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hook-empty?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>hook</EM></DT>
<DT><A name=index-scm_005fhook_005fempty_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_hook_empty_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(hook)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hook</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an empty hook,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-add_002dhook_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>add-hook!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>hook proc [append_p]</EM></DT>
<DT><A name=index-scm_005fadd_005fhook_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_add_hook_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(hook, proc, append_p)</EM></DT>
<DD>
<P>Add the procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the hook<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hook</VAR>. The procedure is added to the end if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>append_p</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true, otherwise it is added to the front. The return value of this procedure is not specified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-remove_002dhook_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>remove-hook!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>hook proc</EM></DT>
<DT><A name=index-scm_005fremove_005fhook_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_remove_hook_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(hook, proc)</EM></DT>
<DD>
<P>Remove the procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>from the hook<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hook</VAR>. The return value of this procedure is not specified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-reset_002dhook_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>reset-hook!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>hook</EM></DT>
<DT><A name=index-scm_005freset_005fhook_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_reset_hook_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(hook)</EM></DT>
<DD>
<P>Remove all procedures from the hook<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hook</VAR>. The return value of this procedure is not specified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hook_002d_003elist></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hook-&gt;list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>hook</EM></DT>
<DT><A name=index-scm_005fhook_005fto_005flist></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_hook_to_list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(hook)</EM></DT>
<DD>
<P>Convert the procedure list of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hook</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to a list.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-run_002dhook></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>run-hook</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>hook arg &#8230;</EM></DT>
<DT><A name=index-scm_005frun_005fhook></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_run_hook</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(hook, args)</EM></DT>
<DD>
<P>Apply all procedures from the hook<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hook</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the arguments<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=enddots>...</SMALL>. The order of the procedure application is first to last. The return value of this procedure is not specified.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If, in C code, you are certain that you have a hook object and well formed argument list for that hook, you can also use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_c_run_hook</CODE>, which is identical to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_run_hook</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>but does no type checking.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005frun_005fhook></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_run_hook</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM hook, SCM args)</EM></DT>
<DD>
<P>The same as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_run_hook</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>but without any type checking to confirm that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hook</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is actually a hook object and that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>args</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a well-formed list matching the arity of the hook.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For C code,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_HOOKP</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a faster alternative to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_hook_p</CODE>:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fHOOKP></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_HOOKP</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x)</EM></DT>
<DD>
<P>Return 1 if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a Scheme-level hook, 0 otherwise.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Handling-Scheme_002dlevel-hooks-from-C-code></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.11.6.3 Handling Scheme-level hooks from C code</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here is an example of how to handle Scheme-level hooks from C code using the above functions.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>if (scm_is_true (scm_hook_p (obj)))
  /* handle Scheme-level hook using C functions */
  scm_reset_hook_x (obj);
else
  /* do something else (obj is not a hook) */
</PRE></DIV>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=C-Hooks></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#GC-Hooks" rel=next>GC Hooks</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Hook-Reference" rel=prev>Hook Reference</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Hooks" rel=up>Hooks</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Hooks-For-C-Code_002e></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.11.6.4 Hooks For C Code.</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The hooks already described are intended to be populated by Scheme-level procedures. In addition to this, the Guile library provides an independent set of interfaces for the creation and manipulation of hooks that are designed to be populated by functions implemented in C.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The original motivation here was to provide a kind of hook that could safely be invoked at various points during garbage collection. Scheme-level hooks are unsuitable for this purpose as running them could itself require memory allocation, which would then invoke garbage collection recursively &#8230; However, it is also the case that these hooks are easier to work with than the Scheme-level ones if you only want to register C functions with them. So if that is mainly what your code needs to do, you may prefer to use this interface.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To create a C hook, you should allocate storage for a structure of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_t_c_hook</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and then initialize it using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_c_hook_init</CODE>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005ft_005fc_005fhook></A>C Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_t_c_hook</STRONG></DT>
<DD>
<P>Data type for a C hook. The internals of this type should be treated as opaque.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005ft_005fc_005fhook_005ftype></A>C Enum:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_t_c_hook_type</STRONG></DT>
<DD>
<P>Enumeration of possible hook types, which are:</P>
<DL compact>
<DT><CODE>SCM_C_HOOK_NORMAL</CODE></DT>
<DD><A name=index-SCM_005fC_005fHOOK_005fNORMAL></A>
<P>Type of hook for which all the registered functions will always be called.</P></DD>
<DT><CODE>SCM_C_HOOK_OR</CODE></DT>
<DD><A name=index-SCM_005fC_005fHOOK_005fOR></A>
<P>Type of hook for which the sequence of registered functions will be called only until one of them returns C true (a non-NULL pointer).</P></DD>
<DT><CODE>SCM_C_HOOK_AND</CODE></DT>
<DD><A name=index-SCM_005fC_005fHOOK_005fAND></A>
<P>Type of hook for which the sequence of registered functions will be called only until one of them returns C false (a NULL pointer).</P></DD></DL></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fhook_005finit></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_hook_init</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_c_hook *hook, void *hook_data, scm_t_c_hook_type type)</EM></DT>
<DD>
<P>Initialize the C hook at memory pointed to by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hook</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be one of the values of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_t_c_hook_type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>enumeration, and controls how the hook functions will be called.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hook_data</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a closure parameter that will be passed to all registered hook functions when they are called.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To add or remove a C function from a C hook, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_c_hook_add</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_c_hook_remove</CODE>. A hook function must expect three<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>void *</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameters which are, respectively:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DT><VAR>hook_data</VAR></DT>
<DD>
<P>The hook closure data that was specified at the time the hook was initialized by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_c_hook_init</CODE>.</P></DD>
<DT><VAR>func_data</VAR></DT>
<DD>
<P>The function closure data that was specified at the time that that function was registered with the hook by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_c_hook_add</CODE>.</P></DD>
<DT><VAR>data</VAR></DT>
<DD>
<P>The call closure data specified by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_c_hook_run</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>call that runs the hook.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005ft_005fc_005fhook_005ffunction></A>C Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_t_c_hook_function</STRONG></DT>
<DD>
<P>Function type for a C hook function: takes three<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>void *</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameters and returns a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>void *</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>result.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fhook_005fadd></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_hook_add</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_c_hook *hook, scm_t_c_hook_function func, void *func_data, int appendp)</EM></DT>
<DD>
<P>Add function<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>func</VAR>, with function closure data<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>func_data</VAR>, to the C hook<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hook</VAR>. The new function is appended to the hook&#8217;s list of functions if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>appendp</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is non-zero, otherwise prepended.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fhook_005fremove></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_hook_remove</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_c_hook *hook, scm_t_c_hook_function func, void *func_data)</EM></DT>
<DD>
<P>Remove function<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>func</VAR>, with function closure data<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>func_data</VAR>, from the C hook<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hook</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_c_hook_remove</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>checks both<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>func</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>func_data</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>so as to allow for the same<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>func</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>being registered multiple times with different closure data.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Finally, to invoke a C hook, call the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_c_hook_run</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function specifying the hook and the call closure data for this run:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fhook_005frun></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_hook_run</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_c_hook *hook, void *data)</EM></DT>
<DD>
<P>Run the C hook<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hook</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>will call closure data<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>data</VAR>. Subject to the variations for hook types<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_C_HOOK_OR</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_C_HOOK_AND</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_c_hook_run</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hook</VAR>&#8217;s registered functions in turn, passing them the hook&#8217;s closure data, each function&#8217;s closure data, and the call closure data.</P>
<P><CODE>scm_c_hook_run</CODE>&#8217;s return value is the return value of the last function to be called.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=GC-Hooks></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#REPL-Hooks" rel=next>REPL Hooks</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#C-Hooks" rel=prev>C Hooks</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Hooks" rel=up>Hooks</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Hooks-for-Garbage-Collection></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.11.6.5 Hooks for Garbage Collection</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Whenever Guile performs a garbage collection, it calls the following hooks in the order shown.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fbefore_005fgc_005fc_005fhook></A>C Hook:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_before_gc_c_hook</STRONG></DT>
<DD>
<P>C hook called at the very start of a garbage collection, after setting<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_running_p</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to 1, but before entering the GC critical section.</P>
<P>If garbage collection is blocked because<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_block_gc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is non-zero, GC exits early soon after calling this hook, and no further hooks will be called.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fbefore_005fmark_005fc_005fhook></A>C Hook:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_before_mark_c_hook</STRONG></DT>
<DD>
<P>C hook called before beginning the mark phase of garbage collection, after the GC thread has entered a critical section.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fbefore_005fsweep_005fc_005fhook></A>C Hook:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_before_sweep_c_hook</STRONG></DT>
<DD>
<P>C hook called before beginning the sweep phase of garbage collection. This is the same as at the end of the mark phase, since nothing else happens between marking and sweeping.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fafter_005fsweep_005fc_005fhook></A>C Hook:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_after_sweep_c_hook</STRONG></DT>
<DD>
<P>C hook called after the end of the sweep phase of garbage collection, but while the GC thread is still inside its critical section.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fafter_005fgc_005fc_005fhook></A>C Hook:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_after_gc_c_hook</STRONG></DT>
<DD>
<P>C hook called at the very end of a garbage collection, after the GC thread has left its critical section.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-after_002dgc_002dhook></A>Scheme Hook:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>after-gc-hook</STRONG></DT>
<DD><A name=index-scm_005fafter_005fgc_005fhook></A>
<P>Scheme hook with arity 0. This hook is run asynchronously (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Asyncs">Asyncs</A>) soon after the GC has completed and any other events that were deferred during garbage collection have been processed. (Also accessible from C with the name<CODE>scm_after_gc_hook</CODE>.)</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">All the C hooks listed here have type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_C_HOOK_NORMAL</CODE>, are initialized with hook closure data NULL, are invoked by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_c_hook_run</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with call closure data NULL.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-guardians_002c-testing-for-GC_0027d-objects></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The Scheme hook<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>after-gc-hook</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is particularly useful in conjunction with guardians (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Guardians">Guardians</A>). Typically, if you are using a guardian, you want to call the guardian after garbage collection to see if any of the objects added to the guardian have been collected. By adding a thunk that performs this call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>after-gc-hook</CODE>, you can ensure that your guardian is tested after every garbage collection cycle.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=REPL-Hooks></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#GC-Hooks" rel=prev>GC Hooks</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Hooks" rel=up>Hooks</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Hooks-into-the-Guile-REPL></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.11.6.6 Hooks into the Guile REPL</H4>