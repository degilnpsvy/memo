<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>6.8 Smobs</H3><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-smob></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This chapter contains reference information related to defining and working with smobs. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Defining-New-Types-_0028Smobs_0029">Defining New Types (Smobs)</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>for a tutorial-like introduction to smobs.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fmake_005fsmob_005ftype></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_bits</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_smob_type</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const char *name, size_t size)</EM></DT>
<DD>
<P>This function adds a new smob type, named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>, with instance size<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR>, to the system. The return value is a tag that is used in creating instances of the type.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 0, the default<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>free</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>function will do nothing.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not 0, the default<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>free</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>function will deallocate the memory block pointed to by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_SMOB_DATA</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_free</CODE>. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>what</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameter in the call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_free</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>.</P>
<P>Default values are provided for the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>mark</EM>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>free</EM>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>print</EM>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>equalp</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>functions, as described in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Defining-New-Types-_0028Smobs_0029">Defining New Types (Smobs)</A>. If you want to customize any of these functions, the call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_make_smob_type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be immediately followed by calls to one or several of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_set_smob_mark</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_set_smob_free</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_set_smob_print</CODE>, and/or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_set_smob_equalp</CODE>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-finalizer></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-finalization></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fset_005fsmob_005ffree></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_set_smob_free</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_bits tc, size_t (*free) (SCM obj))</EM></DT>
<DD>
<P>This function sets the smob freeing procedure (sometimes referred to as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>finalizer</EM>) for the smob type specified by the tag<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tc</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the tag returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_make_smob_type</CODE>.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>free</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure must deallocate all resources that are directly associated with the smob instance<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR>. It must assume that all<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>values that it references have already been freed and are thus invalid.</P>
<P>It must also not call any libguile function or macro except<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_free</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_SMOB_FLAGS</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_SMOB_DATA</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_SMOB_DATA_2</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_SMOB_DATA_3</CODE>.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>free</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure must return 0.</P>
<P>Note that defining a freeing procedure is not necessary if the resources associated with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>consists only of memory allocated with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_malloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_malloc_pointerless</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>because this memory is automatically reclaimed by the garbage collector when it is no longer needed (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Memory-Blocks"><CODE>scm_gc_malloc</CODE></A>).</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-precise-marking></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fset_005fsmob_005fmark></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_set_smob_mark</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_bits tc, SCM (*mark) (SCM obj))</EM></DT>
<DD>
<P>This function sets the smob marking procedure for the smob type specified by the tag<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tc</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the tag returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_make_smob_type</CODE>.</P>
<P>Defining a marking procedure may sometimes be unnecessary because large parts of the process&#8217; memory (with the exception of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_malloc_pointerless</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>regions, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>malloc</CODE>- or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_malloc</CODE>-allocated memory) are scanned for live pointers<A href="https://www.gnu.org/software/guile/manual/guile.html#FOOT8" name=DOCF8><SUP>8</SUP></A>.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mark</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure must cause<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_mark</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to be called for every<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value that is directly referenced by the smob instance<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR>. One of these<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>values can be returned from the procedure and Guile will call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_mark</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for it. This can be used to avoid deep recursions for smob instances that form a list.</P>
<P>It must not call any libguile function or macro except<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_gc_mark</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_SMOB_FLAGS</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_SMOB_DATA</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_SMOB_DATA_2</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_SMOB_DATA_3</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fset_005fsmob_005fprint></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_set_smob_print</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_bits tc, int (*print) (SCM obj, SCM port, scm_print_state* pstate))</EM></DT>
<DD>
<P>This function sets the smob printing procedure for the smob type specified by the tag<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tc</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the tag returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_make_smob_type</CODE>.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>print</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure should output a textual representation of the smob instance<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>, using information in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pstate</VAR>.</P>
<P>The textual representation should be of the form<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#&lt;name ...&gt;</CODE>. This ensures that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will not interpret it as some other Scheme value.</P>
<P>It is often best to ignore<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pstate</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and just print to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_display</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_write</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_simple_format</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_puts</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fset_005fsmob_005fequalp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_set_smob_equalp</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_bits tc, SCM (*equalp) (SCM obj1, SCM obj2))</EM></DT>
<DD>
<P>This function sets the smob equality-testing predicate for the smob type specified by the tag<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tc</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the tag returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_make_smob_type</CODE>.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>equalp</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure should return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_BOOL_T</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj2</VAR>. Else it should return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_BOOL_F</CODE>. Both<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are instances of the smob type<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tc</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fassert_005fsmob_005ftype></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_assert_smob_type</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_bits tag, SCM val)</EM></DT>
<DD>
<P>When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a smob of the type indicated by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tag</VAR>, do nothing. Else, signal an error.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fSMOB_005fPREDICATE></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_SMOB_PREDICATE</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_bits tag, SCM exp)</EM></DT>
<DD>
<P>Return true if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exp</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a smob instance of the type indicated by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tag</VAR>, or false otherwise. The expression<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exp</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be evaluated more than once, so it shouldn&#8217;t contain any side effects.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fnew_005fsmob></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_new_smob</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_bits tag, void *data)</EM></DT>
<DT><A name=index-scm_005fnew_005fdouble_005fsmob></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_new_double_smob</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_bits tag, void *data, void *data2, void *data3)</EM></DT>
<DD>
<P>Make a new smob of the type with tag<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tag</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and smob data<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>data</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>data2</VAR>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>data3</VAR>, as appropriate.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tag</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is what has been returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_make_smob_type</CODE>. The initial values<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>data</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>data2</VAR>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>data3</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_t_bits</CODE>; when you want to use them for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>values, these values need to be converted to a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_t_bits</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>first by using<CODE>SCM_UNPACK</CODE>.</P>
<P>The flags of the smob instance start out as zero.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fSMOB_005fFLAGS></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_bits</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_SMOB_FLAGS</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM obj)</EM></DT>
<DD>
<P>Return the 16 extra bits of the smob<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR>. No meaning is predefined for these bits, you can use them freely.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fSET_005fSMOB_005fFLAGS></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_bits</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_SET_SMOB_FLAGS</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM obj, scm_t_bits flags)</EM></DT>
<DD>
<P>Set the 16 extra bits of the smob<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>flags</VAR>. No meaning is predefined for these bits, you can use them freely.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fSMOB_005fDATA></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_bits</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_SMOB_DATA</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM obj)</EM></DT>
<DT><A name=index-SCM_005fSMOB_005fDATA_005f2></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_bits</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_SMOB_DATA_2</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM obj)</EM></DT>
<DT><A name=index-SCM_005fSMOB_005fDATA_005f3></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_bits</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_SMOB_DATA_3</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM obj)</EM></DT>
<DD>
<P>Return the first (second, third) immediate word of the smob<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_t_bits</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value. When the word contains a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_SMOB_OBJECT</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(etc.) instead.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fSET_005fSMOB_005fDATA></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_SET_SMOB_DATA</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM obj, scm_t_bits val)</EM></DT>
<DT><A name=index-SCM_005fSET_005fSMOB_005fDATA_005f2></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_SET_SMOB_DATA_2</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM obj, scm_t_bits val)</EM></DT>
<DT><A name=index-SCM_005fSET_005fSMOB_005fDATA_005f3></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_SET_SMOB_DATA_3</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM obj, scm_t_bits val)</EM></DT>
<DD>
<P>Set the first (second, third) immediate word of the smob<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val</VAR>. When the word should be set to a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_SMOB_SET_OBJECT</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(etc.) instead.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fSMOB_005fOBJECT></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_SMOB_OBJECT</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM obj)</EM></DT>
<DT><A name=index-SCM_005fSMOB_005fOBJECT_005f2></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_SMOB_OBJECT_2</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM obj)</EM></DT>
<DT><A name=index-SCM_005fSMOB_005fOBJECT_005f3></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_SMOB_OBJECT_3</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM obj)</EM></DT>
<DD>
<P>Return the first (second, third) immediate word of the smob<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value. When the word contains a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_t_bits</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_SMOB_DATA</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(etc.) instead.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fSET_005fSMOB_005fOBJECT></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_SET_SMOB_OBJECT</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM obj, SCM val)</EM></DT>
<DT><A name=index-SCM_005fSET_005fSMOB_005fOBJECT_005f2></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_SET_SMOB_OBJECT_2</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM obj, SCM val)</EM></DT>
<DT><A name=index-SCM_005fSET_005fSMOB_005fOBJECT_005f3></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_SET_SMOB_OBJECT_3</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM obj, SCM val)</EM></DT>
<DD>
<P>Set the first (second, third) immediate word of the smob<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val</VAR>. When the word should be set to a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_t_bits</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_SMOB_SET_DATA</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(etc.) instead.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fSMOB_005fOBJECT_005fLOC></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_SMOB_OBJECT_LOC</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM obj)</EM></DT>
<DT><A name=index-SCM_005fSMOB_005fOBJECT_005f2_005fLOC></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_SMOB_OBJECT_2_LOC</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM obj)</EM></DT>
<DT><A name=index-SCM_005fSMOB_005fOBJECT_005f3_005fLOC></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_SMOB_OBJECT_3_LOC</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM obj)</EM></DT>
<DD>
<P>Return a pointer to the first (second, third) immediate word of the smob<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR>. Note that this is a pointer to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE>. If you need to work with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_t_bits</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>values, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_PACK</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_UNPACK</CODE>, as appropriate.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fmarkcdr></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_markcdr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>)</EM></DT>
<DD>
<P>Mark the references in the smob<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>, assuming that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>&#8217;s first data word contains an ordinary Scheme object, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>refers to no other objects. This function simply returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>&#8217;s first data word.</P></DD></DL>