<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>6.13 Controlling the Flow of Program Execution</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Control-Flow">Control Flow</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>for a discussion of how the more general control flow of Scheme affects C code.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#begin">begin</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Sequencing and splicing.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Conditionals">Conditionals</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>If, when, unless, case, and cond.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#and-or">and or</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Conditional evaluation of a sequence.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#while-do">while do</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Iteration mechanisms.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#Prompts">Prompts</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Composable, delimited continuations.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=6 href="https://www.gnu.org/software/guile/manual/guile.html#Continuations">Continuations</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Non-composable continuations.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=7 href="https://www.gnu.org/software/guile/manual/guile.html#Multiple-Values">Multiple Values</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Returning and accepting multiple values.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=8 href="https://www.gnu.org/software/guile/manual/guile.html#Exceptions">Exceptions</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Throwing and catching exceptions.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=9 href="https://www.gnu.org/software/guile/manual/guile.html#Error-Reporting">Error Reporting</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Procedures for signaling errors.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Dynamic-Wind">Dynamic Wind</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Dealing with non-local entrance/exit.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Handling-Errors">Handling Errors</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>How to handle errors in C code.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Continuation-Barriers">Continuation Barriers</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Protection from non-local control flow.</TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=begin></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Conditionals" rel=next>Conditionals</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Control-Mechanisms" rel=up>Control Mechanisms</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Sequencing-and-Splicing></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.13.1 Sequencing and Splicing</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-begin></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-sequencing></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-expression-sequencing></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">As an expression, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>begin</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>syntax is used to evaluate a sequence of sub-expressions in order. Consider the conditional expression below:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(if (&gt; x 0)
    (begin (display "greater") (newline)))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If the test is true, we want to display &#8220;greater&#8221; to the current output port, then display a newline. We use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>begin</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to form a compound expression out of this sequence of sub-expressions.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-begin-1></A>syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>begin</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>expr &#8230;</EM></DT>
<DD>
<P>The expression(s) are evaluated in left-to-right order and the value of the last expression is returned as the value of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>begin</CODE>-expression. This expression type is used when the expressions before the last one are evaluated for their side effects.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-splicing></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-definition-splicing></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>begin</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>syntax has another role in definition context (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Internal-Definitions">Internal Definitions</A>). A<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>begin</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form in a definition context<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>splices</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>its subforms into its place. For example, consider the following procedure:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(define (make-seal)
  (define-sealant seal open)
  (values seal open))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Let us assume the existence of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-sealant</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>macro that expands out to some definitions wrapped in a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>begin</CODE>, like so:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(define (make-seal)
  (begin
    (define seal-tag
      (list 'seal))
    (define (seal x)
      (cons seal-tag x))
    (define (sealed? x)
      (and (pair? x) (eq? (car x) seal-tag)))
    (define (open x)
      (if (sealed? x)
          (cdr x)
          (error "Expected a sealed value:" x))))
  (values seal open))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here, because the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>begin</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is in definition context, its subforms are<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>spliced</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>into the place of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>begin</CODE>. This allows the definitions created by the macro to be visible to the following expression, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>values</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">It is a fine point, but splicing and sequencing are different. It can make sense to splice zero forms, because it can make sense to have zero internal definitions before the expressions in a procedure or lexical binding form. However it does not make sense to have a sequence of zero expressions, because in that case it would not be clear what the value of the sequence would be, because in a sequence of zero expressions, there can be no last value. Sequencing zero expressions is an error.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">It would be more elegant in some ways to eliminate splicing from the Scheme language, and without macros (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Macros">Macros</A>), that would be a good idea. But it is useful to be able to write macros that expand out to multiple definitions, as in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-sealant</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>above, so Scheme abuses the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>begin</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form for these two tasks.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Conditionals></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#and-or" rel=next>and or</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#begin" rel=prev>begin</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Control-Mechanisms" rel=up>Control Mechanisms</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Simple-Conditional-Evaluation></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.13.2 Simple Conditional Evaluation</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-conditional-evaluation></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-if></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-when></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-unless></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-case></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-cond></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile provides three syntactic constructs for conditional evaluation.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>if</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the normal if-then-else expression (with an optional else branch),<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cond</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a conditional expression with multiple branches and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>case</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>branches if an expression has one of a set of constant values.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-if-1></A>syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>if</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>test consequent [alternate]</EM></DT>
<DD>
<P>All arguments may be arbitrary expressions. First,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>test</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is evaluated. If it returns a true value, the expression<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>consequent</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is evaluated and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alternate</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is ignored. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>test</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>evaluates to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alternate</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is evaluated instead. The values of the evaluated branch (<VAR>consequent</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alternate</VAR>) are returned as the values of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>if</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression.</P>
<P>When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alternate</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is omitted and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>test</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>evaluates to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, the value of the expression is not specified.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When you go to write an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>if</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>without an alternate (a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>one-armed<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>if</CODE></EM>), part of what you are expressing is that you don&#8217;t care about the return value (or values) of the expression. As such, you are more interested in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>effect</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>of evaluating the consequent expression. (By convention, we use the word<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>statement</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>to refer to an expression that is evaluated for effect, not for value).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In such a case, it is considered more clear to express these intentions with these special forms,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>when</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unless</CODE>. As an added bonus, these forms accept multiple statements to evaluate, which are implicitly wrapped in a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>begin</CODE>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-when-1></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>when</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>test statement1 statement2 ...</EM></DT>
<DT><A name=index-unless-1></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>unless</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>test statement1 statement2 ...</EM></DT>
<DD>
<P>The actual definitions of these forms are in many ways their most clear documentation:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define-syntax-rule (when test stmt stmt* ...)
  (if test (begin stmt stmt* ...)))

(define-syntax-rule (unless condition stmt stmt* ...)
  (if (not test) (begin stmt stmt* ...)))
</PRE></DIV>
<P>That is to say,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>when</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>evaluates its consequent statements in order if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>test</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unless</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the opposite: it evaluates the statements if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>test</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is false.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-cond-1></A>syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cond</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>clause1 clause2 &#8230;</EM></DT>
<DD>
<P>Each<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cond</CODE>-clause must look like this:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(<VAR>test</VAR> <VAR>expression</VAR> &#8230;)
</PRE></DIV>
<P>where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>test</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expression</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are arbitrary expression, or like this</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(<VAR>test</VAR> =&gt; <VAR>expression</VAR>)
</PRE></DIV>
<P>where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expression</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must evaluate to a procedure.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>test</VAR>s of the clauses are evaluated in order and as soon as one of them evaluates to a true values, the corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expression</VAR>s are evaluated in order and the last value is returned as the value of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cond</CODE>-expression. For the<CODE>=&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>clause type,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expression</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is evaluated and the resulting procedure is applied to the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>test</VAR>. The result of this procedure application is then the result of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cond</CODE>-expression.</P><A name=index-SRFI_002d61></A><A name=index-general-cond-clause></A><A name=index-multiple-values-and-cond></A>
<P>One additional<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cond</CODE>-clause is available as an extension to standard Scheme:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(<VAR>test</VAR> <VAR>guard</VAR> =&gt; <VAR>expression</VAR>)
</PRE></DIV>
<P>where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>guard</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expression</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must evaluate to procedures. For this clause type,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>test</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may return multiple values, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cond</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>ignores its boolean state; instead,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cond</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>evaluates<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>guard</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and applies the resulting procedure to the value(s) of<VAR>test</VAR>, as if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>guard</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>were the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>consumer</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call-with-values</CODE>. If the result of that procedure call is a true value, it evaluates<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expression</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and applies the resulting procedure to the value(s) of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>test</VAR>, in the same manner as the<VAR>guard</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>was called.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>test</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the last<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>clause</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be the symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>else</CODE>. Then, if none of the preceding<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>test</VAR>s is true, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expression</VAR>s following the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>else</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are evaluated to produce the result of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cond</CODE>-expression.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-case-1></A>syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>case</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>key clause1 clause2 &#8230;</EM></DT>
<DD>
<P><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be any expression, and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>clause</VAR>s must have the form</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>((<VAR>datum1</VAR> &#8230;) <VAR>expr1</VAR> <VAR>expr2</VAR> &#8230;)
</PRE></DIV>
<P>or</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>((<VAR>datum1</VAR> &#8230;) =&gt; <VAR>expression</VAR>)
</PRE></DIV>
<P>and the last<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>clause</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may have the form</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(else <VAR>expr1</VAR> <VAR>expr2</VAR> &#8230;)
</PRE></DIV>
<P>or</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(else =&gt; <VAR>expression</VAR>)
</PRE></DIV>
<P>All<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>datum</VAR>s must be distinct. First,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is evaluated. The result of this evaluation is compared against all<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>datum</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>values using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eqv?</CODE>. When this comparison succeeds, the expression(s) following the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>datum</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are evaluated from left to right, returning the value of the last expression as the result of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>case</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression.</P>
<P>If the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>matches no<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>datum</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and there is an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>else</CODE>-clause, the expressions following the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>else</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are evaluated. If there is no such clause, the result of the expression is unspecified.</P>
<P>For the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>=&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>clause types,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expression</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is evaluated and the resulting procedure is applied to the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR>. The result of this procedure application is then the result of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>case</CODE>-expression.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=and-or></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#while-do" rel=next>while do</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Conditionals" rel=prev>Conditionals</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Control-Mechanisms" rel=up>Control Mechanisms</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Conditional-Evaluation-of-a-Sequence-of-Expressions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.13.3 Conditional Evaluation of a Sequence of Expressions</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>and</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>or</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>evaluate all their arguments in order, similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>begin</CODE>, but evaluation stops as soon as one of the expressions evaluates to false or true, respectively.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-and></A>syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>and</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>expr &#8230;</EM></DT>
<DD>
<P>Evaluate the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expr</VAR>s from left to right and stop evaluation as soon as one expression evaluates to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>; the remaining expressions are not evaluated. The value of the last evaluated expression is returned. If no expression evaluates to<CODE>#f</CODE>, the value of the last expression is returned.</P>
<P>If used without expressions,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-or></A>syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>or</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>expr &#8230;</EM></DT>
<DD>
<P>Evaluate the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expr</VAR>s from left to right and stop evaluation as soon as one expression evaluates to a true value (that is, a value different from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>); the remaining expressions are not evaluated. The value of the last evaluated expression is returned. If all expressions evaluate to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned.</P>
<P>If used without expressions,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=while-do></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Prompts" rel=next>Prompts</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#and-or" rel=prev>and or</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Control-Mechanisms" rel=up>Control Mechanisms</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Iteration-mechanisms></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.13.4 Iteration mechanisms</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-iteration></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-looping></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-named-let></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Scheme has only few iteration mechanisms, mainly because iteration in Scheme programs is normally expressed using recursion. Nevertheless, R5RS defines a construct for programming loops, calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>do</CODE>. In addition, Guile has an explicit looping syntax called<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>while</CODE>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-do></A>syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>do</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>((variable init [step]) &#8230;) (test expr &#8230;) body &#8230;</EM></DT>
<DD>
<P>Bind<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>variable</VAR>s and evaluate<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>until<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>test</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true. The return value is the last<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>after<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>test</VAR>, if given. A simple example will illustrate the basic form,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(do ((i 1 (1+ i)))
    ((&gt; i 4))
  (display i))
-| 1234
</PRE></DIV>
<P>Or with two variables and a final return value,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(do ((i 1 (1+ i))
     (p 3 (* 3 p)))
    ((&gt; i 4)
     p)
  (format #t "3**~s is ~s\n" i p))
-|
3**1 is 3
3**2 is 9
3**3 is 27
3**4 is 81
&#8658;
789
</PRE></DIV>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>variable</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bindings are established like a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>let</CODE>, in that the expressions are all evaluated and then all bindings made. When iterating, the optional<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>step</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>expressions are evaluated with the previous bindings in scope, then new bindings all made.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>test</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression is a termination condition. Looping stops when the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>test</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true. It&#8217;s evaluated before running the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>each time, so if it&#8217;s true the first time then<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not run at all.</P>
<P>The optional<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expr</VAR>s after the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>test</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are evaluated at the end of looping, with the final<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>variable</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bindings available. The last<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>gives the return value, or if there are no<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expr</VAR>s the return value is unspecified.</P>
<P>Each iteration establishes bindings to fresh locations for the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>variable</VAR>s, like a new<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>let</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for each iteration. This is done for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>variable</VAR>s without<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>step</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>expressions too. The following illustrates this, showing how a new<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>i</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is captured by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lambda</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in each iteration (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#About-Closure">The Concept of Closure</A>).</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define lst '())
(do ((i 1 (1+ i)))
    ((&gt; i 4))
  (set! lst (cons (lambda () i) lst)))
(map (lambda (proc) (proc)) lst)
&#8658;
(4 3 2 1)
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-while></A>syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>while</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>cond body &#8230;</EM></DT>
<DD>
<P>Run a loop executing the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>forms while<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cond</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cond</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is tested at the start of each iteration, so if it&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>the first time then<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not executed at all.</P>
<P>Within<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>while</CODE>, two extra bindings are provided, they can be used from both<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cond</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR>.</P>
<DL>
<DT><A name=index-break-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>break</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>break-arg &#8230;</EM></DT>
<DD>
<P>Break out of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>while</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form.</P></DD></DL>
<DL>
<DT><A name=index-continue></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>continue</STRONG></DT>
<DD>
<P>Abandon the current iteration, go back to the start and test<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cond</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>again, etc.</P></DD></DL>
<P>If the loop terminates normally, by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cond</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>evaluating to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, then the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>while</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression as a whole evaluates to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>. If it terminates by a call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>break</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with some number of arguments, those arguments are returned from the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>while</CODE>expression, as multiple values. Otherwise if it terminates by a call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>break</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with no arguments, then return value is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(while #f (error "not reached")) &#8658; #f
(while #t (break)) &#8658; #t
(while #t (break 1 2 3)) &#8658; 1 2 3
</PRE></DIV>
<P>Each<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>while</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form gets its own<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>break</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>continue</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedures, operating on that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>while</CODE>. This means when loops are nested the outer<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>break</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be used to escape all the way out. For example,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(while (test1)
  (let ((outer-break break))
    (while (test2)
      (if (something)
        (outer-break #f))
      ...)))
</PRE></DIV>
<P>Note that each<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>break</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>continue</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure can only be used within the dynamic extent of its<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>while</CODE>. Outside the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>while</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>their behaviour is unspecified.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-named-let-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Another very common way of expressing iteration in Scheme programs is the use of the so-called<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>named let</EM>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Named let is a variant of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>let</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>which creates a procedure and calls it in one step. Because of the newly created procedure, named let is more powerful than<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>do</CODE>&#8211;it can be used for iteration, but also for arbitrary recursion.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-let-1></A>syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>let</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>variable bindings body</EM></DT>
<DD>
<P>For the definition of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bindings</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>see the documentation about<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>let</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Local-Bindings">Local Bindings</A>).</P>
<P>Named<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>let</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>works as follows:</P>
<UL>
<LI>A new procedure which accepts as many arguments as are in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bindings</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is created and bound locally (using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>let</CODE>) to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>variable</VAR>. The new procedure&#8217;s formal argument names are the name of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>variables</VAR>.</LI>
<LI>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>expressions are inserted into the newly created procedure.</LI>
<LI>The procedure is called with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>init</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>expressions as the formal arguments.</LI></UL>
<P>The next example implements a loop which iterates (by recursion) 1000 times.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(let lp ((x 1000))
  (if (positive? x)
      (lp (- x 1))
      x))
&#8658;
0
</PRE></DIV></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Prompts></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Continuations" rel=next>Continuations</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#while-do" rel=prev>while do</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Control-Mechanisms" rel=up>Control Mechanisms</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Prompts-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.13.5 Prompts</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-prompts></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-delimited-continuations></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-composable-continuations></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-non_002dlocal-exit></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Prompts are control-flow barriers between different parts of a program. In the same way that a user sees a shell prompt (e.g., the Bash prompt) as a barrier between the operating system and her programs, Scheme prompts allow the Scheme programmer to treat parts of programs as if they were running in different operating systems.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">We use this roundabout explanation because, unless you&#8217;re a functional programming junkie, you probably haven&#8217;t heard the term, &#8220;delimited, composable continuation&#8221;. That&#8217;s OK; it&#8217;s a relatively recent topic, but a very useful one to know about.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Prompt-Primitives">Prompt Primitives</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Call-with-prompt and abort-to-prompt.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Shift-and-Reset">Shift and Reset</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>The zoo of delimited control operators.</TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Prompt-Primitives></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Shift-and-Reset" rel=next>Shift and Reset</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Prompts" rel=up>Prompts</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Prompt-Primitives-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.13.5.1 Prompt Primitives</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile&#8217;s primitive delimited control operators are<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call-with-prompt</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>abort-to-prompt</CODE>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-call_002dwith_002dprompt></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>call-with-prompt</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>tag thunk handler</EM></DT>
<DD>
<P>Set up a prompt, and call<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>within that prompt.</P>
<P>During the dynamic extent of the call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR>, a prompt named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tag</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be present in the dynamic context, such that if a user calls<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>abort-to-prompt</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see below) with that tag, control rewinds back to the prompt, and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is run.</P>
<P><VAR>handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a procedure. The first argument to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be the state of the computation begun when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>was called, and ending with the call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>abort-to-prompt</CODE>. The remaining arguments to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are those passed to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>abort-to-prompt</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dprompt_002dtag></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-prompt-tag</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[stem]</EM></DT>
<DD>
<P>Make a new prompt tag. Currently prompt tags are generated symbols. This may change in some future Guile version.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-default_002dprompt_002dtag></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>default-prompt-tag</STRONG></DT>
<DD>
<P>Return the default prompt tag. Having a distinguished default prompt tag allows some useful prompt and abort idioms, discussed in the next section.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-abort_002dto_002dprompt></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>abort-to-prompt</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>tag val1 val2 &#8230;</EM></DT>
<DD>
<P>Unwind the dynamic and control context to the nearest prompt named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tag</VAR>, also passing the given values.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">C programmers may recognize<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call-with-prompt</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>abort-to-prompt</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a fancy kind of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setjmp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>longjmp</CODE>, respectively. Prompts are indeed quite useful as non-local escape mechanisms. Guile&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>throw</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are implemented in terms of prompts. Prompts are more convenient than<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>longjmp</CODE>, in that one has the opportunity to pass multiple values to the jump target.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Also unlike<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>longjmp</CODE>, the prompt handler is given the full state of the process that was aborted, as the first argument to the prompt&#8217;s handler. That state is the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>continuation</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the computation wrapped by the prompt. It is a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>delimited continuation</EM>, because it is not the whole continuation of the program; rather, just the computation initiated by the call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call-with-prompt</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The continuation is a procedure, and may be reinstated simply by invoking it, with any number of values. Here&#8217;s where things get interesting, and complicated as well. Besides being described as delimited, continuations reified by prompts are also<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>composable</EM>, because invoking a prompt-saved continuation composes that continuation with the current one.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Imagine you have saved a continuation via call-with-prompt:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define cont
  (call-with-prompt
   ;; tag
   'foo
   ;; thunk
   (lambda ()
     (+ 34 (abort-to-prompt 'foo)))
   ;; handler
   (lambda (k) k)))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The resulting continuation is the addition of 34. It&#8217;s as if you had written:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define cont
  (lambda (x)
    (+ 34 x)))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">So, if we call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cont</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with one numeric value, we get that number, incremented by 34:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(cont 8)
&#8658; 42
(* 2 (cont 8))
&#8658; 84
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The last example illustrates what we mean when we say, "composes with the current continuation". We mean that there is a current continuation &#8211; some remaining things to compute, like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(lambda (x) (* x 2))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8211; and that calling the saved continuation doesn&#8217;t wipe out the current continuation, it composes the saved continuation with the current one.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">We&#8217;re belaboring the point here because traditional Scheme continuations, as discussed in the next section, aren&#8217;t composable, and are actually less expressive than continuations captured by prompts. But there&#8217;s a place for them both.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Before moving on, we should mention that if the handler of a prompt is a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lambda</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression, and the first argument isn&#8217;t referenced, an abort to that prompt will not cause a continuation to be reified. This can be an important efficiency consideration to keep in mind.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-continuation_002c-escape></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">One example where this optimization matters is<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>escape continuations</EM>. Escape continuations are delimited continuations whose only use is to make a non-local exit&#8212;i.e., to escape from the current continuation. Such continuations are invoked only once, and for this reason they are sometimes called<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>one-shot continuations</EM>. A common use of escape continuations is when throwing an exception (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Exceptions">Exceptions</A>).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The constructs below are syntactic sugar atop prompts to simplify the use of escape continuations.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-call_002dwith_002descape_002dcontinuation></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>call-with-escape-continuation</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc</EM></DT>
<DT><A name=index-call_002fec></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>call/ec</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc</EM></DT>
<DD>
<P>Call<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with an escape continuation.</P>
<P>In the example below, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>return</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>continuation is used to escape the continuation of the call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fold</CODE>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(use-modules (ice-9 control)
             (srfi srfi-1))

(define (prefix x lst)
  ;; Return all the elements before the first occurrence
  ;; of X in LST.
  (call/ec
    (lambda (return)
      (fold (lambda (element prefix)
              (if (equal? element x)
                  (return (reverse prefix))  ; escape `fold'
                  (cons element prefix)))
            '()
            lst))))

(prefix 'a '(0 1 2 a 3 4 5))
&#8658; (0 1 2)
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-let_002descape_002dcontinuation></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>let-escape-continuation</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>k body &#8230;</EM></DT>
<DT><A name=index-let_002fec></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>let/ec</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>k body &#8230;</EM></DT>
<DD>
<P>Bind<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>within<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to an escape continuation.</P>
<P>This is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(call/ec (lambda (<VAR>k</VAR>)<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230;))</CODE>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Shift-and-Reset></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Prompt-Primitives" rel=prev>Prompt Primitives</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Prompts" rel=up>Prompts</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Shift_002c-Reset_002c-and-All-That></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.13.5.2 Shift, Reset, and All That</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">There is a whole zoo of delimited control operators, and as it does not seem to be a bounded set, Guile implements support for them in a separate module:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (ice-9 control))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Firstly, we have a helpful abbreviation for the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call-with-prompt</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>operator.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0025></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>%</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>expr</EM></DT>
<DT><A name=index-_0025-1></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>%</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>expr handler</EM></DT>
<DT><A name=index-_0025-2></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>%</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>tag expr handler</EM></DT>
<DD>
<P>Evaluate<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in a prompt, optionally specifying a tag and a handler. If no tag is given, the default prompt tag is used.</P>
<P>If no handler is given, a default handler is installed. The default handler accepts a procedure of one argument, which will called on the captured continuation, within a prompt.</P>
<P>Sometimes it&#8217;s easier just to show code, as in this case:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define (default-prompt-handler k proc)
  (% (default-prompt-tag)
     (proc k)
     default-prompt-handler))
</PRE></DIV>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>symbol is chosen because it looks like a prompt.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Likewise there is an abbreviation for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>abort-to-prompt</CODE>, which assumes the default prompt tag:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-abort></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>abort</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>val1 val2 &#8230;</EM></DT>
<DD>
<P>Abort to the default prompt tag, passing<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230; to the handler.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">As mentioned before,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 control)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>also provides other delimited control operators. This section is a bit technical, and first-time users of delimited continuations should probably come back to it after some practice with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Still here? So, when one implements a delimited control operator like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call-with-prompt</CODE>, one needs to make two decisions. Firstly, does the handler run within or outside the prompt? Having the handler run within the prompt allows an abort inside the handler to return to the same prompt handler, which is often useful. However it prevents tail calls from the handler, so it is less general.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Similarly, does invoking a captured continuation reinstate a prompt? Again we have the tradeoff of convenience versus proper tail calls.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">These decisions are captured in the Felleisen<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>F</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>operator. If neither the continuations nor the handlers implicitly add a prompt, the operator is known as<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>&#8211;F&#8211;</EM>. This is the case for Guile&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call-with-prompt</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>abort-to-prompt</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If both continuation and handler implicitly add prompts, then the operator is<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>+F+</EM>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>shift</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>reset</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are such operators.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-reset></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>reset</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>body1 body2 &#8230;</EM></DT>
<DD>
<P>Establish a prompt, and evaluate<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230; within that prompt.</P>
<P>The prompt handler is designed to work with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>shift</CODE>, described below.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-shift></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>shift</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>cont body1 body2 &#8230;</EM></DT>
<DD>
<P>Abort to the nearest<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>reset</CODE>, and evaluate<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230; in a context in which the captured continuation is bound to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cont</VAR>.</P>
<P>As mentioned above, taken together, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230; expressions and the invocations of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cont</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>implicitly establish a prompt.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Interested readers are invited to explore Oleg Kiselyov&#8217;s wonderful web site at<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://okmij.org/ftp/">http://okmij.org/ftp/</A>, for more information on these operators.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Continuations></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Multiple-Values" rel=next>Multiple Values</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Prompts" rel=prev>Prompts</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Control-Mechanisms" rel=up>Control Mechanisms</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Continuations-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.13.6 Continuations</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-continuations></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A &#8220;continuation&#8221; is the code that will execute when a given function or expression returns. For example, consider</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define (foo)
  (display "hello\n")
  (display (bar)) (newline)
  (exit))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The continuation from the call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bar</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>comprises a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>display</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the value returned, a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>newline</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>exit</CODE>. This can be expressed as a function of one argument.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(lambda (r)
  (display r) (newline)
  (exit))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In Scheme, continuations are represented as special procedures just like this. The special property is that when a continuation is called it abandons the current program location and jumps directly to that represented by the continuation.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A continuation is like a dynamic label, capturing at run-time a point in program execution, including all the nested calls that have lead to it (or rather the code that will execute when those calls return).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Continuations are created with the following functions.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-call_002dwith_002dcurrent_002dcontinuation></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>call-with-current-continuation</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc</EM></DT>
<DT><A name=index-call_002fcc></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>call/cc</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc</EM></DT>
<DD><A name=index-call_002dwith_002dcurrent_002dcontinuation-2></A>
<P>Capture the current continuation and call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cont</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with it. The return value is the value returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR>, or when<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>cont</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is later invoked, the return is the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>passed.</P>
<P>Normally<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cont</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be called with one argument, but when the location resumed is expecting multiple values (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Multiple-Values">Multiple Values</A>) then they should be passed as multiple arguments, for instance<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>cont</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>z</VAR>)</CODE>.</P>
<P><VAR>cont</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may only be used from the same side of a continuation barrier as it was created (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Continuation-Barriers">Continuation Barriers</A>), and in a multi-threaded program only from the thread in which it was created.</P>
<P>The call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not part of the continuation captured, it runs only when the continuation is created. Often a program will want to store<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cont</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>somewhere for later use; this can be done in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR>.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the name<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call-with-current-continuation</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>refers to the way a call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>gives the newly created continuation. It&#8217;s not related to the way a call is used later to invoke that continuation.</P>
<P><CODE>call/cc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an alias for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call-with-current-continuation</CODE>. This is in common use since the latter is rather long.</P></DD></DL><BR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here is a simple example,</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define kont #f)
(format #t "the return is ~a\n"
        (call/cc (lambda (k)
                   (set! kont k)
                   1)))
&#8658; the return is 1

(kont 2)
&#8658; the return is 2
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>call/cc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>captures a continuation in which the value returned is going to be displayed by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>format</CODE>. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lambda</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>stores this in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>kont</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and gives an initial return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>which is displayed. The later invocation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>kont</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>resumes the captured point, but this time returning<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>2</CODE>, which is displayed.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When Guile is run interactively, a call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>format</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>like this has an implicit return back to the read-eval-print loop.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call/cc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>captures that like any other return, which is why interactively<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>kont</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will come back to read more input.</P><BR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">C programmers may note that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call/cc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setjmp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the way it records at runtime a point in program execution. A call to a continuation is like a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>longjmp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in that it abandons the present location and goes to the recorded one. Like<CODE>longjmp</CODE>, the value passed to the continuation is the value returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call/cc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on resuming there. However<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>longjmp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can only go up the program stack, but the continuation mechanism can go anywhere.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When a continuation is invoked,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call/cc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and subsequent code effectively &#8220;returns&#8221; a second time. It can be confusing to imagine a function returning more times than it was called. It may help instead to think of it being stealthily re-entered and then program flow going on as normal.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>dynamic-wind</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Dynamic-Wind">Dynamic Wind</A>) can be used to ensure setup and cleanup code is run when a program locus is resumed or abandoned through the continuation mechanism.</P><BR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Continuations are a powerful mechanism, and can be used to implement almost any sort of control structure, such as loops, coroutines, or exception handlers.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">However the implementation of continuations in Guile is not as efficient as one might hope, because Guile is designed to cooperate with programs written in other languages, such as C, which do not know about continuations. Basically continuations are captured by a block copy of the stack, and resumed by copying back.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For this reason, continuations captured by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call/cc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be used only when there is no other simple way to achieve the desired result, or when the elegance of the continuation mechanism outweighs the need for performance.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Escapes upwards from loops or nested functions are generally best handled with prompts (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Prompts">Prompts</A>). Coroutines can be efficiently implemented with cooperating threads (a thread holds a full program stack but doesn&#8217;t copy it around the way continuations do).</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Multiple-Values></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Exceptions" rel=next>Exceptions</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Continuations" rel=prev>Continuations</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Control-Mechanisms" rel=up>Control Mechanisms</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Returning-and-Accepting-Multiple-Values></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.13.7 Returning and Accepting Multiple Values</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-multiple-values></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-receive></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Scheme allows a procedure to return more than one value to its caller. This is quite different to other languages which only allow single-value returns. Returning multiple values is different from returning a list (or pair or vector) of values to the caller, because conceptually not<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>one</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>compound object is returned, but several distinct values.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The primitive procedures for handling multiple values are<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>values</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call-with-values</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>values</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used for returning multiple values from a procedure. This is done by placing a call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>values</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with zero or more arguments in tail position in a procedure body.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call-with-values</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>combines a procedure returning multiple values with a procedure which accepts these values as parameters.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-values-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-values></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>values</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>arg &#8230;</EM></DT>
<DT><A name=index-scm_005fvalues></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_values</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(args)</EM></DT>
<DD>
<P>Delivers all of its arguments to its continuation. Except for continuations created by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call-with-values</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure, all continuations take exactly one value. The effect of passing no value or more than one value to continuations that were not created by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call-with-values</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is unspecified.</P>
<P>For<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_values</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>args</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a list of arguments and the return is a multiple-values object which the caller can return. In the current implementation that object shares structure with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>args</VAR>, so<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>args</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should not be modified subsequently.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fvalues></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_values</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM *base, size_t n)</EM></DT>
<DD>
<P><CODE>scm_c_values</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an alternative to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_values</CODE>. It creates a new values object, and copies into it the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>values starting from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>base</VAR>.</P>
<P>Currently this creates a list and passes it to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_values</CODE>, but we expect that in the future we will be able to use more a efficient representation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fnvalues></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>size_t</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_nvalues</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM obj)</EM></DT>
<DD>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a multiple-values object, returns the number of values it contains. Otherwise returns 1.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fvalue_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_value_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM obj, size_t idx)</EM></DT>
<DD>
<P>Returns the value at the position specified by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>idx</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR>. Note that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>will ordinarily be a multiple-values object, but it need not be. Any other object represents a single value (itself), and is handled appropriately.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-call_002dwith_002dvalues-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-call_002dwith_002dvalues></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>call-with-values</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>producer consumer</EM></DT>
<DD>
<P>Calls its<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>producer</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument with no values and a continuation that, when passed some values, calls the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>consumer</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure with those values as arguments. The continuation for the call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>consumer</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the continuation of the call to<CODE>call-with-values</CODE>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(call-with-values (lambda () (values 4 5))
                  (lambda (a b) b))
&#8658; 5

</PRE></DIV>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(call-with-values * -)
&#8658; -1
</PRE></DIV></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In addition to the fundamental procedures described above, Guile has a module which exports a syntax called<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>receive</CODE>, which is much more convenient. This is in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 receive)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and is the same as specified by SRFI-8 (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d8">SRFI-8</A>).</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(use-modules (ice-9 receive))
</PRE></DIV>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-receive-1></A>library syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>receive</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>formals expr body &#8230;</EM></DT>
<DD>
<P>Evaluate the expression<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expr</VAR>, and bind the result values (zero or more) to the formal arguments in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>formals</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>formals</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a list of symbols, like the argument list in a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lambda</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Lambda">Lambda</A>). After binding the variables, the expressions in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230; are evaluated in order, the return value is the result from the last expression.</P>
<P>For example getting results from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>partition</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in SRFI-1 (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1">SRFI-1</A>),</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(receive (odds evens)
    (partition odd? '(7 4 2 8 3))
  (display odds)
  (display " and ")
  (display evens))
-| (7 3) and (4 2 8)
</PRE></DIV></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Exceptions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Error-Reporting" rel=next>Error Reporting</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Multiple-Values" rel=prev>Multiple Values</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Control-Mechanisms" rel=up>Control Mechanisms</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Exceptions-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.13.8 Exceptions</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-error-handling></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-exception-handling></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A common requirement in applications is to want to jump<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>non-locally</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>from the depths of a computation back to, say, the application&#8217;s main processing loop. Usually, the place that is the target of the jump is somewhere in the calling stack of procedures that called the procedure that wants to jump back. For example, typical logic for a key press driven application might look something like this:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>main-loop:
  read the next key press and call dispatch-key

dispatch-key:
  lookup the key in a keymap and call an appropriate procedure,
  say find-file

find-file:
  interactively read the required file name, then call
  find-specified-file

find-specified-file:
  check whether file exists; if not, jump back to main-loop
  &#8230;
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The jump back to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>main-loop</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>could be achieved by returning through the stack one procedure at a time, using the return value of each procedure to indicate the error condition, but Guile (like most modern programming languages) provides an additional mechanism called<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>exception handling</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>that can be used to implement such jumps much more conveniently.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Exception-Terminology">Exception Terminology</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Different ways to say the same thing.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Catch">Catch</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Setting up to catch exceptions.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#Throw-Handlers">Throw Handlers</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Handling exceptions before unwinding the stack.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#Throw">Throw</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Throwing an exception.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#Exception-Implementation">Exception Implementation</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>How Guile implements exceptions.</TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Exception-Terminology></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Catch" rel=next>Catch</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Exceptions" rel=up>Exceptions</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Exception-Terminology-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.13.8.1 Exception Terminology</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">There are several variations on the terminology for dealing with non-local jumps. It is useful to be aware of them, and to realize that they all refer to the same basic mechanism.</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>Actually making a non-local jump may be called<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>raising an exception</EM>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>raising a signal</EM>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>throwing an exception</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>doing a long jump</EM>. When the jump indicates an error condition, people may talk about<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>signalling</EM>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>raising</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>throwing</EM><EM>an error</EM>.</LI>
<LI>Handling the jump at its target may be referred to as<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>catching</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>handling</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>exception</EM>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>signal</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>or, where an error condition is involved,<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>error</EM>.</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Where<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>signal</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>signalling</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>are used, special care is needed to avoid the risk of confusion with POSIX signals.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This manual prefers to speak of throwing and catching exceptions, since this terminology matches the corresponding Guile primitives.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The exception mechanism described in this section has connections with<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>delimited continuations</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Prompts">Prompts</A>). In particular, throwing an exception is akin to invoking an<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>escape continuation</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Prompt-Primitives"><CODE>call/ec</CODE></A>).</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Catch></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Throw-Handlers" rel=next>Throw Handlers</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Exception-Terminology" rel=prev>Exception Terminology</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Exceptions" rel=up>Exceptions</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Catching-Exceptions-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.13.8.2 Catching Exceptions</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used to set up a target for a possible non-local jump. The arguments of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression are a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>key</EM>, which restricts the set of exceptions to which this<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>applies, a thunk that specifies the code to execute and one or two<EM>handler</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedures that say what to do if an exception is thrown while executing the code. If the execution thunk executes<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>normally</EM>, which means without throwing any exceptions, the handler procedures are not called at all.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When an exception is thrown using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>throw</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function, the first argument of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>throw</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a symbol that indicates the type of the exception. For example, Guile throws an exception using the symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>numerical-overflow</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to indicate numerical overflow errors such as division by zero:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(/ 1 0)
&#8658;
ABORT: (numerical-overflow)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument in a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression corresponds to this symbol.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be a specific symbol, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>numerical-overflow</CODE>, in which case the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>applies specifically to exceptions of that type; or it may be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE>, which means that the<CODE>catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>applies to all exceptions, irrespective of their type.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The second argument of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression should be a thunk (i.e. a procedure that accepts no arguments) that specifies the normal case code. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is active for the execution of this thunk, including any code called directly or indirectly by the thunk&#8217;s body. Evaluation of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression activates the catch and then calls this thunk.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The third argument of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression is a handler procedure. If an exception is thrown, this procedure is called with exactly the arguments specified by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>throw</CODE>. Therefore, the handler procedure must be designed to accept a number of arguments that corresponds to the number of arguments in all<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>throw</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expressions that can be caught by this<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catch</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The fourth, optional argument of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression is another handler procedure, called the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pre-unwind</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>handler. It differs from the third argument in that if an exception is thrown, it is called,<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>before</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>the third argument handler, in exactly the dynamic context of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>throw</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression that threw the exception. This means that it is useful for capturing or displaying the stack at the point of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>throw</CODE>, or for examining other aspects of the dynamic context, such as fluid values, before the context is unwound back to that of the prevailing<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catch</CODE>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-catch></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>catch</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>key thunk handler [pre-unwind-handler]</EM></DT>
<DT><A name=index-scm_005fcatch_005fwith_005fpre_005funwind_005fhandler></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_catch_with_pre_unwind_handler</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(key, thunk, handler, pre_unwind_handler)</EM></DT>
<DT><A name=index-scm_005fcatch></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_catch</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(key, thunk, handler)</EM></DT>
<DD>
<P>Invoke<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the dynamic context of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>for exceptions matching<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR>. If thunk throws to the symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR>, then<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is invoked this way:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(handler key args ...)
</PRE></DIV>
<P><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a symbol or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE>.</P>
<P><VAR>thunk</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>takes no arguments. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns normally, that is the return value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catch</CODE>.</P>
<P>Handler is invoked outside the scope of its own<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catch</CODE>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>again throws to the same key, a new handler from further up the call chain is invoked.</P>
<P>If the key is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE>, then a throw to<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>any</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>symbol will match this call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catch</CODE>.</P>
<P>If a<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pre-unwind-handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is given and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>throws an exception that matches<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR>, Guile calls the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pre-unwind-handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>before unwinding the dynamic state and invoking the main<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pre-unwind-handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be a procedure with the same signature as<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler</VAR>, that is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(lambda (key . args))</CODE>. It is typically used to save the stack at the point where the exception occurred, but can also query other parts of the dynamic state at that point, such as fluid values.</P>
<P>A<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pre-unwind-handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can exit either normally or non-locally. If it exits normally, Guile unwinds the stack and dynamic context and then calls the normal (third argument) handler. If it exits non-locally, that exit determines the continuation.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If a handler procedure needs to match a variety of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>throw</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expressions with varying numbers of arguments, you should write it like this:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(lambda (key . args)
  &#8230;)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument is guaranteed always to be present, because a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>throw</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>without a<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not valid. The number and interpretation of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>args</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>varies from one type of exception to another, but should be specified by the documentation for each exception type.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that, once the normal (post-unwind) handler procedure is invoked, the catch that led to the handler procedure being called is no longer active. Therefore, if the handler procedure itself throws an exception, that exception can only be caught by another active catch higher up the call stack, if there is one.</P><BR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fcatch></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_catch</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM tag, scm_t_catch_body body, void *body_data, scm_t_catch_handler handler, void *handler_data, scm_t_catch_handler pre_unwind_handler, void *pre_unwind_handler_data)</EM></DT>
<DT><A name=index-scm_005finternal_005fcatch></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_internal_catch</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM tag, scm_t_catch_body body, void *body_data, scm_t_catch_handler handler, void *handler_data)</EM></DT>
<DD>
<P>The above<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_catch_with_pre_unwind_handler</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>take Scheme procedures as body and handler arguments.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_c_catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_internal_catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are equivalents taking C functions.</P>
<P><VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE><VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>body_data</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with a catch on exceptions of the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tag</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>type. If an exception is caught,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pre_unwind_handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are called as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE><VAR>handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>handler_data</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>args</VAR>)</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>args</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>key and argument list from the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>throw</CODE>.</P><A name=index-scm_005ft_005fcatch_005fbody></A><A name=index-scm_005ft_005fcatch_005fhandler></A>
<P><VAR>body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should have the following prototypes.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_t_catch_body</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_t_catch_handler</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are pointer typedefs for these.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>SCM body (void *data);
SCM handler (void *data, SCM key, SCM args);
</PRE></DIV>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>body_data</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler_data</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameters are passed to the respective calls so an application can communicate extra information to those functions.</P>
<P>If the data consists of an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>object, care should be taken that it isn&#8217;t garbage collected while still required. If the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a local C variable, one way to protect it is to pass a pointer to that variable as the data parameter, since the C compiler will then know the value must be held on the stack. Another way is to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_remember_upto_here_1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Remembering-During-Operations">Remembering During Operations</A>).</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Throw-Handlers></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Throw" rel=next>Throw</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Catch" rel=prev>Catch</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Exceptions" rel=up>Exceptions</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Throw-Handlers-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.13.8.3 Throw Handlers</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">It&#8217;s sometimes useful to be able to intercept an exception that is being thrown before the stack is unwound. This could be to clean up some related state, to print a backtrace, or to pass information about the exception to a debugger, for example. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>with-throw-handler</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure provides a way to do this.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-with_002dthrow_002dhandler></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>with-throw-handler</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>key thunk handler</EM></DT>
<DT><A name=index-scm_005fwith_005fthrow_005fhandler></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_with_throw_handler</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(key, thunk, handler)</EM></DT>
<DD>
<P>Add<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the dynamic context as a throw handler for key<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR>, then invoke<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR>.</P>
<P>This behaves exactly like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catch</CODE>, except that it does not unwind the stack before invoking<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler</VAR>. If the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure returns normally, Guile rethrows the same exception again to the next innermost catch or throw handler.<VAR>handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may exit nonlocally, of course, via an explicit throw or via invoking a continuation.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Typically<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used to display a backtrace of the stack at the point where the corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>throw</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>occurred, or to save off this information for possible display later.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Not unwinding the stack means that throwing an exception that is handled via a throw handler is equivalent to calling the throw handler handler inline instead of each<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>throw</CODE>, and then omitting the surrounding<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>with-throw-handler</CODE>. In other words,</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(with-throw-handler 'key
  (lambda () &#8230; (throw 'key args &#8230;) &#8230;)
  handler)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">is mostly equivalent to</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>((lambda () &#8230; (handler 'key args &#8230;) &#8230;))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In particular, the dynamic context when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is invoked is that of the site where<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>throw</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called. The examples are not quite equivalent, because the body of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>with-throw-handler</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not in tail position with respect to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>with-throw-handler</CODE>, and if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>exits normally, Guile arranges to rethrow the error, but hopefully the intention is clear. (For an introduction to what is meant by dynamic context, See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Dynamic-Wind">Dynamic Wind</A>.)</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fwith_005fthrow_005fhandler></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_with_throw_handler</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM tag, scm_t_catch_body body, void *body_data, scm_t_catch_handler handler, void *handler_data, int lazy_catch_p)</EM></DT>
<DD>
<P>The above<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_with_throw_handler</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>takes Scheme procedures as body (thunk) and handler arguments.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_c_with_throw_handler</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an equivalent taking C functions. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_c_catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Catch">Catch</A>) for a description of the parameters, the behaviour however of course follows<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>with-throw-handler</CODE>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>throws an exception, Guile handles that exception by invoking the innermost<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or throw handler whose key matches that of the exception. When the innermost thing is a throw handler, Guile calls the specified handler procedure using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(apply<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>key args)</CODE>. The handler procedure may either return normally or exit non-locally. If it returns normally, Guile passes the exception on to the next innermost<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or throw handler. If it exits non-locally, that exit determines the continuation.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The behaviour of a throw handler is very similar to that of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression&#8217;s optional pre-unwind handler. In particular, a throw handler&#8217;s handler procedure is invoked in the exact dynamic context of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>throw</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression, just as a pre-unwind handler is.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>with-throw-handler</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be seen as a half-<CODE>catch</CODE>: it does everything that a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>would do until the point where<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>would start unwinding the stack and dynamic context, but then it rethrows to the next innermost<CODE>catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or throw handler instead.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note also that since the dynamic context is not unwound, if a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>with-throw-handler</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>handler throws to a key that does not match the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>with-throw-handler</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR>, the new throw may be handled by a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or throw handler that is<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>closer</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the throw than the first<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>with-throw-handler</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here is an example to illustrate this behavior:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(catch 'a
  (lambda ()
    (with-throw-handler 'b
      (lambda ()
        (catch 'a
          (lambda ()
            (throw 'b))
          inner-handler))
      (lambda (key . args)
        (throw 'a))))
  outer-handler)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This code will call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>inner-handler</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and then continue with the continuation of the inner<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catch</CODE>.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Throw></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Exception-Implementation" rel=next>Exception Implementation</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Throw-Handlers" rel=prev>Throw Handlers</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Exceptions" rel=up>Exceptions</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Throwing-Exceptions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.13.8.4 Throwing Exceptions</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>throw</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>primitive is used to throw an exception. One argument, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR>, is mandatory, and must be a symbol; it indicates the type of exception that is being thrown. Following the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>throw</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>accepts any number of additional arguments, whose meaning depends on the exception type. The documentation for each possible type of exception should specify the additional arguments that are expected for that kind of exception.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-throw></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>throw</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>key arg &#8230;</EM></DT>
<DT><A name=index-scm_005fthrow></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_throw</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(key, args)</EM></DT>
<DD>
<P>Invoke the catch form matching<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR>, passing<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230; to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handler</VAR>.</P>
<P><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a symbol. It will match catches of the same symbol or of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE>.</P>
<P>If there is no handler at all, Guile prints an error and then exits.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When an exception is thrown, it will be caught by the innermost<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or throw handler that applies to the type of the thrown exception; in other words, whose<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is either<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or the same symbol as that used in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>throw</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression. Once Guile has identified the appropriate<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or throw handler, it handles the exception by applying the relevant handler procedure(s) to the arguments of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>throw</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If there is no appropriate<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or throw handler for a thrown exception, Guile prints an error to the current error port indicating an uncaught exception, and then exits. In practice, it is quite difficult to observe this behaviour, because Guile when used interactively installs a top level<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>handler that will catch all exceptions and print an appropriate error message<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>without</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>exiting. For example, this is what happens if you try to throw an unhandled exception in the standard Guile REPL; note that Guile&#8217;s command loop continues after the error message:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>guile&gt; (throw 'badex)
&lt;unnamed port&gt;:3:1: In procedure gsubr-apply &#8230;
&lt;unnamed port&gt;:3:1: unhandled-exception: badex
ABORT: (misc-error)
guile&gt; 
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The default uncaught exception behaviour can be observed by evaluating a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>throw</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression from the shell command line:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>$ guile -c "(begin (throw 'badex) (display \"here\\n\"))"
guile: uncaught throw to badex: ()
$ 
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">That Guile exits immediately following the uncaught exception is shown by the absence of any output from the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>display</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression, because Guile never gets to the point of evaluating that expression.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Exception-Implementation></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Throw" rel=prev>Throw</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Exceptions" rel=up>Exceptions</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=How-Guile-Implements-Exceptions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.13.8.5 How Guile Implements Exceptions</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">It is traditional in Scheme to implement exception systems using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call-with-current-continuation</CODE>. Continuations (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Continuations">Continuations</A>) are such a powerful concept that any other control mechanism &#8212; including<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>throw</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8212; can be implemented in terms of them.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile does not implement<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>throw</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>like this, though. Why not? Because Guile is specifically designed to be easy to integrate with applications written in C. In a mixed Scheme/C environment, the concept of<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>continuation</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>must logically include &#8220;what happens next&#8221; in the C parts of the application as well as the Scheme parts, and it turns out that the only reasonable way of implementing continuations like this is to save and restore the complete C stack.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">So Guile&#8217;s implementation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call-with-current-continuation</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a stack copying one. This allows it to interact well with ordinary C code, but means that creating and calling a continuation is slowed down by the time that it takes to copy the C stack.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The more targeted mechanism provided by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>throw</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not need to save and restore the C stack because the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>throw</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>always jumps to a location higher up the stack of the code that executes the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>throw</CODE>. Therefore Guile implements the<CODE>catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>throw</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>primitives independently of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call-with-current-continuation</CODE>, in a way that takes advantage of this<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>upwards only</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>nature of exceptions.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Error-Reporting></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Dynamic-Wind" rel=next>Dynamic Wind</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Exceptions" rel=prev>Exceptions</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Control-Mechanisms" rel=up>Control Mechanisms</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Procedures-for-Signaling-Errors></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.13.9 Procedures for Signaling Errors</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile provides a set of convenience procedures for signaling error conditions that are implemented on top of the exception primitives just described.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-error-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>error</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>msg arg &#8230;</EM></DT>
<DD>
<P>Raise an error with key<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>misc-error</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and a message constructed by displaying<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>msg</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and writing<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=enddots>...</SMALL>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_002derror></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm-error</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>key subr message args data</EM></DT>
<DT><A name=index-scm_005ferror_005fscm></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_error_scm</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(key, subr, message, args, data)</EM></DT>
<DD>
<P>Raise an error with key<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>subr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be a string naming the procedure associated with the error, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>message</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the error message string, possibly containing<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~S</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~A</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>escapes. When an error is reported, these are replaced by formatting the corresponding members of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>args</VAR>:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~A</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(was<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%s</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in older versions of Guile) formats using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>display</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~S</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(was<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%S</CODE>) formats using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>data</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a list or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>depending on<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR>: if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>system-error</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>then it should be a list containing the Unix<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>errno</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value; If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>signal</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>then it should be a list containing the Unix signal number; If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>out-of-range</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>wrong-type-arg</CODE>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>keyword-argument-error</CODE>, it is a list containing the bad value; otherwise it will usually be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-strerror></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>strerror</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>err</EM></DT>
<DT><A name=index-scm_005fstrerror></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_strerror</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(err)</EM></DT>
<DD>
<P>Return the Unix error message corresponding to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>err</VAR>, an integer<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>errno</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value.</P>
<P>When<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setlocale</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>has been called (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Locales">Locales</A>), the message is in the language and charset of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>LC_MESSAGES</CODE>. (This is done by the C library.)</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-false_002dif_002dexception></A>syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>false-if-exception</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>expr</EM></DT>
<DD>
<P>Returns the result of evaluating its argument; however if an exception occurs then<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned instead.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Dynamic-Wind></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Handling-Errors" rel=next>Handling Errors</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Error-Reporting" rel=prev>Error Reporting</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Control-Mechanisms" rel=up>Control Mechanisms</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Dynamic-Wind-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.13.10 Dynamic Wind</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For Scheme code, the fundamental procedure to react to non-local entry and exits of dynamic contexts is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dynamic-wind</CODE>. C code could use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_internal_dynamic_wind</CODE>, but since C does not allow the convenient construction of anonymous procedures that close over lexical variables, this will be, well, inconvenient.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Therefore, Guile offers the functions<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_dynwind_begin</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_dynwind_end</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to delimit a dynamic extent. Within this dynamic extent, which is called a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>dynwind context</EM>, you can perform various<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>dynwind actions</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>that control what happens when the dynwind context is entered or left. For example, you can register a cleanup routine with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_dynwind_unwind_handler</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that is executed when the context is left. There are several other more specialized dynwind actions as well, for example to temporarily block the execution of asyncs or to temporarily change the current output port. They are described elsewhere in this manual.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here is an example that shows how to prevent memory leaks.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>/* Suppose there is a function called FOO in some library that you
   would like to make available to Scheme code (or to C code that
   follows the Scheme conventions).

   FOO takes two C strings and returns a new string.  When an error has
   occurred in FOO, it returns NULL.
*/

char *foo (char *s1, char *s2);

/* SCM_FOO interfaces the C function FOO to the Scheme way of life.
   It takes care to free up all temporary strings in the case of
   non-local exits.
 */

SCM
scm_foo (SCM s1, SCM s2)
{
  char *c_s1, *c_s2, *c_res;

  scm_dynwind_begin (0);

  c_s1 = scm_to_locale_string (s1);

  /* Call 'free (c_s1)' when the dynwind context is left. 
  */
  scm_dynwind_unwind_handler (free, c_s1, SCM_F_WIND_EXPLICITLY);

  c_s2 = scm_to_locale_string (s2);
  
  /* Same as above, but more concisely.
  */
  scm_dynwind_free (c_s2);

  c_res = foo (c_s1, c_s2);
  if (c_res == NULL)
    scm_memory_error ("foo");

  scm_dynwind_end ();

  return scm_take_locale_string (res);
}
</PRE></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-dynamic_002dwind-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-dynamic_002dwind></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>dynamic-wind</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>in_guard thunk out_guard</EM></DT>
<DT><A name=index-scm_005fdynamic_005fwind></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_dynamic_wind</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(in_guard, thunk, out_guard)</EM></DT>
<DD>
<P>All three arguments must be 0-argument procedures.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>in_guard</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called, then<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR>, then<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>out_guard</VAR>.</P>
<P>If, any time during the execution of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR>, the dynamic extent of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dynamic-wind</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression is escaped non-locally,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>out_guard</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called. If the dynamic extent of the dynamic-wind is re-entered,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>in_guard</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called. Thus<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>in_guard</VAR>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>out_guard</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be called any number of times.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(define x 'normal-binding)
&#8658; x
(define a-cont
  (call-with-current-continuation
   (lambda (escape)
     (let ((old-x x))
       (dynamic-wind
           ;; in-guard:
           ;;
           (lambda () (set! x 'special-binding))

           ;; thunk
           ;;
           (lambda () (display x) (newline)
                      (call-with-current-continuation escape)
                      (display x) (newline)
                      x)

           ;; out-guard:
           ;;
           (lambda () (set! x old-x)))))))
;; Prints:
special-binding
;; Evaluates to:
&#8658; a-cont
x
&#8658; normal-binding
(a-cont #f)
;; Prints:
special-binding
;; Evaluates to:
&#8658; a-cont  ;; the value of the (define a-cont...)
x
&#8658; normal-binding
a-cont
&#8658; special-binding
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005ft_005fdynwind_005fflags></A>C Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_t_dynwind_flags</STRONG></DT>
<DD>
<P>This is an enumeration of several flags that modify the behavior of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_dynwind_begin</CODE>. The flags are listed in the following table.</P>
<DL compact>
<DT><CODE>SCM_F_DYNWIND_REWINDABLE</CODE></DT>
<DD>
<P>The dynamic context is<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>rewindable</EM>. This means that it can be reentered non-locally (via the invocation of a continuation). The default is that a dynwind context can not be reentered non-locally.</P></DD></DL></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fdynwind_005fbegin></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_dynwind_begin</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_dynwind_flags flags)</EM></DT>
<DD>
<P>The function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_dynwind_begin</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>starts a new dynamic context and makes it the &#8216;current&#8217; one.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>flags</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument determines the default behavior of the context. Normally, use 0. This will result in a context that can not be reentered with a captured continuation. When you are prepared to handle reentries, include<CODE>SCM_F_DYNWIND_REWINDABLE</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>flags</VAR>.</P>
<P>Being prepared for reentry means that the effects of unwind handlers can be undone on reentry. In the example above, we want to prevent a memory leak on non-local exit and thus register an unwind handler that frees the memory. But once the memory is freed, we can not get it back on reentry. Thus reentry can not be allowed.</P>
<P>The consequence is that continuations become less useful when non-reentrant contexts are captured, but you don&#8217;t need to worry about that too much.</P>
<P>The context is ended either implicitly when a non-local exit happens, or explicitly with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_dynwind_end</CODE>. You must make sure that a dynwind context is indeed ended properly. If you fail to call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_dynwind_end</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for each<CODE>scm_dynwind_begin</CODE>, the behavior is undefined.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fdynwind_005fend></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_dynwind_end</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>End the current dynamic context explicitly and make the previous one current.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005ft_005fwind_005fflags></A>C Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_t_wind_flags</STRONG></DT>
<DD>
<P>This is an enumeration of several flags that modify the behavior of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_dynwind_unwind_handler</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_dynwind_rewind_handler</CODE>. The flags are listed in the following table.</P>
<DL compact>
<DT><CODE>SCM_F_WIND_EXPLICITLY</CODE></DT>
<DD><A name=index-SCM_005fF_005fWIND_005fEXPLICITLY></A>
<P>The registered action is also carried out when the dynwind context is entered or left locally.</P></DD></DL></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fdynwind_005funwind_005fhandler></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_dynwind_unwind_handler</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(void (*func)(void *), void *data, scm_t_wind_flags flags)</EM></DT>
<DT><A name=index-scm_005fdynwind_005funwind_005fhandler_005fwith_005fscm></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_dynwind_unwind_handler_with_scm</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(void (*func)(SCM), SCM data, scm_t_wind_flags flags)</EM></DT>
<DD>
<P>Arranges for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>func</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to be called with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>data</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as its arguments when the current context ends implicitly. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>flags</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>contains<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_F_WIND_EXPLICITLY</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>func</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is also called when the context ends explicitly with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_dynwind_end</CODE>.</P>
<P>The function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_dynwind_unwind_handler_with_scm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>takes care that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>data</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is protected from garbage collection.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fdynwind_005frewind_005fhandler></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_dynwind_rewind_handler</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(void (*func)(void *), void *data, scm_t_wind_flags flags)</EM></DT>
<DT><A name=index-scm_005fdynwind_005frewind_005fhandler_005fwith_005fscm></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_dynwind_rewind_handler_with_scm</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(void (*func)(SCM), SCM data, scm_t_wind_flags flags)</EM></DT>
<DD>
<P>Arrange for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>func</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to be called with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>data</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as its argument when the current context is restarted by rewinding the stack. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>flags</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>contains<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_F_WIND_EXPLICITLY</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>func</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called immediately as well.</P>
<P>The function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_dynwind_rewind_handler_with_scm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>takes care that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>data</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is protected from garbage collection.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fdynwind_005ffree></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_dynwind_free</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(void *mem)</EM></DT>
<DD>
<P>Arrange for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mem</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to be freed automatically whenever the current context is exited, whether normally or non-locally.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_dynwind_free (mem)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an equivalent shorthand for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_dynwind_unwind_handler (free, mem, SCM_F_WIND_EXPLICITLY)</CODE>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Handling-Errors></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Continuation-Barriers" rel=next>Continuation Barriers</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Dynamic-Wind" rel=prev>Dynamic Wind</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Control-Mechanisms" rel=up>Control Mechanisms</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=How-to-Handle-Errors></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.13.11 How to Handle Errors</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Error handling is based on<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>throw</CODE>. Errors are always thrown with a<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and four arguments:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI><VAR>key</VAR>: a symbol which indicates the type of error. The symbols used by libguile are listed below.</LI>
<LI><VAR>subr</VAR>: the name of the procedure from which the error is thrown, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</LI>
<LI><VAR>message</VAR>: a string (possibly language and system dependent) describing the error. The tokens<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~A</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~S</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be embedded within the message: they will be replaced with members of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>args</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>list when the message is printed.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~A</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>indicates an argument printed using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>display</CODE>, while<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~S</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>indicates an argument printed using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>message</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can also be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, to allow it to be derived from the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>by the error handler (may be useful if the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is to be thrown from both C and Scheme).</LI>
<LI><VAR>args</VAR>: a list of arguments to be used to expand<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~A</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~S</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>tokens in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>message</VAR>. Can also be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if no arguments are required.</LI>
<LI><VAR>rest</VAR>: a list of any additional objects required. e.g., when the key is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>'system-error</CODE>, this contains the C errno value. Can also be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if no additional objects are required.</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In addition to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>throw</CODE>, the following Scheme facilities are available:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-display_002derror></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>display-error</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>frame port subr message args rest</EM></DT>
<DT><A name=index-scm_005fdisplay_005ferror></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_display_error</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(frame, port, subr, message, args, rest)</EM></DT>
<DD>
<P>Display an error message to the output port<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>frame</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the frame in which the error occurred,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>subr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the name of the procedure in which the error occurred and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>message</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the actual error message, which may contain formatting instructions. These will format the arguments in the list<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>args</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>accordingly.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rest</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is currently ignored.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following are the error keys defined by libguile and the situations in which they are used:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI><A name=index-error_002dsignal></A><SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>error-signal</CODE>: thrown after receiving an unhandled fatal signal such as SIGSEGV, SIGBUS, SIGFPE etc. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rest</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument in the throw contains the coded signal number (at present this is not the same as the usual Unix signal number).</LI>
<LI><A name=index-system_002derror></A><SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>system-error</CODE>: thrown after the operating system indicates an error condition. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rest</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument in the throw contains the errno value.</LI>
<LI><A name=index-numerical_002doverflow></A><SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>numerical-overflow</CODE>: numerical overflow.</LI>
<LI><A name=index-out_002dof_002drange></A><SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>out-of-range</CODE>: the arguments to a procedure do not fall within the accepted domain.</LI>
<LI><A name=index-wrong_002dtype_002darg></A><SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>wrong-type-arg</CODE>: an argument to a procedure has the wrong type.</LI>
<LI><A name=index-wrong_002dnumber_002dof_002dargs></A><SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>wrong-number-of-args</CODE>: a procedure was called with the wrong number of arguments.</LI>
<LI><A name=index-memory_002dallocation_002derror></A><SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>memory-allocation-error</CODE>: memory allocation error.</LI>
<LI><A name=index-stack_002doverflow></A><SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stack-overflow</CODE>: stack overflow error.</LI>
<LI><A name=index-regular_002dexpression_002dsyntax></A><SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>regular-expression-syntax</CODE>: errors generated by the regular expression library.</LI>
<LI><A name=index-misc_002derror></A><SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>misc-error</CODE>: other errors.</LI></UL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=C-Support></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.13.11.1 C Support</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In the following C functions,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>SUBR</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>MESSAGE</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameters can be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to give the effect of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>described above.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005ferror></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_error</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR>, char *<VAR>subr</VAR>, char *<VAR>message</VAR>, SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>args</VAR>, SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rest</VAR>)</EM></DT>
<DD>
<P>Throw an error, as per<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm-error</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Error-Reporting">Error Reporting</A>).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fsyserror></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_syserror</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(char *<VAR>subr</VAR>)</EM></DT>
<DT><A name=index-scm_005fsyserror_005fmsg></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_syserror_msg</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(char *<VAR>subr</VAR>, char *<VAR>message</VAR>, SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>args</VAR>)</EM></DT>
<DD>
<P>Throw an error with key<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>system-error</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and supply<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>errno</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rest</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument. For<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_syserror</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>the message is generated using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strerror</CODE>.</P>
<P>Care should be taken that any code in between the failing operation and the call to these routines doesn&#8217;t change<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>errno</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fnum_005foverflow></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_num_overflow</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(char *<VAR>subr</VAR>)</EM></DT>
<DT><A name=index-scm_005fout_005fof_005frange></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_out_of_range</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(char *<VAR>subr</VAR>, SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bad_value</VAR>)</EM></DT>
<DT><A name=index-scm_005fwrong_005fnum_005fargs></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_wrong_num_args</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR>)</EM></DT>
<DT><A name=index-scm_005fwrong_005ftype_005farg></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_wrong_type_arg</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(char *<VAR>subr</VAR>, int<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>argnum</VAR>, SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bad_value</VAR>)</EM></DT>
<DT><A name=index-scm_005fwrong_005ftype_005farg_005fmsg></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_wrong_type_arg_msg</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(char *<VAR>subr</VAR>, int<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>argnum</VAR>, SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bad_value</VAR>, const char *<VAR>expected</VAR>)</EM></DT>
<DT><A name=index-scm_005fmemory_005ferror></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_memory_error</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(char *<VAR>subr</VAR>)</EM></DT>
<DT><A name=index-scm_005fmisc_005ferror></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_misc_error</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(const char *<VAR>subr</VAR>, const char *<VAR>message</VAR>, SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>args</VAR>)</EM></DT>
<DD>
<P>Throw an error with the various keys described above.</P>
<P>In<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_wrong_num_args</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be a Scheme symbol which is the name of the procedure incorrectly invoked. The other routines take the name of the invoked procedure as a C string.</P>
<P>In<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_wrong_type_arg_msg</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expected</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a C string describing the type of argument that was expected.</P>
<P>In<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_misc_error</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>message</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the error message string, possibly containing<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>simple-format</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>escapes (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Writing">Writing</A>), and the corresponding arguments in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>args</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>list.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Signalling-Type-Errors></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.13.11.2 Signalling Type Errors</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Every function visible at the Scheme level should aggressively check the types of its arguments, to avoid misinterpreting a value, and perhaps causing a segmentation fault. Guile provides some macros to make this easier.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fASSERT></A>Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_ASSERT</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(int<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>test</VAR>, SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR>, unsigned int<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>position</VAR>, const char *<VAR>subr</VAR>)</EM></DT>
<DT><A name=index-SCM_005fASSERT_005fTYPE></A>Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_ASSERT_TYPE</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(int<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>test</VAR>, SCM<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR>, unsigned int<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>position</VAR>, const char *<VAR>subr</VAR>, const char *<VAR>expected</VAR>)</EM></DT>
<DD>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>test</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is zero, signal a &#8220;wrong type argument&#8221; error, attributed to the subroutine named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>subr</VAR>, operating on the value<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR>, which is the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>position</VAR>&#8217;th argument of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>subr</VAR>.</P>
<P>In<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_ASSERT_TYPE</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expected</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a C string describing the type of argument that was expected.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fARG1></A>Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_ARG1</STRONG></DT>
<DT><A name=index-SCM_005fARG2></A>Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_ARG2</STRONG></DT>
<DT><A name=index-SCM_005fARG3></A>Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_ARG3</STRONG></DT>
<DT><A name=index-SCM_005fARG4></A>Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_ARG4</STRONG></DT>
<DT><A name=index-SCM_005fARG5></A>Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_ARG5</STRONG></DT>
<DT><A name=index-SCM_005fARG6></A>Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_ARG6</STRONG></DT>
<DT><A name=index-SCM_005fARG7></A>Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_ARG7</STRONG></DT>
<DD>
<P>One of the above values can be used for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>position</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to indicate the number of the argument of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>subr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>which is being checked. Alternatively, a positive integer number can be used, which allows to check arguments after the seventh. However, for parameter numbers up to seven it is preferable to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_ARGN</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead of the corresponding raw number, since it will make the code easier to understand.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fARGn></A>Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_ARGn</STRONG></DT>
<DD>
<P>Passing a value of zero or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_ARGn</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>position</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>allows to leave it unspecified which argument&#8217;s type is incorrect. Again,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_ARGn</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be preferred over a raw zero constant.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Continuation-Barriers></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Handling-Errors" rel=prev>Handling Errors</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Control-Mechanisms" rel=up>Control Mechanisms</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Continuation-Barriers-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.13.12 Continuation Barriers</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The non-local flow of control caused by continuations might sometimes not be wanted. You can use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>with-continuation-barrier</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to erect fences that continuations can not pass.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-with_002dcontinuation_002dbarrier></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>with-continuation-barrier</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc</EM></DT>
<DT><A name=index-scm_005fwith_005fcontinuation_005fbarrier></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_with_continuation_barrier</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(proc)</EM></DT>
<DD>
<P>Call<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and return its result. Do not allow the invocation of continuations that would leave or enter the dynamic extent of the call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>with-continuation-barrier</CODE>. Such an attempt causes an error to be signaled.</P>
<P>Throws (such as errors) that are not caught from within<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are caught by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>with-continuation-barrier</CODE>. In that case, a short message is printed to the current error port and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned.</P>
<P>Thus,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>with-continuation-barrier</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns exactly once.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fwith_005fcontinuation_005fbarrier></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_with_continuation_barrier</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(void *(*func) (void *), void *data)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_with_continuation_barrier</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>but call<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>func</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>on<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>data</VAR>. When an error is caught,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned.</P></DD></DL>