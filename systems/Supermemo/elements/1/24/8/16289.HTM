<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>6.14 Input and Output</H3>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Ports">Ports</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>The idea of the port abstraction.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Reading">Reading</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Procedures for reading from a port.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#Writing">Writing</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Procedures for writing to a port.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#Closing">Closing</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Procedures to close a port.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#Random-Access">Random Access</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Moving around a random access port.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=6 href="https://www.gnu.org/software/guile/manual/guile.html#Line_002fDelimited">Line/Delimited</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Read and write lines or delimited text.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=7 href="https://www.gnu.org/software/guile/manual/guile.html#Block-Reading-and-Writing">Block Reading and Writing</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Reading and writing blocks of text.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=8 href="https://www.gnu.org/software/guile/manual/guile.html#Default-Ports">Default Ports</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Defaults for input, output and errors.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=9 href="https://www.gnu.org/software/guile/manual/guile.html#Port-Types">Port Types</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Types of port and how to make them.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-I_002fO-Ports">R6RS I/O Ports</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>The R6RS port API.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#I_002fO-Extensions">I/O Extensions</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Using and extending ports in C.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#BOM-Handling">BOM Handling</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Handling of Unicode byte order marks.</TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Ports></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Reading" rel=next>Reading</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Input-and-Output" rel=up>Input and Output</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Ports-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.14.1 Ports</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Port></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Sequential input/output in Scheme is represented by operations on a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM>. This chapter explains the operations that Guile provides for working with ports.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Ports are created by opening, for instance<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>open-file</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for a file (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#File-Ports">File Ports</A>). Characters can be read from an input port and written to an output port, or both on an input/output port. A port can be closed (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Closing">Closing</A>) when no longer required, after which any attempt to read or write is an error.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The formal definition of a port is very generic: an input port is simply &#8220;an object which can deliver characters on demand,&#8221; and an output port is &#8220;an object which can accept characters.&#8221; Because this definition is so loose, it is easy to write functions that simulate ports in software.<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>Soft ports</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>string ports</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>are two interesting and powerful examples of this technique. (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Soft-Ports">Soft Ports</A>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#String-Ports">String Ports</A>.)</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Ports are garbage collected in the usual way (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Memory-Management">Memory Management</A>), and will be closed at that time if not already closed. In this case any errors occurring in the close will not be reported. Usually a program will want to explicitly close so as to be sure all its operations have been successful. Of course if a program has abandoned something due to an error or other condition then closing problems are probably not of interest.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">It is strongly recommended that file ports be closed explicitly when no longer required. Most systems have limits on how many files can be open, both on a per-process and a system-wide basis. A program that uses many files should take care not to hit those limits. The same applies to similar system resources such as pipes and sockets.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that automatic garbage collection is triggered only by memory consumption, not by file or other resource usage, so a program cannot rely on that to keep it away from system limits. An explicit call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can of course be relied on to pick up unreferenced ports. If program flow makes it hard to be certain when to close then this may be an acceptable way to control resource usage.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">All file access uses the &#8220;LFS&#8221; large file support functions when available, so files bigger than 2 Gbytes (<EM>2^31</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes) can be read and written on a 32-bit system.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Each port has an associated character encoding that controls how bytes read from the port are converted to characters and string and controls how characters and strings written to the port are converted to bytes. When ports are created, they inherit their character encoding from the current locale, but, that can be modified after the port is created.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Currently, the ports only work with<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>non-modal</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>encodings. Most encodings are non-modal, meaning that the conversion of bytes to a string doesn&#8217;t depend on its context: the same byte sequence will always return the same string. A couple of modal encodings are in common use, like ISO-2022-JP and ISO-2022-KR, and they are not yet supported.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Each port also has an associated conversion strategy: what to do when a Guile character can&#8217;t be converted to the port&#8217;s encoded character representation for output. There are three possible strategies: to raise an error, to replace the character with a hex escape, or to replace the character with a substitute character.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-input_002dport_003f-3></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-input_002dport_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>input-port?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-scm_005finput_005fport_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_input_port_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an input port, otherwise return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>. Any object satisfying this predicate also satisfies<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>port?</CODE>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-output_002dport_003f-3></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-output_002dport_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>output-port?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-scm_005foutput_005fport_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_output_port_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an output port, otherwise return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>. Any object satisfying this predicate also satisfies<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>port?</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-port_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>port?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-scm_005fport_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_port_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x)</EM></DT>
<DD>
<P>Return a boolean indicating whether<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a port. Equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(or (input-port?<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>) (output-port?<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>))</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-set_002dport_002dencoding_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-port-encoding!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port enc</EM></DT>
<DT><A name=index-scm_005fset_005fport_005fencoding_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_set_port_encoding_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port, enc)</EM></DT>
<DD>
<P>Sets the character encoding that will be used to interpret all port I/O.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>enc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a string containing the name of an encoding. Valid encoding names are those<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.iana.org/assignments/character-sets">defined by IANA</A>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0025default_002dport_002dencoding></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>%default-port-encoding</STRONG></DT>
<DD>
<P>A fluid containing<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or the name of the encoding to be used by default for newly created ports (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Fluids-and-Dynamic-States">Fluids and Dynamic States</A>). The value<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"ISO-8859-1"</CODE>.</P>
<P>New ports are created with the encoding appropriate for the current locale if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setlocale</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>has been called or the value specified by this fluid otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-port_002dencoding></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>port-encoding</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DT><A name=index-scm_005fport_005fencoding></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_port_encoding</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port)</EM></DT>
<DD>
<P>Returns, as a string, the character encoding that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>uses to interpret its input and output. The value<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"ISO-8859-1"</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-set_002dport_002dconversion_002dstrategy_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-port-conversion-strategy!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port sym</EM></DT>
<DT><A name=index-scm_005fset_005fport_005fconversion_005fstrategy_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_set_port_conversion_strategy_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port, sym)</EM></DT>
<DD>
<P>Sets the behavior of the interpreter when outputting a character that is not representable in the port&#8217;s current encoding.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sym</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be either<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>'error</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>'substitute</CODE>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>'escape</CODE>. If it is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>'error</CODE>, an error will be thrown when an nonconvertible character is encountered. If it is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>'substitute</CODE>, then nonconvertible characters will be replaced with approximate characters, or with question marks if no approximately correct character is available. If it is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>'escape</CODE>, it will appear as a hex escape when output.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an open port, the conversion error behavior is set for that port. If it is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, it is set as the default behavior for any future ports that get created in this thread.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-port_002dconversion_002dstrategy></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>port-conversion-strategy</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DT><A name=index-scm_005fport_005fconversion_005fstrategy></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_port_conversion_strategy</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port)</EM></DT>
<DD>
<P>Returns the behavior of the port when outputting a character that is not representable in the port&#8217;s current encoding. It returns the symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>error</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if unrepresentable characters should cause exceptions,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>substitute</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the port should try to replace unrepresentable characters with question marks or approximate characters, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>escape</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if unrepresentable characters should be converted to string escapes.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, then the current default behavior will be returned. New ports will have this default behavior when they are created.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0025default_002dport_002dconversion_002dstrategy></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>%default-port-conversion-strategy</STRONG></DT>
<DD>
<P>The fluid that defines the conversion strategy for newly created ports, and for other conversion routines such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_to_stringn</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_from_stringn</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string-&gt;pointer</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>pointer-&gt;string</CODE>.</P>
<P>Its value must be one of the symbols described above, with the same semantics:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>'error</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>'substitute</CODE>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>'escape</CODE>.</P>
<P>When Guile starts, its value is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>'substitute</CODE>.</P>
<P>Note that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(set-port-conversion-strategy! #f<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sym</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(fluid-set! %default-port-conversion-strategy<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sym</VAR>)</CODE>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Reading></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Writing" rel=next>Writing</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Ports" rel=prev>Ports</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Input-and-Output" rel=up>Input and Output</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Reading-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.14.2 Reading</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Reading></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">[Generic procedures for reading from ports.]</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">These procedures pertain to reading characters and strings from ports. To read general S-expressions from ports, See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Scheme-Read">Scheme Read</A>.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-eof_002dobject_003f-3></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-End-of-file-object></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-eof_002dobject_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>eof-object?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-scm_005feof_005fobject_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_eof_object_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an end-of-file object; otherwise return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-char_002dready_003f-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-char_002dready_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>char-ready?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[port]</EM></DT>
<DT><A name=index-scm_005fchar_005fready_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_char_ready_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if a character is ready on input<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char-ready?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>then the next<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read-char</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>operation on<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is guaranteed not to hang. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a file port at end of file then<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char-ready?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE>.</P>
<P><CODE>char-ready?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>exists to make it possible for a program to accept characters from interactive ports without getting stuck waiting for input. Any input editors associated with such ports must make sure that characters whose existence has been asserted by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char-ready?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>cannot be rubbed out. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char-ready?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>were to return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>at end of file, a port at end of file would be indistinguishable from an interactive port that has no ready characters.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-read_002dchar-3></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-read_002dchar></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>read-char</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[port]</EM></DT>
<DT><A name=index-scm_005fread_005fchar></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_read_char</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port)</EM></DT>
<DD>
<P>Return the next character available from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>, updating<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to point to the following character. If no more characters are available, the end-of-file object is returned.</P>
<P>When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>&#8217;s data cannot be decoded according to its character encoding, a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>decoding-error</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is raised and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>points past the erroneous byte sequence.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fread></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>size_t</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_read</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM port, void *buffer, size_t size)</EM></DT>
<DD>
<P>Read up to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and store them in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>buffer</VAR>. The return value is the number of bytes actually read, which can be less than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>if end-of-file has been reached.</P>
<P>Note that this function does not update<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>port-line</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>port-column</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>below.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-peek_002dchar-3></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-peek_002dchar></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>peek-char</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[port]</EM></DT>
<DT><A name=index-scm_005fpeek_005fchar></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_peek_char</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port)</EM></DT>
<DD>
<P>Return the next character available from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>without</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>updating<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to point to the following character. If no more characters are available, the end-of-file object is returned.</P>
<P>The value returned by a call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>peek-char</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the same as the value that would have been returned by a call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read-char</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on the same port. The only difference is that the very next call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read-char</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>peek-char</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>will return the value returned by the preceding call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>peek-char</CODE>. In particular, a call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>peek-char</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on an interactive port will hang waiting for input whenever a call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read-char</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>would have hung.</P>
<P>As for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read-char</CODE>, a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>decoding-error</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be raised if such a situation occurs. However, unlike with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read-char</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>still points at the beginning of the erroneous byte sequence when the error is raised.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-unread_002dchar></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>unread-char</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>cobj [port]</EM></DT>
<DT><A name=index-scm_005funread_005fchar></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_unread_char</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(cobj, port)</EM></DT>
<DD>
<P>Place character<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cobj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>so that it will be read by the next read operation. If called multiple times, the unread characters will be read again in last-in first-out order. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not supplied, the current input port is used.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-unread_002dstring></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>unread-string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str port</EM></DT>
<DT><A name=index-scm_005funread_005fstring></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_unread_string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str, port)</EM></DT>
<DD>
<P>Place the string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>so that its characters will be read from left-to-right as the next characters from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>during subsequent read operations. If called multiple times, the unread characters will be read again in last-in first-out order. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not supplied, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-input-port</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-drain_002dinput></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>drain-input</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DT><A name=index-scm_005fdrain_005finput></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_drain_input</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port)</EM></DT>
<DD>
<P>This procedure clears a port&#8217;s input buffers, similar to the way that force-output clears the output buffer. The contents of the buffers are returned as a single string, e.g.,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(define p (open-input-file ...))
(drain-input p) =&gt; empty string, nothing buffered yet.
(unread-char (read-char p) p)
(drain-input p) =&gt; initial chars from p, up to the buffer size.
</PRE></DIV>
<P>Draining the buffers may be useful for cleanly finishing buffered I/O so that the file descriptor can be used directly for further input.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-port_002dcolumn></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>port-column</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DT><A name=index-port_002dline></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>port-line</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DT><A name=index-scm_005fport_005fcolumn></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_port_column</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port)</EM></DT>
<DT><A name=index-scm_005fport_005fline></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_port_line</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port)</EM></DT>
<DD>
<P>Return the current column number or line number of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>. If the number is unknown, the result is #f. Otherwise, the result is a 0-origin integer - i.e. the first character of the first line is line 0, column 0. (However, when you display a file position, for example in an error message, we recommend you add 1 to get 1-origin integers. This is because lines and column numbers traditionally start with 1, and that is what non-programmers will find most natural.)</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-set_002dport_002dcolumn_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-port-column!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port column</EM></DT>
<DT><A name=index-set_002dport_002dline_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-port-line!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port line</EM></DT>
<DT><A name=index-scm_005fset_005fport_005fcolumn_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_set_port_column_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port, column)</EM></DT>
<DT><A name=index-scm_005fset_005fport_005fline_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_set_port_line_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port, line)</EM></DT>
<DD>
<P>Set the current column or line number of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Writing></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Closing" rel=next>Closing</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Reading" rel=prev>Reading</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Input-and-Output" rel=up>Input and Output</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Writing-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.14.3 Writing</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Writing></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">[Generic procedures for writing to ports.]</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">These procedures are for writing characters and strings to ports. For more information on writing arbitrary Scheme objects to ports, See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Scheme-Write">Scheme Write</A>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-get_002dprint_002dstate></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>get-print-state</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DT><A name=index-scm_005fget_005fprint_005fstate></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_get_print_state</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port)</EM></DT>
<DD>
<P>Return the print state of the port<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>has no associated print state,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-newline-3></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-newline></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>newline</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[port]</EM></DT>
<DT><A name=index-scm_005fnewline></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_newline</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port)</EM></DT>
<DD>
<P>Send a newline to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is omitted, send to the current output port.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-port_002dwith_002dprint_002dstate></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>port-with-print-state</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port [pstate]</EM></DT>
<DT><A name=index-scm_005fport_005fwith_005fprint_005fstate></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_port_with_print_state</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port, pstate)</EM></DT>
<DD>
<P>Create a new port which behaves like<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>, but with an included print state<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pstate</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pstate</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is optional. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pstate</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>isn&#8217;t supplied and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>already has a print state, the old print state is reused.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-simple_002dformat></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>simple-format</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>destination message . args</EM></DT>
<DT><A name=index-scm_005fsimple_005fformat></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_simple_format</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(destination, message, args)</EM></DT>
<DD>
<P>Write<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>message</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>destination</VAR>, defaulting to the current output port.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>message</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can contain<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~A</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(was<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%s</CODE>) and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~S</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(was<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%S</CODE>) escapes. When printed, the escapes are replaced with corresponding members of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>args</VAR>:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~A</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>formats using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>display</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~S</CODE>formats using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write</CODE>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>destination</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE>, then use the current output port, if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>destination</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, then return a string containing the formatted text. Does not add a trailing newline.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-write_002dchar-3></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-write_002dchar></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>write-char</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>chr [port]</EM></DT>
<DT><A name=index-scm_005fwrite_005fchar></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_write_char</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(chr, port)</EM></DT>
<DD>
<P>Send character<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>chr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fwrite></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_write</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM port, const void *buffer, size_t size)</EM></DT>
<DD>
<P>Write<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>buffer</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>.</P>
<P>Note that this function does not update<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>port-line</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>port-column</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Reading">Reading</A>).</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-fflush></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-force_002doutput></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>force-output</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[port]</EM></DT>
<DT><A name=index-scm_005fforce_005foutput></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_force_output</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port)</EM></DT>
<DD>
<P>Flush the specified output port, or the current output port if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is omitted. The current output buffer contents are passed to the underlying port implementation (e.g., in the case of fports, the data will be written to the file and the output buffer will be cleared.) It has no effect on an unbuffered port.</P>
<P>The return value is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-flush_002dall_002dports></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>flush-all-ports</STRONG></DT>
<DT><A name=index-scm_005fflush_005fall_005fports></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_flush_all_ports</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Equivalent to calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>force-output</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on all open output ports. The return value is unspecified.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Closing></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Random-Access" rel=next>Random Access</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Writing" rel=prev>Writing</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Input-and-Output" rel=up>Input and Output</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Closing-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.14.4 Closing</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Closing-ports></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Port_002c-close></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-close_002dport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>close-port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DT><A name=index-scm_005fclose_005fport></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_close_port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port)</EM></DT>
<DD>
<P>Close the specified port object. Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if it successfully closes a port or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if it was already closed. An exception may be raised if an error occurs, for example when flushing buffered output. See also<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Ports-and-File-Descriptors">close</A>, for a procedure which can close file descriptors.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-close_002dinput_002dport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>close-input-port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DT><A name=index-close_002doutput_002dport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>close-output-port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DT><A name=index-scm_005fclose_005finput_005fport></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_close_input_port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port)</EM></DT>
<DT><A name=index-scm_005fclose_005foutput_005fport></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_close_output_port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port)</EM></DT>
<DD><A name=index-close_002dinput_002dport-2></A><A name=index-close_002doutput_002dport-2></A>
<P>Close the specified input or output<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>. An exception may be raised if an error occurs while closing. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is already closed, nothing is done. The return value is unspecified.</P>
<P>See also<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Ports-and-File-Descriptors">close</A>, for a procedure which can close file descriptors.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-port_002dclosed_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>port-closed?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DT><A name=index-scm_005fport_005fclosed_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_port_closed_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is closed or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if it is open.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Random-Access></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Line_002fDelimited" rel=next>Line/Delimited</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Closing" rel=prev>Closing</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Input-and-Output" rel=up>Input and Output</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Random-Access-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.14.5 Random Access</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Random-access_002c-ports></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Port_002c-random-access></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-seek></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>seek</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fd_port offset whence</EM></DT>
<DT><A name=index-scm_005fseek></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_seek</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(fd_port, offset, whence)</EM></DT>
<DD>
<P>Sets the current position of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fd_port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the integer<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>offset</VAR>, which is interpreted according to the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>whence</VAR>.</P>
<P>One of the following variables should be supplied for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>whence</VAR>:</P>
<DL>
<DT><A name=index-SEEK_005fSET></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SEEK_SET</STRONG></DT>
<DD>
<P>Seek from the beginning of the file.</P></DD></DL>
<DL>
<DT><A name=index-SEEK_005fCUR></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SEEK_CUR</STRONG></DT>
<DD>
<P>Seek from the current position.</P></DD></DL>
<DL>
<DT><A name=index-SEEK_005fEND></A>Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SEEK_END</STRONG></DT>
<DD>
<P>Seek from the end of the file.</P></DD></DL>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fd_port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a file descriptor, the underlying system call is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lseek</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be a string port.</P>
<P>The value returned is the new position in the file. This means that the current position of a port can be obtained using:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(seek port 0 SEEK_CUR)
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-ftell></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>ftell</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fd_port</EM></DT>
<DT><A name=index-scm_005fftell></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_ftell</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(fd_port)</EM></DT>
<DD>
<P>Return an integer representing the current position of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fd_port</VAR>, measured from the beginning. Equivalent to:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(seek port 0 SEEK_CUR)
</PRE></DIV></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-truncate-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-ftruncate></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-truncate_002dfile></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>truncate-file</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>file [length]</EM></DT>
<DT><A name=index-scm_005ftruncate_005ffile></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_truncate_file</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(file, length)</EM></DT>
<DD>
<P>Truncate<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>length</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be a filename string, a port object, or an integer file descriptor. The return value is unspecified.</P>
<P>For a port or file descriptor<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>length</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be omitted, in which case the file is truncated at the current position (per<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ftell</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>above).</P>
<P>On most systems a file can be extended by giving a length greater than the current size, but this is not mandatory in the POSIX standard.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Line_002fDelimited></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Block-Reading-and-Writing" rel=next>Block Reading and Writing</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Random-Access" rel=prev>Random Access</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Input-and-Output" rel=up>Input and Output</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Line-Oriented-and-Delimited-Text></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.14.6 Line Oriented and Delimited Text</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Line-input_002foutput></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Port_002c-line-input_002foutput></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The delimited-I/O module can be accessed with:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(use-modules (ice-9 rdelim))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">It can be used to read or write lines of text, or read text delimited by a specified set of characters. It&#8217;s similar to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(scsh rdelim)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module from guile-scsh, but does not use multiple values or character sets and has an extra procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write-line</CODE>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-read_002dline></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>read-line</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[port] [handle-delim]</EM></DT>
<DD>
<P>Return a line of text from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>if specified, otherwise from the value returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(current-input-port)</CODE>. Under Unix, a line of text is terminated by the first end-of-line character or by end-of-file.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handle-delim</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified, it should be one of the following symbols:</P>
<DL compact>
<DT><CODE>trim</CODE></DT>
<DD>
<P>Discard the terminating delimiter. This is the default, but it will be impossible to tell whether the read terminated with a delimiter or end-of-file.</P></DD>
<DT><CODE>concat</CODE></DT>
<DD>
<P>Append the terminating delimiter (if any) to the returned string.</P></DD>
<DT><CODE>peek</CODE></DT>
<DD>
<P>Push the terminating delimiter (if any) back on to the port.</P></DD>
<DT><CODE>split</CODE></DT>
<DD>
<P>Return a pair containing the string read from the port and the terminating delimiter or end-of-file object.</P></DD></DL>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read-char</CODE>, this procedure can throw to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>decoding-error</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Reading"><CODE>read-char</CODE></A>).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-read_002dline_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>read-line!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>buf [port]</EM></DT>
<DD>
<P>Read a line of text into the supplied string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>buf</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and return the number of characters added to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>buf</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>buf</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is filled, then<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned. Read from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>if specified, otherwise from the value returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(current-input-port)</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-read_002ddelimited></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>read-delimited</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>delims [port] [handle-delim]</EM></DT>
<DD>
<P>Read text until one of the characters in the string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>delims</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is found or end-of-file is reached. Read from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>if supplied, otherwise from the value returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(current-input-port)</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handle-delim</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>takes the same values as described for<CODE>read-line</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-read_002ddelimited_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>read-delimited!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>delims buf [port] [handle-delim] [start] [end]</EM></DT>
<DD>
<P>Read text into the supplied string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>buf</VAR>.</P>
<P>If a delimiter was found, return the number of characters written, except if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handle-delim</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>split</CODE>, in which case the return value is a pair, as noted above.</P>
<P>As a special case, if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>was already at end-of-stream, the EOF object is returned. Also, if no characters were written because the buffer was full,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned.</P>
<P>It&#8217;s something of a wacky interface, to be honest.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-write_002dline></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>write-line</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj [port]</EM></DT>
<DT><A name=index-scm_005fwrite_005fline></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_write_line</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj, port)</EM></DT>
<DD>
<P>Display<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and a newline character to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not specified,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(current-output-port)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used. This function is equivalent to:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(display obj [port])
(newline [port])
</PRE></DIV></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In the past, Guile did not have a procedure that would just read out all of the characters from a port. As a workaround, many people just called<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read-delimited</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with no delimiters, knowing that would produce the behavior they wanted. This prompted Guile developers to add some routines that would read all characters from a port. So it is that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 rdelim)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is also the home for procedures that can reading undelimited text:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-read_002dstring></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>read-string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[port] [count]</EM></DT>
<DD>
<P>Read all of the characters out of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and return them as a string. If the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is present, treat it as a limit to the number of characters to read.</P>
<P>By default, read from the current input port, with no size limit on the result. This procedure always returns a string, even if no characters were read.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-read_002dstring_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>read-string!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>buf [port] [start] [end]</EM></DT>
<DD>
<P>Fill<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>buf</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with characters read from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>, defaulting to the current input port. Return the number of characters read.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are specified, store data only into the substring of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bounded by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(which default to the beginning and end of the string, respectively).</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Some of the aforementioned I/O functions rely on the following C primitives. These will mainly be of interest to people hacking Guile internals.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0025read_002ddelimited_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>%read-delimited!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>delims str gobble [port [start [end]]]</EM></DT>
<DT><A name=index-scm_005fread_005fdelimited_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_read_delimited_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(delims, str, gobble, port, start, end)</EM></DT>
<DD>
<P>Read characters from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>into<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>until one of the characters in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>delims</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>string is encountered. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>gobble</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true, discard the delimiter character; otherwise, leave it in the input stream for the next read. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not specified, use the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(current-input-port)</CODE>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are specified, store data only into the substring of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bounded by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(which default to the beginning and end of the string, respectively).</P>
<P>Return a pair consisting of the delimiter that terminated the string and the number of characters read. If reading stopped at the end of file, the delimiter returned is the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>eof-object</VAR>; if the string was filled without encountering a delimiter, this value is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0025read_002dline></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>%read-line</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[port]</EM></DT>
<DT><A name=index-scm_005fread_005fline></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_read_line</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port)</EM></DT>
<DD>
<P>Read a newline-terminated line from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>, allocating storage as necessary. The newline terminator (if any) is removed from the string, and a pair consisting of the line and its delimiter is returned. The delimiter may be either a newline or the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>eof-object</VAR>; if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%read-line</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called at the end of file, it returns the pair<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(#&lt;eof&gt; . #&lt;eof&gt;)</CODE>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Block-Reading-and-Writing></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Default-Ports" rel=next>Default Ports</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Line_002fDelimited" rel=prev>Line/Delimited</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Input-and-Output" rel=up>Input and Output</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Block-reading-and-writing></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.14.7 Block reading and writing</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Block-read_002fwrite></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Port_002c-block-read_002fwrite></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The Block-string-I/O module can be accessed with:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(use-modules (ice-9 rw))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">It currently contains procedures that help to implement the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(scsh rw)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module in guile-scsh.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-read_002dstring_0021_002fpartial></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>read-string!/partial</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str [port_or_fdes [start [end]]]</EM></DT>
<DT><A name=index-scm_005fread_005fstring_005fx_005fpartial></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_read_string_x_partial</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str, port_or_fdes, start, end)</EM></DT>
<DD>
<P>Read characters from a port or file descriptor into a string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR>. A port must have an underlying file descriptor &#8212; a so-called fport. This procedure is scsh-compatible and can efficiently read large strings. It will:</P>
<UL>
<LI>attempt to fill the entire string, unless the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and/or<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>arguments are supplied. i.e.,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>defaults to 0 and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>defaults to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(string-length str)</CODE></LI>
<LI>use the current input port if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port_or_fdes</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not supplied.</LI>
<LI>return fewer than the requested number of characters in some cases, e.g., on end of file, if interrupted by a signal, or if not all the characters are immediately available.</LI>
<LI>wait indefinitely for some input if no characters are currently available, unless the port is in non-blocking mode.</LI>
<LI>read characters from the port&#8217;s input buffers if available, instead from the underlying file descriptor.</LI>
<LI>return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if end-of-file is encountered before reading any characters, otherwise return the number of characters read.</LI>
<LI>return 0 if the port is in non-blocking mode and no characters are immediately available.</LI>
<LI>return 0 if the request is for 0 bytes, with no end-of-file check.</LI></UL></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-write_002dstring_002fpartial></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>write-string/partial</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str [port_or_fdes [start [end]]]</EM></DT>
<DT><A name=index-scm_005fwrite_005fstring_005fpartial></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_write_string_partial</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str, port_or_fdes, start, end)</EM></DT>
<DD>
<P>Write characters from a string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to a port or file descriptor. A port must have an underlying file descriptor &#8212; a so-called fport. This procedure is scsh-compatible and can efficiently write large strings. It will:</P>
<UL>
<LI>attempt to write the entire string, unless the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and/or<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>arguments are supplied. i.e.,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>defaults to 0 and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>defaults to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(string-length str)</CODE></LI>
<LI>use the current output port if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port_of_fdes</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not supplied.</LI>
<LI>in the case of a buffered port, store the characters in the port&#8217;s output buffer, if all will fit. If they will not fit then any existing buffered characters will be flushed before attempting to write the new characters directly to the underlying file descriptor. If the port is in non-blocking mode and buffered characters can not be flushed immediately, then an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>EAGAIN</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>system-error exception will be raised (Note: scsh does not support the use of non-blocking buffered ports.)</LI>
<LI>write fewer than the requested number of characters in some cases, e.g., if interrupted by a signal or if not all of the output can be accepted immediately.</LI>
<LI>wait indefinitely for at least one character from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to be accepted by the port, unless the port is in non-blocking mode.</LI>
<LI>return the number of characters accepted by the port.</LI>
<LI>return 0 if the port is in non-blocking mode and can not accept at least one character from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>immediately</LI>
<LI>return 0 immediately if the request size is 0 bytes.</LI></UL></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Default-Ports></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Port-Types" rel=next>Port Types</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Block-Reading-and-Writing" rel=prev>Block Reading and Writing</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Input-and-Output" rel=up>Input and Output</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Default-Ports-for-Input_002c-Output-and-Errors></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.14.8 Default Ports for Input, Output and Errors</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Default-ports></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Port_002c-default></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-current_002dinput_002dport-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-current_002dinput_002dport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>current-input-port</STRONG></DT>
<DT><A name=index-scm_005fcurrent_005finput_005fport></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_current_input_port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD><A name=index-standard-input></A>
<P>Return the current input port. This is the default port used by many input procedures.</P>
<P>Initially this is the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>standard input</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>in Unix and C terminology. When the standard input is a tty the port is unbuffered, otherwise it&#8217;s fully buffered.</P>
<P>Unbuffered input is good if an application runs an interactive subprocess, since any type-ahead input won&#8217;t go into Guile&#8217;s buffer and be unavailable to the subprocess.</P>
<P>Note that Guile buffering is completely separate from the tty &#8220;line discipline&#8221;. In the usual cooked mode on a tty Guile only sees a line of input once the user presses<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT class=key>Return</TT>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-current_002doutput_002dport-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-current_002doutput_002dport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>current-output-port</STRONG></DT>
<DT><A name=index-scm_005fcurrent_005foutput_005fport></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_current_output_port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD><A name=index-standard-output></A>
<P>Return the current output port. This is the default port used by many output procedures.</P>
<P>Initially this is the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>standard output</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>in Unix and C terminology. When the standard output is a tty this port is unbuffered, otherwise it&#8217;s fully buffered.</P>
<P>Unbuffered output to a tty is good for ensuring progress output or a prompt is seen. But an application which always prints whole lines could change to line buffered, or an application with a lot of output could go fully buffered and perhaps make explicit<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>force-output</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Writing">Writing</A>) at selected points.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-current_002derror_002dport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>current-error-port</STRONG></DT>
<DT><A name=index-scm_005fcurrent_005ferror_005fport></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_current_error_port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD><A name=index-standard-error-output></A>
<P>Return the port to which errors and warnings should be sent.</P>
<P>Initially this is the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>standard error</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>in Unix and C terminology. When the standard error is a tty this port is unbuffered, otherwise it&#8217;s fully buffered.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-set_002dcurrent_002dinput_002dport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-current-input-port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DT><A name=index-set_002dcurrent_002doutput_002dport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-current-output-port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DT><A name=index-set_002dcurrent_002derror_002dport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-current-error-port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DT><A name=index-scm_005fset_005fcurrent_005finput_005fport></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_set_current_input_port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port)</EM></DT>
<DT><A name=index-scm_005fset_005fcurrent_005foutput_005fport></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_set_current_output_port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port)</EM></DT>
<DT><A name=index-scm_005fset_005fcurrent_005ferror_005fport></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_set_current_error_port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port)</EM></DT>
<DD>
<P>Change the ports returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-input-port</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-output-port</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-error-port</CODE>, respectively, so that they use the supplied<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>for input or output.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fdynwind_005fcurrent_005finput_005fport></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_dynwind_current_input_port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM port)</EM></DT>
<DT><A name=index-scm_005fdynwind_005fcurrent_005foutput_005fport></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_dynwind_current_output_port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM port)</EM></DT>
<DT><A name=index-scm_005fdynwind_005fcurrent_005ferror_005fport></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_dynwind_current_error_port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM port)</EM></DT>
<DD>
<P>These functions must be used inside a pair of calls to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_dynwind_begin</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_dynwind_end</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Dynamic-Wind">Dynamic Wind</A>). During the dynwind context, the indicated port is set to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>.</P>
<P>More precisely, the current port is swapped with a &#8216;backup&#8217; value whenever the dynwind context is entered or left. The backup value is initialized with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Port-Types></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-I_002fO-Ports" rel=next>R6RS I/O Ports</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Default-Ports" rel=prev>Default Ports</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Input-and-Output" rel=up>Input and Output</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Types-of-Port></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.14.9 Types of Port</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Types-of-ports></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Port_002c-types></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">[Types of port; how to make them.]</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#File-Ports">File Ports</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Ports on an operating system file.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#String-Ports">String Ports</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Ports on a Scheme string.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#Soft-Ports">Soft Ports</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Ports on arbitrary Scheme procedures.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#Void-Ports">Void Ports</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Ports on nothing at all.</TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=File-Ports></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#String-Ports" rel=next>String Ports</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Port-Types" rel=up>Port Types</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=File-Ports-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.14.9.1 File Ports</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-File-port></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Port_002c-file></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following procedures are used to open file ports. See also<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Ports-and-File-Descriptors">open</A>, for an interface to the Unix<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>open</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>system call.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Most systems have limits on how many files can be open, so it&#8217;s strongly recommended that file ports be closed explicitly when no longer required (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Ports">Ports</A>).</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-open_002dfile></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>open-file</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>filename mode [#:guess-encoding=#f] [#:encoding=#f]</EM></DT>
<DT><A name=index-scm_005fopen_005ffile_005fwith_005fencoding></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_open_file_with_encoding</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(filename, mode, guess_encoding, encoding)</EM></DT>
<DT><A name=index-scm_005fopen_005ffile></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_open_file</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(filename, mode)</EM></DT>
<DD>
<P>Open the file whose name is<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>filename</VAR>, and return a port representing that file. The attributes of the port are determined by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mode</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>string. The way in which this is interpreted is similar to C stdio. The first character must be one of the following:</P>
<DL compact>
<DT>&#8216;<SAMP>r</SAMP>&#8217;</DT>
<DD>
<P>Open an existing file for input.</P></DD>
<DT>&#8216;<SAMP>w</SAMP>&#8217;</DT>
<DD>
<P>Open a file for output, creating it if it doesn&#8217;t already exist or removing its contents if it does.</P></DD>
<DT>&#8216;<SAMP>a</SAMP>&#8217;</DT>
<DD>
<P>Open a file for output, creating it if it doesn&#8217;t already exist. All writes to the port will go to the end of the file. The "append mode" can be turned off while the port is in use see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Ports-and-File-Descriptors">fcntl</A></P></DD></DL>
<P>The following additional characters can be appended:</P>
<DL compact>
<DT>&#8216;<SAMP>+</SAMP>&#8217;</DT>
<DD>
<P>Open the port for both input and output. E.g.,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>r+</CODE>: open an existing file for both input and output.</P></DD>
<DT>&#8216;<SAMP>0</SAMP>&#8217;</DT>
<DD>
<P>Create an "unbuffered" port. In this case input and output operations are passed directly to the underlying port implementation without additional buffering. This is likely to slow down I/O operations. The buffering mode can be changed while a port is in use see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Ports-and-File-Descriptors">setvbuf</A></P></DD>
<DT>&#8216;<SAMP>l</SAMP>&#8217;</DT>
<DD>
<P>Add line-buffering to the port. The port output buffer will be automatically flushed whenever a newline character is written.</P></DD>
<DT>&#8216;<SAMP>b</SAMP>&#8217;</DT>
<DD>
<P>Use binary mode, ensuring that each byte in the file will be read as one Scheme character.</P>
<P>To provide this property, the file will be opened with the 8-bit character encoding "ISO-8859-1", ignoring the default port encoding. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Ports">Ports</A>, for more information on port encodings.</P>
<P>Note that while it is possible to read and write binary data as characters or strings, it is usually better to treat bytes as octets, and byte sequences as bytevectors. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Binary-Input">R6RS Binary Input</A>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Binary-Output">R6RS Binary Output</A>, for more.</P>
<P>This option had another historical meaning, for DOS compatibility: in the default (textual) mode, DOS reads a CR-LF sequence as one LF byte. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>b</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>flag prevents this from happening, adding<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>O_BINARY</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the underlying<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>open</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>call. Still, the flag is generally useful because of its port encoding ramifications.</P></DD></DL>
<P>Unless binary mode is requested, the character encoding of the new port is determined as follows: First, if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>guess-encoding</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>file-encoding</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure is used to guess the encoding of the file (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Character-Encoding-of-Source-Files">Character Encoding of Source Files</A>). If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>guess-encoding</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is false or if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>file-encoding</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>fails,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>encoding</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used unless it is also false. As a last resort, the default port encoding is used. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Ports">Ports</A>, for more information on port encodings. It is an error to pass a non-false<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>guess-encoding</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>encoding</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>if binary mode is requested.</P>
<P>If a file cannot be opened with the access requested,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>open-file</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>throws an exception.</P>
<P>When the file is opened, its encoding is set to the current<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%default-port-encoding</CODE>, unless the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>b</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>flag was supplied. Sometimes it is desirable to honor Emacs-style coding declarations in files<A href="https://www.gnu.org/software/guile/manual/guile.html#FOOT13" name=DOCF13><SUP>13</SUP></A>. When that is the case, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>file-encoding</CODE>procedure can be used as follows (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Character-Encoding-of-Source-Files"><CODE>file-encoding</CODE></A>):</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(let* ((port     (open-input-file file))
       (encoding (file-encoding port)))
  (set-port-encoding! port (or encoding (port-encoding port))))
</PRE></DIV>
<P>In theory we could create read/write ports which were buffered in one direction only. However this isn&#8217;t included in the current interfaces.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-open_002dinput_002dfile-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-open_002dinput_002dfile></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>open-input-file</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>filename [#:guess-encoding=#f] [#:encoding=#f] [#:binary=#f]</EM></DT>
<DD>
<P>Open<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>filename</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>for input. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>binary</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true, open the port in binary mode, otherwise use text mode.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>encoding</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>guess-encoding</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>determine the character encoding as described above for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>open-file</CODE>. Equivalent to</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(open-file <VAR>filename</VAR>
           (if <VAR>binary</VAR> "rb" "r")
           #:guess-encoding <VAR>guess-encoding</VAR>
           #:encoding <VAR>encoding</VAR>)
</PRE></DIV></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-open_002doutput_002dfile-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-open_002doutput_002dfile></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>open-output-file</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>filename [#:encoding=#f] [#:binary=#f]</EM></DT>
<DD>
<P>Open<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>filename</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>for output. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>binary</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true, open the port in binary mode, otherwise use text mode.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>encoding</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>specifies the character encoding as described above for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>open-file</CODE>. Equivalent to</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(open-file <VAR>filename</VAR>
           (if <VAR>binary</VAR> "wb" "w")
           #:encoding <VAR>encoding</VAR>)
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-call_002dwith_002dinput_002dfile></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>call-with-input-file</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>filename proc [#:guess-encoding=#f] [#:encoding=#f] [#:binary=#f]</EM></DT>
<DT><A name=index-call_002dwith_002doutput_002dfile></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>call-with-output-file</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>filename proc [#:encoding=#f] [#:binary=#f]</EM></DT>
<DD><A name=index-call_002dwith_002dinput_002dfile-2></A><A name=index-call_002dwith_002doutput_002dfile-2></A>
<P>Open<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>filename</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>for input or output, and call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>port)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with the resulting port. Return the value returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>filename</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is opened as per<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>open-input-file</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>open-output-file</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>respectively, and an error is signaled if it cannot be opened.</P>
<P>When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns, the port is closed. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not return (e.g. if it throws an error), then the port might not be closed automatically, though it will be garbage collected in the usual way if not otherwise referenced.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-with_002dinput_002dfrom_002dfile></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>with-input-from-file</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>filename thunk [#:guess-encoding=#f] [#:encoding=#f] [#:binary=#f]</EM></DT>
<DT><A name=index-with_002doutput_002dto_002dfile></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>with-output-to-file</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>filename thunk [#:encoding=#f] [#:binary=#f]</EM></DT>
<DT><A name=index-with_002derror_002dto_002dfile></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>with-error-to-file</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>filename thunk [#:encoding=#f] [#:binary=#f]</EM></DT>
<DD><A name=index-with_002dinput_002dfrom_002dfile-2></A><A name=index-with_002doutput_002dto_002dfile-2></A>
<P>Open<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>filename</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>thunk</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with the new port setup as respectively the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-input-port</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-output-port</CODE>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-error-port</CODE>. Return the value returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>filename</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is opened as per<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>open-input-file</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>open-output-file</CODE>respectively, and an error is signaled if it cannot be opened.</P>
<P>When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns, the port is closed and the previous setting of the respective current port is restored.</P>
<P>The current port setting is managed with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dynamic-wind</CODE>, so the previous value is restored no matter how<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>exits (eg. an exception), and if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is re-entered (via a captured continuation) then it&#8217;s set again to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>filename</VAR>port.</P>
<P>The port is closed when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns normally, but not when exited via an exception or new continuation. This ensures it&#8217;s still ready for use if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is re-entered by a captured continuation. Of course the port is always garbage collected and closed in the usual way when no longer referenced anywhere.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-port_002dmode></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>port-mode</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DT><A name=index-scm_005fport_005fmode></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_port_mode</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port)</EM></DT>
<DD>
<P>Return the port modes associated with the open port<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>. These will not necessarily be identical to the modes used when the port was opened, since modes such as "append" which are used only during port creation are not retained.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-port_002dfilename></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>port-filename</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DT><A name=index-scm_005fport_005ffilename></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_port_filename</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port)</EM></DT>
<DD>
<P>Return the filename associated with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if no filename is associated with the port.</P>
<P><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be open,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>port-filename</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>cannot be used once the port is closed.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-set_002dport_002dfilename_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-port-filename!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port filename</EM></DT>
<DT><A name=index-scm_005fset_005fport_005ffilename_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_set_port_filename_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port, filename)</EM></DT>
<DD>
<P>Change the filename associated with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>, using the current input port if none is specified. Note that this does not change the port&#8217;s source of data, but only the value that is returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>port-filename</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and reported in diagnostic output.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-file_002dport_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>file-port?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-scm_005ffile_005fport_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_file_port_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DD>
<P>Determine whether<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a port that is related to a file.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=String-Ports></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Soft-Ports" rel=next>Soft Ports</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#File-Ports" rel=prev>File Ports</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Port-Types" rel=up>Port Types</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=String-Ports-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.14.9.2 String Ports</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-String-port></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Port_002c-string></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following allow string ports to be opened by analogy to R4RS file port facilities:</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">With string ports, the port-encoding is treated differently than other types of ports. When string ports are created, they do not inherit a character encoding from the current locale. They are given a default locale that allows them to handle all valid string characters. Typically one should not modify a string port&#8217;s character encoding away from its default.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-call_002dwith_002doutput_002dstring></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>call-with-output-string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc</EM></DT>
<DT><A name=index-scm_005fcall_005fwith_005foutput_005fstring></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_call_with_output_string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(proc)</EM></DT>
<DD>
<P>Calls the one-argument procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with a newly created output port. When the function returns, the string composed of the characters written into the port is returned.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should not close the port.</P>
<P>Note that which characters can be written to a string port depend on the port&#8217;s encoding. The default encoding of string ports is specified by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%default-port-encoding</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>fluid (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Ports"><CODE>%default-port-encoding</CODE></A>). For instance, it is an error to write Greek letter alpha to an ISO-8859-1-encoded string port since this character cannot be represented with ISO-8859-1:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define alpha (integer-&gt;char #x03b1)) ; GREEK SMALL LETTER ALPHA

(with-fluids ((%default-port-encoding "ISO-8859-1"))
  (call-with-output-string
    (lambda (p)
      (display alpha p))))

&#8658;
Throw to key `encoding-error'
</PRE></DIV>
<P>Changing the string port&#8217;s encoding to a Unicode-capable encoding such as UTF-8 solves the problem.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-call_002dwith_002dinput_002dstring></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>call-with-input-string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>string proc</EM></DT>
<DT><A name=index-scm_005fcall_005fwith_005finput_005fstring></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_call_with_input_string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(string, proc)</EM></DT>
<DD>
<P>Calls the one-argument procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with a newly created input port from which<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>string</VAR>&#8217;s contents may be read. The value yielded by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-with_002doutput_002dto_002dstring></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>with-output-to-string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>thunk</EM></DT>
<DD>
<P>Calls the zero-argument procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with the current output port set temporarily to a new string port. It returns a string composed of the characters written to the current output.</P>
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call-with-output-string</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>above for character encoding considerations.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-with_002dinput_002dfrom_002dstring></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>with-input-from-string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>string thunk</EM></DT>
<DD>
<P>Calls the zero-argument procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with the current input port set temporarily to a string port opened on the specified<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>string</VAR>. The value yielded by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>thunk</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-open_002dinput_002dstring></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>open-input-string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>str</EM></DT>
<DT><A name=index-scm_005fopen_005finput_005fstring></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_open_input_string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(str)</EM></DT>
<DD>
<P>Take a string and return an input port that delivers characters from the string. The port can be closed by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>close-input-port</CODE>, though its storage will be reclaimed by the garbage collector if it becomes inaccessible.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-open_002doutput_002dstring></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>open-output-string</STRONG></DT>
<DT><A name=index-scm_005fopen_005foutput_005fstring></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_open_output_string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Return an output port that will accumulate characters for retrieval by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>get-output-string</CODE>. The port can be closed by the procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>close-output-port</CODE>, though its storage will be reclaimed by the garbage collector if it becomes inaccessible.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-get_002doutput_002dstring></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>get-output-string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DT><A name=index-scm_005fget_005foutput_005fstring></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_get_output_string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port)</EM></DT>
<DD>
<P>Given an output port created by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>open-output-string</CODE>, return a string consisting of the characters that have been output to the port so far.</P>
<P><CODE>get-output-string</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be used before closing<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>, once closed the string cannot be obtained.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A string port can be used in many procedures which accept a port but which are not dependent on implementation details of fports. E.g., seeking and truncating will work on a string port, but trying to extract the file descriptor number will fail.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Soft-Ports></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Void-Ports" rel=next>Void Ports</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#String-Ports" rel=prev>String Ports</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Port-Types" rel=up>Port Types</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Soft-Ports-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.14.9.3 Soft Ports</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Soft-port></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Port_002c-soft></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>soft-port</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a port based on a vector of procedures capable of accepting or delivering characters. It allows emulation of I/O ports.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dsoft_002dport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-soft-port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pv modes</EM></DT>
<DT><A name=index-scm_005fmake_005fsoft_005fport></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_soft_port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pv, modes)</EM></DT>
<DD>
<P>Return a port capable of receiving or delivering characters as specified by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>modes</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>string (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#File-Ports">open-file</A>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pv</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a vector of length 5 or 6. Its components are as follows:</P>
<OL>
<LI>procedure accepting one character for output</LI>
<LI>procedure accepting a string for output</LI>
<LI>thunk for flushing output</LI>
<LI>thunk for getting one character</LI>
<LI>thunk for closing port (not by garbage collection)</LI>
<LI>(if present and not<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>) thunk for computing the number of characters that can be read from the port without blocking.</LI></OL>
<P>For an output-only port only elements 0, 1, 2, and 4 need be procedures. For an input-only port only elements 3 and 4 need be procedures. Thunks 2 and 4 can instead be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if there is no useful operation for them to perform.</P>
<P>If thunk 3 returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eof-object</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/r5rs.html#Input">eof-object?</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>The Revised^5 Report on Scheme</CITE>) it indicates that the port has reached end-of-file. For example:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(define stdout (current-output-port))
(define p (make-soft-port
           (vector
            (lambda (c) (write c stdout))
            (lambda (s) (display s stdout))
            (lambda () (display "." stdout))
            (lambda () (char-upcase (read-char)))
            (lambda () (display "@" stdout)))
           "rw"))

(write p p) &#8658; #&lt;input-output: soft 8081e20&gt;
</PRE></DIV></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Void-Ports></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Soft-Ports" rel=prev>Soft Ports</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Port-Types" rel=up>Port Types</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Void-Ports-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.14.9.4 Void Ports</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Void-port></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Port_002c-void></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This kind of port causes any data to be discarded when written to, and always returns the end-of-file object when read from.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0025make_002dvoid_002dport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>%make-void-port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>mode</EM></DT>
<DT><A name=index-scm_005fsys_005fmake_005fvoid_005fport></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_sys_make_void_port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(mode)</EM></DT>
<DD>
<P>Create and return a new void port. A void port acts like<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>/dev/null</SAMP>. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mode</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument specifies the input/output modes for this port: see the documentation for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>open-file</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#File-Ports">File Ports</A>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=R6RS-I_002fO-Ports></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#I_002fO-Extensions" rel=next>I/O Extensions</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Port-Types" rel=prev>Port Types</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Input-and-Output" rel=up>Input and Output</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=R6RS-I_002fO-Ports-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.14.10 R6RS I/O Ports</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-R6RS-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-R6RS-ports></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The I/O port API of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.r6rs.org/">Revised Report^6 on the Algorithmic Language Scheme (R6RS)</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>is provided by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rnrs io ports)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module. It provides features, such as binary I/O and Unicode string I/O, that complement or refine Guile&#8217;s historical port API presented above (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Input-and-Output">Input and Output</A>). Note that R6RS ports are not disjoint from Guile&#8217;s native ports, so Guile-specific procedures will work on ports created using the R6RS API, and vice versa.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The text in this section is taken from the R6RS standard libraries document, with only minor adaptions for inclusion in this manual. The Guile developers offer their thanks to the R6RS editors for having provided the report&#8217;s text under permissive conditions making this possible.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><EM>Note</EM>: The implementation of this R6RS API is not complete yet.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-File-Names">R6RS File Names</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>File names.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-File-Options">R6RS File Options</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Options for opening files.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Buffer-Modes">R6RS Buffer Modes</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Influencing buffering behavior.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Transcoders">R6RS Transcoders</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Influencing port encoding.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-End_002dof_002dFile">R6RS End-of-File</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>The end-of-file object.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=6 href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Port-Manipulation">R6RS Port Manipulation</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Manipulating R6RS ports.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=7 href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Input-Ports">R6RS Input Ports</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Input Ports.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=8 href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Binary-Input">R6RS Binary Input</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Binary input.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=9 href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Textual-Input">R6RS Textual Input</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Textual input.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Output-Ports">R6RS Output Ports</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Output Ports.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Binary-Output">R6RS Binary Output</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Binary output.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Textual-Output">R6RS Textual Output</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Textual output.</TD></TR></TBODY></TABLE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A subset of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rnrs io ports)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module, plus one non-standard procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unget-bytevector</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Binary-Input">R6RS Binary Input</A>), is provided by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 binary-ports)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module. It contains binary input/output procedures and does not rely on R6RS support.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=R6RS-File-Names></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-File-Options" rel=next>R6RS File Options</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-I_002fO-Ports" rel=up>R6RS I/O Ports</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=File-Names></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.14.10.1 File Names</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Some of the procedures described in this chapter accept a file name as an argument. Valid values for such a file name include strings that name a file using the native notation of file system paths on an implementation&#8217;s underlying operating system, and may include implementation-dependent values as well.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>filename</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameter name means that the corresponding argument must be a file name.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=R6RS-File-Options></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Buffer-Modes" rel=next>R6RS Buffer Modes</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-File-Names" rel=prev>R6RS File Names</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-I_002fO-Ports" rel=up>R6RS I/O Ports</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=File-Options></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.14.10.2 File Options</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-file-options></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When opening a file, the various procedures in this library accept a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>file-options</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>object that encapsulates flags to specify how the file is to be opened. A<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>file-options</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>object is an enum-set (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-enums">rnrs enums</A>) over the symbols constituting valid file options.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file-options</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameter name means that the corresponding argument must be a file-options object.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-file_002doptions></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>file-options</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>file-options-symbol</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>...</EM></DT>
<DD>
<P>Each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file-options-symbol</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a symbol.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>file-options</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>syntax returns a file-options object that encapsulates the specified options.</P>
<P>When supplied to an operation that opens a file for output, the file-options object returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(file-options)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>specifies that the file is created if it does not exist and an exception with condition type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;i/o-file-already-exists</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is raised if it does exist. The following standard options can be included to modify the default behavior.</P>
<DL compact>
<DT><CODE>no-create</CODE></DT>
<DD>
<P>If the file does not already exist, it is not created; instead, an exception with condition type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;i/o-file-does-not-exist</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is raised. If the file already exists, the exception with condition type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;i/o-file-already-exists</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not raised and the file is truncated to zero length.</P></DD>
<DT><CODE>no-fail</CODE></DT>
<DD>
<P>If the file already exists, the exception with condition type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;i/o-file-already-exists</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not raised, even if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>no-create</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not included, and the file is truncated to zero length.</P></DD>
<DT><CODE>no-truncate</CODE></DT>
<DD>
<P>If the file already exists and the exception with condition type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;i/o-file-already-exists</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>has been inhibited by inclusion of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>no-create</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>no-fail</CODE>, the file is not truncated, but the port&#8217;s current position is still set to the beginning of the file.</P></DD></DL>
<P>These options have no effect when a file is opened only for input. Symbols other than those listed above may be used as<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file-options-symbol</VAR>s; they have implementation-specific meaning, if any.</P>
<BLOCKQUOTE>
<P><B>Note:</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>Only the name of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file-options-symbol</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is significant.</P></BLOCKQUOTE></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=R6RS-Buffer-Modes></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Transcoders" rel=next>R6RS Transcoders</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-File-Options" rel=prev>R6RS File Options</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-I_002fO-Ports" rel=up>R6RS I/O Ports</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Buffer-Modes></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.14.10.3 Buffer Modes</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Each port has an associated buffer mode. For an output port, the buffer mode defines when an output operation flushes the buffer associated with the output port. For an input port, the buffer mode defines how much data will be read to satisfy read operations. The possible buffer modes are the symbols<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>none</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for no buffering,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>line</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for flushing upon line endings and reading up to line endings, or other implementation-dependent behavior, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>block</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for arbitrary buffering. This section uses the parameter name<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>buffer-mode</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>for arguments that must be buffer-mode symbols.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If two ports are connected to the same mutable source, both ports are unbuffered, and reading a byte or character from that shared source via one of the two ports would change the bytes or characters seen via the other port, a lookahead operation on one port will render the peeked byte or character inaccessible via the other port, while a subsequent read operation on the peeked port will see the peeked byte or character even though the port is otherwise unbuffered.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In other words, the semantics of buffering is defined in terms of side effects on shared mutable sources, and a lookahead operation has the same side effect on the shared source as a read operation.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-buffer_002dmode></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>buffer-mode</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>buffer-mode-symbol</VAR></EM></DT>
<DD>
<P><VAR>buffer-mode-symbol</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a symbol whose name is one of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>none</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>line</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>block</CODE>. The result is the corresponding symbol, and specifies the associated buffer mode.</P>
<BLOCKQUOTE>
<P><B>Note:</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>Only the name of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>buffer-mode-symbol</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is significant.</P></BLOCKQUOTE></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-buffer_002dmode_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>buffer-mode?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>Returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the argument is a valid buffer-mode symbol, and returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=R6RS-Transcoders></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-End_002dof_002dFile" rel=next>R6RS End-of-File</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Buffer-Modes" rel=prev>R6RS Buffer Modes</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-I_002fO-Ports" rel=up>R6RS I/O Ports</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Transcoders></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.14.10.4 Transcoders</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-codec></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-end_002dof_002dline-style></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-transcoder></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-binary-port></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-textual-port></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Several different Unicode encoding schemes describe standard ways to encode characters and strings as byte sequences and to decode those sequences. Within this document, a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>codec</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an immutable Scheme object that represents a Unicode or similar encoding scheme.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">An<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>end-of-line style</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a symbol that, if it is not<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>none</CODE>, describes how a textual port transcodes representations of line endings.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>transcoder</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an immutable Scheme object that combines a codec with an end-of-line style and a method for handling decoding errors. Each transcoder represents some specific bidirectional (but not necessarily lossless), possibly stateful translation between byte sequences and Unicode characters and strings. Every transcoder can operate in the input direction (bytes to characters) or in the output direction (characters to bytes). A<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>transcoder</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameter name means that the corresponding argument must be a transcoder.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>binary port</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a port that supports binary I/O, does not have an associated transcoder and does not support textual I/O. A<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>textual port</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a port that supports textual I/O, and does not support binary I/O. A textual port may or may not have an associated transcoder.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-latin_002d1_002dcodec></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>latin-1-codec</STRONG></DT>
<DT><A name=index-utf_002d8_002dcodec></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>utf-8-codec</STRONG></DT>
<DT><A name=index-utf_002d16_002dcodec></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>utf-16-codec</STRONG></DT>
<DD>
<P>These are predefined codecs for the ISO 8859-1, UTF-8, and UTF-16 encoding schemes.</P>
<P>A call to any of these procedures returns a value that is equal in the sense of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eqv?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the result of any other call to the same procedure.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-eol_002dstyle></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>eol-style</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>eol-style-symbol</VAR></EM></DT>
<DD>
<P><VAR>eol-style-symbol</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be a symbol whose name is one of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cr</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>crlf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nel</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>crnel</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ls</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>none</CODE>.</P>
<P>The form evaluates to the corresponding symbol. If the name of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>eol-style-symbol</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not one of these symbols, the effect and result are implementation-dependent; in particular, the result may be an eol-style symbol acceptable as an<VAR>eol-style</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-transcoder</CODE>. Otherwise, an exception is raised.</P>
<P>All eol-style symbols except<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>none</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>describe a specific line-ending encoding:</P>
<DL compact>
<DT><CODE>lf</CODE></DT>
<DD>
<P>linefeed</P></DD>
<DT><CODE>cr</CODE></DT>
<DD>
<P>carriage return</P></DD>
<DT><CODE>crlf</CODE></DT>
<DD>
<P>carriage return, linefeed</P></DD>
<DT><CODE>nel</CODE></DT>
<DD>
<P>next line</P></DD>
<DT><CODE>crnel</CODE></DT>
<DD>
<P>carriage return, next line</P></DD>
<DT><CODE>ls</CODE></DT>
<DD>
<P>line separator</P></DD></DL>
<P>For a textual port with a transcoder, and whose transcoder has an eol-style symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>none</CODE>, no conversion occurs. For a textual input port, any eol-style symbol other than<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>none</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>means that all of the above line-ending encodings are recognized and are translated into a single linefeed. For a textual output port,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>none</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are equivalent. Linefeed characters are encoded according to the specified eol-style symbol, and all other characters that participate in possible line endings are encoded as is.</P>
<BLOCKQUOTE>
<P><B>Note:</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>Only the name of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>eol-style-symbol</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is significant.</P></BLOCKQUOTE></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-native_002deol_002dstyle></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>native-eol-style</STRONG></DT>
<DD>
<P>Returns the default end-of-line style of the underlying platform, e.g.,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on Unix and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>crlf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on Windows.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0026i_002fo_002ddecoding></A>Condition Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&amp;i/o-decoding</STRONG></DT>
<DT><A name=index-make_002di_002fo_002ddecoding_002derror></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-i/o-decoding-error</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DT><A name=index-i_002fo_002ddecoding_002derror_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>i/o-decoding-error?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>This condition type could be defined by</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(define-condition-type &amp;i/o-decoding &amp;i/o-port
  make-i/o-decoding-error i/o-decoding-error?)
</PRE></DIV>
<P>An exception with this type is raised when one of the operations for textual input from a port encounters a sequence of bytes that cannot be translated into a character or string by the input direction of the port&#8217;s transcoder.</P>
<P>When such an exception is raised, the port&#8217;s position is past the invalid encoding.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0026i_002fo_002dencoding></A>Condition Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&amp;i/o-encoding</STRONG></DT>
<DT><A name=index-make_002di_002fo_002dencoding_002derror></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-i/o-encoding-error</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port char</EM></DT>
<DT><A name=index-i_002fo_002dencoding_002derror_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>i/o-encoding-error?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-i_002fo_002dencoding_002derror_002dchar></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>i/o-encoding-error-char</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>condition</EM></DT>
<DD>
<P>This condition type could be defined by</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(define-condition-type &amp;i/o-encoding &amp;i/o-port
  make-i/o-encoding-error i/o-encoding-error?
  (char i/o-encoding-error-char))
</PRE></DIV>
<P>An exception with this type is raised when one of the operations for textual output to a port encounters a character that cannot be translated into bytes by the output direction of the port&#8217;s transcoder.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>char</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the character that could not be encoded.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-error_002dhandling_002dmode></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>error-handling-mode</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>error-handling-mode-symbol</VAR></EM></DT>
<DD>
<P><VAR>error-handling-mode-symbol</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be a symbol whose name is one of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ignore</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>raise</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>replace</CODE>. The form evaluates to the corresponding symbol. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>error-handling-mode-symbol</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not one of these identifiers, effect and result are implementation-dependent: The result may be an error-handling-mode symbol acceptable as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handling-mode</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-transcoder</CODE>. If it is not acceptable as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handling-mode</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-transcoder</CODE>, an exception is raised.</P>
<BLOCKQUOTE>
<P><B>Note:</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>Only the name of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>error-handling-mode-symbol</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is significant.</P></BLOCKQUOTE>
<P>The error-handling mode of a transcoder specifies the behavior of textual I/O operations in the presence of encoding or decoding errors.</P>
<P>If a textual input operation encounters an invalid or incomplete character encoding, and the error-handling mode is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ignore</CODE>, an appropriate number of bytes of the invalid encoding are ignored and decoding continues with the following bytes.</P>
<P>If the error-handling mode is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>replace</CODE>, the replacement character U+FFFD is injected into the data stream, an appropriate number of bytes are ignored, and decoding continues with the following bytes.</P>
<P>If the error-handling mode is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>raise</CODE>, an exception with condition type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;i/o-decoding</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is raised.</P>
<P>If a textual output operation encounters a character it cannot encode, and the error-handling mode is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ignore</CODE>, the character is ignored and encoding continues with the next character. If the error-handling mode is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>replace</CODE>, a codec-specific replacement character is emitted by the transcoder, and encoding continues with the next character. The replacement character is U+FFFD for transcoders whose codec is one of the Unicode encodings, but is the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>character for the Latin-1 encoding. If the error-handling mode is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>raise</CODE>, an exception with condition type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;i/o-encoding</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is raised.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dtranscoder></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-transcoder</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>codec</EM></DT>
<DT><A name=index-make_002dtranscoder-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-transcoder</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>codec eol-style</EM></DT>
<DT><A name=index-make_002dtranscoder-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-transcoder</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>codec eol-style handling-mode</EM></DT>
<DD>
<P><VAR>codec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a codec;<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>eol-style</VAR>, if present, an eol-style symbol; and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handling-mode</VAR>, if present, an error-handling-mode symbol.</P>
<P><VAR>eol-style</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be omitted, in which case it defaults to the native end-of-line style of the underlying platform.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handling-mode</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be omitted, in which case it defaults to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>replace</CODE>. The result is a transcoder with the behavior specified by its arguments.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-native_002dtranscoder></A>Scheme procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>native-transcoder</STRONG></DT>
<DD>
<P>Returns an implementation-dependent transcoder that represents a possibly locale-dependent &#8220;native&#8221; transcoding.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-transcoder_002dcodec></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>transcoder-codec</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>transcoder</EM></DT>
<DT><A name=index-transcoder_002deol_002dstyle></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>transcoder-eol-style</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>transcoder</EM></DT>
<DT><A name=index-transcoder_002derror_002dhandling_002dmode></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>transcoder-error-handling-mode</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>transcoder</EM></DT>
<DD>
<P>These are accessors for transcoder objects; when applied to a transcoder returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-transcoder</CODE>, they return the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>codec</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>eol-style</VAR>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handling-mode</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>arguments, respectively.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bytevector_002d_003estring-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bytevector-&gt;string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bytevector transcoder</EM></DT>
<DD>
<P>Returns the string that results from transcoding the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bytevector</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>according to the input direction of the transcoder.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-string_002d_003ebytevector-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>string-&gt;bytevector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>string transcoder</EM></DT>
<DD>
<P>Returns the bytevector that results from transcoding the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>string</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>according to the output direction of the transcoder.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=R6RS-End_002dof_002dFile></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Port-Manipulation" rel=next>R6RS Port Manipulation</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Transcoders" rel=prev>R6RS Transcoders</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-I_002fO-Ports" rel=up>R6RS I/O Ports</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=The-End_002dof_002dFile-Object></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.14.10.5 The End-of-File Object</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-EOF></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-end_002dof_002dfile></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">R5RS&#8217;<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eof-object?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure is provided by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rnrs io ports)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-eof_002dobject_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>eof-object?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-scm_005feof_005fobject_005fp-1></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_eof_object_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DD>
<P>Return true if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the end-of-file (EOF) object.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In addition, the following procedure is provided:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-eof_002dobject></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>eof-object</STRONG></DT>
<DT><A name=index-scm_005feof_005fobject></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_eof_object</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>()</EM></DT>
<DD>
<P>Return the end-of-file (EOF) object.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(eof-object? (eof-object))
&#8658; #t
</PRE></DIV></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=R6RS-Port-Manipulation></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Input-Ports" rel=next>R6RS Input Ports</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-End_002dof_002dFile" rel=prev>R6RS End-of-File</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-I_002fO-Ports" rel=up>R6RS I/O Ports</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Port-Manipulation></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.14.10.6 Port Manipulation</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The procedures listed below operate on any kind of R6RS I/O port.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-port_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>port?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>Returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the argument is a port, and returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-port_002dtranscoder></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>port-transcoder</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DD>
<P>Returns the transcoder associated with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is textual and has an associated transcoder, and returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is binary or does not have an associated transcoder.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-binary_002dport_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>binary-port?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>binary port</EM>, suitable for binary data input/output.</P>
<P>Note that internally Guile does not differentiate between binary and textual ports, unlike the R6RS. Thus, this procedure returns true when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not have an associated encoding&#8212;i.e., when<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(port-encoding<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Ports">port-encoding</A>). This is the case for ports returned by R6RS procedures such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>open-bytevector-input-port</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-custom-binary-output-port</CODE>.</P>
<P>However, Guile currently does not prevent use of textual I/O procedures such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>display</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read-char</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with binary ports. Doing so &#8220;upgrades&#8221; the port from binary to textual, under the ISO-8859-1 encoding. Likewise, Guile does not prevent use of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set-port-encoding!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on a binary port, which also turns it into a &#8220;textual&#8221; port.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-textual_002dport_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>textual-port?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DD>
<P>Always return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE>, as all ports can be used for textual I/O in Guile.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-transcoded_002dport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>transcoded-port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>binary-port transcoder</EM></DT>
<DD>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>transcoded-port</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure returns a new textual port with the specified<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>transcoder</VAR>. Otherwise the new textual port&#8217;s state is largely the same as that of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>binary-port</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>binary-port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an input port, the new textual port will be an input port and will transcode the bytes that have not yet been read from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>binary-port</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>binary-port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an output port, the new textual port will be an output port and will transcode output characters into bytes that are written to the byte sink represented by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>binary-port</VAR>.</P>
<P>As a side effect, however,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>transcoded-port</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>closes<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>binary-port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in a special way that allows the new textual port to continue to use the byte source or sink represented by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>binary-port</VAR>, even though<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>binary-port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>itself is closed and cannot be used by the input and output operations described in this chapter.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-port_002dposition></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>port-position</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DD>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>supports it (see below), return the offset (an integer) indicating where the next octet will be read from/written to in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not support this operation, an error condition is raised.</P>
<P>This is similar to Guile&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>seek</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SEEK_CUR</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Random-Access">Random Access</A>).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-port_002dhas_002dport_002dposition_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>port-has-port-position?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>supports<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>port-position</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-set_002dport_002dposition_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-port-position!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port offset</EM></DT>
<DD>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>supports it (see below), set the position where the next octet will be read from/written to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>offset</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(an integer). If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not support this operation, an error condition is raised.</P>
<P>This is similar to Guile&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>seek</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SEEK_SET</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Random-Access">Random Access</A>).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-port_002dhas_002dset_002dport_002dposition_0021_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>port-has-set-port-position!?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>supports<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set-port-position!</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-call_002dwith_002dport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>call-with-port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port proc</EM></DT>
<DD>
<P>Call<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR>, passing it<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and closing<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>upon exit of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR>. Return the return values of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=R6RS-Input-Ports></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Binary-Input" rel=next>R6RS Binary Input</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Port-Manipulation" rel=prev>R6RS Port Manipulation</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-I_002fO-Ports" rel=up>R6RS I/O Ports</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Input-Ports></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.14.10.7 Input Ports</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-input_002dport_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>input-port?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>Returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the argument is an input port (or a combined input and output port), and returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-port_002deof_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>port-eof?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>input-port</EM></DT>
<DD>
<P>Returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lookahead-u8</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure (if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>input-port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a binary port) or the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lookahead-char</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure (if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>input-port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a textual port) would return the end-of-file object, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise. The operation may block indefinitely if no data is available but the port cannot be determined to be at end of file.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-open_002dfile_002dinput_002dport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>open-file-input-port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>filename</EM></DT>
<DT><A name=index-open_002dfile_002dinput_002dport-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>open-file-input-port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>filename file-options</EM></DT>
<DT><A name=index-open_002dfile_002dinput_002dport-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>open-file-input-port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>filename file-options buffer-mode</EM></DT>
<DT><A name=index-open_002dfile_002dinput_002dport-3></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>open-file-input-port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>filename file-options buffer-mode maybe-transcoder</EM></DT>
<DD>
<P><VAR>maybe-transcoder</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be either a transcoder or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>open-file-input-port</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure returns an input port for the named file. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file-options</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>maybe-transcoder</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>arguments are optional.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file-options</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument, which may determine various aspects of the returned port (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-File-Options">R6RS File Options</A>), defaults to the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(file-options)</CODE>.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>buffer-mode</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument, if supplied, must be one of the symbols that name a buffer mode. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>buffer-mode</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument defaults to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>block</CODE>.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>maybe-transcoder</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a transcoder, it becomes the transcoder associated with the returned port.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>maybe-transcoder</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or absent, the port will be a binary port and will support the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>port-position</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set-port-position!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>operations. Otherwise the port will be a textual port, and whether it supports the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>port-position</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set-port-position!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>operations is implementation-dependent (and possibly transcoder-dependent).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-standard_002dinput_002dport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>standard-input-port</STRONG></DT>
<DD>
<P>Returns a fresh binary input port connected to standard input. Whether the port supports the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>port-position</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set-port-position!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>operations is implementation-dependent.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-current_002dinput_002dport-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>current-input-port</STRONG></DT>
<DD>
<P>This returns a default textual port for input. Normally, this default port is associated with standard input, but can be dynamically re-assigned using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>with-input-from-file</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure from the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>io simple (6)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>library (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-io-simple">rnrs io simple</A>). The port may or may not have an associated transcoder; if it does, the transcoder is implementation-dependent.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=R6RS-Binary-Input></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Textual-Input" rel=next>R6RS Textual Input</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Input-Ports" rel=prev>R6RS Input Ports</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-I_002fO-Ports" rel=up>R6RS I/O Ports</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Binary-Input></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.14.10.8 Binary Input</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-binary-input></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">R6RS binary input ports can be created with the procedures described below.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-open_002dbytevector_002dinput_002dport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>open-bytevector-input-port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bv [transcoder]</EM></DT>
<DT><A name=index-scm_005fopen_005fbytevector_005finput_005fport></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_open_bytevector_input_port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bv, transcoder)</EM></DT>
<DD>
<P>Return an input port whose contents are drawn from bytevector<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bv</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Bytevectors">Bytevectors</A>).</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>transcoder</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument is currently not supported.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-custom-binary-input-ports></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dcustom_002dbinary_002dinput_002dport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-custom-binary-input-port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>id read! get-position set-position! close</EM></DT>
<DT><A name=index-scm_005fmake_005fcustom_005fbinary_005finput_005fport></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_custom_binary_input_port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(id, read!, get-position, set-position!, close)</EM></DT>
<DD>
<P>Return a new custom binary input port<A href="https://www.gnu.org/software/guile/manual/guile.html#FOOT14" name=DOCF14><SUP>14</SUP></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>id</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(a string) whose input is drained by invoking<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>read!</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and passing it a bytevector, an index where bytes should be written, and the number of bytes to read. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure must return an integer indicating the number of bytes read, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to indicate the end-of-file.</P>
<P>Optionally, if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>get-position</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, it must be a thunk that will be called when<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>port-position</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is invoked on the custom binary port and should return an integer indicating the position within the underlying data stream; if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>get-position</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>was not supplied, the returned port does not support<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>port-position</CODE>.</P>
<P>Likewise, if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>set-position!</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, it should be a one-argument procedure. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set-port-position!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is invoked on the custom binary input port,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>set-position!</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is passed an integer indicating the position of the next byte is to read.</P>
<P>Finally, if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>close</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, it must be a thunk. It is invoked when the custom binary input port is closed.</P>
<P>The returned port is fully buffered by default, but its buffering mode can be changed using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setvbuf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Ports-and-File-Descriptors"><CODE>setvbuf</CODE></A>).</P>
<P>Using a custom binary input port, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>open-bytevector-input-port</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure could be implemented as follows:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(define (open-bytevector-input-port source)
  (define position 0)
  (define length (bytevector-length source))

  (define (read! bv start count)
    (let ((count (min count (- length position))))
      (bytevector-copy! source position
                        bv start count)
      (set! position (+ position count))
      count))

  (define (get-position) position)

  (define (set-position! new-position)
    (set! position new-position))

  (make-custom-binary-input-port "the port" read!
                                  get-position
                                  set-position!))

(read (open-bytevector-input-port (string-&gt;utf8 "hello")))
&#8658; hello
</PRE></DIV></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-binary-input-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Binary input is achieved using the procedures below:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-get_002du8></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>get-u8</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DT><A name=index-scm_005fget_005fu8></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_get_u8</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port)</EM></DT>
<DD>
<P>Return an octet read from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>, a binary input port, blocking as necessary, or the end-of-file object.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-lookahead_002du8></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>lookahead-u8</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DT><A name=index-scm_005flookahead_005fu8></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_lookahead_u8</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>get-u8</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>but does not update<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>&#8217;s position to point past the octet.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-get_002dbytevector_002dn></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>get-bytevector-n</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port count</EM></DT>
<DT><A name=index-scm_005fget_005fbytevector_005fn></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_get_bytevector_n</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port, count)</EM></DT>
<DD>
<P>Read<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>octets from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>, blocking as necessary and return a bytevector containing the octets read. If fewer bytes are available, a bytevector smaller than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-get_002dbytevector_002dn_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>get-bytevector-n!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port bv start count</EM></DT>
<DT><A name=index-scm_005fget_005fbytevector_005fn_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_get_bytevector_n_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port, bv, start, count)</EM></DT>
<DD>
<P>Read<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and store them in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bv</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>starting at index<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR>. Return either the number of bytes actually read or the end-of-file object.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-get_002dbytevector_002dsome></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>get-bytevector-some</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DT><A name=index-scm_005fget_005fbytevector_005fsome></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_get_bytevector_some</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port)</EM></DT>
<DD>
<P>Read from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>, blocking as necessary, until bytes are available or an end-of-file is reached. Return either the end-of-file object or a new bytevector containing some of the available bytes (at least one), and update the port position to point just past these bytes.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-get_002dbytevector_002dall></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>get-bytevector-all</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DT><A name=index-scm_005fget_005fbytevector_005fall></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_get_bytevector_all</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port)</EM></DT>
<DD>
<P>Read from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>, blocking as necessary, until the end-of-file is reached. Return either a new bytevector containing the data read or the end-of-file object (if no data were available).</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 binary-ports)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module provides the following procedure as an extension to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(rnrs io ports)</CODE>:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-unget_002dbytevector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>unget-bytevector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port bv [start [count]]</EM></DT>
<DT><A name=index-scm_005funget_005fbytevector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_unget_bytevector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port, bv, start, count)</EM></DT>
<DD>
<P>Place the contents of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bv</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>, optionally starting at index<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and limiting to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>octets, so that its bytes will be read from left-to-right as the next bytes from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>during subsequent read operations. If called multiple times, the unread bytes will be read again in last-in first-out order.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=R6RS-Textual-Input></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Output-Ports" rel=next>R6RS Output Ports</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Binary-Input" rel=prev>R6RS Binary Input</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-I_002fO-Ports" rel=up>R6RS I/O Ports</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Textual-Input></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.14.10.9 Textual Input</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-get_002dchar></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>get-char</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>textual-input-port</EM></DT>
<DD>
<P>Reads from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>textual-input-port</VAR>, blocking as necessary, until a complete character is available from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>textual-input-port</VAR>, or until an end of file is reached.</P>
<P>If a complete character is available before the next end of file,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>get-char</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns that character and updates the input port to point past the character. If an end of file is reached before any character is read,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>get-char</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the end-of-file object.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-lookahead_002dchar></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>lookahead-char</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>textual-input-port</EM></DT>
<DD>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lookahead-char</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure is like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>get-char</CODE>, but it does not update<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>textual-input-port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to point past the character.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-get_002dstring_002dn></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>get-string-n</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>textual-input-port count</EM></DT>
<DD>
<P><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be an exact, non-negative integer object, representing the number of characters to be read.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>get-string-n</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure reads from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>textual-input-port</VAR>, blocking as necessary, until<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>characters are available, or until an end of file is reached.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>characters are available before end of file,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>get-string-n</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns a string consisting of those<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>characters. If fewer characters are available before an end of file, but one or more characters can be read,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>get-string-n</CODE>returns a string containing those characters. In either case, the input port is updated to point just past the characters read. If no characters can be read before an end of file, the end-of-file object is returned.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-get_002dstring_002dn_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>get-string-n!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>textual-input-port string start count</EM></DT>
<DD>
<P><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be exact, non-negative integer objects, with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>representing the number of characters to be read.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>string</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a string with at least $<VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>+<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR>$ characters.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>get-string-n!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure reads from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>textual-input-port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the same manner as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>get-string-n</CODE>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>characters are available before an end of file, they are written into<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>string</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>starting at index<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned. If fewer characters are available before an end of file, but one or more can be read, those characters are written into<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>string</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>starting at index<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the number of characters actually read is returned as an exact integer object. If no characters can be read before an end of file, the end-of-file object is returned.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-get_002dstring_002dall></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>get-string-all</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>textual-input-port</EM></DT>
<DD>
<P>Reads from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>textual-input-port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>until an end of file, decoding characters in the same manner as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>get-string-n</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>get-string-n!</CODE>.</P>
<P>If characters are available before the end of file, a string containing all the characters decoded from that data are returned. If no character precedes the end of file, the end-of-file object is returned.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-get_002dline></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>get-line</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>textual-input-port</EM></DT>
<DD>
<P>Reads from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>textual-input-port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>up to and including the linefeed character or end of file, decoding characters in the same manner as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>get-string-n</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>get-string-n!</CODE>.</P>
<P>If a linefeed character is read, a string containing all of the text up to (but not including) the linefeed character is returned, and the port is updated to point just past the linefeed character. If an end of file is encountered before any linefeed character is read, but some characters have been read and decoded as characters, a string containing those characters is returned. If an end of file is encountered before any characters are read, the end-of-file object is returned.</P>
<BLOCKQUOTE>
<P><B>Note:</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>The end-of-line style, if not<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>none</CODE>, will cause all line endings to be read as linefeed characters. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Transcoders">R6RS Transcoders</A>.</P></BLOCKQUOTE></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-get_002ddatum></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>get-datum</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>textual-input-port count</EM></DT>
<DD>
<P>Reads an external representation from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>textual-input-port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and returns the datum it represents. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>get-datum</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure returns the next datum that can be parsed from the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>textual-input-port</VAR>, updating<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>textual-input-port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to point exactly past the end of the external representation of the object.</P>
<P>Any<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>interlexeme space</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>(comment or whitespace, see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Scheme-Syntax">Scheme Syntax</A>) in the input is first skipped. If an end of file occurs after the interlexeme space, the end-of-file object (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-End_002dof_002dFile">R6RS End-of-File</A>) is returned.</P>
<P>If a character inconsistent with an external representation is encountered in the input, an exception with condition types<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;lexical</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;i/o-read</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is raised. Also, if the end of file is encountered after the beginning of an external representation, but the external representation is incomplete and therefore cannot be parsed, an exception with condition types<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;lexical</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;i/o-read</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is raised.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=R6RS-Output-Ports></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Binary-Output" rel=next>R6RS Binary Output</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Textual-Input" rel=prev>R6RS Textual Input</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-I_002fO-Ports" rel=up>R6RS I/O Ports</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Output-Ports></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.14.10.10 Output Ports</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-output_002dport_003f-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>output-port?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>Returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the argument is an output port (or a combined input and output port),<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-flush_002doutput_002dport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>flush-output-port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port</EM></DT>
<DD>
<P>Flushes any buffered output from the buffer of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>output-port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the underlying file, device, or object. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>flush-output-port</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure returns an unspecified values.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-open_002dfile_002doutput_002dport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>open-file-output-port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>filename</EM></DT>
<DT><A name=index-open_002dfile_002doutput_002dport-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>open-file-output-port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>filename file-options</EM></DT>
<DT><A name=index-open_002dfile_002doutput_002dport-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>open-file-output-port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>filename file-options buffer-mode</EM></DT>
<DT><A name=index-open_002dfile_002doutput_002dport-3></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>open-file-output-port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>filename file-options buffer-mode maybe-transcoder</EM></DT>
<DD>
<P><VAR>maybe-transcoder</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be either a transcoder or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>open-file-output-port</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure returns an output port for the named file.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file-options</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument, which may determine various aspects of the returned port (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-File-Options">R6RS File Options</A>), defaults to the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(file-options)</CODE>.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>buffer-mode</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument, if supplied, must be one of the symbols that name a buffer mode. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>buffer-mode</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument defaults to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>block</CODE>.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>maybe-transcoder</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a transcoder, it becomes the transcoder associated with the port.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>maybe-transcoder</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or absent, the port will be a binary port and will support the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>port-position</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set-port-position!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>operations. Otherwise the port will be a textual port, and whether it supports the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>port-position</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set-port-position!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>operations is implementation-dependent (and possibly transcoder-dependent).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-standard_002doutput_002dport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>standard-output-port</STRONG></DT>
<DT><A name=index-standard_002derror_002dport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>standard-error-port</STRONG></DT>
<DD>
<P>Returns a fresh binary output port connected to the standard output or standard error respectively. Whether the port supports the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>port-position</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set-port-position!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>operations is implementation-dependent.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-current_002doutput_002dport-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>current-output-port</STRONG></DT>
<DT><A name=index-current_002derror_002dport-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>current-error-port</STRONG></DT>
<DD>
<P>These return default textual ports for regular output and error output. Normally, these default ports are associated with standard output, and standard error, respectively. The return value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-output-port</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be dynamically re-assigned using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>with-output-to-file</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure from the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>io simple (6)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>library (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-io-simple">rnrs io simple</A>). A port returned by one of these procedures may or may not have an associated transcoder; if it does, the transcoder is implementation-dependent.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=R6RS-Binary-Output></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Textual-Output" rel=next>R6RS Textual Output</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Output-Ports" rel=prev>R6RS Output Ports</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-I_002fO-Ports" rel=up>R6RS I/O Ports</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Binary-Output></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.14.10.11 Binary Output</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Binary output ports can be created with the procedures below.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-open_002dbytevector_002doutput_002dport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>open-bytevector-output-port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[transcoder]</EM></DT>
<DT><A name=index-scm_005fopen_005fbytevector_005foutput_005fport></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_open_bytevector_output_port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(transcoder)</EM></DT>
<DD>
<P>Return two values: a binary output port and a procedure. The latter should be called with zero arguments to obtain a bytevector containing the data accumulated by the port, as illustrated below.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(call-with-values
  (lambda ()
    (open-bytevector-output-port))
  (lambda (port get-bytevector)
    (display "hello" port)
    (get-bytevector)))

&#8658; #vu8(104 101 108 108 111)
</PRE></DIV>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>transcoder</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument is currently not supported.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-custom-binary-output-ports></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dcustom_002dbinary_002doutput_002dport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-custom-binary-output-port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>id write! get-position set-position! close</EM></DT>
<DT><A name=index-scm_005fmake_005fcustom_005fbinary_005foutput_005fport></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_custom_binary_output_port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(id, write!, get-position, set-position!, close)</EM></DT>
<DD>
<P>Return a new custom binary output port named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>id</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(a string) whose output is sunk by invoking<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>write!</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and passing it a bytevector, an index where bytes should be read from this bytevector, and the number of bytes to be &#8220;written&#8221;. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure must return an integer indicating the number of bytes actually written; when it is passed<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the number of bytes to write, it should behave as though an end-of-file was sent to the byte sink.</P>
<P>The other arguments are as for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-custom-binary-input-port</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Binary-Input"><CODE>make-custom-binary-input-port</CODE></A>).</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-binary-output></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Writing to a binary output port can be done using the following procedures:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-put_002du8></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>put-u8</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port octet</EM></DT>
<DT><A name=index-scm_005fput_005fu8></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_put_u8</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port, octet)</EM></DT>
<DD>
<P>Write<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>octet</VAR>, an integer in the 0&#8211;255 range, to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>, a binary output port.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-put_002dbytevector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>put-bytevector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port bv [start [count]]</EM></DT>
<DT><A name=index-scm_005fput_005fbytevector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_put_bytevector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(port, bv, start, count)</EM></DT>
<DD>
<P>Write the contents of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bv</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>, optionally starting at index<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and limiting to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>octets.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=R6RS-Textual-Output></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-Binary-Output" rel=prev>R6RS Binary Output</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-I_002fO-Ports" rel=up>R6RS I/O Ports</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Textual-Output></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.14.10.12 Textual Output</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-put_002dchar></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>put-char</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port char</EM></DT>
<DD>
<P>Writes<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>char</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the port. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>put-char</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure returns an unspecified value.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-put_002dstring></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>put-string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port string</EM></DT>
<DT><A name=index-put_002dstring-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>put-string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port string start</EM></DT>
<DT><A name=index-put_002dstring-2></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>put-string</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port string start count</EM></DT>
<DD>
<P><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be non-negative exact integer objects.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>string</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must have a length of at least<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>+<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR></EM>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>defaults to 0.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>defaults to<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><CODE>(string-length<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>string</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>-<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR></EM>$. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>put-string</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure writes the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR>characters of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>string</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>starting at index<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the port. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>put-string</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure returns an unspecified value.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-put_002ddatum></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>put-datum</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>textual-output-port datum</EM></DT>
<DD>
<P><VAR>datum</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be a datum value. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>put-datum</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure writes an external representation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>datum</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>textual-output-port</VAR>. The specific external representation is implementation-dependent. However, whenever possible, an implementation should produce a representation for which<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>get-datum</CODE>, when reading the representation, will return an object equal (in the sense of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE>) to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>datum</VAR>.</P>
<BLOCKQUOTE>
<P><B>Note:</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>Not all datums may allow producing an external representation for which<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>get-datum</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will produce an object that is equal to the original. Specifically, NaNs contained in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>datum</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may make this impossible.</P></BLOCKQUOTE>
<BLOCKQUOTE>
<P><B>Note:</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>put-datum</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure merely writes the external representation, but no trailing delimiter. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>put-datum</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used to write several subsequent external representations to an output port, care should be taken to delimit them properly so they can be read back in by subsequent calls to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>get-datum</CODE>.</P></BLOCKQUOTE></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=I_002fO-Extensions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#BOM-Handling" rel=next>BOM Handling</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#R6RS-I_002fO-Ports" rel=prev>R6RS I/O Ports</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Input-and-Output" rel=up>Input and Output</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Using-and-Extending-Ports-in-C></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.14.11 Using and Extending Ports in C</H4>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#C-Port-Interface">C Port Interface</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Using ports from C.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Port-Implementation">Port Implementation</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>How to implement a new port type in C.</TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=C-Port-Interface></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Port-Implementation" rel=next>Port Implementation</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#I_002fO-Extensions" rel=up>I/O Extensions</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=C-Port-Interface-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.14.11.1 C Port Interface</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-C-port-interface></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Port_002c-C-interface></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This section describes how to use Scheme ports from C.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Port-basics></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubheading>Port basics</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-ptob></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-scm_005fptob_005fdescriptor></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-scm_005fport></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SCM_005fPTAB_005fENTRY></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SCM_005fPTOBNUM></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-scm_005fptobs></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">There are two main data structures. A port type object (ptob) is of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_ptob_descriptor</CODE>. A port instance is of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_port</CODE>. Given an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>variable which points to a port, the corresponding C port object can be obtained using the<CODE>SCM_PTAB_ENTRY</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>macro. The ptob can be obtained by using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_PTOBNUM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to give an index into the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_ptobs</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>global array.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Port-buffers></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubheading>Port buffers</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">An input port always has a read buffer and an output port always has a write buffer. However the size of these buffers is not guaranteed to be more than one byte (e.g., the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>shortbuf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>field in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_port</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>which is used when no other buffer is allocated). The way in which the buffers are allocated depends on the implementation of the ptob. For example in the case of an fport, buffers may be allocated with malloc when the port is created, but in the case of an strport the underlying string is used as the buffer.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=The-rw_005frandom-flag></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubheading>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>rw_random</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>flag</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Special treatment is required for ports which can be seeked at random. Before various operations, such as seeking the port or changing from input to output on a bidirectional port or vice versa, the port implementation must be given a chance to update its state. The write buffer is updated by calling the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>flush</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>ptob procedure and the input buffer is updated by calling the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>end_input</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>ptob procedure. In the case of an fport,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>flush</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>causes buffered output to be written to the file descriptor, while<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>end_input</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>causes the descriptor position to be adjusted to account for buffered input which was never read.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The special treatment must be performed if the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>rw_random</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>flag in the port is non-zero.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=The-rw_005factive-variable></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubheading>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>rw_active</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>variable</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>rw_active</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>variable in the port is only used if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>rw_random</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is set. It&#8217;s defined as an enum with the following values:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DT><CODE>SCM_PORT_READ</CODE></DT>
<DD>
<P>the read buffer may have unread data.</P></DD>
<DT><CODE>SCM_PORT_WRITE</CODE></DT>
<DD>
<P>the write buffer may have unwritten data.</P></DD>
<DT><CODE>SCM_PORT_NEITHER</CODE></DT>
<DD>
<P>neither the write nor the read buffer has data.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Reading-from-a-port_002e></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubheading>Reading from a port.</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To read from a port, it&#8217;s possible to either call existing libguile procedures such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_getc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_read_line</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or to read data from the read buffer directly. Reading from the buffer involves the following steps:</P>
<OL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>Flush output on the port, if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>rw_active</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_PORT_WRITE</CODE>.</LI>
<LI>Fill the read buffer, if it&#8217;s empty, using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_fill_input</CODE>.</LI>
<LI>Read the data from the buffer and update the read position in the buffer. Steps 2) and 3) may be repeated as many times as required.</LI>
<LI>Set rw_active to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_PORT_READ</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>rw_random</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is set.</LI>
<LI>update the port&#8217;s line and column counts.</LI></OL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Writing-to-a-port_002e></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubheading>Writing to a port.</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To write data to a port, calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_lfwrite</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be sufficient for most purposes. This takes care of the following steps:</P>
<OL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>End input on the port, if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>rw_active</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_PORT_READ</CODE>.</LI>
<LI>Pass the data to the ptob implementation using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>ptob procedure. The advantage of using the ptob<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead of manipulating the write buffer directly is that it allows the data to be written in one operation even if the port is using the single-byte<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>shortbuf</CODE>.</LI>
<LI>Set<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>rw_active</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_PORT_WRITE</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>rw_random</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is set.</LI></OL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Port-Implementation></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#C-Port-Interface" rel=prev>C Port Interface</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#I_002fO-Extensions" rel=up>I/O Extensions</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Port-Implementation-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.14.11.2 Port Implementation</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Port-implementation></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This section describes how to implement a new port type in C.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">As described in the previous section, a port type object (ptob) is a structure of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_ptob_descriptor</CODE>. A ptob is created by calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_make_port_type</CODE>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fmake_005fport_005ftype></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_bits</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_port_type</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(char *name, int (*fill_input) (SCM port), void (*write) (SCM port, const void *data, size_t size))</EM></DT>
<DD>
<P>Return a new port type object. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fill_input</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>write</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameters are initial values for those port type fields, as described below. The other fields are initialized with default values and can be changed later.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">All of the elements of the ptob, apart from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>name</CODE>, are procedures which collectively implement the port behaviour. Creating a new port type mostly involves writing these procedures.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DT><CODE>name</CODE></DT>
<DD>
<P>A pointer to a NUL terminated string: the name of the port type. This is the only element of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_ptob_descriptor</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>which is not a procedure. Set via the first argument to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_make_port_type</CODE>.</P></DD>
<DT><CODE>mark</CODE></DT>
<DD>
<P>Called during garbage collection to mark any SCM objects that a port object may contain. It doesn&#8217;t need to be set unless the port has<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>components. Set using</P>
<DL>
<DT><A name=index-scm_005fset_005fport_005fmark></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_set_port_mark</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_bits tc, SCM (*mark) (SCM port))</EM></DT></DL></DD>
<DT><CODE>free</CODE></DT>
<DD>
<P>Called when the port is collected during gc. It should free any resources used by the port. Set using</P>
<DL>
<DT><A name=index-scm_005fset_005fport_005ffree></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_set_port_free</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_bits tc, size_t (*free) (SCM port))</EM></DT></DL></DD>
<DT><CODE>print</CODE></DT>
<DD>
<P>Called when<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called on the port object, to print a port description. E.g., for an fport it may produce something like:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#&lt;input: /etc/passwd 3&gt;</CODE>. Set using</P>
<DL>
<DT><A name=index-scm_005fset_005fport_005fprint></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_set_port_print</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_bits tc, int (*print) (SCM port, SCM dest_port, scm_print_state *pstate))</EM></DT>
<DD>
<P>The first argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the object being printed, the second argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dest_port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is where its description should go.</P></DD></DL></DD>
<DT><CODE>equalp</CODE></DT>
<DD>
<P>Not used at present. Set using</P>
<DL>
<DT><A name=index-scm_005fset_005fport_005fequalp></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_set_port_equalp</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_bits tc, SCM (*equalp) (SCM, SCM))</EM></DT></DL></DD>
<DT><CODE>close</CODE></DT>
<DD>
<P>Called when the port is closed, unless it was collected during gc. It should free any resources used by the port. Set using</P>
<DL>
<DT><A name=index-scm_005fset_005fport_005fclose></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_set_port_close</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_bits tc, int (*close) (SCM port))</EM></DT></DL></DD>
<DT><CODE>write</CODE></DT>
<DD>
<P>Accept data which is to be written using the port. The port implementation may choose to buffer the data instead of processing it directly. Set via the third argument to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_make_port_type</CODE>.</P></DD>
<DT><CODE>flush</CODE></DT>
<DD>
<P>Complete the processing of buffered output data. Reset the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>rw_active</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_PORT_NEITHER</CODE>. Set using</P>
<DL>
<DT><A name=index-scm_005fset_005fport_005fflush></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_set_port_flush</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_bits tc, void (*flush) (SCM port))</EM></DT></DL></DD>
<DT><CODE>end_input</CODE></DT>
<DD>
<P>Perform any synchronization required when switching from input to output on the port. Reset the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>rw_active</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_PORT_NEITHER</CODE>. Set using</P>
<DL>
<DT><A name=index-scm_005fset_005fport_005fend_005finput></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_set_port_end_input</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_bits tc, void (*end_input) (SCM port, int offset))</EM></DT></DL></DD>
<DT><CODE>fill_input</CODE></DT>
<DD>
<P>Read new data into the read buffer and return the first character. It can be assumed that the read buffer is empty when this procedure is called. Set via the second argument to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_make_port_type</CODE>.</P></DD>
<DT><CODE>input_waiting</CODE></DT>
<DD>
<P>Return a lower bound on the number of bytes that could be read from the port without blocking. It can be assumed that the current state of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>rw_active</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_PORT_NEITHER</CODE>. Set using</P>
<DL>
<DT><A name=index-scm_005fset_005fport_005finput_005fwaiting></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_set_port_input_waiting</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_bits tc, int (*input_waiting) (SCM port))</EM></DT></DL></DD>
<DT><CODE>seek</CODE></DT>
<DD>
<P>Set the current position of the port. The procedure can not make any assumptions about the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>rw_active</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>when it&#8217;s called. It can reset the buffers first if desired by using something like:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>if (pt-&gt;rw_active == SCM_PORT_READ)
  scm_end_input (port);
else if (pt-&gt;rw_active == SCM_PORT_WRITE)
  ptob-&gt;flush (port);
</PRE></DIV>
<P>However note that this will have the side effect of discarding any data in the unread-char buffer, in addition to any side effects from the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>end_input</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>flush</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>ptob procedures. This is undesirable when seek is called to measure the current position of the port, i.e.,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(seek p 0 SEEK_CUR)</CODE>. The libguile fport and string port implementations take care to avoid this problem.</P>
<P>The procedure is set using</P>
<DL>
<DT><A name=index-scm_005fset_005fport_005fseek></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_set_port_seek</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_bits tc, scm_t_off (*seek) (SCM port, scm_t_off offset, int whence))</EM></DT></DL></DD>
<DT><CODE>truncate</CODE></DT>
<DD>
<P>Truncate the port data to be specified length. It can be assumed that the current state of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>rw_active</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_PORT_NEITHER</CODE>. Set using</P>
<DL>
<DT><A name=index-scm_005fset_005fport_005ftruncate></A>Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_set_port_truncate</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_bits tc, void (*truncate) (SCM port, scm_t_off length))</EM></DT></DL></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=BOM-Handling></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#I_002fO-Extensions" rel=prev>I/O Extensions</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Input-and-Output" rel=up>Input and Output</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Handling-of-Unicode-byte-order-marks_002e></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.14.12 Handling of Unicode byte order marks.</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-BOM></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-byte-order-mark></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This section documents the finer points of Guile&#8217;s handling of Unicode byte order marks (BOMs). A byte order mark (U+FEFF) is typically found at the start of a UTF-16 or UTF-32 stream, to allow readers to reliably determine the byte order. Occasionally, a BOM is found at the start of a UTF-8 stream, but this is much less common and not generally recommended.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile attempts to handle BOMs automatically, and in accordance with the recommendations of the Unicode Standard, when the port encoding is set to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>UTF-8</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>UTF-16</CODE>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>UTF-32</CODE>. In brief, Guile automatically writes a BOM at the start of a UTF-16 or UTF-32 stream, and automatically consumes one from the start of a UTF-8, UTF-16, or UTF-32 stream.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">As specified in the Unicode Standard, a BOM is only handled specially at the start of a stream, and only if the port encoding is set to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>UTF-8</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>UTF-16</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>UTF-32</CODE>. If the port encoding is set to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>UTF-16BE</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>UTF-16LE</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>UTF-32BE</CODE>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>UTF-32LE</CODE>, then BOMs are<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>not</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>handled specially, and none of the special handling described in this section applies.</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>To ensure that Guile will properly detect the byte order of a UTF-16 or UTF-32 stream, you must perform a textual read before any writes, seeks, or binary I/O. Guile will not attempt to read a BOM unless a read is explicitly requested at the start of the stream.</LI>
<LI>If a textual write is performed before the first read, then an arbitrary byte order will be chosen. Currently, big endian is the default on all platforms, but that may change in the future. If you wish to explicitly control the byte order of an output stream, set the port encoding to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>UTF-16BE</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>UTF-16LE</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>UTF-32BE</CODE>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>UTF-32LE</CODE>, and explicitly write a BOM (<CODE>#\xFEFF</CODE>) if desired.</LI>
<LI>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set-port-encoding!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called in the middle of a stream, Guile treats this as a new logical &#8220;start of stream&#8221; for purposes of BOM handling, and will forget about any BOMs that had previously been seen. Therefore, it may choose a different byte order than had been used previously. This is intended to support multiple logical text streams embedded within a larger binary stream.</LI>
<LI>Binary I/O operations are not guaranteed to update Guile&#8217;s notion of whether the port is at the &#8220;start of the stream&#8221;, nor are they guaranteed to produce or consume BOMs.</LI>
<LI>For ports that support seeking (e.g. normal files), the input and output streams are considered linked: if the user reads first, then a BOM will be consumed (if appropriate), but later writes will<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>not</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>produce a BOM. Similarly, if the user writes first, then later reads will<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>not</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>consume a BOM.</LI>
<LI>For ports that do not support seeking (e.g. pipes, sockets, and terminals), the input and output streams are considered<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>independent</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>for purposes of BOM handling: the first read will consume a BOM (if appropriate), and the first write will<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>also</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>produce a BOM (if appropriate). However, the input and output streams will always use the same byte order.</LI>
<LI>Seeks to the beginning of a file will set the &#8220;start of stream&#8221; flags. Therefore, a subsequent textual read or write will consume or produce a BOM. However, unlike<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set-port-encoding!</CODE>, if a byte order had already been chosen for the port, it will remain in effect after a seek, and cannot be changed by the presence of a BOM. Seeks anywhere other than the beginning of a file clear the &#8220;start of stream&#8221; flags.</LI></UL>