<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>6.7 Compound Data Types</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This chapter describes Guile&#8217;s compound data types. By<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>compound</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>we mean that the primary purpose of these data types is to act as containers for other kinds of data (including other compound objects). For instance, a (non-uniform) vector with length 5 is a container that can hold five arbitrary Scheme objects.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The various kinds of container object differ from each other in how their memory is allocated, how they are indexed, and how particular values can be looked up within them.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Pairs">Pairs</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Scheme&#8217;s basic building block.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Lists">Lists</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Special list functions supported by Guile.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#Vectors">Vectors</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>One-dimensional arrays of Scheme objects.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#Bit-Vectors">Bit Vectors</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Vectors of bits.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#Arrays">Arrays</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Matrices, etc.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=6 href="https://www.gnu.org/software/guile/manual/guile.html#VLists">VLists</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Vector-like lists.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=7 href="https://www.gnu.org/software/guile/manual/guile.html#Record-Overview">Record Overview</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Walking through the maze of record APIs.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=8 href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d9-Records">SRFI-9 Records</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>The standard, recommended record API.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=9 href="https://www.gnu.org/software/guile/manual/guile.html#Records">Records</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Guile&#8217;s historical record API.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Structures">Structures</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Low-level record representation.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Dictionary-Types">Dictionary Types</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>About dictionary types in general.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Association-Lists">Association Lists</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>List-based dictionaries.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#VHashes">VHashes</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>VList-based dictionaries.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Hash-Tables">Hash Tables</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Table-based dictionaries.</TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Pairs></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Lists" rel=next>Lists</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Compound-Data-Types" rel=up>Compound Data Types</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Pairs-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.7.1 Pairs</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Pairs></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Pairs are used to combine two Scheme objects into one compound object. Hence the name: A pair stores a pair of objects.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The data type<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is extremely important in Scheme, just like in any other Lisp dialect. The reason is that pairs are not only used to make two values available as one object, but that pairs are used for constructing lists of values. Because lists are so important in Scheme, they are described in a section of their own (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Lists">Lists</A>).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Pairs can literally get entered in source code or at the REPL, in the so-called<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>dotted list</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>syntax. This syntax consists of an opening parentheses, the first element of the pair, a dot, the second element and a closing parentheses. The following example shows how a pair consisting of the two numbers 1 and 2, and a pair containing the symbols<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>foo</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bar</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be entered. It is very important to write the whitespace before and after the dot, because otherwise the Scheme parser would not be able to figure out where to split the tokens.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(1 . 2)
(foo . bar)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">But beware, if you want to try out these examples, you have to<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>quote</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>the expressions. More information about quotation is available in the section<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Expression-Syntax">Expression Syntax</A>. The correct way to try these examples is as follows.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>'(1 . 2)
&#8658;
(1 . 2)
'(foo . bar)
&#8658;
(foo . bar)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A new pair is made by calling the procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cons</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with two arguments. Then the argument values are stored into a newly allocated pair, and the pair is returned. The name<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cons</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>stands for "construct". Use the procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>pair?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to test whether a given Scheme object is a pair or not.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-cons-3></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-cons></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cons</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x y</EM></DT>
<DT><A name=index-scm_005fcons></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_cons</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x, y)</EM></DT>
<DD>
<P>Return a newly allocated pair whose car is<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and whose cdr is<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>. The pair is guaranteed to be different (in the sense of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq?</CODE>) from every previously existing object.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-pair_003f-3></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-pair_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>pair?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-scm_005fpair_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_pair_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a pair; otherwise return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fis_005fpair></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_is_pair</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM x)</EM></DT>
<DD>
<P>Return 1 when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a pair; otherwise return 0.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The two parts of a pair are traditionally called<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>car</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>cdr</EM>. They can be retrieved with procedures of the same name (<CODE>car</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cdr</CODE>), and can be modified with the procedures<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set-car!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set-cdr!</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Since a very common operation in Scheme programs is to access the car of a car of a pair, or the car of the cdr of a pair, etc., the procedures called<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>caar</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cadr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and so on are also predefined. However, using these procedures is often detrimental to readability, and error-prone. Thus, accessing the contents of a list is usually better achieved using pattern matching techniques (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Pattern-Matching">Pattern Matching</A>).</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-car-3></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-cdr-3></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-car></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>car</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-cdr></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cdr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-scm_005fcar></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_car</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pair)</EM></DT>
<DT><A name=index-scm_005fcdr></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_cdr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pair)</EM></DT>
<DD>
<P>Return the car or the cdr of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pair</VAR>, respectively.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fCAR></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_CAR</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM pair)</EM></DT>
<DT><A name=index-SCM_005fCDR></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_CDR</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM pair)</EM></DT>
<DD>
<P>These two macros are the fastest way to access the car or cdr of a pair; they can be thought of as compiling into a single memory reference.</P>
<P>These macros do no checking at all. The argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pair</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a valid pair.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-cddr></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cddr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-cdar></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cdar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-cadr></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cadr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-caar></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>caar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-cdddr></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cdddr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-cddar></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cddar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-cdadr></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cdadr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-cdaar></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cdaar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-caddr></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>caddr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-cadar></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cadar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-caadr></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>caadr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-caaar></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>caaar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-cddddr></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cddddr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-cdddar></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cdddar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-cddadr></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cddadr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-cddaar></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cddaar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-cdaddr></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cdaddr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-cdadar></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cdadar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-cdaadr></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cdaadr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-cdaaar></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cdaaar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-cadddr></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cadddr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-caddar></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>caddar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-cadadr></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cadadr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-cadaar></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cadaar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-caaddr></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>caaddr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-caadar></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>caadar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-caaadr></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>caaadr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-caaaar></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>caaaar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair</EM></DT>
<DT><A name=index-scm_005fcddr></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_cddr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pair)</EM></DT>
<DT><A name=index-scm_005fcdar></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_cdar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pair)</EM></DT>
<DT><A name=index-scm_005fcadr></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_cadr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pair)</EM></DT>
<DT><A name=index-scm_005fcaar></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_caar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pair)</EM></DT>
<DT><A name=index-scm_005fcdddr></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_cdddr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pair)</EM></DT>
<DT><A name=index-scm_005fcddar></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_cddar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pair)</EM></DT>
<DT><A name=index-scm_005fcdadr></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_cdadr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pair)</EM></DT>
<DT><A name=index-scm_005fcdaar></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_cdaar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pair)</EM></DT>
<DT><A name=index-scm_005fcaddr></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_caddr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pair)</EM></DT>
<DT><A name=index-scm_005fcadar></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_cadar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pair)</EM></DT>
<DT><A name=index-scm_005fcaadr></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_caadr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pair)</EM></DT>
<DT><A name=index-scm_005fcaaar></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_caaar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pair)</EM></DT>
<DT><A name=index-scm_005fcddddr></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_cddddr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pair)</EM></DT>
<DT><A name=index-scm_005fcdddar></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_cdddar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pair)</EM></DT>
<DT><A name=index-scm_005fcddadr></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_cddadr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pair)</EM></DT>
<DT><A name=index-scm_005fcddaar></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_cddaar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pair)</EM></DT>
<DT><A name=index-scm_005fcdaddr></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_cdaddr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pair)</EM></DT>
<DT><A name=index-scm_005fcdadar></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_cdadar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pair)</EM></DT>
<DT><A name=index-scm_005fcdaadr></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_cdaadr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pair)</EM></DT>
<DT><A name=index-scm_005fcdaaar></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_cdaaar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pair)</EM></DT>
<DT><A name=index-scm_005fcadddr></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_cadddr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pair)</EM></DT>
<DT><A name=index-scm_005fcaddar></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_caddar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pair)</EM></DT>
<DT><A name=index-scm_005fcadadr></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_cadadr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pair)</EM></DT>
<DT><A name=index-scm_005fcadaar></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_cadaar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pair)</EM></DT>
<DT><A name=index-scm_005fcaaddr></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_caaddr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pair)</EM></DT>
<DT><A name=index-scm_005fcaadar></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_caadar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pair)</EM></DT>
<DT><A name=index-scm_005fcaaadr></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_caaadr</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pair)</EM></DT>
<DT><A name=index-scm_005fcaaaar></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_caaaar</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pair)</EM></DT>
<DD>
<P>These procedures are compositions of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>car</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cdr</CODE>, where for example<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>caddr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>could be defined by</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(define caddr (lambda (x) (car (cdr (cdr x)))))
</PRE></DIV>
<P><CODE>cadr</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>caddr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cadddr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>pick out the second, third or fourth elements of a list, respectively. SRFI-1 provides the same under the names<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>second</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>third</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fourth</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Selectors">SRFI-1 Selectors</A>).</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-set_002dcar_0021-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-set_002dcar_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-car!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair value</EM></DT>
<DT><A name=index-scm_005fset_005fcar_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_set_car_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pair, value)</EM></DT>
<DD>
<P>Stores<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the car field of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pair</VAR>. The value returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set-car!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is unspecified.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-set_002dcdr_0021-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-set_002dcdr_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-cdr!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pair value</EM></DT>
<DT><A name=index-scm_005fset_005fcdr_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_set_cdr_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pair, value)</EM></DT>
<DD>
<P>Stores<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the cdr field of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pair</VAR>. The value returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set-cdr!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is unspecified.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Lists></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Vectors" rel=next>Vectors</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Pairs" rel=prev>Pairs</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Compound-Data-Types" rel=up>Compound Data Types</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Lists-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.7.2 Lists</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Lists></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A very important data type in Scheme&#8212;as well as in all other Lisp dialects&#8212;is the data type<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>list</EM>.<A href="https://www.gnu.org/software/guile/manual/guile.html#FOOT6" name=DOCF6><SUP>6</SUP></A></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This is the short definition of what a list is:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>Either the empty list<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>()</CODE>,</LI>
<LI>or a pair which has a list in its cdr.</LI></UL>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#List-Syntax">List Syntax</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Writing literal lists.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#List-Predicates">List Predicates</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Testing lists.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#List-Constructors">List Constructors</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Creating new lists.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#List-Selection">List Selection</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Selecting from lists, getting their length.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#Append_002fReverse">Append/Reverse</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Appending and reversing lists.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=6 href="https://www.gnu.org/software/guile/manual/guile.html#List-Modification">List Modification</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Modifying existing lists.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=7 href="https://www.gnu.org/software/guile/manual/guile.html#List-Searching">List Searching</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Searching for list elements</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=8 href="https://www.gnu.org/software/guile/manual/guile.html#List-Mapping">List Mapping</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Applying procedures to lists.</TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=List-Syntax></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#List-Predicates" rel=next>List Predicates</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Lists" rel=up>Lists</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=List-Read-Syntax></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.7.2.1 List Read Syntax</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The syntax for lists is an opening parentheses, then all the elements of the list (separated by whitespace) and finally a closing parentheses.<A href="https://www.gnu.org/software/guile/manual/guile.html#FOOT7" name=DOCF7><SUP>7</SUP></A>.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(1 2 3)            ; <SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>a list of the numbers 1, 2 and 3</SPAN>
("foo" bar 3.1415) ; <SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>a string, a symbol and a real number</SPAN>
()                 ; <SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>the empty list</SPAN>
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The last example needs a bit more explanation. A list with no elements, called the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>empty list</EM>, is special in some ways. It is used for terminating lists by storing it into the cdr of the last pair that makes up a list. An example will clear that up:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(car '(1))
&#8658;
1
(cdr '(1))
&#8658;
()
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This example also shows that lists have to be quoted when written (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Expression-Syntax">Expression Syntax</A>), because they would otherwise be mistakingly taken as procedure applications (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Simple-Invocation">Simple Invocation</A>).</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=List-Predicates></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#List-Constructors" rel=next>List Constructors</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#List-Syntax" rel=prev>List Syntax</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Lists" rel=up>Lists</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=List-Predicates-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.7.2.2 List Predicates</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Often it is useful to test whether a given Scheme object is a list or not. List-processing procedures could use this information to test whether their input is valid, or they could do different things depending on the datatype of their arguments.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-list_003f-3></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-list_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-scm_005flist_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_list_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a proper list, else<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The predicate<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>null?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is often used in list-processing code to tell whether a given list has run out of elements. That is, a loop somehow deals with the elements of a list until the list satisfies<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>null?</CODE>. Then, the algorithm terminates.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-null_003f-3></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-null_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>null?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x</EM></DT>
<DT><A name=index-scm_005fnull_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_null_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the empty list, else<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fis_005fnull></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_is_null</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM x)</EM></DT>
<DD>
<P>Return 1 when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the empty list; otherwise return 0.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=List-Constructors></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#List-Selection" rel=next>List Selection</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#List-Predicates" rel=prev>List Predicates</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Lists" rel=up>Lists</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=List-Constructors-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.7.2.3 List Constructors</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This section describes the procedures for constructing new lists.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>list</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>simply returns a list where the elements are the arguments,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cons*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is similar, but the last argument is stored in the cdr of the last pair of the list.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-list-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>elem &#8230;</EM></DT>
<DT><A name=index-scm_005flist_005f1></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_list_1</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(elem1)</EM></DT>
<DT><A name=index-scm_005flist_005f2></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_list_2</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(elem1, elem2)</EM></DT>
<DT><A name=index-scm_005flist_005f3></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_list_3</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(elem1, elem2, elem3)</EM></DT>
<DT><A name=index-scm_005flist_005f4></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_list_4</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(elem1, elem2, elem3, elem4)</EM></DT>
<DT><A name=index-scm_005flist_005f5></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_list_5</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(elem1, elem2, elem3, elem4, elem5)</EM></DT>
<DT><A name=index-scm_005flist_005fn></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_list_n</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(elem1, &#8230;, elemN,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_UNDEFINED</CODE>)</EM></DT>
<DD><A name=index-list-4></A>
<P>Return a new list containing elements<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>elem</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=enddots>...</SMALL>.</P>
<P><CODE>scm_list_n</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>takes a variable number of arguments, terminated by the special<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_UNDEFINED</CODE>. That final<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_UNDEFINED</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not included in the list. None of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>elem</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230; can themselves be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_UNDEFINED</CODE>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_list_n</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will terminate at that point.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-cons_002a></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>cons*</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>arg1 arg2 &#8230;</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>list</CODE>, but the last arg provides the tail of the constructed list, returning<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(cons<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(cons<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(cons &#8230;<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>argn</VAR>)))</CODE>. Requires at least one argument. If given one argument, that argument is returned as result. This function is called<CODE>list*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in some other Schemes and in Common LISP.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-list_002dcopy></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list-copy</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst</EM></DT>
<DT><A name=index-scm_005flist_005fcopy></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_list_copy</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(lst)</EM></DT>
<DD>
<P>Return a (newly-created) copy of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dlist></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>n [init]</EM></DT>
<DD>
<P>Create a list containing of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>elements, where each element is initialized to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>init</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>init</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>defaults to the empty list<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if not given.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>list-copy</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>only makes a copy of the pairs which make up the spine of the lists. The list elements are not copied, which means that modifying the elements of the new list also modifies the elements of the old list. On the other hand, applying procedures like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set-cdr!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>delv!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the new list will not alter the old list. If you also need to copy the list elements (making a deep copy), use the procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>copy-tree</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Copying">Copying</A>).</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=List-Selection></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Append_002fReverse" rel=next>Append/Reverse</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#List-Constructors" rel=prev>List Constructors</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Lists" rel=up>Lists</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=List-Selection-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.7.2.4 List Selection</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">These procedures are used to get some information about a list, or to retrieve one or more elements of a list.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-length-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-length></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst</EM></DT>
<DT><A name=index-scm_005flength></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(lst)</EM></DT>
<DD>
<P>Return the number of elements in list<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-last_002dpair></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>last-pair</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst</EM></DT>
<DT><A name=index-scm_005flast_005fpair></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_last_pair</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(lst)</EM></DT>
<DD>
<P>Return the last pair in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>, signalling an error if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is circular.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-list_002dref-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-list_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>list k</EM></DT>
<DT><A name=index-scm_005flist_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_list_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(list, k)</EM></DT>
<DD>
<P>Return the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR>th element from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list</VAR>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-list_002dtail-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-list_002dtail></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list-tail</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst k</EM></DT>
<DT><A name=index-list_002dcdr_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list-cdr-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst k</EM></DT>
<DT><A name=index-scm_005flist_005ftail></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_list_tail</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(lst, k)</EM></DT>
<DD>
<P>Return the "tail" of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>beginning with its<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR>th element. The first element of the list is considered to be element 0.</P>
<P><CODE>list-tail</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>list-cdr-ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are identical. It may help to think of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>list-cdr-ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as accessing the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR>th cdr of the list, or returning the results of cdring<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>times down<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-list_002dhead></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list-head</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst k</EM></DT>
<DT><A name=index-scm_005flist_005fhead></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_list_head</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(lst, k)</EM></DT>
<DD>
<P>Copy the first<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>elements from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>into a new list, and return it.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Append_002fReverse></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#List-Modification" rel=next>List Modification</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#List-Selection" rel=prev>List Selection</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Lists" rel=up>Lists</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Append-and-Reverse></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.7.2.5 Append and Reverse</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>append</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>append!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are used to concatenate two or more lists in order to form a new list.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>reverse</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>reverse!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>return lists with the same elements as their arguments, but in reverse order. The procedure variants with an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>directly modify the pairs which form the list, whereas the other procedures create new pairs. This is why you should be careful when using the side-effecting variants.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-append-4></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-append></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>append</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst &#8230; obj</EM></DT>
<DT><A name=index-append-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>append</STRONG></DT>
<DT><A name=index-append_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>append!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst &#8230; obj</EM></DT>
<DT><A name=index-append_0021-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>append!</STRONG></DT>
<DT><A name=index-scm_005fappend></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_append</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(lstlst)</EM></DT>
<DT><A name=index-scm_005fappend_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_append_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(lstlst)</EM></DT>
<DD>
<P>Return a list comprising all the elements of lists<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230;<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR>. If called with no arguments, return the empty list.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(append '(x) '(y))          &#8658;  (x y)
(append '(a) '(b c d))      &#8658;  (a b c d)
(append '(a (b)) '((c)))    &#8658;  (a (b) (c))
</PRE></DIV>
<P>The last argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may actually be any object; an improper list results if the last argument is not a proper list.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(append '(a b) '(c . d))    &#8658;  (a b c . d)
(append '() 'a)             &#8658;  a
</PRE></DIV>
<P><CODE>append</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>doesn&#8217;t modify the given lists, but the return may share structure with the final<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>append!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is permitted, but not required, to modify the given lists to form its return.</P>
<P>For<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_append</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_append_x</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lstlst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a list of the list operands<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230;<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR>. That<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lstlst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>itself is not modified or used in the return.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-reverse-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-reverse></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>reverse</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst</EM></DT>
<DT><A name=index-reverse_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>reverse!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst [newtail]</EM></DT>
<DT><A name=index-scm_005freverse></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_reverse</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(lst)</EM></DT>
<DT><A name=index-scm_005freverse_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_reverse_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(lst, newtail)</EM></DT>
<DD>
<P>Return a list comprising the elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>, in reverse order.</P>
<P><CODE>reverse</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>constructs a new list.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>reverse!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is permitted, but not required, to modify<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in constructing its return.</P>
<P>For<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>reverse!</CODE>, the optional<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>newtail</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is appended to the result.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>newtail</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>isn&#8217;t reversed, it simply becomes the list tail. For<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_reverse_x</CODE>, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>newtail</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameter is mandatory, but can be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_EOL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if no further tail is required.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=List-Modification></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#List-Searching" rel=next>List Searching</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Append_002fReverse" rel=prev>Append/Reverse</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Lists" rel=up>Lists</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=List-Modification-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.7.2.6 List Modification</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following procedures modify an existing list, either by changing elements of the list, or by changing the list structure itself.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-list_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>list k val</EM></DT>
<DT><A name=index-scm_005flist_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_list_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(list, k, val)</EM></DT>
<DD>
<P>Set the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR>th element of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-list_002dcdr_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list-cdr-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>list k val</EM></DT>
<DT><A name=index-scm_005flist_005fcdr_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_list_cdr_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(list, k, val)</EM></DT>
<DD>
<P>Set the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR>th cdr of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-delq></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>delq</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>item lst</EM></DT>
<DT><A name=index-scm_005fdelq></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_delq</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(item, lst)</EM></DT>
<DD>
<P>Return a newly-created copy of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with elements<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>item</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>removed. This procedure mirrors<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>memq</CODE>:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>delq</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>compares elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>against<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>item</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq?</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-delv></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>delv</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>item lst</EM></DT>
<DT><A name=index-scm_005fdelv></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_delv</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(item, lst)</EM></DT>
<DD>
<P>Return a newly-created copy of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with elements<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eqv?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>item</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>removed. This procedure mirrors<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>memv</CODE>:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>delv</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>compares elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>against<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>item</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eqv?</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-delete></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>delete</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>item lst</EM></DT>
<DT><A name=index-scm_005fdelete></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_delete</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(item, lst)</EM></DT>
<DD>
<P>Return a newly-created copy of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with elements<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>item</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>removed. This procedure mirrors<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>member</CODE>:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>delete</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>compares elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>against<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>item</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE>.</P>
<P>See also SRFI-1 which has an extended<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>delete</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Deleting">SRFI-1 Deleting</A>), and also an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lset-difference</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>which can delete multiple<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>item</VAR>s in one call (<A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Set-Operations">SRFI-1 Set Operations</A>).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-delq_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>delq!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>item lst</EM></DT>
<DT><A name=index-delv_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>delv!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>item lst</EM></DT>
<DT><A name=index-delete_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>delete!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>item lst</EM></DT>
<DT><A name=index-scm_005fdelq_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_delq_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(item, lst)</EM></DT>
<DT><A name=index-scm_005fdelv_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_delv_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(item, lst)</EM></DT>
<DT><A name=index-scm_005fdelete_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_delete_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(item, lst)</EM></DT>
<DD>
<P>These procedures are destructive versions of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>delq</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>delv</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>delete</CODE>: they modify the pointers in the existing<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>rather than creating a new list. Caveat evaluator: Like other destructive list functions, these functions cannot modify the binding of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>, and so cannot be used to delete the first element of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>destructively.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-delq1_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>delq1!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>item lst</EM></DT>
<DT><A name=index-scm_005fdelq1_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_delq1_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(item, lst)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>delq!</CODE>, but only deletes the first occurrence of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>item</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>. Tests for equality using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq?</CODE>. See also<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>delv1!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>delete1!</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-delv1_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>delv1!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>item lst</EM></DT>
<DT><A name=index-scm_005fdelv1_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_delv1_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(item, lst)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>delv!</CODE>, but only deletes the first occurrence of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>item</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>. Tests for equality using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eqv?</CODE>. See also<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>delq1!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>delete1!</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-delete1_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>delete1!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>item lst</EM></DT>
<DT><A name=index-scm_005fdelete1_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_delete1_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(item, lst)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>delete!</CODE>, but only deletes the first occurrence of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>item</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>. Tests for equality using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE>. See also<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>delq1!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>delv1!</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-filter></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>filter</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pred lst</EM></DT>
<DT><A name=index-filter_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>filter!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pred lst</EM></DT>
<DD>
<P>Return a list containing all elements from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>which satisfy the predicate<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred</VAR>. The elements in the result list have the same order as in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>. The order in which<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is applied to the list elements is not specified.</P>
<P><CODE>filter</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not change<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>, but the result may share a tail with it.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>filter!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may modify<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to construct its return.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=List-Searching></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#List-Mapping" rel=next>List Mapping</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#List-Modification" rel=prev>List Modification</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Lists" rel=up>Lists</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=List-Searching-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.7.2.7 List Searching</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following procedures search lists for particular elements. They use different comparison predicates for comparing list elements with the object to be searched. When they fail, they return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, otherwise they return the sublist whose car is equal to the search object, where equality depends on the equality predicate used.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-memq-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-memq></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>memq</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x lst</EM></DT>
<DT><A name=index-scm_005fmemq></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_memq</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x, lst)</EM></DT>
<DD>
<P>Return the first sublist of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>whose car is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>where the sublists of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are the non-empty lists returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(list-tail<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>less than the length of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not occur in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>, then<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(not the empty list) is returned.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-memv-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-memv></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>memv</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x lst</EM></DT>
<DT><A name=index-scm_005fmemv></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_memv</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x, lst)</EM></DT>
<DD>
<P>Return the first sublist of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>whose car is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eqv?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>where the sublists of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are the non-empty lists returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(list-tail<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>less than the length of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not occur in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>, then<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(not the empty list) is returned.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-member-3></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-member></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>member</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x lst</EM></DT>
<DT><A name=index-scm_005fmember></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_member</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(x, lst)</EM></DT>
<DD>
<P>Return the first sublist of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>whose car is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>where the sublists of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are the non-empty lists returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(list-tail<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>less than the length of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not occur in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>, then<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(not the empty list) is returned.</P>
<P>See also SRFI-1 which has an extended<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>member</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function (<A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Searching">SRFI-1 Searching</A>).</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=List-Mapping></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#List-Searching" rel=prev>List Searching</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Lists" rel=up>Lists</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=List-Mapping-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.7.2.8 List Mapping</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">List processing is very convenient in Scheme because the process of iterating over the elements of a list can be highly abstracted. The procedures in this section are the most basic iterating procedures for lists. They take a procedure and one or more lists as arguments, and apply the procedure to each element of the list. They differ in their return value.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-map-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-map></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>map</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc arg1 arg2 &#8230;</EM></DT>
<DT><A name=index-map_002din_002dorder></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>map-in-order</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc arg1 arg2 &#8230;</EM></DT>
<DT><A name=index-scm_005fmap></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_map</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(proc, arg1, args)</EM></DT>
<DD>
<P>Apply<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to each element of the list<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(if only two arguments are given), or to the corresponding elements of the argument lists (if more than two arguments are given). The result(s) of the procedure applications are saved and returned in a list. For<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>map</CODE>, the order of procedure applications is not specified,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>map-in-order</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>applies the procedure from left to right to the list elements.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-for_002deach-3></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-for_002deach></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>for-each</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc arg1 arg2 &#8230;</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>map</CODE>, but the procedure is always applied from left to right, and the result(s) of the procedure applications are thrown away. The return value is not specified.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">See also SRFI-1 which extends these functions to take lists of unequal lengths (<A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Fold-and-Map">SRFI-1 Fold and Map</A>).</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Vectors></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Bit-Vectors" rel=next>Bit Vectors</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Lists" rel=prev>Lists</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Compound-Data-Types" rel=up>Compound Data Types</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Vectors-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.7.3 Vectors</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Vectors></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Vectors are sequences of Scheme objects. Unlike lists, the length of a vector, once the vector is created, cannot be changed. The advantage of vectors over lists is that the time required to access one element of a vector given its<EM>position</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>(synonymous with<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>index</EM>), a zero-origin number, is constant, whereas lists have an access time linear to the position of the accessed element in the list.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Vectors can contain any kind of Scheme object; it is even possible to have different types of objects in the same vector. For vectors containing vectors, you may wish to use arrays, instead. Note, too, that vectors are the special case of one dimensional non-uniform arrays and that most array procedures operate happily on vectors (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Arrays">Arrays</A>).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Also see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d43">SRFI-43</A>, for a comprehensive vector library.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Vector-Syntax">Vector Syntax</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Read syntax for vectors.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Vector-Creation">Vector Creation</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Dynamic vector creation and validation.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#Vector-Accessors">Vector Accessors</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Accessing and modifying vector contents.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#Vector-Accessing-from-C">Vector Accessing from C</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Ways to work with vectors from C.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#Uniform-Numeric-Vectors">Uniform Numeric Vectors</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Vectors of unboxed numeric values.</TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Vector-Syntax></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Vector-Creation" rel=next>Vector Creation</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Vectors" rel=up>Vectors</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Read-Syntax-for-Vectors></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.7.3.1 Read Syntax for Vectors</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Vectors can literally be entered in source code, just like strings, characters or some of the other data types. The read syntax for vectors is as follows: A sharp sign (<CODE>#</CODE>), followed by an opening parentheses, all elements of the vector in their respective read syntax, and finally a closing parentheses. Like strings, vectors do not have to be quoted.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following are examples of the read syntax for vectors; where the first vector only contains numbers and the second three different object types: a string, a symbol and a number in hexadecimal notation.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>#(1 2 3)
#("Hello" foo #xdeadbeef)
</PRE></DIV>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Vector-Creation></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Vector-Accessors" rel=next>Vector Accessors</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Vector-Syntax" rel=prev>Vector Syntax</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Vectors" rel=up>Vectors</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Dynamic-Vector-Creation-and-Validation></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.7.3.2 Dynamic Vector Creation and Validation</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Instead of creating a vector implicitly by using the read syntax just described, you can create a vector dynamically by calling one of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vector</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>list-&gt;vector</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>primitives with the list of Scheme values that you want to place into a vector. The size of the vector thus created is determined implicitly by the number of arguments given.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-vector-4></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-list_002d_003evector-3></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>arg &#8230;</EM></DT>
<DT><A name=index-list_002d_003evector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list-&gt;vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>l</EM></DT>
<DT><A name=index-scm_005fvector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(l)</EM></DT>
<DD>
<P>Return a newly allocated vector composed of the given arguments. Analogous to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>list</CODE>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(vector 'a 'b 'c) &#8658; #(a b c)
</PRE></DIV></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The inverse operation is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vector-&gt;list</CODE>:</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-vector_002d_003elist-3></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_002d_003elist></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-&gt;list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>v</EM></DT>
<DT><A name=index-scm_005fvector_005fto_005flist></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_vector_to_list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(v)</EM></DT>
<DD>
<P>Return a newly allocated list composed of the elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>v</VAR>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(vector-&gt;list #(dah dah didah)) &#8658;  (dah dah didah)
(list-&gt;vector '(dididit dah)) &#8658;  #(dididit dah)
</PRE></DIV></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To allocate a vector with an explicitly specified size, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-vector</CODE>. With this primitive you can also specify an initial value for the vector elements (the same value for all elements, that is):</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-make_002dvector-4></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dvector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>len [fill]</EM></DT>
<DT><A name=index-scm_005fmake_005fvector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(len, fill)</EM></DT>
<DD>
<P>Return a newly allocated vector of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>len</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>elements. If a second argument is given, then each position is initialized to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fill</VAR>. Otherwise the initial contents of each position is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fmake_005fvector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_make_vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(size_t k, SCM fill)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_make_vector</CODE>, but the length is given as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>size_t</CODE>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To check whether an arbitrary Scheme value<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>is</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>a vector, use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vector?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>primitive:</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-vector_003f-3></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-scm_005fvector_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_vector_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a vector, otherwise return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fis_005fvector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_is_vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM obj)</EM></DT>
<DD>
<P>Return non-zero when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a vector, otherwise return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>zero</CODE>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Vector-Accessors></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Vector-Accessing-from-C" rel=next>Vector Accessing from C</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Vector-Creation" rel=prev>Vector Creation</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Vectors" rel=up>Vectors</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Accessing-and-Modifying-Vector-Contents></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.7.3.3 Accessing and Modifying Vector Contents</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>vector-length</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vector-ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>return information about a given vector, respectively its size and the elements that are contained in the vector.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-vector_002dlength-3></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_002dlength></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vector</EM></DT>
<DT><A name=index-scm_005fvector_005flength></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_vector_length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vector)</EM></DT>
<DD>
<P>Return the number of elements in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vector</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as an exact integer.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fvector_005flength></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>size_t</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_vector_length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM vec)</EM></DT>
<DD>
<P>Return the number of elements in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>size_t</CODE>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-vector_002dref-4></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec k</EM></DT>
<DT><A name=index-scm_005fvector_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_vector_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec, k)</EM></DT>
<DD>
<P>Return the contents of position<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a valid index of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(vector-ref #(1 1 2 3 5 8 13 21) 5) &#8658; 8
(vector-ref #(1 1 2 3 5 8 13 21)
    (let ((i (round (* 2 (acos -1)))))
      (if (inexact? i)
        (inexact-&gt;exact i)
           i))) &#8658; 13
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fvector_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_vector_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM vec, size_t k)</EM></DT>
<DD>
<P>Return the contents of position<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>size_t</CODE>) of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A vector created by one of the dynamic vector constructor procedures (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Vector-Creation">Vector Creation</A>) can be modified using the following procedures.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><EM>NOTE:</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>According to R5RS, it is an error to use any of these procedures on a literally read vector, because such vectors should be considered as constants. Currently, however, Guile does not detect this error.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-vector_002dset_0021-3></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec k obj</EM></DT>
<DT><A name=index-scm_005fvector_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_vector_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec, k, obj)</EM></DT>
<DD>
<P>Store<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in position<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a valid index of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR>. The value returned by &#8216;<SAMP>vector-set!</SAMP>&#8217; is unspecified.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(let ((vec (vector 0 '(2 2 2 2) "Anna")))
  (vector-set! vec 1 '("Sue" "Sue"))
  vec) &#8658;  #(0 ("Sue" "Sue") "Anna")
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fvector_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_vector_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM vec, size_t k, SCM obj)</EM></DT>
<DD>
<P>Store<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in position<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>k</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>size_t</CODE>) of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR>.</P></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-vector_002dfill_0021-3></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_002dfill_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-fill!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec fill</EM></DT>
<DT><A name=index-scm_005fvector_005ffill_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_vector_fill_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec, fill)</EM></DT>
<DD>
<P>Store<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fill</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in every position of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR>. The value returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vector-fill!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_002dcopy></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-copy</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec</EM></DT>
<DT><A name=index-scm_005fvector_005fcopy></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_vector_copy</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec)</EM></DT>
<DD>
<P>Return a copy of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_002dmove_002dleft_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-move-left!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec1 start1 end1 vec2 start2</EM></DT>
<DT><A name=index-scm_005fvector_005fmove_005fleft_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_vector_move_left_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec1, start1, end1, vec2, start2)</EM></DT>
<DD>
<P>Copy elements from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec1</VAR>, positions<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end1</VAR>, to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>starting at position<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start2</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are inclusive indices;<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is exclusive.</P>
<P><CODE>vector-move-left!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>copies elements in leftmost order. Therefore, in the case where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>refer to the same vector,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vector-move-left!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is usually appropriate when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is greater than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start2</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vector_002dmove_002dright_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vector-move-right!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec1 start1 end1 vec2 start2</EM></DT>
<DT><A name=index-scm_005fvector_005fmove_005fright_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_vector_move_right_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec1, start1, end1, vec2, start2)</EM></DT>
<DD>
<P>Copy elements from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec1</VAR>, positions<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end1</VAR>, to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>starting at position<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start2</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are inclusive indices;<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is exclusive.</P>
<P><CODE>vector-move-right!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>copies elements in rightmost order. Therefore, in the case where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>refer to the same vector,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vector-move-right!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is usually appropriate when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is less than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start2</VAR>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Vector-Accessing-from-C></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Uniform-Numeric-Vectors" rel=next>Uniform Numeric Vectors</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Vector-Accessors" rel=prev>Vector Accessors</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Vectors" rel=up>Vectors</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Vector-Accessing-from-C-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.7.3.4 Vector Accessing from C</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A vector can be read and modified from C with the functions<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_c_vector_ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_c_vector_set_x</CODE>, for example. In addition to these functions, there are two more ways to access vectors from C that might be more efficient in certain situations: you can restrict yourself to<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>simple vectors</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>and then use the very fast<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>simple vector macros</EM>; or you can use the very general framework for accessing all kinds of arrays (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Accessing-Arrays-from-C">Accessing Arrays from C</A>), which is more verbose, but can deal efficiently with all kinds of vectors (and arrays). For vectors, you can use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_vector_elements</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_vector_writable_elements</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>functions as shortcuts.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fis_005fsimple_005fvector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_is_simple_vector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM obj)</EM></DT>
<DD>
<P>Return non-zero if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a simple vector, else return zero. A simple vector is a vector that can be used with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_SIMPLE_*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>macros below.</P>
<P>The following functions are guaranteed to return simple vectors:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_make_vector</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_c_make_vector</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_vector</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_list_to_vector</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fSIMPLE_005fVECTOR_005fLENGTH></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>size_t</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_SIMPLE_VECTOR_LENGTH</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM vec)</EM></DT>
<DD>
<P>Evaluates to the length of the simple vector<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR>. No type checking is done.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fSIMPLE_005fVECTOR_005fREF></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_SIMPLE_VECTOR_REF</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM vec, size_t idx)</EM></DT>
<DD>
<P>Evaluates to the element at position<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>idx</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the simple vector<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR>. No type or range checking is done.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-SCM_005fSIMPLE_005fVECTOR_005fSET></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>SCM_SIMPLE_VECTOR_SET</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM vec, size_t idx, SCM val)</EM></DT>
<DD>
<P>Sets the element at position<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>idx</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the simple vector<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val</VAR>. No type or range checking is done.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fvector_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>const SCM *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_vector_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM vec, scm_t_array_handle *handle, size_t *lenp, ssize_t *incp)</EM></DT>
<DD>
<P>Acquire a handle for the vector<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and return a pointer to the elements of it. This pointer can only be used to read the elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR>. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not a vector, an error is signaled. The handle must eventually be released with<CODE>scm_array_handle_release</CODE>.</P>
<P>The variables pointed to by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lenp</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>incp</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are filled with the number of elements of the vector and the increment (number of elements) between successive elements, respectively. Successive elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>need not be contiguous in their underlying &#8220;root vector&#8221; returned here; hence the increment is not necessarily equal to 1 and may well be negative too (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Shared-Arrays">Shared Arrays</A>).</P>
<P>The following example shows the typical way to use this function. It creates a list of all elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(in reverse order).</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>scm_t_array_handle handle;
size_t i, len;
ssize_t inc;
const SCM *elt;
SCM list;

elt = scm_vector_elements (vec, &amp;handle, &amp;len, &amp;inc);
list = SCM_EOL;
for (i = 0; i &lt; len; i++, elt += inc)
  list = scm_cons (*elt, list);
scm_array_handle_release (&amp;handle);
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fvector_005fwritable_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_vector_writable_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM vec, scm_t_array_handle *handle, size_t *lenp, ssize_t *incp)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_vector_elements</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>but the pointer can be used to modify the vector.</P>
<P>The following example shows the typical way to use this function. It fills a vector with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>scm_t_array_handle handle;
size_t i, len;
ssize_t inc;
SCM *elt;

elt = scm_vector_writable_elements (vec, &amp;handle, &amp;len, &amp;inc);
for (i = 0; i &lt; len; i++, elt += inc)
  *elt = SCM_BOOL_T;
scm_array_handle_release (&amp;handle);
</PRE></DIV></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Uniform-Numeric-Vectors></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Vector-Accessing-from-C" rel=prev>Vector Accessing from C</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Vectors" rel=up>Vectors</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Uniform-Numeric-Vectors-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.7.3.5 Uniform Numeric Vectors</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A uniform numeric vector is a vector whose elements are all of a single numeric type. Guile offers uniform numeric vectors for signed and unsigned 8-bit, 16-bit, 32-bit, and 64-bit integers, two sizes of floating point values, and complex floating-point numbers of these two sizes. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d4">SRFI-4</A>, for more information.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For many purposes, bytevectors work just as well as uniform vectors, and have the advantage that they integrate well with binary input and output. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Bytevectors">Bytevectors</A>, for more information on bytevectors.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Bit-Vectors></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Arrays" rel=next>Arrays</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Vectors" rel=prev>Vectors</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Compound-Data-Types" rel=up>Compound Data Types</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Bit-Vectors-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.7.4 Bit Vectors</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Bit vectors are zero-origin, one-dimensional arrays of booleans. They are displayed as a sequence of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0</CODE>s and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>1</CODE>s prefixed by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#*</CODE>, e.g.,</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(make-bitvector 8 #f) &#8658;
#*00000000
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Bit vectors are the special case of one dimensional bit arrays, and can thus be used with the array procedures, See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Arrays">Arrays</A>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bitvector_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bitvector?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-scm_005fbitvector_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bitvector_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a bitvector, else return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fis_005fbitvector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_is_bitvector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM obj)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a bitvector, else return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dbitvector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-bitvector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>len [fill]</EM></DT>
<DT><A name=index-scm_005fmake_005fbitvector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_bitvector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(len, fill)</EM></DT>
<DD>
<P>Create a new bitvector of length<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>len</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and optionally initialize all elements to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fill</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fmake_005fbitvector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_make_bitvector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(size_t len, SCM fill)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_make_bitvector</CODE>, but the length is given as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>size_t</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bitvector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bitvector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bit &#8230;</EM></DT>
<DT><A name=index-scm_005fbitvector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bitvector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bits)</EM></DT>
<DD>
<P>Create a new bitvector with the arguments as elements.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bitvector_002dlength></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bitvector-length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec</EM></DT>
<DT><A name=index-scm_005fbitvector_005flength></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bitvector_length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec)</EM></DT>
<DD>
<P>Return the length of the bitvector<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fbitvector_005flength></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>size_t</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_bitvector_length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM vec)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_bitvector_length</CODE>, but the length is returned as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>size_t</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bitvector_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bitvector-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec idx</EM></DT>
<DT><A name=index-scm_005fbitvector_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bitvector_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec, idx)</EM></DT>
<DD>
<P>Return the element at index<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>idx</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the bitvector<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fbitvector_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_bitvector_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM vec, size_t idx)</EM></DT>
<DD>
<P>Return the element at index<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>idx</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the bitvector<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bitvector_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bitvector-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec idx val</EM></DT>
<DT><A name=index-scm_005fbitvector_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bitvector_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec, idx, val)</EM></DT>
<DD>
<P>Set the element at index<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>idx</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the bitvector<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true, else clear it.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005fbitvector_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_bitvector_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM vec, size_t idx, SCM val)</EM></DT>
<DD>
<P>Set the element at index<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>idx</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the bitvector<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true, else clear it.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bitvector_002dfill_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bitvector-fill!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec val</EM></DT>
<DT><A name=index-scm_005fbitvector_005ffill_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bitvector_fill_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec, val)</EM></DT>
<DD>
<P>Set all elements of the bitvector<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true, else clear them.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-list_002d_003ebitvector></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list-&gt;bitvector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>list</EM></DT>
<DT><A name=index-scm_005flist_005fto_005fbitvector></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_list_to_bitvector</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(list)</EM></DT>
<DD>
<P>Return a new bitvector initialized with the elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bitvector_002d_003elist></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bitvector-&gt;list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vec</EM></DT>
<DT><A name=index-scm_005fbitvector_005fto_005flist></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bitvector_to_list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vec)</EM></DT>
<DD>
<P>Return a new list initialized with the elements of the bitvector<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vec</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bit_002dcount></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bit-count</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bool bitvector</EM></DT>
<DT><A name=index-scm_005fbit_005fcount></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bit_count</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bool, bitvector)</EM></DT>
<DD>
<P>Return a count of how many entries in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bitvector</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are equal to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bool</VAR>. For example,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(bit-count #f #*000111000)  &#8658; 6
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bit_002dposition></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bit-position</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bool bitvector start</EM></DT>
<DT><A name=index-scm_005fbit_005fposition></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bit_position</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bool, bitvector, start)</EM></DT>
<DD>
<P>Return the index of the first occurrence of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bool</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bitvector</VAR>, starting from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR>. If there is no<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bool</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>entry between<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the end of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bitvector</VAR>, then return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>. For example,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(bit-position #t #*000101 0)  &#8658; 3
(bit-position #f #*0001111 3) &#8658; #f
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bit_002dinvert_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bit-invert!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bitvector</EM></DT>
<DT><A name=index-scm_005fbit_005finvert_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bit_invert_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bitvector)</EM></DT>
<DD>
<P>Modify<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bitvector</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>by replacing each element with its negation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bit_002dset_002a_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bit-set*!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bitvector uvec bool</EM></DT>
<DT><A name=index-scm_005fbit_005fset_005fstar_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bit_set_star_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bitvector, uvec, bool)</EM></DT>
<DD>
<P>Set entries of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bitvector</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bool</VAR>, with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>uvec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>selecting the entries to change. The return value is unspecified.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>uvec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a bit vector, then those entries where it has<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are the ones in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bitvector</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>which are set to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bool</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>uvec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bitvector</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be the same length. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bool</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>it&#8217;s like<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>uvec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is OR&#8217;ed into<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bitvector</VAR>. Or when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bool</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>it can be seen as an ANDNOT.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define bv #*01000010)
(bit-set*! bv #*10010001 #t)
bv
&#8658; #*11010011
</PRE></DIV>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>uvec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a uniform vector of unsigned long integers, then they&#8217;re indexes into<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bitvector</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>which are set to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bool</VAR>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define bv #*01000010)
(bit-set*! bv #u(5 2 7) #t)
bv
&#8658; #*01100111
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-bit_002dcount_002a></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>bit-count*</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>bitvector uvec bool</EM></DT>
<DT><A name=index-scm_005fbit_005fcount_005fstar></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bit_count_star</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(bitvector, uvec, bool)</EM></DT>
<DD>
<P>Return a count of how many entries in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bitvector</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are equal to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bool</VAR>, with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>uvec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>selecting the entries to consider.</P>
<P><VAR>uvec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is interpreted in the same way as for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bit-set*!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>above. Namely, if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>uvec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a bit vector then entries which have<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>there are considered in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bitvector</VAR>. Or if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>uvec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a uniform vector of unsigned long integers then it&#8217;s the indexes in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bitvector</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to consider.</P>
<P>For example,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(bit-count* #*01110111 #*11001101 #t) &#8658; 3
(bit-count* #*01110111 #u(7 0 4) #f)  &#8658; 2
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fbitvector_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>const scm_t_uint32 *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bitvector_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM vec, scm_t_array_handle *handle, size_t *offp, size_t *lenp, ssize_t *incp)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_vector_elements</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Vector-Accessing-from-C">Vector Accessing from C</A>), but for bitvectors. The variable pointed to by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>offp</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is set to the value returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_array_handle_bit_elements_offset</CODE>. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_array_handle_bit_elements</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for how to use the returned pointer and the offset.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fbitvector_005fwritable_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_uint32 *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_bitvector_writable_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM vec, scm_t_array_handle *handle, size_t *offp, size_t *lenp, ssize_t *incp)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_bitvector_elements</CODE>, but the pointer is good for reading and writing.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Arrays></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#VLists" rel=next>VLists</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Bit-Vectors" rel=prev>Bit Vectors</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Compound-Data-Types" rel=up>Compound Data Types</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Arrays-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.7.5 Arrays</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Arrays></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><EM>Arrays</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>are a collection of cells organized into an arbitrary number of dimensions. Each cell can be accessed in constant time by supplying an index for each dimension.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In the current implementation, an array uses a vector of some kind for the actual storage of its elements. Any kind of vector will do, so you can have arrays of uniform numeric values, arrays of characters, arrays of bits, and of course, arrays of arbitrary Scheme values. For example, arrays with an underlying<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>c64vector</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>might be nice for digital signal processing, while arrays made from a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>u8vector</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>might be used to hold gray-scale images.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The number of dimensions of an array is called its<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>rank</EM>. Thus, a matrix is an array of rank 2, while a vector has rank 1. When accessing an array element, you have to specify one exact integer for each dimension. These integers are called the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>indices</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the element. An array specifies the allowed range of indices for each dimension via an inclusive lower and upper bound. These bounds can well be negative, but the upper bound must be greater than or equal to the lower bound minus one. When all lower bounds of an array are zero, it is called a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>zero-origin</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>array.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Arrays can be of rank 0, which could be interpreted as a scalar. Thus, a zero-rank array can store exactly one object and the list of indices of this element is the empty list.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Arrays contain zero elements when one of their dimensions has a zero length. These empty arrays maintain information about their shape: a matrix with zero columns and 3 rows is different from a matrix with 3 columns and zero rows, which again is different from a vector of length zero.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The array procedures are all polymorphic, treating strings, uniform numeric vectors, bytevectors, bit vectors and ordinary vectors as one dimensional arrays.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Array-Syntax">Array Syntax</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Array-Procedures">Array Procedures</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#Shared-Arrays">Shared Arrays</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#Accessing-Arrays-from-C">Accessing Arrays from C</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Array-Syntax></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Array-Procedures" rel=next>Array Procedures</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Arrays" rel=up>Arrays</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Array-Syntax-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.7.5.1 Array Syntax</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">An array is displayed as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>followed by its rank, followed by a tag that describes the underlying vector, optionally followed by information about its shape, and finally followed by the cells, organized into dimensions using parentheses.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In more words, the array tag is of the form</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>  #&lt;rank&gt;&lt;vectag&gt;&lt;@lower&gt;&lt;:len&gt;&lt;@lower&gt;&lt;:len&gt;...
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">where<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;rank&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a positive integer in decimal giving the rank of the array. It is omitted when the rank is 1 and the array is non-shared and has zero-origin (see below). For shared arrays and for a non-zero origin, the rank is always printed even when it is 1 to distinguish them from ordinary vectors.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;vectag&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>part is the tag for a uniform numeric vector, like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>u8</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>s16</CODE>, etc,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>b</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for bitvectors, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>a</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for strings. It is empty for ordinary vectors.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;@lower&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>part is a &#8216;<SAMP>@</SAMP>&#8217; character followed by a signed integer in decimal giving the lower bound of a dimension. There is one<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;@lower&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for each dimension. When all lower bounds are zero, all<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;@lower&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>parts are omitted.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;:len&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>part is a &#8216;<SAMP>:</SAMP>&#8217; character followed by an unsigned integer in decimal giving the length of a dimension. Like for the lower bounds, there is one<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;:len&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for each dimension, and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;:len&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>part always follows the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;@lower&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>part for a dimension. Lengths are only then printed when they can&#8217;t be deduced from the nested lists of elements of the array literal, which can happen when at least one length is zero.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">As a special case, an array of rank 0 is printed as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#0&lt;vectag&gt;(&lt;scalar&gt;)</CODE>, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;scalar&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the result of printing the single element of the array.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Thus,</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DT><CODE>#(1 2 3)</CODE></DT>
<DD>
<P>is an ordinary array of rank 1 with lower bound 0 in dimension 0. (I.e., a regular vector.)</P></DD>
<DT><CODE>#@2(1 2 3)</CODE></DT>
<DD>
<P>is an ordinary array of rank 1 with lower bound 2 in dimension 0.</P></DD>
<DT><CODE>#2((1 2 3) (4 5 6))</CODE></DT>
<DD>
<P>is a non-uniform array of rank 2; a 3x3 matrix with index ranges 0..2 and 0..2.</P></DD>
<DT><CODE>#u32(0 1 2)</CODE></DT>
<DD>
<P>is a uniform u8 array of rank 1.</P></DD>
<DT><CODE>#2u32@2@3((1 2) (2 3))</CODE></DT>
<DD>
<P>is a uniform u8 array of rank 2 with index ranges 2..3 and 3..4.</P></DD>
<DT><CODE>#2()</CODE></DT>
<DD>
<P>is a two-dimensional array with index ranges 0..-1 and 0..-1, i.e. both dimensions have length zero.</P></DD>
<DT><CODE>#2:0:2()</CODE></DT>
<DD>
<P>is a two-dimensional array with index ranges 0..-1 and 0..1, i.e. the first dimension has length zero, but the second has length 2.</P></DD>
<DT><CODE>#0(12)</CODE></DT>
<DD>
<P>is a rank-zero array with contents 12.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In addition, bytevectors are also arrays, but use a different syntax (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Bytevectors">Bytevectors</A>):</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DT><CODE>#vu8(1 2 3)</CODE></DT>
<DD>
<P>is a 3-byte long bytevector, with contents 1, 2, 3.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Array-Procedures></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Shared-Arrays" rel=next>Shared Arrays</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Array-Syntax" rel=prev>Array Syntax</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Arrays" rel=up>Arrays</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Array-Procedures-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.7.5.2 Array Procedures</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When an array is created, the range of each dimension must be specified, e.g., to create a 2x3 array with a zero-based index:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(make-array 'ho 2 3) &#8658; #2((ho ho ho) (ho ho ho))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The range of each dimension can also be given explicitly, e.g., another way to create the same array:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(make-array 'ho '(0 1) '(0 2)) &#8658; #2((ho ho ho) (ho ho ho))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following procedures can be used with arrays (or vectors). An argument shown as<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>idx</VAR>&#8230; means one parameter for each dimension in the array. A<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>idxlist</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument means a list of such values, one for each dimension.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-array_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>array?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-scm_005farray_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj, unused)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an array, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if not.</P>
<P>The second argument to scm_array_p is there for historical reasons, but it is not used. You should always pass<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM_UNDEFINED</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as its value.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-typed_002darray_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>typed-array?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj type</EM></DT>
<DT><A name=index-scm_005ftyped_005farray_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_typed_array_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj, type)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an array of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if not.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fis_005farray></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_is_array</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM obj)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an array and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if not.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fis_005ftyped_005farray></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>int</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_is_typed_array</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM obj, SCM type)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an array of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if not.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002darray></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-array</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fill bound &#8230;</EM></DT>
<DT><A name=index-scm_005fmake_005farray></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_array</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(fill, bounds)</EM></DT>
<DD>
<P>Equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(make-typed-array #t<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fill</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bound</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>...)</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dtyped_002darray></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-typed-array</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>type fill bound &#8230;</EM></DT>
<DT><A name=index-scm_005fmake_005ftyped_005farray></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_typed_array</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(type, fill, bounds)</EM></DT>
<DD>
<P>Create and return an array that has as many dimensions as there are<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bound</VAR>s and (maybe) fill it with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fill</VAR>.</P>
<P>The underlying storage vector is created according to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR>, which must be a symbol whose name is the &#8216;vectag&#8217; of the array as explained above, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for ordinary, non-specialized arrays.</P>
<P>For example, using the symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>f64</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>will create an array that uses a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>f64vector</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for storing its elements, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>a</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will use a string.</P>
<P>When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fill</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not the special<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>unspecified</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>value, the new array is filled with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fill</VAR>. Otherwise, the initial contents of the array is unspecified. The special<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>unspecified</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>value is stored in the variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*unspecified*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>so that for example<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(make-typed-array 'u32 *unspecified* 4)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>creates a uninitialized<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>u32</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>vector of length 4.</P>
<P>Each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bound</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be a positive non-zero integer<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>, in which case the index for that dimension can range from 0 through<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>-1; or an explicit index range specifier in the form<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(LOWER UPPER)</CODE>, where both<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lower</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>upper</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are integers, possibly less than zero, and possibly the same number (however,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lower</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>cannot be greater than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>upper</VAR>).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-list_002d_003earray></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list-&gt;array</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>dimspec list</EM></DT>
<DD>
<P>Equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(list-&gt;typed-array #t<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dimspec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list</VAR>)</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-list_002d_003etyped_002darray></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list-&gt;typed-array</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>type dimspec list</EM></DT>
<DT><A name=index-scm_005flist_005fto_005ftyped_005farray></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_list_to_typed_array</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(type, dimspec, list)</EM></DT>
<DD>
<P>Return an array of the type indicated by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with elements the same as those of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list</VAR>.</P>
<P>The argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dimspec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>determines the number of dimensions of the array and their lower bounds. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dimspec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an exact integer, it gives the number of dimensions directly and all lower bounds are zero. When it is a list of exact integers, then each element is the lower index bound of a dimension, and there will be as many dimensions as elements in the list.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-array_002dtype></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>array-type</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>array</EM></DT>
<DT><A name=index-scm_005farray_005ftype></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_type</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(array)</EM></DT>
<DD>
<P>Return the type of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>array</VAR>. This is the &#8216;vectag&#8217; used for printing<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>array</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for ordinary arrays) and can be used with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-typed-array</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to create an array of the same kind as<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>array</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-array_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>array-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>array idx &#8230;</EM></DT>
<DT><A name=index-scm_005farray_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(array, idxlist)</EM></DT>
<DD>
<P>Return the element at<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(idx &#8230;)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>array</VAR>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define a (make-array 999 '(1 2) '(3 4)))
(array-ref a 2 4) &#8658; 999
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-array_002din_002dbounds_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>array-in-bounds?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>array idx &#8230;</EM></DT>
<DT><A name=index-scm_005farray_005fin_005fbounds_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_in_bounds_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(array, idxlist)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the given indices would be acceptable to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>array-ref</CODE>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define a (make-array #f '(1 2) '(3 4)))
(array-in-bounds? a 2 3) &#8658; #t
(array-in-bounds? a 0 0) &#8658; #f
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-array_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>array-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>array obj idx &#8230;</EM></DT>
<DT><A name=index-scm_005farray_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(array, obj, idxlist)</EM></DT>
<DD>
<P>Set the element at<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(idx &#8230;)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>array</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR>. The return value is unspecified.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define a (make-array #f '(0 1) '(0 1)))
(array-set! a #t 1 1)
a &#8658; #2((#f #f) (#f #t))
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-array_002dshape></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>array-shape</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>array</EM></DT>
<DT><A name=index-array_002ddimensions></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>array-dimensions</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>array</EM></DT>
<DT><A name=index-scm_005farray_005fdimensions></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_dimensions</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(array)</EM></DT>
<DD>
<P>Return a list of the bounds for each dimension of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>array</VAR>.</P>
<P><CODE>array-shape</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>gives<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>lower</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>upper</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for each dimension.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>array-dimensions</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead returns just<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>upper</VAR>+1</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>for dimensions with a 0 lower bound. Both are suitable as input to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-array</CODE>.</P>
<P>For example,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define a (make-array 'foo '(-1 3) 5))
(array-shape a)      &#8658; ((-1 3) (0 4))
(array-dimensions a) &#8658; ((-1 3) 5)
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-array_002dlength></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>array-length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>array</EM></DT>
<DT><A name=index-scm_005farray_005flength></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(array)</EM></DT>
<DT><A name=index-size_005ft></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>size_t</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_c_array_length (array)</EM></DT>
<DD>
<P>Return the length of an array: its first dimension. It is an error to ask for the length of an array of rank 0.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-array_002drank></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>array-rank</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>array</EM></DT>
<DT><A name=index-scm_005farray_005frank></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_rank</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(array)</EM></DT>
<DD>
<P>Return the rank of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>array</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fc_005farray_005frank></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>size_t</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_array_rank</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM array)</EM></DT>
<DD>
<P>Return the rank of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>array</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>size_t</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-array_002d_003elist></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>array-&gt;list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>array</EM></DT>
<DT><A name=index-scm_005farray_005fto_005flist></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_to_list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(array)</EM></DT>
<DD>
<P>Return a list consisting of all the elements, in order, of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>array</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-array_002dcopy_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>array-copy!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>src dst</EM></DT>
<DT><A name=index-array_002dcopy_002din_002dorder_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>array-copy-in-order!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>src dst</EM></DT>
<DT><A name=index-scm_005farray_005fcopy_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_copy_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(src, dst)</EM></DT>
<DD>
<P>Copy every element from vector or array<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>src</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the corresponding element of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dst</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must have the same rank as<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>src</VAR>, and be at least as large in each dimension. The return value is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-array_002dfill_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>array-fill!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>array fill</EM></DT>
<DT><A name=index-scm_005farray_005ffill_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_fill_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(array, fill)</EM></DT>
<DD>
<P>Store<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fill</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in every element of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>array</VAR>. The value returned is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-array_002dequal_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>array-equal?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>array &#8230;</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if all arguments are arrays with the same shape, the same type, and have corresponding elements which are either<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>array-equal?</CODE>. This function differs from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Equality">Equality</A>) in that all arguments must be arrays.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-array_002dmap_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>array-map!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>dst proc src &#8230;</EM></DT>
<DT><A name=index-array_002dmap_002din_002dorder_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>array-map-in-order!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>dst proc src1 &#8230; srcN</EM></DT>
<DT><A name=index-scm_005farray_005fmap_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_map_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(dst, proc, srclist)</EM></DT>
<DD>
<P>Set each element of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>array to values obtained from calls to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR>. The value returned is unspecified.</P>
<P>Each call is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>elem1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230;<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>elemN</VAR>)</CODE>, where each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>elem</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is from the corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>src</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>array, at the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>index.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>array-map-in-order!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>makes the calls in row-major order,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>array-map!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>makes them in an unspecified order.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>src</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>arrays must have the same number of dimensions as<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dst</VAR>, and must have a range for each dimension which covers the range in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dst</VAR>. This ensures all<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>indices are valid in each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>src</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-array_002dfor_002deach></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>array-for-each</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc src1 src2 &#8230;</EM></DT>
<DT><A name=index-scm_005farray_005ffor_005feach></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_for_each</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(proc, src1, srclist)</EM></DT>
<DD>
<P>Apply<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to each tuple of elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>src1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>src2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230;, in row-major order. The value returned is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-array_002dindex_002dmap_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>array-index-map!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>dst proc</EM></DT>
<DT><A name=index-scm_005farray_005findex_005fmap_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_index_map_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(dst, proc)</EM></DT>
<DD>
<P>Set each element of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dst</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>array to values returned by calls to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR>. The value returned is unspecified.</P>
<P>Each call is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>i1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230;<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>iN</VAR>)</CODE>, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>i1</VAR>&#8230;<VAR>iN</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the destination index, one parameter for each dimension. The order in which the calls are made is unspecified.</P>
<P>For example, to create a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>4x4</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>matrix representing a cyclic group,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>    / 0 1 2 3 \
    | 1 2 3 0 |
    | 2 3 0 1 |
    \ 3 0 1 2 /
</PRE></DIV>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define a (make-array #f 4 4))
(array-index-map! a (lambda (i j)
                      (modulo (+ i j) 4)))
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-uniform_002darray_002dread_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>uniform-array-read!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>ra [port_or_fd [start [end]]]</EM></DT>
<DT><A name=index-scm_005funiform_005farray_005fread_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_uniform_array_read_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(ra, port_or_fd, start, end)</EM></DT>
<DD>
<P>Attempt to read all elements of array<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ra</VAR>, in lexicographic order, as binary objects from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port_or_fd</VAR>. If an end of file is encountered, the objects up to that point are put into<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ra</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(starting at the beginning) and the remainder of the array is unchanged.</P>
<P>The optional arguments<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>allow a specified region of a vector (or linearized array) to be read, leaving the remainder of the vector unchanged.</P>
<P><CODE>uniform-array-read!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the number of objects read.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port_or_fd</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be omitted, in which case it defaults to the value returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(current-input-port)</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-uniform_002darray_002dwrite></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>uniform-array-write</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>ra [port_or_fd [start [end]]]</EM></DT>
<DT><A name=index-scm_005funiform_005farray_005fwrite></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_uniform_array_write</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(ra, port_or_fd, start, end)</EM></DT>
<DD>
<P>Writes all elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ra</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as binary objects to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port_or_fd</VAR>.</P>
<P>The optional arguments<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>start</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>allow a specified region of a vector (or linearized array) to be written.</P>
<P>The number of objects actually written is returned.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port_or_fd</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be omitted, in which case it defaults to the value returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(current-output-port)</CODE>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Shared-Arrays></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Accessing-Arrays-from-C" rel=next>Accessing Arrays from C</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Array-Procedures" rel=prev>Array Procedures</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Arrays" rel=up>Arrays</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Shared-Arrays-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.7.5.3 Shared Arrays</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dshared_002darray></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-shared-array</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>oldarray mapfunc bound &#8230;</EM></DT>
<DT><A name=index-scm_005fmake_005fshared_005farray></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_shared_array</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(oldarray, mapfunc, boundlist)</EM></DT>
<DD>
<P>Return a new array which shares the storage of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>oldarray</VAR>. Changes made through either affect the same underlying storage. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bound</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230; arguments are the shape of the new array, the same as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-array</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Array-Procedures">Array Procedures</A>).</P>
<P><VAR>mapfunc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>translates coordinates from the new array to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>oldarray</VAR>. It&#8217;s called as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>mapfunc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>newidx1 &#8230;)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with one parameter for each dimension of the new array, and should return a list of indices for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>oldarray</VAR>, one for each dimension of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>oldarray</VAR>.</P>
<P><VAR>mapfunc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be affine linear, meaning that each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>oldarray</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>index must be formed by adding integer multiples (possibly negative) of some or all of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>newidx1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>etc, plus a possible integer offset. The multiples and offset must be the same in each call.</P><BR>
<P>One good use for a shared array is to restrict the range of some dimensions, so as to apply say<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>array-for-each</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>array-fill!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to only part of an array. The plain<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>list</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function can be used for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mapfunc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in this case, making no changes to the index values. For example,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(make-shared-array #2((a b c) (d e f) (g h i)) list 3 2)
&#8658; #2((a b) (d e) (g h))
</PRE></DIV>
<P>The new array can have fewer dimensions than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>oldarray</VAR>, for example to take a column from an array.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(make-shared-array #2((a b c) (d e f) (g h i))
                   (lambda (i) (list i 2))
                   '(0 2))
&#8658; #1(c f i)
</PRE></DIV>
<P>A diagonal can be taken by using the single new array index for both row and column in the old array. For example,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(make-shared-array #2((a b c) (d e f) (g h i))
                   (lambda (i) (list i i))
                   '(0 2))
&#8658; #1(a e i)
</PRE></DIV>
<P>Dimensions can be increased by for instance considering portions of a one dimensional array as rows in a two dimensional array. (<CODE>array-contents</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>below can do the opposite, flattening an array.)</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(make-shared-array #1(a b c d e f g h i j k l)
                   (lambda (i j) (list (+ (* i 3) j)))
                   4 3)
&#8658; #2((a b c) (d e f) (g h i) (j k l))
</PRE></DIV>
<P>By negating an index the order that elements appear can be reversed. The following just reverses the column order,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(make-shared-array #2((a b c) (d e f) (g h i))
                   (lambda (i j) (list i (- 2 j)))
                   3 3)
&#8658; #2((c b a) (f e d) (i h g))
</PRE></DIV>
<P>A fixed offset on indexes allows for instance a change from a 0 based to a 1 based array,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define x #2((a b c) (d e f) (g h i)))
(define y (make-shared-array x
                             (lambda (i j) (list (1- i) (1- j)))
                             '(1 3) '(1 3)))
(array-ref x 0 0) &#8658; a
(array-ref y 1 1) &#8658; a
</PRE></DIV>
<P>A multiple on an index allows every Nth element of an array to be taken. The following is every third element,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(make-shared-array #1(a b c d e f g h i j k l)
                   (lambda (i) (list (* i 3)))
                   4)
&#8658; #1(a d g j)
</PRE></DIV>
<P>The above examples can be combined to make weird and wonderful selections from an array, but it&#8217;s important to note that because<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mapfunc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be affine linear, arbitrary permutations are not possible.</P>
<P>In the current implementation,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mapfunc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not called for every access to the new array but only on some sample points to establish a base and stride for new array indices in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>oldarray</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>data. A few sample points are enough because<VAR>mapfunc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is linear.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-shared_002darray_002dincrements></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>shared-array-increments</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>array</EM></DT>
<DT><A name=index-scm_005fshared_005farray_005fincrements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_shared_array_increments</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(array)</EM></DT>
<DD>
<P>For each dimension, return the distance between elements in the root vector.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-shared_002darray_002doffset></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>shared-array-offset</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>array</EM></DT>
<DT><A name=index-scm_005fshared_005farray_005foffset></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_shared_array_offset</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(array)</EM></DT>
<DD>
<P>Return the root vector index of the first element in the array.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-shared_002darray_002droot></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>shared-array-root</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>array</EM></DT>
<DT><A name=index-scm_005fshared_005farray_005froot></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_shared_array_root</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(array)</EM></DT>
<DD>
<P>Return the root vector of a shared array.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-array_002dcontents></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>array-contents</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>array [strict]</EM></DT>
<DT><A name=index-scm_005farray_005fcontents></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_contents</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(array, strict)</EM></DT>
<DD>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>array</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>unrolled</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>into a one dimensional shared array without changing their order (last subscript changing fastest), then<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>array-contents</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns that shared array, otherwise it returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>. All arrays made by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-array</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<CODE>make-typed-array</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be unrolled, some arrays made by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-shared-array</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may not be.</P>
<P>If the optional argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>strict</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is provided, a shared array will be returned only if its elements are stored internally contiguous in memory.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-transpose_002darray></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>transpose-array</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>array dim1 dim2 &#8230;</EM></DT>
<DT><A name=index-scm_005ftranspose_005farray></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_transpose_array</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(array, dimlist)</EM></DT>
<DD>
<P>Return an array sharing contents with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>array</VAR>, but with dimensions arranged in a different order. There must be one<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dim</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument for each dimension of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>array</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dim1</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dim2</VAR>, &#8230; should be integers between 0 and the rank of the array to be returned. Each integer in that range must appear at least once in the argument list.</P>
<P>The values of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dim1</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dim2</VAR>, &#8230; correspond to dimensions in the array to be returned, and their positions in the argument list to dimensions of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>array</VAR>. Several<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dim</VAR>s may have the same value, in which case the returned array will have smaller rank than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>array</VAR>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=lisp><PRE class=lisp>(transpose-array '#2((a b) (c d)) 1 0) &#8658; #2((a c) (b d))
(transpose-array '#2((a b) (c d)) 0 0) &#8658; #1(a d)
(transpose-array '#3(((a b c) (d e f)) ((1 2 3) (4 5 6))) 1 1 0) &#8658;
                #2((a 4) (b 5) (c 6))
</PRE></DIV></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Accessing-Arrays-from-C></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Shared-Arrays" rel=prev>Shared Arrays</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Arrays" rel=up>Arrays</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Accessing-Arrays-from-C-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.7.5.4 Accessing Arrays from C</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For interworking with external C code, Guile provides an API to allow C code to access the elements of a Scheme array. In particular, for uniform numeric arrays, the API exposes the underlying uniform data as a C array of numbers of the relevant type.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">While pointers to the elements of an array are in use, the array itself must be protected so that the pointer remains valid. Such a protected array is said to be<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>reserved</EM>. A reserved array can be read but modifications to it that would cause the pointer to its elements to become invalid are prevented. When you attempt such a modification, an error is signalled.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">(This is similar to locking the array while it is in use, but without the danger of a deadlock. In a multi-threaded program, you will need additional synchronization to avoid modifying reserved arrays.)</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">You must take care to always unreserve an array after reserving it, even in the presence of non-local exits. If a non-local exit can happen between these two calls, you should install a dynwind context that releases the array when it is left (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Dynamic-Wind">Dynamic Wind</A>).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In addition, array reserving and unreserving must be properly paired. For instance, when reserving two or more arrays in a certain order, you need to unreserve them in the opposite order.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Once you have reserved an array and have retrieved the pointer to its elements, you must figure out the layout of the elements in memory. Guile allows slices to be taken out of arrays without actually making a copy, such as making an alias for the diagonal of a matrix that can be treated as a vector. Arrays that result from such an operation are not stored contiguously in memory and when working with their elements directly, you need to take this into account.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The layout of array elements in memory can be defined via a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>mapping function</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>that computes a scalar position from a vector of indices. The scalar position then is the offset of the element with the given indices from the start of the storage block of the array.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In Guile, this mapping function is restricted to be<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>affine</EM>: all mapping functions of Guile arrays can be written as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>p = b + c[0]*i[0] + c[1]*i[1] + ... + c[n-1]*i[n-1]</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>where<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>i[k]</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>k</CODE>th index and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>n</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the rank of the array. For example, a matrix of size 3x3 would have<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>b == 0</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>c[0] == 3</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>c[1] == 1</CODE>. When you transpose this matrix (with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>transpose-array</CODE>, say), you will get an array whose mapping function has<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>b == 0</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>c[0] == 1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>c[1] == 3</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_array_handle_dims</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>gives you (indirect) access to the coefficients<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>c[k]</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that there are no functions for accessing the elements of a character array yet. Once the string implementation of Guile has been changed to use Unicode, we will provide them.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005ft_005farray_005fhandle></A>C Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_t_array_handle</STRONG></DT>
<DD>
<P>This is a structure type that holds all information necessary to manage the reservation of arrays as explained above. Structures of this type must be allocated on the stack and must only be accessed by the functions listed below.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005farray_005fget_005fhandle></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_get_handle</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM array, scm_t_array_handle *handle)</EM></DT>
<DD>
<P>Reserve<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>array</VAR>, which must be an array, and prepare<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handle</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to be used with the functions below. You must eventually call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_array_handle_release</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handle</VAR>, and do this in a properly nested fashion, as explained above. The structure pointed to by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handle</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not need to be initialized before calling this function.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005farray_005fhandle_005frelease></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_handle_release</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_array_handle *handle)</EM></DT>
<DD>
<P>End the array reservation represented by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handle</VAR>. After a call to this function,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handle</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>might be used for another reservation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005farray_005fhandle_005frank></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>size_t</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_handle_rank</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_array_handle *handle)</EM></DT>
<DD>
<P>Return the rank of the array represented by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handle</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005ft_005farray_005fdim></A>C Type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_t_array_dim</STRONG></DT>
<DD>
<P>This structure type holds information about the layout of one dimension of an array. It includes the following fields:</P>
<DL compact>
<DT><CODE>ssize_t lbnd</CODE></DT>
<DT><CODE>ssize_t ubnd</CODE></DT>
<DD>
<P>The lower and upper bounds (both inclusive) of the permissible index range for the given dimension. Both values can be negative, but<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lbnd</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is always less than or equal to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ubnd</VAR>.</P></DD>
<DT><CODE>ssize_t inc</CODE></DT>
<DD>
<P>The distance from one element of this dimension to the next. Note, too, that this can be negative.</P></DD></DL></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005farray_005fhandle_005fdims></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>const scm_t_array_dim *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_handle_dims</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_array_handle *handle)</EM></DT>
<DD>
<P>Return a pointer to a C vector of information about the dimensions of the array represented by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handle</VAR>. This pointer is valid as long as the array remains reserved. As explained above, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_t_array_dim</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>structures returned by this function can be used calculate the position of an element in the storage block of the array from its indices.</P>
<P>This position can then be used as an index into the C array pointer returned by the various<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_array_handle_&lt;foo&gt;_elements</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>functions, or with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_array_handle_ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_array_handle_set</CODE>.</P>
<P>Here is how one can compute the position<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pos</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>of an element given its indices in the vector<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>indices</VAR>:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>ssize_t indices[RANK];
scm_t_array_dim *dims;
ssize_t pos;
size_t i;

pos = 0;
for (i = 0; i &lt; RANK; i++)
  {
    if (indices[i] &lt; dims[i].lbnd || indices[i] &gt; dims[i].ubnd)
      out_of_range ();
    pos += (indices[i] - dims[i].lbnd) * dims[i].inc;
  }
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005farray_005fhandle_005fpos></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>ssize_t</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_handle_pos</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_array_handle *handle, SCM indices)</EM></DT>
<DD>
<P>Compute the position corresponding to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>indices</VAR>, a list of indices. The position is computed as described above for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_array_handle_dims</CODE>. The number of the indices and their range is checked and an appropriate error is signalled for invalid indices.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005farray_005fhandle_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_handle_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_array_handle *handle, ssize_t pos)</EM></DT>
<DD>
<P>Return the element at position<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pos</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the storage block of the array represented by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handle</VAR>. Any kind of array is acceptable. No range checking is done on<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pos</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005farray_005fhandle_005fset></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_handle_set</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_array_handle *handle, ssize_t pos, SCM val)</EM></DT>
<DD>
<P>Set the element at position<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pos</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the storage block of the array represented by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handle</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val</VAR>. Any kind of array is acceptable. No range checking is done on<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pos</VAR>. An error is signalled when the array can not store<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005farray_005fhandle_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>const SCM *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_handle_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_array_handle *handle)</EM></DT>
<DD>
<P>Return a pointer to the elements of a ordinary array of general Scheme values (i.e., a non-uniform array) for reading. This pointer is valid as long as the array remains reserved.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005farray_005fhandle_005fwritable_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_handle_writable_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_array_handle *handle)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_array_handle_elements</CODE>, but the pointer is good for reading and writing.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005farray_005fhandle_005funiform_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>const void *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_handle_uniform_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_array_handle *handle)</EM></DT>
<DD>
<P>Return a pointer to the elements of a uniform numeric array for reading. This pointer is valid as long as the array remains reserved. The size of each element is given by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_array_handle_uniform_element_size</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005farray_005fhandle_005funiform_005fwritable_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>void *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_handle_uniform_writable_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_array_handle *handle)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_array_handle_uniform_elements</CODE>, but the pointer is good reading and writing.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005farray_005fhandle_005funiform_005felement_005fsize></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>size_t</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_handle_uniform_element_size</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_array_handle *handle)</EM></DT>
<DD>
<P>Return the size of one element of the uniform numeric array represented by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handle</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005farray_005fhandle_005fu8_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>const scm_t_uint8 *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_handle_u8_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_array_handle *handle)</EM></DT>
<DT><A name=index-scm_005farray_005fhandle_005fs8_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>const scm_t_int8 *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_handle_s8_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_array_handle *handle)</EM></DT>
<DT><A name=index-scm_005farray_005fhandle_005fu16_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>const scm_t_uint16 *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_handle_u16_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_array_handle *handle)</EM></DT>
<DT><A name=index-scm_005farray_005fhandle_005fs16_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>const scm_t_int16 *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_handle_s16_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_array_handle *handle)</EM></DT>
<DT><A name=index-scm_005farray_005fhandle_005fu32_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>const scm_t_uint32 *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_handle_u32_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_array_handle *handle)</EM></DT>
<DT><A name=index-scm_005farray_005fhandle_005fs32_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>const scm_t_int32 *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_handle_s32_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_array_handle *handle)</EM></DT>
<DT><A name=index-scm_005farray_005fhandle_005fu64_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>const scm_t_uint64 *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_handle_u64_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_array_handle *handle)</EM></DT>
<DT><A name=index-scm_005farray_005fhandle_005fs64_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>const scm_t_int64 *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_handle_s64_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_array_handle *handle)</EM></DT>
<DT><A name=index-scm_005farray_005fhandle_005ff32_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>const float *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_handle_f32_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_array_handle *handle)</EM></DT>
<DT><A name=index-scm_005farray_005fhandle_005ff64_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>const double *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_handle_f64_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_array_handle *handle)</EM></DT>
<DT><A name=index-scm_005farray_005fhandle_005fc32_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>const float *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_handle_c32_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_array_handle *handle)</EM></DT>
<DT><A name=index-scm_005farray_005fhandle_005fc64_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>const double *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_handle_c64_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_array_handle *handle)</EM></DT>
<DD>
<P>Return a pointer to the elements of a uniform numeric array of the indicated kind for reading. This pointer is valid as long as the array remains reserved.</P>
<P>The pointers for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>c32</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>c64</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>uniform numeric arrays point to pairs of floating point numbers. The even index holds the real part, the odd index the imaginary part of the complex number.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005farray_005fhandle_005fu8_005fwritable_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_uint8 *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_handle_u8_writable_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_array_handle *handle)</EM></DT>
<DT><A name=index-scm_005farray_005fhandle_005fs8_005fwritable_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_int8 *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_handle_s8_writable_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_array_handle *handle)</EM></DT>
<DT><A name=index-scm_005farray_005fhandle_005fu16_005fwritable_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_uint16 *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_handle_u16_writable_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_array_handle *handle)</EM></DT>
<DT><A name=index-scm_005farray_005fhandle_005fs16_005fwritable_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_int16 *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_handle_s16_writable_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_array_handle *handle)</EM></DT>
<DT><A name=index-scm_005farray_005fhandle_005fu32_005fwritable_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_uint32 *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_handle_u32_writable_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_array_handle *handle)</EM></DT>
<DT><A name=index-scm_005farray_005fhandle_005fs32_005fwritable_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_int32 *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_handle_s32_writable_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_array_handle *handle)</EM></DT>
<DT><A name=index-scm_005farray_005fhandle_005fu64_005fwritable_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_uint64 *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_handle_u64_writable_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_array_handle *handle)</EM></DT>
<DT><A name=index-scm_005farray_005fhandle_005fs64_005fwritable_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_int64 *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_handle_s64_writable_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_array_handle *handle)</EM></DT>
<DT><A name=index-scm_005farray_005fhandle_005ff32_005fwritable_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>float *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_handle_f32_writable_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_array_handle *handle)</EM></DT>
<DT><A name=index-scm_005farray_005fhandle_005ff64_005fwritable_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>double *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_handle_f64_writable_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_array_handle *handle)</EM></DT>
<DT><A name=index-scm_005farray_005fhandle_005fc32_005fwritable_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>float *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_handle_c32_writable_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_array_handle *handle)</EM></DT>
<DT><A name=index-scm_005farray_005fhandle_005fc64_005fwritable_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>double *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_handle_c64_writable_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_array_handle *handle)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_array_handle_&lt;kind&gt;_elements</CODE>, but the pointer is good for reading and writing.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005farray_005fhandle_005fbit_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>const scm_t_uint32 *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_handle_bit_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_array_handle *handle)</EM></DT>
<DD>
<P>Return a pointer to the words that store the bits of the represented array, which must be a bit array.</P>
<P>Unlike other arrays, bit arrays have an additional offset that must be figured into index calculations. That offset is returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_array_handle_bit_elements_offset</CODE>.</P>
<P>To find a certain bit you first need to calculate its position as explained above for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_array_handle_dims</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and then add the offset. This gives the absolute position of the bit, which is always a non-negative integer.</P>
<P>Each word of the bit array storage block contains exactly 32 bits, with the least significant bit in that word having the lowest absolute position number. The next word contains the next 32 bits.</P>
<P>Thus, the following code can be used to access a bit whose position according to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_array_handle_dims</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is given in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pos</VAR>:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>SCM bit_array;
scm_t_array_handle handle;
scm_t_uint32 *bits;
ssize_t pos;
size_t abs_pos;
size_t word_pos, mask;

scm_array_get_handle (&amp;bit_array, &amp;handle);
bits = scm_array_handle_bit_elements (&amp;handle);

pos = ...
abs_pos = pos + scm_array_handle_bit_elements_offset (&amp;handle);
word_pos = abs_pos / 32;
mask = 1L &lt;&lt; (abs_pos % 32);

if (bits[word_pos] &amp; mask)
  /* bit is set. */

scm_array_handle_release (&amp;handle);
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005farray_005fhandle_005fbit_005fwritable_005felements></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scm_t_uint32 *</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_array_handle_bit_writable_elements</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(scm_t_array_handle *handle)</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_array_handle_bit_elements</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>but the pointer is good for reading and writing. You must take care not to modify bits outside of the allowed index range of the array, even for contiguous arrays.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=VLists></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Record-Overview" rel=next>Record Overview</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Arrays" rel=prev>Arrays</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Compound-Data-Types" rel=up>Compound Data Types</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=VLists-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.7.6 VLists</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-vlist></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 vlist)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module provides an implementation of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>VList</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>data structure designed by Phil Bagwell in 2002. VLists are immutable lists, which can contain any Scheme object. They improve on standard Scheme linked lists in several areas:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>Random access has typically constant-time complexity.</LI>
<LI>Computing the length of a VList has time complexity logarithmic in the number of elements.</LI>
<LI>VLists use less storage space than standard lists.</LI>
<LI>VList elements are stored in contiguous regions, which improves memory locality and leads to more efficient use of hardware caches.</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The idea behind VLists is to store vlist elements in increasingly large contiguous blocks (implemented as vectors here). These blocks are linked to one another using a pointer to the next block and an offset within that block. The size of these blocks form a geometric series with ratio<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>block-growth-factor</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(2 by default).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The VList structure also serves as the basis for the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>VList-based hash lists</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>or &#8220;vhashes&#8221;, an immutable dictionary type (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#VHashes">VHashes</A>).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">However, the current implementation in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 vlist)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>has several noteworthy shortcomings:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>It is<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>not</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>thread-safe. Although operations on vlists are all<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>referentially transparent</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>(i.e., purely functional), adding elements to a vlist with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vlist-cons</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>mutates part of its internal structure, which makes it non-thread-safe. This could be fixed, but it would slow down<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vlist-cons</CODE>.</LI>
<LI><CODE>vlist-cons</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>always allocates at least as much memory as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cons</CODE>. Again, Phil Bagwell describes how to fix it, but that would require tuning the garbage collector in a way that may not be generally beneficial.</LI>
<LI><CODE>vlist-cons</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a Scheme procedure compiled to bytecode, and it does not compete with the straightforward C implementation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cons</CODE>, and with the fact that the VM has a special<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cons</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction.</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">We hope to address these in the future.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The programming interface exported by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 vlist)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is defined below. Most of it is the same as SRFI-1 with an added<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vlist-</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>prefix to function names.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vlist_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vlist?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>Return true if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a VList.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vlist_002dnull></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vlist-null</STRONG></DT>
<DD>
<P>The empty VList. Note that it&#8217;s possible to create an empty VList not<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vlist-null</CODE>; thus, callers should always use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vlist-null?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>when testing whether a VList is empty.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vlist_002dnull_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vlist-null?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vlist</EM></DT>
<DD>
<P>Return true if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vlist</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is empty.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vlist_002dcons></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vlist-cons</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>item vlist</EM></DT>
<DD>
<P>Return a new vlist with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>item</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as its head and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vlist</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as its tail.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vlist_002dhead></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vlist-head</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vlist</EM></DT>
<DD>
<P>Return the head of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vlist</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vlist_002dtail></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vlist-tail</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vlist</EM></DT>
<DD>
<P>Return the tail of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vlist</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-block_002dgrowth_002dfactor></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>block-growth-factor</STRONG></DT>
<DD>
<P>A fluid that defines the growth factor of VList blocks, 2 by default.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The functions below provide the usual set of higher-level list operations.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vlist_002dfold></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vlist-fold</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc init vlist</EM></DT>
<DT><A name=index-vlist_002dfold_002dright></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vlist-fold-right</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc init vlist</EM></DT>
<DD>
<P>Fold over<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vlist</VAR>, calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>for each element, as for SRFI-1<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fold</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fold-right</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1"><CODE>fold</CODE></A>).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vlist_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vlist-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vlist index</EM></DT>
<DD>
<P>Return the element at index<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>index</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vlist</VAR>. This is typically a constant-time operation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vlist_002dlength></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vlist-length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vlist</EM></DT>
<DD>
<P>Return the length of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vlist</VAR>. This is typically logarithmic in the number of elements in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vlist</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vlist_002dreverse></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vlist-reverse</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vlist</EM></DT>
<DD>
<P>Return a new<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vlist</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>whose content are those of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vlist</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in reverse order.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vlist_002dmap></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vlist-map</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc vlist</EM></DT>
<DD>
<P>Map<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>over the elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vlist</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and return a new vlist.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vlist_002dfor_002deach></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vlist-for-each</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc vlist</EM></DT>
<DD>
<P>Call<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>on each element of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vlist</VAR>. The result is unspecified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vlist_002ddrop></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vlist-drop</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vlist count</EM></DT>
<DD>
<P>Return a new vlist that does not contain the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>first elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vlist</VAR>. This is typically a constant-time operation.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vlist_002dtake></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vlist-take</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vlist count</EM></DT>
<DD>
<P>Return a new vlist that contains only the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>first elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vlist</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vlist_002dfilter></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vlist-filter</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pred vlist</EM></DT>
<DD>
<P>Return a new vlist containing all the elements from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vlist</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>that satisfy<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vlist_002ddelete></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vlist-delete</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>x vlist [equal?]</EM></DT>
<DD>
<P>Return a new vlist corresponding to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vlist</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>without the elements<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>equal?</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vlist_002dunfold></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vlist-unfold</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>p f g seed [tail-gen]</EM></DT>
<DT><A name=index-vlist_002dunfold_002dright></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vlist-unfold-right</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>p f g seed [tail]</EM></DT>
<DD>
<P>Return a new vlist, as for SRFI-1<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unfold</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unfold-right</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1"><CODE>unfold</CODE></A>).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vlist_002dappend></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vlist-append</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vlist &#8230;</EM></DT>
<DD>
<P>Append the given vlists and return the resulting vlist.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-list_002d_003evlist></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>list-&gt;vlist</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>lst</EM></DT>
<DD>
<P>Return a new vlist whose contents correspond to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>lst</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vlist_002d_003elist></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vlist-&gt;list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vlist</EM></DT>
<DD>
<P>Return a new list whose contents match those of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vlist</VAR>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Record-Overview></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d9-Records" rel=next>SRFI-9 Records</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#VLists" rel=prev>VLists</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Compound-Data-Types" rel=up>Compound Data Types</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Record-Overview-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.7.7 Record Overview</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-record></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-structure></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><EM>Records</EM>, also called<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>structures</EM>, are Scheme&#8217;s primary mechanism to define new disjoint types. A<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>record type</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>defines a list of<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fields</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>that instances of the type consist of. This is like C&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Historically, Guile has offered several different ways to define record types and to create records, offering different features, and making different trade-offs. Over the years, each &#8220;standard&#8221; has also come with its own new record interface, leading to a maze of record APIs.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">At the highest level is SRFI-9, a high-level record interface implemented by most Scheme implementations (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d9-Records">SRFI-9 Records</A>). It defines a simple and efficient syntactic abstraction of record types and their associated type predicate, fields, and field accessors. SRFI-9 is suitable for most uses, and this is the recommended way to create record types in Guile. Similar high-level record APIs include SRFI-35 (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d35">SRFI-35</A>) and R6RS records (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#rnrs-records-syntactic">rnrs records syntactic</A>).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Then comes Guile&#8217;s historical &#8220;records&#8221; API (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Records">Records</A>). Record types defined this way are first-class objects. Introspection facilities are available, allowing users to query the list of fields or the value of a specific field at run-time, without prior knowledge of the type.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Finally, the common denominator of these interfaces is Guile&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>structure</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>API (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Structures">Structures</A>). Guile&#8217;s structures are the low-level building block for all other record APIs. Application writers will normally not need to use it.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Records created with these APIs may all be pattern-matched using Guile&#8217;s standard pattern matcher (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Pattern-Matching">Pattern Matching</A>).</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d9-Records></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Records" rel=next>Records</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Record-Overview" rel=prev>Record Overview</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Compound-Data-Types" rel=up>Compound Data Types</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=SRFI_002d9-Records-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.7.8 SRFI-9 Records</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-SRFI_002d9></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-record-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">SRFI-9 standardizes a syntax for defining new record types and creating predicate, constructor, and field getter and setter functions. In Guile this is the recommended option to create new record types (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Record-Overview">Record Overview</A>). It can be used with:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (srfi srfi-9))
</PRE></DIV>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-define_002drecord_002dtype></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>define-record-type</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>type<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>(constructor fieldname &#8230;)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>predicate<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>(fieldname accessor [modifier]) &#8230;</EM></DT>
<DD><BR>
<P>Create a new record type, and make various<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define</CODE>s for using it. This syntax can only occur at the top-level, not nested within some other form.</P>
<P><VAR>type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is bound to the record type, which is as per the return from the core<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-record-type</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>also provides the name for the record, as per<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>record-type-name</CODE>.</P>
<P><VAR>constructor</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is bound to a function to be called as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>constructor</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>fieldval &#8230;)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to create a new record of this type. The arguments are initial values for the fields, one argument for each field, in the order they appear in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-record-type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fieldname</VAR>s provide the names for the record fields, as per the core<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>record-type-fields</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>etc, and are referred to in the subsequent accessor/modifier forms.</P>
<P><VAR>predicate</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is bound to a function to be called as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>predicate</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>obj)</CODE>. It returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>according to whether<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a record of this type.</P>
<P>Each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>accessor</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is bound to a function to be called<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>accessor</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>record)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to retrieve the respective field from a<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>record</VAR>. Similarly each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>modifier</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is bound to a function to be called<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>modifier</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>record val)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to set the respective field in a<VAR>record</VAR>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">An example will illustrate typical usage,</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define-record-type &lt;employee&gt;
  (make-employee name age salary)
  employee?
  (name    employee-name)
  (age     employee-age    set-employee-age!)
  (salary  employee-salary set-employee-salary!))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This creates a new employee data type, with name, age and salary fields. Accessor functions are created for each field, but no modifier function for the name (the intention in this example being that it&#8217;s established only when an employee object is created). These can all then be used as for example,</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>&lt;employee&gt; &#8658; #&lt;record-type &lt;employee&gt;&gt;

(define fred (make-employee "Fred" 45 20000.00))

(employee? fred)        &#8658; #t
(employee-age fred)     &#8658; 45
(set-employee-salary! fred 25000.00)  ;; pay rise
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The functions created by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-record-type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are ordinary top-level<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define</CODE>s. They can be redefined or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as desired, exported from a module, etc.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Non_002dtoplevel-Record-Definitions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=unnumberedsubsubsec>Non-toplevel Record Definitions</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The SRFI-9 specification explicitly disallows record definitions in a non-toplevel context, such as inside<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lambda</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>body or inside a<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>let</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>block. However, Guile&#8217;s implementation does not enforce that restriction.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Custom-Printers></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=unnumberedsubsubsec>Custom Printers</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">You may use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set-record-type-printer!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to customize the default printing behavior of records. This is a Guile extension and is not part of SRFI-9. It is located in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(srfi srfi-9 gnu)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-set_002drecord_002dtype_002dprinter_0021></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-record-type-printer!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>name proc</EM></DT>
<DD>
<P>Where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>corresponds to the first argument of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-record-type</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a procedure accepting two arguments, the record to print, and an output port.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This example prints the employee&#8217;s name in brackets, for instance<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>[Fred]</CODE>.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(set-record-type-printer! &lt;employee&gt;
  (lambda (record port)
    (write-char #\[ port)
    (display (employee-name record) port)
    (write-char #\] port)))
</PRE></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Functional-_0060_0060Setters_0027_0027></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=unnumberedsubsubsec>Functional &#8220;Setters&#8221;</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-functional-setters></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When writing code in a functional style, it is desirable to never alter the contents of records. For such code, a simple way to return new record instances based on existing ones is highly desirable.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(srfi srfi-9 gnu)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module extends SRFI-9 with facilities to return new record instances based on existing ones, only with one or more field values changed&#8212;<EM>functional setters</EM>. First, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-immutable-record-type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>works like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-record-type</CODE>, except that fields are immutable and setters are defined as functional setters.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-define_002dimmutable_002drecord_002dtype></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>define-immutable-record-type</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>type<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>(constructor fieldname &#8230;)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>predicate<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>(fieldname accessor [modifier]) &#8230;</EM></DT>
<DD>
<P>Define<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a new record type, like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-record-type</CODE>. However, the record type is made<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>immutable</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>(records may not be mutated, even with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct-set!</CODE>), and any<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>modifier</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is defined to be a functional setter&#8212;a procedure that returns a new record instance with the specified field changed, and leaves the original unchanged (see example below.)</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In addition, the generic<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set-field</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set-fields</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>macros may be applied to any SRFI-9 record.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-set_002dfield></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-field</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>record (field sub-fields ...) value</EM></DT>
<DD>
<P>Return a new record of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>record</VAR>&#8217;s type whose fields are equal to the corresponding fields of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>record</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>except for the one specified by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>field</VAR>.</P>
<P><VAR>field</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be the name of the getter corresponding to the field of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>record</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>being &#8220;set&#8221;. Subsequent<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sub-fields</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be record getters designating sub-fields within that field value to be set (see example below.)</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-set_002dfields></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-fields</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>record ((field sub-fields ...) value) ...</EM></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set-field</CODE>, but can be used to set more than one field at a time. This expands to code that is more efficient than a series of single<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set-field</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To illustrate the use of functional setters, let&#8217;s assume these two record type definitions:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define-record-type &lt;address&gt;
  (address street city country)
  address?
  (street  address-street)
  (city    address-city)
  (country address-country))

(define-immutable-record-type &lt;person&gt;
  (person age email address)
  person?
  (age     person-age set-person-age)
  (email   person-email set-person-email)
  (address person-address set-person-address))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">First, note that the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;person&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>record type definition introduces named functional setters. These may be used like this:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define fsf-address
  (address "Franklin Street" "Boston" "USA"))

(define rms
  (person 30 "rms@gnu.org" fsf-address))

(and (equal? (set-person-age rms 60)
             (person 60 "rms@gnu.org" fsf-address))
     (= (person-age rms) 30))
&#8658; #t
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here, the original<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;person&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>record, to which<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rms</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is bound, is left unchanged.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Now, suppose we want to change both the street and age of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rms</VAR>. This can be achieved using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set-fields</CODE>:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(set-fields rms
  ((person-age) 60)
  ((person-address address-street) "Temple Place"))
&#8658; #&lt;&lt;person&gt; age: 60 email: "rms@gnu.org"
  address: #&lt;&lt;address&gt; street: "Temple Place" city: "Boston" country: "USA"&gt;&gt;
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Notice how the above changed two fields of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rms</VAR>, including the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>street</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>field of its<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>address</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>field, in a concise way. Also note that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set-fields</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>works equally well for types defined with just<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-record-type</CODE>.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Records></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Structures" rel=next>Structures</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d9-Records" rel=prev>SRFI-9 Records</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Compound-Data-Types" rel=up>Compound Data Types</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Records-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.7.9 Records</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>record type</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a first class object representing a user-defined data type. A<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>record</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an instance of a record type.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that in many ways, this interface is too low-level for every-day use. Most uses of records are better served by SRFI-9 records. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d9-Records">SRFI-9 Records</A>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-record_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>record?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a record of any type and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.</P>
<P>Note that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>record?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be true of any Scheme value; there is no promise that records are disjoint with other Scheme types.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002drecord_002dtype></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-record-type</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>type-name field-names [print]</EM></DT>
<DD>
<P>Create and return a new<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>record-type descriptor</EM>.</P>
<P><VAR>type-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a string naming the type. Currently it&#8217;s only used in the printed representation of records, and in diagnostics.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>field-names</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a list of symbols naming the fields of a record of the type. Duplicates are not allowed among these symbols.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(make-record-type "employee" '(name age salary))
</PRE></DIV>
<P>The optional<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>print</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument is a function used by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>display</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write</CODE>, etc, for printing a record of the new type. It&#8217;s called as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>print</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>record port)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and should look at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>record</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and write to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-record_002dconstructor></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>record-constructor</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>rtd [field-names]</EM></DT>
<DD>
<P>Return a procedure for constructing new members of the type represented by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rtd</VAR>. The returned procedure accepts exactly as many arguments as there are symbols in the given list,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>field-names</VAR>; these are used, in order, as the initial values of those fields in a new record, which is returned by the constructor procedure. The values of any fields not named in that list are unspecified. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>field-names</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument defaults to the list of field names in the call to<CODE>make-record-type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that created the type represented by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rtd</VAR>; if the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>field-names</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument is provided, it is an error if it contains any duplicates or any symbols not in the default list.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-record_002dpredicate></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>record-predicate</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>rtd</EM></DT>
<DD>
<P>Return a procedure for testing membership in the type represented by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rtd</VAR>. The returned procedure accepts exactly one argument and returns a true value if the argument is a member of the indicated record type; it returns a false value otherwise.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-record_002daccessor></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>record-accessor</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>rtd field-name</EM></DT>
<DD>
<P>Return a procedure for reading the value of a particular field of a member of the type represented by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rtd</VAR>. The returned procedure accepts exactly one argument which must be a record of the appropriate type; it returns the current value of the field named by the symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>field-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in that record. The symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>field-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a member of the list of field-names in the call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-record-type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that created the type represented by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rtd</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-record_002dmodifier></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>record-modifier</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>rtd field-name</EM></DT>
<DD>
<P>Return a procedure for writing the value of a particular field of a member of the type represented by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rtd</VAR>. The returned procedure accepts exactly two arguments: first, a record of the appropriate type, and second, an arbitrary Scheme value; it modifies the field named by the symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>field-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in that record to contain the given value. The returned value of the modifier procedure is unspecified. The symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>field-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a member of the list of field-names in the call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-record-type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that created the type represented by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rtd</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-record_002dtype_002ddescriptor></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>record-type-descriptor</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>record</EM></DT>
<DD>
<P>Return a record-type descriptor representing the type of the given record. That is, for example, if the returned descriptor were passed to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>record-predicate</CODE>, the resulting predicate would return a true value when passed the given record. Note that it is not necessarily the case that the returned descriptor is the one that was passed to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>record-constructor</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the call that created the constructor procedure that created the given record.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-record_002dtype_002dname></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>record-type-name</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>rtd</EM></DT>
<DD>
<P>Return the type-name associated with the type represented by rtd. The returned value is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eqv?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument given in the call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-record-type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that created the type represented by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rtd</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-record_002dtype_002dfields></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>record-type-fields</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>rtd</EM></DT>
<DD>
<P>Return a list of the symbols naming the fields in members of the type represented by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rtd</VAR>. The returned value is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the field-names argument given in the call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-record-type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that created the type represented by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rtd</VAR>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Structures></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Dictionary-Types" rel=next>Dictionary Types</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Records" rel=prev>Records</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Compound-Data-Types" rel=up>Compound Data Types</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Structures-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.7.10 Structures</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Structures></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>structure</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a first class data type which holds Scheme values or C words in fields numbered 0 upwards. A<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vtable</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a structure that represents a structure type, giving field types and permissions, and an optional print function for<CODE>write</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>etc.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Structures are lower level than records (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Records">Records</A>). Usually, when you need to represent structured data, you just want to use records. But sometimes you need to implement new kinds of structured data abstractions, and for that purpose structures are useful. Indeed, records in Guile are implemented with structures.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Vtables">Vtables</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Structure-Basics">Structure Basics</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#Vtable-Contents">Vtable Contents</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#Meta_002dVtables">Meta-Vtables</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#Vtable-Example">Vtable Example</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=6 href="https://www.gnu.org/software/guile/manual/guile.html#Tail-Arrays">Tail Arrays</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Vtables></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Structure-Basics" rel=next>Structure Basics</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Structures" rel=up>Structures</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Vtables-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.7.10.1 Vtables</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A vtable is a structure type, specifying its layout, and other information. A vtable is actually itself a structure, but there&#8217;s no need to worry about that initially (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Vtable-Contents">Vtable Contents</A>.)</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dvtable></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-vtable</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fields [print]</EM></DT>
<DD>
<P>Create a new vtable.</P>
<P><VAR>fields</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a string describing the fields in the structures to be created. Each field is represented by two characters, a type letter and a permissions letter, for example<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"pw"</CODE>. The types are as follows.</P>
<UL>
<LI><CODE>p</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8211; a Scheme value. &#8220;p&#8221; stands for &#8220;protected&#8221; meaning it&#8217;s protected against garbage collection.</LI>
<LI><CODE>u</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8211; an arbitrary word of data (an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_t_bits</CODE>). At the Scheme level it&#8217;s read and written as an unsigned integer. &#8220;u&#8221; stands for &#8220;uninterpreted&#8221; (it&#8217;s not treated as a Scheme value), or &#8220;unprotected&#8221; (it&#8217;s not marked during GC), or &#8220;unsigned long&#8221; (its size), or all of these things.</LI>
<LI><CODE>s</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8211; a self-reference. Such a field holds the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value of the structure itself (a circular reference). This can be useful in C code where you might have a pointer to the data array, and want to get the Scheme<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>handle for the structure. In Scheme code it has no use.</LI></UL>
<P>The second letter for each field is a permission code,</P>
<UL>
<LI><CODE>w</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8211; writable, the field can be read and written.</LI>
<LI><CODE>r</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8211; read-only, the field can be read but not written.</LI>
<LI><CODE>o</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8211; opaque, the field can be neither read nor written at the Scheme level. This can be used for fields which should only be used from C code.</LI></UL>
<P>Here are some examples. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Tail-Arrays">Tail Arrays</A>, for information on the legacy tail array facility.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(make-vtable "pw")      ;; one writable field
(make-vtable "prpw")    ;; one read-only and one writable
(make-vtable "pwuwuw")  ;; one scheme and two uninterpreted
</PRE></DIV>
<P>The optional<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>print</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument is a function called by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>display</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(etc) to give a printed representation of a structure created from this vtable. It&#8217;s called<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>print</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>struct port)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and should look at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>struct</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and write to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>. The default print merely gives a form like &#8216;<SAMP>#&lt;struct ADDR:ADDR&gt;</SAMP>&#8217; with a pair of machine addresses.</P>
<P>The following print function for example shows the two fields of its structure.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(make-vtable "prpw"
             (lambda (struct port)
               (format port "#&lt;~a and ~a&gt;"
                       (struct-ref struct 0)
                       (struct-ref struct 1))))
</PRE></DIV></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Structure-Basics></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Vtable-Contents" rel=next>Vtable Contents</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Vtables" rel=prev>Vtables</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Structures" rel=up>Structures</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Structure-Basics-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.7.10.2 Structure Basics</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This section describes the basic procedures for working with structures.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-struct</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>creates a structure, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct-ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct-set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>access its fields.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dstruct></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-struct</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vtable tail-size init &#8230;</EM></DT>
<DT><A name=index-make_002dstruct_002fno_002dtail></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-struct/no-tail</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vtable init &#8230;</EM></DT>
<DD>
<P>Create a new structure, with layout per the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vtable</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Vtables">Vtables</A>).</P>
<P>The optional<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>init</VAR>&#8230; arguments are initial values for the fields of the structure. This is the only way to put values in read-only fields. If there are fewer<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>init</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>arguments than fields then the defaults are<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for a Scheme field (type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>p</CODE>) or 0 for an uninterpreted field (type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>u</CODE>).</P>
<P>Structures also have the ability to allocate a variable number of additional cells at the end, at their tails. However, this legacy<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>tail array</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>facilty is confusing and inefficient, and so we do not recommend it. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Tail-Arrays">Tail Arrays</A>, for more on the legacy tail array interface.</P>
<P>Type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>s</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>self-reference fields, permission<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>o</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>opaque fields, and the count field of a tail array are all ignored for the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>init</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>arguments, ie. an argument is not consumed by such a field. An<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>s</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is always set to the structure itself, an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>o</CODE>is always set to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or 0 (with the intention that C code will do something to it later), and the tail count is always the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tail-size</VAR>.</P>
<P>For example,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define v (make-vtable "prpwpw"))
(define s (make-struct v 0 123 "abc" 456))
(struct-ref s 0) &#8658; 123
(struct-ref s 1) &#8658; "abc"
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-scm_005fmake_005fstruct></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_struct</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM vtable, SCM tail_size, SCM init_list)</EM></DT>
<DT><A name=index-scm_005fc_005fmake_005fstruct></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_make_struct</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM vtable, SCM tail_size, SCM init, ...)</EM></DT>
<DT><A name=index-scm_005fc_005fmake_005fstructv></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>SCM</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_c_make_structv</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(SCM vtable, SCM tail_size, size_t n_inits, scm_t_bits init[])</EM></DT>
<DD>
<P>There are a few ways to make structures from C.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_make_struct</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>takes a list,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_c_make_struct</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>takes variable arguments terminated with SCM_UNDEFINED, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scm_c_make_structv</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>takes a packed array.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-struct_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>struct?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-scm_005fstruct_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_struct_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a structure, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if not.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-struct_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>struct-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>struct n</EM></DT>
<DT><A name=index-scm_005fstruct_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_struct_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(struct, n)</EM></DT>
<DD>
<P>Return the contents of field number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>struct</VAR>. The first field is number 0.</P>
<P>An error is thrown if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is out of range, or if the field cannot be read because it&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>o</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>opaque.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-struct_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>struct-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>struct n value</EM></DT>
<DT><A name=index-scm_005fstruct_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_struct_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(struct, n, value)</EM></DT>
<DD>
<P>Set field number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>struct</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>. The first field is number 0.</P>
<P>An error is thrown if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is out of range, or if the field cannot be written because it&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>r</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>read-only or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>o</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>opaque.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-struct_002dvtable></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>struct-vtable</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>struct</EM></DT>
<DT><A name=index-scm_005fstruct_005fvtable></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_struct_vtable</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(struct)</EM></DT>
<DD>
<P>Return the vtable that describes<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>struct</VAR>.</P>
<P>The vtable is effectively the type of the structure. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Vtable-Contents">Vtable Contents</A>, for more on vtables.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Vtable-Contents></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Meta_002dVtables" rel=next>Meta-Vtables</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Structure-Basics" rel=prev>Structure Basics</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Structures" rel=up>Structures</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Vtable-Contents-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.7.10.3 Vtable Contents</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A vtable is itself a structure. It has a specific set of fields describing various aspects of its<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>instances</EM>: the structures created from a vtable. Some of the fields are internal to Guile, some of them are part of the public interface, and there may be additional fields added on by the user.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Every vtable has a field for the layout of their instances, a field for the procedure used to print its instances, and a field for the name of the vtable itself. Access to the layout and printer is exposed directly via field indexes. Access to the vtable name is exposed via accessor procedures.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vtable_002dindex_002dlayout></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vtable-index-layout</STRONG></DT>
<DT><A name=index-scm_005fvtable_005findex_005flayout></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_vtable_index_layout</STRONG></DT>
<DD>
<P>The field number of the layout specification in a vtable. The layout specification is a symbol like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>pwpw</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>formed from the fields string passed to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-vtable</CODE>, or created by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-struct-layout</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Meta_002dVtables">Meta-Vtables</A>).</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define v (make-vtable "pwpw" 0))
(struct-ref v vtable-index-layout) &#8658; pwpw
</PRE></DIV>
<P>This field is read-only, since the layout of structures using a vtable cannot be changed.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vtable_002dindex_002dprinter></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vtable-index-printer</STRONG></DT>
<DT><A name=index-scm_005fvtable_005findex_005fprinter></A>C Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_vtable_index_printer</STRONG></DT>
<DD>
<P>The field number of the printer function. This field contains<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the default print function should be used.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define (my-print-func struct port)
  ...)
(define v (make-vtable "pwpw" my-print-func))
(struct-ref v vtable-index-printer) &#8658; my-print-func
</PRE></DIV>
<P>This field is writable, allowing the print function to be changed dynamically.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-struct_002dvtable_002dname></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>struct-vtable-name</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vtable</EM></DT>
<DT><A name=index-set_002dstruct_002dvtable_002dname_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-struct-vtable-name!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vtable name</EM></DT>
<DT><A name=index-scm_005fstruct_005fvtable_005fname></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_struct_vtable_name</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vtable)</EM></DT>
<DT><A name=index-scm_005fset_005fstruct_005fvtable_005fname_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_set_struct_vtable_name_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(vtable, name)</EM></DT>
<DD>
<P>Get or set the name of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vtable</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a symbol and is used in the default print function when printing structures created from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vtable</VAR>.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define v (make-vtable "pw"))
(set-struct-vtable-name! v 'my-name)

(define s (make-struct v 0))
(display s) -| #&lt;my-name b7ab3ae0:b7ab3730&gt;
</PRE></DIV></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Meta_002dVtables></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Vtable-Example" rel=next>Vtable Example</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Vtable-Contents" rel=prev>Vtable Contents</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Structures" rel=up>Structures</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Meta_002dVtables-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.7.10.4 Meta-Vtables</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">As a structure, a vtable also has a vtable, which is also a structure. Structures, their vtables, the vtables of the vtables, and so on form a tree of structures. Making a new structure adds a leaf to the tree, and if that structure is a vtable, it may be used to create other leaves.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If you traverse up the tree of vtables, via calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct-vtable</CODE>, eventually you reach a root which is the vtable of itself:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>scheme@(guile-user)&gt; (current-module)
$1 = #&lt;directory (guile-user) 221b090&gt;
scheme@(guile-user)&gt; (struct-vtable $1)
$2 = #&lt;record-type module&gt;
scheme@(guile-user)&gt; (struct-vtable $2)
$3 = #&lt;&lt;standard-vtable&gt; 12c30a0&gt;
scheme@(guile-user)&gt; (struct-vtable $3)
$4 = #&lt;&lt;standard-vtable&gt; 12c3fa0&gt;
scheme@(guile-user)&gt; (struct-vtable $4)
$5 = #&lt;&lt;standard-vtable&gt; 12c3fa0&gt;
scheme@(guile-user)&gt; &lt;standard-vtable&gt;
$6 = #&lt;&lt;standard-vtable&gt; 12c3fa0&gt;
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In this example, we can say that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an instance of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$2</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an instance of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$3</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$3</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an instance of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$4</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$4</CODE>, strangely enough, is an instance of itself. The value bound to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$4</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in this console session also bound to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;standard-vtable&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the default environment.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_003cstandard_002dvtable_003e></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>&lt;standard-vtable&gt;</STRONG></DT>
<DD>
<P>A meta-vtable, useful for making new vtables.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">All of these values are structures. All but<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are vtables. As<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$2</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an instance of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$3</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$3</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a vtable, we can say that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$3</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>meta-vtable</EM>: a vtable that can create vtables.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">With this definition, we can specify more precisely what a vtable is: a vtable is a structure made from a meta-vtable. Making a structure from a meta-vtable runs some special checks to ensure that the first field of the structure is a valid layout. Additionally, if these checks see that the layout of the child vtable contains all the required fields of a vtable, in the correct order, then the child vtable will also be a meta-table, inheriting a magical bit from the parent.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-struct_002dvtable_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>struct-vtable?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-scm_005fstruct_005fvtable_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_struct_vtable_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a vtable structure: an instance of a meta-vtable.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>&lt;standard-vtable&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a root of the vtable tree. (Normally there is only one root in a given Guile process, but due to some legacy interfaces there may be more than one.)</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The set of required fields of a vtable is the set of fields in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;standard-vtable&gt;</CODE>, and is bound to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>standard-vtable-fields</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the default environment. It is possible to create a meta-vtable that with additional fields in its layout, which can be used to create vtables with additional data:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>scheme@(guile-user)&gt; (struct-ref $3 vtable-index-layout)
$6 = pruhsruhpwphuhuhprprpw
scheme@(guile-user)&gt; (struct-ref $4 vtable-index-layout)
$7 = pruhsruhpwphuhuh
scheme@(guile-user)&gt; standard-vtable-fields 
$8 = "pruhsruhpwphuhuh"
scheme@(guile-user)&gt; (struct-ref $2 vtable-offset-user)
$9 = module
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In this continuation of our earlier example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$2</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a vtable that has extra fields, because its vtable,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$3</CODE>, was made from a meta-vtable with an extended layout.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vtable-offset-user</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a convenient definition that indicates the number of fields in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>standard-vtable-fields</CODE>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-standard_002dvtable_002dfields></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>standard-vtable-fields</STRONG></DT>
<DD>
<P>A string containing the orderedq set of fields that a vtable must have.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vtable_002doffset_002duser></A>Scheme Variable:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vtable-offset-user</STRONG></DT>
<DD>
<P>The first index in a vtable that is available for a user.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dstruct_002dlayout></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-struct-layout</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>fields</EM></DT>
<DT><A name=index-scm_005fmake_005fstruct_005flayout></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_make_struct_layout</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(fields)</EM></DT>
<DD>
<P>Return a structure layout symbol, from a<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fields</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>string.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fields</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is as described under<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-vtable</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Vtables">Vtables</A>). An invalid<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fields</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>string is an error.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">With these definitions, one can define<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-vtable</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in this way:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define* (make-vtable fields #:optional printer)
  (make-struct/no-tail &lt;standard-vtable&gt;
    (make-struct-layout fields)
    printer))
</PRE></DIV>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Vtable-Example></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Tail-Arrays" rel=next>Tail Arrays</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Meta_002dVtables" rel=prev>Meta-Vtables</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Structures" rel=up>Structures</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Vtable-Example-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.7.10.5 Vtable Example</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Let us bring these points together with an example. Consider a simple object system with single inheritance. Objects will be normal structures, and classes will be vtables with three extra class fields: the name of the class, the parent class, and the list of fields.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">So, first we need a meta-vtable that allocates instances with these extra class fields.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define &lt;class&gt;
  (make-vtable
   (string-append standard-vtable-fields "pwpwpw")
   (lambda (x port)
     (format port "&lt;&lt;class&gt; ~a&gt;" (class-name x)))))

(define (class? x)
  (and (struct? x)
       (eq? (struct-vtable x) &lt;class&gt;)))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To make a structure with a specific meta-vtable, we will use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-struct/no-tail</CODE>, passing it the computed instance layout and printer, as with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-vtable</CODE>, and additionally the extra three class fields.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define (make-class name parent fields)
  (let* ((fields (compute-fields parent fields))
         (layout (compute-layout fields)))
    (make-struct/no-tail &lt;class&gt;
      layout 
      (lambda (x port)
        (print-instance x port))
      name
      parent
      fields)))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Instances will store their associated data in slots in the structure: as many slots as there are fields. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compute-layout</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure below can compute a layout, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>field-index</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the slot corresponding to a field.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define-syntax-rule (define-accessor name n)
  (define (name obj)
    (struct-ref obj n)))

;; Accessors for classes
(define-accessor class-name (+ vtable-offset-user 0))
(define-accessor class-parent (+ vtable-offset-user 1))
(define-accessor class-fields (+ vtable-offset-user 2))

(define (compute-fields parent fields)
  (if parent
      (append (class-fields parent) fields)
      fields))

(define (compute-layout fields)
  (make-struct-layout
   (string-concatenate (make-list (length fields) "pw"))))

(define (field-index class field)
  (list-index (class-fields class) field))

(define (print-instance x port)
  (format port "&lt;~a" (class-name (struct-vtable x)))
  (for-each (lambda (field idx)
              (format port " ~a: ~a" field (struct-ref x idx)))
            (class-fields (struct-vtable x))
            (iota (length (class-fields (struct-vtable x)))))
  (format port "&gt;"))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">So, at this point we can actually make a few classes:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define-syntax-rule (define-class name parent field ...)
  (define name (make-class 'name parent '(field ...))))

(define-class &lt;surface&gt; #f
  width height)

(define-class &lt;window&gt; &lt;surface&gt;
  x y)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">And finally, make an instance:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(make-struct/no-tail &lt;window&gt; 400 300 10 20)
&#8658; &lt;&lt;window&gt; width: 400 height: 300 x: 10 y: 20&gt;
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">And that&#8217;s that. Note that there are many possible optimizations and feature enhancements that can be made to this object system, and the included GOOPS system does make most of them. For more simple use cases, the records facility is usually sufficient. But sometimes you need to make new kinds of data abstractions, and for that purpose, structs are here.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Tail-Arrays></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Vtable-Example" rel=prev>Vtable Example</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Structures" rel=up>Structures</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Tail-Arrays-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.7.10.6 Tail Arrays</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile&#8217;s structures have a facility whereby each instance of a vtable can contain a variable-length tail array of values. The length of the tail array is stored in the structure. This facility was originally intended to allow C code to expose raw C structures with word-sized tail arrays to Scheme.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">However, the tail array facility is confusing and doesn&#8217;t work very well. It is very rarely used, but it insinuates itself into all invocations of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-struct</CODE>. For this reason the clumsily-named<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-struct/no-tail</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure can actually be more elegant in actual use, because it doesn&#8217;t have a random<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument stuck in the middle.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Tail arrays also inhibit optimization by allowing instances to affect their shapes. In the absence of tail arrays, all instances of a given vtable have the same number and kinds of fields. This uniformity can be exploited by the runtime and the optimizer. The presence of tail arrays make some of these optimizations more difficult.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Finally, the tail array facility is ad-hoc and does not compose with the rest of Guile. If a Guile user wants an array with user-specified length, it&#8217;s best to use a vector. It is more clear in the code, and the standard optimization techniques will do a good job with it.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">That said, we should mention some details about the interface. A vtable that has tail array has upper-case permission descriptors:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>W</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>R</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>O</CODE>, correspoding to tail arrays of writable, read-only, or opaque elements. A tail array permission descriptor may only appear in the last element of a vtable layout.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For exampple, &#8216;<SAMP>pW</SAMP>&#8217; indicates a tail of writable Scheme-valued fields. The &#8216;<SAMP>pW</SAMP>&#8217; field itself holds the tail size, and the tail fields come after it.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define v (make-vtable "prpW")) ;; one fixed then a tail array
(define s (make-struct v 6 "fixed field" 'x 'y))
(struct-ref s 0) &#8658; "fixed field"
(struct-ref s 1) &#8658; 2    ;; tail size
(struct-ref s 2) &#8658; x    ;; tail array ...
(struct-ref s 3) &#8658; y
(struct-ref s 4) &#8658; #f
</PRE></DIV>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Dictionary-Types></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Association-Lists" rel=next>Association Lists</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Structures" rel=prev>Structures</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Compound-Data-Types" rel=up>Compound Data Types</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Dictionary-Types-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.7.11 Dictionary Types</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>dictionary</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>object is a data structure used to index information in a user-defined way. In standard Scheme, the main aggregate data types are lists and vectors. Lists are not really indexed at all, and vectors are indexed only by number (e.g.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(vector-ref foo 5)</CODE>). Often you will find it useful to index your data on some other type; for example, in a library catalog you might want to look up a book by the name of its author. Dictionaries are used to help you organize information in such a way.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">An<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>association list</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>(or<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>alist</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>for short) is a list of key-value pairs. Each pair represents a single quantity or object; the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>car</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the pair is a key which is used to identify the object, and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cdr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the object&#8217;s value.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>hash table</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>also permits you to index objects with arbitrary keys, but in a way that makes looking up any one object extremely fast. A well-designed hash system makes hash table lookups almost as fast as conventional array or vector references.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Alists are popular among Lisp programmers because they use only the language&#8217;s primitive operations (lists,<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>car</EM>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>cdr</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the equality primitives). No changes to the language core are necessary. Therefore, with Scheme&#8217;s built-in list manipulation facilities, it is very convenient to handle data stored in an association list. Also, alists are highly portable and can be easily implemented on even the most minimal Lisp systems.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">However, alists are inefficient, especially for storing large quantities of data. Because we want Guile to be useful for large software systems as well as small ones, Guile provides a rich set of tools for using either association lists or hash tables.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Association-Lists></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#VHashes" rel=next>VHashes</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Dictionary-Types" rel=prev>Dictionary Types</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Compound-Data-Types" rel=up>Compound Data Types</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Association-Lists-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.7.12 Association Lists</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Association-Lists></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Alist></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-association-List></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-alist></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-database></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">An association list is a conventional data structure that is often used to implement simple key-value databases. It consists of a list of entries in which each entry is a pair. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>key</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>of each entry is the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>car</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the pair and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>value</EM>of each entry is the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cdr</CODE>.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>ASSOCIATION LIST ::=  '( (KEY1 . VALUE1)
                         (KEY2 . VALUE2)
                         (KEY3 . VALUE3)
                         &#8230;
                       )
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Association lists are also known, for short, as<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>alists</EM>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The structure of an association list is just one example of the infinite number of possible structures that can be built using pairs and lists. As such, the keys and values in an association list can be manipulated using the general list structure procedures<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cons</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>car</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cdr</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set-car!</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set-cdr!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and so on. However, because association lists are so useful, Guile also provides specific procedures for manipulating them.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Alist-Key-Equality">Alist Key Equality</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Adding-or-Setting-Alist-Entries">Adding or Setting Alist Entries</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=3 href="https://www.gnu.org/software/guile/manual/guile.html#Retrieving-Alist-Entries">Retrieving Alist Entries</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=4 href="https://www.gnu.org/software/guile/manual/guile.html#Removing-Alist-Entries">Removing Alist Entries</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=5 href="https://www.gnu.org/software/guile/manual/guile.html#Sloppy-Alist-Functions">Sloppy Alist Functions</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=6 href="https://www.gnu.org/software/guile/manual/guile.html#Alist-Example">Alist Example</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left></TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Alist-Key-Equality></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Adding-or-Setting-Alist-Entries" rel=next>Adding or Setting Alist Entries</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Association-Lists" rel=up>Association Lists</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Alist-Key-Equality-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.7.12.1 Alist Key Equality</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">All of Guile&#8217;s dedicated association list procedures, apart from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>acons</CODE>, come in three flavours, depending on the level of equality that is required to decide whether an existing key in the association list is the same as the key that the procedure call uses to identify the required entry.</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>Procedures with<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>assq</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>in their name use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to determine key equality.</LI>
<LI>Procedures with<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>assv</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>in their name use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eqv?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to determine key equality.</LI>
<LI>Procedures with<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>assoc</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>in their name use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to determine key equality.</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>acons</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an exception because it is used to build association lists which do not require their entries&#8217; keys to be unique.</P>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Adding-or-Setting-Alist-Entries></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Retrieving-Alist-Entries" rel=next>Retrieving Alist Entries</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Alist-Key-Equality" rel=prev>Alist Key Equality</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Association-Lists" rel=up>Association Lists</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Adding-or-Setting-Alist-Entries-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.7.12.2 Adding or Setting Alist Entries</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>acons</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>adds a new entry to an association list and returns the combined association list. The combined alist is formed by consing the new entry onto the head of the alist specified in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>acons</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure call. So the specified alist is not modified, but its contents become shared with the tail of the combined alist that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>acons</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In the most common usage of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>acons</CODE>, a variable holding the original association list is updated with the combined alist:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(set! address-list (acons name address address-list))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In such cases, it doesn&#8217;t matter that the old and new values of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>address-list</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>share some of their contents, since the old value is usually no longer independently accessible.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>acons</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>adds the specified new entry regardless of whether the alist may already contain entries with keys that are, in some sense, the same as that of the new entry. Thus<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>acons</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is ideal for building alists where there is no concept of key uniqueness.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(set! task-list (acons 3 "pay gas bill" '()))
task-list
&#8658;
((3 . "pay gas bill"))

(set! task-list (acons 3 "tidy bedroom" task-list))
task-list
&#8658;
((3 . "tidy bedroom") (3 . "pay gas bill"))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>assq-set!</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assv-set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assoc-set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are used to add or replace an entry in an association list where there<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>is</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>a concept of key uniqueness. If the specified association list already contains an entry whose key is the same as that specified in the procedure call, the existing entry is replaced by the new one. Otherwise, the new entry is consed onto the head of the old association list to create the combined alist. In all cases, these procedures return the combined alist.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>assq-set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and friends<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>may</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>destructively modify the structure of the old association list in such a way that an existing variable is correctly updated without having to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>it to the value returned:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>address-list
&#8658;
(("mary" . "34 Elm Road") ("james" . "16 Bow Street"))

(assoc-set! address-list "james" "1a London Road")
&#8658;
(("mary" . "34 Elm Road") ("james" . "1a London Road"))

address-list
&#8658;
(("mary" . "34 Elm Road") ("james" . "1a London Road"))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Or they may not:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(assoc-set! address-list "bob" "11 Newington Avenue")
&#8658;
(("bob" . "11 Newington Avenue") ("mary" . "34 Elm Road")
 ("james" . "1a London Road"))

address-list
&#8658;
(("mary" . "34 Elm Road") ("james" . "1a London Road"))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The only safe way to update an association list variable when adding or replacing an entry like this is to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>the variable to the returned value:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(set! address-list
      (assoc-set! address-list "bob" "11 Newington Avenue"))
address-list
&#8658;
(("bob" . "11 Newington Avenue") ("mary" . "34 Elm Road")
 ("james" . "1a London Road"))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Because of this slight inconvenience, you may find it more convenient to use hash tables to store dictionary data. If your application will not be modifying the contents of an alist very often, this may not make much difference to you.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If you need to keep the old value of an association list in a form independent from the list that results from modification by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>acons</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assq-set!</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assv-set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assoc-set!</CODE>, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>list-copy</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to copy the old association list before modifying it.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-acons></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>acons</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>key value alist</EM></DT>
<DT><A name=index-scm_005facons></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_acons</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(key, value, alist)</EM></DT>
<DD>
<P>Add a new key-value pair to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alist</VAR>. A new pair is created whose car is<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and whose cdr is<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>, and the pair is consed onto<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alist</VAR>, and the new list is returned. This function is<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>not</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>destructive;<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alist</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not modified.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-assq_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>assq-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>alist key val</EM></DT>
<DT><A name=index-assv_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>assv-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>alist key value</EM></DT>
<DT><A name=index-assoc_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>assoc-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>alist key value</EM></DT>
<DT><A name=index-scm_005fassq_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_assq_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(alist, key, val)</EM></DT>
<DT><A name=index-scm_005fassv_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_assv_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(alist, key, val)</EM></DT>
<DT><A name=index-scm_005fassoc_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_assoc_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(alist, key, val)</EM></DT>
<DD>
<P>Reassociate<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alist</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>: find any existing<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alist</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>entry for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and associate it with the new<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alist</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not contain an entry for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR>, add a new one. Return the (possibly new) alist.</P>
<P>These functions do not attempt to verify the structure of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alist</VAR>, and so may cause unusual results if passed an object that is not an association list.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Retrieving-Alist-Entries></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Removing-Alist-Entries" rel=next>Removing Alist Entries</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Adding-or-Setting-Alist-Entries" rel=prev>Adding or Setting Alist Entries</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Association-Lists" rel=up>Association Lists</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Retrieving-Alist-Entries-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.7.12.3 Retrieving Alist Entries</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-assq-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-assv-2></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-assoc-3></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>assq</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assv</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assoc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>find the entry in an alist for a given key, and return the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>pair.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assq-ref</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assv-ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assoc-ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>do a similar lookup, but return just the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-assq></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>assq</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>key alist</EM></DT>
<DT><A name=index-assv></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>assv</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>key alist</EM></DT>
<DT><A name=index-assoc></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>assoc</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>key alist</EM></DT>
<DT><A name=index-scm_005fassq></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_assq</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(key, alist)</EM></DT>
<DT><A name=index-scm_005fassv></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_assv</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(key, alist)</EM></DT>
<DT><A name=index-scm_005fassoc></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_assoc</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(key, alist)</EM></DT>
<DD>
<P>Return the first entry in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alist</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR>. The return is the pair<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(KEY . VALUE)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alist</VAR>. If there&#8217;s no matching entry the return is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P>
<P><CODE>assq</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>compares keys with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq?</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assv</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>uses<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eqv?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assoc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>uses<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE>. See also SRFI-1 which has an extended<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assoc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Association-Lists">SRFI-1 Association Lists</A>).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-assq_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>assq-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>alist key</EM></DT>
<DT><A name=index-assv_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>assv-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>alist key</EM></DT>
<DT><A name=index-assoc_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>assoc-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>alist key</EM></DT>
<DT><A name=index-scm_005fassq_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_assq_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(alist, key)</EM></DT>
<DT><A name=index-scm_005fassv_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_assv_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(alist, key)</EM></DT>
<DT><A name=index-scm_005fassoc_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_assoc_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(alist, key)</EM></DT>
<DD>
<P>Return the value from the first entry in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alist</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if there&#8217;s no such entry.</P>
<P><CODE>assq-ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>compares keys with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq?</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assv-ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>uses<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eqv?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assoc-ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>uses<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE>.</P>
<P>Notice these functions have the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument last, like other<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>functions, but this is opposite to what<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assq</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>etc above use.</P>
<P>When the return is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>it can be either<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>not found, or an entry which happens to have value<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cdr</CODE>. Use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assq</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>etc above if you need to differentiate these cases.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Removing-Alist-Entries></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Sloppy-Alist-Functions" rel=next>Sloppy Alist Functions</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Retrieving-Alist-Entries" rel=prev>Retrieving Alist Entries</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Association-Lists" rel=up>Association Lists</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Removing-Alist-Entries-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.7.12.4 Removing Alist Entries</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To remove the element from an association list whose key matches a specified key, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assq-remove!</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assv-remove!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assoc-remove!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(depending, as usual, on the level of equality required between the key that you specify and the keys in the association list).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">As with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assq-set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and friends, the specified alist may or may not be modified destructively, and the only safe way to update a variable containing the alist is to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>it to the value that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assq-remove!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and friends return.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>address-list
&#8658;
(("bob" . "11 Newington Avenue") ("mary" . "34 Elm Road")
 ("james" . "1a London Road"))

(set! address-list (assoc-remove! address-list "mary"))
address-list
&#8658;
(("bob" . "11 Newington Avenue") ("james" . "1a London Road"))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that, when<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assq/v/oc-remove!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used to modify an association list that has been constructed only using the corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assq/v/oc-set!</CODE>, there can be at most one matching entry in the alist, so the question of multiple entries being removed in one go does not arise. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assq/v/oc-remove!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is applied to an association list that has been constructed using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>acons</CODE>, or an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assq/v/oc-set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with a different level of equality, or any mixture of these, it removes only the first matching entry from the alist, even if the alist might contain further matching entries. For example:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define address-list '())
(set! address-list (assq-set! address-list "mary" "11 Elm Street"))
(set! address-list (assq-set! address-list "mary" "57 Pine Drive"))
address-list
&#8658;
(("mary" . "57 Pine Drive") ("mary" . "11 Elm Street"))

(set! address-list (assoc-remove! address-list "mary"))
address-list
&#8658;
(("mary" . "11 Elm Street"))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In this example, the two instances of the string "mary" are not the same when compared using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq?</CODE>, so the two<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assq-set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls add two distinct entries to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>address-list</CODE>. When compared using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE>, both "mary"s in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>address-list</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are the same as the "mary" in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assoc-remove!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>call, but<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assoc-remove!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>stops after removing the first matching entry that it finds, and so one of the "mary" entries is left in place.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-assq_002dremove_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>assq-remove!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>alist key</EM></DT>
<DT><A name=index-assv_002dremove_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>assv-remove!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>alist key</EM></DT>
<DT><A name=index-assoc_002dremove_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>assoc-remove!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>alist key</EM></DT>
<DT><A name=index-scm_005fassq_005fremove_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_assq_remove_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(alist, key)</EM></DT>
<DT><A name=index-scm_005fassv_005fremove_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_assv_remove_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(alist, key)</EM></DT>
<DT><A name=index-scm_005fassoc_005fremove_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_assoc_remove_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(alist, key)</EM></DT>
<DD>
<P>Delete the first entry in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alist</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>associated with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR>, and return the resulting alist.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Sloppy-Alist-Functions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Alist-Example" rel=next>Alist Example</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Removing-Alist-Entries" rel=prev>Removing Alist Entries</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Association-Lists" rel=up>Association Lists</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Sloppy-Alist-Functions-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.7.12.5 Sloppy Alist Functions</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>sloppy-assq</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sloppy-assv</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sloppy-assoc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>behave like the corresponding non-<CODE>sloppy-</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedures, except that they return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>when the specified association list is not well-formed, where the non-<CODE>sloppy-</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>versions would signal an error.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Specifically, there are two conditions for which the non-<CODE>sloppy-</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedures signal an error, which the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sloppy-</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedures handle instead by returning<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>. Firstly, if the specified alist as a whole is not a proper list:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(assoc "mary" '((1 . 2) ("key" . "door") . "open sesame"))
&#8658;
ERROR: In procedure assoc in expression (assoc "mary" (quote #)):
ERROR: Wrong type argument in position 2 (expecting
   association list): ((1 . 2) ("key" . "door") . "open sesame")

(sloppy-assoc "mary" '((1 . 2) ("key" . "door") . "open sesame"))
&#8658;
#f
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Secondly, if one of the entries in the specified alist is not a pair:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(assoc 2 '((1 . 1) 2 (3 . 9)))
&#8658;
ERROR: In procedure assoc in expression (assoc 2 (quote #)):
ERROR: Wrong type argument in position 2 (expecting
   association list): ((1 . 1) 2 (3 . 9))

(sloppy-assoc 2 '((1 . 1) 2 (3 . 9)))
&#8658;
#f
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Unless you are explicitly working with badly formed association lists, it is much safer to use the non-<CODE>sloppy-</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedures, because they help to highlight coding and data errors that the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sloppy-</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>versions would silently cover up.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-sloppy_002dassq></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>sloppy-assq</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>key alist</EM></DT>
<DT><A name=index-scm_005fsloppy_005fassq></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_sloppy_assq</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(key, alist)</EM></DT>
<DD>
<P>Behaves like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assq</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>but does not do any error checking. Recommended only for use in Guile internals.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-sloppy_002dassv></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>sloppy-assv</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>key alist</EM></DT>
<DT><A name=index-scm_005fsloppy_005fassv></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_sloppy_assv</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(key, alist)</EM></DT>
<DD>
<P>Behaves like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assv</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>but does not do any error checking. Recommended only for use in Guile internals.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-sloppy_002dassoc></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>sloppy-assoc</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>key alist</EM></DT>
<DT><A name=index-scm_005fsloppy_005fassoc></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_sloppy_assoc</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(key, alist)</EM></DT>
<DD>
<P>Behaves like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assoc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>but does not do any error checking. Recommended only for use in Guile internals.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Alist-Example></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Sloppy-Alist-Functions" rel=prev>Sloppy Alist Functions</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Association-Lists" rel=up>Association Lists</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Alist-Example-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.7.12.6 Alist Example</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here is a longer example of how alists may be used in practice.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(define capitals '(("New York" . "Albany")
                   ("Oregon"   . "Salem")
                   ("Florida"  . "Miami")))

;; What's the capital of Oregon?
(assoc "Oregon" capitals)       &#8658; ("Oregon" . "Salem")
(assoc-ref capitals "Oregon")   &#8658; "Salem"

;; We left out South Dakota.
(set! capitals
      (assoc-set! capitals "South Dakota" "Pierre"))
capitals
&#8658; (("South Dakota" . "Pierre")
    ("New York" . "Albany")
    ("Oregon" . "Salem")
    ("Florida" . "Miami"))

;; And we got Florida wrong.
(set! capitals
      (assoc-set! capitals "Florida" "Tallahassee"))
capitals
&#8658; (("South Dakota" . "Pierre")
    ("New York" . "Albany")
    ("Oregon" . "Salem")
    ("Florida" . "Tallahassee"))

;; After Oregon secedes, we can remove it.
(set! capitals
      (assoc-remove! capitals "Oregon"))
capitals
&#8658; (("South Dakota" . "Pierre")
    ("New York" . "Albany")
    ("Florida" . "Tallahassee"))
</PRE></DIV>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=VHashes></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Hash-Tables" rel=next>Hash Tables</A>, Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Association-Lists" rel=prev>Association Lists</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Compound-Data-Types" rel=up>Compound Data Types</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=VList_002dBased-Hash-Lists-or-_0060_0060VHashes_0027_0027></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.7.13 VList-Based Hash Lists or &#8220;VHashes&#8221;</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-VList_002dbased-hash-lists></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-VHash></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 vlist)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module provides an implementation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>VList-based hash lists</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#VLists">VLists</A>). VList-based hash lists, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>vhashes</EM>, are an immutable dictionary type similar to association lists that maps<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>keys</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>values</EM>. However, unlike association lists, accessing a value given its key is typically a constant-time operation.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The VHash programming interface of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 vlist)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is mostly the same as that of association lists found in SRFI-1, with procedure names prefixed by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vhash-</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>alist-</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#SRFI_002d1-Association-Lists">SRFI-1 Association Lists</A>).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In addition, vhashes can be manipulated using VList operations:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(vlist-head (vhash-consq 'a 1 vlist-null))
&#8658; (a . 1)

(define vh1 (vhash-consq 'b 2 (vhash-consq 'a 1 vlist-null)))
(define vh2 (vhash-consq 'c 3 (vlist-tail vh1)))

(vhash-assq 'a vh2)
&#8658; (a . 1)
(vhash-assq 'b vh2)
&#8658; #f
(vhash-assq 'c vh2)
&#8658; (c . 3)
(vlist-&gt;list vh2)
&#8658; ((c . 3) (a . 1))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">However, keep in mind that procedures that construct new VLists (<CODE>vlist-map</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vlist-filter</CODE>, etc.) return raw VLists, not vhashes:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define vh (alist-&gt;vhash '((a . 1) (b . 2) (c . 3)) hashq))
(vhash-assq 'a vh)
&#8658; (a . 1)

(define vl
  ;; This will create a raw vlist.
  (vlist-filter (lambda (key+value) (odd? (cdr key+value))) vh))
(vhash-assq 'a vl)
&#8658; ERROR: Wrong type argument in position 2

(vlist-&gt;list vl)
&#8658; ((a . 1) (c . 3))
</PRE></DIV>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vhash_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vhash?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>Return true if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a vhash.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vhash_002dcons></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vhash-cons</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>key value vhash [hash-proc]</EM></DT>
<DT><A name=index-vhash_002dconsq></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vhash-consq</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>key value vhash</EM></DT>
<DT><A name=index-vhash_002dconsv></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vhash-consv</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>key value vhash</EM></DT>
<DD>
<P>Return a new hash list based on<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vhash</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is associated with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>, using<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hash-proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to compute the hash of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vhash</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be either<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vlist-null</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or a vhash returned by a previous call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vhash-cons</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hash-proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>defaults to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hash</CODE>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Hash-Table-Reference"><CODE>hash</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure</A>). With<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vhash-consq</CODE>, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hashq</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>hash function is used; with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vhash-consv</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hashv</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>hash function is used.</P>
<P>All<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vhash-cons</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls made to construct a vhash should use the same<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hash-proc</VAR>. Failing to do that, the result is undefined.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vhash_002dassoc></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vhash-assoc</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>key vhash [equal? [hash-proc]]</EM></DT>
<DT><A name=index-vhash_002dassq></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vhash-assq</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>key vhash</EM></DT>
<DT><A name=index-vhash_002dassv></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vhash-assv</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>key vhash</EM></DT>
<DD>
<P>Return the first key/value pair from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vhash</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>whose key is equal to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>according to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>equal?</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>equality predicate (which defaults to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE>), and using<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hash-proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(which defaults to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hash</CODE>) to compute the hash of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR>. The second form uses<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the equality predicate and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hashq</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the hash function; the last form uses<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eqv?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hashv</CODE>.</P>
<P>Note that it is important to consistently use the same hash function for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hash-proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as was passed to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vhash-cons</CODE>. Failing to do that, the result is unpredictable.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vhash_002ddelete></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vhash-delete</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>key vhash [equal? [hash-proc]]</EM></DT>
<DT><A name=index-vhash_002ddelq></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vhash-delq</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>key vhash</EM></DT>
<DT><A name=index-vhash_002ddelv></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vhash-delv</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>key vhash</EM></DT>
<DD>
<P>Remove all associations from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vhash</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR>, comparing keys with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>equal?</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(which defaults to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE>), and computing the hash of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>using<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hash-proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(which defaults to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hash</CODE>). The second form uses<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the equality predicate and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hashq</CODE>as the hash function; the last one uses<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eqv?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hashv</CODE>.</P>
<P>Again the choice of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hash-proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be consistent with previous calls to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vhash-cons</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vhash_002dfold></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vhash-fold</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc init vhash</EM></DT>
<DT><A name=index-vhash_002dfold_002dright></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vhash-fold-right</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc init vhash</EM></DT>
<DD>
<P>Fold over the key/value elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vhash</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the given direction, with each call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>having the form<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>key value result)</CODE>, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>result</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the result of the previous call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>init</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>result</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>for the first call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-vhash_002dfold_002a></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vhash-fold*</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc init key vhash [equal? [hash]]</EM></DT>
<DT><A name=index-vhash_002dfoldq_002a></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vhash-foldq*</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc init key vhash</EM></DT>
<DT><A name=index-vhash_002dfoldv_002a></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>vhash-foldv*</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc init key vhash</EM></DT>
<DD>
<P>Fold over all the values associated with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vhash</VAR>, with each call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>having the form<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(proc value result)</CODE>, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>result</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the result of the previous call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>init</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>result</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>for the first call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR>.</P>
<P>Keys in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>vhash</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are hashed using<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hash</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are compared using<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>equal?</VAR>. The second form uses<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the equality predicate and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hashq</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the hash function; the third one uses<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eqv?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hashv</CODE>.</P>
<P>Example:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define vh
  (alist-&gt;vhash '((a . 1) (a . 2) (z . 0) (a . 3))))

(vhash-fold* cons '() 'a vh)
&#8658; (3 2 1)

(vhash-fold* cons '() 'z vh)
&#8658; (0)
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-alist_002d_003evhash></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>alist-&gt;vhash</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>alist [hash-proc]</EM></DT>
<DD>
<P>Return the vhash corresponding to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alist</VAR>, an association list, using<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hash-proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to compute key hashes. When omitted,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hash-proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>defaults to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hash</CODE>.</P></DD></DL>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Hash-Tables></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#VHashes" rel=prev>VHashes</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Compound-Data-Types" rel=up>Compound Data Types</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Hash-Tables-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.7.14 Hash Tables</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Hash-Tables></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Hash tables are dictionaries which offer similar functionality as association lists: They provide a mapping from keys to values. The difference is that association lists need time linear in the size of elements when searching for entries, whereas hash tables can normally search in constant time. The drawback is that hash tables require a little bit more memory, and that you can not use the normal list procedures (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Lists">Lists</A>) for working with them.</P>
<TABLE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=1 href="https://www.gnu.org/software/guile/manual/guile.html#Hash-Table-Examples">Hash Table Examples</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Demonstration of hash table usage.</TD></TR>
<TR>
<TD vAlign=top align=left>&#8226;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=2 href="https://www.gnu.org/software/guile/manual/guile.html#Hash-Table-Reference">Hash Table Reference</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Hash table procedure descriptions.</TD></TR></TBODY></TABLE>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Hash-Table-Examples></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Next:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=n href="https://www.gnu.org/software/guile/manual/guile.html#Hash-Table-Reference" rel=next>Hash Table Reference</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Hash-Tables" rel=up>Hash Tables</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Hash-Table-Examples-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.7.14.1 Hash Table Examples</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For demonstration purposes, this section gives a few usage examples of some hash table procedures, together with some explanation what they do.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">First we start by creating a new hash table with 31 slots, and populate it with two key/value pairs.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(define h (make-hash-table 31))

;; This is an opaque object
h
&#8658;
#&lt;hash-table 0/31&gt;

;; Inserting into a hash table can be done with hashq-set!
(hashq-set! h 'foo "bar")
&#8658;
"bar"

(hashq-set! h 'braz "zonk")
&#8658;
"zonk"

;; Or with hash-create-handle!
(hashq-create-handle! h 'frob #f)
&#8658;
(frob . #f)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">You can get the value for a given key with the procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hashq-ref</CODE>, but the problem with this procedure is that you cannot reliably determine whether a key does exists in the table. The reason is that the procedure returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the key is not in the table, but it will return the same value if the key is in the table and just happens to have the value<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>, as you can see in the following examples.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(hashq-ref h 'foo)
&#8658;
"bar"

(hashq-ref h 'frob)
&#8658;
#f

(hashq-ref h 'not-there)
&#8658;
#f
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Better is to use the procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hashq-get-handle</CODE>, which makes a distinction between the two cases. Just like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assq</CODE>, this procedure returns a key/value-pair on success, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the key is not found.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(hashq-get-handle h 'foo)
&#8658;
(foo . "bar")

(hashq-get-handle h 'not-there)
&#8658;
#f
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Interesting results can be computed by using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hash-fold</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to work through each element. This example will count the total number of elements:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(hash-fold (lambda (key value seed) (+ 1 seed)) 0 h)
&#8658;
3
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The same thing can be done with the procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hash-count</CODE>, which can also count the number of elements matching a particular predicate. For example, count the number of elements with string values:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(hash-count (lambda (key value) (string? value)) h)
&#8658;
2
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Counting all the elements is a simple task using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>const</CODE>:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(hash-count (const #t) h)
&#8658;
3
</PRE></DIV>
<HR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Hash-Table-Reference></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=header>
<P>Previous:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=p href="https://www.gnu.org/software/guile/manual/guile.html#Hash-Table-Examples" rel=prev>Hash Table Examples</A>, Up:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A accessKey=u href="https://www.gnu.org/software/guile/manual/guile.html#Hash-Tables" rel=up>Hash Tables</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&nbsp; [<A title="Table of contents" href="https://www.gnu.org/software/guile/manual/guile.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="https://www.gnu.org/software/guile/manual/guile.html#Concept-Index" rel=index>Index</A>]</P></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=Hash-Table-Reference-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.7.14.2 Hash Table Reference</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Like the association list functions, the hash table functions come in several varieties, according to the equality test used for the keys. Plain<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hash-</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>functions use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>equal?</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hashq-</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>functions use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq?</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hashv-</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>functions use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eqv?</CODE>, and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hashx-</CODE>functions use an application supplied test.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A single<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-hash-table</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>creates a hash table suitable for use with any set of functions, but it&#8217;s imperative that just one set is then used consistently, or results will be unpredictable.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Hash tables are implemented as a vector indexed by a hash value formed from the key, with an association list of key/value pairs for each bucket in case distinct keys hash together. Direct access to the pairs in those lists is provided by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-handle-</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>functions.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When the number of entries in a hash table goes above a threshold, the vector is made larger and the entries are rehashed, to prevent the bucket lists from becoming too long and slowing down accesses. When the number of entries goes below a threshold, the vector is shrunk to save space.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hashx-</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8220;extended&#8221; routines, an application supplies a<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hash</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>function producing an integer index like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hashq</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>etc below, and an<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>assoc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>alist search function like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assq</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>etc (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Retrieving-Alist-Entries">Retrieving Alist Entries</A>). Here&#8217;s an example of such functions implementing case-insensitive hashing of string keys,</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (srfi srfi-1)
             (srfi srfi-13))

(define (my-hash str size)
  (remainder (string-hash-ci str) size))
(define (my-assoc str alist)
  (find (lambda (pair) (string-ci=? str (car pair))) alist))

(define my-table (make-hash-table))
(hashx-set! my-hash my-assoc my-table "foo" 123)

(hashx-ref my-hash my-assoc my-table "FOO")
&#8658; 123
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hashx-</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hash</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>function the aim is to spread keys across the vector, so bucket lists don&#8217;t become long. But the actual values are arbitrary as long as they&#8217;re in the range 0 to<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>size</VAR>-1</EM>. Helpful functions for forming a hash value, in addition to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hashq</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>etc below, include<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>symbol-hash</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Symbol-Keys">Symbol Keys</A>),<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string-hash</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string-hash-ci</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#String-Comparison">String Comparison</A>), and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char-set-hash</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Character-Set-Predicates_002fComparison">Character Set Predicates/Comparison</A>).</P><BR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dhash_002dtable></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-hash-table</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>[size]</EM></DT>
<DD>
<P>Create a new hash table object, with an optional minimum vector<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR>.</P>
<P>When<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is given, the table vector will still grow and shrink automatically, as described above, but with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a minimum. If an application knows roughly how many entries the table will hold then it can use<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to avoid rehashing when initial entries are added.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-alist_002d_003ehash_002dtable></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>alist-&gt;hash-table</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>alist</EM></DT>
<DT><A name=index-alist_002d_003ehashq_002dtable></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>alist-&gt;hashq-table</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>alist</EM></DT>
<DT><A name=index-alist_002d_003ehashv_002dtable></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>alist-&gt;hashv-table</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>alist</EM></DT>
<DT><A name=index-alist_002d_003ehashx_002dtable></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>alist-&gt;hashx-table</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>hash assoc alist</EM></DT>
<DD>
<P>Convert<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alist</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>into a hash table. When keys are repeated in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alist</VAR>, the leftmost association takes precedence.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(use-modules (ice-9 hash-table))
(alist-&gt;hash-table '((foo . 1) (bar . 2)))
</PRE></DIV>
<P>When converting to an extended hash table, custom<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>hash</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>assoc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedures must be provided.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(alist-&gt;hashx-table hash assoc '((foo . 1) (bar . 2)))
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hash_002dtable_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hash-table?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DT><A name=index-scm_005fhash_005ftable_005fp></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_hash_table_p</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(obj)</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a abstract hash table object.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hash_002dclear_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hash-clear!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>table</EM></DT>
<DT><A name=index-scm_005fhash_005fclear_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_hash_clear_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(table)</EM></DT>
<DD>
<P>Remove all items from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>table</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(without triggering a resize).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hash_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hash-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>table key [dflt]</EM></DT>
<DT><A name=index-hashq_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hashq-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>table key [dflt]</EM></DT>
<DT><A name=index-hashv_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hashv-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>table key [dflt]</EM></DT>
<DT><A name=index-hashx_002dref></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hashx-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>hash assoc table key [dflt]</EM></DT>
<DT><A name=index-scm_005fhash_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_hash_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(table, key, dflt)</EM></DT>
<DT><A name=index-scm_005fhashq_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_hashq_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(table, key, dflt)</EM></DT>
<DT><A name=index-scm_005fhashv_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_hashv_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(table, key, dflt)</EM></DT>
<DT><A name=index-scm_005fhashx_005fref></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_hashx_ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(hash, assoc, table, key, dflt)</EM></DT>
<DD>
<P>Lookup<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the given hash<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>table</VAR>, and return the associated value. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not found, return<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dflt</VAR>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dflt</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not given.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hash_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hash-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>table key val</EM></DT>
<DT><A name=index-hashq_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hashq-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>table key val</EM></DT>
<DT><A name=index-hashv_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hashv-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>table key val</EM></DT>
<DT><A name=index-hashx_002dset_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hashx-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>hash assoc table key val</EM></DT>
<DT><A name=index-scm_005fhash_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_hash_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(table, key, val)</EM></DT>
<DT><A name=index-scm_005fhashq_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_hashq_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(table, key, val)</EM></DT>
<DT><A name=index-scm_005fhashv_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_hashv_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(table, key, val)</EM></DT>
<DT><A name=index-scm_005fhashx_005fset_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_hashx_set_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(hash, assoc, table, key, val)</EM></DT>
<DD>
<P>Associate<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the given hash<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>table</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is already present then it&#8217;s associated value is changed. If it&#8217;s not present then a new entry is created.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hash_002dremove_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hash-remove!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>table key</EM></DT>
<DT><A name=index-hashq_002dremove_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hashq-remove!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>table key</EM></DT>
<DT><A name=index-hashv_002dremove_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hashv-remove!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>table key</EM></DT>
<DT><A name=index-hashx_002dremove_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hashx-remove!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>hash assoc table key</EM></DT>
<DT><A name=index-scm_005fhash_005fremove_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_hash_remove_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(table, key)</EM></DT>
<DT><A name=index-scm_005fhashq_005fremove_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_hashq_remove_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(table, key)</EM></DT>
<DT><A name=index-scm_005fhashv_005fremove_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_hashv_remove_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(table, key)</EM></DT>
<DT><A name=index-scm_005fhashx_005fremove_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_hashx_remove_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(hash, assoc, table, key)</EM></DT>
<DD>
<P>Remove any association for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the given hash<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>table</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>table</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>then nothing is done.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hash></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hash</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>key size</EM></DT>
<DT><A name=index-hashq></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hashq</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>key size</EM></DT>
<DT><A name=index-hashv></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hashv</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>key size</EM></DT>
<DT><A name=index-scm_005fhash></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_hash</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(key, size)</EM></DT>
<DT><A name=index-scm_005fhashq></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_hashq</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(key, size)</EM></DT>
<DT><A name=index-scm_005fhashv></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_hashv</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(key, size)</EM></DT>
<DD>
<P>Return a hash value for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR>. This is a number in the range<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>0</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>size</VAR>-1</EM>, which is suitable for use in a hash table of the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR>.</P>
<P>Note that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hashq</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hashv</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may use internal addresses of objects, so if an object is garbage collected and re-created it can have a different hash value, even when the two are notionally<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq?</CODE>. For instance with symbols,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(hashq 'something 123)   &#8658; 19
(gc)
(hashq 'something 123)   &#8658; 62
</PRE></DIV>
<P>In normal use this is not a problem, since an object entered into a hash table won&#8217;t be garbage collected until removed. It&#8217;s only if hashing calculations are somehow separated from normal references that its lifetime needs to be considered.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hash_002dget_002dhandle></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hash-get-handle</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>table key</EM></DT>
<DT><A name=index-hashq_002dget_002dhandle></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hashq-get-handle</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>table key</EM></DT>
<DT><A name=index-hashv_002dget_002dhandle></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hashv-get-handle</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>table key</EM></DT>
<DT><A name=index-hashx_002dget_002dhandle></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hashx-get-handle</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>hash assoc table key</EM></DT>
<DT><A name=index-scm_005fhash_005fget_005fhandle></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_hash_get_handle</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(table, key)</EM></DT>
<DT><A name=index-scm_005fhashq_005fget_005fhandle></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_hashq_get_handle</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(table, key)</EM></DT>
<DT><A name=index-scm_005fhashv_005fget_005fhandle></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_hashv_get_handle</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(table, key)</EM></DT>
<DT><A name=index-scm_005fhashx_005fget_005fhandle></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_hashx_get_handle</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(hash, assoc, table, key)</EM></DT>
<DD>
<P>Return the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>pair for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the given hash<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>table</VAR>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>table</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hash_002dcreate_002dhandle_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hash-create-handle!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>table key init</EM></DT>
<DT><A name=index-hashq_002dcreate_002dhandle_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hashq-create-handle!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>table key init</EM></DT>
<DT><A name=index-hashv_002dcreate_002dhandle_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hashv-create-handle!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>table key init</EM></DT>
<DT><A name=index-hashx_002dcreate_002dhandle_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hashx-create-handle!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>hash assoc table key init</EM></DT>
<DT><A name=index-scm_005fhash_005fcreate_005fhandle_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_hash_create_handle_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(table, key, init)</EM></DT>
<DT><A name=index-scm_005fhashq_005fcreate_005fhandle_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_hashq_create_handle_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(table, key, init)</EM></DT>
<DT><A name=index-scm_005fhashv_005fcreate_005fhandle_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_hashv_create_handle_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(table, key, init)</EM></DT>
<DT><A name=index-scm_005fhashx_005fcreate_005fhandle_005fx></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_hashx_create_handle_x</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(hash, assoc, table, key, init)</EM></DT>
<DD>
<P>Return the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>pair for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the given hash<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>table</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>table</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>then create an entry for it with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>init</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the value, and return that pair.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hash_002dmap_002d_003elist></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hash-map-&gt;list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc table</EM></DT>
<DT><A name=index-hash_002dfor_002deach></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hash-for-each</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc table</EM></DT>
<DT><A name=index-scm_005fhash_005fmap_005fto_005flist></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_hash_map_to_list</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(proc, table)</EM></DT>
<DT><A name=index-scm_005fhash_005ffor_005feach></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_hash_for_each</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(proc, table)</EM></DT>
<DD>
<P>Apply<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the entries in the given hash<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>table</VAR>. Each call is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>)</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hash-map-&gt;list</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns a list of the results from these calls,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hash-for-each</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>discards the results and returns an unspecified value.</P>
<P>Calls are made over the table entries in an unspecified order, and for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hash-map-&gt;list</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>the order of the values in the returned list is unspecified. Results will be unpredictable if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>table</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is modified while iterating.</P>
<P>For example the following returns a new alist comprising all the entries from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mytable</CODE>, in no particular order.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(hash-map-&gt;list cons mytable)
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hash_002dfor_002deach_002dhandle></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hash-for-each-handle</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc table</EM></DT>
<DT><A name=index-scm_005fhash_005ffor_005feach_005fhandle></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_hash_for_each_handle</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(proc, table)</EM></DT>
<DD>
<P>Apply<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the entries in the given hash<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>table</VAR>. Each call is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handle</VAR>)</CODE>, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>handle</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>pair. Return an unspecified value.</P>
<P><CODE>hash-for-each-handle</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>differs from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hash-for-each</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>only in the argument list of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hash_002dfold></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hash-fold</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>proc init table</EM></DT>
<DT><A name=index-scm_005fhash_005ffold></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_hash_fold</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(proc, init, table)</EM></DT>
<DD>
<P>Accumulate a result by applying<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the elements of the given hash<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>table</VAR>. Each call is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>prior-result</VAR>)</CODE>, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are from the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>table</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>prior-result</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the return from the previous<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>proc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>call. For the first call,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>prior-result</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>init</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>value.</P>
<P>Calls are made over the table entries in an unspecified order. Results will be unpredictable if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>table</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is modified while<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hash-fold</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is running.</P>
<P>For example, the following returns a count of how many keys in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mytable</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are strings.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(hash-fold (lambda (key value prior)
             (if (string? key) (1+ prior) prior))
           0 mytable)
</PRE></DIV></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-hash_002dcount></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>hash-count</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>pred table</EM></DT>
<DT><A name=index-scm_005fhash_005fcount></A>C Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>scm_hash_count</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(pred, table)</EM></DT>
<DD>
<P>Return the number of elements in the given hash<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>table</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>that cause<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(<VAR>pred</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to return true. To quickly determine the total number of elements, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(const #t)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pred</VAR>.</P></DD></DL>