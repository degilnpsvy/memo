<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>8.3 Instance Creation and Slot Access</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">An instance (or object) of a defined class can be created with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>takes one mandatory parameter, which is the class of the instance to create, and a list of optional arguments that will be used to initialize the slots of the new instance. For instance the following form</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-make></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-instance></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(define c (make &lt;my-complex&gt;))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">creates a new<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;my-complex&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>object and binds it to the Scheme variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>c</CODE>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make-1></A>generic:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make</STRONG></DT>
<DT><A name=index-make-2></A>method:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(class &lt;class&gt;) initarg &#8230;</EM></DT>
<DD>
<P>Create and return a new instance of class<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class</VAR>, initialized using<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>initarg</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=enddots>...</SMALL>.</P>
<P>In theory,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>initarg</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230; can have any structure that is understood by whatever methods get applied when the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>initialize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>generic function is applied to the newly allocated instance.</P>
<P>In practice, specialized<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>initialize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>methods would normally call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(next-method)</CODE>, and so eventually the standard GOOPS<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>initialize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>methods are applied. These methods expect<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>initargs</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to be a list with an even number of elements, where even-numbered elements (counting from zero) are keywords and odd-numbered elements are the corresponding values.</P>
<P>GOOPS processes initialization argument keywords automatically for slots whose definition includes the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:init-keyword</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>option (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Slot-Options">init-keyword</A>). Other keyword value pairs can only be processed by an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>initialize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>method that is specialized for the new instance&#8217;s class. Any unprocessed keyword value pairs are ignored.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dinstance></A>generic:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-instance</STRONG></DT>
<DT><A name=index-make_002dinstance-1></A>method:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-instance</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(class &lt;class&gt;) initarg &#8230;</EM></DT>
<DD>
<P><CODE>make-instance</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an alias for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make</CODE>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The slots of the new complex number can be accessed using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>slot-ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>slot-set!</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>slot-set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>sets the value of an object slot and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>slot-ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>retrieves it.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-slot_002dset_0021></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-slot_002dref></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(slot-set! c 'r 10)
(slot-set! c 'i 3)
(slot-ref c 'r) &#8658; 10
(slot-ref c 'i) &#8658; 3
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(oop goops describe)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module provides a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>describe</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function that is useful for seeing all the slots of an object; it prints the slots and their values to standard output.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(describe c)
-|
#&lt;&lt;my-complex&gt; 401d8638&gt; is an instance of class &lt;my-complex&gt;
Slots are: 
     r = 10
     i = 3</PRE></DIV>