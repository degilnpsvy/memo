<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>8.2 Class Definition</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A new class is defined with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-class</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>syntax:</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-define_002dclass></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-class></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(define-class <VAR>class</VAR> (<VAR>superclass</VAR> &#8230;)
   <VAR>slot-description</VAR> &#8230;
   <VAR>class-option</VAR> &#8230;)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><VAR>class</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the class being defined. The list of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>superclass</VAR>es specifies which existing classes, if any, to inherit slots and properties from.<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>Slots</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>hold per-instance<A href="https://www.gnu.org/software/guile/manual/guile.html#FOOT27" name=DOCF27><SUP>27</SUP></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>data, for instances of that class &#8212; like &#8220;fields&#8221; or &#8220;member variables&#8221; in other object oriented systems. Each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-description</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>gives the name of a slot and optionally some &#8220;properties&#8221; of this slot; for example its initial value, the name of a function which will access its value, and so on. Class options, slot descriptions and inheritance are discussed more below.<A name=index-slot></A></P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-define_002dclass-1></A>syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>define-class</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>name (super &#8230;) slot-definition &#8230; class-option &#8230;</EM></DT>
<DD>
<P>Define a class called<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>that inherits from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>super</VAR>s, with direct slots defined by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-definition</VAR>s and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class-option</VAR>s. The newly created class is bound to the variable name<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the current environment.</P>
<P>Each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-definition</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is either a symbol that names the slot or a list,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(<VAR>slot-name-symbol</VAR> . <VAR>slot-options</VAR>)
</PRE></DIV>
<P>where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-name-symbol</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a symbol and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-options</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a list with an even number of elements. The even-numbered elements of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>slot-options</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(counting from zero) are slot option keywords; the odd-numbered elements are the corresponding values for those keywords.</P>
<P>Each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>class-option</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an option keyword and corresponding value.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">As an example, let us define a type for representing a complex number in terms of two real numbers.<A href="https://www.gnu.org/software/guile/manual/guile.html#FOOT28" name=DOCF28><SUP>28</SUP></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>This can be done with the following class definition:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(define-class &lt;my-complex&gt; (&lt;number&gt;)
   r i)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This binds the variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;my-complex&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to a new class whose instances will contain two slots. These slots are called<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>r</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>i</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and will hold the real and imaginary parts of a complex number. Note that this class inherits from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;number&gt;</CODE>, which is a predefined class.<A href="https://www.gnu.org/software/guile/manual/guile.html#FOOT29" name=DOCF29><SUP>29</SUP></A></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Slot options are described in the next section. The possible class options are as follows.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0023_003ametaclass></A>class option:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>#:metaclass</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>metaclass</EM></DT>
<DD>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:metaclass</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>class option specifies the metaclass of the class being defined.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>metaclass</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a class that inherits from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;class&gt;</CODE>. For the use of metaclasses, see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Metaobjects-and-the-Metaobject-Protocol">Metaobjects and the Metaobject Protocol</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Metaclasses">Metaclasses</A>.</P>
<P>If the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:metaclass</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is absent, GOOPS reuses or constructs a metaclass for the new class by calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ensure-metaclass</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Class-Definition-Protocol">ensure-metaclass</A>).</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0023_003aname></A>class option:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>#:name</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>name</EM></DT>
<DD>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:name</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>class option specifies the new class&#8217;s name. This name is used to identify the class whenever related objects - the class itself, its instances and its subclasses - are printed.</P>
<P>If the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:name</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is absent, GOOPS uses the first argument to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-class</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the class name.</P></DD></DL>