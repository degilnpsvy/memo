<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>8.4 Slot Options</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When specifying a slot (in a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(define-class &#8230;)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form), various options can be specified in addition to the slot&#8217;s name. Each option is specified by a keyword. The list of possible keywords is as follows.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0023_003ainit_002dvalue></A>slot option:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>#:init-value</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>init-value</EM></DT>
<DT><A name=index-_0023_003ainit_002dform></A>slot option:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>#:init-form</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>init-form</EM></DT>
<DT><A name=index-_0023_003ainit_002dthunk></A>slot option:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>#:init-thunk</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>init-thunk</EM></DT>
<DT><A name=index-_0023_003ainit_002dkeyword></A>slot option:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>#:init-keyword</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>init-keyword</EM></DT>
<DD>
<P>These options provide various ways to specify how to initialize the slot&#8217;s value at instance creation time.<A name=index-default-slot-value></A></P>
<P><VAR>init-value</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>specifies a fixed initial slot value (shared across all new instances of the class).</P>
<P><VAR>init-thunk</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>specifies a thunk that will provide a default value for the slot. The thunk is called when a new instance is created and should return the desired initial slot value.</P>
<P><VAR>init-form</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>specifies a form that, when evaluated, will return an initial value for the slot. The form is evaluated each time that an instance of the class is created, in the lexical environment of the containing<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-class</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression.</P>
<P><VAR>init-keyword</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>specifies a keyword that can be used to pass an initial slot value to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>when creating a new instance.</P>
<P>Note that, since an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>init-value</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value is shared across all instances of a class, you should only use it when the initial value is an immutable value, like a constant. If you want to initialize a slot with a fresh, independently mutable value, you should use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>init-thunk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>init-form</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead. Consider the following example.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define-class &lt;chbouib&gt; ()
  (hashtab #:init-value (make-hash-table)))
</PRE></DIV>
<P>Here only one hash table is created and all instances of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;chbouib&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>have their<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hashtab</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>slot refer to it. In order to have each instance of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;chbouib&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>refer to a new hash table, you should instead write:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define-class &lt;chbouib&gt; ()
  (hashtab #:init-thunk make-hash-table))
</PRE></DIV>
<P>or:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define-class &lt;chbouib&gt; ()
  (hashtab #:init-form (make-hash-table)))
</PRE></DIV>
<P>If more than one of these options is specified for the same slot, the order of precedence, highest first is</P>
<UL>
<LI><CODE>#:init-keyword</CODE>, if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>init-keyword</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is present in the options passed to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make</CODE></LI>
<LI><CODE>#:init-thunk</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:init-form</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:init-value</CODE>.</LI></UL>
<P>If the slot definition contains more than one initialization option of the same precedence, the later ones are ignored. If a slot is not initialized at all, its value is unbound.</P>
<P>In general, slots that are shared between more than one instance are only initialized at new instance creation time if the slot value is unbound at that time. However, if the new instance creation specifies a valid init keyword and value for a shared slot, the slot is re-initialized regardless of its previous value.</P>
<P>Note, however, that the power of GOOPS&#8217; metaobject protocol means that everything written here may be customized or overridden for particular classes! The slot initializations described here are performed by the least specialized method of the generic function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>initialize</CODE>, whose signature is</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define-method (initialize (object &lt;object&gt;) initargs) ...)
</PRE></DIV>
<P>The initialization of instances of any given class can be customized by defining a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>initialize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>method that is specialized for that class, and the author of the specialized method may decide to call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>next-method</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>- which will result in a call to the next less specialized<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>initialize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>method - at any point within the specialized code, or maybe not at all. In general, therefore, the initialization mechanisms described here may be modified or overridden by more specialized code, or may not be supported at all for particular classes.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0023_003agetter></A>slot option:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>#:getter</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>getter</EM></DT>
<DT><A name=index-_0023_003asetter></A>slot option:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>#:setter</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>setter</EM></DT>
<DT><A name=index-_0023_003aaccessor></A>slot option:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>#:accessor</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>accessor</EM></DT>
<DD>
<P>Given an object<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with slots named<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>foo</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bar</CODE>, it is always possible to read and write those slots by calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>slot-ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>slot-set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with the relevant slot name; for example:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(slot-ref <VAR>obj</VAR> 'foo)
(slot-set! <VAR>obj</VAR> 'bar 25)
</PRE></DIV>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:getter</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:setter</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:accessor</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>options, if present, tell GOOPS to create generic function and method definitions that can be used to get and set the slot value more conveniently.<VAR>getter</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>specifies a generic function to which GOOPS will add a method for getting the slot value.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>setter</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>specifies a generic function to which GOOPS will add a method for setting the slot value.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>accessor</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>specifies an accessor to which GOOPS will add methods for both getting and setting the slot value.</P>
<P>So if a class includes a slot definition like this:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(c #:getter get-count #:setter set-count #:accessor count)
</PRE></DIV>
<P>GOOPS defines generic function methods such that the slot value can be referenced using either the getter or the accessor -</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(let ((current-count (get-count obj))) &#8230;)
(let ((current-count (count obj))) &#8230;)
</PRE></DIV>
<P>- and set using either the setter or the accessor -</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(set-count obj (+ 1 current-count))
(set! (count obj) (+ 1 current-count))
</PRE></DIV>
<P>Note that</P>
<UL>
<LI>with an accessor, the slot value is set using the generalized<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>syntax</LI>
<LI>in practice, it is unusual for a slot to use all three of these options: read-only, write-only and read-write slots would typically use only<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:getter</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:setter</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:accessor</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>options respectively.</LI></UL>
<P>The binding of the specified names is done in the environment of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-class</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression. If the names are already bound (in that environment) to values that cannot be upgraded to generic functions, those values are overwritten when the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define-class</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression is evaluated. For more detail, see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Generic-Function-Internals">ensure-generic</A>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0023_003aallocation></A>slot option:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>#:allocation</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>allocation</EM></DT>
<DD>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:allocation</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>option tells GOOPS how to allocate storage for the slot. Possible values for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>allocation</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are</P>
<UL>
<LI><CODE>#:instance</CODE><A name=index-_0023_003ainstance></A>
<P>Indicates that GOOPS should create separate storage for this slot in each new instance of the containing class (and its subclasses). This is the default.</P></LI>
<LI><CODE>#:class</CODE><A name=index-_0023_003aclass></A>
<P>Indicates that GOOPS should create storage for this slot that is shared by all instances of the containing class (and its subclasses). In other words, a slot in class<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>C</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with allocation<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:class</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is shared by all<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>instance</VAR>s for which<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(is-a?<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>instance</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>c</VAR>)</CODE>. This permits defining a kind of global variable which can be accessed only by (in)direct instances of the class which defines the slot.</P></LI>
<LI><CODE>#:each-subclass</CODE><A name=index-_0023_003aeach_002dsubclass></A>
<P>Indicates that GOOPS should create storage for this slot that is shared by all<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>direct</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>instances of the containing class, and that whenever a subclass of the containing class is defined, GOOPS should create a new storage for the slot that is shared by all<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>direct</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>instances of the subclass. In other words, a slot with allocation<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:each-subclass</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is shared by all instances with the same<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>class-of</CODE>.</P></LI>
<LI><CODE>#:virtual</CODE><A name=index-_0023_003aslot_002dset_0021></A><A name=index-_0023_003aslot_002dref></A><A name=index-_0023_003avirtual></A>
<P>Indicates that GOOPS should not allocate storage for this slot. The slot definition must also include the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:slot-ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:slot-set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>options to specify how to reference and set the value for this slot. See the example below.</P></LI></UL>
<P>Slot allocation options are processed when defining a new class by the generic function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compute-get-n-set</CODE>, which is specialized by the class&#8217;s metaclass. Hence new types of slot allocation can be implemented by defining a new metaclass and a method for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compute-get-n-set</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that is specialized for the new metaclass. For an example of how to do this, see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Customizing-Class-Definition">Customizing Class Definition</A>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-_0023_003aslot_002dref-1></A>slot option:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>#:slot-ref</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>getter</EM></DT>
<DT><A name=index-_0023_003aslot_002dset_0021-1></A>slot option:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>#:slot-set!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>setter</EM></DT>
<DD>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:slot-ref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:slot-set!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>options must be specified if the slot allocation is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#:virtual</CODE>, and are ignored otherwise.</P>
<P><VAR>getter</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be a closure taking a single<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>instance</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameter that returns the current slot value.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>setter</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be a closure taking two parameters -<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>instance</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>new-val</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>- that sets the slot value to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>new-val</VAR>.</P></DD></DL>