Each target specified must match the target pattern; a warning is issued for each target that does not. If you have a list of files, only some of which will match the pattern, you can use the <CODE>filter</CODE> function to remove non-matching file names (see <A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions">Functions for String Substitution and Analysis</A>): <PRE class=example>     files = foo.elc bar.o lose.o
     
     $(filter %.o,$(files)): %.o: %.c
             $(CC) -c $(CFLAGS) $&lt; -o $@
     $(filter %.elc,$(files)): %.elc: %.el
             emacs -f batch-byte-compile $&lt;
</PRE>
<P class=noindent>In this example the result of &#8216;<SAMP><SPAN class=samp>$(filter %.o,$(files))</SPAN></SAMP>&#8217; is <SAMP><SPAN class=file>bar.o lose.o</SPAN></SAMP>, and the first static pattern rule causes each of these object files to be updated by compiling the corresponding C source file. The result of &#8216;<SAMP><SPAN class=samp>$(filter&nbsp;%.elc,$(files))</SPAN></SAMP>&#8217;<!-- /@w --> is <SAMP><SPAN class=file>foo.elc</SPAN></SAMP>, so that file is made from <SAMP><SPAN class=file>foo.el</SPAN></SAMP>.