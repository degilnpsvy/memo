<H4 class=subsection>4.12.1 Syntax of Static Pattern Rules</H4>
<P><A name=index-static-pattern-rule_002c-syntax-of-262></A><A name=index-pattern-rules_002c-static_002c-syntax-of-263></A><FONT class=extract>Here is the syntax of a static pattern rule: </FONT><PRE class=example><FONT class=extract>     <VAR>targets</VAR> ...: <VAR>target-pattern</VAR>: <VAR>prereq-patterns</VAR> ...
             <VAR>recipe</VAR>
             ...
</FONT></PRE>
<P class=noindent><FONT class=extract>The <VAR>targets</VAR> list specifies the targets that the rule applies to. The targets can contain wildcard characters, just like the targets of ordinary rules (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Wildcards"><FONT class=extract>Using Wildcard Characters in File Names</FONT></A><FONT class=extract>). </FONT>
<P><A name=index-target-pattern_002c-static-_0028not-implicit_0029-264></A><A name=index-stem-265></A><FONT class=extract>The <VAR>target-pattern</VAR> and <VAR>prereq-patterns</VAR> say how to compute the prerequisites of each target. Each target is matched against the <VAR>target-pattern</VAR> to extract a part of the target name, called the <DFN>stem</DFN>. This stem is substituted into each of the <VAR>prereq-patterns</VAR> to make the prerequisite names (one from each <VAR>prereq-pattern</VAR>). </FONT>
<P><FONT class=extract>Each pattern normally contains the character &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; just once. When the <VAR>target-pattern</VAR> matches a target, the &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; can match any part of the target name; this part is called the <DFN>stem</DFN>. The rest of the pattern must match exactly. For example, the target <SAMP><SPAN class=file>foo.o</SPAN></SAMP> matches the pattern &#8216;<SAMP><SPAN class=samp>%.o</SPAN></SAMP>&#8217;, with &#8216;<SAMP><SPAN class=samp>foo</SPAN></SAMP>&#8217; as the stem. The targets <SAMP><SPAN class=file>foo.c</SPAN></SAMP> and <SAMP><SPAN class=file>foo.out</SPAN></SAMP> do not match that pattern. </FONT>
<P><A name=index-prerequisite-pattern_002c-static-_0028not-implicit_0029-266></A><FONT class=extract>The prerequisite names for each target are made by substituting the stem for the &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; in each prerequisite pattern. For example, if one prerequisite pattern is <SAMP><SPAN class=file>%.c</SPAN></SAMP>, then substitution of the stem &#8216;<SAMP><SPAN class=samp>foo</SPAN></SAMP>&#8217; gives the prerequisite name <SAMP><SPAN class=file>foo.c</SPAN></SAMP>. It is legitimate to write a prerequisite pattern that does not contain &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217;; then this prerequisite is the same for all targets. </FONT>
<P><A name=index-g_t_0040code_007b_0025_007d_002c-quoting-in-static-pattern-267></A><A name=index-g_t_0040code_007b_0025_007d_002c-quoting-with-_0040code_007b_005c_007d-_0028backslash_0029-268></A><A name=index-g_t_0040code_007b_005c_007d-_0028backslash_0029_002c-to-quote-_0040code_007b_0025_007d-269></A><A name=index-backslash-_0028_0040code_007b_005c_007d_0029_002c-to-quote-_0040code_007b_0025_007d-270></A><A name=index-quoting-_0040code_007b_0025_007d_002c-in-static-pattern-271></A><FONT class=extract>&#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; characters in pattern rules can be quoted with preceding backslashes (&#8216;<SAMP><SPAN class=samp>\</SPAN></SAMP>&#8217;). Backslashes that would otherwise quote &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; characters can be quoted with more backslashes. Backslashes that quote &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; characters or other backslashes are removed from the pattern before it is compared to file names or has a stem substituted into it. Backslashes that are not in danger of quoting &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; characters go unmolested. For example, the pattern <SAMP><SPAN class=file>the\%weird\\%pattern\\</SPAN></SAMP> has &#8216;<SAMP><SPAN class=samp>the%weird\</SPAN></SAMP>&#8217; preceding the operative &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; character, and &#8216;<SAMP><SPAN class=samp>pattern\\</SPAN></SAMP>&#8217; following it. The final two backslashes are left alone because they cannot affect any &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; character. </FONT>
<P>Here is an example, which compiles each of <SAMP><SPAN class=file>foo.o</SPAN></SAMP> and <SAMP><SPAN class=file>bar.o</SPAN></SAMP> from the corresponding <SAMP><SPAN class=file>.c</SPAN></SAMP> file: <PRE class=example>     objects = foo.o bar.o
     
     all: $(objects)
     
     $(objects): %.o: %.c
             $(CC) -c $(CFLAGS) $&lt; -o $@
</PRE>
<P class=noindent>Here &#8216;<SAMP><SPAN class=samp>$&lt;</SPAN></SAMP>&#8217; is the automatic variable that holds the name of the prerequisite and &#8216;<SAMP><SPAN class=samp>$@</SPAN></SAMP>&#8217; is the automatic variable that holds the name of the target; see <A href="https://www.gnu.org/software/make/manual/make.html#Automatic-Variables">Automatic Variables</A>. 
<P><FONT class=extract>Each target specified must match the target pattern; a warning is issued for each target that does not. If you have a list of files, only some of which will match the pattern, you can use the <CODE>filter</CODE> function to remove non-matching file names (see </FONT><A href="https://www.gnu.org/software/make/manual/make.html#Text-Functions"><FONT class=extract>Functions for String Substitution and Analysis</FONT></A><FONT class=extract>): </FONT><PRE class=example><FONT class=extract>     files = foo.elc bar.o lose.o
     
     $(filter %.o,$(files)): %.o: %.c
             $(CC) -c $(CFLAGS) $&lt; -o $@
     $(filter %.elc,$(files)): %.elc: %.el
             emacs -f batch-byte-compile $&lt;
</FONT></PRE>
<P class=noindent><FONT class=extract>In this example the result of &#8216;<SAMP><SPAN class=samp>$(filter %.o,$(files))</SPAN></SAMP>&#8217; is <SAMP><SPAN class=file>bar.o lose.o</SPAN></SAMP>, and the first static pattern rule causes each of these object files to be updated by compiling the corresponding C source file. The result of &#8216;<SAMP><SPAN class=samp>$(filter&nbsp;%.elc,$(files))</SPAN></SAMP>&#8217;<!-- /@w --> is <SAMP><SPAN class=file>foo.elc</SPAN></SAMP>, so that file is made from <SAMP><SPAN class=file>foo.el</SPAN></SAMP>. </FONT>
<P><FONT class=extract>Another example shows how to use <CODE>$*</CODE> in static pattern rules: </FONT><A name=index-g_t_0024_002a_0040r_007b_002c-and-static-pattern_007d-272></A><PRE class=example><FONT class=extract>     bigoutput littleoutput : %output : text.g
             generate text.g -$* &gt; $@
</FONT></PRE>
<P class=noindent><FONT class=extract>When the <CODE>generate</CODE> command is run, <CODE>$*</CODE> will expand to the stem, either &#8216;<SAMP><SPAN class=samp>big</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>little</SPAN></SAMP>&#8217;.</FONT>