<H4 class=subsection>12.1.2 Interfaces from Guile to <CODE>make</CODE></H4>
<P><A name=index-make-interface-to-guile-1049></A><A name=index-make-procedures-in-guile-1050></A>In addition to the <CODE>guile</CODE> function available in makefiles, <CODE>make</CODE> exposes some procedures for use in your Guile scripts. At startup <CODE>make</CODE> creates a new Guile module, <CODE>gnu make</CODE>, and exports these procedures as public interfaces from that module: 
<DL>
<DT><CODE>gmk-expand</CODE> 
<DD><A name=index-gmk_002dexpand-1051></A>This procedure takes a single argument which is converted into a string. The string is expanded by <CODE>make</CODE> using normal <CODE>make</CODE> expansion rules. The result of the expansion is converted into a Guile string and provided as the result of the procedure. <BR>
<DT><CODE>gmk-eval</CODE> 
<DD><A name=index-gmk_002deval-1052></A>This procedure takes a single argument which is converted into a string. The string is evaluated by <CODE>make</CODE> as if it were a makefile. This is the same capability available via the <CODE>eval</CODE> function (see <A href="https://www.gnu.org/software/make/manual/make.html#Eval-Function">Eval Function</A>). The result of the <CODE>gmk-eval</CODE> procedure is always the empty string. 
<P>Note that <CODE>gmk-eval</CODE> is not quite the same as using <CODE>gmk-expand</CODE> with the <CODE>eval</CODE> function: in the latter case the evaluated string will be expanded <EM>twice</EM>; first by <CODE>gmk-expand</CODE>, then again by the <CODE>eval</CODE> function. </P></DD></DL>