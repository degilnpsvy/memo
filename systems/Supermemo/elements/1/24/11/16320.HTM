<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>7.18 Curried Definitions</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The macros in this section are provided by</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(use-modules (ice-9 curried-definitions))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">and replace those provided by default.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Prior to Guile 2.0, Guile provided a type of definition known colloquially as a &#8220;curried definition&#8221;. The idea is to extend the syntax of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>so that you can conveniently define procedures that return procedures, up to any desired depth.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For example,</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define ((foo x) y)
  (list x y))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">is a convenience form of</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(define foo
  (lambda (x)
    (lambda (y)
      (list x y))))
</PRE></DIV>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-define-2></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>define</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(&#8230; (name args &#8230;) &#8230;) body &#8230;</EM></DT>
<DT><A name=index-define_002a-1></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>define*</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(&#8230; (name args &#8230;) &#8230;) body &#8230;</EM></DT>
<DT><A name=index-define_002dpublic-1></A>Scheme Syntax:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>define-public</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>(&#8230; (name args &#8230;) &#8230;) body &#8230;</EM></DT>
<DD>
<P>Create a top level variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bound to the procedure with parameter list<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>args</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is itself a formal parameter list, then a higher order procedure is created using that formal-parameter list, and returning a procedure that has parameter list<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>args</VAR>. This nesting may occur to arbitrary depth.</P>
<P><CODE>define*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is similar but the formal parameter lists take additional options as described in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#lambda_002a-and-define_002a">lambda* and define*</A>. For example,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define* ((foo #:keys (bar 'baz) (quux 'zot)) frotz #:rest rest)
  (list bar quux frotz rest))

((foo #:quux 'foo) 1 2 3 4 5)
&#8658; (baz foo 1 (2 3 4 5))
</PRE></DIV>
<P><CODE>define-public</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>but it also adds<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the list of exported bindings of the current module.</P></DD></DL>