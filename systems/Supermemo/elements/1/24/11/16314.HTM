<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>7.12 Queues</H3><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-queues></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Queues></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The functions in this section are provided by</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (ice-9 q))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This module implements queues holding arbitrary scheme objects and designed for efficient first-in / first-out operations.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>make-q</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>creates a queue, and objects are entered and removed with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>enq!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>deq!</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>q-push!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>q-pop!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be used too, treating the front of the queue like a stack.</P><BR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dq></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-q</STRONG></DT>
<DD>
<P>Return a new queue.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-q_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>q?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj</EM></DT>
<DD>
<P>Return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a queue, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if not.</P>
<P>Note that queues are not a distinct class of objects but are implemented with cons cells. For that reason certain list structures can get<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>q?</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-enq_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>enq!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>q obj</EM></DT>
<DD>
<P>Add<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the rear of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR>, and return<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-deq_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>deq!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>q</EM></DT>
<DT><A name=index-q_002dpop_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>q-pop!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>q</EM></DT>
<DD>
<P>Remove and return the front element from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is empty, a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>q-empty</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>exception is thrown.</P>
<P><CODE>deq!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>q-pop!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are the same operation, the two names just let an application match<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>enq!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>deq!</CODE>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>q-push!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>q-pop!</CODE>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-q_002dpush_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>q-push!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>q obj</EM></DT>
<DD>
<P>Add<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the front of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR>, and return<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-q_002dlength></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>q-length</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>q</EM></DT>
<DD>
<P>Return the number of elements in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR>.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-q_002dempty_003f></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>q-empty?</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>q</EM></DT>
<DD>
<P>Return true if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is empty.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-q_002dempty_002dcheck></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>q-empty-check</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>q</EM></DT>
<DD>
<P>Throw a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>q-empty</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>exception if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is empty.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-q_002dfront></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>q-front</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>q</EM></DT>
<DD>
<P>Return the first element of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(without removing it). If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is empty, a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>q-empty</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>exception is thrown.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-q_002drear></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>q-rear</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>q</EM></DT>
<DD>
<P>Return the last element of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(without removing it). If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is empty, a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>q-empty</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>exception is thrown.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-q_002dremove_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>q-remove!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>q obj</EM></DT>
<DD>
<P>Remove all occurrences of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR>, and return<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is compared to queue elements using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq?</CODE>.</P></DD></DL><BR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-q_002dempty></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>q-empty</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>exceptions described above are thrown just as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(throw 'q-empty)</CODE>, there&#8217;s no message etc like an error throw.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A queue is implemented as a cons cell, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>car</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>containing a list of queued elements, and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cdr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>being the last cell in that list (for ease of enqueuing).</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(<VAR>list</VAR> . <VAR>last-cell</VAR>)
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If the queue is empty,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the empty list and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>last-cell</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">An application can directly access the queue list if desired, for instance to search the elements or to insert at a specific point.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-sync_002dq_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>sync-q!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>q</EM></DT>
<DD>
<P>Recompute the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>last-cell</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>field in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>q</VAR>.</P>
<P>All the operations above maintain<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>last-cell</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as described, so normally there&#8217;s no need for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sync-q!</CODE>. But if an application modifies the queue<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>list</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>then it must either maintain<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>last-cell</VAR>similarly, or call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sync-q!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to recompute it.</P></DD></DL>