<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>7.10 Formatted Output</H3><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-formatted-output></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>format</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function is a powerful way to print numbers, strings and other objects together with literal text under the control of a format string. This function is available from</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (ice-9 format))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A format string is generally more compact and easier than using just the standard procedures like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>display</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>newline</CODE>. Parameters in the output string allow various output styles, and parameters can be taken from the arguments for runtime flexibility.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>format</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is similar to the Common Lisp procedure of the same name, but it&#8217;s not identical and doesn&#8217;t have quite all the features found in Common Lisp.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">C programmers will note the similarity between<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>format</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>printf</CODE>, though escape sequences are marked with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%</CODE>, and are more powerful.</P><BR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-format></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>format</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>dest fmt arg &#8230;</EM></DT>
<DD>
<P>Write output specified by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fmt</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>string to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dest</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dest</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be an output port,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>current-output-port</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Default-Ports">Default Ports</A>), or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to return the output as a string.</P>
<P><VAR>fmt</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can contain literal text to be output, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>escapes. Each escape has the form</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>~ [param [, param&#8230;] [:] [@] code
</PRE></DIV>
<P><CODE>code</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a character determining the escape sequence. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>:</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>@</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>characters are optional modifiers, one or both of which change the way various codes operate. Optional parameters are accepted by some codes too. Parameters have the following forms,</P>
<DL compact>
<DT><CODE>[+/-]number</CODE></DT>
<DD>
<P>An integer, with optional<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-</CODE>.</P></DD>
<DT><CODE>'</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(apostrophe)</DT>
<DD>
<P>The following character in the format string, for instance<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>'z</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>z</CODE>.</P></DD>
<DT><CODE>v</CODE></DT>
<DD>
<P>The next function argument as the parameter.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>v</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>stands for &#8220;variable&#8221;, a parameter can be calculated at runtime and included in the arguments. Upper case<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>V</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be used too.</P></DD>
<DT><CODE>#</CODE></DT>
<DD>
<P>The number of arguments remaining. (See<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>below for some usages.)</P></DD></DL>
<P>Parameters are separated by commas (<CODE>,</CODE>). A parameter can be left empty to keep its default value when supplying later parameters.</P><BR>
<P>The following escapes are available. The code letters are not case-sensitive, upper and lower case are the same.</P>
<DL compact>
<DT><CODE>~a</CODE></DT>
<DT><CODE>~s</CODE></DT>
<DD>
<P>Object output. Parameters:<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>minwidth</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>padinc</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>minpad</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>padchar</VAR>.</P>
<P><CODE>~a</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>outputs an argument like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>display</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~s</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>outputs an argument like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Writing">Writing</A>).</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "~a" "foo") -| foo
(format #t "~s" "foo") -| "foo"
</PRE></DIV>
<P><CODE>~:a</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~:s</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>put objects that don&#8217;t have an external representation in quotes like a string.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "~:a" car) -| "#&lt;primitive-procedure car&gt;"
</PRE></DIV>
<P>If the output is less than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>minwidth</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>characters (default 0), it&#8217;s padded on the right with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>padchar</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(default space).<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~@a</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~@s</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>put the padding on the left instead.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #f "~5a" 'abc)       &#8658; "abc  "
(format #f "~5,,,'-@a" 'abc) &#8658; "--abc"
</PRE></DIV>
<P><VAR>minpad</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a minimum for the padding then plus a multiple of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>padinc</VAR>. Ie. the padding is<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>minpad</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>+<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>N</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>*<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>padinc</VAR></EM>, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the smallest integer making the total object plus padding greater than or equal to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>minwidth</VAR>. The default<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>minpad</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 0 and the default<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>padinc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 1 (imposing no minimum or multiple).</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #f "~5,1,4a" 'abc) &#8658; "abc    "
</PRE></DIV></DD>
<DT><CODE>~c</CODE></DT>
<DD>
<P>Character. Parameter:<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>charnum</VAR>.</P>
<P>Output a character. The default is to simply output, as per<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write-char</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Writing">Writing</A>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~@c</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>prints in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>style.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~:c</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>prints control characters (ASCII 0 to 31) in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>^X</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "~c" #\z)        -| z
(format #t "~@c" #\z)       -| #\z
(format #t "~:c" #\newline) -| ^J
</PRE></DIV>
<P>If the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>charnum</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameter is given then an argument is not taken but instead the character is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(integer-&gt;char<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>charnum</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Characters">Characters</A>). This can be used for instance to output characters given by their ASCII code.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "~65c")  -| A
</PRE></DIV></DD>
<DT><CODE>~d</CODE></DT>
<DT><CODE>~x</CODE></DT>
<DT><CODE>~o</CODE></DT>
<DT><CODE>~b</CODE></DT>
<DD>
<P>Integer. Parameters:<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>minwidth</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>padchar</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>commachar</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>commawidth</VAR>.</P>
<P>Output an integer argument as a decimal, hexadecimal, octal or binary integer (respectively), in a locale-independent way.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "~d" 123) -| 123
</PRE></DIV>
<P><CODE>~@d</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>etc shows a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>sign is shown on positive numbers.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "~@b" 12) -| +1100
</PRE></DIV>
<P>If the output is less than the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>minwidth</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameter (default no minimum), it&#8217;s padded on the left with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>padchar</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameter (default space).</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "~5,'*d" 12)   -| ***12
(format #t "~5,'0d" 12)   -| 00012
(format #t "~3d"    1234) -| 1234
</PRE></DIV>
<P><CODE>~:d</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>adds commas (or the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>commachar</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameter) every three digits (or the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>commawidth</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameter many). However, when your intent is to write numbers in a way that follows typographical conventions, using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~h</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is recommended.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "~:d" 1234567)         -| 1,234,567
(format #t "~10,'*,'/,2:d" 12345) -| ***1/23/45
</PRE></DIV>
<P>Hexadecimal<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~x</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>output is in lower case, but the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~(</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>case conversion directives described below can be used to get upper case.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "~x"       65261) -| feed
(format #t "~:@(~x~)" 65261) -| FEED
</PRE></DIV></DD>
<DT><CODE>~r</CODE></DT>
<DD>
<P>Integer in words, roman numerals, or a specified radix. Parameters:<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>radix</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>minwidth</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>padchar</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>commachar</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>commawidth</VAR>.</P>
<P>With no parameters output is in words as a cardinal like &#8220;ten&#8221;, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~:r</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>prints an ordinal like &#8220;tenth&#8221;.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "~r" 9)  -| nine        ;; cardinal
(format #t "~r" -9) -| minus nine  ;; cardinal
(format #t "~:r" 9) -| ninth       ;; ordinal
</PRE></DIV>
<P>And also with no parameters,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~@r</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>gives roman numerals and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~:@r</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>gives old roman numerals. In old roman numerals there&#8217;s no &#8220;subtraction&#8221;, so 9 is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>VIIII</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>IX</CODE>. In both cases only positive numbers can be output.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "~@r" 89)  -| LXXXIX     ;; roman
(format #t "~:@r" 89) -| LXXXVIIII  ;; old roman
</PRE></DIV>
<P>When a parameter is given it means numeric output in the specified<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>radix</VAR>. The modifiers and parameters following the radix are the same as described for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~d</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>etc above.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #f "~3r" 27)   &#8658; "1000"    ;; base 3
(format #f "~3,5r" 26) &#8658; "  222"   ;; base 3 width 5
</PRE></DIV></DD>
<DT><CODE>~f</CODE></DT>
<DD>
<P>Fixed-point float. Parameters:<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>width</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>decimals</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>scale</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>overflowchar</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>padchar</VAR>.</P>
<P>Output a number or number string in fixed-point format, ie. with a decimal point.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "~f" 5)      -| 5.0
(format #t "~f" "123")  -| 123.0
(format #t "~f" "1e-1") -| 0.1
</PRE></DIV>
<P><CODE>~@f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>prints a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>sign on positive numbers (including zero).</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "~@f" 0) -| +0.0
</PRE></DIV>
<P>If the output is less than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>width</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>characters it&#8217;s padded on the left with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>padchar</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(space by default). If the output equals or exceeds<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>width</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>then there&#8217;s no padding. The default for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>width</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is no padding.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #f "~6f" -1.5)      &#8658; "  -1.5"
(format #f "~6,,,,'*f" 23)  &#8658; "**23.0"
(format #f "~6f" 1234567.0) &#8658; "1234567.0"
</PRE></DIV>
<P><VAR>decimals</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is how many digits to print after the decimal point, with the value rounded or padded with zeros as necessary. (The default is to output as many decimals as required.)</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "~1,2f" 3.125) -| 3.13
(format #t "~1,2f" 1.5)   -| 1.50
</PRE></DIV>
<P><VAR>scale</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a power of 10 applied to the value, moving the decimal point that many places. A positive<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>scale</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>increases the value shown, a negative decreases it.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "~,,2f" 1234)  -| 123400.0
(format #t "~,,-2f" 1234) -| 12.34
</PRE></DIV>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>overflowchar</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>width</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are both given and if the output would exceed<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>width</VAR>, then that many<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>overflowchar</VAR>s are printed instead of the value.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "~6,,,'xf" 12345) -| 12345.
(format #t "~5,,,'xf" 12345) -| xxxxx
</PRE></DIV></DD>
<DT><CODE>~h</CODE></DT>
<DD>
<P>Localized number<A href="https://www.gnu.org/software/guile/manual/guile.html#FOOT25" name=DOCF25><SUP>25</SUP></A>. Parameters:<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>width</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>decimals</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>padchar</VAR>.</P>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~f</CODE>, output an exact or floating point number, but do so according to the current locale, or according to the given locale object when the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>:</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>modifier is used (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Number-Input-and-Output"><CODE>number-&gt;locale-string</CODE></A>).</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "~h" 12345.5678)  ; with "C" as the current locale
-| 12345.5678

(format #t "~14,,'*:h" 12345.5678
        (make-locale LC_ALL "en_US"))
-| ***12,345.5678

(format #t "~,2:h" 12345.5678
        (make-locale LC_NUMERIC "fr_FR"))
-| 12 345,56
</PRE></DIV></DD>
<DT><CODE>~e</CODE></DT>
<DD>
<P>Exponential float. Parameters:<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>width</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mantdigits</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expdigits</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>intdigits</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>overflowchar</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>padchar</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expchar</VAR>.</P>
<P>Output a number or number string in exponential notation.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "~e" 5000.25) -| 5.00025E+3
(format #t "~e" "123.4") -| 1.234E+2
(format #t "~e" "1e4")   -| 1.0E+4
</PRE></DIV>
<P><CODE>~@e</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>prints a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>sign on positive numbers (including zero). (This is for the mantissa, a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>sign is always shown on the exponent.)</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "~@e" 5000.0) -| +5.0E+3
</PRE></DIV>
<P>If the output is less than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>width</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>characters it&#8217;s padded on the left with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>padchar</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(space by default). The default for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>width</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is to output with no padding.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #f "~10e" 1234.0)     &#8658; "  1.234E+3"
(format #f "~10,,,,,'*e" 0.5) &#8658; "****5.0E-1"
</PRE></DIV>
<P><VAR>mantdigits</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the number of digits shown in the mantissa after the decimal point. The value is rounded or trailing zeros are added as necessary. The default<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mantdigits</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is to show as much as needed by the value.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #f "~,3e" 11111.0) &#8658; "1.111E+4"
(format #f "~,8e" 123.0)   &#8658; "1.23000000E+2"
</PRE></DIV>
<P><VAR>expdigits</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the minimum number of digits shown for the exponent, with leading zeros added if necessary. The default for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expdigits</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is to show only as many digits as required. At least 1 digit is always shown.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #f "~,,1e" 1.0e99) &#8658; "1.0E+99"
(format #f "~,,6e" 1.0e99) &#8658; "1.0E+000099"
</PRE></DIV>
<P><VAR>intdigits</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(default 1) is the number of digits to show before the decimal point in the mantissa.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>intdigits</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be zero, in which case the integer part is a single<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0</CODE>, or it can be negative, in which case leading zeros are shown after the decimal point.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "~,,,3e" 12345.0)  -| 123.45E+2
(format #t "~,,,0e" 12345.0)  -| 0.12345E+5
(format #t "~,,,-3e" 12345.0) -| 0.00012345E+8
</PRE></DIV>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>overflowchar</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is given then<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>width</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a hard limit. If the output would exceed<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>width</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>then instead that many<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>overflowchar</VAR>s are printed.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #f "~6,,,,'xe" 100.0) &#8658; "1.0E+2"
(format #f "~3,,,,'xe" 100.0) &#8658; "xxx"
</PRE></DIV>
<P><VAR>expchar</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the exponent marker character (default<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>E</CODE>).</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "~,,,,,,'ee" 100.0) -| 1.0e+2
</PRE></DIV></DD>
<DT><CODE>~g</CODE></DT>
<DD>
<P>General float. Parameters:<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>width</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mantdigits</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expdigits</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>intdigits</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>overflowchar</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>padchar</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expchar</VAR>.</P>
<P>Output a number or number string in either exponential format the same as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~e</CODE>, or fixed-point format like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>but aligned where the mantissa would have been and followed by padding where the exponent would have been.</P>
<P>Fixed-point is used when the absolute value is 0.1 or more and it takes no more space than the mantissa in exponential format, ie. basically up to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mantdigits</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>digits.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #f "~12,4,2g" 999.0)    &#8658; "   999.0    "
(format #f "~12,4,2g" "100000") &#8658; "  1.0000E+05"
</PRE></DIV>
<P>The parameters are interpreted as per<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~e</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>above. When fixed-point is used, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>decimals</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameter to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is established from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mantdigits</VAR>, so as to give a total<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>mantdigits</VAR>+1</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>figures.</P></DD>
<DT><CODE>~$</CODE></DT>
<DD>
<P>Monetary style fixed-point float. Parameters:<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>decimals</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>intdigits</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>width</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>padchar</VAR>.</P>
<P>Output a number or number string in fixed-point format, ie. with a decimal point.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>decimals</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the number of decimal places to show, default 2.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "~$" 5)       -| 5.00
(format #t "~4$" "2.25") -| 2.2500
(format #t "~4$" "1e-2") -| 0.0100
</PRE></DIV>
<P><CODE>~@$</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>prints a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>sign on positive numbers (including zero).</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "~@$" 0) -| +0.00
</PRE></DIV>
<P><VAR>intdigits</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a minimum number of digits to show in the integer part of the value (default 1).</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "~,3$" 9.5)   -| 009.50
(format #t "~,0$" 0.125) -| .13
</PRE></DIV>
<P>If the output is less than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>width</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>characters (default 0), it&#8217;s padded on the left with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>padchar</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(default space).<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~:$</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>puts the padding after the sign.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #f "~,,8$" -1.5)   &#8658; "   -1.50"
(format #f "~,,8:$" -1.5)  &#8658; "-   1.50"
(format #f "~,,8,'.:@$" 3) &#8658; "+...3.00"
</PRE></DIV>
<P>Note that floating point for dollar amounts is generally not a good idea, because a cent<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>0.01</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>cannot be represented exactly in the binary floating point Guile uses, which leads to slowly accumulating rounding errors. Keeping values as cents (or fractions of a cent) in integers then printing with the scale option in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be a better approach.</P></DD>
<DT><CODE>~i</CODE></DT>
<DD>
<P>Complex fixed-point float. Parameters:<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>width</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>decimals</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>scale</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>overflowchar</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>padchar</VAR>.</P>
<P>Output the argument as a complex number, with both real and imaginary part shown (even if one or both are zero).</P>
<P>The parameters and modifiers are the same as for fixed-point<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>described above. The real and imaginary parts are both output with the same given parameters and modifiers, except that for the imaginary part the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>@</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>modifier is always enabled, so as to print a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>sign between the real and imaginary parts.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "~i" 1)  -| 1.0+0.0i
</PRE></DIV></DD>
<DT><CODE>~p</CODE></DT>
<DD>
<P>Plural. No parameters.</P>
<P>Output nothing if the argument is 1, or &#8216;<SAMP>s</SAMP>&#8217; for any other value.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "enter name~p" 1) -| enter name
(format #t "enter name~p" 2) -| enter names
</PRE></DIV>
<P><CODE>~@p</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>prints &#8216;<SAMP>y</SAMP>&#8217; for 1 or &#8216;<SAMP>ies</SAMP>&#8217; otherwise.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "pupp~@p" 1) -| puppy
(format #t "pupp~@p" 2) -| puppies
</PRE></DIV>
<P><CODE>~:p</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>re-uses the preceding argument instead of taking a new one, which can be convenient when printing some sort of count.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "~d cat~:p" 9)   -| 9 cats
(format #t "~d pupp~:@p" 5) -| 5 puppies
</PRE></DIV>
<P><CODE>~p</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is designed for English plurals and there&#8217;s no attempt to support other languages.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~[</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>conditionals (below) may be able to help. When using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gettext</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to translate messages<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ngettext</CODE>is probably best though (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Internationalization">Internationalization</A>).</P></DD>
<DT><CODE>~y</CODE></DT>
<DD>
<P>Structured printing. Parameters:<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>width</VAR>.</P>
<P><CODE>~y</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>outputs an argument using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>pretty-print</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Pretty-Printing">Pretty Printing</A>). The result will be formatted to fit within<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>width</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>columns (79 by default), consuming multiple lines if necessary.</P>
<P><CODE>~@y</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>outputs an argument using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>truncated-print</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Pretty-Printing">Pretty Printing</A>). The resulting code will be formatted to fit within<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>width</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>columns (79 by default), on a single line. The output will be truncated if necessary.</P>
<P><CODE>~:@y</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~@y</CODE>, except the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>width</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameter is interpreted to be the maximum column to which to output. That is to say, if you are at column 10, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~60:@y</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is seen, the datum will be truncated to 50 columns.</P></DD>
<DT><CODE>~?</CODE></DT>
<DT><CODE>~k</CODE></DT>
<DD>
<P>Sub-format. No parameters.</P>
<P>Take a format string argument and a second argument which is a list of arguments for that string, and output the result.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "~?" "~d ~d" '(1 2))    -| 1 2
</PRE></DIV>
<P><CODE>~@?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>takes arguments for the sub-format directly rather than in a list.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "~@? ~s" "~d ~d" 1 2 "foo") -| 1 2 "foo"
</PRE></DIV>
<P><CODE>~?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~k</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are the same,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~k</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is provided for T-Scheme compatibility.</P></DD>
<DT><CODE>~*</CODE></DT>
<DD>
<P>Argument jumping. Parameter:<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>N</VAR>.</P>
<P>Move forward<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>N</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>arguments (default 1) in the argument list.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~:*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>moves backwards. (<VAR>N</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>cannot be negative.)</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #f "~d ~2*~d" 1 2 3 4) &#8658; "1 4"
(format #f "~d ~:*~d" 6)       &#8658; "6 6"
</PRE></DIV>
<P><CODE>~@*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>moves to argument number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>N</VAR>. The first argument is number 0 (and that&#8217;s the default for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>N</VAR>).</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #f "~d~d again ~@*~d~d" 1 2) &#8658; "12 again 12"
(format #f "~d~d~d ~1@*~d~d" 1 2 3)  &#8658; "123 23"
</PRE></DIV>
<P>A<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>move to the end followed by a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>:</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>modifier move back can be used for an absolute position relative to the end of the argument list, a reverse of what the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>@</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>modifier does.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "~#*~2:*~a" 'a 'b 'c 'd)   -| c
</PRE></DIV>
<P>At the end of the format string the current argument position doesn&#8217;t matter, any further arguments are ignored.</P></DD>
<DT><CODE>~t</CODE></DT>
<DD>
<P>Advance to a column position. Parameters:<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>colnum</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>colinc</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>padchar</VAR>.</P>
<P>Output<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>padchar</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(space by default) to move to the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>colnum</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>column. The start of the line is column 0, the default for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>colnum</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 1.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #f "~tX")  &#8658; " X"
(format #f "~3tX") &#8658; "   X"
</PRE></DIV>
<P>If the current column is already past<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>colnum</VAR>, then the move is to there plus a multiple of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>colinc</VAR>, ie. column<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>colnum</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>+<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>N</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>*<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>colinc</VAR></EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>for the smallest<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>N</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>which makes that value greater than or equal to the current column. The default<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>colinc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 1 (which means no further move).</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #f "abcd~2,5,'.tx") &#8658; "abcd...x"
</PRE></DIV>
<P><CODE>~@t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>takes<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>colnum</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as an offset from the current column.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>colnum</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>many pad characters are output, then further padding to make the current column a multiple of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>colinc</VAR>, if it isn&#8217;t already so.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #f "a~3,5'*@tx") &#8658; "a****x"
</PRE></DIV>
<P><CODE>~t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is implemented using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>port-column</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Reading">Reading</A>), so it works even there has been other output before<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>format</CODE>.</P></DD>
<DT><CODE>~~</CODE></DT>
<DD>
<P>Tilde character. Parameter:<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>.</P>
<P>Output a tilde character<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~</CODE>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>many if a parameter is given. Normally<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>introduces an escape sequence,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~~</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the way to output a literal tilde.</P></DD>
<DT><CODE>~%</CODE></DT>
<DD>
<P>Newline. Parameter:<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>.</P>
<P>Output a newline character, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>many if a parameter is given. A newline (or a few newlines) can of course be output just by including them in the format string.</P></DD>
<DT><CODE>~&amp;</CODE></DT>
<DD>
<P>Start a new line. Parameter:<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>.</P>
<P>Output a newline if not already at the start of a line. With a parameter, output that many newlines, but with the first only if not already at the start of a line. So for instance 3 would be a newline if not already at the start of a line, and 2 further newlines.</P></DD>
<DT><CODE>~_</CODE></DT>
<DD>
<P>Space character. Parameter:<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>.</P>
<P>Output a space character, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>many if a parameter is given.</P>
<P>With a variable parameter this is one way to insert runtime calculated padding (<CODE>~t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or the various field widths can do similar things).</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #f "~v_foo" 4) &#8658; "    foo"
</PRE></DIV></DD>
<DT><CODE>~/</CODE></DT>
<DD>
<P>Tab character. Parameter:<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>.</P>
<P>Output a tab character, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>many if a parameter is given.</P></DD>
<DT><CODE>~|</CODE></DT>
<DD>
<P>Formfeed character. Parameter:<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>.</P>
<P>Output a formfeed character, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>many if a parameter is given.</P></DD>
<DT><CODE>~!</CODE></DT>
<DD>
<P>Force output. No parameters.</P>
<P>At the end of output, call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>force-output</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to flush any buffers on the destination (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Writing">Writing</A>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can occur anywhere in the format string, but the force is done at the end of output.</P>
<P>When output is to a string (destination<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE>),<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>does nothing.</P></DD>
<DT><CODE>~newline</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(ie. newline character)</DT>
<DD>
<P>Continuation line. No parameters.</P>
<P>Skip this newline and any following whitespace in the format string, ie. don&#8217;t send it to the output. This can be used to break up a long format string for readability, but not print the extra whitespace.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #f "abc~
            ~d def~
            ~d" 1 2) &#8658; "abc1 def2"
</PRE></DIV>
<P><CODE>~:newline</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>skips the newline but leaves any further whitespace to be printed normally.</P>
<P><CODE>~@newline</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>prints the newline then skips following whitespace.</P></DD>
<DT><CODE>~(</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~)</CODE></DT>
<DD>
<P>Case conversion. No parameters.</P>
<P>Between<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~(</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>the case of all output is changed. The modifiers on<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~(</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>control the conversion.</P>
<UL style="LIST-STYLE-TYPE: none" class=no-bullet>
<LI><CODE>~(</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8212; lower case.</LI>
<LI><CODE>~:@(</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8212; upper case.</LI></UL>
<P>For example,</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "~(Hello~)")   -| hello
(format #t "~:@(Hello~)") -| HELLO
</PRE></DIV>
<P>In the future it&#8217;s intended the modifiers<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>:</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>@</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>alone will capitalize the first letters of words, as per Common Lisp<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>format</CODE>, but the current implementation of this is flawed and not recommended for use.</P>
<P>Case conversions do not nest, currently. This might change in the future, but if it does then it will be to Common Lisp style where the outermost conversion has priority, overriding inner ones (making those fairly pointless).</P></DD>
<DT><CODE>~{</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~}</CODE></DT>
<DD>
<P>Iteration. Parameter:<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>maxreps</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~{</CODE>).</P>
<P>The format between<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~{</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~}</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is iterated. The modifiers to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~{</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>determine how arguments are taken. The default is a list argument with each iteration successively consuming elements from it. This is a convenient way to output a whole list.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "~{~d~}"     '(1 2 3))       -| 123
(format #t "~{~s=~d ~}" '("x" 1 "y" 2)) -| "x"=1 "y"=2
</PRE></DIV>
<P><CODE>~:{</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>takes a single argument which is a list of lists, each of those contained lists gives the arguments for the iterated format.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "~:{~dx~d ~}" '((1 2) (3 4) (5 6)))
-| 1x2 3x4 5x6
</PRE></DIV>
<P><CODE>~@{</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>takes arguments directly, with each iteration successively consuming arguments.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "~@{~d~}"     1 2 3)       -| 123
(format #t "~@{~s=~d ~}" "x" 1 "y" 2) -| "x"=1 "y"=2
</PRE></DIV>
<P><CODE>~:@{</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>takes list arguments, one argument for each iteration, using that list for the format.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "~:@{~dx~d ~}" '(1 2) '(3 4) '(5 6))
-| 1x2 3x4 5x6
</PRE></DIV>
<P>Iterating stops when there are no more arguments or when the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>maxreps</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameter to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~{</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is reached (default no maximum).</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "~2{~d~}" '(1 2 3 4)) -| 12
</PRE></DIV>
<P>If the format between<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~{</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~}</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is empty, then a format string argument is taken (before iteration argument(s)) and used instead. This allows a sub-format (like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>above) to be iterated.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "~{~}" "~d" '(1 2 3)) -| 123
</PRE></DIV>
<P>Iterations can be nested, an inner iteration operates in the same way as described, but of course on the arguments the outer iteration provides it. This can be used to work into nested list structures. For example in the following the inner<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~{~d~}x</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is applied to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(1 2)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>then<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(3 4 5)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>etc.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "~{~{~d~}x~}" '((1 2) (3 4 5))) -| 12x345x
</PRE></DIV>
<P>See also<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~^</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>below for escaping from iteration.</P></DD>
<DT><CODE>~[</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~]</CODE></DT>
<DD>
<P>Conditional. Parameter:<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>selector</VAR>.</P>
<P>A conditional block is delimited by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~[</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~]</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>separates clauses within the block.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~[</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>takes an integer argument and that number clause is used. The first clause is number 0.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #f "~[peach~;banana~;mango~]" 1)  &#8658; "banana"
</PRE></DIV>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>selector</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameter can be used for the clause number, instead of taking an argument.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #f "~2[peach~;banana~;mango~]") &#8658; "mango"
</PRE></DIV>
<P>If the clause number is out of range then nothing is output. Or the last clause can be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~:;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to use that for a number out of range.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #f "~[banana~;mango~]"         99) &#8658; ""
(format #f "~[banana~;mango~:;fruit~]" 99) &#8658; "fruit"
</PRE></DIV>
<P><CODE>~:[</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>treats the argument as a flag, and expects two clauses. The first is used if the argument is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or the second otherwise.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #f "~:[false~;not false~]" #f)   &#8658; "false"
(format #f "~:[false~;not false~]" 'abc) &#8658; "not false"

(let ((n 3))
  (format #t "~d gnu~:[s are~; is~] here" n (= 1 n)))
-| 3 gnus are here
</PRE></DIV>
<P><CODE>~@[</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>also treats the argument as a flag, and expects one clause. If the argument is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>then no output is produced and the argument is consumed, otherwise the clause is used and the argument is not consumed, it&#8217;s left for the clause. This can be used for instance to suppress output if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>means something not available.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #f "~@[temperature=~d~]" 27) &#8658; "temperature=27"
(format #f "~@[temperature=~d~]" #f) &#8658; ""
</PRE></DIV></DD>
<DT><CODE>~^</CODE></DT>
<DD>
<P>Escape. Parameters:<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val1</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val2</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val3</VAR>.</P>
<P>Stop formatting if there are no more arguments. This can be used for instance to have a format string adapt to a variable number of arguments.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "~d~^ ~d" 1)   -| 1
(format #t "~d~^ ~d" 1 2) -| 1 2
</PRE></DIV>
<P>Within a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~{</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~}</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>iteration,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~^</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>stops the current iteration step if there are no more arguments to that step, but continuing with possible further steps and the rest of the format. This can be used for instance to avoid a separator on the last iteration, or to adapt to variable length argument lists.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #f "~{~d~^/~} go"    '(1 2 3))     &#8658; "1/2/3 go"
(format #f "~:{ ~d~^~d~} go" '((1) (2 3))) &#8658; " 1 23 go"
</PRE></DIV>
<P>Within a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>sub-format,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~^</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>operates just on that sub-format. If it terminates the sub-format then the originating format will still continue.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "~? items" "~d~^ ~d" '(1))   -| 1 items
(format #t "~? items" "~d~^ ~d" '(1 2)) -| 1 2 items
</PRE></DIV>
<P>The parameters to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~^</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(which are numbers) change the condition used to terminate. For a single parameter, termination is when that value is zero (notice this makes plain<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~^</CODE>equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~#^</CODE>). For two parameters, termination is when those two are equal. For three parameters, termination is when<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>val1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;=<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val2</VAR></EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM><VAR>val2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt;=<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val3</VAR></EM>.</P></DD>
<DT><CODE>~q</CODE></DT>
<DD>
<P>Inquiry message. Insert a copyright message into the output.</P>
<P><CODE>~:q</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>inserts the format implementation version.</P></DD></DL><BR>
<P>It&#8217;s an error if there are not enough arguments for the escapes in the format string, but any excess arguments are ignored.</P>
<P>Iterations<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~{</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~}</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and conditionals<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~[</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~]</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be nested, but must be properly nested, meaning the inner form must be entirely within the outer form. So it&#8217;s not possible, for instance, to try to conditionalize the endpoint of an iteration.</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(format #t "~{ ~[ ... ~] ~}" ...)       ;; good
(format #t "~{ ~[ ... ~} ... ~]" ...)   ;; bad
</PRE></DIV>
<P>The same applies to case conversions<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~(</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~)</CODE>, they must properly nest with respect to iterations and conditionals (though currently a case conversion cannot nest within another case conversion).</P>
<P>When a sub-format (<CODE>~?</CODE>) is used, that sub-format string must be self-contained. It cannot for instance give a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~{</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to begin an iteration form and have the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>~}</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>up in the originating format, or similar.</P></DD></DL><BR style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Guile contains a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>format</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>procedure even when the module<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 format)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not loaded. The default<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>format</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>simple-format</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Writing">Writing</A>), it doesn&#8217;t support all escape sequences documented in this section, and will signal an error if you try to use one of them. The reason for two versions is that the full<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>format</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is fairly large and requires some time to load.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>simple-format</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is often adequate too.