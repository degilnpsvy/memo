<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>7.9 Pretty Printing</H3><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-pretty-printing></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The module<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 pretty-print)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>provides the procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>pretty-print</CODE>, which provides nicely formatted output of Scheme objects. This is especially useful for deeply nested or complex data structures, such as lists and vectors.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The module is loaded by entering the following:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(use-modules (ice-9 pretty-print))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This makes the procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>pretty-print</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>available. As an example how<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>pretty-print</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will format the output, see the following:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(pretty-print '(define (foo) (lambda (x)
(cond ((zero? x) #t) ((negative? x) -x) (else
(if (= x 1) 2 (* x x x)))))))
-|
(define (foo)
  (lambda (x)
    (cond ((zero? x) #t)
          ((negative? x) -x)
          (else (if (= x 1) 2 (* x x x))))))
</PRE></DIV>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-pretty_002dprint-1></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>pretty-print</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj [port] [keyword-options]</EM></DT>
<DD>
<P>Print the textual representation of the Scheme object<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>defaults to the current output port, if not given.</P>
<P>The further<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>keyword-options</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are keywords and parameters as follows,</P>
<DL compact>
<DT><CODE>#:display?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>flag</VAR></DT>
<DD>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>flag</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true then print using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>display</CODE>. The default is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>which means use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>style. (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Writing">Writing</A>)</P></DD>
<DT><CODE>#:per-line-prefix</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>string</VAR></DT>
<DD>
<P>Print the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>string</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a prefix on each line. The default is no prefix.</P></DD>
<DT><CODE>#:width</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>columns</VAR></DT>
<DD>
<P>Print within the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>columns</VAR>. The default is 79.</P></DD></DL></DD></DL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-truncated-printing></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Also exported by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(ice-9 pretty-print)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>module is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>truncated-print</CODE>, a procedure to print Scheme datums, truncating the output to a certain number of characters. This is useful when you need to present an arbitrary datum to the user, but you only have one line in which to do so.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=lisp><PRE class=lisp>(define exp '(a b #(c d e) f . g))
(truncated-print exp #:width 10) (newline)
-| (a b . #)
(truncated-print exp #:width 15) (newline)
-| (a b # f . g)
(truncated-print exp #:width 18) (newline)
-| (a b #(c ...) . #)
(truncated-print exp #:width 20) (newline)
-| (a b #(c d e) f . g)
(truncated-print "The quick brown fox" #:width 20) (newline)
-| "The quick brown..."
(truncated-print (current-module) #:width 20) (newline)
-| #&lt;directory (gui...&gt;
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>truncated-print</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will not output a trailing newline. If an expression does not fit in the given width, it will be truncated &#8211; possibly ellipsized<A href="https://www.gnu.org/software/guile/manual/guile.html#FOOT24" name=DOCF24><SUP>24</SUP></A>, or in the worst case, displayed as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#</CODE>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-truncated_002dprint></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>truncated-print</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>obj [port] [keyword-options]</EM></DT>
<DD>
<P>Print<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR>, truncating the output, if necessary, to make it fit into<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>width</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>characters. By default,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be printed using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write</CODE>, though that behavior can be overridden via the<VAR>display?</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword argument.</P>
<P>The default behaviour is to print depth-first, meaning that the entire remaining width will be available to each sub-expression of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8211; e.g., if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a vector, each member of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>obj</VAR>. One can attempt to &#8220;ration&#8221; the available width, trying to allocate it equally to each sub-expression, via the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>breadth-first?</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword argument.</P>
<P>The further<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>keyword-options</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are keywords and parameters as follows,</P>
<DL compact>
<DT><CODE>#:display?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>flag</VAR></DT>
<DD>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>flag</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true then print using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>display</CODE>. The default is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>which means use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>style. (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Writing">Writing</A>)</P></DD>
<DT><CODE>#:width</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>columns</VAR></DT>
<DD>
<P>Print within the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>columns</VAR>. The default is 79.</P></DD>
<DT><CODE>#:breadth-first?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>flag</VAR></DT>
<DD>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>flag</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true, then allocate the available width breadth-first among elements of a compound data structure (list, vector, pair, etc.). The default is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>which means that any element is allowed to consume all of the available width.</P></DD></DL></DD></DL>