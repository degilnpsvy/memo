<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>7.14 Buffered Input</H3><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Buffered-input></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Line-continuation></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following functions are provided by</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>(use-modules (ice-9 buffered-input))
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A buffered input port allows a reader function to return chunks of characters which are to be handed out on reading the port. A notion of further input for an application level logical expression is maintained too, and passed through to the reader.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dbuffered_002dinput_002dport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-buffered-input-port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>reader</EM></DT>
<DD>
<P>Create an input port which returns characters obtained from the given<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>reader</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>function.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>reader</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called (<VAR>reader</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>cont), and should return a string or an EOF object.</P>
<P>The new port gives precisely the characters returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>reader</VAR>, nothing is added, so if any newline characters or other separators are desired they must come from the reader function.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cont</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameter to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>reader</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for initial input, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>when continuing an expression. This is an application level notion, set with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set-buffered-input-continuation?!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>below. If the user has entered a partial expression then it allows<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>reader</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>for instance to give a different prompt to show more is required.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-make_002dline_002dbuffered_002dinput_002dport></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>make-line-buffered-input-port</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>reader</EM></DT>
<DD><A name=index-Line-buffered-input></A>
<P>Create an input port which returns characters obtained from the specified<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>reader</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>function, similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>make-buffered-input-port</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>above, but where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>reader</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is expected to be a line-oriented.</P>
<P><VAR>reader</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called (<VAR>reader</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>cont), and should return a string or an EOF object as above. Each string is a line of input without a newline character, the port code inserts a newline after each string.</P></DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><A name=index-set_002dbuffered_002dinput_002dcontinuation_003f_0021></A>Scheme Procedure:<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>set-buffered-input-continuation?!</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>port cont</EM></DT>
<DD>
<P>Set the input continuation flag for a given buffered input<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>port</VAR>.</P>
<P>An application uses this by calling with a<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cont</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>flag of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>when beginning to read a new logical expression. For example with the Scheme<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://www.gnu.org/software/guile/manual/guile.html#Scheme-Read">Scheme Read</A>),</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>(define my-port (make-buffered-input-port my-reader))

(set-buffered-input-continuation?! my-port #f)
(let ((obj (read my-port)))
  ...</PRE></DIV></DD></DL>