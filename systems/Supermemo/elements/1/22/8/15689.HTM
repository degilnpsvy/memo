<H2 class=chapter style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">9 c++filt</H2>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A name=index-c_002b_002bfilt-136></A><A name=index-demangling-C_002b_002b-symbols-137></A></P><PRE class=smallexample style="FONT-WEIGHT: normal; FONT-SIZE: smaller; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">     
     c++filt [<SAMP><SPAN class=option>-_</SPAN></SAMP>|<SAMP><SPAN class=option>--strip-underscore</SPAN></SAMP>]
             [<SAMP><SPAN class=option>-n</SPAN></SAMP>|<SAMP><SPAN class=option>--no-strip-underscore</SPAN></SAMP>]
             [<SAMP><SPAN class=option>-p</SPAN></SAMP>|<SAMP><SPAN class=option>--no-params</SPAN></SAMP>]
             [<SAMP><SPAN class=option>-t</SPAN></SAMP>|<SAMP><SPAN class=option>--types</SPAN></SAMP>]
             [<SAMP><SPAN class=option>-i</SPAN></SAMP>|<SAMP><SPAN class=option>--no-verbose</SPAN></SAMP>]
             [<SAMP><SPAN class=option>-s</SPAN></SAMP> <VAR>format</VAR>|<SAMP><SPAN class=option>--format=</SPAN></SAMP><VAR>format</VAR>]
             [<SAMP><SPAN class=option>--help</SPAN></SAMP>]  [<SAMP><SPAN class=option>--version</SPAN></SAMP>]  [<VAR>symbol</VAR>...]
     
</PRE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A name=index-cxxfilt-138></A>The C++ and Java languages provide function overloading, which means that you can write many functions with the same name, providing that each function takes parameters of different types. In order to be able to distinguish these similarly named functions C++ and Java encode them into a low-level assembler name which uniquely identifies each different version. This process is known as<SPAN class=Apple-converted-space>&nbsp;</SPAN><DFN>mangling</DFN>. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>c++filt</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://sourceware.org/binutils/docs/binutils/c_002b_002bfilt.html#fn-1" rel=footnote name=fnd-1><SUP>1</SUP></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>program does the inverse mapping: it decodes (<DFN>demangles</DFN>) low-level names into user-level names so that they can be read.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Every alphanumeric word (consisting of letters, digits, underscores, dollars, or periods) seen in the input is a potential mangled name. If the name decodes into a C++ name, the C++ name replaces the low-level name in the output, otherwise the original word is output. In this way you can pass an entire assembler source file, containing mangled names, through<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>c++filt</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and see the same source file containing demangled names.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">You can also use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>c++filt</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to decipher individual symbols by passing them on the command line:</P><PRE class=example style="FONT-WEIGHT: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">     c++filt <VAR>symbol</VAR>
</PRE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">If no<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>symbol</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>arguments are given,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>c++filt</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>reads symbol names from the standard input instead. All the results are printed on the standard output. The difference between reading names from the command line versus reading names from the standard input is that command line arguments are expected to be just mangled names and no checking is performed to separate them from surrounding text. Thus for example:</P><PRE class=smallexample style="FONT-WEIGHT: normal; FONT-SIZE: smaller; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">     c++filt -n _Z1fv
</PRE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">will work and demangle the name to &#8220;f()&#8221; whereas:</P><PRE class=smallexample style="FONT-WEIGHT: normal; FONT-SIZE: smaller; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">     c++filt -n _Z1fv,
</PRE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">will not work. (Note the extra comma at the end of the mangled name which makes it invalid). This command however will work:</P><PRE class=smallexample style="FONT-WEIGHT: normal; FONT-SIZE: smaller; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">     echo _Z1fv, | c++filt -n
</PRE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">and will display &#8220;f(),&#8221;, i.e., the demangled name followed by a trailing comma. This behaviour is because when the names are read from the standard input it is expected that they might be part of an assembler source file where there might be extra, extraneous characters trailing after a mangled name. For example:</P><PRE class=smallexample style="FONT-WEIGHT: normal; FONT-SIZE: smaller; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">         .type   _Z1fv, @function
</PRE>
<DL style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<DT><SAMP><SPAN class=env>-_</SPAN></SAMP></DT>
<DT><SAMP><SPAN class=env>--strip-underscore</SPAN></SAMP></DT>
<DD>On some systems, both the C and C++ compilers put an underscore in front of every name. For example, the C name<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>foo</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>gets the low-level name<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_foo</CODE>. This option removes the initial underscore. Whether<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>c++filt</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>removes the underscore by default is target dependent.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><SAMP><SPAN class=env>-n</SPAN></SAMP></DT>
<DT><SAMP><SPAN class=env>--no-strip-underscore</SPAN></SAMP></DT>
<DD>Do not remove the initial underscore.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><SAMP><SPAN class=env>-p</SPAN></SAMP></DT>
<DT><SAMP><SPAN class=env>--no-params</SPAN></SAMP></DT>
<DD>When demangling the name of a function, do not display the types of the function's parameters.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><SAMP><SPAN class=env>-t</SPAN></SAMP></DT>
<DT><SAMP><SPAN class=env>--types</SPAN></SAMP></DT>
<DD>Attempt to demangle types as well as function names. This is disabled by default since mangled types are normally only used internally in the compiler, and they can be confused with non-mangled names. For example, a function called &#8220;a&#8221; treated as a mangled type name would be demangled to &#8220;signed char&#8221;.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><SAMP><SPAN class=env>-i</SPAN></SAMP></DT>
<DT><SAMP><SPAN class=env>--no-verbose</SPAN></SAMP></DT>
<DD>Do not include implementation details (if any) in the demangled output.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><SAMP><SPAN class=env>-s<SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN><VAR>format</VAR></SAMP></DT>
<DT><SAMP><SPAN class=env>--format=</SPAN><VAR>format</VAR></SAMP></DT>
<DD><SAMP><SPAN class=command>c++filt</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>can decode various methods of mangling, used by different compilers. The argument to this option selects which method it uses:
<DL>
<DT><CODE>auto</CODE></DT>
<DD>Automatic selection based on executable (the default method)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>gnu</CODE></DT>
<DD>the one used by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=sc style="FONT-VARIANT: small-caps">gnu</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>C++ compiler (g++)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>lucid</CODE></DT>
<DD>the one used by the Lucid compiler (lcc)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>arm</CODE></DT>
<DD>the one specified by the C++ Annotated Reference Manual<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>hp</CODE></DT>
<DD>the one used by the HP compiler (aCC)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>edg</CODE></DT>
<DD>the one used by the EDG compiler<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>gnu-v3</CODE></DT>
<DD>the one used by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=sc style="FONT-VARIANT: small-caps">gnu</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>C++ compiler (g++) with the V3 ABI.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>java</CODE></DT>
<DD>the one used by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=sc style="FONT-VARIANT: small-caps">gnu</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>Java compiler (gcj)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>gnat</CODE></DT>
<DD>the one used by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=sc style="FONT-VARIANT: small-caps">gnu</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>Ada compiler (GNAT).</DD></DL><BR></DD>
<DT><SAMP><SPAN class=env>--help</SPAN></SAMP></DT>
<DD>Print a summary of the options to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>c++filt</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and exit.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><SAMP><SPAN class=env>--version</SPAN></SAMP></DT>
<DD>Print the version number of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>c++filt</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and exit.</DD></DL>
<BLOCKQUOTE style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><EM>Warning:</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>c++filt</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a new utility, and the details of its user interface are subject to change in future releases. In particular, a command-line option may be required in the future to decode a name passed as an argument on the command line; in other words,<PRE class=example>          c++filt <VAR>symbol</VAR>
     </PRE>
<P class=noindent>may in a future release become</P><PRE class=example>          c++filt <VAR>option</VAR> <VAR>symbol</VAR>
     </PRE></BLOCKQUOTE>
<DIV class=footnote style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<HR>

<H4>Footnotes</H4>
<P class=footnote><SMALL>[<A href="https://sourceware.org/binutils/docs/binutils/c_002b_002bfilt.html#fnd-1" name=fn-1>1</A>]</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>MS-DOS does not allow<SPAN class=Apple-converted-space>&nbsp;</SPAN><KBD>+</KBD><SPAN class=Apple-converted-space>&nbsp;</SPAN>characters in file names, so on MS-DOS this program is named<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>CXXFILT</SPAN></SAMP>.</P></DIV>