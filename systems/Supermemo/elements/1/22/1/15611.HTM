<H1 style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC57">Frequently Asked Questions</A></H1>
<DL style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" compact>
<DT>Which do I run first,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`autoconf'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`automake'</SAMP>?</DT>
<DD>Except when you first add autoconf or automake support to a package, you shouldn't run either by hand. Instead, configure with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--enable-maintainer-mode'</SAMP>option, and let<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`make'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>take care of it.<A name=IDX72></A></DD>
<DT><SAMP>`autoconf'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>says something about undefined macros.</DT>
<DD>This means that you have macros in your<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure.in'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>which are not defined by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`autoconf'</SAMP>. You may be using an old version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`autoconf'</SAMP>; try building and installing a newer one. Make sure the newly installled<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`autoconf'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is first on your<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`PATH'</SAMP>. Also, see the next question.<A name=IDX73></A><A name=IDX74></A></DD>
<DT>My<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>script has stuff like<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`CY_GNU_GETTEXT'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>in it.</DT>
<DD>This means that you have macros in your<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure.in'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>which should be defined in your<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`aclocal.m4'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>file, but aren't. This usually means that<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`aclocal'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>was not able to appropriate definitions of the macros. Make sure that you have installed all the packages you need. In particular, make sure that you have installed libtool (this is where<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AM_PROG_LIBTOOL'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is defined) and gettext (this is where<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`CY_GNU_GETTEXT'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is defined, at least in the Cygnus version of gettext).<A name=IDX75></A></DD>
<DT>My<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>has<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`@'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>characters in it.</DT>
<DD>This may mean that you tried to use an autoconf substitution in your<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile.in'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>without adding the appropriate<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AC_SUBST'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>call to your<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>script. Or it may just mean that you need to rebuild<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>in your build directory. To rebuild<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>from<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile.in'</TT>, run the shell script<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`config.status'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>with no arguments. If you need to force<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>to run again, first run<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`config.status --recheck'</SAMP>. These runs are normally done automatically by<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>targets, but if your<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>has gotten messed up you'll need to help them along.<A name=IDX76></A></DD>
<DT>Why do I have to run both<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`config.status --recheck'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`config.status'</SAMP>?</DT>
<DD>Normally, you don't; they will be run automatically by<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>targets. If you do need to run them, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`config.status --recheck'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to run the<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>script again with the same arguments as the first time you ran it. Use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`config.status'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>(with no arguments) to regenerate all files (<TT>`Makefile'</TT>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`config.h'</TT>, etc.) based on the results of the configure script. The two cases are separate because it isn't always necessary to regenerate all the files after running<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`config.status --recheck'</SAMP>. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>targets generated by automake will use the environment variables<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`CONFIG_FILES'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`CONFIG_HEADERS'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to only regenerate files as they are needed.</DD>
<DT>What is the Cygnus tree?</DT>
<DD>The Cygnus tree is used for various packages including gdb, the GNU binutils, and egcs. It is also, of course, used for Cygnus releases. It is the build system which was developed at Cygnus, using the Cygnus configure script. It permits building many different packages with a single configure and make. The configure scripts in the tree are being converted to autoconf, but the general build structure remains intact.</DD>
<DT>Why do I have to keep rebuilding and reinstalling the tools?</DT>
<DD>I know, it's a pain. Unfortunately, there are bugs in the tools themselves which need to be fixed, and each time that happens everybody who uses the tools need to reinstall new versions of them. I don't know if there is going to be a clever fix until the tools stabilize.</DD>
<DT>Why not just have a Cygnus tree<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`make'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>target to update the tools?</DT>
<DD>The tools unfortunately need to be installed before they can be used. That means that they must be built using an appropriate prefix, and it seems unwise to assume that every configuration uses an appropriate prefix. It might be possible to make them work in place, or it might be possible to install them in some subdirectory; so far these approaches have not been implemented.</DD></DL><BR class=Apple-interchange-newline>