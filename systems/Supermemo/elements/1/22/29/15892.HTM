<H2 style="MARGIN: 13pt 0cm"><SPAN style="LINE-HEIGHT: 173%; FONT-SIZE: 22pt; mso-bidi-font-size: 16.0pt; mso-font-kerning: 0pt" lang=EN-US><FONT face=Arial>29.4 Thread Termination</FONT></SPAN></H2>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US><FONT class=extract>The execution of a thread terminates in one of the following ways:</FONT></SPAN></P>
<P style="TEXT-INDENT: -21pt; MARGIN: 0cm 0cm 0pt 21pt; mso-list: l0 level1 lfo1; tab-stops: list 21.0pt" class=MsoNormal><FONT class=extract><SPAN style="FONT-FAMILY: Wingdings; FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-fareast-font-family: Wingdings; mso-bidi-font-family: Wingdings" lang=EN-US><SPAN style="mso-list: Ignore">l<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp; </SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>The thread&#8217;s start function performs a return specifying a return value for the thread.</SPAN></FONT></P>
<P style="TEXT-INDENT: -21pt; MARGIN: 0cm 0cm 0pt 21pt; mso-list: l0 level1 lfo1; tab-stops: list 21.0pt" class=MsoNormal><FONT class=extract><SPAN style="FONT-FAMILY: Wingdings; FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-fareast-font-family: Wingdings; mso-bidi-font-family: Wingdings" lang=EN-US><SPAN style="mso-list: Ignore">l<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp; </SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>The thread calls pthread_exit() (described below).</SPAN></FONT></P>
<P style="TEXT-INDENT: -21pt; MARGIN: 0cm 0cm 0pt 21pt; mso-list: l0 level1 lfo1; tab-stops: list 21.0pt" class=MsoNormal><FONT class=extract><SPAN style="FONT-FAMILY: Wingdings; FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-fareast-font-family: Wingdings; mso-bidi-font-family: Wingdings" lang=EN-US><SPAN style="mso-list: Ignore">l<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp; </SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>The thread is canceled using pthread_cancel() (described in Section 32.1).</SPAN></FONT></P>
<P style="TEXT-INDENT: -21pt; MARGIN: 0cm 0cm 0pt 21pt; mso-list: l0 level1 lfo1; tab-stops: list 21.0pt" class=MsoNormal><FONT class=extract><SPAN style="FONT-FAMILY: Wingdings; FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-fareast-font-family: Wingdings; mso-bidi-font-family: Wingdings" lang=EN-US><SPAN style="mso-list: Ignore">l<SPAN style="FONT: 7pt 'Times New Roman'">&nbsp; </SPAN></SPAN></SPAN><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>Any of the threads calls exit(), or the main thread performs a return (in the main() function), which causes all threads in the process to terminate immediately.</SPAN></FONT></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US><FONT class=extract>The pthread_exit() function terminates the calling thread, and specifies a return value that can be obtained in another thread by calling pthread_join().</FONT></SPAN></P>
<P style="MARGIN: 0cm 10.5pt 0pt" class=a><SPAN style="FONT-SIZE: 15pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US><EM><FONT class=extract>include &lt;pthread.h&gt;</FONT></EM></SPAN></P>
<P style="MARGIN: 0cm 10.5pt 0pt" class=a><SPAN style="FONT-SIZE: 15pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US><EM><FONT class=extract>void pthread_exit(void *retval);</FONT></EM></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US><FONT class=extract>Calling pthread_exit() is equivalent to performing a return in the thread&#8217;s start function, with the difference that pthread_exit() can be called from any function that has been called by the thread&#8217;s start function.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US><FONT class=extract>The retval argument specifies the return value for the thread. The value pointed to by retval should not be located on the thread&#8217;s stack, since the contents of that stack become undefined on thread termination. (For example, that region of the process&#8217;s virtual memory might be immediately reused by the stack for a new thread.) The same statement applies to the value given to a return statement in the thread&#8217;s start function.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US><FONT class=extract>If the main thread calls pthread_exit() instead of calling exit() or performing a return, then the other threads continue to execute.</FONT></SPAN>