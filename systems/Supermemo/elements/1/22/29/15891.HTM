<H2 style="MARGIN: 13pt 0cm"><SPAN style="LINE-HEIGHT: 173%; FONT-SIZE: 22pt; mso-bidi-font-size: 16.0pt; mso-font-kerning: 0pt" lang=EN-US><FONT face=Arial>29.3 Thread Creation</FONT></SPAN></H2>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>When a program is started, the resulting process consists of a single thread, called the </SPAN><SPAN style="FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; FONT-SIZE: 20pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>initial </SPAN><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>or </SPAN><SPAN style="FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; FONT-SIZE: 20pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>main </SPAN><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>thread. In this section, we look at how to create additional threads.</SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><FONT class=extract><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>The </SPAN><SPAN style="FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; FONT-SIZE: 20pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>pthread_create() </SPAN><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>function creates a new thread.</SPAN></FONT></P>
<P style="MARGIN: 0cm 10.5pt 0pt" class=a><SPAN style="FONT-SIZE: 15pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US><EM><FONT class=extract>#include &lt;pthread.h&gt;</FONT></EM></SPAN></P>
<P style="MARGIN: 0cm 10.5pt 0pt" class=a><SPAN style="FONT-SIZE: 15pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US><EM><FONT class=extract>int pthread_create(pthread_t *thread, const pthread_attr_t *attr,</FONT></EM></SPAN></P>
<P style="MARGIN: 0cm 10.5pt 0pt" class=a><SPAN style="FONT-SIZE: 15pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US><EM><FONT class=extract>void *(*start)(void *), void *arg);</FONT></EM></SPAN></P>
<P style="MARGIN: 0cm 10.5pt 0pt" class=a><SPAN style="FONT-SIZE: 15pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US><EM><FONT class=extract>Returns 0 on success, or a positive error number on error</FONT></EM></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><FONT class=extract><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>The new thread commences execution by calling the function identified by </SPAN><SPAN style="FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; FONT-SIZE: 20pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>start </SPAN><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>with the argument </SPAN><SPAN style="FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; FONT-SIZE: 20pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>arg </SPAN><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>(i.e., </SPAN><SPAN style="FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; FONT-SIZE: 20pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>start(arg)</SPAN><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>). The thread that calls </SPAN><SPAN style="FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; FONT-SIZE: 20pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>pthread_create() </SPAN><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>continues execution with the next statement that follows the call. (This behavior is the same as the </SPAN><SPAN style="FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; FONT-SIZE: 20pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>glibc </SPAN><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>wrapper function for the </SPAN><SPAN style="FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; FONT-SIZE: 20pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>clone() </SPAN><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>system call described in Section 28.2.)</SPAN></FONT></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><FONT class=extract><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>The </SPAN><SPAN style="FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; FONT-SIZE: 20pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>arg </SPAN><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>argument is declared as </SPAN><SPAN style="FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; FONT-SIZE: 20pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>void *</SPAN><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>, meaning that we can pass a pointer to any type of object to the </SPAN><SPAN style="FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; FONT-SIZE: 20pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>start </SPAN><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>function. Typically, </SPAN><SPAN style="FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; FONT-SIZE: 20pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>arg </SPAN><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>points to a global or heap variable, but it can also be specified as </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-Plain; FONT-SIZE: 14pt; mso-bidi-font-size: 8.5pt; mso-font-kerning: 0pt; mso-bidi-font-family: TheSansMonoCondensed-Plain" lang=EN-US>NULL</SPAN><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>. If we need to pass multiple arguments to </SPAN><SPAN style="FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; FONT-SIZE: 20pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>start</SPAN><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>, then </SPAN><SPAN style="FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; FONT-SIZE: 20pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>arg </SPAN><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>can be specified as a pointer to a structure containing the arguments as separate fields. With judicious casting, we can even specify </SPAN><SPAN style="FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; FONT-SIZE: 20pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>arg </SPAN><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>as an </SPAN><SPAN style="FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; FONT-SIZE: 20pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>int</SPAN><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>.</SPAN></FONT></P>
<P style="MARGIN: 0cm 10.5pt 0pt" class=a><SPAN style="FONT-SIZE: 15pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US><EM><FONT class=extract>Strictly speaking, the C standards don&#8217;t define the results of casting int to void * and vice versa. However, most C compilers permit these operations, and they produce the desired result; that is, int j == (int) ((void *) j).</FONT></EM></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><FONT class=extract><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>The return value of </SPAN><SPAN style="FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; FONT-SIZE: 20pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>start </SPAN><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>is likewise of type </SPAN><SPAN style="FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; FONT-SIZE: 20pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>void *</SPAN><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>, and it can be employed in the same way as the </SPAN><SPAN style="FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; FONT-SIZE: 20pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>arg </SPAN><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>argument. We&#8217;ll see how this value is used when we describe the </SPAN><SPAN style="FONT-FAMILY: 'NewBaskervilleEF-RomanIta','sans-serif'; FONT-SIZE: 20pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta" lang=EN-US>pthread_join() </SPAN><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US>function below.</SPAN></FONT></P>
<P style="MARGIN: 0cm 10.5pt 0pt" class=a><SPAN style="FONT-SIZE: 15pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US><EM><FONT class=extract>Caution is required when using a cast integer as the return value of a thread&#8217;s start function. The reason for this is that PTHREAD_CANCELED, the value returned when a thread is canceled (see Chapter 32), is usually some implementation defined integer value cast to void *. If a thread&#8217;s start function returns the same integer value, then, to another thread that is doing a pthread_join(), it will wrongly appear that the thread was canceled. In an application that employs thread cancellation and chooses to return cast integer values from a thread&#8217;s start functions, we must ensure that a normally terminating thread does not return an integer whose value matches PTHREAD_CANCELED on that Pthreads implementation. A portable application would need to ensure that normally terminating threads don&#8217;t return integer values that match PTHREAD_CANCELED on any of the implementations on which the application is to run.</FONT></EM></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US><FONT class=extract>The thread argument points to a buffer of type pthread_t into which the unique identifier for this thread is copied before pthread_create() returns. This identifier can be used in later Pthreads calls to refer to the thread.</FONT></SPAN></P>
<P style="MARGIN: 0cm 10.5pt 0pt" class=a><SPAN style="FONT-SIZE: 15pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US><EM><FONT class=extract>SUSv3 explicitly notes that the implementation need not initialize the buffer pointed to by thread before the new thread starts executing; that is, the new thread may start running before pthread_create() returns to its caller. If the new thread needs to obtain its own ID, then it must do so using pthread_self() (described in Section 29.5).</FONT></EM></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US><FONT class=extract>The attr argument is a pointer to a pthread_attr_t object that specifies various attributes for the new thread. We say some more about these attributes in Section 29.8. If attr is specified as NULL, then the thread is created with various default attributes, and this is what we&#8217;ll do in most of the example programs in this book.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 12.0pt; mso-font-kerning: 0pt" lang=EN-US><FONT class=extract>After a call to pthread_create(), a program has no guarantees about which thread will next be scheduled to use the CPU (on a multiprocessor system, both threads may simultaneously execute on different CPUs). Programs that implicitly rely on a particular order of scheduling are open to the same sorts of race conditions that we described in Section 24.4. If we need to enforce a particular order of execution, we must use one of the synchronization techniques described in Chapter 30.</FONT></SPAN>