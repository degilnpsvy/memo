<SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt">Adding testing is also a fairly straight forward process. At the end of the top level CMakeLists file we can add a number of basic tests to verify that the application is working correctly.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"># does the application run</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt">add_test (TutorialRuns Tutorial 25)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><SPAN style="mso-spacerun: yes">&nbsp;</SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"># does it sqrt of 25</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt">add_test (TutorialComp25 Tutorial 25)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><SPAN style="mso-spacerun: yes">&nbsp;</SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt">set_tests_properties (TutorialComp25 </SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>PROPERTIES PASS_REGULAR_EXPRESSION "25 is 5")</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><SPAN style="mso-spacerun: yes">&nbsp;</SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"># does it handle negative numbers</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt">add_test (TutorialNegative Tutorial -25)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt">set_tests_properties (TutorialNegative</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>PROPERTIES PASS_REGULAR_EXPRESSION "-25 is 0")</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><SPAN style="mso-spacerun: yes">&nbsp;</SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"># does it handle small numbers</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt">add_test (TutorialSmall Tutorial 0.0001)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt">set_tests_properties (TutorialSmall</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>PROPERTIES PASS_REGULAR_EXPRESSION "0.0001 is 0.01")</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><SPAN style="mso-spacerun: yes">&nbsp;</SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"># does the usage message work?</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt">add_test (TutorialUsage Tutorial)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt">set_tests_properties (TutorialUsage</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>PROPERTIES </SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>PASS_REGULAR_EXPRESSION "Usage:.*number")</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt">The first test simply verifies that the application runs, does not segfault or otherwise crash, and has a zero return value. This is the basic form of a CTest test. The next few tests all make use of the PASS_REGULAR_EXPRESSION test property to verify that the output of the test contains certain strings. In this case verifying that the computed square root is what it should be and that the usage message is printed when an incorrect number of arguments are provided. If you wanted to add a lot of tests to test different input values you might consider creating a macro like the following:</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt">#define a macro to simplify adding tests, then use it</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt">macro (do_test arg result)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>add_test (TutorialComp${arg} Tutorial ${arg})</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>set_tests_properties (TutorialComp${arg}</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>PROPERTIES PASS_REGULAR_EXPRESSION ${result})</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt">endmacro (do_test)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><SPAN style="mso-spacerun: yes">&nbsp;</SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"># do a bunch of result based tests</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt">do_test (25 "25 is 5")</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt">do_test (-25 "-25 is 0")</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt">For each invocation of do_test, another test is added to the project with a name, input, and results based on the passed arguments.</SPAN>