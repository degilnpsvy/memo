If shorthand was the extent of what CMake offered, it wouldn&#8217;t offer much advantage over straight Makefiles. But CMake also gives you full control over any options your program may need. As an example, consider a project that optionally includes a component that communiates via USB and allows the user, at compile time, to specify whether to include that component or not. The CMakeLists.txt file to do that looks like this: </P><PRE style="mso-line-height-alt: 12.0pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt"><FONT face=&#23435;&#20307;><SPAN class=cloze>[...]</SPAN></FONT></SPAN></PRE>
<P>The OPTION(...) line creates a parameter WITH_USB and set its default value to OFF. CMake also includes a help string to describe what the option does. Based on the value of WITH_USB, the variable SRCS either includes or excludes the two USB-related files usbfile1.c and usbfile2.c. SRCS is then passed to the ADD_EXECUTABLE call to define the program&#8217;s source files. To include USB support, simply enable WITH_USB like this: </P>
<P>$ cmake &#8211;DWITH_USB=ON /path/to/source/files