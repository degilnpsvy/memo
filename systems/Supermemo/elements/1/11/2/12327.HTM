You may use the git bisect visualize to visually inspect the set of commits still within the range of consideration. Git uses the graphical tool gitk if the DISPLAY environment variable is set. If not, then Git will use git log instead. In that case, --pretty=oneline might be useful, too. 
<P></P>
<P>$ <FONT class=clozed>git bisect visualize --pretty=oneline</FONT> </P>
<P>fa340d9c050e78fb21a142b617304214ae5e0c2d tracing: disable tracepoints by default </P>
<P>b07c3f193a8074aa4afe43cfa8ae38ec4c7ccfa9 ftrace: port to tracepoints </P>
<P>0a16b6075843325dc402edf80c1662838b929aff tracing, sched: LTTng instrumentation - scheduler </P>
<P>4a0897526bbc5c6ac0df80b16b8c60339e717ae2 tracing: tracepoints, samples </P>
<P>24b8d831d56aac7907752d22d2aba5d8127db6f6 tracing: tracepoints, documentation </P>
<P>97e1c18e8d17bd87e1e383b2e9d9fc740332c8e2 tracing: Kernel Tracepoints </P>
<P>The current revision under consideration is roughly in the middle of the range.