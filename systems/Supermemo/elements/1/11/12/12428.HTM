<H4 class=docSection2Title>9.2.4 etags</H4>
<P class=docText><FONT class=extract>Another general feature of </FONT><A name=gnu3-CHP-9-ITERM-2560></A><FONT class=extract>Emacs that applies to programmers is the <SPAN class=docEmphBold>etags</SPAN> facility.<SUP class=docFootnote><A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-9-sect-2.html#gnu3-chp-9-fnote-6">[6]</A></SUP> <SPAN class=docEmphBold>etags</SPAN> works with code in many other languages as well, including Fortran, Java, Perl, Pascal, LATEX,, Lisp, and many assembly languages. If you work on large, multifile projects, you will find <SPAN class=docEmphBold>etags</SPAN> to be an enormous help.</FONT></P>
<BLOCKQUOTE>
<P class=docFootnote><SUP><A name=gnu3-CHP-9-FNOTE-6>[6]</A></SUP> <SPAN class=docEmphBold>etags</SPAN> is also a platform-specific feature. The <SPAN class=docEmphBold>etags</SPAN> facility is available on Unix platforms, including Mac OS X.</P></BLOCKQUOTE>
<P class=docText><SPAN class=docEmphBold>etags</SPAN> is basically a multifile search facility <A name=gnu3-CHP-9-ITERM-2561></A>that knows about C and Perl function definitions as well as searching in general. With it, you can find a function anywhere in an entire directory without having to remember in which file the function is defined, and you can do searches and query-replaces that span multiple files. <SPAN class=docEmphBold>etags</SPAN> uses <SPAN class=docEmphasis>tag tables</SPAN>, which contain lists of function names for each file in a directory along with information on where the functions' definitions are located within the files. Many of the commands associated with <SPAN class=docEmphBold>etags</SPAN> involve regular expressions (see <A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-11.html#gnu3-chp-11">Chapter 11</A>) in search strings.</P>
<P class=docText>To use <SPAN class=docEmphBold>etags</SPAN>, you must first invoke the separate <SPAN class=docEmphBold>etags</SPAN> program in your current directory to create the tag table. Its arguments are the files for which you want tag information. The usual way to invoke it is <SPAN class=docEmphBold>etags *.[ch]</SPAN>, that is, building a tag table from all files ending in <SPAN class=docEmphasis>.c</SPAN> or <SPAN class=docEmphasis>.h</SPAN>. (That's for you C programmers; other languages would use their appropriate extensions, of course.) You can run <SPAN class=docEmphBold>etags</SPAN> from shell mode or with the command <SPAN class=docEmphBold>M-!</SPAN> (for <SPAN class=docEmphBold>shell-command</SPAN>). The output of <SPAN class=docEmphBold>etags</SPAN> is the file <SPAN class=docEmphasis>TAGS</SPAN>, which is the tag table. When you are writing code, you can update your tag table to reflect new files and function definitions by invoking <SPAN class=docEmphBold>etags</SPAN> again.</P>
<P class=docText>After you have created the tag table, you need to make it known to Emacs. To do this, type <SPAN class=docEmphBold>M-x visit-tags-table Enter</SPAN>. This prompts you for the name of the tag table file; the default is <SPAN class=docEmphasis>TAGS</SPAN> in the current directory, as you would expect. After you execute this step, you can use the various Emacs tags commands.</P>
<P class=docText>The most important tag command is <SPAN class=docEmphBold>M-</SPAN>. (for <SPAN class=docEmphBold>find-tag</SPAN>). This command prompts you for a string to use in searching the tag table for a function whose name contains the string. Supply the search string, and Emacs visits the file containing the matching function name in the current window and goes to the first line of the function's definition. A variation of <SPAN class=docEmphBold>M-</SPAN>. is <SPAN class=docEmphBold>C-x 4</SPAN> . (for <SPAN class=docEmphBold>find-tag-other-window</SPAN>), which uses another window instead of replacing the text in your current window.</P>
<P class=docText>A nice feature of <SPAN class=docEmphBold>M-</SPAN>. is that it picks up the word the cursor is on and uses it as the default search string. For example, if your cursor is anywhere on the string <SPAN class=docEmphBold>my_function</SPAN>, <SPAN class=docEmphBold>M-</SPAN>. uses <SPAN class=docEmphBold>my_function</SPAN> as the default. Thus, when you are looking at a C statement that calls a function, you can type <SPAN class=docEmphBold>M-</SPAN>. to see the code for that function.</P>
<P class=docText>If you have multiple functions with the same name, <SPAN class=docEmphBold>M-</SPAN>. finds the function in the file whose name comes first in alphabetical order. To find the others, you can use the command <SPAN class=docEmphBold>M-</SPAN>, (for <SPAN class=docEmphBold>tags-loop-continue</SPAN>) to find the next one (or complain if there are no more). This feature is especially useful if your directory contains more than one program, that is, if there is more than one function called <SPAN class=docEmphasis>main</SPAN>. <SPAN class=docEmphBold>M-</SPAN>, also has other uses, as we will see.</P>
<P class=docText>You can use the tag table to search for more than just function definitions. The command <SPAN class=docEmphBold>M-x tags-search Enter</SPAN> prompts for a regular expression; it searches through all files listed in the tag table (such as, all <SPAN class=docEmphasis>.c</SPAN> and <SPAN class=docEmphasis>.h</SPAN> files) for any occurrence of the regular expression, whether it is a function name or not. This capability is similar to the <SPAN class=docEmphBold>grep</SPAN> facility discussed earlier in this chapter. After you have invoked <SPAN class=docEmphBold>tags-search</SPAN>, you can find additional matches by typing <SPAN class=docEmphBold>M-</SPAN>,.</P>
<P class=docText>There is also an analogous query-replace capability. The command <SPAN class=docEmphBold>M-x tags-query-replace Enter</SPAN> does a regular expression query-replace (see <A class=docLink href="file:///D:/&#25105;&#30340;&#37239;&#30424;/&#24037;&#20316;&#30446;&#24405;/Now/learning-gnu-emacs-3rd/0596006489/gnu3-chp-3.html#gnu3-chp-3">Chapter 3</A>) on all files listed in the tag table. As with the regular <SPAN class=docEmphBold>query-replace-regexp</SPAN> command, if you precede <SPAN class=docEmphBold>tags-query-replace</SPAN> with a prefix argument (i.e., <SPAN class=docEmphBold>C-u M-x tags-query-replace Enter</SPAN>), Emacs replaces only matches that are whole words. This feature is useful, for example, if you want to replace occurrences of <SPAN class=docEmphBold>printf</SPAN> without disturbing occurrences of <SPAN class=docEmphBold>fprintf</SPAN>. If you exit a <SPAN class=docEmphBold>tags-query-replace</SPAN> with <SPAN class=docEmphBold>Esc</SPAN> or <SPAN class=docEmphBold>C-g</SPAN>, you can resume it later by typing <SPAN class=docEmphBold>M-</SPAN>,.</P>
<P class=docText>The command <SPAN class=docEmphBold>M-x tags-apropos</SPAN> rounds out the search facilities of <SPAN class=docEmphBold>etags</SPAN>. If you give it a regular expression argument, it opens a <TT>*Tags List*</TT> buffer that contains a list of all tags in the tag table (including names of files as well as functions) that match the regular expression. For example, if you want to find out the names of output routines in a multiple-file C program, you could invoke <SPAN class=docEmphBold>tags-apropos</SPAN> with the argument <SPAN class=docEmphBold>print</SPAN> or <SPAN class=docEmphBold>write</SPAN>.</P>
<P class=docText>Finally, you can type <SPAN class=docEmphBold>M-x list-tags Enter</SPAN> to list all the tags in the table&#8212;that is, all the functions&#8212;for a given C file. Supply the filename at the prompt, and you get a <TT>*Tags List*</TT> buffer showing the names of functions defined in that file along with their return types (if any). Note that if you move your cursor to this list, you can use <SPAN class=docEmphBold>M-</SPAN>. to look at the actual code for the function. <SPAN class=docEmphBold>M-</SPAN>. picks up the word the cursor is on as the default function name, so you can just move the cursor to the name of the function you want to see and press <SPAN class=docEmphBold>M-</SPAN>. followed by <SPAN class=docEmphBold>Enter</SPAN> to see it.