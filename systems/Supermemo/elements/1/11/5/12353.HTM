<SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt">Installing and Testing (Step 3)</SPAN> 
<P></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt">For the next step we will add install rules and testing support to our project. <FONT class=extract>The install rules are fairly straight forward. For the MathFunctions library we setup the library and the header file to be installed by adding the following two lines to MathFunctions&#8217; CMakeLists file:</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>install (TARGETS MathFunctions DESTINATION bin)</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>install (FILES MathFunctions.h DESTINATION include)</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>For the application the following lines are added to the top level CMakeLists file to install the executable and the configured header file:</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract># add the install targets</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>install (TARGETS Tutorial DESTINATION bin)</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>install (FILES "${PROJECT_BINARY_DIR}/TutorialConfig.h"<SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN></FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>DESTINATION include)</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>That is all there is to it. At this point you should be able to build the tutorial, then type make install (or build the INSTALL target from an IDE) and it will install the appropriate header files, libraries, and executables. The CMake variable CMAKE_INSTALL_PREFIX is used to determine the root of where the files will be installed. </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>Adding testing is also a fairly straight forward process. At the end of the top level CMakeLists file we can add a number of basic tests to verify that the application is working correctly.</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract># does the application run</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>add_test (TutorialRuns Tutorial 25)</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><SPAN style="mso-spacerun: yes"><FONT class=extract>&nbsp;</FONT></SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract># does it sqrt of 25</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>add_test (TutorialComp25 Tutorial 25)</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><SPAN style="mso-spacerun: yes"><FONT class=extract>&nbsp;</FONT></SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>set_tests_properties (TutorialComp25 </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>PROPERTIES PASS_REGULAR_EXPRESSION "25 is 5")</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><SPAN style="mso-spacerun: yes"><FONT class=extract>&nbsp;</FONT></SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract># does it handle negative numbers</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>add_test (TutorialNegative Tutorial -25)</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>set_tests_properties (TutorialNegative</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>PROPERTIES PASS_REGULAR_EXPRESSION "-25 is 0")</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><SPAN style="mso-spacerun: yes"><FONT class=extract>&nbsp;</FONT></SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract># does it handle small numbers</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>add_test (TutorialSmall Tutorial 0.0001)</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>set_tests_properties (TutorialSmall</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>PROPERTIES PASS_REGULAR_EXPRESSION "0.0001 is 0.01")</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><SPAN style="mso-spacerun: yes"><FONT class=extract>&nbsp;</FONT></SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract># does the usage message work?</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>add_test (TutorialUsage Tutorial)</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>set_tests_properties (TutorialUsage</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>PROPERTIES </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>PASS_REGULAR_EXPRESSION "Usage:.*number")</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>The first test simply verifies that the application runs, does not segfault or otherwise crash, and has a zero return value. This is the basic form of a CTest test. The next few tests all make use of the PASS_REGULAR_EXPRESSION test property to verify that the output of the test contains certain strings. In this case verifying that the computed square root is what it should be and that the usage message is printed when an incorrect number of arguments are provided. If you wanted to add a lot of tests to test different input values you might consider creating a macro like the following:</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>#define a macro to simplify adding tests, then use it</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>macro (do_test arg result)</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>add_test (TutorialComp${arg} Tutorial ${arg})</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>set_tests_properties (TutorialComp${arg}</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>PROPERTIES PASS_REGULAR_EXPRESSION ${result})</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>endmacro (do_test)</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><SPAN style="mso-spacerun: yes"><FONT class=extract>&nbsp;</FONT></SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract># do a bunch of result based tests</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>do_test (25 "25 is 5")</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>do_test (-25 "-25 is 0")</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>For each invocation of do_test, another test is added to the project with a name, input, and results based on the passed arguments.</FONT></SPAN>