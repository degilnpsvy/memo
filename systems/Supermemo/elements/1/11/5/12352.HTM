<A name=s2></A><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt">Adding a Library (Step 2)</SPAN> 
<P></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>Now we will add a library to our project. This library will contain our own implementation for computing the square root of a number. The executable can then use this library instead of the standard square root function provided by the compiler. For this tutorial we will put the library into a subdirectory called MathFunctions. It will have the following one line CMakeLists file:</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>add_library(MathFunctions mysqrt.cxx)</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>The source file mysqrt.cxx has one function called mysqrt that provides similar functionality to the compiler&#8217;s sqrt function. To make use of the new library we add an add_subdirectory call in the top level CMakeLists file so that the library will get built. We also add another include directory so that the MathFunctions/mysqrt.h header file can be found for the function prototype. The last change is to add the new library to the executable. The last few lines of the top level CMakeLists file now look like:</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>include_directories ("${PROJECT_SOURCE_DIR}/MathFunctions")</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>add_subdirectory (MathFunctions) </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><SPAN style="mso-spacerun: yes"><FONT class=extract>&nbsp;</FONT></SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract># add the executable</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>add_executable (Tutorial tutorial.cxx)</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>target_link_libraries (Tutorial MathFunctions)</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>Now let us consider making the MathFunctions library optional. In this tutorial there really isn&#8217;t any reason to do so, but with larger libraries or libraries that rely on third party code you might want to. The first step is to add an option to the top level CMakeLists file.</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract># should we use our own math functions?</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>option (USE_MYMATH </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>"Use tutorial provided math implementation" ON) </FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>This will show up in the CMake GUI with a default value of ON that the user can change as desired. This setting will be stored in the cache so that the user does not need to keep setting it each time they run CMake on this project. The next change is to make the build and linking of the MathFunctions library conditional. To do this we change the end of the top level CMakeLists file to look like the following:</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract># add the MathFunctions library?</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>#</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>if (USE_MYMATH)</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>include_directories ("${PROJECT_SOURCE_DIR}/MathFunctions")</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>add_subdirectory (MathFunctions)</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>set (EXTRA_LIBS ${EXTRA_LIBS} MathFunctions)</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>endif (USE_MYMATH)</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><SPAN style="mso-spacerun: yes"><FONT class=extract>&nbsp;</FONT></SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract># add the executable</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>add_executable (Tutorial tutorial.cxx)</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>target_link_libraries (Tutorial<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>${EXTRA_LIBS})</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>This uses the setting of USE_MYMATH to determine if the MathFunctions should be compiled and used. Note the use of a variable (EXTRA_LIBS in this case) to collect up any optional libraries to later be linked into the executable. This is a common approach used to keep larger projects with many optional components clean. The corresponding changes to the source code are fairly straight forward and leave us with:</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>// A simple program that computes the square root of a number</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>#include &lt;stdio.h&gt;</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>#include &lt;stdlib.h&gt;</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>#include &lt;math.h&gt;</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>#include "TutorialConfig.h"</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>#ifdef USE_MYMATH</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>#include "MathFunctions.h"</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>#endif</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><SPAN style="mso-spacerun: yes"><FONT class=extract>&nbsp;</FONT></SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>int main (int argc, char *argv[])</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>{</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>if (argc &lt; 2)</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>{</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>fprintf(stdout,"%s Version %d.%d\n", argv[0],</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>Tutorial_VERSION_MAJOR,</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>Tutorial_VERSION_MINOR);</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>fprintf(stdout,"Usage: %s number\n",argv[0]);</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>return 1;</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>}</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><SPAN style="mso-spacerun: yes"><FONT class=extract>&nbsp;</FONT></SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>double inputValue = atof(argv[1]);</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><SPAN style="mso-spacerun: yes"><FONT class=extract>&nbsp;</FONT></SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>#ifdef USE_MYMATH</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>double outputValue = mysqrt(inputValue);</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>#else</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>double outputValue = sqrt(inputValue);</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>#endif</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><SPAN style="mso-spacerun: yes"><FONT class=extract>&nbsp;</FONT></SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>fprintf(stdout,"The square root of %g is %g\n",</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>inputValue, outputValue);</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>return 0;</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>}</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>In the source code we make use of USE_MYMATH as well. This is provided from CMake to the source code through the TutorialConfig.h.in configured file by adding the following line to it:</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract>#cmakedefine USE_MYMATH</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><BR style="mso-special-character: line-break"><BR style="mso-special-character: line-break"><A name=s3></A></SPAN>