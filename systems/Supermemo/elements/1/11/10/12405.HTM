<P style="MARGIN: 0cm 0cm 18pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt"><FONT face=&#23435;&#20307;>Let&#8217;s go a little bit further and make the optional USB support a library in a subdirectory. The new CMakeLists.txt file would look like this:</FONT></SPAN></P><PRE style="mso-line-height-alt: 12.0pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt"><FONT face=&#23435;&#20307;>PROJECT(myproject)</FONT></SPAN></PRE><PRE style="mso-line-height-alt: 12.0pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt"><FONT face=&#23435;&#20307;>OPTION(WITH_USB "Include our USB component" OFF)</FONT></SPAN></PRE><PRE style="mso-line-height-alt: 12.0pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt"><FONT face=&#23435;&#20307;>SET(SRCS file1.c file2.c file3.c)</FONT></SPAN></PRE><PRE style="mso-line-height-alt: 12.0pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt"><FONT face=&#23435;&#20307;>ADD_EXECUTABLE(myproject ${SRCS})</FONT></SPAN></PRE><PRE style="mso-line-height-alt: 12.0pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt"><FONT face=&#23435;&#20307;>IF(WITH_USB)</FONT></SPAN></PRE><PRE style="mso-line-height-alt: 12.0pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt"><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>ADD_DIRECTORY(usblib)</FONT></SPAN></PRE><PRE style="mso-line-height-alt: 12.0pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt"><FONT face=&#23435;&#20307;><SPAN style="mso-spacerun: yes">&nbsp; </SPAN>TARGET_LINK_LIBRARIES(myproject usblib)</FONT></SPAN></PRE><PRE style="mso-line-height-alt: 12.0pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt"><FONT face=&#23435;&#20307;>ENDIF(WITH_USB)</FONT></SPAN></PRE>
<P style="MARGIN: 0cm 0cm 18pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt"><FONT face=&#23435;&#20307;>Given this file, the USB source files would be placed in a subdirectory called usblib along with a new CMakeLists.txt file:</FONT></SPAN></P><PRE style="mso-line-height-alt: 12.0pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt"><FONT face=&#23435;&#20307;>PROJECT(usblib)</FONT></SPAN></PRE><PRE style="mso-line-height-alt: 12.0pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt"><FONT face=&#23435;&#20307;>SET(SRCS usbfile1.c usbfile2.c)</FONT></SPAN></PRE><PRE style="mso-line-height-alt: 12.0pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt"><FONT face=&#23435;&#20307;>ADD_LIBRARY(usblib ${SRCS})</FONT></SPAN></PRE>
<P style="MARGIN: 0cm 0cm 18pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt"><FONT face=&#23435;&#20307;>Now, if USB support is enabled, CMake builds the USB library and link sit into the executable.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 18pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt"><FONT face=&#23435;&#20307;>But how does the code code know to use the optional USB code? First, the USB-specific code should be surrounded with a #ifdef WITH_USB. Next, CMake processes a special configuration file, substituting placeholders with CMake variables.</FONT></SPAN></P>
<P style="MARGIN: 0cm 0cm 18pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt"><FONT face=&#23435;&#20307;>Let&#8217;s make a new file called config.h.cmake that contains this:</FONT></SPAN></P><PRE style="mso-line-height-alt: 12.0pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt"><FONT face=&#23435;&#20307;>#ifndef TEST_CONFIG_H</FONT></SPAN></PRE><PRE style="mso-line-height-alt: 12.0pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt"><FONT face=&#23435;&#20307;>#define TEST_CONFIG_H</FONT></SPAN></PRE><PRE style="mso-line-height-alt: 12.0pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt"><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></PRE><PRE style="mso-line-height-alt: 12.0pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt"><FONT face=&#23435;&#20307;>#<FONT class=clozed>cmakedefine</FONT> WITH_USB</FONT></SPAN></PRE><PRE style="mso-line-height-alt: 12.0pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt"><FONT face=&#23435;&#20307;>&nbsp;</FONT></SPAN></PRE><PRE style="mso-line-height-alt: 12.0pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt"><FONT face=&#23435;&#20307;>#endif</FONT></SPAN></PRE>
<P style="MARGIN: 0cm 0cm 18pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt"><FONT face=&#23435;&#20307;>Then, in the CMakeLists.txt file, modify the first part to look like this:</FONT></SPAN></P><PRE style="mso-line-height-alt: 12.0pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt"><FONT face=&#23435;&#20307;>PROJECT(myproject)</FONT></SPAN></PRE><PRE style="mso-line-height-alt: 12.0pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt"><FONT face=&#23435;&#20307;>OPTION(WITH_USB "Include our USB component" OFF)</FONT></SPAN></PRE><PRE style="mso-line-height-alt: 12.0pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt"><FONT face=&#23435;&#20307;><SPAN class=cloze>[...]</SPAN></FONT></SPAN></PRE><PRE style="mso-line-height-alt: 12.0pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt"><FONT face=&#23435;&#20307;><SPAN class=cloze></SPAN></FONT></SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt"><FONT face=&#23435;&#20307;>INCLUDE_DIRECTORIES(${CMAKE_SOURCE_DIR} ${CMAKE_BINARY_DIR})</FONT></SPAN></PRE>
<P style="MARGIN: 0cm 0cm 18pt"><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt"><FONT face=&#23435;&#20307;>Given this, CMake translates config.h.cmake to create config.h in the build directory. The INCLUDE_DIRECTORIES command tells the compiler to add both the source directory and the build directory to the include path. If WITH_USB is enabled, CMake replaces #cmakedefine WITH_USB with #define WITH_USB. Otherwise, it replaces #cmakedefine WITH_USB with /*#undef WITH_USB*/. As long as you #include config.h and surround the USB code with #ifdef WITH_USB, everything just works. The only downside at the moment is that config.h.cmake must be created manually. </FONT></SPAN>