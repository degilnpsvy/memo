<B><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt">A CMake Example</SPAN></B> 
<P></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt">The following example&nbsp;</SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt">demonstrates some key ideas of CMake. Make sure that you have CMake installed prior to running this example (go&nbsp;<A href="http://www.cmake.org/cmake/help/install.html">here</A>&nbsp;for instructions).</SPAN></P>
<P></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt">There are three directories involved. The top level directory has two subdirectories called ./Demo and ./Hello. In the directory ./Hello, a library is built. In the directory ./Demo, an executable is built by linking to the library. A total of three CMakeList.txt files are created: one for each directory.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt">The first, top-level directory contains the following CMakeLists.txt file.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract># The name of our project is "HELLO". CMakeLists files in this project can&nbsp;<BR># refer to the root source directory of the project as ${HELLO_SOURCE_DIR} and&nbsp;<BR># to the root binary directory of the project as ${HELLO_BINARY_DIR}.&nbsp;<BR>cmake_minimum_required (VERSION 2.6)&nbsp;<BR>project (HELLO)&nbsp;<BR></FONT><BR><FONT class=extract># Recurse into the "Hello" and "Demo" subdirectories. This does not actually&nbsp;<BR># cause another cmake executable to run. The same process will walk through&nbsp;<BR># the project's entire directory structure.&nbsp;<BR>add_subdirectory (Hello)&nbsp;<BR>add_subdirectory (Demo)</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><BR>Then for each subdirectory specified, CMakeLists.txt files are created. In the ./Hello directory, the following CMakeLists.txt file is created:&nbsp;<BR style="mso-special-character: line-break"><BR style="mso-special-character: line-break"></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract># Create a library called "Hello" which includes the source file "hello.cxx".&nbsp;<BR># The extension is already found. Any number of sources could be listed here.&nbsp;<BR>add_library (Hello hello.cxx)</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><BR>Finally, in the ./Demo directory, the third and final CMakeLists.txt file is created:&nbsp;<BR style="mso-special-character: line-break"><BR style="mso-special-character: line-break"></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><FONT class=extract># Make sure the compiler can find include files from our Hello library.&nbsp;<BR>include_directories (${HELLO_SOURCE_DIR}/Hello)&nbsp;<BR></FONT><BR><FONT class=extract># Make sure the linker can find the Hello library once it is built.&nbsp;<BR>link_directories (${HELLO_BINARY_DIR}/Hello)&nbsp;<BR></FONT><BR><FONT class=extract># Add executable called "helloDemo" that is built from the source files&nbsp;<BR># "demo.cxx" and "demo_b.cxx". The extensions are automatically found.&nbsp;<BR>add_executable (helloDemo demo.cxx demo_b.cxx)&nbsp;<BR></FONT><BR><FONT class=extract># Link the executable to the Hello library.&nbsp;<BR>target_link_libraries (helloDemo Hello)&nbsp;</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 12.0pt"><BR>CMake when executed in the top-level directory will process the CMakeLists.txt file and then descend into the listed subdirectories. Variables, include paths, library paths, etc. are inherited. Depending on the system, makefiles (Unix) or workspaces/projects (MSVC) will be built. These can then be used in the usual way to build the code.</SPAN>