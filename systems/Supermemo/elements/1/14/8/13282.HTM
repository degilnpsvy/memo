<A name=Command-Substitution></A>
<H4 class=subsection>3.5.4 Command Substitution</H4><A name=index-command-substitution></A>
<P><FONT class=extract>Command substitution allows the output of a command to replace the command itself. Command substitution occurs when a command is enclosed as follows: </FONT></P>
<DIV class=example><PRE class=example><FONT class=extract>$(<VAR>command</VAR>)
</FONT></PRE></DIV>
<P><FONT class=extract>or </FONT></P>
<DIV class=example><PRE class=example><FONT class=extract>`<VAR>command</VAR>`
</FONT></PRE></DIV>
<P><FONT class=extract>Bash performs the expansion by executing <VAR>command</VAR> and replacing the command substitution with the standard output of the command, with any trailing newlines deleted. Embedded newlines are not deleted, but they may be removed during word splitting.</FONT> <FONT class=extract>The command substitution <CODE>$(cat <VAR>file</VAR>)</CODE> can be replaced by the equivalent but faster <CODE>$(&lt; <VAR>file</VAR>)</CODE>.</FONT> </P>
<P><FONT class=extract>When the old-style backquote form of substitution is used, backslash retains its literal meaning except when followed by &#8216;<SAMP>$</SAMP>&#8217;, &#8216;<SAMP>`</SAMP>&#8217;, or &#8216;<SAMP>\</SAMP>&#8217;. The first backquote not preceded by a backslash terminates the command substitution. When using the <CODE>$(<VAR>command</VAR>)</CODE> form, all characters between the parentheses make up the command; none are treated specially.</FONT> </P>
<P><FONT class=extract>Command substitutions may be nested. To nest when using the backquoted form, escape the inner backquotes with backslashes.</FONT> </P>
<P><FONT class=extract>If the substitution appears within double quotes, word splitting and filename expansion are not performed on the results.</FONT>