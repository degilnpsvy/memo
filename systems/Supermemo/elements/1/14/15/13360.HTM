<A name=Programmable-Completion></A>
<H3 class=section>8.6 Programmable Completion</H3><A name=index-programmable-completion></A>
<P>When word completion is attempted for an argument to a command for which a completion specification (a <VAR>compspec</VAR>) has been defined using the <CODE>complete</CODE> builtin (see <A href="http://www.gnu.org/software/bash/manual/html_node/Programmable-Completion-Builtins.html#Programmable-Completion-Builtins">Programmable Completion Builtins</A>), the programmable completion facilities are invoked. </P>
<P>First, the command name is identified. If a compspec has been defined for that command, the compspec is used to generate the list of possible completions for the word. If the command word is the empty string (completion attempted at the beginning of an empty line), any compspec defined with the <SAMP>-E</SAMP> option to <CODE>complete</CODE> is used. If the command word is a full pathname, a compspec for the full pathname is searched for first. If no compspec is found for the full pathname, an attempt is made to find a compspec for the portion following the final slash. If those searches do not result in a compspec, any compspec defined with the <SAMP>-D</SAMP> option to <CODE>complete</CODE> is used as the default. </P>
<P>Once a compspec has been found, it is used to generate the list of matching words. If a compspec is not found, the default Bash completion described above (see <A href="http://www.gnu.org/software/bash/manual/html_node/Commands-For-Completion.html#Commands-For-Completion">Commands For Completion</A>) is performed. </P>
<P>First, the actions specified by the compspec are used. Only matches which are prefixed by the word being completed are returned. When the <SAMP>-f</SAMP> or <SAMP>-d</SAMP> option is used for filename or directory name completion, the shell variable <CODE>FIGNORE</CODE> is used to filter the matches. See <A href="http://www.gnu.org/software/bash/manual/html_node/Bash-Variables.html#Bash-Variables">Bash Variables</A>, for a description of <CODE>FIGNORE</CODE>. </P>
<P>Any completions specified by a filename expansion pattern to the <SAMP>-G</SAMP> option are generated next. The words generated by the pattern need not match the word being completed. The <CODE>GLOBIGNORE</CODE> shell variable is not used to filter the matches, but the <CODE>FIGNORE</CODE> shell variable is used. </P>
<P>Next, the string specified as the argument to the <SAMP>-W</SAMP> option is considered. The string is first split using the characters in the <CODE>IFS</CODE> special variable as delimiters. Shell quoting is honored. Each word is then expanded using brace expansion, tilde expansion, parameter and variable expansion, command substitution, and arithmetic expansion, as described above (see <A href="http://www.gnu.org/software/bash/manual/html_node/Shell-Expansions.html#Shell-Expansions">Shell Expansions</A>). The results are split using the rules described above (see <A href="http://www.gnu.org/software/bash/manual/html_node/Word-Splitting.html#Word-Splitting">Word Splitting</A>). The results of the expansion are prefix-matched against the word being completed, and the matching words become the possible completions. </P>
<P>After these matches have been generated, any shell function or command specified with the <SAMP>-F</SAMP> and <SAMP>-C</SAMP> options is invoked. When the command or function is invoked, the <CODE>COMP_LINE</CODE>, <CODE>COMP_POINT</CODE>, <CODE>COMP_KEY</CODE>, and <CODE>COMP_TYPE</CODE> variables are assigned values as described above (see <A href="http://www.gnu.org/software/bash/manual/html_node/Bash-Variables.html#Bash-Variables">Bash Variables</A>). If a shell function is being invoked, the <CODE>COMP_WORDS</CODE> and <CODE>COMP_CWORD</CODE> variables are also set. When the function or command is invoked, the first argument is the name of the command whose arguments are being completed, the second argument is the word being completed, and the third argument is the word preceding the word being completed on the current command line. No filtering of the generated completions against the word being completed is performed; the function or command has complete freedom in generating the matches. </P>
<P>Any function specified with <SAMP>-F</SAMP> is invoked first. The function may use any of the shell facilities, including the <CODE>compgen</CODE> and <CODE>compopt</CODE> builtins described below (see <A href="http://www.gnu.org/software/bash/manual/html_node/Programmable-Completion-Builtins.html#Programmable-Completion-Builtins">Programmable Completion Builtins</A>), to generate the matches. It must put the possible completions in the <CODE>COMPREPLY</CODE> array variable. </P>
<P>Next, any command specified with the <SAMP>-C</SAMP> option is invoked in an environment equivalent to command substitution. It should print a list of completions, one per line, to the standard output. Backslash may be used to escape a newline, if necessary. </P>
<P>After all of the possible completions are generated, any filter specified with the <SAMP>-X</SAMP> option is applied to the list. The filter is a pattern as used for pathname expansion; a &#8216;<SAMP>&amp;</SAMP>&#8217; in the pattern is replaced with the text of the word being completed. A literal &#8216;<SAMP>&amp;</SAMP>&#8217; may be escaped with a backslash; the backslash is removed before attempting a match. Any completion that matches the pattern will be removed from the list. A leading &#8216;<SAMP>!</SAMP>&#8217; negates the pattern; in this case any completion not matching the pattern will be removed. </P>
<P>Finally, any prefix and suffix specified with the <SAMP>-P</SAMP> and <SAMP>-S</SAMP> options are added to each member of the completion list, and the result is returned to the Readline completion code as the list of possible completions. </P>
<P>If the previously-applied actions do not generate any matches, and the <SAMP>-o dirnames</SAMP> option was supplied to <CODE>complete</CODE> when the compspec was defined, directory name completion is attempted. </P>
<P>If the <SAMP>-o plusdirs</SAMP> option was supplied to <CODE>complete</CODE> when the compspec was defined, directory name completion is attempted and any matches are added to the results of the other actions. </P>
<P>By default, if a compspec is found, whatever it generates is returned to the completion code as the full set of possible completions. The default Bash completions are not attempted, and the Readline default of filename completion is disabled. If the <SAMP>-o bashdefault</SAMP> option was supplied to <CODE>complete</CODE> when the compspec was defined, the default Bash completions are attempted if the compspec generates no matches. If the <SAMP>-o default</SAMP> option was supplied to <CODE>complete</CODE> when the compspec was defined, Readline&#8217;s default completion will be performed if the compspec (and, if attempted, the default Bash completions) generate no matches. </P>
<P>When a compspec indicates that directory name completion is desired, the programmable completion functions force Readline to append a slash to completed names which are symbolic links to directories, subject to the value of the <VAR>mark-directories</VAR> Readline variable, regardless of the setting of the <VAR>mark-symlinked-directories</VAR> Readline variable. </P>
<P>There is some support for dynamically modifying completions. This is most useful when used in combination with a default completion specified with <SAMP>-D</SAMP>. It&#8217;s possible for shell functions executed as completion handlers to indicate that completion should be retried by returning an exit status of 124. If a shell function returns 124, and changes the compspec associated with the command on which completion is being attempted (supplied as the first argument when the function is executed), programmable completion restarts from the beginning, with an attempt to find a new compspec for that command. This allows a set of completions to be built dynamically as completion is attempted, rather than being loaded all at once. </P>
<P>For instance, assuming that there is a library of compspecs, each kept in a file corresponding to the name of the command, the following default completion function would load completions dynamically: </P>
<DIV class=example><PRE class=example>_completion_loader()
{
	. "/etc/bash_completion.d/$1.sh" &gt;/dev/null 2&gt;&amp;1 &amp;&amp; return 124
}
complete -D -F _completion_loader
</PRE></DIV>
<HR>

<DIV class=header>
<P>Next: <A accessKey=n href="http://www.gnu.org/software/bash/manual/html_node/Programmable-Completion-Builtins.html#Programmable-Completion-Builtins" rel=next>Programmable Completion Builtins</A>, Previous: <A accessKey=p href="http://www.gnu.org/software/bash/manual/html_node/Readline-vi-Mode.html#Readline-vi-Mode" rel=previous>Readline vi Mode</A>, Up: <A accessKey=u href="http://www.gnu.org/software/bash/manual/html_node/Command-Line-Editing.html#Command-Line-Editing" rel=up>Command Line Editing</A> &nbsp; [<A title="Table of contents" href="http://www.gnu.org/software/bash/manual/html_node/index.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="http://www.gnu.org/software/bash/manual/html_node/Indexes.html#Indexes" rel=index>Index</A>]</P></DIV>