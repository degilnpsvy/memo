<A name=GNU-Parallel></A>
<H4 class=subsection>3.2.6 GNU Parallel</H4>
<P>GNU Parallel, as its name suggests, can be used to build and run commands in parallel. You may run the same command with different arguments, whether they are filenames, usernames, hostnames, or lines read from files. </P>
<P>For a complete description, refer to the GNU Parallel documentation. A few examples should provide a brief introduction to its use. </P>
<P><FONT class=extract>For example, it is easy to prefix each line in a text file with a specified string: </FONT></P>
<DIV class=example><PRE class=example><FONT class=extract>cat file | parallel -k echo prefix_string
</FONT></PRE></DIV>
<P><FONT class=extract>The <SAMP>-k</SAMP> option is required to preserve the lines&#8217; order. </FONT></P>
<P><FONT class=extract>Similarly, you can append a specified string to each line in a text file: </FONT></P>
<DIV class=example><PRE class=example><FONT class=extract>cat file | parallel -k echo {} append_string</FONT>
</PRE></DIV>
<P><FONT class=extract>You can use Parallel to move files from the current directory when the number of files is too large to process with one <CODE>mv</CODE> invocation: </FONT></P>
<DIV class=example><PRE class=example><FONT class=extract>ls | parallel mv {} destdir</FONT>
</PRE></DIV>
<P><FONT class=extract>As you can see, the {} is replaced with each line read from standard input. This will run as many <CODE>mv</CODE> commands as there are files in the current directory. You can emulate a parallel <CODE>xargs</CODE> by adding the <SAMP>-X</SAMP> option: </FONT></P>
<DIV class=example><PRE class=example><FONT class=extract>ls | parallel -X mv {} destdir</FONT>
</PRE></DIV>
<P><FONT class=extract>GNU Parallel can replace certain common idioms that operate on lines read from a file (in this case, filenames): </FONT></P>
<DIV class=example><PRE class=example><FONT class=extract>	for x in $(cat list); do
		do-something1 $x config-$x
		do-something2 &lt; $x
	done | process-output
</FONT></PRE></DIV>
<P><FONT class=extract>with a more compact syntax reminiscent of lambdas: </FONT></P>
<DIV class=example><PRE class=example><FONT class=extract>cat list | parallel "do-something1 {} config-{} ; do-something2 &lt; {}" | process-output</FONT>
</PRE></DIV>
<P><FONT class=extract>Parallel provides a built-in mechanism to remove filename extensions, which lends itself to batch file transformations or renaming: </FONT></P>
<DIV class=example><PRE class=example><FONT class=extract>ls *.gz | parallel -j+0 "zcat {} | bzip2 &gt;{.}.bz2 &amp;&amp; rm {}"
</FONT></PRE></DIV>
<P><FONT class=extract>This will recompress all files in the current directory with names ending in .gz using bzip2, running one job per CPU (-j+0) in parallel.</FONT> </P>
<P><FONT class=extract>If a command generates output, you may want to preserve the input order in the output. For instance, the following command </FONT></P>
<DIV class=example><PRE class=example><FONT class=extract>{ echo foss.org.my ; echo debian.org; echo freenetproject.org; } | parallel traceroute
</FONT></PRE></DIV>
<P><FONT class=extract>will display as output the traceroute invocation that finishes first. Using the <SAMP>-k</SAMP> option, as we saw above </FONT></P>
<DIV class=example><PRE class=example><FONT class=extract>{ echo foss.org.my ; echo debian.org; echo freenetproject.org; } | parallel -k traceroute
</FONT></PRE></DIV>
<P><FONT class=extract>will ensure that the output of <CODE>traceroute foss.org.my</CODE> is displayed first.</FONT> </P>
<HR>

<DIV class=header>
<P>Previous: <A accessKey=p href="http://www.gnu.org/software/bash/manual/html_node/Coprocesses.html#Coprocesses" rel=previous>Coprocesses</A>, Up: <A accessKey=u href="http://www.gnu.org/software/bash/manual/html_node/Shell-Commands.html#Shell-Commands" rel=up>Shell Commands</A> &nbsp; [<A title="Table of contents" href="http://www.gnu.org/software/bash/manual/html_node/index.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="http://www.gnu.org/software/bash/manual/html_node/Indexes.html#Indexes" rel=index>Index</A>]</P></DIV>