<A name=Shell-Functions></A>
<H3 class=section>3.3 Shell Functions</H3><A name=index-shell-function></A><A name=index-functions_002c-shell></A>
<P>Shell functions are a way to group commands for later execution using a single name for the group. They are executed just like a "regular" command. When the name of a shell function is used as a simple command name, the list of commands associated with that function name is executed. Shell functions are executed in the current shell context; no new process is created to interpret them. </P>
<P><FONT class=extract>Functions are declared using this syntax: </FONT><A name=index-function></A></P>
<DIV class=example><PRE class=example><FONT class=extract><VAR>name</VAR> () <VAR>compound-command</VAR> [ <VAR>redirections</VAR> ]
or

<CODE>function</CODE> <VAR>name</VAR> [()] <VAR>compound-command</VAR> [ <VAR>redirections</VAR> ]
</FONT></PRE></DIV>
<P><FONT class=extract>This defines a shell function named <VAR>name</VAR>. The reserved word <CODE>function</CODE> is optional. If the <CODE>function</CODE> reserved word is supplied, the parentheses are optional. The <VAR>body</VAR> of the function is the compound command <VAR>compound-command</VAR> (see </FONT><A href="http://www.gnu.org/software/bash/manual/html_node/Compound-Commands.html#Compound-Commands"><FONT class=extract>Compound Commands</FONT></A><FONT class=extract>). That command is usually a <VAR>list</VAR> enclosed between { and }, but may be any compound command listed above. <VAR>compound-command</VAR> is executed whenever <VAR>name</VAR> is specified as the name of a command. Any redirections (see </FONT><A href="http://www.gnu.org/software/bash/manual/html_node/Redirections.html#Redirections"><FONT class=extract>Redirections</FONT></A><FONT class=extract>) associated with the shell function are performed when the function is executed.</FONT> </P>
<P><FONT class=extract>A function definition may be deleted using the <SAMP>-f</SAMP> option to the <CODE>unset</CODE> builtin (see </FONT><A href="http://www.gnu.org/software/bash/manual/html_node/Bourne-Shell-Builtins.html#Bourne-Shell-Builtins"><FONT class=extract>Bourne Shell Builtins</FONT></A><FONT class=extract>).</FONT> </P>
<P><FONT class=extract>The exit status of a function definition is zero unless a syntax error occurs or a readonly function with the same name already exists. When executed, the exit status of a function is the exit status of the last command executed in the body.</FONT> </P>
<P>Note that for historical reasons, in the most common usage the curly braces that surround the body of the function must be separated from the body by <CODE>blank</CODE>s or newlines. This is because the braces are reserved words and are only recognized as such when they are separated from the command list by whitespace or another shell metacharacter. Also, when using the braces, the <VAR>list</VAR> must be terminated by a semicolon, a &#8216;<SAMP>&amp;</SAMP>&#8217;, or a newline. </P>
<P><FONT class=extract>When a function is executed, the arguments to the function become the positional parameters during its execution (see </FONT><A href="http://www.gnu.org/software/bash/manual/html_node/Positional-Parameters.html#Positional-Parameters"><FONT class=extract>Positional Parameters</FONT></A><FONT class=extract>). The special parameter &#8216;<SAMP>#</SAMP>&#8217; that expands to the number of positional parameters is updated to reflect the change. Special parameter <CODE>0</CODE> is unchanged. The first element of the <CODE>FUNCNAME</CODE> variable is set to the name of the function while the function is executing.</FONT> </P>
<P><FONT class=extract>All other aspects of the shell execution environment are identical between a function and its caller with these exceptions: the <CODE>DEBUG</CODE> and <CODE>RETURN</CODE> traps are not inherited unless the function has been given the <CODE>trace</CODE> attribute using the <CODE>declare</CODE> builtin or the <CODE>-o functrace</CODE> option has been enabled with the <CODE>set</CODE> builtin, (in which case all functions inherit the <CODE>DEBUG</CODE> and <CODE>RETURN</CODE> traps), and the <CODE>ERR</CODE> trap is not inherited unless the <CODE>-o errtrace</CODE> shell option has been enabled. See </FONT><A href="http://www.gnu.org/software/bash/manual/html_node/Bourne-Shell-Builtins.html#Bourne-Shell-Builtins"><FONT class=extract>Bourne Shell Builtins</FONT></A><FONT class=extract>, for the description of the <CODE>trap</CODE> builtin.</FONT> </P>
<P><FONT class=extract>The <CODE>FUNCNEST</CODE> variable, if set to a numeric value greater than 0, defines a maximum function nesting level. Function invocations that exceed the limit cause the entire command to abort.</FONT> </P>
<P><FONT class=extract>If the builtin command <CODE>return</CODE> is executed in a function, the function completes and execution resumes with the next command after the function call. Any command associated with the <CODE>RETURN</CODE> trap is executed before execution resumes. When a function completes, the values of the positional parameters and the special parameter &#8216;<SAMP>#</SAMP>&#8217; are restored to the values they had prior to the function&#8217;s execution. If a numeric argument is given to <CODE>return</CODE>, that is the function&#8217;s return status; otherwise the function&#8217;s return status is the exit status of the last command executed before the <CODE>return</CODE>.</FONT> </P>
<P><FONT class=extract>Variables local to the function may be declared with the <CODE>local</CODE> builtin. These variables are visible only to the function and the commands it invokes.</FONT> </P>
<P><FONT class=extract>Function names and definitions may be listed with the <SAMP>-f</SAMP> option to the <CODE>declare</CODE> or <CODE>typeset</CODE> builtin commands (see </FONT><A href="http://www.gnu.org/software/bash/manual/html_node/Bash-Builtins.html#Bash-Builtins"><FONT class=extract>Bash Builtins</FONT></A><FONT class=extract>). The <SAMP>-F</SAMP> option to <CODE>declare</CODE> or <CODE>typeset</CODE> will list the function names only (and optionally the source file and line number, if the <CODE>extdebug</CODE> shell option is enabled). Functions may be exported so that subshells automatically have them defined with the <SAMP>-f</SAMP> option to the <CODE>export</CODE> builtin (see </FONT><A href="http://www.gnu.org/software/bash/manual/html_node/Bourne-Shell-Builtins.html#Bourne-Shell-Builtins"><FONT class=extract>Bourne Shell Builtins</FONT></A><FONT class=extract>). Note that shell functions and variables with the same name may result in multiple identically-named entries in the environment passed to the shell&#8217;s children. Care should be taken in cases where this may cause a problem.</FONT> </P>
<P><FONT class=extract>Functions may be recursive. The <CODE>FUNCNEST</CODE> variable may be used to limit the depth of the function call stack and restrict the number of function invocations. By default, no limit is placed on the number of recursive calls.</FONT> </P>
<HR>

<DIV class=header>
<P>Next: <A accessKey=n href="http://www.gnu.org/software/bash/manual/html_node/Shell-Parameters.html#Shell-Parameters" rel=next>Shell Parameters</A>, Previous: <A accessKey=p href="http://www.gnu.org/software/bash/manual/html_node/Shell-Commands.html#Shell-Commands" rel=previous>Shell Commands</A>, Up: <A accessKey=u href="http://www.gnu.org/software/bash/manual/html_node/Basic-Shell-Features.html#Basic-Shell-Features" rel=up>Basic Shell Features</A> &nbsp; [<A title="Table of contents" href="http://www.gnu.org/software/bash/manual/html_node/index.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="http://www.gnu.org/software/bash/manual/html_node/Indexes.html#Indexes" rel=index>Index</A>]</P></DIV>