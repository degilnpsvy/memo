<A name=Command-Grouping></A>
<H4 class=subsubsection>3.2.4.3 Grouping Commands</H4><A name=index-commands_002c-grouping></A>
<P>Bash provides two ways to group a list of commands to be executed as a unit. <FONT class=extract>When commands are grouped, redirections may be applied to the entire command list. For example, the output of all the commands in the list may be redirected to a single stream. </FONT></P>
<P><FONT class=extract></FONT>&nbsp;</P>
<P><FONT class=extract>() </FONT></P>
<P><FONT class=extract>( list ) </FONT></P>
<P><FONT class=extract>Placing a list of commands between parentheses causes a subshell environment to be created (see Command Execution Environment), and each of the commands in list to be executed in that subshell. Since the list is executed in a subshell, variable assignments do not remain in effect after the subshell completes. </FONT></P>
<P><FONT class=extract>{} </FONT></P>
<P><FONT class=extract>{ list; } </FONT></P>
<P><FONT class=extract>Placing a list of commands between curly braces causes the list to be executed in the current shell context. No subshell is created. The semicolon (or newline) following list is required.</FONT> </P>
<P><FONT class=extract></FONT>&nbsp;</P>
<P><FONT class=extract>In addition to the creation of a subshell, there is a subtle difference between these two constructs due to historical reasons. The braces are <CODE>reserved words</CODE>, so they must be separated from the <VAR>list</VAR> by <CODE>blank</CODE>s or other shell metacharacters. The parentheses are <CODE>operators</CODE>, and are recognized as separate tokens by the shell even if they are not separated from the <VAR>list</VAR> by whitespace.</FONT> </P>
<P><FONT class=extract>The exit status of both of these constructs is the exit status of <VAR>list</VAR>.</FONT>