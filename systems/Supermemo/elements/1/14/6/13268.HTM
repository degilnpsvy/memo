<A name=Looping-Constructs></A>
<H4 class=subsubsection>3.2.4.1 Looping Constructs</H4><A name=index-commands_002c-looping></A>
<P>Bash supports the following looping constructs. </P>
<P><FONT class=extract>Note that wherever a &#8216;<SAMP>;</SAMP>&#8217; appears in the description of a command&#8217;s syntax, it may be replaced with one or more newlines.</FONT> </P>
<DL compact>
<DT><FONT class=extract><CODE>until</CODE> </FONT>
<DD><A name=index-until></A><A name=index-do></A><A name=index-done></A>
<P><FONT class=extract>The syntax of the <CODE>until</CODE> command is: </FONT></P>
<DIV class=example><PRE class=example><FONT class=extract>until <VAR>test-commands</VAR>; do <VAR>consequent-commands</VAR>; done
</FONT></PRE></DIV>
<P><FONT class=extract>Execute <VAR>consequent-commands</VAR> as long as <VAR>test-commands</VAR> has an exit status which is not zero. The return status is the exit status of the last command executed in <VAR>consequent-commands</VAR>, or zero if none was executed.</FONT> </P>
<DT><FONT class=extract><CODE>while</CODE> </FONT>
<DD><A name=index-while></A>
<P><FONT class=extract>The syntax of the <CODE>while</CODE> command is: </FONT></P>
<DIV class=example><PRE class=example><FONT class=extract>while <VAR>test-commands</VAR>; do <VAR>consequent-commands</VAR>; done
</FONT></PRE></DIV>
<P><FONT class=extract>Execute <VAR>consequent-commands</VAR> as long as <VAR>test-commands</VAR> has an exit status of zero. The return status is the exit status of the last command executed in <VAR>consequent-commands</VAR>, or zero if none was executed.</FONT> </P>
<DT><FONT class=extract><CODE>for</CODE> </FONT>
<DD><A name=index-for></A>
<P><FONT class=extract>The syntax of the <CODE>for</CODE> command is: </FONT></P>
<DIV class=example><PRE class=example><FONT class=extract>for <VAR>name</VAR> [ [in [<VAR>words</VAR> &#8230;] ] ; ] do <VAR>commands</VAR>; done
</FONT></PRE></DIV>
<P><FONT class=extract>Expand <VAR>words</VAR>, and execute <VAR>commands</VAR> once for each member in the resultant list, with <VAR>name</VAR> bound to the current member. If &#8216;<SAMP>in <VAR>words</VAR></SAMP>&#8217; is not present, the <CODE>for</CODE> command executes the <VAR>commands</VAR> once for each positional parameter that is set, as if &#8216;<SAMP>in "$@"</SAMP>&#8217; had been specified (see </FONT><A href="http://www.gnu.org/software/bash/manual/html_node/Special-Parameters.html#Special-Parameters"><FONT class=extract>Special Parameters</FONT></A><FONT class=extract>). The return status is the exit status of the last command that executes. If there are no items in the expansion of <VAR>words</VAR>, no commands are executed, and the return status is zero. </FONT></P>
<P><FONT class=extract>An alternate form of the <CODE>for</CODE> command is also supported: </FONT></P>
<DIV class=example><PRE class=example><FONT class=extract>for (( <VAR>expr1</VAR> ; <VAR>expr2</VAR> ; <VAR>expr3</VAR> )) ; do <VAR>commands</VAR> ; done
</FONT></PRE></DIV>
<P><FONT class=extract>First, the arithmetic expression <VAR>expr1</VAR> is evaluated according to the rules described below (see </FONT><A href="http://www.gnu.org/software/bash/manual/html_node/Shell-Arithmetic.html#Shell-Arithmetic"><FONT class=extract>Shell Arithmetic</FONT></A><FONT class=extract>). The arithmetic expression <VAR>expr2</VAR> is then evaluated repeatedly until it evaluates to zero. Each time <VAR>expr2</VAR> evaluates to a non-zero value, <VAR>commands</VAR> are executed and the arithmetic expression <VAR>expr3</VAR> is evaluated. If any expression is omitted, it behaves as if it evaluates to 1. The return value is the exit status of the last command in <VAR>commands</VAR> that is executed, or false if any of the expressions is invalid.</FONT> </P></DD></DL>
<P><FONT class=extract>The <CODE>break</CODE> and <CODE>continue</CODE> builtins (see </FONT><A href="http://www.gnu.org/software/bash/manual/html_node/Bourne-Shell-Builtins.html#Bourne-Shell-Builtins"><FONT class=extract>Bourne Shell Builtins</FONT></A><FONT class=extract>) may be used to control loop execution.</FONT> </P>
<HR>

<DIV class=header>
<P>Next: <A accessKey=n href="http://www.gnu.org/software/bash/manual/html_node/Conditional-Constructs.html#Conditional-Constructs" rel=next>Conditional Constructs</A>, Up: <A accessKey=u href="http://www.gnu.org/software/bash/manual/html_node/Compound-Commands.html#Compound-Commands" rel=up>Compound Commands</A> &nbsp; [<A title="Table of contents" href="http://www.gnu.org/software/bash/manual/html_node/index.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="http://www.gnu.org/software/bash/manual/html_node/Indexes.html#Indexes" rel=index>Index</A>]</P></DIV>