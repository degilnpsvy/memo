<A name=Arrays></A>
<H3 class=section>6.7 Arrays</H3><A name=index-arrays></A>
<P>Bash provides one-dimensional indexed and associative array variables. Any variable may be used as an indexed array; the <CODE>declare</CODE> builtin will explicitly declare an array. There is no maximum limit on the size of an array, nor any requirement that members be indexed or assigned contiguously. Indexed arrays are referenced using integers (including arithmetic expressions (see <A href="http://www.gnu.org/software/bash/manual/html_node/Shell-Arithmetic.html#Shell-Arithmetic">Shell Arithmetic</A>) and are zero-based; associative arrays use arbitrary strings. </P>
<P>An indexed array is created automatically if any variable is assigned to using the syntax </P>
<DIV class=example><PRE class=example>name[<VAR>subscript</VAR>]=<VAR>value</VAR>
</PRE></DIV>
<P>The <VAR>subscript</VAR> is treated as an arithmetic expression that must evaluate to a number. If <VAR>subscript</VAR> evaluates to a number less than zero, it is used as an offset from one greater than the array&#8217;s maximum index (so a subcript of -1 refers to the last element of the array). To explicitly declare an array, use </P>
<DIV class=example><PRE class=example>declare -a <VAR>name</VAR>
</PRE></DIV>
<P>The syntax </P>
<DIV class=example><PRE class=example>declare -a <VAR>name</VAR>[<VAR>subscript</VAR>]
</PRE></DIV>
<P>is also accepted; the <VAR>subscript</VAR> is ignored. </P>
<P>Associative arrays are created using </P>
<DIV class=example><PRE class=example>declare -A <VAR>name</VAR>.
</PRE></DIV>
<P>Attributes may be specified for an array variable using the <CODE>declare</CODE> and <CODE>readonly</CODE> builtins. Each attribute applies to all members of an array. </P>
<P>Arrays are assigned to using compound assignments of the form </P>
<DIV class=example><PRE class=example>name=(value<VAR>1</VAR> &#8230; value<VAR>n</VAR>)
</PRE></DIV>
<P>where each <VAR>value</VAR> is of the form <CODE>[<VAR>subscript</VAR>]=</CODE><VAR>string</VAR>. Indexed array assignments do not require the bracket and subscript. When assigning to indexed arrays, if the optional subscript is supplied, that index is assigned to; otherwise the index of the element assigned is the last index assigned to by the statement plus one. Indexing starts at zero. </P>
<P>When assigning to an associative array, the subscript is required. </P>
<P>This syntax is also accepted by the <CODE>declare</CODE> builtin. Individual array elements may be assigned to using the <CODE>name[</CODE><VAR>subscript</VAR><CODE>]=</CODE><VAR>value</VAR> syntax introduced above. </P>
<P>Any element of an array may be referenced using <CODE>${name[</CODE><VAR>subscript</VAR><CODE>]}</CODE>. The braces are required to avoid conflicts with the shell&#8217;s filename expansion operators. If the <VAR>subscript</VAR> is &#8216;<SAMP>@</SAMP>&#8217; or &#8216;<SAMP>*</SAMP>&#8217;, the word expands to all members of the array <VAR>name</VAR>. These subscripts differ only when the word appears within double quotes. If the word is double-quoted, <CODE>${name[*]}</CODE> expands to a single word with the value of each array member separated by the first character of the <CODE>IFS</CODE> variable, and <CODE>${name[@]}</CODE> expands each element of <VAR>name</VAR> to a separate word. When there are no array members, <CODE>${name[@]}</CODE> expands to nothing. If the double-quoted expansion occurs within a word, the expansion of the first parameter is joined with the beginning part of the original word, and the expansion of the last parameter is joined with the last part of the original word. This is analogous to the expansion of the special parameters &#8216;<SAMP>@</SAMP>&#8217; and &#8216;<SAMP>*</SAMP>&#8217;. <CODE>${#name[</CODE><VAR>subscript</VAR><CODE>]}</CODE> expands to the length of <CODE>${name[</CODE><VAR>subscript</VAR><CODE>]}</CODE>. If <VAR>subscript</VAR> is &#8216;<SAMP>@</SAMP>&#8217; or &#8216;<SAMP>*</SAMP>&#8217;, the expansion is the number of elements in the array. Referencing an array variable without a subscript is equivalent to referencing with a subscript of 0. </P>
<P>An array variable is considered set if a subscript has been assigned a value. The null string is a valid value. </P>
<P>The <CODE>unset</CODE> builtin is used to destroy arrays. <CODE>unset</CODE> <VAR>name</VAR>[<VAR>subscript</VAR>] destroys the array element at index <VAR>subscript</VAR>. Care must be taken to avoid unwanted side effects caused by filename expansion. <CODE>unset</CODE> <VAR>name</VAR>, where <VAR>name</VAR> is an array, removes the entire array. A subscript of &#8216;<SAMP>*</SAMP>&#8217; or &#8216;<SAMP>@</SAMP>&#8217; also removes the entire array. </P>
<P>The <CODE>declare</CODE>, <CODE>local</CODE>, and <CODE>readonly</CODE> builtins each accept a <SAMP>-a</SAMP> option to specify an indexed array and a <SAMP>-A</SAMP> option to specify an associative array. If both options are supplied, <SAMP>-A</SAMP> takes precedence. The <CODE>read</CODE> builtin accepts a <SAMP>-a</SAMP> option to assign a list of words read from the standard input to an array, and can read values from the standard input into individual array elements. The <CODE>set</CODE> and <CODE>declare</CODE> builtins display array values in a way that allows them to be reused as input. </P>
<HR>

<DIV class=header>
<P>Next: <A accessKey=n href="http://www.gnu.org/software/bash/manual/html_node/The-Directory-Stack.html#The-Directory-Stack" rel=next>The Directory Stack</A>, Previous: <A accessKey=p href="http://www.gnu.org/software/bash/manual/html_node/Aliases.html#Aliases" rel=previous>Aliases</A>, Up: <A accessKey=u href="http://www.gnu.org/software/bash/manual/html_node/Bash-Features.html#Bash-Features" rel=up>Bash Features</A> &nbsp; [<A title="Table of contents" href="http://www.gnu.org/software/bash/manual/html_node/index.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="http://www.gnu.org/software/bash/manual/html_node/Indexes.html#Indexes" rel=index>Index</A>]</P></DIV>