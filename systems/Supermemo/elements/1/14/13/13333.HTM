<A name=Bash-POSIX-Mode></A>
<H3 class=section>6.11 Bash POSIX Mode</H3><A name=index-POSIX-Mode></A>
<P>Starting Bash with the <SAMP>--posix</SAMP> command-line option or executing &#8216;<SAMP>set -o posix</SAMP>&#8217; while Bash is running will cause Bash to conform more closely to the <SMALL><FONT size=2>POSIX</FONT></SMALL> standard by changing the behavior to match that specified by <SMALL><FONT size=2>POSIX</FONT></SMALL> in areas where the Bash default differs. </P>
<P>When invoked as <CODE>sh</CODE>, Bash enters <SMALL><FONT size=2>POSIX</FONT></SMALL> mode after reading the startup files. </P>
<P>The following list is what&#8217;s changed when &#8216;<SMALL><FONT size=2>POSIX</FONT></SMALL> mode&#8217; is in effect: </P>
<OL>
<LI>When a command in the hash table no longer exists, Bash will re-search <CODE>$PATH</CODE> to find the new location. This is also available with &#8216;<SAMP>shopt -s checkhash</SAMP>&#8217;. 
<LI>The message printed by the job control code and builtins when a job exits with a non-zero status is &#8216;Done(status)&#8217;. 
<LI>The message printed by the job control code and builtins when a job is stopped is &#8216;Stopped(<VAR>signame</VAR>)&#8217;, where <VAR>signame</VAR> is, for example, <CODE>SIGTSTP</CODE>. 
<LI>The <CODE>bg</CODE> builtin uses the required format to describe each job placed in the background, which does not include an indication of whether the job is the current or previous job. 
<LI>Reserved words appearing in a context where reserved words are recognized do not undergo alias expansion. 
<LI>The <SMALL><FONT size=2>POSIX</FONT></SMALL> <CODE>PS1</CODE> and <CODE>PS2</CODE> expansions of &#8216;<SAMP>!</SAMP>&#8217; to the history number and &#8216;<SAMP>!!</SAMP>&#8217; to &#8216;<SAMP>!</SAMP>&#8217; are enabled, and parameter expansion is performed on the values of <CODE>PS1</CODE> and <CODE>PS2</CODE> regardless of the setting of the <CODE>promptvars</CODE> option. 
<LI>The <SMALL><FONT size=2>POSIX</FONT></SMALL> startup files are executed (<CODE>$ENV</CODE>) rather than the normal Bash files. 
<LI>Tilde expansion is only performed on assignments preceding a command name, rather than on all assignment statements on the line. 
<LI>The default history file is <SAMP>~/.sh_history</SAMP> (this is the default value of <CODE>$HISTFILE</CODE>). 
<LI>The output of &#8216;<SAMP>kill -l</SAMP>&#8217; prints all the signal names on a single line, separated by spaces, without the &#8216;<SAMP>SIG</SAMP>&#8217; prefix. 
<LI>The <CODE>kill</CODE> builtin does not accept signal names with a &#8216;<SAMP>SIG</SAMP>&#8217; prefix. 
<LI>Non-interactive shells exit if <VAR>filename</VAR> in <CODE>.</CODE> <VAR>filename</VAR> is not found. 
<LI>Non-interactive shells exit if a syntax error in an arithmetic expansion results in an invalid expression. 
<LI>Non-interactive shells exit if there is a syntax error in a script read with the <CODE>.</CODE> or <CODE>source</CODE> builtins, or in a string processed by the <CODE>eval</CODE> builtin. 
<LI>Redirection operators do not perform filename expansion on the word in the redirection unless the shell is interactive. 
<LI>Redirection operators do not perform word splitting on the word in the redirection. 
<LI>Function names must be valid shell <CODE>name</CODE>s. That is, they may not contain characters other than letters, digits, and underscores, and may not start with a digit. Declaring a function with an invalid name causes a fatal syntax error in non-interactive shells. 
<LI><SMALL><FONT size=2>POSIX</FONT></SMALL> special builtins are found before shell functions during command lookup. 
<LI>The <CODE>time</CODE> reserved word may be used by itself as a command. When used in this way, it displays timing statistics for the shell and its completed children. The <CODE>TIMEFORMAT</CODE> variable controls the format of the timing information. 
<LI>When parsing and expanding a ${&#8230;} expansion that appears within double quotes, single quotes are no longer special and cannot be used to quote a closing brace or other special character, unless the operator is one of those defined to perform pattern removal. In this case, they do not have to appear as matched pairs. 
<LI>The parser does not recognize <CODE>time</CODE> as a reserved word if the next token begins with a &#8216;<SAMP>-</SAMP>&#8217;. 
<LI>If a <SMALL><FONT size=2>POSIX</FONT></SMALL> special builtin returns an error status, a non-interactive shell exits. The fatal errors are those listed in the <SMALL><FONT size=2>POSIX</FONT></SMALL> standard, and include things like passing incorrect options, redirection errors, variable assignment errors for assignments preceding the command name, and so on. 
<LI>A non-interactive shell exits with an error status if a variable assignment error occurs when no command name follows the assignment statements. A variable assignment error occurs, for example, when trying to assign a value to a readonly variable. 
<LI>A non-interactive shell exists with an error status if a variable assignment error occurs in an assignment statement preceding a special builtin, but not with any other simple command. 
<LI>A non-interactive shell exits with an error status if the iteration variable in a <CODE>for</CODE> statement or the selection variable in a <CODE>select</CODE> statement is a readonly variable. 
<LI>Process substitution is not available. 
<LI>Assignment statements preceding <SMALL><FONT size=2>POSIX</FONT></SMALL> special builtins persist in the shell environment after the builtin completes. 
<LI>Assignment statements preceding shell function calls persist in the shell environment after the function returns, as if a <SMALL><FONT size=2>POSIX</FONT></SMALL> special builtin command had been executed. 
<LI>The <CODE>export</CODE> and <CODE>readonly</CODE> builtin commands display their output in the format required by <SMALL><FONT size=2>POSIX</FONT></SMALL>. 
<LI>The <CODE>trap</CODE> builtin displays signal names without the leading <CODE>SIG</CODE>. 
<LI>The <CODE>trap</CODE> builtin doesn&#8217;t check the first argument for a possible signal specification and revert the signal handling to the original disposition if it is, unless that argument consists solely of digits and is a valid signal number. If users want to reset the handler for a given signal to the original disposition, they should use &#8216;<SAMP>-</SAMP>&#8217; as the first argument. 
<LI>The <CODE>.</CODE> and <CODE>source</CODE> builtins do not search the current directory for the filename argument if it is not found by searching <CODE>PATH</CODE>. 
<LI>Subshells spawned to execute command substitutions inherit the value of the <SAMP>-e</SAMP> option from the parent shell. When not in <SMALL><FONT size=2>POSIX</FONT></SMALL> mode, Bash clears the <SAMP>-e</SAMP> option in such subshells. 
<LI>Alias expansion is always enabled, even in non-interactive shells. 
<LI>When the <CODE>alias</CODE> builtin displays alias definitions, it does not display them with a leading &#8216;<SAMP>alias </SAMP>&#8217; unless the <SAMP>-p</SAMP> option is supplied. 
<LI>When the <CODE>set</CODE> builtin is invoked without options, it does not display shell function names and definitions. 
<LI>When the <CODE>set</CODE> builtin is invoked without options, it displays variable values without quotes, unless they contain shell metacharacters, even if the result contains nonprinting characters. 
<LI>When the <CODE>cd</CODE> builtin is invoked in <VAR>logical</VAR> mode, and the pathname constructed from <CODE>$PWD</CODE> and the directory name supplied as an argument does not refer to an existing directory, <CODE>cd</CODE> will fail instead of falling back to <VAR>physical</VAR> mode. 
<LI>The <CODE>pwd</CODE> builtin verifies that the value it prints is the same as the current directory, even if it is not asked to check the file system with the <SAMP>-P</SAMP> option. 
<LI>When listing the history, the <CODE>fc</CODE> builtin does not include an indication of whether or not a history entry has been modified. 
<LI>The default editor used by <CODE>fc</CODE> is <CODE>ed</CODE>. 
<LI>The <CODE>type</CODE> and <CODE>command</CODE> builtins will not report a non-executable file as having been found, though the shell will attempt to execute such a file if it is the only so-named file found in <CODE>$PATH</CODE>. 
<LI>The <CODE>vi</CODE> editing mode will invoke the <CODE>vi</CODE> editor directly when the &#8216;<SAMP>v</SAMP>&#8217; command is run, instead of checking <CODE>$VISUAL</CODE> and <CODE>$EDITOR</CODE>. 
<LI>When the <CODE>xpg_echo</CODE> option is enabled, Bash does not attempt to interpret any arguments to <CODE>echo</CODE> as options. Each argument is displayed, after escape characters are converted. 
<LI>The <CODE>ulimit</CODE> builtin uses a block size of 512 bytes for the <SAMP>-c</SAMP> and <SAMP>-f</SAMP> options. 
<LI>The arrival of <CODE>SIGCHLD</CODE> when a trap is set on <CODE>SIGCHLD</CODE> does not interrupt the <CODE>wait</CODE> builtin and cause it to return immediately. The trap command is run once for each child that exits. </LI></OL>
<P>There is other <SMALL><FONT size=2>POSIX</FONT></SMALL> behavior that Bash does not implement by default even when in <SMALL><FONT size=2>POSIX</FONT></SMALL> mode. Specifically: </P>
<OL>
<LI>The <CODE>fc</CODE> builtin checks <CODE>$EDITOR</CODE> as a program to edit history entries if <CODE>FCEDIT</CODE> is unset, rather than defaulting directly to <CODE>ed</CODE>. <CODE>fc</CODE> uses <CODE>ed</CODE> if <CODE>EDITOR</CODE> is unset. 
<LI>As noted above, Bash requires the <CODE>xpg_echo</CODE> option to be enabled for the <CODE>echo</CODE> builtin to be fully conformant. </LI></OL>
<P>Bash can be configured to be <SMALL><FONT size=2>POSIX</FONT></SMALL>-conformant by default, by specifying the <SAMP>--enable-strict-posix-default</SAMP> to <CODE>configure</CODE> when building (see <A href="http://www.gnu.org/software/bash/manual/html_node/Optional-Features.html#Optional-Features">Optional Features</A>). </P>
<HR>

<DIV class=header>
<P>Previous: <A accessKey=p href="http://www.gnu.org/software/bash/manual/html_node/The-Restricted-Shell.html#The-Restricted-Shell" rel=previous>The Restricted Shell</A>, Up: <A accessKey=u href="http://www.gnu.org/software/bash/manual/html_node/Bash-Features.html#Bash-Features" rel=up>Bash Features</A> &nbsp; [<A title="Table of contents" href="http://www.gnu.org/software/bash/manual/html_node/index.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="http://www.gnu.org/software/bash/manual/html_node/Indexes.html#Indexes" rel=index>Index</A>]</P></DIV>