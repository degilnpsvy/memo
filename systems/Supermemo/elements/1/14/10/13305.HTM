<A name=Exit-Status></A>
<H4 class=subsection>3.7.5 Exit Status</H4><A name=index-exit-status-1></A>
<P>The exit status of an executed command is the value returned by the <VAR>waitpid</VAR> system call or equivalent function. Exit statuses fall between 0 and 255, though, as explained below, the shell may use values above 125 specially. Exit statuses from shell builtins and compound commands are also limited to this range. Under certain circumstances, the shell will use special values to indicate specific failure modes. </P>
<P>For the shell&#8217;s purposes, a command which exits with a zero exit status has succeeded. A non-zero exit status indicates failure. This seemingly counter-intuitive scheme is used so there is one well-defined way to indicate success and a variety of ways to indicate various failure modes. When a command terminates on a fatal signal whose number is <VAR>N</VAR>, Bash uses the value 128+<VAR>N</VAR> as the exit status. </P>
<P>If a command is not found, the child process created to execute it returns a status of 127. If a command is found but is not executable, the return status is 126. </P>
<P>If a command fails because of an error during expansion or redirection, the exit status is greater than zero. </P>
<P>The exit status is used by the Bash conditional commands (see <A href="http://www.gnu.org/software/bash/manual/html_node/Conditional-Constructs.html#Conditional-Constructs">Conditional Constructs</A>) and some of the list constructs (see <A href="http://www.gnu.org/software/bash/manual/html_node/Lists.html#Lists">Lists</A>). </P>
<P>All of the Bash builtins return an exit status of zero if they succeed and a non-zero status on failure, so they may be used by the conditional and list constructs. All builtins return an exit status of 2 to indicate incorrect usage.