<A name=Bourne-Shell-Builtins></A>
<H3 class=section>4.1 Bourne Shell Builtins</H3>
<P>The following shell builtin commands are inherited from the Bourne Shell. These commands are implemented as specified by the <SMALL><FONT size=2>POSIX</FONT></SMALL> standard. </P>
<DL compact>
<DT><CODE>: <SPAN class=roman><FONT face="Times New Roman">(a colon)</FONT></SPAN></CODE> 
<DD><A name=index-_003a></A>
<DIV class=example><PRE class=example>: [<VAR>arguments</VAR>]
</PRE></DIV>
<P>Do nothing beyond expanding <VAR>arguments</VAR> and performing redirections. The return status is zero. </P>
<DT><CODE>. <SPAN class=roman><FONT face="Times New Roman">(a period)</FONT></SPAN></CODE> 
<DD><A name=index-_002e></A>
<DIV class=example><PRE class=example>. <VAR>filename</VAR> [<VAR>arguments</VAR>]
</PRE></DIV>
<P>Read and execute commands from the <VAR>filename</VAR> argument in the current shell context. If <VAR>filename</VAR> does not contain a slash, the <CODE>PATH</CODE> variable is used to find <VAR>filename</VAR>. When Bash is not in <SMALL><FONT size=2>POSIX</FONT></SMALL> mode, the current directory is searched if <VAR>filename</VAR> is not found in <CODE>$PATH</CODE>. If any <VAR>arguments</VAR> are supplied, they become the positional parameters when <VAR>filename</VAR> is executed. Otherwise the positional parameters are unchanged. The return status is the exit status of the last command executed, or zero if no commands are executed. If <VAR>filename</VAR> is not found, or cannot be read, the return status is non-zero. This builtin is equivalent to <CODE>source</CODE>. </P>
<DT><CODE>break</CODE> 
<DD><A name=index-break></A>
<DIV class=example><PRE class=example>break [<VAR>n</VAR>]
</PRE></DIV>
<P>Exit from a <CODE>for</CODE>, <CODE>while</CODE>, <CODE>until</CODE>, or <CODE>select</CODE> loop. If <VAR>n</VAR> is supplied, the <VAR>n</VAR>th enclosing loop is exited. <VAR>n</VAR> must be greater than or equal to 1. The return status is zero unless <VAR>n</VAR> is not greater than or equal to 1. </P>
<DT><CODE>cd</CODE> 
<DD><A name=index-cd></A>
<DIV class=example><PRE class=example>cd [-L|[-P [-e]]] [<VAR>directory</VAR>]
</PRE></DIV>
<P>Change the current working directory to <VAR>directory</VAR>. If <VAR>directory</VAR> is not given, the value of the <CODE>HOME</CODE> shell variable is used. If the shell variable <CODE>CDPATH</CODE> exists, it is used as a search path. If <VAR>directory</VAR> begins with a slash, <CODE>CDPATH</CODE> is not used. </P>
<P>The <SAMP>-P</SAMP> option means to not follow symbolic links; symbolic links are followed by default or with the <SAMP>-L</SAMP> option. If the <SAMP>-e</SAMP> option is supplied with <SAMP>-P</SAMP> and the current working directory cannot be successfully determined after a successful directory change, <CODE>cd</CODE> will return an unsuccessful status. If <VAR>directory</VAR> is &#8216;<SAMP>-</SAMP>&#8217;, it is equivalent to <CODE>$OLDPWD</CODE>. </P>
<P>If a non-empty directory name from <CODE>CDPATH</CODE> is used, or if &#8216;<SAMP>-</SAMP>&#8217; is the first argument, and the directory change is successful, the absolute pathname of the new working directory is written to the standard output. </P>
<P>The return status is zero if the directory is successfully changed, non-zero otherwise. </P>
<DT><CODE>continue</CODE> 
<DD><A name=index-continue></A>
<DIV class=example><PRE class=example>continue [<VAR>n</VAR>]
</PRE></DIV>
<P>Resume the next iteration of an enclosing <CODE>for</CODE>, <CODE>while</CODE>, <CODE>until</CODE>, or <CODE>select</CODE> loop. If <VAR>n</VAR> is supplied, the execution of the <VAR>n</VAR>th enclosing loop is resumed. <VAR>n</VAR> must be greater than or equal to 1. The return status is zero unless <VAR>n</VAR> is not greater than or equal to 1. </P>
<DT><CODE>eval</CODE> 
<DD><A name=index-eval></A>
<DIV class=example><PRE class=example>eval [<VAR>arguments</VAR>]
</PRE></DIV>
<P>The arguments are concatenated together into a single command, which is then read and executed, and its exit status returned as the exit status of <CODE>eval</CODE>. If there are no arguments or only empty arguments, the return status is zero. </P>
<DT><CODE>exec</CODE> 
<DD><A name=index-exec></A>
<DIV class=example><PRE class=example>exec [-cl] [-a <VAR>name</VAR>] [<VAR>command</VAR> [<VAR>arguments</VAR>]]
</PRE></DIV>
<P>If <VAR>command</VAR> is supplied, it replaces the shell without creating a new process. If the <SAMP>-l</SAMP> option is supplied, the shell places a dash at the beginning of the zeroth argument passed to <VAR>command</VAR>. This is what the <CODE>login</CODE> program does. The <SAMP>-c</SAMP> option causes <VAR>command</VAR> to be executed with an empty environment. If <SAMP>-a</SAMP> is supplied, the shell passes <VAR>name</VAR> as the zeroth argument to <VAR>command</VAR>. If no <VAR>command</VAR> is specified, redirections may be used to affect the current shell environment. If there are no redirection errors, the return status is zero; otherwise the return status is non-zero. </P>
<DT><CODE>exit</CODE> 
<DD><A name=index-exit></A>
<DIV class=example><PRE class=example>exit [<VAR>n</VAR>]
</PRE></DIV>
<P>Exit the shell, returning a status of <VAR>n</VAR> to the shell&#8217;s parent. If <VAR>n</VAR> is omitted, the exit status is that of the last command executed. Any trap on <CODE>EXIT</CODE> is executed before the shell terminates. </P>
<DT><CODE>export</CODE> 
<DD><A name=index-export></A>
<DIV class=example><PRE class=example>export [-fn] [-p] [<VAR>name</VAR>[=<VAR>value</VAR>]]
</PRE></DIV>
<P>Mark each <VAR>name</VAR> to be passed to child processes in the environment. If the <SAMP>-f</SAMP> option is supplied, the <VAR>name</VAR>s refer to shell functions; otherwise the names refer to shell variables. The <SAMP>-n</SAMP> option means to no longer mark each <VAR>name</VAR> for export. If no <VAR>names</VAR> are supplied, or if the <SAMP>-p</SAMP> option is given, a list of exported names is displayed. The <SAMP>-p</SAMP> option displays output in a form that may be reused as input. If a variable name is followed by =<VAR>value</VAR>, the value of the variable is set to <VAR>value</VAR>. </P>
<P>The return status is zero unless an invalid option is supplied, one of the names is not a valid shell variable name, or <SAMP>-f</SAMP> is supplied with a name that is not a shell function. </P>
<DT><CODE>getopts</CODE> 
<DD><A name=index-getopts></A>
<DIV class=example><PRE class=example>getopts <VAR>optstring</VAR> <VAR>name</VAR> [<VAR>args</VAR>]
</PRE></DIV>
<P><CODE>getopts</CODE> is used by shell scripts to parse positional parameters. <VAR>optstring</VAR> contains the option characters to be recognized; if a character is followed by a colon, the option is expected to have an argument, which should be separated from it by white space. The colon (&#8216;<SAMP>:</SAMP>&#8217;) and question mark (&#8216;<SAMP>?</SAMP>&#8217;) may not be used as option characters. Each time it is invoked, <CODE>getopts</CODE> places the next option in the shell variable <VAR>name</VAR>, initializing <VAR>name</VAR> if it does not exist, and the index of the next argument to be processed into the variable <CODE>OPTIND</CODE>. <CODE>OPTIND</CODE> is initialized to 1 each time the shell or a shell script is invoked. When an option requires an argument, <CODE>getopts</CODE> places that argument into the variable <CODE>OPTARG</CODE>. The shell does not reset <CODE>OPTIND</CODE> automatically; it must be manually reset between multiple calls to <CODE>getopts</CODE> within the same shell invocation if a new set of parameters is to be used. </P>
<P>When the end of options is encountered, <CODE>getopts</CODE> exits with a return value greater than zero. <CODE>OPTIND</CODE> is set to the index of the first non-option argument, and <VAR>name</VAR> is set to &#8216;<SAMP>?</SAMP>&#8217;. </P>
<P><CODE>getopts</CODE> normally parses the positional parameters, but if more arguments are given in <VAR>args</VAR>, <CODE>getopts</CODE> parses those instead. </P>
<P><CODE>getopts</CODE> can report errors in two ways. If the first character of <VAR>optstring</VAR> is a colon, <VAR>silent</VAR> error reporting is used. In normal operation diagnostic messages are printed when invalid options or missing option arguments are encountered. If the variable <CODE>OPTERR</CODE> is set to 0, no error messages will be displayed, even if the first character of <CODE>optstring</CODE> is not a colon. </P>
<P>If an invalid option is seen, <CODE>getopts</CODE> places &#8216;<SAMP>?</SAMP>&#8217; into <VAR>name</VAR> and, if not silent, prints an error message and unsets <CODE>OPTARG</CODE>. If <CODE>getopts</CODE> is silent, the option character found is placed in <CODE>OPTARG</CODE> and no diagnostic message is printed. </P>
<P>If a required argument is not found, and <CODE>getopts</CODE> is not silent, a question mark (&#8216;<SAMP>?</SAMP>&#8217;) is placed in <VAR>name</VAR>, <CODE>OPTARG</CODE> is unset, and a diagnostic message is printed. If <CODE>getopts</CODE> is silent, then a colon (&#8216;<SAMP>:</SAMP>&#8217;) is placed in <VAR>name</VAR> and <CODE>OPTARG</CODE> is set to the option character found. </P>
<DT><CODE>hash</CODE> 
<DD><A name=index-hash></A>
<DIV class=example><PRE class=example>hash [-r] [-p <VAR>filename</VAR>] [-dt] [<VAR>name</VAR>]
</PRE></DIV>
<P>Each time <CODE>hash</CODE> is invoked, it remembers the full pathnames of the commands specified as <VAR>name</VAR> arguments, so they need not be searched for on subsequent invocations. The commands are found by searching through the directories listed in <CODE>$PATH</CODE>. Any previously-remembered pathname is discarded. The <SAMP>-p</SAMP> option inhibits the path search, and <VAR>filename</VAR> is used as the location of <VAR>name</VAR>. The <SAMP>-r</SAMP> option causes the shell to forget all remembered locations. The <SAMP>-d</SAMP> option causes the shell to forget the remembered location of each <VAR>name</VAR>. If the <SAMP>-t</SAMP> option is supplied, the full pathname to which each <VAR>name</VAR> corresponds is printed. If multiple <VAR>name</VAR> arguments are supplied with <SAMP>-t</SAMP> the <VAR>name</VAR> is printed before the hashed full pathname. The <SAMP>-l</SAMP> option causes output to be displayed in a format that may be reused as input. If no arguments are given, or if only <SAMP>-l</SAMP> is supplied, information about remembered commands is printed. The return status is zero unless a <VAR>name</VAR> is not found or an invalid option is supplied. </P>
<DT><CODE>pwd</CODE> 
<DD><A name=index-pwd></A>
<DIV class=example><PRE class=example>pwd [-LP]
</PRE></DIV>
<P>Print the absolute pathname of the current working directory. If the <SAMP>-P</SAMP> option is supplied, the pathname printed will not contain symbolic links. If the <SAMP>-L</SAMP> option is supplied, the pathname printed may contain symbolic links. The return status is zero unless an error is encountered while determining the name of the current directory or an invalid option is supplied. </P>
<DT><CODE>readonly</CODE> 
<DD><A name=index-readonly></A>
<DIV class=example><PRE class=example>readonly [-aAf] [-p] [<VAR>name</VAR>[=<VAR>value</VAR>]] &#8230;
</PRE></DIV>
<P>Mark each <VAR>name</VAR> as readonly. The values of these names may not be changed by subsequent assignment. If the <SAMP>-f</SAMP> option is supplied, each <VAR>name</VAR> refers to a shell function. The <SAMP>-a</SAMP> option means each <VAR>name</VAR> refers to an indexed array variable; the <SAMP>-A</SAMP> option means each <VAR>name</VAR> refers to an associative array variable. If both options are supplied, <SAMP>-A</SAMP> takes precedence. If no <VAR>name</VAR> arguments are given, or if the <SAMP>-p</SAMP> option is supplied, a list of all readonly names is printed. The other options may be used to restrict the output to a subset of the set of readonly names. The <SAMP>-p</SAMP> option causes output to be displayed in a format that may be reused as input. If a variable name is followed by =<VAR>value</VAR>, the value of the variable is set to <VAR>value</VAR>. The return status is zero unless an invalid option is supplied, one of the <VAR>name</VAR> arguments is not a valid shell variable or function name, or the <SAMP>-f</SAMP> option is supplied with a name that is not a shell function. </P>
<DT><CODE>return</CODE> 
<DD><A name=index-return></A>
<DIV class=example><PRE class=example>return [<VAR>n</VAR>]
</PRE></DIV>
<P>Cause a shell function to exit with the return value <VAR>n</VAR>. If <VAR>n</VAR> is not supplied, the return value is the exit status of the last command executed in the function. This may also be used to terminate execution of a script being executed with the <CODE>.</CODE> (or <CODE>source</CODE>) builtin, returning either <VAR>n</VAR> or the exit status of the last command executed within the script as the exit status of the script. Any command associated with the <CODE>RETURN</CODE> trap is executed before execution resumes after the function or script. The return status is non-zero if <CODE>return</CODE> is used outside a function and not during the execution of a script by <CODE>.</CODE> or <CODE>source</CODE>. </P>
<DT><CODE>shift</CODE> 
<DD><A name=index-shift></A>
<DIV class=example><PRE class=example>shift [<VAR>n</VAR>]
</PRE></DIV>
<P>Shift the positional parameters to the left by <VAR>n</VAR>. The positional parameters from <VAR>n</VAR>+1 &#8230; <CODE>$#</CODE> are renamed to <CODE>$1</CODE> &#8230; <CODE>$#</CODE>-<VAR>n</VAR>. Parameters represented by the numbers <CODE>$#</CODE> to <CODE>$#</CODE>-<VAR>n</VAR>+1 are unset. <VAR>n</VAR> must be a non-negative number less than or equal to <CODE>$#</CODE>. If <VAR>n</VAR> is zero or greater than <CODE>$#</CODE>, the positional parameters are not changed. If <VAR>n</VAR> is not supplied, it is assumed to be 1. The return status is zero unless <VAR>n</VAR> is greater than <CODE>$#</CODE> or less than zero, non-zero otherwise. </P>
<DT><CODE>test</CODE> 
<DT><CODE>[</CODE> 
<DD><A name=index-test></A><A name=index-_005b></A>
<P>Evaluate a conditional expression <VAR>expr</VAR>. Each operator and operand must be a separate argument. Expressions are composed of the primaries described below in <A href="http://www.gnu.org/software/bash/manual/html_node/Bash-Conditional-Expressions.html#Bash-Conditional-Expressions">Bash Conditional Expressions</A>. <CODE>test</CODE> does not accept any options, nor does it accept and ignore an argument of <SAMP>--</SAMP> as signifying the end of options. </P>
<P>When the <CODE>[</CODE> form is used, the last argument to the command must be a <CODE>]</CODE>. </P>
<P>Expressions may be combined using the following operators, listed in decreasing order of precedence. The evaluation depends on the number of arguments; see below. Operator precedence is used when there are five or more arguments. </P>
<DL compact>
<DT><CODE>! <VAR>expr</VAR></CODE> 
<DD>
<P>True if <VAR>expr</VAR> is false. </P>
<DT><CODE>( <VAR>expr</VAR> )</CODE> 
<DD>
<P>Returns the value of <VAR>expr</VAR>. This may be used to override the normal precedence of operators. </P>
<DT><CODE><VAR>expr1</VAR> -a <VAR>expr2</VAR></CODE> 
<DD>
<P>True if both <VAR>expr1</VAR> and <VAR>expr2</VAR> are true. </P>
<DT><CODE><VAR>expr1</VAR> -o <VAR>expr2</VAR></CODE> 
<DD>
<P>True if either <VAR>expr1</VAR> or <VAR>expr2</VAR> is true. </P></DD></DL>
<P>The <CODE>test</CODE> and <CODE>[</CODE> builtins evaluate conditional expressions using a set of rules based on the number of arguments. </P>
<DL compact>
<DT>0 arguments 
<DD>
<P>The expression is false. </P>
<DT>1 argument 
<DD>
<P>The expression is true if and only if the argument is not null. </P>
<DT>2 arguments 
<DD>
<P>If the first argument is &#8216;<SAMP>!</SAMP>&#8217;, the expression is true if and only if the second argument is null. If the first argument is one of the unary conditional operators (see <A href="http://www.gnu.org/software/bash/manual/html_node/Bash-Conditional-Expressions.html#Bash-Conditional-Expressions">Bash Conditional Expressions</A>), the expression is true if the unary test is true. If the first argument is not a valid unary operator, the expression is false. </P>
<DT>3 arguments 
<DD>
<P>The following conditions are applied in the order listed. If the second argument is one of the binary conditional operators (see <A href="http://www.gnu.org/software/bash/manual/html_node/Bash-Conditional-Expressions.html#Bash-Conditional-Expressions">Bash Conditional Expressions</A>), the result of the expression is the result of the binary test using the first and third arguments as operands. The &#8216;<SAMP>-a</SAMP>&#8217; and &#8216;<SAMP>-o</SAMP>&#8217; operators are considered binary operators when there are three arguments. If the first argument is &#8216;<SAMP>!</SAMP>&#8217;, the value is the negation of the two-argument test using the second and third arguments. If the first argument is exactly &#8216;<SAMP>(</SAMP>&#8217; and the third argument is exactly &#8216;<SAMP>)</SAMP>&#8217;, the result is the one-argument test of the second argument. Otherwise, the expression is false. </P>
<DT>4 arguments 
<DD>
<P>If the first argument is &#8216;<SAMP>!</SAMP>&#8217;, the result is the negation of the three-argument expression composed of the remaining arguments. Otherwise, the expression is parsed and evaluated according to precedence using the rules listed above. </P>
<DT>5 or more arguments 
<DD>
<P>The expression is parsed and evaluated according to precedence using the rules listed above. </P></DD></DL>
<P>When used with <CODE>test</CODE> or &#8216;<SAMP>[</SAMP>&#8217;, the &#8216;<SAMP>&lt;</SAMP>&#8217; and &#8216;<SAMP>&gt;</SAMP>&#8217; operators sort lexicographically using ASCII ordering. </P>
<DT><CODE>times</CODE> 
<DD><A name=index-times></A>
<DIV class=example><PRE class=example>times
</PRE></DIV>
<P>Print out the user and system times used by the shell and its children. The return status is zero. </P>
<DT><CODE>trap</CODE> 
<DD><A name=index-trap></A>
<DIV class=example><PRE class=example>trap [-lp] [<VAR>arg</VAR>] [<VAR>sigspec</VAR> &#8230;]
</PRE></DIV>
<P>The commands in <VAR>arg</VAR> are to be read and executed when the shell receives signal <VAR>sigspec</VAR>. If <VAR>arg</VAR> is absent (and there is a single <VAR>sigspec</VAR>) or equal to &#8216;<SAMP>-</SAMP>&#8217;, each specified signal&#8217;s disposition is reset to the value it had when the shell was started. If <VAR>arg</VAR> is the null string, then the signal specified by each <VAR>sigspec</VAR> is ignored by the shell and commands it invokes. If <VAR>arg</VAR> is not present and <SAMP>-p</SAMP> has been supplied, the shell displays the trap commands associated with each <VAR>sigspec</VAR>. If no arguments are supplied, or only <SAMP>-p</SAMP> is given, <CODE>trap</CODE> prints the list of commands associated with each signal number in a form that may be reused as shell input. The <SAMP>-l</SAMP> option causes the shell to print a list of signal names and their corresponding numbers. Each <VAR>sigspec</VAR> is either a signal name or a signal number. Signal names are case insensitive and the <CODE>SIG</CODE> prefix is optional. </P>
<P>If a <VAR>sigspec</VAR> is <CODE>0</CODE> or <CODE>EXIT</CODE>, <VAR>arg</VAR> is executed when the shell exits. If a <VAR>sigspec</VAR> is <CODE>DEBUG</CODE>, the command <VAR>arg</VAR> is executed before every simple command, <CODE>for</CODE> command, <CODE>case</CODE> command, <CODE>select</CODE> command, every arithmetic <CODE>for</CODE> command, and before the first command executes in a shell function. Refer to the description of the <CODE>extdebug</CODE> option to the <CODE>shopt</CODE> builtin (see <A href="http://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html#The-Shopt-Builtin">The Shopt Builtin</A>) for details of its effect on the <CODE>DEBUG</CODE> trap. If a <VAR>sigspec</VAR> is <CODE>RETURN</CODE>, the command <VAR>arg</VAR> is executed each time a shell function or a script executed with the <CODE>.</CODE> or <CODE>source</CODE> builtins finishes executing. </P>
<P>If a <VAR>sigspec</VAR> is <CODE>ERR</CODE>, the command <VAR>arg</VAR> is executed whenever a simple command has a non-zero exit status, subject to the following conditions. The <CODE>ERR</CODE> trap is not executed if the failed command is part of the command list immediately following an <CODE>until</CODE> or <CODE>while</CODE> keyword, part of the test following the <CODE>if</CODE> or <CODE>elif</CODE> reserved words, part of a command executed in a <CODE>&amp;&amp;</CODE> or <CODE>||</CODE> list, or if the command&#8217;s return status is being inverted using <CODE>!</CODE>. These are the same conditions obeyed by the <CODE>errexit</CODE> option. </P>
<P>Signals ignored upon entry to the shell cannot be trapped or reset. Trapped signals that are not being ignored are reset to their original values in a subshell or subshell environment when one is created. </P>
<P>The return status is zero unless a <VAR>sigspec</VAR> does not specify a valid signal. </P>
<DT><CODE>umask</CODE> 
<DD><A name=index-umask></A>
<DIV class=example><PRE class=example>umask [-p] [-S] [<VAR>mode</VAR>]
</PRE></DIV>
<P>Set the shell process&#8217;s file creation mask to <VAR>mode</VAR>. If <VAR>mode</VAR> begins with a digit, it is interpreted as an octal number; if not, it is interpreted as a symbolic mode mask similar to that accepted by the <CODE>chmod</CODE> command. If <VAR>mode</VAR> is omitted, the current value of the mask is printed. If the <SAMP>-S</SAMP> option is supplied without a <VAR>mode</VAR> argument, the mask is printed in a symbolic format. If the <SAMP>-p</SAMP> option is supplied, and <VAR>mode</VAR> is omitted, the output is in a form that may be reused as input. The return status is zero if the mode is successfully changed or if no <VAR>mode</VAR> argument is supplied, and non-zero otherwise. </P>
<P>Note that when the mode is interpreted as an octal number, each number of the umask is subtracted from <CODE>7</CODE>. Thus, a umask of <CODE>022</CODE> results in permissions of <CODE>755</CODE>. </P>
<DT><CODE>unset</CODE> 
<DD><A name=index-unset></A>
<DIV class=example><PRE class=example>unset [-fv] [<VAR>name</VAR>]
</PRE></DIV>
<P>Each variable or function <VAR>name</VAR> is removed. If no options are supplied, or the <SAMP>-v</SAMP> option is given, each <VAR>name</VAR> refers to a shell variable. If the <SAMP>-f</SAMP> option is given, the <VAR>name</VAR>s refer to shell functions, and the function definition is removed. Readonly variables and functions may not be unset. The return status is zero unless a <VAR>name</VAR> is readonly. </P></DD></DL>
<HR>

<DIV class=header>
<P>Next: <A accessKey=n href="http://www.gnu.org/software/bash/manual/html_node/Bash-Builtins.html#Bash-Builtins" rel=next>Bash Builtins</A>, Up: <A accessKey=u href="http://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html#Shell-Builtin-Commands" rel=up>Shell Builtin Commands</A> &nbsp; [<A title="Table of contents" href="http://www.gnu.org/software/bash/manual/html_node/index.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="http://www.gnu.org/software/bash/manual/html_node/Indexes.html#Indexes" rel=index>Index</A>]</P></DIV>