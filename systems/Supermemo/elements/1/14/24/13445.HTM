<DT><CODE>case</CODE> 
<DD><A name=index-case></A><A name=index-in></A><A name=index-esac></A>
<P><FONT class=extract>The syntax of the <CODE>case</CODE> command is: </FONT></P>
<DIV class=example><PRE class=example><FONT class=extract><CODE>case <VAR>word</VAR> in [ [(] <VAR>pattern</VAR> [| <VAR>pattern</VAR>]&#8230;) <VAR>command-list</VAR> ;;]&#8230; esac</CODE>
</FONT></PRE></DIV>
<P><CODE>case</CODE> will selectively execute the <VAR>command-list</VAR> corresponding to the first <VAR>pattern</VAR> that matches <VAR>word</VAR>. <FONT class=extract>If the shell option <CODE>nocasematch</CODE> (see the description of <CODE>shopt</CODE> in </FONT><A href="http://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html#The-Shopt-Builtin"><FONT class=extract>The Shopt Builtin</FONT></A><FONT class=extract>) is enabled, the match is performed without regard to the case of alphabetic characters.</FONT> The &#8216;<SAMP>|</SAMP>&#8217; is used to separate multiple patterns, and the &#8216;<SAMP>)</SAMP>&#8217; operator terminates a pattern list. A list of patterns and an associated command-list is known as a <VAR>clause</VAR>. </P>
<P>Each clause must be terminated with &#8216;<SAMP>;;</SAMP>&#8217;, &#8216;<SAMP>;&amp;</SAMP>&#8217;, or &#8216;<SAMP>;;&amp;</SAMP>&#8217;. <FONT class=extract>The <VAR>word</VAR> undergoes tilde expansion, parameter expansion, command substitution, arithmetic expansion, and quote removal before matching is attempted. Each <VAR>pattern</VAR> undergoes tilde expansion, parameter expansion, command substitution, and arithmetic expansion.</FONT> </P>
<P>There may be an arbitrary number of <CODE>case</CODE> clauses, each terminated by a &#8216;<SAMP>;;</SAMP>&#8217;, &#8216;<SAMP>;&amp;</SAMP>&#8217;, or &#8216;<SAMP>;;&amp;</SAMP>&#8217;. The first pattern that matches determines the command-list that is executed. </P>
<P>Here is an example using <CODE>case</CODE> in a script that could be used to describe one interesting feature of an animal: </P>
<DIV class=example><PRE class=example>echo -n "Enter the name of an animal: "
read ANIMAL
echo -n "The $ANIMAL has "
case $ANIMAL in
  horse | dog | cat) echo -n "four";;
  man | kangaroo ) echo -n "two";;
  *) echo -n "an unknown number of";;
esac
echo " legs."
</PRE></DIV>
<P><FONT class=extract>If the &#8216;<SAMP>;;</SAMP>&#8217; operator is used, no subsequent matches are attempted after the first pattern match. Using &#8216;<SAMP>;&amp;</SAMP>&#8217; in place of &#8216;<SAMP>;;</SAMP>&#8217; causes execution to continue with the <VAR>command-list</VAR> associated with the next clause, if any. Using &#8216;<SAMP>;;&amp;</SAMP>&#8217; in place of &#8216;<SAMP>;;</SAMP>&#8217; causes the shell to test the patterns in the next clause, if any, and execute any associated <VAR>command-list</VAR> on a successful match.</FONT> </P>
<P>The return status is zero if no <VAR>pattern</VAR> is matched. Otherwise, the return status is the exit status of the <VAR>command-list</VAR> executed.</P></DD>