<DT><CODE>select</CODE> 
<DD><A name=index-select></A>
<P>The <CODE>select</CODE> construct allows the easy generation of menus. <FONT class=extract>It has almost the same syntax as the <CODE>for</CODE> command: </FONT></P>
<DIV class=example><PRE class=example><FONT class=extract>select <VAR>name</VAR> [in <VAR>words</VAR> &#8230;]; do <VAR>commands</VAR>; done
</FONT></PRE></DIV>
<P>The list of words following <CODE>in</CODE> is expanded, generating a list of items. The set of expanded words is printed on the standard error output stream, each preceded by a number. If the &#8216;<SAMP>in <VAR>words</VAR></SAMP>&#8217; is omitted, the positional parameters are printed, as if &#8216;<SAMP>in "$@"</SAMP>&#8217; had been specified. The <CODE>PS3</CODE> prompt is then displayed and a line is read from the standard input. If the line consists of a number corresponding to one of the displayed words, then the value of <VAR>name</VAR> is set to that word. If the line is empty, the words and prompt are displayed again. If <CODE>EOF</CODE> is read, the <CODE>select</CODE> command completes. Any other value read causes <VAR>name</VAR> to be set to null. The line read is saved in the variable <CODE>REPLY</CODE>. </P>
<P>The <VAR>commands</VAR> are executed after each selection until a <CODE>break</CODE> command is executed, at which point the <CODE>select</CODE> command completes. </P>
<P><FONT class=extract>Here is an example that allows the user to pick a filename from the current directory, and displays the name and index of the file selected. </FONT></P>
<DIV class=example><PRE class=example><FONT class=extract>select fname in *;
do
	echo you picked $fname \($REPLY\)
	break;
done</FONT></PRE></DIV></DD>