<DT><FONT class=extract><CODE>[[&#8230;]]</CODE> </FONT>
<DD><A name=index-_005b_005b></A><A name=index-_005d_005d></A>
<DIV class=example><PRE class=example><FONT class=extract>[[ <VAR>expression</VAR> ]]
</FONT></PRE></DIV>
<P><FONT class=extract>Return a status of 0 or 1 depending on the evaluation of the conditional expression <VAR>expression</VAR>. Expressions are composed of the primaries described below in </FONT><A href="http://www.gnu.org/software/bash/manual/html_node/Bash-Conditional-Expressions.html#Bash-Conditional-Expressions"><FONT class=extract>Bash Conditional Expressions</FONT></A><FONT class=extract>. Word splitting and filename expansion are not performed on the words between the &#8216;<SAMP>[[</SAMP>&#8217; and &#8216;<SAMP>]]</SAMP>&#8217;; tilde expansion, parameter and variable expansion, arithmetic expansion, command substitution, process substitution, and quote removal are performed. Conditional operators such as &#8216;<SAMP>-f</SAMP>&#8217; must be unquoted to be recognized as primaries.</FONT> </P>
<P><FONT class=extract>When used with &#8216;<SAMP>[[</SAMP>&#8217;, the &#8216;<SAMP>&lt;</SAMP>&#8217; and &#8216;<SAMP>&gt;</SAMP>&#8217; operators sort lexicographically using the current locale.</FONT> </P>
<P><FONT class=extract>When the &#8216;<SAMP>==</SAMP>&#8217; and &#8216;<SAMP>!=</SAMP>&#8217; operators are used, the string to the right of the operator is considered a pattern and matched according to the rules described below in </FONT><A href="http://www.gnu.org/software/bash/manual/html_node/Pattern-Matching.html#Pattern-Matching"><FONT class=extract>Pattern Matching</FONT></A><FONT class=extract>. If the shell option <CODE>nocasematch</CODE> (see the description of <CODE>shopt</CODE> in </FONT><A href="http://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html#The-Shopt-Builtin"><FONT class=extract>The Shopt Builtin</FONT></A><FONT class=extract>) is enabled, the match is performed without regard to the case of alphabetic characters. The return value is 0 if the string matches (&#8216;<SAMP>==</SAMP>&#8217;) or does not match (&#8216;<SAMP>!=</SAMP>&#8217;)the pattern, and 1 otherwise. Any part of the pattern may be quoted to force it to be matched as a string.</FONT> </P>
<P><FONT class=extract>An additional binary operator, &#8216;<SAMP>=~</SAMP>&#8217;, is available, with the same precedence as &#8216;<SAMP>==</SAMP>&#8217; and &#8216;<SAMP>!=</SAMP>&#8217;. When it is used, the string to the right of the operator is considered an extended regular expression and matched accordingly (as in <I>regex</I>3)). The return value is 0 if the string matches the pattern, and 1 otherwise. If the regular expression is syntactically incorrect, the conditional expression&#8217;s return value is 2. If the shell option <CODE>nocasematch</CODE> (see the description of <CODE>shopt</CODE> in </FONT><A href="http://www.gnu.org/software/bash/manual/html_node/The-Shopt-Builtin.html#The-Shopt-Builtin"><FONT class=extract>The Shopt Builtin</FONT></A><FONT class=extract>) is enabled, the match is performed without regard to the case of alphabetic characters. Any part of the pattern may be quoted to force it to be matched as a string. Substrings matched by parenthesized subexpressions within the regular expression are saved in the array variable <CODE>BASH_REMATCH</CODE>. The element of <CODE>BASH_REMATCH</CODE> with index 0 is the portion of the string matching the entire regular expression. The element of <CODE>BASH_REMATCH</CODE> with index <VAR>n</VAR> is the portion of the string matching the <VAR>n</VAR>th parenthesized subexpression.</FONT> </P>
<P><FONT class=extract>Expressions may be combined using the following operators, listed in decreasing order of precedence: </FONT></P>
<DL compact>
<DT><FONT class=extract><CODE>( <VAR>expression</VAR> )</CODE> </FONT>
<DD>
<P><FONT class=extract>Returns the value of <VAR>expression</VAR>. This may be used to override the normal precedence of operators. </FONT></P>
<DT><FONT class=extract><CODE>! <VAR>expression</VAR></CODE> </FONT>
<DD>
<P><FONT class=extract>True if <VAR>expression</VAR> is false. </FONT></P>
<DT><FONT class=extract><CODE><VAR>expression1</VAR> &amp;&amp; <VAR>expression2</VAR></CODE> </FONT>
<DD>
<P><FONT class=extract>True if both <VAR>expression1</VAR> and <VAR>expression2</VAR> are true. </FONT></P>
<DT><FONT class=extract><CODE><VAR>expression1</VAR> || <VAR>expression2</VAR></CODE> </FONT>
<DD>
<P><FONT class=extract>True if either <VAR>expression1</VAR> or <VAR>expression2</VAR> is true. </FONT></P></DD></DL>
<P><FONT class=extract>The <CODE>&amp;&amp;</CODE> and <CODE>||</CODE> operators do not evaluate <VAR>expression2</VAR> if the value of <VAR>expression1</VAR> is sufficient to determine the return value of the entire conditional expression.</FONT></P></DD>