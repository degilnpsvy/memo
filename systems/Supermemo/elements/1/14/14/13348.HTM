<A name=Conditional-Init-Constructs></A>
<H4 class=subsection>8.3.2 Conditional Init Constructs</H4>
<P>Readline implements a facility similar in spirit to the conditional compilation features of the C preprocessor which allows key bindings and variable settings to be performed as the result of tests. There are four parser directives used. </P>
<DL compact>
<DT><CODE>$if</CODE> 
<DD>
<P>The <CODE>$if</CODE> construct allows bindings to be made based on the editing mode, the terminal being used, or the application using Readline. The text of the test extends to the end of the line; no characters are required to isolate it. </P>
<DL compact>
<DT><CODE>mode</CODE> 
<DD>
<P>The <CODE>mode=</CODE> form of the <CODE>$if</CODE> directive is used to test whether Readline is in <CODE>emacs</CODE> or <CODE>vi</CODE> mode. This may be used in conjunction with the &#8216;<SAMP>set keymap</SAMP>&#8217; command, for instance, to set bindings in the <CODE>emacs-standard</CODE> and <CODE>emacs-ctlx</CODE> keymaps only if Readline is starting out in <CODE>emacs</CODE> mode. </P>
<DT><CODE>term</CODE> 
<DD>
<P>The <CODE>term=</CODE> form may be used to include terminal-specific key bindings, perhaps to bind the key sequences output by the terminal&#8217;s function keys. The word on the right side of the &#8216;<SAMP>=</SAMP>&#8217; is tested against both the full name of the terminal and the portion of the terminal name before the first &#8216;<SAMP>-</SAMP>&#8217;. This allows <CODE>sun</CODE> to match both <CODE>sun</CODE> and <CODE>sun-cmd</CODE>, for instance. </P>
<DT><CODE>application</CODE> 
<DD>
<P>The <VAR>application</VAR> construct is used to include application-specific settings. Each program using the Readline library sets the <VAR>application name</VAR>, and you can test for a particular value. This could be used to bind key sequences to functions useful for a specific program. For instance, the following command adds a key sequence that quotes the current or previous word in Bash: </P>
<DIV class=example><PRE class=example>$if Bash
# Quote the current or previous word
"\C-xq": "\eb\"\ef\""
$endif
</PRE></DIV></DD></DL>
<DT><CODE>$endif</CODE> 
<DD>
<P>This command, as seen in the previous example, terminates an <CODE>$if</CODE> command. </P>
<DT><CODE>$else</CODE> 
<DD>
<P>Commands in this branch of the <CODE>$if</CODE> directive are executed if the test fails. </P>
<DT><CODE>$include</CODE> 
<DD>
<P>This directive takes a single filename as an argument and reads commands and bindings from that file. For example, the following directive reads from <SAMP>/etc/inputrc</SAMP>: </P>
<DIV class=example><PRE class=example>$include /etc/inputrc
</PRE></DIV></DD></DL>
<HR>

<DIV class=header>
<P>Next: <A accessKey=n href="http://www.gnu.org/software/bash/manual/html_node/Sample-Init-File.html#Sample-Init-File" rel=next>Sample Init File</A>, Previous: <A accessKey=p href="http://www.gnu.org/software/bash/manual/html_node/Readline-Init-File-Syntax.html#Readline-Init-File-Syntax" rel=previous>Readline Init File Syntax</A>, Up: <A accessKey=u href="http://www.gnu.org/software/bash/manual/html_node/Readline-Init-File.html#Readline-Init-File" rel=up>Readline Init File</A> &nbsp; [<A title="Table of contents" href="http://www.gnu.org/software/bash/manual/html_node/index.html#SEC_Contents" rel=contents>Contents</A>][<A title=Index href="http://www.gnu.org/software/bash/manual/html_node/Indexes.html#Indexes" rel=index>Index</A>]</P></DIV>