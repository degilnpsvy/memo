<DT><FONT class=clozed><CODE>${<VAR>parameter</VAR>^<VAR>pattern</VAR>}</CODE> </FONT>
<DT><FONT class=clozed><CODE>${<VAR>parameter</VAR>^^<VAR>pattern</VAR>}</CODE> </FONT>
<DT><FONT class=clozed><CODE>${<VAR>parameter</VAR>,<VAR>pattern</VAR>}</CODE> </FONT>
<DT><CODE><FONT class=clozed>${<VAR>parameter</VAR>,,<VAR>pattern</VAR>}</FONT></CODE> 
<DD>
<P>This expansion modifies the case of alphabetic characters in <VAR>parameter</VAR>. The <VAR>pattern</VAR> is expanded to produce a pattern just as in filename expansion. </P>
<DD>
<P>The &#8216;<SAMP>^</SAMP>&#8217; operator <FONT class=clozed>converts lowercase letters matching <VAR>pattern</VAR> to uppercase</FONT>; the &#8216;<SAMP>,</SAMP>&#8217; operator converts <FONT class=clozed>matching uppercase letters to lowercase</FONT>. </P>
<DD>
<P>The &#8216;<SAMP>^^</SAMP>&#8217; and &#8216;<SAMP>,,</SAMP>&#8217; expansions convert <SPAN class=cloze>[...]</SPAN>; </P>
<DD>
<P>the &#8216;<SAMP>^</SAMP>&#8217; and &#8216;<SAMP>,</SAMP>&#8217; expansions <SPAN class=cloze>[...]</SPAN>. </P>
<DD>
<P>If <VAR>pattern</VAR> is omitted, it is treated like a &#8216;<SAMP>?</SAMP>&#8217;, which matches every character. </P>
<DD>
<P>If <VAR>parameter</VAR> is &#8216;<SAMP>@</SAMP>&#8217; or &#8216;<SAMP>*</SAMP>&#8217;, the case modification operation is applied to each positional parameter in turn, and the expansion is the resultant list. </P>
<DD>
<P>If <VAR>parameter</VAR> is an array variable subscripted with &#8216;<SAMP>@</SAMP>&#8217; or &#8216;<SAMP>*</SAMP>&#8217;, the case modification operation is applied to each member of the array in turn, and the expansion is the resultant list.</P></DD>