<DT><CODE><FONT class=clozed>${<VAR>parameter</VAR>/<VAR>pattern</VAR>/<VAR>string</VAR>}</FONT></CODE> 
<DD>
<P>The <VAR>pattern</VAR> is expanded to produce a pattern just as in filename expansion. <VAR>Parameter</VAR> is expanded and the longest match of <VAR>pattern</VAR> against its value is replaced with <VAR>string</VAR>. </P>
<DD>
<P>If <VAR>pattern</VAR> begins with &#8216;<SAMP><FONT class=clozed>/</FONT></SAMP>&#8217;, <FONT class=clozed>all matches of <VAR>pattern</VAR> are replaced with <VAR>string</VAR>. Normally only the first match is replaced.</FONT> </P>
<DD>
<P>If <VAR>pattern</VAR> begins with &#8216;<SAMP><FONT class=clozed>#</FONT></SAMP>&#8217;, <FONT class=clozed>it must match at the beginning of the expanded value of <VAR>parameter</VAR></FONT>. </P>
<DD>
<P>If <VAR>pattern</VAR> begins with &#8216;<SPAN class=cloze>[...]</SPAN>&#8217;, it must match at the end of the expanded value of <VAR>parameter</VAR>. </P>
<DD>
<P>If <VAR>string</VAR> is null, matches of <VAR>pattern</VAR> are deleted and the <CODE>/</CODE> following <VAR>pattern</VAR> may be omitted. </P>
<DD>
<P>If <VAR>parameter</VAR> is &#8216;<SAMP>@</SAMP>&#8217; or &#8216;<SAMP>*</SAMP>&#8217;, the substitution operation is applied to each positional parameter in turn, and the expansion is the resultant list. </P>
<DD>
<P>If <VAR>parameter</VAR> is an array variable subscripted with &#8216;<SAMP>@</SAMP>&#8217; or &#8216;<SAMP>*</SAMP>&#8217;, the substitution operation is applied to each member of the array in turn, and the expansion is the resultant list.</P></DD>