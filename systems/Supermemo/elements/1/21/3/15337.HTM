On the other hand, when you use &#8216;<SAMP><SPAN class=samp>+=</SPAN></SAMP>&#8217; with a variable that you defined first to be recursively-expanded using plain &#8216;<SAMP><SPAN class=samp>=</SPAN></SAMP>&#8217;, <CODE>make</CODE> does something a bit different. Recall that when you define a recursively-expanded variable, <CODE>make</CODE> does not expand the value you set for variable and function references immediately. Instead it stores the text verbatim, and saves these variable and function references to be expanded later, when you refer to the new variable (see <A href="https://www.gnu.org/software/make/manual/make.html#Flavors">The Two Flavors of Variables</A>). When you use &#8216;<SAMP><SPAN class=samp>+=</SPAN></SAMP>&#8217; on a recursively-expanded variable, it is this unexpanded text to which <CODE>make</CODE> appends the new text you specify. <PRE class=example>     variable = value
     variable += more
</PRE>
<P class=noindent>is roughly equivalent to: <PRE class=example><FONT class=clozed>     temp = value
     variable = $(temp) more
</FONT></PRE>
<P class=noindent>except that of course it never defines a variable called <CODE>temp</CODE>.