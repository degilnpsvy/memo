<P class=noindent>The importance of this comes when the variable's old value contains variable references. Take this common example: <PRE class=example>     CFLAGS = $(includes) -O
     ...
     CFLAGS += -pg # enable profiling
</PRE>
<P class=noindent>The first line defines the <CODE>CFLAGS</CODE> variable with a reference to another variable, <CODE>includes</CODE>. (<CODE>CFLAGS</CODE> is used by the rules for C compilation; see <A href="https://www.gnu.org/software/make/manual/make.html#Catalogue-of-Rules">Catalogue of Implicit Rules</A>.) Using &#8216;<SAMP><SPAN class=samp>=</SPAN></SAMP>&#8217; for the definition makes <CODE>CFLAGS</CODE> a recursively-expanded variable, meaning &#8216;<SAMP><SPAN class=samp>$(includes)&nbsp;-O</SPAN></SAMP>&#8217;<!-- /@w --> is <EM>not</EM> expanded when <CODE>make</CODE> processes the definition of <CODE>CFLAGS</CODE>. Thus, <CODE>includes</CODE> need not be defined yet for its value to take effect. It only has to be defined before any reference to <CODE>CFLAGS</CODE>. If we tried to append to the value of <CODE>CFLAGS</CODE> without using &#8216;<SAMP><SPAN class=samp>+=</SPAN></SAMP>&#8217;, we might do it like this: <PRE class=example>     CFLAGS := $(CFLAGS) -pg # enable profiling
</PRE>
<P class=noindent>This is pretty close, but not quite what we want. <SPAN class=cloze>[...]</SPAN>