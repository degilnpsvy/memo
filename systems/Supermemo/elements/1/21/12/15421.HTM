Using &#8216;<SAMP><SPAN class=samp>:=</SPAN></SAMP>&#8217; redefines <CODE>CFLAGS</CODE> as a simply-expanded variable; this means <CODE>make</CODE> expands the text &#8216;<SAMP><SPAN class=samp>$(CFLAGS)&nbsp;-pg</SPAN></SAMP>&#8217;<!-- /@w --> before setting the variable. If <CODE>includes</CODE> is not yet defined, we get &#8216;<SAMP><SPAN class=samp>&nbsp;-O&nbsp;-pg</SPAN></SAMP>&#8217;<!-- /@w -->, and a later definition of <CODE>includes</CODE> will have no effect. Conversely, by using &#8216;<SAMP><SPAN class=samp>+=</SPAN></SAMP>&#8217; we set <CODE>CFLAGS</CODE> to the <EM>unexpanded</EM> value &#8216;<SAMP><SPAN class=samp>$(includes)&nbsp;-O&nbsp;-pg</SPAN></SAMP>&#8217;<!-- /@w -->. Thus we preserve the reference to <CODE>includes</CODE>, so if that variable gets defined at any later point, a reference like &#8216;<SAMP><SPAN class=samp>$(CFLAGS)</SPAN></SAMP>&#8217; still uses its value.