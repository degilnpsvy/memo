<H1 style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC39">Canadian Cross</A></H1>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A name=IDX52></A><A name=IDX53></A><A name=IDX54></A></P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">It is possible to use the GNU configure and build system to build a program which will run on a system which is different from the system on which the tools are built. In other words, it is possible to build programs using a cross compiler.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">This is referred to as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>Canadian Cross</EM>.</P>
<H2 style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC40" name=SEC40>Canadian Cross Example</A></H2>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Here is an example of a Canadian Cross.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">While running on a GNU/Linux, you can build a program which will run on a Solaris system. You would use a GNU/Linux cross Solaris compiler to build the program.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Of course, you could not run the resulting program on your GNU/Linux system. You would have to copy it over to a Solaris system before you would run it.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Of course, you could also simply build the programs on the Solaris system in the first place. However, perhaps the Solaris system is not available for some reason; perhaps you actually don't have one, but you want to build the tools for somebody else to use. Or perhaps your GNU/Linux system is much faster than your Solaris system.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">A Canadian Cross build is most frequently used when building programs to run on a non-Unix system, such as DOS or Windows. It may be simpler to configure and build on a Unix system than to support the configuration machinery on a non-Unix system.</P>
<H2 style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC41" name=SEC41>Canadian Cross Concepts</A></H2>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">When building a Canadian Cross, there are at least two different systems involved: the system on which the tools are being built, and the system on which the tools will run.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The system on which the tools are being built is called the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>build</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>system.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The system on which the tools will run is called the host system.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">For example, if you are building a Solaris program on a GNU/Linux system, as in the previous section, the build system would be GNU/Linux, and the host system would be Solaris.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">It is, of course, possible to build a cross compiler using a Canadian Cross (i.e., build a cross compiler using a cross compiler). In this case, the system for which the resulting cross compiler generates code is called the target system. (For a more complete discussion of host and target systems, see section<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.airs.com/ian/configure/configure_5.html#SEC30">Host and Target</A>).</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">An example of building a cross compiler using a Canadian Cross would be building a Windows cross MIPS ELF compiler on a GNU/Linux system. In this case the build system would be GNU/Linux, the host system would be Windows, and the target system would be MIPS ELF.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The name Canadian Cross comes from the case when the build, host, and target systems are all different. At the time that these issues were all being hashed out, Canada had three national political parties.</P>
<H2 style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC42" name=SEC42>Build Cross Host Tools</A></H2>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">In order to configure a program for a Canadian Cross build, you must first build and install the set of cross tools you will use to build the program.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">These tools will be build cross host tools. That is, they will run on the build system, and will produce code that runs on the host system.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">It is easy to confuse the meaning of build and host here. Always remember that the build system is where you are doing the build, and the host system is where the resulting program will run. Therefore, you need a build cross host compiler.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">In general, you must have a complete cross environment in order to do the build. This normally means a cross compiler, cross assembler, and so forth, as well as libraries and include files for the host system.</P>
<H2 style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC43" name=SEC43>Build and Host Options</A></H2>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A name=IDX55></A><A name=IDX56></A></P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">When you run<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure'</TT>, you must use both the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--build'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--host'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A name=IDX57></A><A name=IDX58></A><A name=IDX59></A>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--build'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is used to specify the configuration name of the build system. This can normally be the result of running the<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`config.guess'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>shell script, and it is reasonable to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--build=`config.guess`'</SAMP>.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A name=IDX60></A><A name=IDX61></A><A name=IDX62></A>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--host'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is used to specify the configuration name of the host system.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">As we explained earlier,<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`config.guess'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used to set the default value for the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--host'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option (see section<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.airs.com/ian/configure/configure_5.html#SEC31">Using the Host Type</A>). We can now see that since<TT>`config.guess'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the type of system on which it is run, it really identifies the build system. Since the host system is normally the same as the build system (i.e., people do not normally build using a cross compiler), it is reasonable to use the result of<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`config.guess'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the default for the host system when the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--host'</SAMP>option is not used.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">It might seem that if the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--host'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option were used without the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--build'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option that the configure script could run<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`config.guess'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>to determine the build system, and presume a Canadian Cross if the result of<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`config.guess'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>differed from the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--host'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option. However, for historical reasons, some configure scripts are routinely run using an explicit<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--host'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option, rather than using the default from<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`config.guess'</TT>. As noted earlier, it is difficult or impossible to reliably compare configuration names (see section<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.airs.com/ian/configure/configure_5.html#SEC33">Using the Target Type</A>). Therefore, by convention, if the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--host'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is used, but the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--build'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is not used, then the build system defaults to the host system.</P>
<H2 style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC44" name=SEC44>Canadian Cross not in Cygnus Tree.</A></H2>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">If you are not using the Cygnus tree, you must explicitly specify the cross tools which you want to use to build the program. This is done by setting environment variables before running the<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>script.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">You must normally set at least the environment variables<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`CC'</SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AR'</SAMP>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`RANLIB'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the cross tools which you want to use to build.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">For some programs, you must set additional cross tools as well, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AS'</SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`LD'</SAMP>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`NM'</SAMP>.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">You would set these environment variables to the build cross tools which you are going to use.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">For example, if you are building a Solaris program on a GNU/Linux system, and your GNU/Linux cross Solaris compiler were named<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`solaris-gcc'</SAMP>, then you would set the environment variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`CC'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`solaris-gcc'</SAMP>.</P>
<H2 style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC45" name=SEC45>Canadian Cross in Cygnus Tree</A></H2>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A name=IDX63></A></P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">This section describes configuring and building a Canadian Cross when using the Cygnus tree.</P>
<H3 style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC46" name=SEC46>Building a Normal Program</A></H3>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">When configuring a Canadian Cross in the Cygnus tree, all the appropriate environment variables are automatically set to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`<VAR>host</VAR>-<VAR>tool</VAR>'</SAMP>, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>host</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the value used for the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--host'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tool</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the name of the tool (e.g.,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`gcc'</SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`as'</SAMP>, etc.). These tools must be on your<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`PATH'</SAMP>.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Adding a prefix of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>host</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>will give the usual name for the build cross host tools. To see this, consider that when these cross tools were built, they were configured to run on the build system and to produce code for the host system. That is, they were configured with a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--target'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option that is the same as the system which we are now calling the host. Recall that the default name for installed cross tools uses the target system as a prefix (see section<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.airs.com/ian/configure/configure_5.html#SEC33">Using the Target Type</A>). Since that is the system which we are now calling the host,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>host</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the right prefix to use.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">For example, if you configure with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--build=i386-linux-gnu'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--host=solaris'</SAMP>, then the Cygnus tree will automatically default to using the compiler<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`solaris-gcc'</SAMP>. You must have previously built and installed this compiler, probably by doing a build with no<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--host'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option and with a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--target'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`solaris'</SAMP>.</P>
<H3 style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC47" name=SEC47>Building a Cross Program</A></H3>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">There are additional considerations if you want to build a cross compiler, rather than a native compiler, in the Cygnus tree using a Canadian Cross.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">When you build a cross compiler using the Cygnus tree, then the target libraries will normally be built with the newly built target compiler (see section<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.airs.com/ian/configure/configure_5.html#SEC35">Host and Target Libraries</A>). However, this will not work when building with a Canadian Cross. This is because the newly built target compiler will be a program which runs on the host system, and therefore will not be able to run on the build system.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Therefore, when building a cross compiler with the Cygnus tree, you must first install a set of build cross target tools. These tools will be used when building the target libraries.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Note that this is not a requirement of a Canadian Cross in general. For example, it would be possible to build just the host cross target tools on the build system, to copy the tools to the host system, and to build the target libraries on the host system. The requirement for build cross target tools is imposed by the Cygnus tree, which expects to be able to build both host programs and target libraries in a single<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`configure'</SAMP>/<SAMP>`make'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>step. Because it builds these in a single step, it expects to be able to build the target libraries on the build system, which means that it must use a build cross target toolchain.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">For example, suppose you want to build a Windows cross MIPS ELF compiler on a GNU/Linux system. You must have previously installed both a GNU/Linux cross Windows compiler and a GNU/Linux cross MIPS ELF compiler.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">In order to build the Windows (configuration name<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`i386-cygwin32'</SAMP>) cross MIPS ELF (configure name<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`mips-elf'</SAMP>) compiler, you might execute the following commands (long command lines are broken across lines with a trailing backslash as a continuation character).</P><PRE style="FONT-WEIGHT: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">mkdir linux-x-cygwin32
cd linux-x-cygwin32
<VAR>srcdir</VAR>/configure --target i386-cygwin32 --prefix=<VAR>installdir</VAR> \
  --exec-prefix=<VAR>installdir</VAR>/H-i386-linux
make
make install
cd ..
mkdir linux-x-mips-elf
cd linux-x-mips-elf
<VAR>srcdir</VAR>/configure --target mips-elf --prefix=<VAR>installdir</VAR> \
  --exec-prefix=<VAR>installdir</VAR>/H-i386-linux
make
make install
cd ..
mkdir cygwin32-x-mips-elf
cd cygwin32-x-mips-elf
<VAR>srcdir</VAR>/configure --build=i386-linux-gnu --host=i386-cygwin32 \
  --target=mips-elf --prefix=<VAR>wininstalldir</VAR> \
  --exec-prefix=<VAR>wininstalldir</VAR>/H-i386-cygwin32
make
make install
</PRE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">You would then copy the contents of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>wininstalldir</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>over to the Windows machine, and run the resulting programs.</P>
<H2 style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC48" name=SEC48>Supporting Canadian Cross</A></H2>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">If you want to make it possible to build a program you are developing using a Canadian Cross, you must take some care when writing your configure and make rules. Simple cases will normally work correctly. However, it is not hard to write configure and make tests which will fail in a Canadian Cross.</P>
<H3 style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC49" name=SEC49>Supporting Canadian Cross in Configure Scripts</A></H3>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A name=IDX64></A></P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">In a<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure.in'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>file, after calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AC_PROG_CC'</SAMP>, you can find out whether this is a Canadian Cross configure by examining the shell variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`cross_compiling'</SAMP>. In a Canadian Cross, which means that the compiler is a cross compiler,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`cross_compiling'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`yes'</SAMP>. In a normal configuration,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`cross_compiling'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`no'</SAMP>.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">You ordinarily do not need to know the type of the build system in a configure script. However, if you do need that information, you can get it by using the macro<SAMP>`AC_CANONICAL_SYSTEM'</SAMP>, the same macro that is used to determine the target system. This macro will set the variables<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`build'</SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`build_alias'</SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`build_cpu'</SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`build_vendor'</SAMP>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`build_os'</SAMP>, which correspond to the similar<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`target'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`host'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>variables, except that they describe the build system.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">When writing tests in<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure.in'</TT>, you must remember that you want to test the host environment, not the build environment.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Macros like<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AC_CHECK_FUNCS'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>which use the compiler will test the host environment. That is because the tests will be done by running the compiler, which is actually a build cross host compiler. If the compiler can find the function, that means that the function is present in the host environment.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Tests like<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`test -f /dev/ptyp0'</SAMP>, on the other hand, will test the build environment. Remember that the configure script is running on the build system, not the host system. If your configure scripts examines files, those files will be on the build system. Whatever you determine based on those files may or may not be the case on the host system.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Most autoconf macros will work correctly for a Canadian Cross. The main exception is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AC_TRY_RUN'</SAMP>. This macro tries to compile and run a test program. This will fail in a Canadian Cross, because the program will be compiled for the host system, which means that it will not run on the build system.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AC_TRY_RUN'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>macro provides an optional argument to tell the configure script what to do in a Canadian Cross. If that argument is not present, you will get a warning when you run<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`autoconf'</SAMP>:</P><PRE style="FONT-WEIGHT: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">warning: AC_TRY_RUN called without default to allow cross compiling
</PRE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">This tells you that the resulting<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>script will not work with a Canadian Cross.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">In some cases while it may better to perform a test at configure time, it is also possible to perform the test at run time. In such a case you can use the cross compiling argument to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AC_TRY_RUN'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to tell your program that the test could not be performed at configure time.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">There are a few other autoconf macros which will not work correctly with a Canadian Cross: a partial list is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AC_FUNC_GETPGRP'</SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AC_FUNC_SETPGRP'</SAMP>,<SAMP>`AC_FUNC_SETVBUF_REVERSED'</SAMP>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AC_SYS_RESTARTABLE_SYSCALLS'</SAMP>. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AC_CHECK_SIZEOF'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>macro is generally not very useful with a Canadian Cross; it permits an optional argument indicating the default size, but there is no way to know what the correct default should be.</P>
<H3 style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC50" name=SEC50>Supporting Canadian Cross in Makefiles.</A></H3>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A name=IDX65></A></P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The main Canadian Cross issue in a<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>arises when you want to use a subsidiary program to generate code or data which you will then include in your real program.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">If you compile this subsidiary program using<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`$(CC)'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the usual way, you will not be able to run it. This is because<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`$(CC)'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>will build a program for the host system, but the program is being built on the build system.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">You must instead use a compiler for the build system, rather than the host system. In the Cygnus tree, this make variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`$(CC_FOR_BUILD)'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>will hold a compiler for the build system.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Note that you should not include<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`config.h'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>in a file you are compiling with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`$(CC_FOR_BUILD)'</SAMP>. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>script will build<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`config.h'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>with information for the host system. However, you are compiling the file using a compiler for the build system (a native compiler). Subsidiary programs are normally simple filters which do no user interaction, and it is normally possible to write them in a highly portable fashion so that the absence of<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`config.h'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not crucial.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A name=IDX66></A>The gcc<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile.in'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>shows a complex situation in which certain files, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`rtl.c'</TT>, must be compiled into both subsidiary programs run on the build system and into the final program. This approach may be of interest for advanced build system hackers. Note that the build system compiler is rather confusingly called<SAMP>`HOST_CC'</SAMP>.