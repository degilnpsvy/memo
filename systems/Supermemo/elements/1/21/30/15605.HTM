<H1 style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC16">Files</A></H1>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">As was seen in the previous chapter, the GNU configure and build system uses a number of different files. The developer must write a few files. The others are generated by various tools.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The system is rather flexible, and can be used in many different ways. In describing the files that it uses, I will describe the common case, and mention some other cases that may arise.</P>
<H2 style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC17" name=SEC17>Developer Files</A></H2>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">This section describes the files written or generated by the developer of a package.</P>
<H3 style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC18" name=SEC18>Developer Files Picture</A></H3>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Here is a picture of the files which are written by the developer, the generated files which would be included with a complete source distribution, and the tools which create those files. The file names are in rectangles with square corners and the tool names are in rectangles with rounded corners (e.g.,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`autoheader'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the name of a tool, not the name of a file).</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><IMG src="http://www.airs.com/ian/configure/configdev.jpg"></P>
<H3 style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC19" name=SEC19>Written Developer Files</A></H3>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The following files would be written by the developer.</P>
<DL style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" compact>
<DT><TT>`configure.in'</TT></DT>
<DD><A name=IDX20></A>This is the configuration script. This script contains invocations of autoconf macros. It may also contain ordinary shell script code. This file will contain feature tests for portability issues. The last thing in the file will normally be an<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AC_OUTPUT'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>macro listing which files to create when the builder runs the configure script. This file is always required when using the GNU configure system. See section<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.airs.com/ian/configure/configure_2.html#SEC7">Write configure.in</A>.</DD>
<DT><TT>`Makefile.am'</TT></DT>
<DD><A name=IDX21></A>This is the automake input file. It describes how the code should be built. It consists of definitions of automake variables. It may also contain ordinary Makefile targets. This file is only needed when using automake (newer tools normally use automake, but there are still older tools which have not been converted, in which the developer writes<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile.in'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>directly). See section<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.airs.com/ian/configure/configure_2.html#SEC8">Write Makefile.am</A>.</DD>
<DT><TT>`acconfig.h'</TT></DT>
<DD><A name=IDX22></A>When the configure script creates a portability header file, by using<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AM_CONFIG_HEADER'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>(or, if not using automake,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AC_CONFIG_HEADER'</SAMP>), this file is used to describe macros which are not recognized by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`autoheader'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>command. This is normally a fairly uninteresting file, consisting of a collection of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`#undef'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>lines with comments. Normally any call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AC_DEFINE'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure.in'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>will require a line in this file. See section<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.airs.com/ian/configure/configure_2.html#SEC9">Write acconfig.h</A>.</DD>
<DT><TT>`acinclude.m4'</TT></DT>
<DD><A name=IDX23></A>This file is not always required. It defines local autoconf macros. These macros may then be used in<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure.in'</TT>. If you don't need any local autoconf macros, then you don't need this file at all. In fact, in general, you never need local autoconf macros, since you can put everything in<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure.in'</TT>, but sometimes a local macro is convenient. Newer tools may omit<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`acinclude.m4'</TT>, and instead use a subdirectory, typically named<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`m4'</TT>, and define<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`ACLOCAL_AMFLAGS = -I m4'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile.am'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>to force<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`aclocal'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to look there for macro definitions. The macro definitions are then placed in separate files in that directory. The<TT>`acinclude.m4'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>file is only used when using automake; in older tools, the developer writes<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`aclocal.m4'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>directly, if it is needed.</DD></DL>
<H3 style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC20" name=SEC20>Generated Developer Files</A></H3>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The following files would be generated by the developer.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">When using automake, these files are normally not generated manually after the first time. Instead, the generated<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>contains rules to automatically rebuild the files as required. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AM_MAINTAINER_MODE'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used in<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure.in'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>(the normal case in Cygnus code), the automatic rebuilding rules will only be defined if you configure using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--enable-maintainer-mode'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">When using automatic rebuilding, it is important to ensure that all the various tools have been built and installed on your<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`PATH'</SAMP>. Using automatic rebuilding is highly recommended, so much so that I'm not going to explain what you have to do if you don't use it.</P>
<DL style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" compact>
<DT><TT>`configure'</TT></DT>
<DD><A name=IDX24></A>This is the configure script which will be run when building the package. This is generated by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`autoconf'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>from<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure.in'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`aclocal.m4'</TT>. This is a shell script.</DD>
<DT><TT>`Makefile.in'</TT></DT>
<DD><A name=IDX25></A>This is the file which the configure script will turn into the<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>at build time. This file is generated by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`automake'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>from<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile.am'</TT>. If you aren't using automake, you must write this file yourself. This file is pretty much a normal<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile'</TT>, with some configure substitutions for certain variables.</DD>
<DT><TT>`aclocal.m4'</TT></DT>
<DD><A name=IDX26></A>This file is created by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`aclocal'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>program, based on the contents of<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure.in'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`acinclude.m4'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>(or, as noted in the description of<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`acinclude.m4'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>above, on the contents of an<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`m4'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>subdirectory). This file contains definitions of autoconf macros which<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`autoconf'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>will use when generating the file<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure'</TT>. These autoconf macros may be defined by you in<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`acinclude.m4'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>or they may be defined by other packages such as automake, libtool or gettext. If you aren't using automake, you will normally write this file yourself; in that case, if<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure.in'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>uses only standard autoconf macros, this file will not be needed at all.</DD>
<DT><TT>`config.in'</TT></DT>
<DD><A name=IDX27></A><A name=IDX28></A>This file is created by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`autoheader'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>based on<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`acconfig.h'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure.in'</TT>. At build time, the configure script will define some of the macros in it to create<TT>`config.h'</TT>, which may then be included by your program. This permits your C code to use preprocessor conditionals to change its behaviour based on the characteristics of the host system. This file may also be called<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`config.h.in'</TT>.</DD>
<DT><TT>`stamp.h-in'</TT></DT>
<DD><A name=IDX29></A>This rather uninteresting file, which I omitted from the picture, is generated by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`automake'</SAMP>. It always contains the string<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`timestamp'</SAMP>. It is used as a timestamp file indicating whether<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`config.in'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>is up to date. Using a timestamp file means that<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`config.in'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be marked as up to date without actually changing its modification time. This is useful since<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`config.in'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>depends upon<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure.in'</TT>, but it is easy to change<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure.in'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>in a way which does not affect<TT>`config.in'</TT>.</DD></DL>
<H2 style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC21" name=SEC21>Build Files</A></H2>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">This section describes the files which are created at configure and build time. These are the files which somebody who builds the package will see.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Of course, the developer will also build the package. The distinction between developer files and build files is not that the developer does not see the build files, but that somebody who only builds the package does not have to worry about the developer files.</P>
<H3 style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC22" name=SEC22>Build Files Picture</A></H3>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Here is a picture of the files which will be created at build time.<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`config.status'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>is both a created file and a shell script which is run to create other files, and the picture attempts to show that.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><IMG src="http://www.airs.com/ian/configure/configbuild.jpg"></P>
<H3 style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC23" name=SEC23>Build Files Description</A></H3>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">This is a description of the files which are created at build time.</P>
<DL style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" compact>
<DT><TT>`config.status'</TT></DT>
<DD><A name=IDX30></A>The first step in building a package is to run the<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>script. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>script will create the file<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`config.status'</TT>, which is itself a shell script. When you first run<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure'</TT>, it will automatically run<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`config.status'</TT>. An<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>derived from an automake generated<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile.in'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>will contain rules to automatically run<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`config.status'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>again when necessary to recreate certain files if their inputs change.</DD>
<DT><TT>`Makefile'</TT></DT>
<DD><A name=IDX31></A>This is the file which make will read to build the program. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`config.status'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>script will transform<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile.in'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>into<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile'</TT>.</DD>
<DT><TT>`config.h'</TT></DT>
<DD><A name=IDX32></A>This file defines C preprocessor macros which C code can use to adjust its behaviour on different systems. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`config.status'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>script will transform<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`config.in'</TT>into<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`config.h'</TT>.</DD>
<DT><TT>`config.cache'</TT></DT>
<DD><A name=IDX33></A>This file did not fit neatly into the picture, and I omitted it. It is used by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>script to cache results between runs. This can be an important speedup. If you modify<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure.in'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>in such a way that the results of old tests should change (perhaps you have added a new library to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`LDFLAGS'</SAMP>), then you will have to remove<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`config.cache'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>to force the tests to be rerun. The autoconf manual explains how to set up a site specific cache file. This can speed up running<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>scripts on your system.</DD>
<DT><TT>`stamp.h'</TT></DT>
<DD><A name=IDX34></A>This file, which I omitted from the picture, is similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`stamp-h.in'</TT>. It is used as a timestamp file indicating whether<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`config.h'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>is up to date. This is useful since<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`config.h'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>depends upon<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`config.status'</TT>, but it is easy for<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`config.status'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>to change in a way which does not affect<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`config.h'</TT>.</DD></DL>
<H2 style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC24" name=SEC24>Support Files</A></H2>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The GNU configure and build system requires several support files to be included with your distribution. You do not normally need to concern yourself with these. If you are using the Cygnus tree, most are already present. Otherwise, they will be installed with your source by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`automake'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>(with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--add-missing'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option) and<SAMP>`libtoolize'</SAMP>.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">You don't have to put the support files in the top level directory. You can put them in a subdirectory, and use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AC_CONFIG_AUX_DIR'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>macro in<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure.in'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>to tell<SAMP>`automake'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>script where they are.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">In this section, I describe the support files, so that you can know what they are and why they are there.</P>
<DL style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" compact>
<DT><TT>`ABOUT-NLS'</TT></DT>
<DD>Added by automake if you are using gettext. This is a documentation file about the gettext project.</DD>
<DT><TT>`ansi2knr.c'</TT></DT>
<DD>Used by an automake generated<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>if you put<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`ansi2knr'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AUTOMAKE_OPTIONS'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile.am'</TT>. This permits compiling ANSI C code with a K&amp;R C compiler.</DD>
<DT><TT>`ansi2knr.1'</TT></DT>
<DD>The man page which goes with<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`ansi2knr.c'</TT>.</DD>
<DT><TT>`config.guess'</TT></DT>
<DD>A shell script which determines the configuration name for the system on which it is run.</DD>
<DT><TT>`config.sub'</TT></DT>
<DD>A shell script which canonicalizes a configuration name entered by a user.</DD>
<DT><TT>`elisp-comp'</TT></DT>
<DD>Used to compile Emacs LISP files.</DD>
<DT><TT>`install-sh'</TT></DT>
<DD>A shell script which installs a program. This is used if the configure script can not find an install binary.</DD>
<DT><TT>`ltconfig'</TT></DT>
<DD>Used by libtool. This is a shell script which configures libtool for the particular system on which it is used.</DD>
<DT><TT>`ltmain.sh'</TT></DT>
<DD>Used by libtool. This is the actual libtool script which is used, after it is configured by<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`ltconfig'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>to build a library.</DD>
<DT><TT>`mdate-sh'</TT></DT>
<DD>A shell script used by an automake generated<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>to pretty print the modification time of a file. This is used to maintain version numbers for texinfo files.</DD>
<DT><TT>`missing'</TT></DT>
<DD>A shell script used if some tool is missing entirely. This is used by an automake generated<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>to avoid certain sorts of timestamp problems.</DD>
<DT><TT>`mkinstalldirs'</TT></DT>
<DD>A shell script which creates a directory, including all parent directories. This is used by an automake generated<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>during installation.</DD>
<DT><TT>`texinfo.tex'</TT></DT>
<DD>Required if you have any texinfo files. This is used when converting Texinfo files into DVI using<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`texi2dvi'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and TeX.</DD>
<DT><TT>`ylwrap'</TT></DT>
<DD>A shell script used by an automake generated<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>to run programs like<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`bison'</SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`yacc'</SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`flex'</SAMP>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`lex'</SAMP>. These programs default to producing output files with a fixed name, and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`ylwrap'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>script runs them in a subdirectory to avoid file name conflicts when using a parallel make program.</DD></DL>