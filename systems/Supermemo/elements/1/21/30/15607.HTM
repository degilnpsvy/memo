<H1 style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC28">Cross Compilation Tools</A></H1>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A name=IDX43></A></P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The GNU configure and build system can be used to build<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>cross compilation</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>tools. A cross compilation tool is a tool which runs on one system and produces code which runs on another system.</P>
<H2 style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC29" name=SEC29>Cross Compilation Concepts</A></H2>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A name=IDX44></A>A compiler which produces programs which run on a different system is a cross compilation compiler, or simply a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>cross compiler</EM>. Similarly, we speak of cross assemblers, cross linkers, etc.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">In the normal case, a compiler produces code which runs on the same system as the one on which the compiler runs. When it is necessary to distinguish this case from the cross compilation case, such a compiler is called a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>native compiler</EM>. Similarly, we speak of native assemblers, etc.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Although the debugger is not strictly speaking a compilation tool, it is nevertheless meaningful to speak of a cross debugger: a debugger which is used to debug code which runs on another system. Everything that is said below about configuring cross compilation tools applies to the debugger as well.</P>
<H2 style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC30" name=SEC30>Host and Target</A></H2>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A name=IDX45></A><A name=IDX46></A></P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">When building cross compilation tools, there are two different systems involved: the system on which the tools will run, and the system for which the tools generate code.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The system on which the tools will run is called the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>host</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>system.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The system for which the tools generate code is called the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>target</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>system.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">For example, suppose you have a compiler which runs on a GNU/Linux system and generates ELF programs for a MIPS embedded system. In this case the GNU/Linux system is the host, and the MIPS ELF system is the target. Such a compiler could be called a GNU/Linux cross MIPS ELF compiler, or, equivalently, a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`i386-linux-gnu'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>cross<SAMP>`mips-elf'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>compiler.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Naturally, most programs are not cross compilation tools. For those programs, it does not make sense to speak of a target. It only makes sense to speak of a target for tools like<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`gcc'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`binutils'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>which actually produce running code. For example, it does not make sense to speak of the target of a tool like<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`bison'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SAMP>`make'</SAMP>.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Most cross compilation tools can also serve as native tools. For a native compilation tool, it is still meaningful to speak of a target. For a native tool, the target is the same as the host. For example, for a GNU/Linux native compiler, the host is GNU/Linux, and the target is also GNU/Linux.</P>
<H2 style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC31" name=SEC31>Using the Host Type</A></H2>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">In almost all cases the host system is the system on which you run the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`configure'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>script, and on which you build the tools (for the case when they differ, see section<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.airs.com/ian/configure/configure_6.html#SEC39">Canadian Cross</A>).</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A name=IDX47></A>If your configure script needs to know the configuration name of the host system, and the package is not a cross compilation tool and therefore does not have a target, put<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AC_CANONICAL_HOST'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure.in'</TT>. This macro will arrange to define a few shell variables when the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`configure'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>script is run.</P>
<DL style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" compact>
<DT><SAMP>`host'</SAMP></DT>
<DD>The canonical configuration name of the host. This will normally be determined by running the<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`config.guess'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>shell script, although the user is permitted to override this by using an explicit<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--host'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option.</DD>
<DT><SAMP>`host_alias'</SAMP></DT>
<DD>In the unusual case that the user used an explicit<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--host'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option, this will be the argument to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--host'</SAMP>. In the normal case, this will be the same as the<SAMP>`host'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>variable.</DD>
<DT><SAMP>`host_cpu'</SAMP></DT>
<DD></DD>
<DT><SAMP>`host_vendor'</SAMP></DT>
<DD></DD>
<DT><SAMP>`host_os'</SAMP></DT>
<DD>The first three parts of the canonical configuration name.</DD></DL>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The shell variables may be used by putting shell code in<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure.in'</TT>. For an example, see section<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.airs.com/ian/configure/configure_4.html#SEC27">Using Configuration Names</A>.</P>
<H2 style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC32" name=SEC32>Specifying the Target</A></H2>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">By default, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`configure'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>script will assume that the target is the same as the host. This is the more common case; for example, it leads to a native compiler rather than a cross compiler.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A name=IDX48></A><A name=IDX49></A><A name=IDX50></A>If you want to build a cross compilation tool, you must specify the target explicitly by using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--target'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option when you run<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`configure'</SAMP>. The argument to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--target'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the configuration name of the system for which you wish to generate code. See section<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.airs.com/ian/configure/configure_4.html#SEC25">Configuration Names</A>.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">For example, to build tools which generate code for a MIPS ELF embedded system, you would use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--target mips-elf'</SAMP>.</P>
<H2 style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC33" name=SEC33>Using the Target Type</A></H2>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A name=IDX51></A>When writing<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure.in'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>for a cross compilation tool, you will need to use information about the target. To do this, put<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AC_CANONICAL_SYSTEM'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure.in'</TT>.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><SAMP>`AC_CANONICAL_SYSTEM'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>will look for a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--target'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option and canonicalize it using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`config.sub'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>shell script. It will also run<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AC_CANONICAL_HOST'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see section<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.airs.com/ian/configure/configure_5.html#SEC31">Using the Host Type</A>).</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The target type will be recorded in the following shell variables. Note that the host versions of these variables will also be defined by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AC_CANONICAL_HOST'</SAMP>.</P>
<DL style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px" compact>
<DT><SAMP>`target'</SAMP></DT>
<DD>The canonical configuration name of the target.</DD>
<DT><SAMP>`target_alias'</SAMP></DT>
<DD>The argument to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--target'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option. If the user did not specify a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--target'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option, this will be the same as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`host_alias'</SAMP>.</DD>
<DT><SAMP>`target_cpu'</SAMP></DT>
<DD></DD>
<DT><SAMP>`target_vendor'</SAMP></DT>
<DD></DD>
<DT><SAMP>`target_os'</SAMP></DT>
<DD>The first three parts of the canonical target configuration name.</DD></DL>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Note that if<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`host'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`target'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>are the same string, you can assume a native configuration. If they are different, you can assume a cross configuration.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">It is arguably possible for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`host'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`target'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to represent the same system, but for the strings to not be identical. For example, if<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`config.guess'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`sparc-sun-sunos4.1.4'</SAMP>, and somebody configures with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--target sparc-sun-sunos4.1'</SAMP>, then the slight differences between the two versions of SunOS may be unimportant for your tool. However, in the general case it can be quite difficult to determine whether the differences between two configuration names are significant or not. Therefore, by convention, if the user specifies a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--target'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option without specifying a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--host'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option, it is assumed that the user wants to configure a cross compilation tool.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The variables<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`target'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`target_alias'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be handled differently.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">In general, whenever the user may actually see a string,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`target_alias'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be used. This includes anything which may appear in the file system, such as a directory name or part of a tool name. It also includes any tool output, unless it is clearly labelled as the canonical target configuration name. This permits the user to use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--target'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option to specify how the tool will appear to the outside world.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">On the other hand, when checking for characteristics of the target system,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`target'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be used. This is because a wide variety of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--target'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options may map into the same canonical configuration name. You should not attempt to duplicate the canonicalization done by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`config.sub'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>in your own code.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">By convention, cross tools are installed with a prefix of the argument used with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--target'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option, also known as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`target_alias'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see section<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.airs.com/ian/configure/configure_5.html#SEC33">Using the Target Type</A>). If the user does not use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--target'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option, and thus is building a native tool, no prefix is used.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">For example, if gcc is configured with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--target mips-elf'</SAMP>, then the installed binary will be named<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`mips-elf-gcc'</SAMP>. If gcc is configured without a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--target'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option, then the installed binary will be named<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`gcc'</SAMP>.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The autoconf macro<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AC_ARG_PROGRAM'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>will handle this for you. If you are using automake, no more need be done; the programs will automatically be installed with the correct prefixes. Otherwise, see the autoconf documentation for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AC_ARG_PROGRAM'</SAMP>.</P>
<H2 style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC34" name=SEC34>Cross Tools in the Cygnus Tree</A></H2>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The Cygnus tree is used for various packages including gdb, the GNU binutils, and egcs. It is also, of course, used for Cygnus releases.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">In the Cygnus tree, the top level<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>script uses the old Cygnus configure system, not autoconf. The top level<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile.in'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>is written to build packages based on what is in the source tree, and supports building a large number of tools in a single<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`configure'</SAMP>/<SAMP>`make'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>step.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The Cygnus tree may be configured with a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--target'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--target'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option applies recursively to every subdirectory, and permits building an entire set of cross tools at once.</P>
<H3 style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC35" name=SEC35>Host and Target Libraries</A></H3>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The Cygnus tree distinguishes host libraries from target libraries.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Host libraries are built with the compiler used to build the programs which run on the host, which is called the host compiler. This includes libraries such as<SAMP>`bfd'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`tcl'</SAMP>. These libraries are built with the host compiler, and are linked into programs like the binutils or gcc which run on the host.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Target libraries are built with the target compiler. If gcc is present in the source tree, then the target compiler is the gcc that is built using the host compiler. Target libraries are libraries such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`newlib'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`libstdc++'</SAMP>. These libraries are not linked into the host programs, but are instead made available for use with programs built with the target compiler.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">For the rest of this section, assume that gcc is present in the source tree, so that it will be used to build the target libraries.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">There is a complication here. The configure process needs to know which compiler you are going to use to build a tool; otherwise, the feature tests will not work correctly. The Cygnus tree handles this by not configuring the target libraries until the target compiler is built. In order to permit everything to build using a single<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`configure'</SAMP>/<SAMP>`make'</SAMP>, the configuration of the target libraries is actually triggered during the make step.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">When the target libraries are configured, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--target'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is not used. Instead, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--host'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is used with the argument of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--target'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option for the overall configuration. If no<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--target'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option was used for the overall configuration, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--host'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option will be passed with the output of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`config.guess'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>shell script. Any<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--build'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is passed down unchanged.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">This translation of configuration options is done because since the target libraries are compiled with the target compiler, they are being built in order to run on the target of the overall configuration. By the definition of host, this means that their host system is the same as the target system of the overall configuration.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The same process is used for both a native configuration and a cross configuration. Even when using a native configuration, the target libraries will be configured and built using the newly built compiler. This is particularly important for the C++ libraries, since there is no reason to assume that the C++ compiler used to build the host tools (if there even is one) uses the same ABI as the g++ compiler which will be used to build the target libraries.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">There is one difference between a native configuration and a cross configuration. In a native configuration, the target libraries are normally configured and built as siblings of the host tools. In a cross configuration, the target libraries are normally built in a subdirectory whose name is the argument to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--target'</SAMP>. This is mainly for historical reasons.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">To summarize, running<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`configure'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the Cygnus tree configures all the host libraries and tools, but does not configure any of the target libraries. Running<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`make'</SAMP>then does the following steps:</P>
<UL style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<LI>Build the host libraries.</LI>
<LI>Build the host programs, including gcc. Note that we call gcc both a host program (since it runs on the host) and a target compiler (since it generates code for the target).</LI>
<LI>Using the newly built target compiler, configure the target libraries.</LI>
<LI>Build the target libraries.</LI></UL>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The steps need not be done in precisely this order, since they are actually controlled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>targets.</P>
<H3 style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC36" name=SEC36>Target Library Configure Scripts</A></H3>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">There are a few things you must know in order to write a configure script for a target library. This is just a quick sketch, and beginners shouldn't worry if they don't follow everything here.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The target libraries are configured and built using a newly built target compiler. There may not be any startup files or libraries for this target compiler. In fact, those files will probably be built as part of some target library, which naturally means that they will not exist when your target library is configured.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">This means that the configure script for a target library may not use any test which requires doing a link. This unfortunately includes many useful autoconf macros, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AC_CHECK_FUNCS'</SAMP>. autoconf macros which do a compile but not a link, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AC_CHECK_HEADERS'</SAMP>, may be used.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">This is a severe restriction, but normally not a fatal one, as target libraries can often assume the presence of other target libraries, and thus know which functions will be available.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">As of this writing, the autoconf macro<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AC_PROG_CC'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>does a link to make sure that the compiler works. This may fail in a target library, so target libraries must use a different set of macros to locate the compiler. See the<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure.in'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>file in a directory like<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`libiberty'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`libgloss'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>for an example.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">As noted in the previous section, target libraries are sometimes built in directories which are siblings to the host tools, and are sometimes built in a subdirectory. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--with-target-subdir'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>configure option will be passed when the library is configured. Its value will be an empty string if the target library is a sibling. Its value will be the name of the subdirectory if the target library is in a subdirectory.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">If the overall build is not a native build (i.e., the overall configure used the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--target'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option), then the library will be configured with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--with-cross-host'</SAMP>option. The value of this option will be the host system of the overall build. Recall that the host system of the library will be the target of the overall build. If the overall build is a native build, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--with-cross-host'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option will not be used.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">A library which can be built both standalone and as a target library may want to install itself into different directories depending upon the case. When built standalone, or when built native, the library should be installed in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`$(libdir)'</SAMP>. When built as a target library which is not native, the library should be installed in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`$(tooldir)/lib'</SAMP>. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--with-cross-host'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option may be used to distinguish these cases.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">This same test of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--with-cross-host'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be used to see whether it is OK to use link tests in the configure script. If the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--with-cross-host'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is not used, then the library is being built either standalone or native, and a link should work.</P>
<H3 style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC37" name=SEC37>Make Targets in Cygnus Tree</A></H3>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The top level<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the Cygnus tree defines targets for every known subdirectory.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">For every subdirectory<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dir</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>which holds a host library or program, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>target<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`all-<VAR>dir</VAR>'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>will build that library or program.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">There are dependencies among host tools. For example, building gcc requires first building gas, because the gcc build process invokes the target assembler. These dependencies are reflected in the top level<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile'</TT>.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">For every subdirectory<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dir</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>which holds a target library, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>target<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`configure-target-<VAR>dir</VAR>'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>will configure that library. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>target<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`all-target-<VAR>dir</VAR>'</SAMP>will build that library.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Every<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`configure-target-<VAR>dir</VAR>'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>target depends upon<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`all-gcc'</SAMP>, since gcc, the target compiler, is required to configure the tool. Every<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`all-target-<VAR>dir</VAR>'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>target depends upon the corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`configure-target-<VAR>dir</VAR>'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>target.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">There are several other targets which may be of interest for each directory:<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`install-<VAR>dir</VAR>'</SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`clean-<VAR>dir</VAR>'</SAMP>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`check-<VAR>dir</VAR>'</SAMP>. There are also corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`target'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>versions of these for the target libraries , such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`install-target-<VAR>dir</VAR>'</SAMP>.</P>
<H3 style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC38" name=SEC38>Target libiberty</A></H3>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`libiberty'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>subdirectory is currently a special case, in that it is the only directory which is built both using the host compiler and using the target compiler.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">This is because the files in<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`libiberty'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>are used when building the host tools, and they are also incorporated into the<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`libstdc++'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>target library as support code.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">This duality does not pose any particular difficulties. It means that there are targets for both<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`all-libiberty'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`all-target-libiberty'</SAMP>.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">In a native configuration, when target libraries are not built in a subdirectory, the same objects are normally used as both the host build and the target build. This is normally OK, since libiberty contains only C code, and in a native configuration the results of the host compiler and the target compiler are normally interoperable.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Irix 6 is again an exception here, since the SGI native compiler defaults to using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`O32'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>ABI, and gcc defaults to using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`N32'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>ABI. On Irix 6, the target libraries are built in a subdirectory even for a native configuration, avoiding this problem.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">There are currently no other libraries built for both the host and the target, but there is no conceptual problem with adding more.