<H1 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC1">Introduction</A></H1>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This document describes the GNU configure and build systems. It describes how autoconf, automake, libtool, and make fit together. It also includes a discussion of the older Cygnus configure system.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This document does not describe in detail how to use each of the tools; see the respective manuals for that. Instead, it describes which files the developer must write, which files are machine generated and how they are generated, and where certain common problems should be addressed.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This document draws on several sources, including<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.delorie.com/gnu/docs/autoconf/autoconf_toc.html">the autoconf manual</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>by David MacKenzie,<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.delorie.com/gnu/docs/automake/automake_toc.html">the automake manual</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>by David MacKenzie and Tom Tromey,<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.delorie.com/gnu/docs/libtool/libtool_toc.html">the libtool manual</A>by Gordon Matzigkeit, and the Cygnus configure manual by K. Richard Pixley.</P>
<H2 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC2" name=SEC2>Goals</A></H2>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=IDX1></A></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The GNU configure and build system has two main goals.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The first is to simplify the development of portable programs. The system permits the developer to concentrate on writing the program, simplifying many details of portability across Unix and even Windows systems, and permitting the developer to describe how to build the program using simple rules rather than complex Makefiles.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The second is to simplify the building of programs distributed as source code. All programs are built using a simple, standardized, two step process. The program builder need not install any special tools in order to build the program.</P>
<H2 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC3" name=SEC3><FONT class=extract>Tools</FONT></A></H2>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>The GNU configure and build system is comprised of several different tools. Program developers must build and install all of these tools.</FONT></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>People who just want to build programs from distributed sources normally do not need any special tools beyond a Unix shell, a make program, and a C compiler.</FONT></P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DT><FONT class=extract>autoconf </FONT>
<DD><FONT class=extract>provides a general portability framework, based on testing the features of the host system at build time. </FONT>
<DT><FONT class=extract>automake </FONT>
<DD><FONT class=extract>a system for describing how to build a program, permitting the developer to write a simplified<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile'</TT>. </FONT>
<DT><FONT class=extract>libtool </FONT>
<DD><FONT class=extract>a standardized approach to building shared libraries. </FONT>
<DT><FONT class=extract>gettext </FONT>
<DD><FONT class=extract>provides a framework for translation of text messages into other languages; not really discussed in this document. </FONT>
<DT><FONT class=extract>m4 </FONT>
<DD><FONT class=extract>autoconf requires the GNU version of m4; the standard Unix m4 does not suffice. </FONT>
<DT><FONT class=extract>perl </FONT>
<DD><FONT class=extract>automake requires perl.</FONT></DD></DL>
<H2 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC4" name=SEC4>History</A></H2>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=IDX2></A></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This is a very brief and probably inaccurate history.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">As the number of Unix variants increased during the 1980s, it became harder to write programs which could run on all variants. While it was often possible to use<CODE>#ifdef</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to identify particular systems, developers frequently did not have access to every system, and the characteristics of some systems changed from version to version.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">By 1992, at least three different approaches had been developed:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>The Metaconfig program, by Larry Wall, Harlan Stenn, and Raphael Manfredi. 
<LI>The Cygnus configure script, by K. Richard Pixley, and the gcc configure script, by Richard Stallman. These use essentially the same approach, and the developers communicated regularly. 
<LI>The autoconf program, by David MacKenzie.</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The Metaconfig program is still used for Perl and a few other programs. It is part of the Dist package. I do not know if it is being developed.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In 1994, David MacKenzie and others modified autoconf to incorporate all the features of Cygnus configure. Since then, there has been a slow but steady conversion of GNU programs from Cygnus configure to autoconf. gcc has been converted, eliminating the gcc configure script.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">GNU autoconf was regularly maintained until late 1996. As of this writing in June, 1998, it has no public maintainer.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Most programs are built using the make program, which requires the developer to write Makefiles describing how to build the programs. Since most programs are built in pretty much the same way, this led to a lot of duplication.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The X Window system is built using the imake tool, which uses a database of rules to eliminate the duplication. However, building a tool which was developed using imake requires that the builder have imake installed, violating one of the goals of the GNU system.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The new BSD make provides a standard library of Makefile fragments, which permits developers to write very simple Makefiles. However, this requires that the builder install the new BSD make program.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In 1994, David MacKenzie wrote the first version of automake, which permitted writing a simple build description which was converted into a Makefile which could be used by the standard make program. In 1995, Tom Tromey completely rewrote automake in Perl, and he continues to enhance it.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Various free packages built libraries, and by around 1995 several included support to build shared libraries on various platforms. However, there was no consistent approach. In early 1996, Gordon Matzigkeit began working on libtool, which provided a standardized approach to building shared libraries. This was integrated into automake from the start.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The development of automake and libtool was driven by the GNITS project, a group of GNU maintainers who designed standardized tools to help meet the GNU coding standards.</P>
<H2 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC5" name=SEC5>Building</A></H2>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Most readers of this document should already know how to build a tool by running<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`configure'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`make'</SAMP>. This section may serve as a quick introduction or reminder.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Building a tool is normally as simple as running<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`configure'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>followed by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`make'</SAMP>. You should normally run<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`configure'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>from an empty directory, using some path to refer to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`configure'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>script in the source directory. The directory in which you run<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`configure'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>object directory</EM>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In order to use a object directory which is different from the source directory, you must be using the GNU version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`make'</SAMP>, which has the required<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`VPATH'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>support. Despite this restriction, using a different object directory is highly recommended:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>It keeps the files generated during the build from cluttering up your sources. 
<LI>It permits you to remove the built files by simply removing the entire build directory. 
<LI>It permits you to build from the same sources with several sets of configure options simultaneously.</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If you don't have GNU<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`make'</SAMP>, you will have to run<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`configure'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the source directory. All GNU packages should support this; in particular, GNU packages should not assume the presence of GNU<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`make'</SAMP>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">After running<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`configure'</SAMP>, you can build the tools by running<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`make'</SAMP>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To install the tools, run<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`make install'</SAMP>. Installing the tools will copy the programs and any required support files to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>installation directory</EM>. The location of the installation directory is controlled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`configure'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options, as described below.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In the Cygnus tree at present, the info files are built and installed as a separate step. To build them, run<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`make info'</SAMP>. To install them, run<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`make install-info'</SAMP>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">All<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`configure'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>scripts support a wide variety of options. The most interesting ones are<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--with'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--enable'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options which are generally specific to particular tools. You can usually use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--help'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option to get a list of interesting options for a particular configure script.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The only generic options you are likely to use are the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--prefix'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--exec-prefix'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options. These options are used to specify the installation directory.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The directory named by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--prefix'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option will hold machine independent files such as info files.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The directory named by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--exec-prefix'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option, which is normally a subdirectory of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--prefix'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>directory, will hold machine dependent files such as executables.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The default for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--prefix'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`/usr/local'</TT>. The default for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--exec-prefix'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the value used for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--prefix'</SAMP>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The convention used in Cygnus releases is to use a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--prefix'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option of<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`/usr/cygnus/<VAR>release</VAR>'</TT>, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>release</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the name of the release, and to use a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--exec-prefix'</SAMP>option of<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`/usr/cygnus/<VAR>release</VAR>/H-<VAR>host</VAR>'</TT>, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>host</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the configuration name of the host system (see section<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.airs.com/ian/configure/configure_4.html#SEC25">Configuration Names</A>).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Do not use either the source or the object directory as the installation directory. That will just lead to confusion.