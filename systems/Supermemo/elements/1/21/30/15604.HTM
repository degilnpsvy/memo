<H1 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC6">Getting Started</A></H1>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To start using the GNU configure and build system with your software package, you must write three files, and you must run some tools to manually generate additional files.</P>
<H2 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC7" name=SEC7>Write configure.in</A></H2>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=IDX3></A></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">You must first write the file<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure.in'</TT>. This is an autoconf input file, and the autoconf manual describes in detail what this file should look like.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">You will write tests in your<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure.in'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>file to check for conditions that may change from one system to another, such as the presence of particular header files or functions.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For example, not all systems support the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`gettimeofday'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>function. If you want to use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`gettimeofday'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>function when it is available, and to use some other function when it is not, you would check for this by putting<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AC_CHECK_FUNCS(gettimeofday)'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure.in'</TT>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When the configure script is run at build time, this will arrange to define the preprocessor macro<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`HAVE_GETTIMEOFDAY'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the value 1 if the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`gettimeofday'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>function is available, and to not define the macro at all if the function is not available. Your code can then use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`#ifdef'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to test whether it is safe to call<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`gettimeofday'</SAMP>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If you have an existing body of code, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`autoscan'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>program may help identify potential portability problems, and hence configure tests that you will want to use. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.delorie.com/gnu/docs/autoconf/autoconf_4.html">the autoscan documentation</A>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Another handy tool for an existing body of code is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`ifnames'</SAMP>. This will show you all the preprocessor conditionals that the code already uses. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.delorie.com/gnu/docs/autoconf/autoconf_5.html">the ifnames documentation</A>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Besides the portability tests which are specific to your particular package, every<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure.in'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>file should contain the following macros.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DT><SAMP>`AC_INIT'</SAMP> 
<DD><A name=IDX4></A>This macro takes a single argument, which is the name of a file in your package. For example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AC_INIT(foo.c)'</SAMP>. 
<DT><SAMP>`AC_PREREQ(<VAR>VERSION</VAR>)'</SAMP> 
<DD><A name=IDX5></A>This macro is optional. It may be used to indicate the version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`autoconf'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>that you are using. This will prevent users from running an earlier version of<SAMP>`autoconf'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and perhaps getting an invalid<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>script. For example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AC_PREREQ(2.12)'</SAMP>. 
<DT><SAMP>`AM_INIT_AUTOMAKE'</SAMP> 
<DD><A name=IDX6></A>This macro takes two arguments: the name of the package, and a version number. For example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AM_INIT_AUTOMAKE(foo, 1.0)'</SAMP>. (This macro is not needed if you are not using automake). 
<DT><SAMP>`AM_CONFIG_HEADER'</SAMP> 
<DD><A name=IDX7></A>This macro names the header file which will hold the preprocessor macro definitions at run time. Normally this should be<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`config.h'</TT>. Your sources would then use<SAMP>`#include "config.h"'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to include it. This macro may optionally name the input file for that header file; by default, this is<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`config.h.in'</TT>, but that file name works poorly on DOS filesystems. Therefore, it is often better to name it explicitly as<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`config.in'</TT>. This is what you should normally put in<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure.in'</TT>:<PRE>AM_CONFIG_HEADER(config.h:config.in)
</PRE><A name=IDX8></A>(If you are not using automake, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AC_CONFIG_HEADER'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>rather than<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AM_CONFIG_HEADER'</SAMP>). 
<DT><SAMP>`AM_MAINTAINER_MODE'</SAMP> 
<DD><A name=IDX9></A>This macro always appears in Cygnus configure scripts. Other programs may or may not use it. If this macro is used, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--enable-maintainer-mode'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is required to enable automatic rebuilding of generated files used by the configure system. This of course requires that developers be aware of, and use, that option. If this macro is not used, then the generated files will always be rebuilt automatically. This will cause problems if the wrong versions of autoconf, automake, or others are in the builder's<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`PATH'</SAMP>. (If you are not using automake, you do not need to use this macro). 
<DT><SAMP>`AC_EXEEXT'</SAMP> 
<DD><A name=IDX10></A><A name=IDX11></A>Either this macro or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AM_EXEEXT'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>always appears in Cygnus configure files. Other programs may or may not use one of them. This macro looks for the executable suffix used on the host system. On Unix systems, this is the empty string. On Windows systems, this is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`.exe'</SAMP>. This macro directs automake to use the executable suffix as appropriate when creating programs. This macro does not take any arguments. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AC_EXEEXT'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>form is new, and is part of a Cygnus patch to autoconf to support compiling with Visual C++. Older programs use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AM_EXEEXT'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead. (Programs which do not use automake use neither<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AC_EXEEXT'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>nor<SAMP>`AM_EXEEXT'</SAMP>). 
<DT><SAMP>`AC_PROG_CC'</SAMP> 
<DD><A name=IDX12></A>If you are writing C code, you will normally want to use this macro. It locates the C compiler to use. It does not take any arguments. However, if this<TT>`configure.in'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>file is for a library which is to be compiled by a cross compiler which may not fully work, then you will not want to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AC_PROG_CC'</SAMP>. Instead, you will want to use a variant which does not call the macro<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AC_PROG_CC_WORKS'</SAMP>. Examples can be found in various<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure.in'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>files for libraries that are compiled with cross compilers, such as libiberty or libgloss. This is essentially a bug in autoconf, and there will probably be a better workaround at some point. 
<DT><SAMP>`AC_PROG_CXX'</SAMP> 
<DD><A name=IDX13></A>If you are writing C++ code, you will want to use this macro. It locates the C++ compiler to use. It does not take any arguments. The same cross compiler comments apply as for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AC_PROG_CC'</SAMP>. 
<DT><SAMP>`AM_PROG_LIBTOOL'</SAMP> 
<DD><A name=IDX14></A>If you want to build libraries, and you want to permit them to be shared, or you want to link against libraries which were built using libtool, then you will need this macro. This macro is required in order to use libtool.<SPAN class=Apple-converted-space>&nbsp;</SPAN><A name=IDX15></A>By default, this will cause all libraries to be built as shared libraries. To prevent this--to change the default--use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AM_DISABLE_SHARED'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>before<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AM_PROG_LIBTOOL'</SAMP>. The configure options<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--enable-shared'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--disable-shared'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be used to override the default at build time. 
<DT><SAMP>`AC_DEFINE(_GNU_SOURCE)'</SAMP> 
<DD><A name=IDX16></A>GNU packages should normally include this line before any other feature tests. This defines the macro<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`_GNU_SOURCE'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>when compiling, which directs the libc header files to provide the standard GNU system interfaces including all GNU extensions. If this macro is not defined, certain GNU extensions may not be available. 
<DT><SAMP>`AC_OUTPUT'</SAMP> 
<DD><A name=IDX17></A>This macro takes a list of file names which the configure process should produce. This is normally a list of one or more<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>files in different directories. If your package lives entirely in a single directory, you would use simply<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AC_OUTPUT(Makefile)'</SAMP>. If you also have, for example, a<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`lib'</TT>subdirectory, you would use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AC_OUTPUT(Makefile lib/Makefile)'</SAMP>.</DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If you want to use locally defined macros in your<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure.in'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>file, then you will need to write a<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`acinclude.m4'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>file which defines them (if not using automake, this file is called<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`aclocal.m4'</TT>). Alternatively, you can put separate macros in an<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`m4'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>subdirectory, and put<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`ACLOCAL_AMFLAGS = -I m4'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>in your<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile.am'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>file so that the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`aclocal'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>program will be able to find them.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The different macro prefixes indicate which tool defines the macro. Macros which start with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AC_'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>are part of autoconf. Macros which start with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AM_'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>are provided by automake or libtool.</P>
<H2 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC8" name=SEC8>Write Makefile.am</A></H2>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=IDX18></A></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">You must write the file<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile.am'</TT>. This is an automake input file, and the automake manual describes in detail what this file should look like.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The automake commands in<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile.am'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>mostly look like variable assignments in a<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile'</TT>. automake recognizes special variable names, and automatically add make rules to the output as needed.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">There will be one<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile.am'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>file for each directory in your package. For each directory with subdirectories, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile.am'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>file should contain the line</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">SUBDIRS = <VAR>dir</VAR> <VAR>dir</VAR> ...
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">where each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dir</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the name of a subdirectory.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For each<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile.am'</TT>, there should be a corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AC_OUTPUT'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>macro in<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure.in'</TT>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Every<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile.am'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>written at Cygnus should contain the line</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">AUTOMAKE_OPTIONS = cygnus
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This puts automake into Cygnus mode. See the automake manual for details.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">You may to include the version number of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`automake'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>that you are using on the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AUTOMAKE_OPTIONS'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>line. For example,</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">AUTOMAKE_OPTIONS = cygnus 1.3
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This will prevent users from running an earlier version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`automake'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and perhaps getting an invalid<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile.in'</TT>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If your package builds a program, then in the directory where that program is built you will normally want a line like</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">bin_PROGRAMS = <VAR>program</VAR>
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>program</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the name of the program. You will then want a line like</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><VAR>program</VAR>_SOURCES = <VAR>file</VAR> <VAR>file</VAR> ...
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">where each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the name of a source file to link into the program (e.g.,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`foo.c'</SAMP>).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If your package builds a library, and you do not want the library to ever be built as a shared library, then in the directory where that library is built you will normally want a line like</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">lib_LIBRARIES = lib<VAR>name</VAR>.a
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">where<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`lib<VAR>name</VAR>.a'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the name of the library. You will then want a line like</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">lib<VAR>name</VAR>_a_SOURCES = <VAR>file</VAR> <VAR>file</VAR> ...
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">where each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the name of a source file to add to the library.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If your package builds a library, and you want to permit building the library as a shared library, then in the directory where that library is built you will normally want a line like</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">lib_LTLIBRARIES = lib<VAR>name</VAR>.la
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The use of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`LTLIBRARIES'</SAMP>, and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`.la'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>extension, indicate a library to be built using libtool. As usual, you will then want a line like</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">lib<VAR>name</VAR>_la_SOURCES = <VAR>file</VAR> <VAR>file</VAR> ...
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The strings<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`bin'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`lib'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>that appear above in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`bin_PROGRAMS'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`lib_LIBRARIES'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>are not arbitrary. They refer to particular directories, which may be set by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--bindir'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--libdir'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options to<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure'</TT>. If those options are not used, the default values are based on the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--prefix'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--exec-prefix'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options to<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure'</TT>. It is possible to use other names if the program or library should be installed in some other directory.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile.am'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>file may also contain almost anything that may appear in a normal<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile'</TT>. automake also supports many other special variables, as well as conditionals.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">See the automake manual for more information.</P>
<H2 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC9" name=SEC9>Write acconfig.h</A></H2>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=IDX19></A></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If you are generating a portability header file, (i.e., you are using<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AM_CONFIG_HEADER'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure.in'</TT>), then you will have to write a<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`acconfig.h'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>file. It will have to contain the following lines.</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">/* Name of package.  */
#undef PACKAGE

/* Version of package.  */
#undef VERSION
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This requirement is really a bug in the system, and the requirement may be eliminated at some later date.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`acconfig.h'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>file will also similar comment and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`#undef'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>lines for any unusual macros in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure.in'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>file, including any macro which appears in a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AC_DEFINE'</SAMP>macro.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In particular, if you are writing a GNU package and therefore include<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AC_DEFINE(_GNU_SOURCE)'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure.in'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>as suggested above, you will need lines like this in<TT>`acconfig.h'</TT>:</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">/* Enable GNU extensions.  */
#undef _GNU_SOURCE
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Normally the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`autoheader'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>program will inform you of any such requirements by printing an error message when it is run. However, if you do anything particular odd in your<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure.in'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>file, you will have to make sure that the right entries appear in<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`acconfig.h'</TT>, since otherwise the results of the tests may not be available in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`config.h'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>file which your code will use.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">(Thee<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`PACKAGE'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`VERSION'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>lines are not required if you are not using automake, and in that case you may not need a<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`acconfig.h'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>file at all).</P>
<H2 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC10" name=SEC10>Generate files</A></H2>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Once you have written<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure.in'</TT>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile.am'</TT>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`acconfig.h'</TT>, and possibly<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`acinclude.m4'</TT>, you must use autoconf and automake programs to produce the first versions of the generated files. This is done by executing the following sequence of commands.</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">aclocal
autoconf
autoheader
automake
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`aclocal'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`automake'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>commands are part of the automake package, and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`autoconf'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`autoheader'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>commands are part of the autoconf package.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If you are using a<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`m4'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>subdirectory for your macros, you will need to use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`-I m4'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option when you run<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`aclocal'</SAMP>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If you are not using the Cygnus tree, use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`-a'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option when running<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`automake'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>command in order to copy the required support files into your source directory.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If you are using libtool, you must build and install the libtool package with the same<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--prefix'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--exec-prefix'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options as you used with the autoconf and automake packages. You must do this before running any of the above commands. If you are not using the Cygnus tree, you will need to run the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`libtoolize'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>program to copy the libtool support files into your directory.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Once you have managed to run these commands without getting any errors, you should create a new empty directory, and run the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`configure'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>script which will have been created by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`autoconf'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--enable-maintainer-mode'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option. This will give you a set of Makefiles which will include rules to automatically rebuild all the generated files.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">After doing that, whenever you have changed some of the input files and want to regenerated the other files, go to your object directory and run<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`make'</SAMP>. Doing this is more reliable than trying to rebuild the files manually, because there are complex order dependencies and it is easy to forget something.</P>
<H2 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC11" name=SEC11>Example</A></H2>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Let's consider a trivial example.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Suppose we want to write a simple version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`touch'</SAMP>. Our program, which we will call<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`poke'</SAMP>, will take a single file name argument, and use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`utime'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>system call to set the modification and access times of the file to the current time. We want this program to be highly portable.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">We'll first see what this looks like without using autoconf and automake, and then see what it looks like with them.</P>
<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC12" name=SEC12>First Try</A></H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here is our first try at<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`poke.c'</SAMP>. Note that we've written it without ANSI/ISO C prototypes, since we want it to be highly portable.</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">#include &lt;stdio.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;sys/types.h&gt;
#include &lt;utime.h&gt;

int
main (argc, argv)
     int argc;
     char **argv;
{
  if (argc != 2)
    {
      fprintf (stderr, "Usage: poke file\n");
      exit (1);
    }

  if (utime (argv[1], NULL) &lt; 0)
    {
      perror ("utime");
      exit (1);
    }

  exit (0);
}
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">We also write a simple<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile'</TT>.</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">CC = gcc
CFLAGS = -g -O2

all: poke

poke: poke.o
	$(CC) -o poke $(CFLAGS) $(LDFLAGS) poke.o
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">So far, so good.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Unfortunately, there are a few problems.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">On older Unix systems derived from BSD 4.3, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`utime'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>system call does not accept a second argument of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`NULL'</SAMP>. On those systems, we need to pass a pointer to<SAMP>`struct utimbuf'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>structure. Unfortunately, even older systems don't define that structure; on those systems, we need to pass an array of two<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`long'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>values.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The header file<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`stdlib.h'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>was invented by ANSI C, and older systems don't have a copy. We included it above to get a declaration of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`exit'</SAMP>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">We can find some of these portability problems by running<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`autoscan'</SAMP>, which will create a<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure.scan'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>file which we can use as a prototype for our<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure.in'</TT>file. I won't show the output, but it will notice the potential problems with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`utime'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`stdlib.h'</TT>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In our<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile'</TT>, we don't provide any way to install the program. This doesn't matter much for such a simple example, but a real program will need an<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`install'</SAMP>target. For that matter, we will also want a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`clean'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>target.</P>
<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC13" name=SEC13>Second Try</A></H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here is our second try at this program.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">We modify<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`poke.c'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>to use preprocessor macros to control what features are available. (I've cheated a bit by using the same macro names which autoconf will use).</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">#include &lt;stdio.h&gt;

#ifdef STDC_HEADERS
#include &lt;stdlib.h&gt;
#endif

#include &lt;sys/types.h&gt;

#ifdef HAVE_UTIME_H
#include &lt;utime.h&gt;
#endif

#ifndef HAVE_UTIME_NULL

#include &lt;time.h&gt;

#ifndef HAVE_STRUCT_UTIMBUF

struct utimbuf
{
  long actime;
  long modtime;
};

#endif

static int
utime_now (file)
     char *file;
{
  struct utimbuf now;

  now.actime = now.modtime = time (NULL);
  return utime (file, &amp;now);
}

#define utime(f, p) utime_now (f)

#endif /* HAVE_UTIME_NULL  */

int
main (argc, argv)
     int argc;
     char **argv;
{
  if (argc != 2)
    {
      fprintf (stderr, "Usage: poke file\n");
      exit (1);
    }

  if (utime (argv[1], NULL) &lt; 0)
    {
      perror ("utime");
      exit (1);
    }

  exit (0);
}
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here is the associated<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile'</TT>. We've added support for the preprocessor flags we use. We've also added<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`install'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`clean'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>targets.</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"># Set this to your installation directory.
bindir = /usr/local/bin

# Uncomment this if you have the standard ANSI/ISO C header files.
# STDC_HDRS = -DSTDC_HEADERS

# Uncomment this if you have utime.h.
# UTIME_H = -DHAVE_UTIME_H

# Uncomment this if utime (FILE, NULL) works on your system.
# UTIME_NULL = -DHAVE_UTIME_NULL

# Uncomment this if struct utimbuf is defined in utime.h.
# UTIMBUF = -DHAVE_STRUCT_UTIMBUF

CC = gcc
CFLAGS = -g -O2

ALL_CFLAGS = $(STDC_HDRS) $(UTIME_H) $(UTIME_NULL) $(UTIMBUF) $(CFLAGS)

all: poke

poke: poke.o
	$(CC) -o poke $(ALL_CFLAGS) $(LDFLAGS) poke.o

.c.o:
	$(CC) -c $(ALL_CFLAGS) poke.c

install: poke
	cp poke $(bindir)/poke

clean:
	rm poke poke.o
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Some problems with this approach should be clear.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Users who want to compile poke will have to know how<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`utime'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>works on their systems, so that they can uncomment the<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>correctly.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The installation is done using<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`cp'</SAMP>, but many systems have an<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`install'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>program which may be used, and which supports optional features such as stripping debugging information out of the installed binary.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The use of<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>variables like<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`CC'</SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`CFLAGS'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`LDFLAGS'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>follows the requirements of the GNU standards. This is convenient for all packages, since it reduces surprises for users. However, it is easy to get the details wrong, and wind up with a slightly nonstandard distribution.</P>
<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC14" name=SEC14>Third Try</A></H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For our third try at this program, we will write a<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure.in'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>script to discover the configuration features on the host system, rather than requiring the user to edit the<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile'</TT>. We will also write a<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile.am'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>rather than a<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile'</TT>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The only change to<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`poke.c'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>is to add a line at the start of the file:</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">#include "config.h"
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The new<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`configure.in'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>file is as follows.</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">AC_INIT(poke.c)
AM_INIT_AUTOMAKE(poke, 1.0)
AM_CONFIG_HEADER(config.h:config.in)
AC_PROG_CC
AC_HEADER_STDC
AC_CHECK_HEADERS(utime.h)
AC_EGREP_HEADER(utimbuf, utime.h, AC_DEFINE(HAVE_STRUCT_UTIMBUF))
AC_FUNC_UTIME_NULL
AC_OUTPUT(Makefile)
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The first four macros in this file, and the last one, were described above; see section<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.airs.com/ian/configure/configure_2.html#SEC7">Write configure.in</A>. If we omit these macros, then when we run<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`automake'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>we will get a reminder that we need them.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The other macros are standard autoconf macros.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DT><SAMP>`AC_HEADER_STDC'</SAMP> 
<DD>Check for standard C headers. 
<DT><SAMP>`AC_CHECK_HEADERS'</SAMP> 
<DD>Check whether a particular header file exists. 
<DT><SAMP>`AC_EGREP_HEADER'</SAMP> 
<DD>Check for a particular string in a particular header file, in this case checking for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`utimbuf'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`utime.h'</TT>. 
<DT><SAMP>`AC_FUNC_UTIME_NULL'</SAMP> 
<DD>Check whether<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`utime'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>accepts a NULL second argument to set the file change time to the current time.</DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">See the autoconf manual for a more complete description.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The new<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile.am'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>file is as follows. Note how simple this is compared to our earlier<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`Makefile'</TT>.</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">bin_PROGRAMS = poke

poke_SOURCES = poke.c
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This means that we should build a single program name<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`poke'</SAMP>. It should be installed in the binary directory, which we called<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`bindir'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>earlier. The program<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`poke'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is built from the source file<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`poke.c'</TT>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">We must also write a<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`acconfig.h'</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>file. Besides<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`PACKAGE'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`VERSION'</SAMP>, which must be mentioned for all packages which use automake, we must include<SAMP>`HAVE_STRUCT_UTIMBUF'</SAMP>, since we mentioned it in an<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`AC_DEFINE'</SAMP>.</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">/* Name of package.  */
#undef PACKAGE

/* Version of package.  */
#undef VERSION

/* Whether utime.h defines struct utimbuf.  */
#undef HAVE_STRUCT_UTIMBUF
</PRE>
<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A href="http://www.airs.com/ian/configure/configure_toc.html#TOC15" name=SEC15>Generate Files</A></H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">We must now generate the other files, using the following commands.</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">aclocal
autoconf
autoheader
automake
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When we run<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`autoheader'</SAMP>, it will remind us of any macros we forgot to add to<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`acconfig.h'</TT>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When we run<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`automake'</SAMP>, it will want to add some files to our distribution. It will add them automatically if we use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--add-missing'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">By default,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`automake'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>will run in GNU mode, which means that it will want us to create certain additional files; as of this writing, it will want<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`NEWS'</TT>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`README'</TT>,<TT>`AUTHORS'</TT>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT>`ChangeLog'</TT>, all of which are files which should appear in a standard GNU distribution. We can either add those files, or run<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`automake'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>`--foreign'</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Running these tools will generate the following files, all of which are described in the next chapter.</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI><TT>`aclocal.m4'</TT> 
<LI><TT>`configure'</TT> 
<LI><TT>`config.in'</TT> 
<LI><TT>`Makefile.in'</TT> 
<LI><TT>`stamp-h.in'</TT></LI></UL>