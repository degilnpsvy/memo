The Translation Table Manager (TTM)
<P>TTM initialization</P>
<P>TTM design background and information belongs here.<BR>TTM initialization<BR>Warning</P>
<P>This section is outdated.</P>
<P>Drivers wishing to support TTM must fill out a drm_bo_driver structure. The structure contains several fields with function pointers for initializing the TTM, allocating and freeing memory, waiting for command completion and fence synchronization, and memory migration. See the radeon_ttm.c file for an example of usage.</P>
<P>The ttm_global_reference structure is made up of several fields:</P>
<P>&nbsp;&nbsp; struct ttm_global_reference {<BR>&nbsp;&nbsp; &nbsp;enum ttm_global_types global_type;<BR>&nbsp;&nbsp; &nbsp;size_t size;<BR>&nbsp;&nbsp; &nbsp;void *object;<BR>&nbsp;&nbsp; &nbsp;int (*init) (struct ttm_global_reference *);<BR>&nbsp;&nbsp; &nbsp;void (*release) (struct ttm_global_reference *);<BR>&nbsp;&nbsp; };<BR>&nbsp;</P>
<P>There should be one global reference structure for your memory manager as a whole, and there will be others for each object created by the memory manager at runtime. Your global TTM should have a type of TTM_GLOBAL_TTM_MEM. The size field for the global object should be sizeof(struct ttm_mem_global), and the init and release hooks should point at your driver-specific init and release routines, which probably eventually call ttm_mem_global_init and ttm_mem_global_release, respectively.</P>
<P>Once your global TTM accounting structure is set up and initialized by calling ttm_global_item_ref() on it, you need to create a buffer object TTM to provide a pool for buffer object allocation by clients and the kernel itself. The type of this object should be TTM_GLOBAL_TTM_BO, and its size should be sizeof(struct ttm_bo_global). Again, driver-specific init and release functions may be provided, likely eventually calling ttm_bo_global_init() and ttm_bo_global_release(), respectively. Also, like the previous object, ttm_global_item_ref() is used to create an initial reference count for the TTM, which will call your initialization function.