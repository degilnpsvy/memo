Driver Information
<P>Driver Features<BR>Major, Minor and Patchlevel<BR>Name, Description and Date</P>
<P>Driver Features</P>
<P>Drivers inform the DRM core about their requirements and supported features by setting appropriate flags in the driver_features field. Since those flags influence the DRM core behaviour since registration time, most of them must be set to registering the drm_driver instance.</P>
<P>u32 driver_features;</P>
<P>Driver Feature Flags</P>
<P>DRIVER_USE_AGP</P>
<P>&nbsp;&nbsp;&nbsp; Driver uses AGP interface, the DRM core will manage AGP resources. <BR>DRIVER_REQUIRE_AGP</P>
<P>&nbsp;&nbsp;&nbsp; Driver needs AGP interface to function. AGP initialization failure will become a fatal error. <BR>DRIVER_PCI_DMA</P>
<P>&nbsp;&nbsp;&nbsp; Driver is capable of PCI DMA, mapping of PCI DMA buffers to userspace will be enabled. Deprecated. <BR>DRIVER_SG</P>
<P>&nbsp;&nbsp;&nbsp; Driver can perform scatter/gather DMA, allocation and mapping of scatter/gather buffers will be enabled. Deprecated. <BR>DRIVER_HAVE_DMA</P>
<P>&nbsp;&nbsp;&nbsp; Driver supports DMA, the userspace DMA API will be supported. Deprecated. <BR>DRIVER_HAVE_IRQ, DRIVER_IRQ_SHARED</P>
<P>&nbsp;&nbsp;&nbsp; DRIVER_HAVE_IRQ indicates whether the driver has an IRQ handler managed by the DRM Core. The core will support simple IRQ handler installation when the flag is set. The installation process is described in the section called &#8220;IRQ Registration&#8221;.</P>
<P>&nbsp;&nbsp;&nbsp; DRIVER_IRQ_SHARED indicates whether the device &amp; handler support shared IRQs (note that this is required of PCI drivers). <BR>DRIVER_GEM</P>
<P>&nbsp;&nbsp;&nbsp; Driver use the GEM memory manager. <BR>DRIVER_MODESET</P>
<P>&nbsp;&nbsp;&nbsp; Driver supports mode setting interfaces (KMS). <BR>DRIVER_PRIME</P>
<P>&nbsp;&nbsp;&nbsp; Driver implements DRM PRIME buffer sharing. <BR>DRIVER_RENDER</P>
<P>&nbsp;&nbsp;&nbsp; Driver supports dedicated render nodes. </P>
<P>Major, Minor and Patchlevel</P>
<P>int major;<BR>int minor;<BR>int patchlevel;</P>
<P>The DRM core identifies driver versions by a major, minor and patch level triplet. The information is printed to the kernel log at initialization time and passed to userspace through the DRM_IOCTL_VERSION ioctl.</P>
<P>The major and minor numbers are also used to verify the requested driver API version passed to DRM_IOCTL_SET_VERSION. When the driver API changes between minor versions, applications can call DRM_IOCTL_SET_VERSION to select a specific version of the API. If the requested major isn't equal to the driver major, or the requested minor is larger than the driver minor, the DRM_IOCTL_SET_VERSION call will return an error. Otherwise the driver's set_version() method will be called with the requested version.<BR>Name, Description and Date</P>
<P>char *name;<BR>char *desc;<BR>char *date;</P>
<P>The driver name is printed to the kernel log at initialization time, used for IRQ registration and passed to userspace through DRM_IOCTL_VERSION.</P>
<P>The driver description is a purely informative string passed to userspace through the DRM_IOCTL_VERSION ioctl and otherwise unused by the kernel.</P>
<P>The driver date, formatted as YYYYMMDD, is meant to identify the date of the latest modification to the driver. However, as most drivers fail to update it, its value is mostly useless. The DRM core prints it to the kernel log at initialization time and passes it to userspace through the DRM_IOCTL_VERSION ioctl.