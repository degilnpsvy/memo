Encoders (struct drm_encoder)
<P>Encoder Initialization<BR>Encoder Operations</P>
<P>An encoder takes pixel data from a CRTC and converts it to a format suitable for any attached connectors. On some devices, it may be possible to have a CRTC send data to more than one encoder. In that case, both encoders would receive data from the same scanout buffer, resulting in a "cloned" display configuration across the connectors attached to each encoder.<BR>Encoder Initialization</P>
<P>As for CRTCs, a KMS driver must create, initialize and register at least one struct drm_encoder instance. The instance is allocated and zeroed by the driver, possibly as part of a larger structure.</P>
<P>Drivers must initialize the struct drm_encoder possible_crtcs and possible_clones fields before registering the encoder. Both fields are bitmasks of respectively the CRTCs that the encoder can be connected to, and sibling encoders candidate for cloning.</P>
<P>After being initialized, the encoder must be registered with a call to drm_encoder_init. The function takes a pointer to the encoder functions and an encoder type. Supported types are</P>
<P>&nbsp;&nbsp;&nbsp; DRM_MODE_ENCODER_DAC for VGA and analog on DVI-I/DVI-A<BR>&nbsp;&nbsp;&nbsp; DRM_MODE_ENCODER_TMDS for DVI, HDMI and (embedded) DisplayPort<BR>&nbsp;&nbsp;&nbsp; DRM_MODE_ENCODER_LVDS for display panels<BR>&nbsp;&nbsp;&nbsp; DRM_MODE_ENCODER_TVDAC for TV output (Composite, S-Video, Component, SCART)<BR>&nbsp;&nbsp;&nbsp; DRM_MODE_ENCODER_VIRTUAL for virtual machine displays </P>
<P>Encoders must be attached to a CRTC to be used. DRM drivers leave encoders unattached at initialization time. Applications (or the fbdev compatibility layer when implemented) are responsible for attaching the encoders they want to use to a CRTC.<BR>Encoder Operations</P>
<P>&nbsp;&nbsp;&nbsp; void (*destroy)(struct drm_encoder *encoder);</P>
<P>&nbsp;&nbsp;&nbsp; Called to destroy the encoder when not needed anymore. See the section called &#8220;KMS Initialization and Cleanup&#8221;.</P>
<P>&nbsp;&nbsp;&nbsp; void (*set_property)(struct drm_plane *plane,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct drm_property *property, uint64_t value);</P>
<P>&nbsp;&nbsp;&nbsp; Set the value of the given plane property to value. See the section called &#8220;KMS Properties&#8221; for more information about properties.