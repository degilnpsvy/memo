CRTC Helper Operations
<P>&nbsp;&nbsp;&nbsp; bool (*mode_fixup)(struct drm_crtc *crtc,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const struct drm_display_mode *mode,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct drm_display_mode *adjusted_mode);</P>
<P>&nbsp;&nbsp;&nbsp; Let CRTCs adjust the requested mode or reject it completely. This operation returns true if the mode is accepted (possibly after being adjusted) or false if it is rejected.</P>
<P>&nbsp;&nbsp;&nbsp; The mode_fixup operation should reject the mode if it can't reasonably use it. The definition of "reasonable" is currently fuzzy in this context. One possible behaviour would be to set the adjusted mode to the panel timings when a fixed-mode panel is used with hardware capable of scaling. Another behaviour would be to accept any input mode and adjust it to the closest mode supported by the hardware (FIXME: This needs to be clarified).</P>
<P>&nbsp;&nbsp;&nbsp; int (*mode_set_base)(struct drm_crtc *crtc, int x, int y,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct drm_framebuffer *old_fb)</P>
<P>&nbsp;&nbsp;&nbsp; Move the CRTC on the current frame buffer (stored in crtc-&gt;fb) to position (x,y). Any of the frame buffer, x position or y position may have been modified.</P>
<P>&nbsp;&nbsp;&nbsp; This helper operation is optional. If not provided, the drm_crtc_helper_set_config function will fall back to the mode_set helper operation.<BR>&nbsp;&nbsp;&nbsp; Note</P>
<P>&nbsp;&nbsp;&nbsp; FIXME: Why are x and y passed as arguments, as they can be accessed through crtc-&gt;x and crtc-&gt;y?</P>
<P>&nbsp;&nbsp;&nbsp; void (*prepare)(struct drm_crtc *crtc);</P>
<P>&nbsp;&nbsp;&nbsp; Prepare the CRTC for mode setting. This operation is called after validating the requested mode. Drivers use it to perform device-specific operations required before setting the new mode.</P>
<P>&nbsp;&nbsp;&nbsp; int (*mode_set)(struct drm_crtc *crtc, struct drm_display_mode *mode,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct drm_display_mode *adjusted_mode, int x, int y,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct drm_framebuffer *old_fb);</P>
<P>&nbsp;&nbsp;&nbsp; Set a new mode, position and frame buffer. Depending on the device requirements, the mode can be stored internally by the driver and applied in the commit operation, or programmed to the hardware immediately.</P>
<P>&nbsp;&nbsp;&nbsp; The mode_set operation returns 0 on success or a negative error code if an error occurs.</P>
<P>&nbsp;&nbsp;&nbsp; void (*commit)(struct drm_crtc *crtc);</P>
<P>&nbsp;&nbsp;&nbsp; Commit a mode. This operation is called after setting the new mode. Upon return the device must use the new mode and be fully operational.