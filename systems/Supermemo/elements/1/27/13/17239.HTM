Display Port Helper Functions Reference
<P>struct i2c_algo_dp_aux_data &#8212; driver interface structure for i2c over dp aux algorithm<BR>struct drm_dp_aux_msg &#8212; DisplayPort AUX channel transaction<BR>struct drm_dp_aux &#8212; DisplayPort AUX channel<BR>drm_dp_dpcd_readb &#8212; read a single byte from the DPCD<BR>drm_dp_dpcd_writeb &#8212; write a single byte to the DPCD<BR>i2c_dp_aux_add_bus &#8212; register an i2c adapter using the aux ch helper<BR>drm_dp_dpcd_read &#8212; read a series of bytes from the DPCD<BR>drm_dp_dpcd_write &#8212; write a series of bytes to the DPCD<BR>drm_dp_dpcd_read_link_status &#8212; read DPCD link status (bytes 0x202-0x207)<BR>drm_dp_link_probe &#8212; probe a DisplayPort link for capabilities<BR>drm_dp_link_power_up &#8212; power up a DisplayPort link<BR>drm_dp_link_configure &#8212; configure a DisplayPort link<BR>drm_dp_aux_register &#8212; initialise and register aux channel<BR>drm_dp_aux_unregister &#8212; unregister an AUX adapter</P>
<P>These functions contain some common logic and helpers at various abstraction levels to deal with Display Port sink devices and related things like DP aux channel transfers, EDID reading over DP aux channels, decoding certain DPCD blocks, ...</P>
<P>The DisplayPort AUX channel is an abstraction to allow generic, driver- independent access to AUX functionality. Drivers can take advantage of this by filling in the fields of the drm_dp_aux structure.</P>
<P>Transactions are described using a hardware-independent drm_dp_aux_msg structure, which is passed into a driver's .transfer implementation. Both native and I2C-over-AUX transactions are supported.