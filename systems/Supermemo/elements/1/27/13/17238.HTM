fbdev Helper Functions Reference
<P>drm_fb_helper_single_add_all_connectors &#8212; add all connectors to fbdev emulation helper<BR>drm_fb_helper_debug_enter &#8212; implementation for -&gt;fb_debug_enter<BR>drm_fb_helper_debug_leave &#8212; implementation for -&gt;fb_debug_leave<BR>drm_fb_helper_restore_fbdev_mode_unlocked &#8212; restore fbdev configuration<BR>drm_fb_helper_blank &#8212; implementation for -&gt;fb_blank<BR>drm_fb_helper_prepare &#8212; setup a drm_fb_helper structure<BR>drm_fb_helper_init &#8212; initialize a drm_fb_helper structure<BR>drm_fb_helper_setcmap &#8212; implementation for -&gt;fb_setcmap<BR>drm_fb_helper_check_var &#8212; implementation for -&gt;fb_check_var<BR>drm_fb_helper_set_par &#8212; implementation for -&gt;fb_set_par<BR>drm_fb_helper_pan_display &#8212; implementation for -&gt;fb_pan_display<BR>drm_fb_helper_fill_fix &#8212; initializes fixed fbdev information<BR>drm_fb_helper_fill_var &#8212; initalizes variable fbdev information<BR>drm_fb_helper_initial_config &#8212; setup a sane initial connector configuration<BR>drm_fb_helper_hotplug_event &#8212; respond to a hotplug notification by probing all the outputs attached to the fb<BR>struct drm_fb_helper_funcs &#8212; driver callbacks for the fbdev emulation library</P>
<P>The fb helper functions are useful to provide an fbdev on top of a drm kernel mode setting driver. They can be used mostly independently from the crtc helper functions used by many drivers to implement the kernel mode setting interfaces.</P>
<P>Initialization is done as a four-step process with drm_fb_helper_prepare, drm_fb_helper_init, drm_fb_helper_single_add_all_connectors and drm_fb_helper_initial_config. Drivers with fancier requirements than the default behaviour can override the third step with their own code. Teardown is done with drm_fb_helper_fini.</P>
<P>At runtime drivers should restore the fbdev console by calling drm_fb_helper_restore_fbdev_mode from their -&gt;lastclose callback. They should also notify the fb helper code from updates to the output configuration by calling drm_fb_helper_hotplug_event. For easier integration with the output polling code in drm_crtc_helper.c the modeset code provides a -&gt;output_poll_changed callback.</P>
<P>All other functions exported by the fb helper library can be used to implement the fbdev driver interface by the driver.</P>
<P>It is possible, though perhaps somewhat tricky, to implement race-free hotplug detection using the fbdev helpers. The drm_fb_helper_prepare helper must be called first to initialize the minimum required to make hotplug detection work. Drivers also need to make sure to properly set up the dev-&gt;mode_config.funcs member. After calling drm_kms_helper_poll_init it is safe to enable interrupts and start processing hotplug events. At the same time, drivers should initialize all modeset objects such as CRTCs, encoders and connectors. To finish up the fbdev helper initialization, the drm_fb_helper_init function is called. To probe for all attached displays and set up an initial configuration using the detected hardware, drivers should call drm_fb_helper_single_add_all_connectors followed by drm_fb_helper_initial_config.