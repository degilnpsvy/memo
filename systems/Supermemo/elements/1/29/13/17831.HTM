<H4 class=subsection>8.1.5 Scanning All Elements of an Array</H4><A name=index-elements-in-arrays_002c-scanning></A><A name=index-scanning-arrays></A><A name=index-arrays_002c-scanning></A><A name=index-loops_002c-for_002c-array-scanning></A>
<P>In programs that use arrays, it is often necessary to use a loop that executes once for each element of an array. In other languages, where arrays are contiguous and indices are limited to positive integers, this is easy: all the valid indices can be found by counting from the lowest index up to the highest. This technique won&#8217;t do the job in <CODE>awk</CODE>, because any number or string can be an array index. So <CODE>awk</CODE> has a special kind of <CODE>for</CODE> statement for scanning an array: </P>
<DIV class=example><PRE class=example>for (<VAR>var</VAR> in <VAR>array</VAR>)
  <VAR>body</VAR>
</PRE></DIV><A name=index-in-operator_002c-use-in-loops></A>
<P>This loop executes <VAR>body</VAR> once for each index in <VAR>array</VAR> that the program has previously used, with the variable <VAR>var</VAR> set to that index. </P><A name=index-arrays_002c-for-statement-and></A><A name=index-for-statement_002c-looping-over-arrays></A>
<P>The following program uses this form of the <CODE>for</CODE> statement. The first rule scans the input records and notes which words appear (at least once) in the input, by storing a one into the array <CODE>used</CODE> with the word as index. The second rule scans the elements of <CODE>used</CODE> to find all the distinct words that appear in the input. It prints each word that is more than 10 characters long and also prints the number of such words. See <A href="http://www.gnu.org/software/gawk/manual/gawk.html#String-Functions">String Functions</A>, for more information on the built-in function <CODE>length()</CODE>. </P>
<DIV class=example><PRE class=example># Record a 1 for each word that is used at least once
{
    for (i = 1; i &lt;= NF; i++)
        used[$i] = 1
}

# Find number of distinct words more than 10 characters long
END {
    for (x in used) {
        if (length(x) &gt; 10) {
            ++num_long_words
            print x
        }
    }
    print num_long_words, "words longer than 10 characters"
}
</PRE></DIV>
<P>See <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Word-Sorting">Word Sorting</A>, for a more detailed example of this type. </P><A name=index-arrays_002c-elements_002c-order-of-access-by-in-operator></A><A name=index-elements-in-arrays_002c-order-of-access-by-in-operator></A><A name=index-in-operator_002c-order-of-array-access></A>
<P>The order in which elements of the array are accessed by this statement is determined by the internal arrangement of the array elements within <CODE>awk</CODE> and normally cannot be controlled or changed. This can lead to problems if new elements are added to <VAR>array</VAR> by statements in the loop body; it is not predictable whether the <CODE>for</CODE> loop will reach them. Similarly, changing <VAR>var</VAR> inside the loop may produce strange results. It is best to avoid such things.