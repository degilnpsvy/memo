<H4 class=subsection>8.5.1 Scanning Multidimensional Arrays</H4>
<P>There is no special <CODE>for</CODE> statement for scanning a &#8220;multidimensional&#8221; array. There cannot be one, because, in truth, <CODE>awk</CODE> does not have multidimensional arrays or elements&#8212;there is only a multidimensional <EM>way of accessing</EM> an array. </P><A name=index-subscripts-in-arrays_002c-multidimensional_002c-scanning></A><A name=index-arrays_002c-multidimensional_002c-scanning></A><A name=index-scanning-multidimensional-arrays></A>
<P>However, if your program has an array that is always accessed as multidimensional, you can get the effect of scanning it by combining the scanning <CODE>for</CODE> statement (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Scanning-an-Array">Scanning an Array</A>) with the built-in <CODE>split()</CODE> function (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#String-Functions">String Functions</A>). It works in the following manner: </P>
<DIV class=example><PRE class=example>for (combined in array) {
    split(combined, separate, SUBSEP)
    &#8230;
}
</PRE></DIV>
<P>This sets the variable <CODE>combined</CODE> to each concatenated combined index in the array, and splits it into the individual indices by breaking it apart where the value of <CODE>SUBSEP</CODE> appears. The individual indices then become the elements of the array <CODE>separate</CODE>. </P>
<P>Thus, if a value is previously stored in <CODE>array[1, "foo"]</CODE>, then an element with index <CODE>"1\034foo"</CODE> exists in <CODE>array</CODE>. (Recall that the default value of <CODE>SUBSEP</CODE> is the character with code 034.) Sooner or later, the <CODE>for</CODE> statement finds that index and does an iteration with the variable <CODE>combined</CODE> set to <CODE>"1\034foo"</CODE>. Then the <CODE>split()</CODE> function is called as follows: </P>
<DIV class=example><PRE class=example>split("1\034foo", separate, "\034")
</PRE></DIV>
<P>The result is to set <CODE>separate[1]</CODE> to <CODE>"1"</CODE> and <CODE>separate[2]</CODE> to <CODE>"foo"</CODE>. Presto! The original sequence of separate indices is recovered.