<H4 class=subsection>8.1.6 Using Predefined Array Scanning Orders</H4>
<P>By default, when a <CODE>for</CODE> loop traverses an array, the order is undefined, meaning that the <CODE>awk</CODE> implementation determines the order in which the array is traversed. This order is usually based on the internal implementation of arrays and will vary from one version of <CODE>awk</CODE> to the next. </P><A name=index-array-scanning-order_002c-controlling></A><A name=index-controlling-array-scanning-order></A>
<P>Often, though, you may wish to do something simple, such as &#8220;traverse the array by comparing the indices in ascending order,&#8221; or &#8220;traverse the array by comparing the values in descending order.&#8221; <CODE>gawk</CODE> provides two mechanisms which give you this control. </P>
<UL>
<LI>Set <CODE>PROCINFO["sorted_in"]</CODE> to one of a set of predefined values. We describe this now. </LI>
<LI>Set <CODE>PROCINFO["sorted_in"]</CODE> to the name of a user-defined function to use for comparison of array elements. This advanced feature is described later, in <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Array-Sorting">Array Sorting</A>. </LI></UL><A name=index-PROCINFO_002c-values-of-sorted_005fin></A>
<P>The following special values for <CODE>PROCINFO["sorted_in"]</CODE> are available: </P>
<DL compact>
<DT><CODE>"@unsorted"</CODE></DT>
<DD>
<P>Array elements are processed in arbitrary order, which is the default <CODE>awk</CODE> behavior. </P></DD>
<DT><CODE>"@ind_str_asc"</CODE></DT>
<DD>
<P>Order by indices in ascending order compared as strings; this is the most basic sort. (Internally, array indices are always strings, so with &#8216;<SAMP>a[2*5] = 1</SAMP>&#8217; the index is <CODE>"10"</CODE> rather than numeric 10.) </P></DD>
<DT><CODE>"@ind_num_asc"</CODE></DT>
<DD>
<P>Order by indices in ascending order but force them to be treated as numbers in the process. Any index with a non-numeric value will end up positioned as if it were zero. </P></DD>
<DT><CODE>"@val_type_asc"</CODE></DT>
<DD>
<P>Order by element values in ascending order (rather than by indices). Ordering is by the type assigned to the element (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Typing-and-Comparison">Typing and Comparison</A>). All numeric values come before all string values, which in turn come before all subarrays. (Subarrays have not been described yet; see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Arrays-of-Arrays">Arrays of Arrays</A>.) </P></DD>
<DT><CODE>"@val_str_asc"</CODE></DT>
<DD>
<P>Order by element values in ascending order (rather than by indices). Scalar values are compared as strings. Subarrays, if present, come out last. </P></DD>
<DT><CODE>"@val_num_asc"</CODE></DT>
<DD>
<P>Order by element values in ascending order (rather than by indices). Scalar values are compared as numbers. Subarrays, if present, come out last. When numeric values are equal, the string values are used to provide an ordering: this guarantees consistent results across different versions of the C <CODE>qsort()</CODE> function,<A href="http://www.gnu.org/software/gawk/manual/gawk.html#FOOT41" name=DOCF41><SUP>41</SUP></A> which <CODE>gawk</CODE> uses internally to perform the sorting. </P></DD>
<DT><CODE>"@ind_str_desc"</CODE></DT>
<DD>
<P>String indices ordered from high to low. </P></DD>
<DT><CODE>"@ind_num_desc"</CODE></DT>
<DD>
<P>Numeric indices ordered from high to low. </P></DD>
<DT><CODE>"@val_type_desc"</CODE></DT>
<DD>
<P>Element values, based on type, ordered from high to low. Subarrays, if present, come out first. </P></DD>
<DT><CODE>"@val_str_desc"</CODE></DT>
<DD>
<P>Element values, treated as strings, ordered from high to low. Subarrays, if present, come out first. </P></DD>
<DT><CODE>"@val_num_desc"</CODE></DT>
<DD>
<P>Element values, treated as numbers, ordered from high to low. Subarrays, if present, come out first. </P></DD></DL>
<P>The array traversal order is determined before the <CODE>for</CODE> loop starts to run. Changing <CODE>PROCINFO["sorted_in"]</CODE> in the loop body does not affect the loop. For example: </P>
<DIV class=example><PRE class=example>$ <KBD><EM>gawk 'BEGIN {</EM></KBD>
&gt; <KBD><EM>   a[4] = 4</EM></KBD>
&gt; <KBD><EM>   a[3] = 3</EM></KBD>
&gt; <KBD><EM>   for (i in a)</EM></KBD>
&gt; <KBD><EM>       print i, a[i]</EM></KBD>
&gt; <KBD><EM>}'</EM></KBD>
-| 4 4
-| 3 3
$ <KBD><EM>gawk 'BEGIN {</EM></KBD>
&gt; <KBD><EM>   PROCINFO["sorted_in"] = "@ind_str_asc"</EM></KBD>
&gt; <KBD><EM>   a[4] = 4</EM></KBD>
&gt; <KBD><EM>   a[3] = 3</EM></KBD>
&gt; <KBD><EM>   for (i in a)</EM></KBD>
&gt; <KBD><EM>       print i, a[i]</EM></KBD>
&gt; <KBD><EM>}'</EM></KBD>
-| 3 3
-| 4 4
</PRE></DIV>
<P>When sorting an array by element values, if a value happens to be a subarray then it is considered to be greater than any string or numeric value, regardless of what the subarray itself contains, and all subarrays are treated as being equal to each other. Their order relative to each other is determined by their index strings. </P>
<P>Here are some additional things to bear in mind about sorted array traversal. </P>
<UL>
<LI>The value of <CODE>PROCINFO["sorted_in"]</CODE> is global. That is, it affects all array traversal <CODE>for</CODE> loops. If you need to change it within your own code, you should see if it&#8217;s defined and save and restore the value: 
<DIV class=example><PRE class=example>&#8230;
if ("sorted_in" in PROCINFO) {
    save_sorted = PROCINFO["sorted_in"]
    PROCINFO["sorted_in"] = "@val_str_desc" # or whatever
}
&#8230;
if (save_sorted)
    PROCINFO["sorted_in"] = save_sorted
</PRE></DIV></LI>
<LI>As mentioned, the default array traversal order is represented by <CODE>"@unsorted"</CODE>. You can also get the default behavior by assigning the null string to <CODE>PROCINFO["sorted_in"]</CODE> or by just deleting the <CODE>"sorted_in"</CODE> element from the <CODE>PROCINFO</CODE> array with the <CODE>delete</CODE> statement. (The <CODE>delete</CODE> statement hasn&#8217;t been described yet; see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Delete">Delete</A>.) </LI></UL>
<P>In addition, <CODE>gawk</CODE> provides built-in functions for sorting arrays; see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Array-Sorting-Functions">Array Sorting Functions</A>.