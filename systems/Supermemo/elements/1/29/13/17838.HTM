<H3 class=section>8.6 Arrays of Arrays</H3><A name=index-arrays-of-arrays></A>
<P><CODE>gawk</CODE> goes beyond standard <CODE>awk</CODE>&#8217;s multidimensional array access and provides true arrays of arrays. Elements of a subarray are referred to by their own indices enclosed in square brackets, just like the elements of the main array. For example, the following creates a two-element subarray at index &#8216;<SAMP>1</SAMP>&#8217; of the main array <CODE>a</CODE>: </P>
<DIV class=example><PRE class=example>a[1][1] = 1
a[1][2] = 2
</PRE></DIV>
<P>This simulates a true two-dimensional array. Each subarray element can contain another subarray as a value, which in turn can hold other arrays as well. In this way, you can create arrays of three or more dimensions. The indices can be any <CODE>awk</CODE> expression, including scalars separated by commas (that is, a regular <CODE>awk</CODE> simulated multidimensional subscript). So the following is valid in <CODE>gawk</CODE>: </P>
<DIV class=example><PRE class=example>a[1][3][1, "name"] = "barney"
</PRE></DIV>
<P>Each subarray and the main array can be of different length. In fact, the elements of an array or its subarray do not all have to have the same type. This means that the main array and any of its subarrays can be non-rectangular, or jagged in structure. One can assign a scalar value to the index &#8216;<SAMP>4</SAMP>&#8217; of the main array <CODE>a</CODE>: </P>
<DIV class=example><PRE class=example>a[4] = "An element in a jagged array"
</PRE></DIV>
<P>The terms <EM>dimension</EM>, <EM>row</EM> and <EM>column</EM> are meaningless when applied to such an array, but we will use &#8220;dimension&#8221; henceforth to imply the maximum number of indices needed to refer to an existing element. The type of any element that has already been assigned cannot be changed by assigning a value of a different type. You have to first delete the current element, which effectively makes <CODE>gawk</CODE> forget about the element at that index: </P>
<DIV class=example><PRE class=example>delete a[4]
a[4][5][6][7] = "An element in a four-dimensional array"
</PRE></DIV>
<P>This removes the scalar value from index &#8216;<SAMP>4</SAMP>&#8217; and then inserts a subarray of subarray of subarray containing a scalar. You can also delete an entire subarray or subarray of subarrays: </P>
<DIV class=example><PRE class=example>delete a[4][5]
a[4][5] = "An element in subarray a[4]"
</PRE></DIV>
<P>But recall that you can not delete the main array <CODE>a</CODE> and then use it as a scalar. </P>
<P>The built-in functions which take array arguments can also be used with subarrays. For example, the following code fragment uses <CODE>length()</CODE> (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#String-Functions">String Functions</A>) to determine the number of elements in the main array <CODE>a</CODE> and its subarrays: </P>
<DIV class=example><PRE class=example>print length(a), length(a[1]), length(a[1][3])
</PRE></DIV>
<P>This results in the following output for our main array <CODE>a</CODE>: </P>
<DIV class=example><PRE class=example>2, 3, 1
</PRE></DIV>
<P>The &#8216;<SAMP><VAR>subscript</VAR> in <VAR>array</VAR></SAMP>&#8217; expression (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Reference-to-Elements">Reference to Elements</A>) works similarly for both regular <CODE>awk</CODE>-style arrays and arrays of arrays. For example, the tests &#8216;<SAMP>1 in a</SAMP>&#8217;, &#8216;<SAMP>3 in a[1]</SAMP>&#8217;, and &#8216;<SAMP>(1, "name") in a[1][3]</SAMP>&#8217; all evaluate to one (true) for our array <CODE>a</CODE>. </P>
<P>The &#8216;<SAMP>for (item in array)</SAMP>&#8217; statement (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Scanning-an-Array">Scanning an Array</A>) can be nested to scan all the elements of an array of arrays if it is rectangular in structure. In order to print the contents (scalar values) of a two-dimensional array of arrays (i.e., in which each first-level element is itself an array, not necessarily of the same length) you could use the following code: </P>
<DIV class=example><PRE class=example>for (i in array)
    for (j in array[i])
        print array[i][j] 
</PRE></DIV>
<P>The <CODE>isarray()</CODE> function (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Type-Functions">Type Functions</A>) lets you test if an array element is itself an array: </P>
<DIV class=example><PRE class=example>for (i in array) {
    if (isarray(array[i]) {
        for (j in array[i]) {
            print array[i][j] 
        }
    }
}
</PRE></DIV>
<P>If the structure of a jagged array of arrays is known in advance, you can often devise workarounds using control statements. For example, the following code prints the elements of our main array <CODE>a</CODE>: </P>
<DIV class=example><PRE class=example>for (i in a) {
    for (j in a[i]) {
        if (j == 3) {
            for (k in a[i][j])
                print a[i][j][k]
        } else
            print a[i][j]
    } 
}
</PRE></DIV>
<P>See <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Walking-Arrays">Walking Arrays</A>, for a user-defined function that &#8220;walks&#8221; an arbitrarily-dimensioned array of arrays. </P>
<P>Recall that a reference to an uninitialized array element yields a value of <CODE>""</CODE>, the null string. This has one important implication when you intend to use a subarray as an argument to a function, as illustrated by the following example: </P>
<DIV class=example><PRE class=example>$ <KBD><EM>gawk 'BEGIN { split("a b c d", b[1]); print b[1][1] }'</EM></KBD>
error&#8594; gawk: cmd. line:1: fatal: split: second argument is not an array
</PRE></DIV>
<P>The way to work around this is to first force <CODE>b[1]</CODE> to be an array by creating an arbitrary index: </P>
<DIV class=example><PRE class=example>$ <KBD><EM>gawk 'BEGIN { b[1][1] = ""; split("a b c d", b[1]); print b[1][1] }'</EM></KBD>
-| a
</PRE></DIV>