<H3 class=section>8.3 Using Numbers to Subscript Arrays</H3><A name=index-numbers_002c-as-array-subscripts></A><A name=index-arrays_002c-numeric-subscripts></A><A name=index-subscripts-in-arrays_002c-numbers-as></A><A name=index-CONVFMT-variable_002c-and-array-subscripts></A>
<P>An important aspect to remember about arrays is that <EM>array subscripts are always strings</EM>. When a numeric value is used as a subscript, it is converted to a string value before being used for subscripting (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Conversion">Conversion</A>). This means that the value of the built-in variable <CODE>CONVFMT</CODE> can affect how your program accesses elements of an array. For example: </P>
<DIV class=example><PRE class=example>xyz = 12.153
data[xyz] = 1
CONVFMT = "%2.2f"
if (xyz in data)
    printf "%s is in data\n", xyz
else
    printf "%s is not in data\n", xyz
</PRE></DIV>
<P>This prints &#8216;<SAMP>12.15 is not in data</SAMP>&#8217;. The first statement gives <CODE>xyz</CODE> a numeric value. Assigning to <CODE>data[xyz]</CODE> subscripts <CODE>data</CODE> with the string value <CODE>"12.153"</CODE> (using the default conversion value of <CODE>CONVFMT</CODE>, <CODE>"%.6g"</CODE>). Thus, the array element <CODE>data["12.153"]</CODE> is assigned the value one. The program then changes the value of <CODE>CONVFMT</CODE>. The test &#8216;<SAMP>(xyz in data)</SAMP>&#8217; generates a new string value from <CODE>xyz</CODE>&#8212;this time <CODE>"12.15"</CODE>&#8212;because the value of <CODE>CONVFMT</CODE> only allows two significant digits. This test fails, since <CODE>"12.15"</CODE> is different from <CODE>"12.153"</CODE>. </P><A name=index-converting-integer-array-subscripts></A><A name=index-integer-array-indices></A>
<P>According to the rules for conversions (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Conversion">Conversion</A>), integer values are always converted to strings as integers, no matter what the value of <CODE>CONVFMT</CODE> may happen to be. So the usual case of the following works: </P>
<DIV class=example><PRE class=example>for (i = 1; i &lt;= maxsub; i++)
    <I>do something with</I> array[i]
</PRE></DIV>
<P>The &#8220;integer values always convert to strings as integers&#8221; rule has an additional consequence for array indexing. Octal and hexadecimal constants (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Nondecimal_002dnumbers">Nondecimal-numbers</A>) are converted internally into numbers, and their original form is forgotten. This means, for example, that <CODE>array[17]</CODE>, <CODE>array[021]</CODE>, and <CODE>array[0x11]</CODE> all refer to the same element! </P>
<P>As with many things in <CODE>awk</CODE>, the majority of the time things work as one would expect them to. But it is useful to have a precise knowledge of the actual rules since they can sometimes have a subtle effect on your programs.