<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>13.2 GNU<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gettext</CODE></H3><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-internationalizing-a-program></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-gettext-library></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The facilities in GNU<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gettext</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>focus on messages; strings printed by a program, either directly or via formatting with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>printf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sprintf()</CODE>.<A href="http://www.gnu.org/software/gawk/manual/gawk.html#FOOT82" name=DOCF82><SUP>82</SUP></A></P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-portability_002c-gettext-library-and></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When using GNU<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gettext</CODE>, each application has its own<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>text domain</EM>. This is a unique name, such as &#8216;<SAMP>kpilot</SAMP>&#8217; or &#8216;<SAMP>gawk</SAMP>&#8217;, that identifies the application. A complete application may have multiple components&#8212;programs written in C or C++, as well as scripts written in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sh</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk</CODE>. All of the components use the same text domain.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To make the discussion concrete, assume we&#8217;re writing an application named<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>guide</CODE>. Internationalization consists of the following steps, in this order:</P>
<OL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>The programmer goes through the source for all of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>guide</CODE>&#8217;s components and marks each string that is a candidate for translation. For example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"`-F': option required"</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a good candidate for translation. A table with strings of option names is not (e.g.,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE>&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>--profile</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option should remain the same, no matter what the local language).</LI>
<LI><A name=index-textdomain_0028_0029-function-_0028C-library_0029></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>The programmer indicates the application&#8217;s text domain (<CODE>"guide"</CODE>) to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gettext</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>library, by calling the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>textdomain()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function.</LI>
<LI><A name=index-_002epot-files></A><SPAN class=Apple-converted-space>&nbsp;</SPAN><A name=index-files_002c-_002epot></A><A name=index-portable-object-template-files></A><A name=index-files_002c-portable-object-template></A>Messages from the application are extracted from the source code and collected into a portable object template file (<SAMP>guide.pot</SAMP>), which lists the strings and their translations. The translations are initially empty. The original (usually English) messages serve as the key for lookup of the translations.</LI>
<LI><A name=index-_002epo-files></A><SPAN class=Apple-converted-space>&nbsp;</SPAN><A name=index-files_002c-_002epo></A><A name=index-portable-object-files></A><A name=index-files_002c-portable-object></A>For each language with a translator,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>guide.pot</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is copied to a portable object file (<CODE>.po</CODE>) and translations are created and shipped with the application. For example, there might be a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>fr.po</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>for a French translation.</LI>
<LI><A name=index-_002egmo-files></A><SPAN class=Apple-converted-space>&nbsp;</SPAN><A name=index-files_002c-_002egmo></A><A name=index-message-object-files></A><A name=index-files_002c-message-object></A>Each language&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>.po</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>file is converted into a binary message object (<SAMP>.gmo</SAMP>) file. A message object file contains the original messages and their translations in a binary format that allows fast lookup of translations at runtime.</LI>
<LI>When<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>guide</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is built and installed, the binary translation files are installed in a standard place.</LI>
<LI><A name=index-bindtextdomain_0028_0029-function-_0028C-library_0029></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>For testing and development, it is possible to tell<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gettext</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>.gmo</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>files in a different directory than the standard one by using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bindtextdomain()</CODE>function.</LI>
<LI><A name=index-_002egmo-files_002c-specifying-directory-of></A><SPAN class=Apple-converted-space>&nbsp;</SPAN><A name=index-files_002c-_002egmo_002c-specifying-directory-of></A><A name=index-message-object-files_002c-specifying-directory-of></A><A name=index-files_002c-message-object_002c-specifying-directory-of></A>At runtime,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>guide</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>looks up each string via a call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gettext()</CODE>. The returned string is the translated string if available, or the original string if not.</LI>
<LI>If necessary, it is possible to access messages from a different text domain than the one belonging to the application, without having to switch the application&#8217;s default text domain back and forth.</LI></OL><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-gettext_0028_0029-function-_0028C-library_0029></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In C (or C++), the string marking and dynamic translation lookup are accomplished by wrapping each string in a call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gettext()</CODE>:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>printf("%s", gettext("Don't Panic!\n"));
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The tools that extract messages from source code pull out all strings enclosed in calls to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gettext()</CODE>.</P><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-_005f-_0028underscore_0029_002c-C-macro></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-underscore-_0028_005f_0029_002c-C-macro></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The GNU<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gettext</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>developers, recognizing that typing &#8216;<SAMP>gettext(&#8230;)</SAMP>&#8217; over and over again is both painful and ugly to look at, use the macro &#8216;<SAMP>_</SAMP>&#8217; (an underscore) to make things easier:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>/* In the standard header file: */
#define _(str) gettext(str)

/* In the program text: */
printf("%s", _("Don't Panic!\n"));
</PRE></DIV><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-internationalization_002c-localization_002c-locale-categories></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-gettext-library_002c-locale-categories></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-locale-categories></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This reduces the typing overhead to just three extra characters per string and is considerably easier to read as well.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">There are locale<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>categories</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>for different types of locale-related information. The defined locale categories that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gettext</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>knows about are:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DD><A name=index-LC_005fMESSAGES-locale-category></A></DD>
<DT><CODE>LC_MESSAGES</CODE></DT>
<DD>
<P>Text messages. This is the default category for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gettext</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>operations, but it is possible to supply a different one explicitly, if necessary. (It is almost never necessary to supply a different category.)</P><A name=index-sorting-characters-in-different-languages></A><A name=index-LC_005fCOLLATE-locale-category></A></DD>
<DT><CODE>LC_COLLATE</CODE></DT>
<DD>
<P>Text-collation information; i.e., how different characters and/or groups of characters sort in a given language.</P><A name=index-LC_005fCTYPE-locale-category></A></DD>
<DT><CODE>LC_CTYPE</CODE></DT>
<DD>
<P>Character-type information (alphabetic, digit, upper- or lowercase, and so on). This information is accessed via the POSIX character classes in regular expressions, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>/[[:alnum:]]/</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/gawk/manual/gawk.html#Regexp-Operators">Regexp Operators</A>).</P><A name=index-monetary-information_002c-localization></A><A name=index-currency-symbols_002c-localization></A><A name=index-LC_005fMONETARY-locale-category></A></DD>
<DT><CODE>LC_MONETARY</CODE></DT>
<DD>
<P>Monetary information, such as the currency symbol, and whether the symbol goes before or after a number.</P><A name=index-LC_005fNUMERIC-locale-category></A></DD>
<DT><CODE>LC_NUMERIC</CODE></DT>
<DD>
<P>Numeric information, such as which characters to use for the decimal point and the thousands separator.<A href="http://www.gnu.org/software/gawk/manual/gawk.html#FOOT83" name=DOCF83><SUP>83</SUP></A></P><A name=index-LC_005fRESPONSE-locale-category></A></DD>
<DT><CODE>LC_RESPONSE</CODE></DT>
<DD>
<P>Response information, such as how &#8220;yes&#8221; and &#8220;no&#8221; appear in the local language, and possibly other information as well.</P><A name=index-time_002c-localization-and></A><A name=index-dates_002c-information-related-to_002c-localization></A><A name=index-LC_005fTIME-locale-category></A></DD>
<DT><CODE>LC_TIME</CODE></DT>
<DD>
<P>Time- and date-related information, such as 12- or 24-hour clock, month printed before or after the day in a date, local month abbreviations, and so on.</P><A name=index-LC_005fALL-locale-category></A></DD>
<DT><CODE>LC_ALL</CODE></DT>
<DD>
<P>All of the above. (Not too useful in the context of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gettext</CODE>.)</P></DD></DL>