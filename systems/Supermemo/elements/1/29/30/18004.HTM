<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>16.7.9 Dumping and Restoring An Array</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>rwarray</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>extension adds two functions, named<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>writea()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>reada()</CODE>, as follows:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DD><A name=index-writea_0028_0029-extension-function></A></DD>
<DT><CODE>ret = writea(file, array)</CODE></DT>
<DD>
<P>This function takes a string argument, which is the name of the file to which dump the array, and the array itself as the second argument.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>writea()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>understands multidimensional arrays. It returns one on success, or zero upon failure.</P><A name=index-reada_0028_0029-extension-function></A></DD>
<DT><CODE>ret = reada(file, array)</CODE></DT>
<DD>
<P><CODE>reada()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the inverse of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>writea()</CODE>; it reads the file named as its first argument, filling in the array named as the second argument. It clears the array first. Here too, the return value is one on success and zero upon failure.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The array created by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>reada()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is identical to that written by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>writea()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the sense that the contents are the same. However, due to implementation issues, the array traversal order of the recreated array is likely to be different from that of the original array. As array traversal order in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is by default undefined, this is (technically) not a problem. If you need to guarantee a particular traversal order, use the array sorting features in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to do so (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/gawk/manual/gawk.html#Array-Sorting">Array Sorting</A>).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The file contains binary data. All integral values are written in network byte order. However, double precision floating-point values are written as native binary data. Thus, arrays containing only string data can theoretically be dumped on systems with one byte order and restored on systems with a different one, but this has not been tried.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here is an example:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>@load "rwarray"
&#8230;
ret = writea("arraydump.bin", array)
&#8230;
ret = reada("arraydump.bin", array)</PRE></DIV>