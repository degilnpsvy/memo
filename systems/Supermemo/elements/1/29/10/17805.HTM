<H4 class=subsubsection>7.1.4.2 Input/Output from <CODE>BEGIN</CODE> and <CODE>END</CODE> Rules</H4><A name=index-input_002foutput_002c-from-BEGIN-and-END></A>
<P>There are several (sometimes subtle) points to remember when doing I/O from a <CODE>BEGIN</CODE> or <CODE>END</CODE> rule. The first has to do with the value of <CODE>$0</CODE> in a <CODE>BEGIN</CODE> rule. Because <CODE>BEGIN</CODE> rules are executed before any input is read, there simply is no input record, and therefore no fields, when executing <CODE>BEGIN</CODE> rules. References to <CODE>$0</CODE> and the fields yield a null string or zero, depending upon the context. One way to give <CODE>$0</CODE> a real value is to execute a <CODE>getline</CODE> command without a variable (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Getline">Getline</A>). Another way is simply to assign a value to <CODE>$0</CODE>. </P><A name=index-Brian-Kernighan_0027s-awk-7></A><A name=index-differences-in-awk-and-gawk_002c-BEGIN_002fEND-patterns></A><A name=index-POSIX-awk_002c-BEGIN_002fEND-patterns></A><A name=index-print-statement_002c-BEGIN_002fEND-patterns-and></A><A name=index-BEGIN-pattern_002c-print-statement-and></A><A name=index-END-pattern_002c-print-statement-and></A>
<P>The second point is similar to the first but from the other direction. Traditionally, due largely to implementation issues, <CODE>$0</CODE> and <CODE>NF</CODE> were <EM>undefined</EM> inside an <CODE>END</CODE> rule. The POSIX standard specifies that <CODE>NF</CODE> is available in an <CODE>END</CODE> rule. It contains the number of fields from the last input record. Most probably due to an oversight, the standard does not say that <CODE>$0</CODE> is also preserved, although logically one would think that it should be. In fact, <CODE>gawk</CODE> does preserve the value of <CODE>$0</CODE> for use in <CODE>END</CODE> rules. Be aware, however, that Brian Kernighan&#8217;s <CODE>awk</CODE>, and possibly other implementations, do not. </P>
<P>The third point follows from the first two. The meaning of &#8216;<SAMP>print</SAMP>&#8217; inside a <CODE>BEGIN</CODE> or <CODE>END</CODE> rule is the same as always: &#8216;<SAMP>print $0</SAMP>&#8217;. If <CODE>$0</CODE> is the null string, then this prints an empty record. Many long time <CODE>awk</CODE> programmers use an unadorned &#8216;<SAMP>print</SAMP>&#8217; in <CODE>BEGIN</CODE> and <CODE>END</CODE> rules, to mean &#8216;<SAMP>print&nbsp;""<!-- /@w --></SAMP>&#8217;, relying on <CODE>$0</CODE> being null. Although one might generally get away with this in <CODE>BEGIN</CODE> rules, it is a very bad idea in <CODE>END</CODE> rules, at least in <CODE>gawk</CODE>. It is also poor style, since if an empty line is needed in the output, the program should print one explicitly. </P><A name=index-next-statement_002c-BEGIN_002fEND-patterns-and></A><A name=index-nextfile-statement_002c-BEGIN_002fEND-patterns-and></A><A name=index-BEGIN-pattern_002c-next_002fnextfile-statements-and></A><A name=index-END-pattern_002c-next_002fnextfile-statements-and></A>
<P>Finally, the <CODE>next</CODE> and <CODE>nextfile</CODE> statements are not allowed in a <CODE>BEGIN</CODE> rule, because the implicit read-a-record-and-match-against-the-rules loop has not started yet. Similarly, those statements are not valid in an <CODE>END</CODE> rule, since all the input has been read. (See <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Next-Statement">Next Statement</A>, and see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Nextfile-Statement">Nextfile Statement</A>.)