<H4 class=subsubsection>6.3.2.2 Comparison Operators</H4>
<P><EM>Comparison expressions</EM> compare strings or numbers for relationships such as equality. They are written using <EM>relational operators</EM>, which are a superset of those in C. <A href="http://www.gnu.org/software/gawk/manual/gawk.html#table_002drelational_002dops">Table 6.3</A> describes them. </P><A name=index-_003c-_0028left-angle-bracket_0029_002c-_003c-operator></A><A name=index-left-angle-bracket-_0028_003c_0029_002c-_003c-operator></A><A name=index-_003c-_0028left-angle-bracket_0029_002c-_003c_003d-operator></A><A name=index-left-angle-bracket-_0028_003c_0029_002c-_003c_003d-operator></A><A name=index-_003e-_0028right-angle-bracket_0029_002c-_003e_003d-operator></A><A name=index-right-angle-bracket-_0028_003e_0029_002c-_003e_003d-operator></A><A name=index-_003e-_0028right-angle-bracket_0029_002c-_003e-operator></A><A name=index-right-angle-bracket-_0028_003e_0029_002c-_003e-operator></A><A name=index-_003d-_0028equals-sign_0029_002c-_003d_003d-operator></A><A name=index-equals-sign-_0028_003d_0029_002c-_003d_003d-operator></A><A name=index-_0021-_0028exclamation-point_0029_002c-_0021_003d-operator></A><A name=index-exclamation-point-_0028_0021_0029_002c-_0021_003d-operator></A><A name=index-_007e-_0028tilde_0029_002c-_007e-operator-4></A><A name=index-tilde-_0028_007e_0029_002c-_007e-operator-4></A><A name=index-_0021-_0028exclamation-point_0029_002c-_0021_007e-operator-4></A><A name=index-exclamation-point-_0028_0021_0029_002c-_0021_007e-operator-4></A><A name=index-in-operator></A>
<DIV class=float><A name=table_002drelational_002dops></A>
<TABLE>
<THEAD>
<TR>
<TH width="25%">Expression</TH>
<TH width="75%">Result</TH></TR></THEAD>
<TBODY>
<TR>
<TD width="25%"><VAR>x</VAR> <CODE>&lt;</CODE> <VAR>y</VAR></TD>
<TD width="75%">True if <VAR>x</VAR> is less than <VAR>y</VAR>.</TD></TR>
<TR>
<TD width="25%"><VAR>x</VAR> <CODE>&lt;=</CODE> <VAR>y</VAR></TD>
<TD width="75%">True if <VAR>x</VAR> is less than or equal to <VAR>y</VAR>.</TD></TR>
<TR>
<TD width="25%"><VAR>x</VAR> <CODE>&gt;</CODE> <VAR>y</VAR></TD>
<TD width="75%">True if <VAR>x</VAR> is greater than <VAR>y</VAR>.</TD></TR>
<TR>
<TD width="25%"><VAR>x</VAR> <CODE>&gt;=</CODE> <VAR>y</VAR></TD>
<TD width="75%">True if <VAR>x</VAR> is greater than or equal to <VAR>y</VAR>.</TD></TR>
<TR>
<TD width="25%"><VAR>x</VAR> <CODE>==</CODE> <VAR>y</VAR></TD>
<TD width="75%">True if <VAR>x</VAR> is equal to <VAR>y</VAR>.</TD></TR>
<TR>
<TD width="25%"><VAR>x</VAR> <CODE>!=</CODE> <VAR>y</VAR></TD>
<TD width="75%">True if <VAR>x</VAR> is not equal to <VAR>y</VAR>.</TD></TR>
<TR>
<TD width="25%"><VAR>x</VAR> <CODE>~</CODE> <VAR>y</VAR></TD>
<TD width="75%">True if the string <VAR>x</VAR> matches the regexp denoted by <VAR>y</VAR>.</TD></TR>
<TR>
<TD width="25%"><VAR>x</VAR> <CODE>!~</CODE> <VAR>y</VAR></TD>
<TD width="75%">True if the string <VAR>x</VAR> does not match the regexp denoted by <VAR>y</VAR>.</TD></TR>
<TR>
<TD width="25%"><VAR>subscript</VAR> <CODE>in</CODE> <VAR>array</VAR></TD>
<TD width="75%">True if the array <VAR>array</VAR> has an element with the subscript <VAR>subscript</VAR>.</TD></TR></TBODY></TABLE>
<DIV class=float-caption>
<P><STRONG>Table 6.3: </STRONG>Relational Operators</P></DIV></DIV>
<P>Comparison expressions have the value one if true and zero if false. When comparing operands of mixed types, numeric operands are converted to strings using the value of <CODE>CONVFMT</CODE> (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Conversion">Conversion</A>). </P>
<P>Strings are compared by comparing the first character of each, then the second character of each, and so on. Thus, <CODE>"10"</CODE> is less than <CODE>"9"</CODE>. If there are two strings where one is a prefix of the other, the shorter string is less than the longer one. Thus, <CODE>"abc"</CODE> is less than <CODE>"abcd"</CODE>. </P><A name=index-troubleshooting_002c-_003d_003d-operator></A>
<P>It is very easy to accidentally mistype the &#8216;<SAMP>==</SAMP>&#8217; operator and leave off one of the &#8216;<SAMP>=</SAMP>&#8217; characters. The result is still valid <CODE>awk</CODE> code, but the program does not do what is intended: </P>
<DIV class=example><PRE class=example>if (a = b)   # oops! should be a == b
   &#8230;
else
   &#8230;
</PRE></DIV>
<P>Unless <CODE>b</CODE> happens to be zero or the null string, the <CODE>if</CODE> part of the test always succeeds. Because the operators are so similar, this kind of error is very difficult to spot when scanning the source code. </P><A name=index-gawk_002c-comparison-operators-and></A>
<P>The following table of expressions illustrates the kind of comparison <CODE>gawk</CODE> performs, as well as what the result of the comparison is: </P>
<DL compact>
<DT><CODE>1.5 &lt;= 2.0</CODE></DT>
<DD>
<P>numeric comparison (true) </P></DD>
<DT><CODE>"abc" &gt;= "xyz"</CODE></DT>
<DD>
<P>string comparison (false) </P></DD>
<DT><CODE>1.5 != " +2"</CODE></DT>
<DD>
<P>string comparison (true) </P></DD>
<DT><CODE>"1e2" &lt; "3"</CODE></DT>
<DD>
<P>string comparison (true) </P></DD>
<DT><CODE>a = 2; b = "2"</CODE></DT>
<DT><CODE>a == b</CODE></DT>
<DD>
<P>string comparison (true) </P></DD>
<DT><CODE>a = 2; b = " +2"</CODE></DT>
<DT><CODE>a == b</CODE></DT>
<DD>
<P>string comparison (false) </P></DD></DL>
<P>In this example: </P>
<DIV class=example><PRE class=example>$ <KBD><EM>echo 1e2 3 | awk '{ print ($1 &lt; $2) ? "true" : "false" }'</EM></KBD>
-| false
</PRE></DIV><A name=index-comparison-expressions_002c-string-vs_002e-regexp></A>
<P>the result is &#8216;<SAMP>false</SAMP>&#8217; because both <CODE>$1</CODE> and <CODE>$2</CODE> are user input. They are numeric strings&#8212;therefore both have the <VAR>strnum</VAR> attribute, dictating a numeric comparison. The purpose of the comparison rules and the use of numeric strings is to attempt to produce the behavior that is &#8220;least surprising,&#8221; while still &#8220;doing the right thing.&#8221; </P>
<P>String comparisons and regular expression comparisons are very different. For example: </P>
<DIV class=example><PRE class=example>x == "foo"
</PRE></DIV>
<P>has the value one, or is true if the variable <CODE>x</CODE> is precisely &#8216;<SAMP>foo</SAMP>&#8217;. By contrast: </P>
<DIV class=example><PRE class=example>x ~ /foo/
</PRE></DIV>
<P>has the value one if <CODE>x</CODE> contains &#8216;<SAMP>foo</SAMP>&#8217;, such as <CODE>"Oh, what a fool am I!"</CODE>. </P><A name=index-_007e-_0028tilde_0029_002c-_007e-operator-5></A><A name=index-tilde-_0028_007e_0029_002c-_007e-operator-5></A><A name=index-_0021-_0028exclamation-point_0029_002c-_0021_007e-operator-5></A><A name=index-exclamation-point-_0028_0021_0029_002c-_0021_007e-operator-5></A>
<P>The righthand operand of the &#8216;<SAMP>~</SAMP>&#8217; and &#8216;<SAMP>!~</SAMP>&#8217; operators may be either a regexp constant (<CODE>/&#8230;/</CODE>) or an ordinary expression. In the latter case, the value of the expression as a string is used as a dynamic regexp (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Regexp-Usage">Regexp Usage</A>; also see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Computed-Regexps">Computed Regexps</A>). </P><A name=index-awk_002c-regexp-constants-and></A><A name=index-regexp-constants-2></A>
<P>In modern implementations of <CODE>awk</CODE>, a constant regular expression in slashes by itself is also an expression. The regexp <CODE>/<VAR>regexp</VAR>/</CODE> is an abbreviation for the following comparison expression: </P>
<DIV class=example><PRE class=example>$0 ~ /<VAR>regexp</VAR>/
</PRE></DIV>
<P>One special place where <CODE>/foo/</CODE> is <EM>not</EM> an abbreviation for &#8216;<SAMP>$0 ~ /foo/</SAMP>&#8217; is when it is the righthand operand of &#8216;<SAMP>~</SAMP>&#8217; or &#8216;<SAMP>!~</SAMP>&#8217;. See <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Using-Constant-Regexps">Using Constant Regexps</A>, where this is discussed in more detail.