<H3 class=section>6.4 Function Calls</H3><A name=index-function-calls></A>
<P>A <EM>function</EM> is a name for a particular calculation. This enables you to ask for it by name at any point in the program. For example, the function <CODE>sqrt()</CODE> computes the square root of a number. </P><A name=index-functions_002c-built_002din></A>
<P>A fixed set of functions are <EM>built-in</EM>, which means they are available in every <CODE>awk</CODE> program. The <CODE>sqrt()</CODE> function is one of these. See <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Built_002din">Built-in</A>, for a list of built-in functions and their descriptions. In addition, you can define functions for use in your program. See <A href="http://www.gnu.org/software/gawk/manual/gawk.html#User_002ddefined">User-defined</A>, for instructions on how to do this. </P><A name=index-arguments_002c-in-function-calls></A>
<P>The way to use a function is with a <EM>function call</EM> expression, which consists of the function name followed immediately by a list of <EM>arguments</EM> in parentheses. The arguments are expressions that provide the raw materials for the function&#8217;s calculations. When there is more than one argument, they are separated by commas. If there are no arguments, just write &#8216;<SAMP>()</SAMP>&#8217; after the function name. The following examples show function calls with and without arguments: </P>
<DIV class=example><PRE class=example>sqrt(x^2 + y^2)        <I>one argument</I>
atan2(y, x)            <I>two arguments</I>
rand()                 <I>no arguments</I>
</PRE></DIV><A name=index-troubleshooting_002c-function-call-syntax></A>
<BLOCKQUOTE>
<P><B>CAUTION:</B> Do not put any space between the function name and the open-parenthesis! A user-defined function name looks just like the name of a variable&#8212;a space would make the expression look like concatenation of a variable with an expression inside parentheses. With built-in functions, space before the parenthesis is harmless, but it is best not to get into the habit of using space to avoid mistakes with user-defined functions. </P></BLOCKQUOTE>
<P>Each function expects a particular number of arguments. For example, the <CODE>sqrt()</CODE> function must be called with a single argument, the number of which to take the square root: </P>
<DIV class=example><PRE class=example>sqrt(<VAR>argument</VAR>)
</PRE></DIV>
<P>Some of the built-in functions have one or more optional arguments. If those arguments are not supplied, the functions use a reasonable default value. See <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Built_002din">Built-in</A>, for full details. If arguments are omitted in calls to user-defined functions, then those arguments are treated as local variables and initialized to the empty string (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#User_002ddefined">User-defined</A>). </P>
<P>As an advanced feature, <CODE>gawk</CODE> provides indirect function calls, which is a way to choose the function to call at runtime, instead of when you write the source code to your program. We defer discussion of this feature until later; see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Indirect-Calls">Indirect Calls</A>. </P><A name=index-side-effects_002c-function-calls></A>
<P>Like every other expression, the function call has a value, which is computed by the function based on the arguments you give it. In this example, the value of &#8216;<SAMP>sqrt(<VAR>argument</VAR>)</SAMP>&#8217; is the square root of <VAR>argument</VAR>. The following program reads numbers, one number per line, and prints the square root of each one: </P>
<DIV class=example><PRE class=example>$ <KBD><EM>awk '{ print "The square root of", $1, "is", sqrt($1) }'</EM></KBD>
<KBD><EM>1</EM></KBD>
-| The square root of 1 is 1
<KBD><EM>3</EM></KBD>
-| The square root of 3 is 1.73205
<KBD><EM>5</EM></KBD>
-| The square root of 5 is 2.23607
<KBD><EM>Ctrl-d</EM></KBD>
</PRE></DIV>
<P>A function can also have side effects, such as assigning values to certain variables or doing I/O. This program shows how the <CODE>match()</CODE> function (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#String-Functions">String Functions</A>) changes the variables <CODE>RSTART</CODE> and <CODE>RLENGTH</CODE>: </P>
<DIV class=example><PRE class=example>{
    if (match($1, $2))
        print RSTART, RLENGTH
    else
        print "no match"
}
</PRE></DIV>
<P>Here is a sample run: </P>
<DIV class=example><PRE class=example>$ <KBD><EM>awk -f matchit.awk</EM></KBD>
<KBD><EM>aaccdd  c+</EM></KBD>
-| 3 2
<KBD><EM>foo     bar</EM></KBD>
-| no match
<KBD><EM>abcdefg e</EM></KBD>
-| 5 1
</PRE></DIV>