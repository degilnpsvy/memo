<H4 class=subsection>7.4.3 The <CODE>do</CODE>-<CODE>while</CODE> Statement</H4><A name=index-do_002dwhile-statement></A><A name=index-loops_002c-do_002dwhile></A>
<P>The <CODE>do</CODE> loop is a variation of the <CODE>while</CODE> looping statement. The <CODE>do</CODE> loop executes the <VAR>body</VAR> once and then repeats the <VAR>body</VAR> as long as the <VAR>condition</VAR> is true. It looks like this: </P>
<DIV class=example><PRE class=example>do
  <VAR>body</VAR>
while (<VAR>condition</VAR>)
</PRE></DIV>
<P>Even if the <VAR>condition</VAR> is false at the start, the <VAR>body</VAR> is executed at least once (and only once, unless executing <VAR>body</VAR> makes <VAR>condition</VAR> true). Contrast this with the corresponding <CODE>while</CODE> statement: </P>
<DIV class=example><PRE class=example>while (<VAR>condition</VAR>)
  <VAR>body</VAR>
</PRE></DIV>
<P>This statement does not execute <VAR>body</VAR> even once if the <VAR>condition</VAR> is false to begin with. The following is an example of a <CODE>do</CODE> statement: </P>
<DIV class=example><PRE class=example>{
       i = 1
       do {
          print $0
          i++
       } while (i &lt;= 10)
}
</PRE></DIV>
<P>This program prints each input record 10 times. However, it isn&#8217;t a very realistic example, since in this case an ordinary <CODE>while</CODE> would do just as well. This situation reflects actual experience; only occasionally is there a real use for a <CODE>do</CODE> statement.