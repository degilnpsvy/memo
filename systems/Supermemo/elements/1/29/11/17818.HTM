<H4 class=subsection>7.4.8 The <CODE>next</CODE> Statement</H4><A name=index-next-statement-1></A>
<P>The <CODE>next</CODE> statement forces <CODE>awk</CODE> to immediately stop processing the current record and go on to the next record. This means that no further rules are executed for the current record, and the rest of the current rule&#8217;s action isn&#8217;t executed. </P>
<P>Contrast this with the effect of the <CODE>getline</CODE> function (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Getline">Getline</A>). That also causes <CODE>awk</CODE> to read the next record immediately, but it does not alter the flow of control in any way (i.e., the rest of the current action executes with a new input record). </P><A name=index-awk-programs_002c-execution-of></A>
<P>At the highest level, <CODE>awk</CODE> program execution is a loop that reads an input record and then tests each rule&#8217;s pattern against it. If you think of this loop as a <CODE>for</CODE> statement whose body contains the rules, then the <CODE>next</CODE> statement is analogous to a <CODE>continue</CODE> statement. It skips to the end of the body of this implicit loop and executes the increment (which reads another record). </P>
<P>For example, suppose an <CODE>awk</CODE> program works only on records with four fields, and it shouldn&#8217;t fail when given bad input. To avoid complicating the rest of the program, write a &#8220;weed out&#8221; rule near the beginning, in the following manner: </P>
<DIV class=example><PRE class=example>NF != 4 {
  err = sprintf("%s:%d: skipped: NF != 4\n", FILENAME, FNR)
  print err &gt; "/dev/stderr"
  next
}
</PRE></DIV>
<P>Because of the <CODE>next</CODE> statement, the program&#8217;s subsequent rules won&#8217;t see the bad record. The error message is redirected to the standard error output stream, as error messages should be. For more detail see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Special-Files">Special Files</A>. </P>
<P>If the <CODE>next</CODE> statement causes the end of the input to be reached, then the code in any <CODE>END</CODE> rules is executed. See <A href="http://www.gnu.org/software/gawk/manual/gawk.html#BEGIN_002fEND">BEGIN/END</A>. </P>
<P>The <CODE>next</CODE> statement is not allowed inside <CODE>BEGINFILE</CODE> and <CODE>ENDFILE</CODE> rules. See <A href="http://www.gnu.org/software/gawk/manual/gawk.html#BEGINFILE_002fENDFILE">BEGINFILE/ENDFILE</A>. </P><A name=index-BEGIN-pattern_002c-next_002fnextfile-statements-and-1></A><A name=index-END-pattern_002c-next_002fnextfile-statements-and-1></A><A name=index-POSIX-awk_002c-next_002fnextfile-statements-and></A><A name=index-next-statement_002c-user_002ddefined-functions-and></A><A name=index-functions_002c-user_002ddefined_002c-next_002fnextfile-statements-and></A>
<P>According to the POSIX standard, the behavior is undefined if the <CODE>next</CODE> statement is used in a <CODE>BEGIN</CODE> or <CODE>END</CODE> rule. <CODE>gawk</CODE> treats it as a syntax error. Although POSIX permits it, some other <CODE>awk</CODE> implementations don&#8217;t allow the <CODE>next</CODE> statement inside function bodies (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#User_002ddefined">User-defined</A>). Just as with any other <CODE>next</CODE> statement, a <CODE>next</CODE> statement inside a function body reads the next record and starts processing it with the first rule in the program.