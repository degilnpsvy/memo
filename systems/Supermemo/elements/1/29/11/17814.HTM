<H4 class=subsection>7.4.4 The <CODE>for</CODE> Statement</H4><A name=index-for-statement></A><A name=index-loops_002c-for_002c-iterative></A>
<P>The <CODE>for</CODE> statement makes it more convenient to count iterations of a loop. The general form of the <CODE>for</CODE> statement looks like this: </P>
<DIV class=example><PRE class=example>for (<VAR>initialization</VAR>; <VAR>condition</VAR>; <VAR>increment</VAR>)
  <VAR>body</VAR>
</PRE></DIV>
<P>The <VAR>initialization</VAR>, <VAR>condition</VAR>, and <VAR>increment</VAR> parts are arbitrary <CODE>awk</CODE> expressions, and <VAR>body</VAR> stands for any <CODE>awk</CODE> statement. </P>
<P>The <CODE>for</CODE> statement starts by executing <VAR>initialization</VAR>. Then, as long as the <VAR>condition</VAR> is true, it repeatedly executes <VAR>body</VAR> and then <VAR>increment</VAR>. Typically, <VAR>initialization</VAR> sets a variable to either zero or one, <VAR>increment</VAR> adds one to it, and <VAR>condition</VAR> compares it against the desired number of iterations. For example: </P>
<DIV class=example><PRE class=example>awk '{
       for (i = 1; i &lt;= 3; i++)
          print $i
}' inventory-shipped
</PRE></DIV>
<P>This prints the first three fields of each input record, with one field per line. </P>
<P>It isn&#8217;t possible to set more than one variable in the <VAR>initialization</VAR> part without using a multiple assignment statement such as &#8216;<SAMP>x = y = 0</SAMP>&#8217;. This makes sense only if all the initial values are equal. (But it is possible to initialize additional variables by writing their assignments as separate statements preceding the <CODE>for</CODE> loop.) </P>
<P>The same is true of the <VAR>increment</VAR> part. Incrementing additional variables requires separate statements at the end of the loop. The C compound expression, using C&#8217;s comma operator, is useful in this context but it is not supported in <CODE>awk</CODE>. </P>
<P>Most often, <VAR>increment</VAR> is an increment expression, as in the previous example. But this is not required; it can be any expression whatsoever. For example, the following statement prints all the powers of two between 1 and 100: </P>
<DIV class=example><PRE class=example>for (i = 1; i &lt;= 100; i *= 2)
  print i
</PRE></DIV>
<P>If there is nothing to be done, any of the three expressions in the parentheses following the <CODE>for</CODE> keyword may be omitted. Thus, &#8216;<SAMP>for&nbsp;(;&nbsp;x&nbsp;&gt;&nbsp;0;)</SAMP>&#8217;<!-- /@w --> is equivalent to &#8216;<SAMP>while&nbsp;(x&nbsp;&gt;&nbsp;0)</SAMP>&#8217;<!-- /@w -->. If the <VAR>condition</VAR> is omitted, it is treated as true, effectively yielding an <EM>infinite loop</EM> (i.e., a loop that never terminates). </P>
<P>In most cases, a <CODE>for</CODE> loop is an abbreviation for a <CODE>while</CODE> loop, as shown here: </P>
<DIV class=example><PRE class=example><VAR>initialization</VAR>
while (<VAR>condition</VAR>) {
  <VAR>body</VAR>
  <VAR>increment</VAR>
}
</PRE></DIV><A name=index-loops_002c-continue-statements-and></A>
<P>The only exception is when the <CODE>continue</CODE> statement (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Continue-Statement">Continue Statement</A>) is used inside the loop. Changing a <CODE>for</CODE> statement to a <CODE>while</CODE> statement in this way can change the effect of the <CODE>continue</CODE> statement inside the loop. </P>
<P>The <CODE>awk</CODE> language has a <CODE>for</CODE> statement in addition to a <CODE>while</CODE> statement because a <CODE>for</CODE> loop is often both less work to type and more natural to think of. Counting the number of iterations is very common in loops. It can be easier to think of this counting as part of looping rather than as something to do inside the loop. </P><A name=index-in-operator-2></A>
<P>There is an alternate version of the <CODE>for</CODE> loop, for iterating over all the indices of an array: </P>
<DIV class=example><PRE class=example>for (i in array)
    <VAR>do something with</VAR> array[i]
</PRE></DIV>
<P>See <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Scanning-an-Array">Scanning an Array</A>, for more information on this version of the <CODE>for</CODE> loop.