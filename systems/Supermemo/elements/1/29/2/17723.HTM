<H3 class=section>3.5 <CODE>gawk</CODE>-Specific Regexp Operators</H3><A name=index-regular-expressions_002c-operators_002c-gawk></A><A name=index-gawk_002c-regular-expressions_002c-operators></A><A name=index-operators_002c-GNU_002dspecific></A><A name=index-regular-expressions_002c-operators_002c-for-words></A><A name=index-word_002c-regexp-definition-of></A>
<P>GNU software that deals with regular expressions provides a number of additional regexp operators. These operators are described in this section and are specific to <CODE>gawk</CODE>; they are not available in other <CODE>awk</CODE> implementations. Most of the additional operators deal with word matching. For our purposes, a <EM>word</EM> is a sequence of one or more letters, digits, or underscores (&#8216;<SAMP>_</SAMP>&#8217;): </P>
<DL compact>
<DD><A name=index-backslash-_0028_005c_0029_002c-_005cs-operator-_0028gawk_0029></A><A name=index-_005c-_0028backslash_0029_002c-_005cs-operator-_0028gawk_0029></A></DD>
<DT><CODE>\s</CODE></DT>
<DD>
<P>Matches any whitespace character. Think of it as shorthand for &#8216;<SAMP>[[:space:]]</SAMP>&#8217;<!-- /@w -->. </P><A name=index-backslash-_0028_005c_0029_002c-_005cS-operator-_0028gawk_0029></A><A name=index-_005c-_0028backslash_0029_002c-_005cS-operator-_0028gawk_0029></A></DD>
<DT><CODE>\S</CODE></DT>
<DD>
<P>Matches any character that is not whitespace. Think of it as shorthand for &#8216;<SAMP>[^[:space:]]</SAMP>&#8217;<!-- /@w -->. </P><A name=index-backslash-_0028_005c_0029_002c-_005cw-operator-_0028gawk_0029></A><A name=index-_005c-_0028backslash_0029_002c-_005cw-operator-_0028gawk_0029></A></DD>
<DT><CODE>\w</CODE></DT>
<DD>
<P>Matches any word-constituent character&#8212;that is, it matches any letter, digit, or underscore. Think of it as shorthand for &#8216;<SAMP><SPAN class=nolinebreak>[[:alnum:]_]</SPAN></SAMP>&#8217;<!-- /@w -->. </P><A name=index-backslash-_0028_005c_0029_002c-_005cW-operator-_0028gawk_0029></A><A name=index-_005c-_0028backslash_0029_002c-_005cW-operator-_0028gawk_0029></A></DD>
<DT><CODE>\W</CODE></DT>
<DD>
<P>Matches any character that is not word-constituent. Think of it as shorthand for &#8216;<SAMP><SPAN class=nolinebreak>[^[:alnum:]_]</SPAN></SAMP>&#8217;<!-- /@w -->. </P><A name=index-backslash-_0028_005c_0029_002c-_005c_003c-operator-_0028gawk_0029></A><A name=index-_005c-_0028backslash_0029_002c-_005c_003c-operator-_0028gawk_0029></A></DD>
<DT><CODE>\&lt;</CODE></DT>
<DD>
<P>Matches the empty string at the beginning of a word. For example, <CODE>/\&lt;away/</CODE> matches &#8216;<SAMP>away</SAMP>&#8217; but not &#8216;<SAMP>stowaway</SAMP>&#8217;. </P><A name=index-backslash-_0028_005c_0029_002c-_005c_003e-operator-_0028gawk_0029></A><A name=index-_005c-_0028backslash_0029_002c-_005c_003e-operator-_0028gawk_0029></A></DD>
<DT><CODE>\&gt;</CODE></DT>
<DD>
<P>Matches the empty string at the end of a word. For example, <CODE>/stow\&gt;/</CODE> matches &#8216;<SAMP>stow</SAMP>&#8217; but not &#8216;<SAMP>stowaway</SAMP>&#8217;. </P><A name=index-backslash-_0028_005c_0029_002c-_005cy-operator-_0028gawk_0029></A><A name=index-_005c-_0028backslash_0029_002c-_005cy-operator-_0028gawk_0029></A><A name=index-word-boundaries_002c-matching></A></DD>
<DT><CODE>\y</CODE></DT>
<DD>
<P>Matches the empty string at either the beginning or the end of a word (i.e., the word boundar<STRONG>y</STRONG>). For example, &#8216;<SAMP>\yballs?\y</SAMP>&#8217; matches either &#8216;<SAMP>ball</SAMP>&#8217; or &#8216;<SAMP>balls</SAMP>&#8217;, as a separate word. </P><A name=index-backslash-_0028_005c_0029_002c-_005cB-operator-_0028gawk_0029></A><A name=index-_005c-_0028backslash_0029_002c-_005cB-operator-_0028gawk_0029></A></DD>
<DT><CODE>\B</CODE></DT>
<DD>
<P>Matches the empty string that occurs between two word-constituent characters. For example, <CODE>/\Brat\B/</CODE> matches &#8216;<SAMP>crate</SAMP>&#8217; but it does not match &#8216;<SAMP>dirty rat</SAMP>&#8217;. &#8216;<SAMP>\B</SAMP>&#8217; is essentially the opposite of &#8216;<SAMP>\y</SAMP>&#8217;. </P></DD></DL><A name=index-buffers_002c-operators-for></A><A name=index-regular-expressions_002c-operators_002c-for-buffers></A><A name=index-operators_002c-string_002dmatching_002c-for-buffers></A>
<P>There are two other operators that work on buffers. In Emacs, a <EM>buffer</EM> is, naturally, an Emacs buffer. For other programs, <CODE>gawk</CODE>&#8217;s regexp library routines consider the entire string to match as the buffer. The operators are: </P>
<DL compact>
<DT><CODE>\`</CODE></DT>
<DD><A name=index-backslash-_0028_005c_0029_002c-_005c_0060-operator-_0028gawk_0029></A><A name=index-_005c-_0028backslash_0029_002c-_005c_0060-operator-_0028gawk_0029></A>
<P>Matches the empty string at the beginning of a buffer (string). </P><A name=index-backslash-_0028_005c_0029_002c-_005c_0027-operator-_0028gawk_0029></A><A name=index-_005c-_0028backslash_0029_002c-_005c_0027-operator-_0028gawk_0029></A></DD>
<DT><CODE>\'</CODE></DT>
<DD>
<P>Matches the empty string at the end of a buffer (string). </P></DD></DL><A name=index-_005e-_0028caret_0029_002c-regexp-operator-1></A><A name=index-caret-_0028_005e_0029_002c-regexp-operator-1></A><A name=index-_003f-_0028question-mark_0029_002c-regexp-operator-1></A><A name=index-question-mark-_0028_003f_0029_002c-regexp-operator-1></A>
<P>Because &#8216;<SAMP>^</SAMP>&#8217; and &#8216;<SAMP>$</SAMP>&#8217; always work in terms of the beginning and end of strings, these operators don&#8217;t add any new capabilities for <CODE>awk</CODE>. They are provided for compatibility with other GNU software. </P><A name=index-gawk_002c-word_002dboundary-operator></A><A name=index-word_002dboundary-operator-_0028gawk_0029></A><A name=index-operators_002c-word_002dboundary-_0028gawk_0029></A>
<P>In other GNU software, the word-boundary operator is &#8216;<SAMP>\b</SAMP>&#8217;. However, that conflicts with the <CODE>awk</CODE> language&#8217;s definition of &#8216;<SAMP>\b</SAMP>&#8217; as backspace, so <CODE>gawk</CODE> uses a different letter. An alternative method would have been to require two backslashes in the GNU operators, but this was deemed too confusing. The current method of using &#8216;<SAMP>\y</SAMP>&#8217; for the GNU &#8216;<SAMP>\b</SAMP>&#8217; appears to be the lesser of two evils. </P><A name=index-regular-expressions_002c-gawk_002c-command_002dline-options></A><A name=index-gawk_002c-command_002dline-options_002c-and-regular-expressions></A>
<P>The various command-line options (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Options">Options</A>) control how <CODE>gawk</CODE> interprets characters in regexps: </P>
<DL compact>
<DT>No options</DT>
<DD>
<P>In the default case, <CODE>gawk</CODE> provides all the facilities of POSIX regexps and the previously described GNU regexp operators. GNU regexp operators described in <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Regexp-Operators">Regexp Operators</A>. </P></DD>
<DT><CODE>--posix</CODE></DT>
<DD>
<P>Only POSIX regexps are supported; the GNU operators are not special (e.g., &#8216;<SAMP>\w</SAMP>&#8217; matches a literal &#8216;<SAMP>w</SAMP>&#8217;). Interval expressions are allowed. </P><A name=index-Brian-Kernighan_0027s-awk-3></A></DD>
<DT><CODE>--traditional</CODE></DT>
<DD>
<P>Traditional Unix <CODE>awk</CODE> regexps are matched. The GNU operators are not special, and interval expressions are not available. The POSIX character classes (&#8216;<SAMP>[[:alnum:]]</SAMP>&#8217;, etc.) are supported, as Brian Kernighan&#8217;s <CODE>awk</CODE> does support them. Characters described by octal and hexadecimal escape sequences are treated literally, even if they represent regexp metacharacters. </P></DD>
<DT><CODE>--re-interval</CODE></DT>
<DD>
<P>Allow interval expressions in regexps, if <SAMP>--traditional</SAMP> has been provided. Otherwise, interval expressions are available by default. </P></DD></DL>