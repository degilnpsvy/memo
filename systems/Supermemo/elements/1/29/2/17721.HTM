<H3 class=section>3.3 Regular Expression Operators</H3><A name=index-regular-expressions_002c-operators-1></A><A name=index-metacharacters-in-regular-expressions></A>
<P>You can combine regular expressions with special characters, called <EM>regular expression operators</EM> or <EM>metacharacters</EM>, to increase the power and versatility of regular expressions. </P>
<P>The escape sequences described earlier in <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Escape-Sequences">Escape Sequences</A>, are valid inside a regexp. They are introduced by a &#8216;<SAMP>\</SAMP>&#8217; and are recognized and converted into corresponding real characters as the very first step in processing regexps. </P>
<P>Here is a list of metacharacters. All characters that are not escape sequences and that are not listed in the table stand for themselves: </P>
<DL compact>
<DD><A name=index-backslash-_0028_005c_0029_002c-regexp-operator></A><A name=index-_005c-_0028backslash_0029_002c-regexp-operator></A></DD>
<DT><CODE>\</CODE></DT>
<DD>
<P>This is used to suppress the special meaning of a character when matching. For example, &#8216;<SAMP>\$</SAMP>&#8217; matches the character &#8216;<SAMP>$</SAMP>&#8217;. </P><A name=index-regular-expressions_002c-anchors-in></A><A name=index-Texinfo_002c-chapter-beginnings-in-files></A><A name=index-_005e-_0028caret_0029_002c-regexp-operator></A><A name=index-caret-_0028_005e_0029_002c-regexp-operator></A></DD>
<DT><CODE>^</CODE></DT>
<DD>
<P>This matches the beginning of a string. For example, &#8216;<SAMP>^@chapter</SAMP>&#8217; matches &#8216;<SAMP>@chapter</SAMP>&#8217; at the beginning of a string and can be used to identify chapter beginnings in Texinfo source files. The &#8216;<SAMP>^</SAMP>&#8217; is known as an <EM>anchor</EM>, because it anchors the pattern to match only at the beginning of the string. </P>
<P>It is important to realize that &#8216;<SAMP>^</SAMP>&#8217; does not match the beginning of a line embedded in a string. The condition is not true in the following example: </P>
<DIV class=example><PRE class=example>if ("line1\nLINE 2" ~ /^L/) &#8230;
</PRE></DIV><A name=index-_0024-_0028dollar-sign_0029_002c-regexp-operator></A><A name=index-dollar-sign-_0028_0024_0029_002c-regexp-operator></A></DD>
<DT><CODE>$</CODE></DT>
<DD>
<P>This is similar to &#8216;<SAMP>^</SAMP>&#8217;, but it matches only at the end of a string. For example, &#8216;<SAMP>p$</SAMP>&#8217; matches a record that ends with a &#8216;<SAMP>p</SAMP>&#8217;. The &#8216;<SAMP>$</SAMP>&#8217; is an anchor and does not match the end of a line embedded in a string. The condition in the following example is not true: </P>
<DIV class=example><PRE class=example>if ("line1\nLINE 2" ~ /1$/) &#8230;
</PRE></DIV><A name=index-_002e-_0028period_0029_002c-regexp-operator></A><A name=index-period-_0028_002e_0029_002c-regexp-operator></A></DD>
<DT><CODE>. <SPAN class=roman><FONT face=Batang>(period)</FONT></SPAN></CODE></DT>
<DD>
<P>This matches any single character, <EM>including</EM> the newline character. For example, &#8216;<SAMP>.P</SAMP>&#8217; matches any single character followed by a &#8216;<SAMP>P</SAMP>&#8217; in a string. Using concatenation, we can make a regular expression such as &#8216;<SAMP>U.A</SAMP>&#8217;, which matches any three-character sequence that begins with &#8216;<SAMP>U</SAMP>&#8217; and ends with &#8216;<SAMP>A</SAMP>&#8217;. </P><A name=index-POSIX-awk_002c-period-_0028_002e_0029_002c-using></A>
<P>In strict POSIX mode (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Options">Options</A>), &#8216;<SAMP>.</SAMP>&#8217; does not match the <SMALL><FONT size=2>NUL</FONT></SMALL> character, which is a character with all bits equal to zero. Otherwise, <SMALL><FONT size=2>NUL</FONT></SMALL> is just another character. Other versions of <CODE>awk</CODE> may not be able to match the <SMALL><FONT size=2>NUL</FONT></SMALL> character. </P><A name=index-_005b_005d-_0028square-brackets_0029_002c-regexp-operator></A><A name=index-square-brackets-_0028_005b_005d_0029_002c-regexp-operator></A><A name=index-bracket-expressions></A><A name=index-character-sets_002c-See-Also-bracket-expressions></A><A name=index-character-lists_002c-See-bracket-expressions></A><A name=index-character-classes_002c-See-bracket-expressions></A></DD>
<DT><CODE>[&#8230;]</CODE></DT>
<DD>
<P>This is called a <EM>bracket expression</EM>.<A href="http://www.gnu.org/software/gawk/manual/gawk.html#FOOT16" name=DOCF16><SUP>16</SUP></A> It matches any <EM>one</EM> of the characters that are enclosed in the square brackets. For example, &#8216;<SAMP>[MVX]</SAMP>&#8217; matches any one of the characters &#8216;<SAMP>M</SAMP>&#8217;, &#8216;<SAMP>V</SAMP>&#8217;, or &#8216;<SAMP>X</SAMP>&#8217; in a string. A full discussion of what can be inside the square brackets of a bracket expression is given in <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Bracket-Expressions">Bracket Expressions</A>. </P><A name=index-bracket-expressions_002c-complemented></A></DD>
<DT><CODE>[^ &#8230;]</CODE></DT>
<DD>
<P>This is a <EM>complemented bracket expression</EM>. The first character after the &#8216;<SAMP>[</SAMP>&#8217; <EM>must</EM> be a &#8216;<SAMP>^</SAMP>&#8217;. It matches any characters <EM>except</EM> those in the square brackets. For example, &#8216;<SAMP>[^awk]</SAMP>&#8217; matches any character that is not an &#8216;<SAMP>a</SAMP>&#8217;, &#8216;<SAMP>w</SAMP>&#8217;, or &#8216;<SAMP>k</SAMP>&#8217;. </P><A name=index-_007c-_0028vertical-bar_0029></A><A name=index-vertical-bar-_0028_007c_0029></A></DD>
<DT><CODE>|</CODE></DT>
<DD>
<P>This is the <EM>alternation operator</EM> and it is used to specify alternatives. The &#8216;<SAMP>|</SAMP>&#8217; has the lowest precedence of all the regular expression operators. For example, &#8216;<SAMP>^P|[[:digit:]]</SAMP>&#8217; matches any string that matches either &#8216;<SAMP>^P</SAMP>&#8217; or &#8216;<SAMP>[[:digit:]]</SAMP>&#8217;. This means it matches any string that starts with &#8216;<SAMP>P</SAMP>&#8217; or contains a digit. </P>
<P>The alternation applies to the largest possible regexps on either side. </P><A name=index-_0028_0029-_0028parentheses_0029_002c-regexp-operator></A><A name=index-parentheses-_0028_0029_002c-regexp-operator></A></DD>
<DT><CODE>(&#8230;)</CODE></DT>
<DD>
<P>Parentheses are used for grouping in regular expressions, as in arithmetic. They can be used to concatenate regular expressions containing the alternation operator, &#8216;<SAMP>|</SAMP>&#8217;. For example, &#8216;<SAMP>@(samp|code)\{[^}]+\}</SAMP>&#8217; matches both &#8216;<SAMP>@code{foo}</SAMP>&#8217; and &#8216;<SAMP>@samp{bar}</SAMP>&#8217;. (These are Texinfo formatting control sequences. The &#8216;<SAMP>+</SAMP>&#8217; is explained further on in this list.) </P><A name=index-_002a-_0028asterisk_0029_002c-_002a-operator_002c-as-regexp-operator></A><A name=index-asterisk-_0028_002a_0029_002c-_002a-operator_002c-as-regexp-operator></A></DD>
<DT><CODE>*</CODE></DT>
<DD>
<P>This symbol means that the preceding regular expression should be repeated as many times as necessary to find a match. For example, &#8216;<SAMP>ph*</SAMP>&#8217; applies the &#8216;<SAMP>*</SAMP>&#8217; symbol to the preceding &#8216;<SAMP>h</SAMP>&#8217; and looks for matches of one &#8216;<SAMP>p</SAMP>&#8217; followed by any number of &#8216;<SAMP>h</SAMP>&#8217;s. This also matches just &#8216;<SAMP>p</SAMP>&#8217; if no &#8216;<SAMP>h</SAMP>&#8217;s are present. </P>
<P>The &#8216;<SAMP>*</SAMP>&#8217; repeats the <EM>smallest</EM> possible preceding expression. (Use parentheses if you want to repeat a larger expression.) It finds as many repetitions as possible. For example, &#8216;<SAMP>awk '/\(c[ad][ad]*r x\)/ { print }' sample</SAMP>&#8217; prints every record in <SAMP>sample</SAMP> containing a string of the form &#8216;<SAMP>(car x)</SAMP>&#8217;, &#8216;<SAMP>(cdr x)</SAMP>&#8217;, &#8216;<SAMP>(cadr x)</SAMP>&#8217;, and so on. Notice the escaping of the parentheses by preceding them with backslashes. </P><A name=index-_002b-_0028plus-sign_0029_002c-regexp-operator></A><A name=index-plus-sign-_0028_002b_0029_002c-regexp-operator></A></DD>
<DT><CODE>+</CODE></DT>
<DD>
<P>This symbol is similar to &#8216;<SAMP>*</SAMP>&#8217;, except that the preceding expression must be matched at least once. This means that &#8216;<SAMP>wh+y</SAMP>&#8217; would match &#8216;<SAMP>why</SAMP>&#8217; and &#8216;<SAMP>whhy</SAMP>&#8217;, but not &#8216;<SAMP>wy</SAMP>&#8217;, whereas &#8216;<SAMP>wh*y</SAMP>&#8217; would match all three of these strings. The following is a simpler way of writing the last &#8216;<SAMP>*</SAMP>&#8217; example: </P>
<DIV class=example><PRE class=example>awk '/\(c[ad]+r x\)/ { print }' sample
</PRE></DIV><A name=index-_003f-_0028question-mark_0029_002c-regexp-operator></A><A name=index-question-mark-_0028_003f_0029_002c-regexp-operator></A></DD>
<DT><CODE>?</CODE></DT>
<DD>
<P>This symbol is similar to &#8216;<SAMP>*</SAMP>&#8217;, except that the preceding expression can be matched either once or not at all. For example, &#8216;<SAMP>fe?d</SAMP>&#8217; matches &#8216;<SAMP>fed</SAMP>&#8217; and &#8216;<SAMP>fd</SAMP>&#8217;, but nothing else. </P><A name=index-interval-expressions_002c-regexp-operator></A></DD>
<DT><CODE>{<VAR>n</VAR>}</CODE></DT>
<DT><CODE>{<VAR>n</VAR>,}</CODE></DT>
<DT><CODE>{<VAR>n</VAR>,<VAR>m</VAR>}</CODE></DT>
<DD>
<P>One or two numbers inside braces denote an <EM>interval expression</EM>. If there is one number in the braces, the preceding regexp is repeated <VAR>n</VAR> times. If there are two numbers separated by a comma, the preceding regexp is repeated <VAR>n</VAR> to <VAR>m</VAR> times. If there is one number followed by a comma, then the preceding regexp is repeated at least <VAR>n</VAR> times: </P>
<DL compact>
<DT><CODE>wh{3}y</CODE></DT>
<DD>
<P>Matches &#8216;<SAMP>whhhy</SAMP>&#8217;, but not &#8216;<SAMP>why</SAMP>&#8217; or &#8216;<SAMP>whhhhy</SAMP>&#8217;. </P></DD>
<DT><CODE>wh{3,5}y</CODE></DT>
<DD>
<P>Matches &#8216;<SAMP>whhhy</SAMP>&#8217;, &#8216;<SAMP>whhhhy</SAMP>&#8217;, or &#8216;<SAMP>whhhhhy</SAMP>&#8217;, only. </P></DD>
<DT><CODE>wh{2,}y</CODE></DT>
<DD>
<P>Matches &#8216;<SAMP>whhy</SAMP>&#8217; or &#8216;<SAMP>whhhy</SAMP>&#8217;, and so on. </P></DD></DL><A name=index-POSIX-awk_002c-interval-expressions-in></A>
<P>Interval expressions were not traditionally available in <CODE>awk</CODE>. They were added as part of the POSIX standard to make <CODE>awk</CODE> and <CODE>egrep</CODE> consistent with each other. </P><A name=index-gawk_002c-interval-expressions-and></A>
<P>Initially, because old programs may use &#8216;<SAMP>{</SAMP>&#8217; and &#8216;<SAMP>}</SAMP>&#8217; in regexp constants, <CODE>gawk</CODE> did <EM>not</EM> match interval expressions in regexps. </P>
<P>However, beginning with version 4.0, <CODE>gawk</CODE> does match interval expressions by default. This is because compatibility with POSIX has become more important to most <CODE>gawk</CODE> users than compatibility with old programs. </P>
<P>For programs that use &#8216;<SAMP>{</SAMP>&#8217; and &#8216;<SAMP>}</SAMP>&#8217; in regexp constants, it is good practice to always escape them with a backslash. Then the regexp constants are valid and work the way you want them to, using any version of <CODE>awk</CODE>.<A href="http://www.gnu.org/software/gawk/manual/gawk.html#FOOT17" name=DOCF17><SUP>17</SUP></A> </P>
<P>Finally, when &#8216;<SAMP>{</SAMP>&#8217; and &#8216;<SAMP>}</SAMP>&#8217; appear in regexp constants in a way that cannot be interpreted as an interval expression (such as <CODE>/q{a}/</CODE>), then they stand for themselves. </P></DD></DL><A name=index-precedence_002c-regexp-operators></A><A name=index-regular-expressions_002c-operators_002c-precedence-of></A>
<P>In regular expressions, the &#8216;<SAMP>*</SAMP>&#8217;, &#8216;<SAMP>+</SAMP>&#8217;, and &#8216;<SAMP>?</SAMP>&#8217; operators, as well as the braces &#8216;<SAMP>{</SAMP>&#8217; and &#8216;<SAMP>}</SAMP>&#8217;, have the highest precedence, followed by concatenation, and finally by &#8216;<SAMP>|</SAMP>&#8217;. As in arithmetic, parentheses can change how operators are grouped. </P><A name=index-POSIX-awk_002c-regular-expressions-and></A><A name=index-gawk_002c-regular-expressions_002c-precedence></A>
<P>In POSIX <CODE>awk</CODE> and <CODE>gawk</CODE>, the &#8216;<SAMP>*</SAMP>&#8217;, &#8216;<SAMP>+</SAMP>&#8217;, and &#8216;<SAMP>?</SAMP>&#8217; operators stand for themselves when there is nothing in the regexp that precedes them. For example, <CODE>/+/</CODE> matches a literal plus sign. However, many other versions of <CODE>awk</CODE> treat such a usage as a syntax error. </P>
<P>If <CODE>gawk</CODE> is in compatibility mode (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Options">Options</A>), interval expressions are not available in regular expressions.