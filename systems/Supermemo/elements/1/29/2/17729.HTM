<H3 class=section>4.2 Examining Fields</H3><A name=index-examining-fields></A><A name=index-fields-1></A><A name=index-accessing-fields></A><A name=index-fields_002c-examining></A><A name=index-POSIX-awk_002c-field-separators-and></A><A name=index-field-separators_002c-POSIX-and></A><A name=index-separators_002c-field_002c-POSIX-and></A>
<P>When <CODE>awk</CODE> reads an input record, the record is automatically <EM>parsed</EM> or separated by the <CODE>awk</CODE> utility into chunks called <EM>fields</EM>. By default, fields are separated by <EM>whitespace</EM>, like words in a line. Whitespace in <CODE>awk</CODE> means any string of one or more spaces, TABs, or newlines;<A href="http://www.gnu.org/software/gawk/manual/gawk.html#FOOT21" name=DOCF21><SUP>21</SUP></A> other characters, such as formfeed, vertical tab, etc., that are considered whitespace by other languages, are <EM>not</EM> considered whitespace by <CODE>awk</CODE>. </P>
<P>The purpose of fields is to make it more convenient for you to refer to these pieces of the record. You don&#8217;t have to use them&#8212;you can operate on the whole record if you want&#8212;but fields are what make simple <CODE>awk</CODE> programs so powerful. </P><A name=index-field-operator-_0024></A><A name=index-_0024-_0028dollar-sign_0029_002c-_0024-field-operator></A><A name=index-dollar-sign-_0028_0024_0029_002c-_0024-field-operator></A><A name=index-field-operators_002c-dollar-sign-as></A>
<P>A dollar-sign (&#8216;<SAMP>$</SAMP>&#8217;) is used to refer to a field in an <CODE>awk</CODE> program, followed by the number of the field you want. Thus, <CODE>$1</CODE> refers to the first field, <CODE>$2</CODE> to the second, and so on. (Unlike the Unix shells, the field numbers are not limited to single digits. <CODE>$127</CODE> is the one hundred twenty-seventh field in the record.) For example, suppose the following is a line of input: </P>
<DIV class=example><PRE class=example>This seems like a pretty nice example.
</PRE></DIV>
<P>Here the first field, or <CODE>$1</CODE>, is &#8216;<SAMP>This</SAMP>&#8217;, the second field, or <CODE>$2</CODE>, is &#8216;<SAMP>seems</SAMP>&#8217;, and so on. Note that the last field, <CODE>$7</CODE>, is &#8216;<SAMP>example.</SAMP>&#8217;. Because there is no space between the &#8216;<SAMP>e</SAMP>&#8217; and the &#8216;<SAMP>.</SAMP>&#8217;, the period is considered part of the seventh field. </P><A name=index-NF-variable></A><A name=index-fields_002c-number-of></A>
<P><CODE>NF</CODE> is a built-in variable whose value is the number of fields in the current record. <CODE>awk</CODE> automatically updates the value of <CODE>NF</CODE> each time it reads a record. No matter how many fields there are, the last field in a record can be represented by <CODE>$NF</CODE>. So, <CODE>$NF</CODE> is the same as <CODE>$7</CODE>, which is &#8216;<SAMP>example.</SAMP>&#8217;. If you try to reference a field beyond the last one (such as <CODE>$8</CODE> when the record has only seven fields), you get the empty string. (If used in a numeric operation, you get zero.) </P>
<P>The use of <CODE>$0</CODE>, which looks like a reference to the &#8220;zero-th&#8221; field, is a special case: it represents the whole input record when you are not interested in specific fields. Here are some more examples: </P>
<DIV class=example><PRE class=example>$ <KBD><EM>awk '$1 ~ /li/ { print $0 }' mail-list</EM></KBD>
-| Amelia       555-5553     amelia.zodiacusque@gmail.com    F
-| Julie        555-6699     julie.perscrutabor@skeeve.com   F
</PRE></DIV>
<P>This example prints each record in the file <SAMP>mail-list</SAMP> whose first field contains the string &#8216;<SAMP>li</SAMP>&#8217;. The operator &#8216;<SAMP>~</SAMP>&#8217; is called a <EM>matching operator</EM> (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Regexp-Usage">Regexp Usage</A>); it tests whether a string (here, the field <CODE>$1</CODE>) matches a given regular expression. </P>
<P>By contrast, the following example looks for &#8216;<SAMP>li</SAMP>&#8217; in <EM>the entire record</EM> and prints the first field and the last field for each matching input record: </P>
<DIV class=example><PRE class=example>$ <KBD><EM>awk '/li/ { print $1, $NF }' mail-list</EM></KBD>
-| Amelia F
-| Broderick R
-| Julie F
-| Samuel A
</PRE></DIV>