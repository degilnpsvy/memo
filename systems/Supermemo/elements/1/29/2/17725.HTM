<H3 class=section>3.7 How Much Text Matches?</H3><A name=index-regular-expressions_002c-leftmost-longest-match></A>
<P>Consider the following: </P>
<DIV class=example><PRE class=example>echo aaaabcd | awk '{ sub(/a+/, "&lt;A&gt;"); print }'
</PRE></DIV>
<P>This example uses the <CODE>sub()</CODE> function (which we haven&#8217;t discussed yet; see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#String-Functions">String Functions</A>) to make a change to the input record. Here, the regexp <CODE>/a+/</CODE> indicates &#8220;one or more &#8216;<SAMP>a</SAMP>&#8217; characters,&#8221; and the replacement text is &#8216;<SAMP>&lt;A&gt;</SAMP>&#8217;. </P>
<P>The input contains four &#8216;<SAMP>a</SAMP>&#8217; characters. <CODE>awk</CODE> (and POSIX) regular expressions always match the leftmost, <EM>longest</EM> sequence of input characters that can match. Thus, all four &#8216;<SAMP>a</SAMP>&#8217; characters are replaced with &#8216;<SAMP>&lt;A&gt;</SAMP>&#8217; in this example: </P>
<DIV class=example><PRE class=example>$ <KBD><EM>echo aaaabcd | awk '{ sub(/a+/, "&lt;A&gt;"); print }'</EM></KBD>
-| &lt;A&gt;bcd
</PRE></DIV>
<P>For simple match/no-match tests, this is not so important. But when doing text matching and substitutions with the <CODE>match()</CODE>, <CODE>sub()</CODE>, <CODE>gsub()</CODE>, and <CODE>gensub()</CODE> functions, it is very important. Understanding this principle is also important for regexp-based record and field splitting (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Records">Records</A>, and also see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Field-Separators">Field Separators</A>).