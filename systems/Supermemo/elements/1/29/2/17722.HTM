<H3 class=section>3.4 Using Bracket Expressions</H3><A name=index-bracket-expressions-1></A><A name=index-bracket-expressions_002c-range-expressions></A><A name=index-range-expressions-_0028regexps_0029></A><A name=index-character-lists-in-regular-expression></A>
<P>As mentioned earlier, a bracket expression matches any character amongst those listed between the opening and closing square brackets. </P>
<P>Within a bracket expression, a <EM>range expression</EM> consists of two characters separated by a hyphen. It matches any single character that sorts between the two characters, based upon the system&#8217;s native character set. For example, &#8216;<SAMP>[0-9]</SAMP>&#8217; is equivalent to &#8216;<SAMP>[0123456789]</SAMP>&#8217;. (See <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Ranges-and-Locales">Ranges and Locales</A>, for an explanation of how the POSIX standard and <CODE>gawk</CODE> have changed over time. This is mainly of historical interest.) </P><A name=index-_005c-_0028backslash_0029_002c-in-bracket-expressions></A><A name=index-backslash-_0028_005c_0029_002c-in-bracket-expressions></A><A name=index-_005e-_0028caret_0029_002c-in-bracket-expressions></A><A name=index-caret-_0028_005e_0029_002c-in-bracket-expressions></A><A name=index-_002d-_0028hyphen_0029_002c-in-bracket-expressions></A><A name=index-hyphen-_0028_002d_0029_002c-in-bracket-expressions></A>
<P>To include one of the characters &#8216;<SAMP>\</SAMP>&#8217;, &#8216;<SAMP>]</SAMP>&#8217;, &#8216;<SAMP>-</SAMP>&#8217;, or &#8216;<SAMP>^</SAMP>&#8217; in a bracket expression, put a &#8216;<SAMP>\</SAMP>&#8217; in front of it. For example: </P>
<DIV class=example><PRE class=example>[d\]]
</PRE></DIV>
<P>matches either &#8216;<SAMP>d</SAMP>&#8217; or &#8216;<SAMP>]</SAMP>&#8217;. </P><A name=index-POSIX-awk_002c-bracket-expressions-and></A><A name=index-Extended-Regular-Expressions-_0028EREs_0029></A><A name=index-EREs-_0028Extended-Regular-Expressions_0029></A><A name=index-egrep-utility></A>
<P>This treatment of &#8216;<SAMP>\</SAMP>&#8217; in bracket expressions is compatible with other <CODE>awk</CODE> implementations and is also mandated by POSIX. The regular expressions in <CODE>awk</CODE> are a superset of the POSIX specification for Extended Regular Expressions (EREs). POSIX EREs are based on the regular expressions accepted by the traditional <CODE>egrep</CODE> utility. </P><A name=index-bracket-expressions_002c-character-classes></A><A name=index-POSIX-awk_002c-bracket-expressions-and_002c-character-classes></A>
<P><EM>Character classes</EM> are a feature introduced in the POSIX standard. A character class is a special notation for describing lists of characters that have a specific attribute, but the actual characters can vary from country to country and/or from character set to character set. For example, the notion of what is an alphabetic character differs between the United States and France. </P>
<P>A character class is only valid in a regexp <EM>inside</EM> the brackets of a bracket expression. Character classes consist of &#8216;<SAMP>[:</SAMP>&#8217;, a keyword denoting the class, and &#8216;<SAMP>:]</SAMP>&#8217;. <A href="http://www.gnu.org/software/gawk/manual/gawk.html#table_002dchar_002dclasses">Table 3.1</A> lists the character classes defined by the POSIX standard. </P>
<DIV class=float><A name=table_002dchar_002dclasses></A>
<TABLE>
<THEAD>
<TR>
<TH width="15%">Class</TH>
<TH width="85%">Meaning</TH></TR></THEAD>
<TBODY>
<TR>
<TD width="15%"><CODE>[:alnum:]</CODE></TD>
<TD width="85%">Alphanumeric characters.</TD></TR>
<TR>
<TD width="15%"><CODE>[:alpha:]</CODE></TD>
<TD width="85%">Alphabetic characters.</TD></TR>
<TR>
<TD width="15%"><CODE>[:blank:]</CODE></TD>
<TD width="85%">Space and TAB characters.</TD></TR>
<TR>
<TD width="15%"><CODE>[:cntrl:]</CODE></TD>
<TD width="85%">Control characters.</TD></TR>
<TR>
<TD width="15%"><CODE>[:digit:]</CODE></TD>
<TD width="85%">Numeric characters.</TD></TR>
<TR>
<TD width="15%"><CODE>[:graph:]</CODE></TD>
<TD width="85%">Characters that are both printable and visible. (A space is printable but not visible, whereas an &#8216;<SAMP>a</SAMP>&#8217; is both.)</TD></TR>
<TR>
<TD width="15%"><CODE>[:lower:]</CODE></TD>
<TD width="85%">Lowercase alphabetic characters.</TD></TR>
<TR>
<TD width="15%"><CODE>[:print:]</CODE></TD>
<TD width="85%">Printable characters (characters that are not control characters).</TD></TR>
<TR>
<TD width="15%"><CODE>[:punct:]</CODE></TD>
<TD width="85%">Punctuation characters (characters that are not letters, digits, control characters, or space characters).</TD></TR>
<TR>
<TD width="15%"><CODE>[:space:]</CODE></TD>
<TD width="85%">Space characters (such as space, TAB, and formfeed, to name a few).</TD></TR>
<TR>
<TD width="15%"><CODE>[:upper:]</CODE></TD>
<TD width="85%">Uppercase alphabetic characters.</TD></TR>
<TR>
<TD width="15%"><CODE>[:xdigit:]</CODE></TD>
<TD width="85%">Characters that are hexadecimal digits.</TD></TR></TBODY></TABLE>
<DIV class=float-caption>
<P><STRONG>Table 3.1: </STRONG>POSIX Character Classes</P></DIV></DIV>
<P>For example, before the POSIX standard, you had to write <CODE>/[A-Za-z0-9]/</CODE> to match alphanumeric characters. If your character set had other alphabetic characters in it, this would not match them. With the POSIX character classes, you can write <CODE>/[[:alnum:]]/</CODE> to match the alphabetic and numeric characters in your character set. </P><A name=index-bracket-expressions_002c-collating-elements></A><A name=index-bracket-expressions_002c-non_002dASCII></A><A name=index-collating-elements></A>
<P>Two additional special sequences can appear in bracket expressions. These apply to non-ASCII character sets, which can have single symbols (called <EM>collating elements</EM>) that are represented with more than one character. They can also have several characters that are equivalent for <EM>collating</EM>, or sorting, purposes. (For example, in French, a plain &#8220;e&#8221; and a grave-accented &#8220;&#232;&#8221; are equivalent.) These sequences are: </P>
<DL compact>
<DD><A name=index-bracket-expressions_002c-collating-symbols></A><A name=index-collating-symbols></A></DD>
<DT>Collating symbols</DT>
<DD>
<P>Multicharacter collating elements enclosed between &#8216;<SAMP>[.</SAMP>&#8217; and &#8216;<SAMP>.]</SAMP>&#8217;. For example, if &#8216;<SAMP>ch</SAMP>&#8217; is a collating element, then &#8216;<SAMP>[[.ch.]]</SAMP>&#8217; is a regexp that matches this collating element, whereas &#8216;<SAMP>[ch]</SAMP>&#8217; is a regexp that matches either &#8216;<SAMP>c</SAMP>&#8217; or &#8216;<SAMP>h</SAMP>&#8217;. </P><A name=index-bracket-expressions_002c-equivalence-classes></A></DD>
<DT>Equivalence classes</DT>
<DD>
<P>Locale-specific names for a list of characters that are equal. The name is enclosed between &#8216;<SAMP>[=</SAMP>&#8217; and &#8216;<SAMP>=]</SAMP>&#8217;. For example, the name &#8216;<SAMP>e</SAMP>&#8217; might be used to represent all of &#8220;e,&#8221; &#8220;&#232;,&#8221; and &#8220;&#233;.&#8221; In this case, &#8216;<SAMP>[[=e=]]</SAMP>&#8217; is a regexp that matches any of &#8216;<SAMP>e</SAMP>&#8217;, &#8216;<SAMP>&#233;</SAMP>&#8217;, or &#8216;<SAMP>&#232;</SAMP>&#8217;. </P></DD></DL>
<P>These features are very valuable in non-English-speaking locales. </P><A name=index-internationalization_002c-localization_002c-character-classes></A><A name=index-gawk_002c-character-classes-and></A><A name=index-POSIX-awk_002c-bracket-expressions-and_002c-character-classes-1></A>
<BLOCKQUOTE>
<P><B>CAUTION:</B> The library functions that <CODE>gawk</CODE> uses for regular expression matching currently recognize only POSIX character classes; they do not recognize collating symbols or equivalence classes. </P></BLOCKQUOTE>