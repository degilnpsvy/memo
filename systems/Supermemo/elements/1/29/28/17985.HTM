<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>16.4.11.4 How To Create and Populate Arrays</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Besides working with arrays created by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>code, you can create arrays and populate them as you see fit, and then<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>code can access them and manipulate them.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">There are two important points about creating arrays from extension code:</P>
<OL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>You must install a new array into<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE>&#8217;s symbol table immediately upon creating it. Once you have done so, you can then populate the array.
<P>Similarly, if installing a new array as a subarray of an existing array, you must add the new array to its parent before adding any elements to it.</P>
<P>Thus, the correct way to build an array is to work &#8220;top down.&#8221; Create the array, and immediately install it in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE>&#8217;s symbol table using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sym_update()</CODE>, or install it as an element in a previously existing array using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set_element()</CODE>. We show example code shortly.</P></LI>
<LI>Due to gawk internals, after using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sym_update()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to install an array into<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE>, you have to retrieve the array cookie from the value passed in to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sym_update()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>before doing anything else with it, like so:
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>awk_value_t value;
awk_array_t new_array;

new_array = create_array();
val.val_type = AWK_ARRAY;
val.array_cookie = new_array;

/* install array in the symbol table */
sym_update("array", &amp; val);

new_array = val.array_cookie;    /* YOU MUST DO THIS */
</PRE></DIV>
<P>If installing an array as a subarray, you must also retrieve the value of the array cookie after the call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set_element()</CODE>.</P></LI></OL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following C code is a simple test extension to create an array with two regular elements and with a subarray. The leading &#8216;<SAMP>#include</SAMP>&#8217; directives and boilerplate variable declarations are omitted for brevity. The first step is to create a new array and then install it in the symbol table:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>/* create_new_array --- create a named array */

static void
create_new_array()
{
    awk_array_t a_cookie;
    awk_array_t subarray;
    awk_value_t index, value;

    a_cookie = create_array();
    value.val_type = AWK_ARRAY;
    value.array_cookie = a_cookie;

    if (! sym_update("new_array", &amp; value))
        printf("create_new_array: sym_update(\"new_array\") failed!\n");
    a_cookie = value.array_cookie;
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note how<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>a_cookie</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is reset from the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>array_cookie</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>field in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>value</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>structure.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The second step is to install two regular values into<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>new_array</CODE>:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>    (void) make_const_string("hello", 5, &amp; index);
    (void) make_const_string("world", 5, &amp; value);
    if (! set_array_element(a_cookie, &amp; index, &amp; value)) {
        printf("fill_in_array: set_array_element failed\n");
        return;
    }

    (void) make_const_string("answer", 6, &amp; index);
    (void) make_number(42.0, &amp; value);
    if (! set_array_element(a_cookie, &amp; index, &amp; value)) {
        printf("fill_in_array: set_array_element failed\n");
        return;
    }
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The third step is to create the subarray and install it:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>    (void) make_const_string("subarray", 8, &amp; index);
    subarray = create_array();
    value.val_type = AWK_ARRAY;
    value.array_cookie = subarray;
    if (! set_array_element(a_cookie, &amp; index, &amp; value)) {
        printf("fill_in_array: set_array_element failed\n");
        return;
    }
    subarray = value.array_cookie;
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The final step is to populate the subarray with its own element:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>    (void) make_const_string("foo", 3, &amp; index);
    (void) make_const_string("bar", 3, &amp; value);
    if (! set_array_element(subarray, &amp; index, &amp; value)) {
        printf("fill_in_array: set_array_element failed\n");
        return;
    }
}
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here is sample script that loads the extension and then dumps the array:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>@load "subarray"

function dumparray(name, array,     i)
{
    for (i in array)
        if (isarray(array[i]))
            dumparray(name "[\"" i "\"]", array[i])
        else
            printf("%s[\"%s\"] = %s\n", name, i, array[i])
}

BEGIN {
    dumparray("new_array", new_array);
}
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here is the result of running the script:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>$ <KBD style="FONT-STYLE: oblique">AWKLIBPATH=$PWD ./gawk -f subarray.awk</KBD>
-| new_array["subarray"]["foo"] = bar
-| new_array["hello"] = world
-| new_array["answer"] = 42
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">(See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/gawk/manual/gawk.html#Finding-Extensions">Finding Extensions</A>, for more information on the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>AWKLIBPATH</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>environment variable.)