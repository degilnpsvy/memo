<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>16.4.11.2 Array Functions</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following functions relate to individual array elements.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DT><CODE>awk_bool_t get_element_count(awk_array_t a_cookie, size_t *count);</CODE></DT>
<DD>
<P>For the array represented by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>a_cookie</CODE>, return in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*count</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>the number of elements it contains. A subarray counts as a single element. Return false if there is an error.</P></DD>
<DT><CODE>awk_bool_t get_array_element(awk_array_t a_cookie,</CODE></DT>
<DT><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const awk_value_t *const index,</CODE></DT>
<DT><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;awk_valtype_t wanted,</CODE></DT>
<DT><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;awk_value_t *result);</CODE></DT>
<DD>
<P>For the array represented by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>a_cookie</CODE>, return in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*result</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>the value of the element whose index is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>index</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>wanted</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>specifies the type of value you wish to retrieve. Return false if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>wanted</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not match the actual type or if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>index</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not in the array (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/gawk/manual/gawk.html#table_002dvalue_002dtypes_002dreturned">Table 16.1</A>).</P>
<P>The value for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>index</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be numeric, in which case<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>converts it to a string. Using non-integral values is possible, but requires that you understand how such values are converted to strings (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/gawk/manual/gawk.html#Conversion">Conversion</A>); thus using integral values is safest.</P>
<P>As with<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>all</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>strings passed into<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>from an extension, the string value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>index</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>must come from the API-provided functions<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>api_malloc()</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>api_calloc()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<CODE>api_realloc()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>releases the storage.</P></DD>
<DT><CODE>awk_bool_t set_array_element(awk_array_t a_cookie,</CODE></DT>
<DT><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;awk_value_t *const index,</CODE></DT>
<DT><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const&nbsp;awk_value_t *const value);</CODE></DT>
<DD>
<P>In the array represented by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>a_cookie</CODE>, create or modify the element whose index is given by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>index</CODE>. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ARGV</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ENVIRON</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>arrays may not be changed.</P></DD>
<DT><CODE>awk_bool_t set_array_element_by_elem(awk_array_t a_cookie,</CODE></DT>
<DT><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;awk_element_t element);</CODE></DT>
<DD>
<P>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>set_array_element()</CODE>, but take the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>index</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>value</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>element</CODE>. This is a convenience macro.</P></DD>
<DT><CODE>awk_bool_t del_array_element(awk_array_t a_cookie,</CODE></DT>
<DT><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const awk_value_t* const index);</CODE></DT>
<DD>
<P>Remove the element with the given index from the array represented by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>a_cookie</CODE>. Return true if the element was removed, or false if the element did not exist in the array.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following functions relate to arrays as a whole:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DT><CODE>awk_array_t create_array();</CODE></DT>
<DD>
<P>Create a new array to which elements may be added. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/gawk/manual/gawk.html#Creating-Arrays">Creating Arrays</A>, for a discussion of how to create a new array and add elements to it.</P></DD>
<DT><CODE>awk_bool_t clear_array(awk_array_t a_cookie);</CODE></DT>
<DD>
<P>Clear the array represented by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>a_cookie</CODE>. Return false if there was some kind of problem, true otherwise. The array remains an array, but after calling this function, it has no elements. This is equivalent to using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>delete</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>statement (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/gawk/manual/gawk.html#Delete">Delete</A>).</P></DD>
<DT><CODE>awk_bool_t flatten_array(awk_array_t a_cookie, awk_flat_array_t **data);</CODE></DT>
<DD>
<P>For the array represented by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>a_cookie</CODE>, create an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk_flat_array_t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>structure and fill it in. Set the pointer whose address is passed as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>data</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to point to this structure. Return true upon success, or false otherwise. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/gawk/manual/gawk.html#Flattening-Arrays">Flattening Arrays</A>, for a discussion of how to flatten an array and work with it.</P></DD>
<DT><CODE>awk_bool_t release_flattened_array(awk_array_t a_cookie,</CODE></DT>
<DT><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;awk_flat_array_t *data);</CODE></DT>
<DD>
<P>When done with a flattened array, release the storage using this function. You must pass in both the original array cookie, and the address of the created<CODE>awk_flat_array_t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>structure. The function returns true upon success, false otherwise.</P></DD></DL>