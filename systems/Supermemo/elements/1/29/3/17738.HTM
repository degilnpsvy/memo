<H4 class=subsection>4.5.6 Field-Splitting Summary</H4>
<P>It is important to remember that when you assign a string constant as the value of <CODE>FS</CODE>, it undergoes normal <CODE>awk</CODE> string processing. For example, with Unix <CODE>awk</CODE> and <CODE>gawk</CODE>, the assignment &#8216;<SAMP>FS = "\.."</SAMP>&#8217; assigns the character string <CODE>".."</CODE> to <CODE>FS</CODE> (the backslash is stripped). This creates a regexp meaning &#8220;fields are separated by occurrences of any two characters.&#8221; If instead you want fields to be separated by a literal period followed by any single character, use &#8216;<SAMP>FS = "\\.."</SAMP>&#8217;. </P>
<P>The following table summarizes how fields are split, based on the value of <CODE>FS</CODE> (&#8216;<SAMP>==</SAMP>&#8217; means &#8220;is equal to&#8221;): </P>
<DL compact>
<DT><CODE>FS == " "</CODE></DT>
<DD>
<P>Fields are separated by runs of whitespace. Leading and trailing whitespace are ignored. This is the default. </P></DD>
<DT><CODE>FS == <VAR>any other single character</VAR></CODE></DT>
<DD>
<P>Fields are separated by each occurrence of the character. Multiple successive occurrences delimit empty fields, as do leading and trailing occurrences. The character can even be a regexp metacharacter; it does not need to be escaped. </P></DD>
<DT><CODE>FS == <VAR>regexp</VAR></CODE></DT>
<DD>
<P>Fields are separated by occurrences of characters that match <VAR>regexp</VAR>. Leading and trailing matches of <VAR>regexp</VAR> delimit empty fields. </P></DD>
<DT><CODE>FS == ""</CODE></DT>
<DD>
<P>Each individual character in the record becomes a separate field. (This is a <CODE>gawk</CODE> extension; it is not specified by the POSIX standard.) </P></DD></DL><A name=index-sidebar_002c-Changing-FS-Does-Not-Affect-the-Fields></A>
<TABLE class=cartouche border=1>
<TBODY>
<TR>
<TD>
<DIV align=center><B>Changing <CODE>FS</CODE> Does Not Affect the Fields</B> </DIV><A name=index-POSIX-awk_002c-field-separators-and-1></A><A name=index-field-separator_002c-POSIX-and></A>
<P>According to the POSIX standard, <CODE>awk</CODE> is supposed to behave as if each record is split into fields at the time it is read. In particular, this means that if you change the value of <CODE>FS</CODE> after a record is read, the value of the fields (i.e., how they were split) should reflect the old value of <CODE>FS</CODE>, not the new one. </P><A name=index-dark-corner_002c-field-separators></A><A name=index-sed-utility></A><A name=index-stream-editors></A>
<P>However, many older implementations of <CODE>awk</CODE> do not work this way. Instead, they defer splitting the fields until a field is actually referenced. The fields are split using the <EM>current</EM> value of <CODE>FS</CODE>! (d.c.) This behavior can be difficult to diagnose. The following example illustrates the difference between the two methods. (The <CODE>sed</CODE><A href="http://www.gnu.org/software/gawk/manual/gawk.html#FOOT23" name=DOCF23><SUP>23</SUP></A> command prints just the first line of <SAMP>/etc/passwd</SAMP>.) </P>
<DIV class=example><PRE class=example>sed 1q /etc/passwd | awk '{ FS = ":" ; print $1 }'
</PRE></DIV>
<P>which usually prints: </P>
<DIV class=example><PRE class=example>root
</PRE></DIV>
<P>on an incorrect implementation of <CODE>awk</CODE>, while <CODE>gawk</CODE> prints something like: </P>
<DIV class=example><PRE class=example>root:nSijPlPhZZwgE:0:0:Root:/:
</PRE></DIV></TD></TR></TBODY></TABLE><A name=index-sidebar_002c-FS-and-IGNORECASE></A>
<TABLE class=cartouche border=1>
<TBODY>
<TR>
<TD>
<DIV align=center><B><CODE>FS</CODE> and <CODE>IGNORECASE</CODE></B> </DIV>
<P>The <CODE>IGNORECASE</CODE> variable (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#User_002dmodified">User-modified</A>) affects field splitting <EM>only</EM> when the value of <CODE>FS</CODE> is a regexp. It has no effect when <CODE>FS</CODE> is a single character, even if that character is a letter. Thus, in the following code: </P>
<DIV class=example><PRE class=example>FS = "c"
IGNORECASE = 1
$0 = "aCa"
print $1
</PRE></DIV>
<P>The output is &#8216;<SAMP>aCa</SAMP>&#8217;. If you really want to split fields on an alphabetic character while ignoring case, use a regexp that will do it for you. E.g., &#8216;<SAMP>FS = "[c]"</SAMP>&#8217;. In this case, <CODE>IGNORECASE</CODE> will take effect. </P></TD></TR></TBODY></TABLE>