<H3 class=section>4.5 Specifying How Fields Are Separated</H3>
<TABLE class=menu border=0 cellSpacing=0>
<TBODY>
<TR>
<TD vAlign=top align=left>&#8226; <A accessKey=1 href="http://www.gnu.org/software/gawk/manual/gawk.html#Default-Field-Splitting">Default Field Splitting</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>How fields are normally separated. </TD></TR>
<TR>
<TD vAlign=top align=left>&#8226; <A accessKey=2 href="http://www.gnu.org/software/gawk/manual/gawk.html#Regexp-Field-Splitting">Regexp Field Splitting</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Using regexps as the field separator. </TD></TR>
<TR>
<TD vAlign=top align=left>&#8226; <A accessKey=3 href="http://www.gnu.org/software/gawk/manual/gawk.html#Single-Character-Fields">Single Character Fields</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Making each character a separate field. </TD></TR>
<TR>
<TD vAlign=top align=left>&#8226; <A accessKey=4 href="http://www.gnu.org/software/gawk/manual/gawk.html#Command-Line-Field-Separator">Command Line Field Separator</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Setting <CODE>FS</CODE> from the command-line. </TD></TR>
<TR>
<TD vAlign=top align=left>&#8226; <A accessKey=5 href="http://www.gnu.org/software/gawk/manual/gawk.html#Full-Line-Fields">Full Line Fields</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Making the full line be a single field. </TD></TR>
<TR>
<TD vAlign=top align=left>&#8226; <A accessKey=6 href="http://www.gnu.org/software/gawk/manual/gawk.html#Field-Splitting-Summary">Field Splitting Summary</A>:</TD>
<TD>&nbsp;&nbsp;</TD>
<TD vAlign=top align=left>Some final points and a summary table. </TD></TR></TBODY></TABLE><A name=index-FS-variable></A><A name=index-fields_002c-separating></A><A name=index-field-separators></A><A name=index-fields_002c-separating-1></A>
<P>The <EM>field separator</EM>, which is either a single character or a regular expression, controls the way <CODE>awk</CODE> splits an input record into fields. <CODE>awk</CODE> scans the input record for character sequences that match the separator; the fields themselves are the text between the matches. </P>
<P>In the examples that follow, we use the bullet symbol (&#8226;) to represent spaces in the output. If the field separator is &#8216;<SAMP>oo</SAMP>&#8217;, then the following line: </P>
<DIV class=example><PRE class=example>moo goo gai pan
</PRE></DIV>
<P>is split into three fields: &#8216;<SAMP>m</SAMP>&#8217;, &#8216;<SAMP>&#8226;g</SAMP>&#8217;, and &#8216;<SAMP>&#8226;gai&#8226;pan</SAMP>&#8217;. Note the leading spaces in the values of the second and third fields. </P><A name=index-troubleshooting_002c-awk-uses-FS-not-IFS></A>
<P>The field separator is represented by the built-in variable <CODE>FS</CODE>. Shell programmers take note: <CODE>awk</CODE> does <EM>not</EM> use the name <CODE>IFS</CODE> that is used by the POSIX-compliant shells (such as the Unix Bourne shell, <CODE>sh</CODE>, or Bash). </P><A name=index-FS-variable_002c-changing-value-of></A>
<P>The value of <CODE>FS</CODE> can be changed in the <CODE>awk</CODE> program with the assignment operator, &#8216;<SAMP>=</SAMP>&#8217; (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Assignment-Ops">Assignment Ops</A>). Often the right time to do this is at the beginning of execution before any input has been processed, so that the very first record is read with the proper separator. To do this, use the special <CODE>BEGIN</CODE> pattern (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#BEGIN_002fEND">BEGIN/END</A>). For example, here we set the value of <CODE>FS</CODE> to the string <CODE>","</CODE>: </P>
<DIV class=example><PRE class=example>awk 'BEGIN { FS = "," } ; { print $2 }'
</PRE></DIV><A name=index-BEGIN-pattern></A>
<P>Given the input line: </P>
<DIV class=example><PRE class=example>John Q. Smith, 29 Oak St., Walamazoo, MI 42139
</PRE></DIV>
<P>this <CODE>awk</CODE> program extracts and prints the string &#8216;<SAMP>&#8226;29&#8226;Oak&#8226;St.</SAMP>&#8217;. </P><A name=index-field-separators_002c-choice-of></A><A name=index-regular-expressions-as-field-separators></A><A name=index-field-separators_002c-regular-expressions-as></A>
<P>Sometimes the input data contains separator characters that don&#8217;t separate fields the way you thought they would. For instance, the person&#8217;s name in the example we just used might have a title or suffix attached, such as: </P>
<DIV class=example><PRE class=example>John Q. Smith, LXIX, 29 Oak St., Walamazoo, MI 42139
</PRE></DIV>
<P>The same program would extract &#8216;<SAMP>&#8226;LXIX</SAMP>&#8217;, instead of &#8216;<SAMP>&#8226;29&#8226;Oak&#8226;St.</SAMP>&#8217;. If you were expecting the program to print the address, you would be surprised. The moral is to choose your data layout and separator characters carefully to prevent such problems. (If the data is not in a form that is easy to process, perhaps you can massage it first with a separate <CODE>awk</CODE> program.)