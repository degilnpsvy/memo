<H4 class=subsection>7.5.3 Using <CODE>ARGC</CODE> and <CODE>ARGV</CODE></H4><A name=index-ARGC_002fARGV-variables_002c-how-to-use></A><A name=index-arguments_002c-command_002dline-2></A><A name=index-command-line_002c-arguments-2></A>
<P><A href="http://www.gnu.org/software/gawk/manual/gawk.html#Auto_002dset">Auto-set</A>, presented the following program describing the information contained in <CODE>ARGC</CODE> and <CODE>ARGV</CODE>: </P>
<DIV class=example><PRE class=example>$ <KBD><EM>awk 'BEGIN {</EM></KBD>
&gt;        <KBD><EM>for (i = 0; i &lt; ARGC; i++)</EM></KBD>
&gt;            <KBD><EM>print ARGV[i]</EM></KBD>
&gt;      <KBD><EM>}' inventory-shipped mail-list</EM></KBD>
-| awk
-| inventory-shipped
-| mail-list
</PRE></DIV>
<P>In this example, <CODE>ARGV[0]</CODE> contains &#8216;<SAMP>awk</SAMP>&#8217;, <CODE>ARGV[1]</CODE> contains &#8216;<SAMP>inventory-shipped</SAMP>&#8217;, and <CODE>ARGV[2]</CODE> contains &#8216;<SAMP>mail-list</SAMP>&#8217;. Notice that the <CODE>awk</CODE> program is not entered in <CODE>ARGV</CODE>. The other command-line options, with their arguments, are also not entered. This includes variable assignments done with the <SAMP>-v</SAMP> option (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Options">Options</A>). Normal variable assignments on the command line <EM>are</EM> treated as arguments and do show up in the <CODE>ARGV</CODE> array. Given the following program in a file named <SAMP>showargs.awk</SAMP>: </P>
<DIV class=example><PRE class=example>BEGIN {
    printf "A=%d, B=%d\n", A, B
    for (i = 0; i &lt; ARGC; i++)
        printf "\tARGV[%d] = %s\n", i, ARGV[i]
}
END   { printf "A=%d, B=%d\n", A, B }
</PRE></DIV>
<P>Running it produces the following: </P>
<DIV class=example><PRE class=example>$ <KBD><EM>awk -v A=1 -f showargs.awk B=2 /dev/null</EM></KBD>
-| A=1, B=0
-|        ARGV[0] = awk
-|        ARGV[1] = B=2
-|        ARGV[2] = /dev/null
-| A=1, B=2
</PRE></DIV>
<P>A program can alter <CODE>ARGC</CODE> and the elements of <CODE>ARGV</CODE>. Each time <CODE>awk</CODE> reaches the end of an input file, it uses the next element of <CODE>ARGV</CODE> as the name of the next input file. By storing a different string there, a program can change which files are read. Use <CODE>"-"</CODE> to represent the standard input. Storing additional elements and incrementing <CODE>ARGC</CODE> causes additional files to be read. </P>
<P>If the value of <CODE>ARGC</CODE> is decreased, that eliminates input files from the end of the list. By recording the old value of <CODE>ARGC</CODE> elsewhere, a program can treat the eliminated arguments as something other than file names. </P>
<P>To eliminate a file from the middle of the list, store the null string (<CODE>""</CODE>) into <CODE>ARGV</CODE> in place of the file&#8217;s name. As a special feature, <CODE>awk</CODE> ignores file names that have been replaced with the null string. Another option is to use the <CODE>delete</CODE> statement to remove elements from <CODE>ARGV</CODE> (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Delete">Delete</A>). </P>
<P>All of these actions are typically done in the <CODE>BEGIN</CODE> rule, before actual processing of the input begins. See <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Split-Program">Split Program</A>, and see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Tee-Program">Tee Program</A>, for examples of each way of removing elements from <CODE>ARGV</CODE>. The following fragment processes <CODE>ARGV</CODE> in order to examine, and then remove, command-line options: </P>
<DIV class=example><PRE class=example>BEGIN {
    for (i = 1; i &lt; ARGC; i++) {
        if (ARGV[i] == "-v")
            verbose = 1
        else if (ARGV[i] == "-q")
            debug = 1
        else if (ARGV[i] ~ /^-./) {
            e = sprintf("%s: unrecognized option -- %c",
                    ARGV[0], substr(ARGV[i], 2, 1))
            print e &gt; "/dev/stderr"
        } else
            break
        delete ARGV[i]
    }
}
</PRE></DIV>
<P>To actually get the options into the <CODE>awk</CODE> program, end the <CODE>awk</CODE> options with <SAMP>--</SAMP> and then supply the <CODE>awk</CODE> program&#8217;s options, in the following manner: </P>
<DIV class=example><PRE class=example>awk -f myprog -- -v -q file1 file2 &#8230;
</PRE></DIV><A name=index-differences-in-awk-and-gawk_002c-ARGC_002fARGV-variables></A>
<P>This is not necessary in <CODE>gawk</CODE>. Unless <SAMP>--posix</SAMP> has been specified, <CODE>gawk</CODE> silently puts any unrecognized options into <CODE>ARGV</CODE> for the <CODE>awk</CODE> program to deal with. As soon as it sees an unknown option, <CODE>gawk</CODE> stops looking for other options that it might otherwise recognize. The previous example with <CODE>gawk</CODE> would be: </P>
<DIV class=example><PRE class=example>gawk -f myprog -q -v file1 file2 &#8230;
</PRE></DIV>
<P>Because <SAMP>-q</SAMP> is not a valid <CODE>gawk</CODE> option, it and the following <SAMP>-v</SAMP> are passed on to the <CODE>awk</CODE> program. (See <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Getopt-Function">Getopt Function</A>, for an <CODE>awk</CODE> library function that parses command-line options.)