<H4 class=subsection>7.5.2 Built-in Variables That Convey Information</H4><A name=index-built_002din-variables_002c-conveying-information></A><A name=index-variables_002c-built_002din_002c-conveying-information></A>
<P>The following is an alphabetical list of variables that <CODE>awk</CODE> sets automatically on certain occasions in order to provide information to your program. The variables that are specific to <CODE>gawk</CODE> are marked with a pound sign&nbsp;(&#8216;<SAMP>#</SAMP>&#8217;).<!-- /@w --> </P>
<DL compact>
<DD><A name=index-ARGC_002fARGV-variables></A><A name=index-arguments_002c-command_002dline-1></A><A name=index-command-line_002c-arguments-1></A></DD>
<DT><CODE>ARGC<SPAN class=roman><FONT face=Batang>,</FONT></SPAN> ARGV</CODE></DT>
<DD>
<P>The command-line arguments available to <CODE>awk</CODE> programs are stored in an array called <CODE>ARGV</CODE>. <CODE>ARGC</CODE> is the number of command-line arguments present. See <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Other-Arguments">Other Arguments</A>. Unlike most <CODE>awk</CODE> arrays, <CODE>ARGV</CODE> is indexed from 0 to <CODE>ARGC</CODE> - 1. In the following example: </P>
<DIV class=example><PRE class=example>$ <KBD><EM>awk 'BEGIN {</EM></KBD>
&gt;         <KBD><EM>for (i = 0; i &lt; ARGC; i++)</EM></KBD>
&gt;             <KBD><EM>print ARGV[i]</EM></KBD>
&gt;      <KBD><EM>}' inventory-shipped mail-list</EM></KBD>
-| awk
-| inventory-shipped
-| mail-list
</PRE></DIV>
<P><CODE>ARGV[0]</CODE> contains &#8216;<SAMP>awk</SAMP>&#8217;, <CODE>ARGV[1]</CODE> contains &#8216;<SAMP>inventory-shipped</SAMP>&#8217;, and <CODE>ARGV[2]</CODE> contains &#8216;<SAMP>mail-list</SAMP>&#8217;. The value of <CODE>ARGC</CODE> is three, one more than the index of the last element in <CODE>ARGV</CODE>, because the elements are numbered from zero. </P><A name=index-programming-conventions_002c-ARGC_002fARGV-variables></A>
<P>The names <CODE>ARGC</CODE> and <CODE>ARGV</CODE>, as well as the convention of indexing the array from 0 to <CODE>ARGC</CODE> - 1, are derived from the C language&#8217;s method of accessing command-line arguments. </P><A name=index-dark-corner_002c-value-of-ARGV_005b0_005d></A>
<P>The value of <CODE>ARGV[0]</CODE> can vary from system to system. Also, you should note that the program text is <EM>not</EM> included in <CODE>ARGV</CODE>, nor are any of <CODE>awk</CODE>&#8217;s command-line options. See <A href="http://www.gnu.org/software/gawk/manual/gawk.html#ARGC-and-ARGV">ARGC and ARGV</A>, for information about how <CODE>awk</CODE> uses these variables. (d.c.) </P><A name=index-ARGIND-variable></A><A name=index-differences-in-awk-and-gawk_002c-ARGIND-variable></A></DD>
<DT><CODE>ARGIND #</CODE></DT>
<DD>
<P>The index in <CODE>ARGV</CODE> of the current file being processed. Every time <CODE>gawk</CODE> opens a new data file for processing, it sets <CODE>ARGIND</CODE> to the index in <CODE>ARGV</CODE> of the file name. When <CODE>gawk</CODE> is processing the input files, &#8216;<SAMP>FILENAME == ARGV[ARGIND]</SAMP>&#8217; is always true. </P><A name=index-files_002c-processing_002c-ARGIND-variable-and></A>
<P>This variable is useful in file processing; it allows you to tell how far along you are in the list of data files as well as to distinguish between successive instances of the same file name on the command line. </P><A name=index-file-names_002c-distinguishing></A>
<P>While you can change the value of <CODE>ARGIND</CODE> within your <CODE>awk</CODE> program, <CODE>gawk</CODE> automatically sets it to a new value when the next file is opened. </P>
<P>This variable is a <CODE>gawk</CODE> extension. In other <CODE>awk</CODE> implementations, or if <CODE>gawk</CODE> is in compatibility mode (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Options">Options</A>), it is not special. </P><A name=index-ENVIRON-array></A><A name=index-environment-variables_002c-in-ENVIRON-array></A></DD>
<DT><CODE>ENVIRON</CODE></DT>
<DD>
<P>An associative array containing the values of the environment. The array indices are the environment variable names; the elements are the values of the particular environment variables. For example, <CODE>ENVIRON["HOME"]</CODE> might be <SAMP>/home/arnold</SAMP>. Changing this array does not affect the environment passed on to any programs that <CODE>awk</CODE> may spawn via redirection or the <CODE>system()</CODE> function. </P>
<P>Some operating systems may not have environment variables. On such systems, the <CODE>ENVIRON</CODE> array is empty (except for <CODE>ENVIRON["AWKPATH"]</CODE><!-- /@w -->, see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#AWKPATH-Variable">AWKPATH Variable</A> and <CODE>ENVIRON["AWKLIBPATH"]</CODE><!-- /@w -->, see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#AWKLIBPATH-Variable">AWKLIBPATH Variable</A>). </P><A name=index-gawk_002c-ERRNO-variable-in-3></A><A name=index-ERRNO-variable></A><A name=index-differences-in-awk-and-gawk_002c-ERRNO-variable></A><A name=index-error-handling_002c-ERRNO-variable-and></A></DD>
<DT><CODE>ERRNO #</CODE></DT>
<DD>
<P>If a system error occurs during a redirection for <CODE>getline</CODE>, during a read for <CODE>getline</CODE>, or during a <CODE>close()</CODE> operation, then <CODE>ERRNO</CODE> contains a string describing the error. </P>
<P>In addition, <CODE>gawk</CODE> clears <CODE>ERRNO</CODE> before opening each command-line input file. This enables checking if the file is readable inside a <CODE>BEGINFILE</CODE> pattern (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#BEGINFILE_002fENDFILE">BEGINFILE/ENDFILE</A>). </P>
<P>Otherwise, <CODE>ERRNO</CODE> works similarly to the C variable <CODE>errno</CODE>. Except for the case just mentioned, <CODE>gawk</CODE> <EM>never</EM> clears it (sets it to zero or <CODE>""</CODE>). Thus, you should only expect its value to be meaningful when an I/O operation returns a failure value, such as <CODE>getline</CODE> returning -1. You are, of course, free to clear it yourself before doing an I/O operation. </P>
<P>This variable is a <CODE>gawk</CODE> extension. In other <CODE>awk</CODE> implementations, or if <CODE>gawk</CODE> is in compatibility mode (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Options">Options</A>), it is not special. </P><A name=index-FILENAME-variable-1></A><A name=index-dark-corner_002c-FILENAME-variable-1></A></DD>
<DT><CODE>FILENAME</CODE></DT>
<DD>
<P>The name of the file that <CODE>awk</CODE> is currently reading. When no data files are listed on the command line, <CODE>awk</CODE> reads from the standard input and <CODE>FILENAME</CODE> is set to <CODE>"-"</CODE>. <CODE>FILENAME</CODE> is changed each time a new file is read (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Reading-Files">Reading Files</A>). Inside a <CODE>BEGIN</CODE> rule, the value of <CODE>FILENAME</CODE> is <CODE>""</CODE>, since there are no input files being processed yet.<A href="http://www.gnu.org/software/gawk/manual/gawk.html#FOOT39" name=DOCF39><SUP>39</SUP></A> (d.c.) Note, though, that using <CODE>getline</CODE> (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Getline">Getline</A>) inside a <CODE>BEGIN</CODE> rule can give <CODE>FILENAME</CODE> a value. </P><A name=index-FNR-variable-1></A></DD>
<DT><CODE>FNR</CODE></DT>
<DD>
<P>The current record number in the current file. <CODE>FNR</CODE> is incremented each time a new record is read (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Records">Records</A>). It is reinitialized to zero each time a new input file is started. </P><A name=index-NF-variable-1></A></DD>
<DT><CODE>NF</CODE></DT>
<DD>
<P>The number of fields in the current input record. <CODE>NF</CODE> is set each time a new record is read, when a new field is created or when <CODE>$0</CODE> changes (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Fields">Fields</A>). </P>
<P>Unlike most of the variables described in this subsection, assigning a value to <CODE>NF</CODE> has the potential to affect <CODE>awk</CODE>&#8217;s internal workings. In particular, assignments to <CODE>NF</CODE> can be used to create or remove fields from the current record. See <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Changing-Fields">Changing Fields</A>. </P><A name=index-FUNCTAB-array></A><A name=index-gawk_002c-FUNCTAB-array-in></A><A name=index-differences-in-awk-and-gawk_002c-FUNCTAB-variable></A></DD>
<DT><CODE>FUNCTAB #</CODE></DT>
<DD>
<P>An array whose indices and corresponding values are the names of all the user-defined or extension functions in the program. </P>
<BLOCKQUOTE>
<P><B>NOTE:</B> Attempting to use the <CODE>delete</CODE> statement with the <CODE>FUNCTAB</CODE> array will cause a fatal error. Any attempt to assign to an element of the <CODE>FUNCTAB</CODE> array will also cause a fatal error. </P></BLOCKQUOTE><A name=index-NR-variable-1></A></DD>
<DT><CODE>NR</CODE></DT>
<DD>
<P>The number of input records <CODE>awk</CODE> has processed since the beginning of the program&#8217;s execution (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Records">Records</A>). <CODE>NR</CODE> is incremented each time a new record is read. </P><A name=index-gawk_002c-PROCINFO-array-in></A><A name=index-PROCINFO-array></A><A name=index-differences-in-awk-and-gawk_002c-PROCINFO-array></A></DD>
<DT><CODE>PROCINFO #</CODE></DT>
<DD>
<P>The elements of this array provide access to information about the running <CODE>awk</CODE> program. The following elements (listed alphabetically) are guaranteed to be available: </P>
<DL compact>
<DD><A name=index-effective-group-ID-of-gawk-user></A></DD>
<DT><CODE>PROCINFO["egid"]</CODE></DT>
<DD>
<P>The value of the <CODE>getegid()</CODE> system call. </P></DD>
<DT><CODE>PROCINFO["euid"]</CODE></DT>
<DD><A name=index-effective-user-ID-of-gawk-user></A>
<P>The value of the <CODE>geteuid()</CODE> system call. </P></DD>
<DT><CODE>PROCINFO["FS"]</CODE></DT>
<DD>
<P>This is <CODE>"FS"</CODE> if field splitting with <CODE>FS</CODE> is in effect, <CODE>"FIELDWIDTHS"</CODE> if field splitting with <CODE>FIELDWIDTHS</CODE> is in effect, or <CODE>"FPAT"</CODE> if field matching with <CODE>FPAT</CODE> is in effect. </P></DD>
<DT><CODE>PROCINFO["identifiers"]</CODE></DT>
<DD><A name=index-program-identifiers></A>
<P>A subarray, indexed by the names of all identifiers used in the text of the AWK program. For each identifier, the value of the element is one of the following: </P>
<DL compact>
<DT><CODE>"array"</CODE></DT>
<DD>
<P>The identifier is an array. </P></DD>
<DT><CODE>"extension"</CODE></DT>
<DD>
<P>The identifier is an extension function loaded via <CODE>@load</CODE>. </P></DD>
<DT><CODE>"scalar"</CODE></DT>
<DD>
<P>The identifier is a scalar. </P></DD>
<DT><CODE>"untyped"</CODE></DT>
<DD>
<P>The identifier is untyped (could be used as a scalar or array, <CODE>gawk</CODE> doesn&#8217;t know yet). </P></DD>
<DT><CODE>"user"</CODE></DT>
<DD>
<P>The identifier is a user-defined function. </P></DD></DL>
<P>The values indicate what <CODE>gawk</CODE> knows about the identifiers after it has finished parsing the program; they are <EM>not</EM> updated while the program runs. </P></DD>
<DT><CODE>PROCINFO["gid"]</CODE></DT>
<DD><A name=index-group-ID-of-gawk-user></A>
<P>The value of the <CODE>getgid()</CODE> system call. </P></DD>
<DT><CODE>PROCINFO["pgrpid"]</CODE></DT>
<DD><A name=index-process-group-idIDof-gawk-process></A>
<P>The process group ID of the current process. </P></DD>
<DT><CODE>PROCINFO["pid"]</CODE></DT>
<DD><A name=index-process-ID-of-gawk-process></A>
<P>The process ID of the current process. </P></DD>
<DT><CODE>PROCINFO["ppid"]</CODE></DT>
<DD><A name=index-parent-process-ID-of-gawk-process></A>
<P>The parent process ID of the current process. </P></DD>
<DT><CODE>PROCINFO["sorted_in"]</CODE></DT>
<DD>
<P>If this element exists in <CODE>PROCINFO</CODE>, its value controls the order in which array indices will be processed by &#8216;<SAMP>for (index in array) &#8230;</SAMP>&#8217; loops. Since this is an advanced feature, we defer the full description until later; see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Scanning-an-Array">Scanning an Array</A>. </P></DD>
<DT><CODE>PROCINFO["strftime"]</CODE></DT>
<DD>
<P>The default time format string for <CODE>strftime()</CODE>. Assigning a new value to this element changes the default. See <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Time-Functions">Time Functions</A>. </P></DD>
<DT><CODE>PROCINFO["uid"]</CODE></DT>
<DD>
<P>The value of the <CODE>getuid()</CODE> system call. </P></DD>
<DT><CODE>PROCINFO["version"]</CODE></DT>
<DD><A name=index-version-of-gawk></A><A name=index-gawk-version></A>
<P>The version of <CODE>gawk</CODE>. </P></DD></DL>
<P>The following additional elements in the array are available to provide information about the MPFR and GMP libraries if your version of <CODE>gawk</CODE> supports arbitrary precision numbers (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Gawk-and-MPFR">Gawk and MPFR</A>): </P>
<DL compact>
<DD><A name=index-version-of-GNU-MPFR-library></A></DD>
<DT><CODE>PROCINFO["mpfr_version"]</CODE></DT>
<DD>
<P>The version of the GNU MPFR library. </P></DD>
<DT><CODE>PROCINFO["gmp_version"]</CODE></DT>
<DD><A name=index-version-of-GNU-MP-library></A>
<P>The version of the GNU MP library. </P></DD>
<DT><CODE>PROCINFO["prec_max"]</CODE></DT>
<DD><A name=index-maximum-precision-supported-by-MPFR-library></A>
<P>The maximum precision supported by MPFR. </P></DD>
<DT><CODE>PROCINFO["prec_min"]</CODE></DT>
<DD><A name=index-minimum-precision-supported-by-MPFR-library></A>
<P>The minimum precision required by MPFR. </P></DD></DL>
<P>The following additional elements in the array are available to provide information about the version of the extension API, if your version of <CODE>gawk</CODE> supports dynamic loading of extension functions (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Dynamic-Extensions">Dynamic Extensions</A>): </P>
<DL compact>
<DT><CODE>PROCINFO["api_major"]</CODE></DT>
<DD><A name=index-version-of-gawk-extension-API></A><A name=index-extension-API_002c-version-number></A>
<P>The major version of the extension API. </P></DD>
<DT><CODE>PROCINFO["api_minor"]</CODE></DT>
<DD>
<P>The minor version of the extension API. </P></DD></DL><A name=index-supplementary-groups-of-gawk-process></A>
<P>On some systems, there may be elements in the array, <CODE>"group1"</CODE> through <CODE>"group<VAR>N</VAR>"</CODE> for some <VAR>N</VAR>. <VAR>N</VAR> is the number of supplementary groups that the process has. Use the <CODE>in</CODE> operator to test for these elements (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Reference-to-Elements">Reference to Elements</A>). </P><A name=index-gawk_002c-PROCINFO-array-in-1></A><A name=index-PROCINFO-array_002c-uses></A>
<P>The <CODE>PROCINFO</CODE> array has the following additional uses: </P>
<UL>
<LI>It may be used to cause coprocesses to communicate over pseudo-ttys instead of through two-way pipes; this is discussed further in <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Two_002dway-I_002fO">Two-way I/O</A>. </LI>
<LI>It may be used to provide a timeout when reading from any open input file, pipe, or coprocess. See <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Read-Timeout">Read Timeout</A>, for more information. </LI></UL>
<P>This array is a <CODE>gawk</CODE> extension. In other <CODE>awk</CODE> implementations, or if <CODE>gawk</CODE> is in compatibility mode (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Options">Options</A>), it is not special. </P><A name=index-RLENGTH-variable></A></DD>
<DT><CODE>RLENGTH</CODE></DT>
<DD>
<P>The length of the substring matched by the <CODE>match()</CODE> function (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#String-Functions">String Functions</A>). <CODE>RLENGTH</CODE> is set by invoking the <CODE>match()</CODE> function. Its value is the length of the matched string, or -1 if no match is found. </P><A name=index-RSTART-variable></A></DD>
<DT><CODE>RSTART</CODE></DT>
<DD>
<P>The start-index in characters of the substring that is matched by the <CODE>match()</CODE> function (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#String-Functions">String Functions</A>). <CODE>RSTART</CODE> is set by invoking the <CODE>match()</CODE> function. Its value is the position of the string where the matched substring starts, or zero if no match was found. </P><A name=index-gawk_002c-RT-variable-in-2></A><A name=index-RT-variable-2></A><A name=index-differences-in-awk-and-gawk_002c-RT-variable></A></DD>
<DT><CODE>RT #</CODE></DT>
<DD>
<P>This is set each time a record is read. It contains the input text that matched the text denoted by <CODE>RS</CODE>, the record separator. </P>
<P>This variable is a <CODE>gawk</CODE> extension. In other <CODE>awk</CODE> implementations, or if <CODE>gawk</CODE> is in compatibility mode (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Options">Options</A>), it is not special. </P><A name=index-gawk_002c-SYMTAB-array-in></A><A name=index-SYMTAB-array></A><A name=index-differences-in-awk-and-gawk_002c-SYMTAB-variable></A></DD>
<DT><CODE>SYMTAB #</CODE></DT>
<DD>
<P>An array whose indices are the names of all currently defined global variables and arrays in the program. The array may be used for indirect access to read or write the value of a variable: </P>
<DIV class=example><PRE class=example>foo = 5
SYMTAB["foo"] = 4
print foo    # prints 4
</PRE></DIV>
<P>The <CODE>isarray()</CODE> function (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Type-Functions">Type Functions</A>) may be used to test if an element in <CODE>SYMTAB</CODE> is an array. Also, you may not use the <CODE>delete</CODE> statement with the <CODE>SYMTAB</CODE> array. </P>
<P>You may use an index for <CODE>SYMTAB</CODE> that is not a predefined identifier: </P>
<DIV class=example><PRE class=example>SYMTAB["xxx"] = 5
print SYMTAB["xxx"]
</PRE></DIV>
<P>This works as expected: in this case <CODE>SYMTAB</CODE> acts just like a regular array. The only difference is that you can&#8217;t then delete <CODE>SYMTAB["xxx"]</CODE>. </P>
<P>The <CODE>SYMTAB</CODE> array is more interesting than it looks. Andrew Schorr points out that it effectively gives <CODE>awk</CODE> data pointers. Consider his example: </P>
<DIV class=example><PRE class=example># Indirect multiply of any variable by amount, return result

function multiply(variable, amount)
{
    return SYMTAB[variable] *= amount
}
</PRE></DIV>
<BLOCKQUOTE>
<P><B>NOTE:</B> In order to avoid severe time-travel paradoxes<A href="http://www.gnu.org/software/gawk/manual/gawk.html#FOOT40" name=DOCF40><SUP>40</SUP></A>, neither <CODE>FUNCTAB</CODE> nor <CODE>SYMTAB</CODE> are available as elements within the <CODE>SYMTAB</CODE> array. </P></BLOCKQUOTE></DD></DL><A name=index-sidebar_002c-Changing-NR-and-FNR></A>
<TABLE class=cartouche border=1>
<TBODY>
<TR>
<TD>
<DIV align=center><B>Changing <CODE>NR</CODE> and <CODE>FNR</CODE></B> </DIV><A name=index-NR-variable_002c-changing></A><A name=index-FNR-variable_002c-changing></A><A name=index-dark-corner_002c-FNR_002fNR-variables></A>
<P><CODE>awk</CODE> increments <CODE>NR</CODE> and <CODE>FNR</CODE> each time it reads a record, instead of setting them to the absolute value of the number of records read. This means that a program can change these variables and their new values are incremented for each record. (d.c.) The following example shows this: </P>
<DIV class=example><PRE class=example>$ <KBD><EM>echo '1</EM></KBD>
&gt; <KBD><EM>2</EM></KBD>
&gt; <KBD><EM>3</EM></KBD>
&gt; <KBD><EM>4' | awk 'NR == 2 { NR = 17 }</EM></KBD>
&gt; <KBD><EM>{ print NR }'</EM></KBD>
-| 1
-| 17
-| 18
-| 19
</PRE></DIV>
<P>Before <CODE>FNR</CODE> was added to the <CODE>awk</CODE> language (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#V7_002fSVR3_002e1">V7/SVR3.1</A>), many <CODE>awk</CODE> programs used this feature to track the number of records in a file by resetting <CODE>NR</CODE> to zero when <CODE>FILENAME</CODE> changed. </P></TD></TR></TBODY></TABLE>