<H4 class=subsection>8.1.1 Introduction to Arrays</H4><A name=index-Wall_002c-Larry></A>
<BLOCKQUOTE>
<P><I>Doing linear scans over an associative array is like trying to club someone to death with a loaded Uzi.</I> </P></BLOCKQUOTE>
<DIV align=center>&#8212; <EM>Larry Wall</EM> </DIV>
<P>The <CODE>awk</CODE> language provides one-dimensional arrays for storing groups of related strings or numbers. Every <CODE>awk</CODE> array must have a name. Array names have the same syntax as variable names; any valid variable name would also be a valid array name. But one name cannot be used in both ways (as an array and as a variable) in the same <CODE>awk</CODE> program. </P>
<P>Arrays in <CODE>awk</CODE> superficially resemble arrays in other programming languages, but there are fundamental differences. In <CODE>awk</CODE>, it isn&#8217;t necessary to specify the size of an array before starting to use it. Additionally, any number or string in <CODE>awk</CODE>, not just consecutive integers, may be used as an array index. </P>
<P>In most other languages, arrays must be <EM>declared</EM> before use, including a specification of how many elements or components they contain. In such languages, the declaration causes a contiguous block of memory to be allocated for that many elements. Usually, an index in the array must be a positive integer. For example, the index zero specifies the first element in the array, which is actually stored at the beginning of the block of memory. Index one specifies the second element, which is stored in memory right after the first element, and so on. It is impossible to add more elements to the array, because it has room only for as many elements as given in the declaration. (Some languages allow arbitrary starting and ending indices&#8212;e.g., &#8216;<SAMP>15 .. 27</SAMP>&#8217;&#8212;but the size of the array is still fixed when the array is declared.) </P>
<P>A contiguous array of four elements might look like the following example, conceptually, if the element values are 8, <CODE>"foo"</CODE>, <CODE>""</CODE>, and 30: </P>
<DIV class=example><PRE class=example>+---------+---------+--------+---------+
|    8    |  "foo"  |   ""   |    30   |    <SPAN class=roman><FONT face=Batang>Value</FONT></SPAN>
+---------+---------+--------+---------+
     0         1         2         3        <SPAN class=roman><FONT face=Batang>Index</FONT></SPAN>
</PRE></DIV>
<P>Only the values are stored; the indices are implicit from the order of the values. Here, 8 is the value at index zero, because 8 appears in the position with zero elements before it. </P><A name=index-arrays_002c-indexing></A><A name=index-indexing-arrays></A><A name=index-associative-arrays></A><A name=index-arrays_002c-associative></A>
<P>Arrays in <CODE>awk</CODE> are different&#8212;they are <EM>associative</EM>. This means that each array is a collection of pairs: an index and its corresponding array element value: </P>
<DIV class=example><PRE class=example><SPAN class=roman><FONT face=Batang>Index</FONT></SPAN> 3     <SPAN class=roman><FONT face=Batang>Value</FONT></SPAN> 30
<SPAN class=roman><FONT face=Batang>Index</FONT></SPAN> 1     <SPAN class=roman><FONT face=Batang>Value</FONT></SPAN> "foo"
<SPAN class=roman><FONT face=Batang>Index</FONT></SPAN> 0     <SPAN class=roman><FONT face=Batang>Value</FONT></SPAN> 8
<SPAN class=roman><FONT face=Batang>Index</FONT></SPAN> 2     <SPAN class=roman><FONT face=Batang>Value</FONT></SPAN> ""
</PRE></DIV>
<P>The pairs are shown in jumbled order because their order is irrelevant. </P>
<P>One advantage of associative arrays is that new pairs can be added at any time. For example, suppose a tenth element is added to the array whose value is <CODE>"number&nbsp;ten"</CODE><!-- /@w -->. The result is: </P>
<DIV class=example><PRE class=example><SPAN class=roman><FONT face=Batang>Index</FONT></SPAN> 10    <SPAN class=roman><FONT face=Batang>Value</FONT></SPAN> "number ten"
<SPAN class=roman><FONT face=Batang>Index</FONT></SPAN> 3     <SPAN class=roman><FONT face=Batang>Value</FONT></SPAN> 30
<SPAN class=roman><FONT face=Batang>Index</FONT></SPAN> 1     <SPAN class=roman><FONT face=Batang>Value</FONT></SPAN> "foo"
<SPAN class=roman><FONT face=Batang>Index</FONT></SPAN> 0     <SPAN class=roman><FONT face=Batang>Value</FONT></SPAN> 8
<SPAN class=roman><FONT face=Batang>Index</FONT></SPAN> 2     <SPAN class=roman><FONT face=Batang>Value</FONT></SPAN> ""
</PRE></DIV><A name=index-sparse-arrays></A><A name=index-arrays_002c-sparse></A>
<P>Now the array is <EM>sparse</EM>, which just means some indices are missing. It has elements 0&#8211;3 and 10, but doesn&#8217;t have elements 4, 5, 6, 7, 8, or 9. </P>
<P>Another consequence of associative arrays is that the indices don&#8217;t have to be positive integers. Any number, or even a string, can be an index. For example, the following is an array that translates words from English to French: </P>
<DIV class=example><PRE class=example><SPAN class=roman><FONT face=Batang>Index</FONT></SPAN> "dog" <SPAN class=roman><FONT face=Batang>Value</FONT></SPAN> "chien"
<SPAN class=roman><FONT face=Batang>Index</FONT></SPAN> "cat" <SPAN class=roman><FONT face=Batang>Value</FONT></SPAN> "chat"
<SPAN class=roman><FONT face=Batang>Index</FONT></SPAN> "one" <SPAN class=roman><FONT face=Batang>Value</FONT></SPAN> "un"
<SPAN class=roman><FONT face=Batang>Index</FONT></SPAN> 1     <SPAN class=roman><FONT face=Batang>Value</FONT></SPAN> "un"
</PRE></DIV>
<P>Here we decided to translate the number one in both spelled-out and numeric form&#8212;thus illustrating that a single array can have both numbers and strings as indices. In fact, array subscripts are always strings; this is discussed in more detail in <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Numeric-Array-Subscripts">Numeric Array Subscripts</A>. Here, the number <CODE>1</CODE> isn&#8217;t double-quoted, since <CODE>awk</CODE> automatically converts it to a string. </P><A name=index-gawk_002c-IGNORECASE-variable-in-2></A><A name=index-case-sensitivity_002c-array-indices-and></A><A name=index-arrays_002c-and-IGNORECASE-variable></A><A name=index-IGNORECASE-variable_002c-and-array-indices></A>
<P>The value of <CODE>IGNORECASE</CODE> has no effect upon array subscripting. The identical string value used to store an array element must be used to retrieve it. When <CODE>awk</CODE> creates an array (e.g., with the <CODE>split()</CODE> built-in function), that array&#8217;s indices are consecutive integers starting at one. (See <A href="http://www.gnu.org/software/gawk/manual/gawk.html#String-Functions">String Functions</A>.) </P>
<P><CODE>awk</CODE>&#8217;s arrays are efficient&#8212;the time to access an element is independent of the number of elements in the array.