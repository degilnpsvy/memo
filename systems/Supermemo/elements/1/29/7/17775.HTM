<H4 class=subsubsection>6.1.1.2 Octal and Hexadecimal Numbers</H4><A name=index-octal-numbers></A><A name=index-hexadecimal-numbers></A><A name=index-numbers_002c-octal></A><A name=index-numbers_002c-hexadecimal></A>
<P>In <CODE>awk</CODE>, all numbers are in decimal; i.e., base 10. Many other programming languages allow you to specify numbers in other bases, often octal (base 8) and hexadecimal (base 16). In octal, the numbers go 0, 1, 2, 3, 4, 5, 6, 7, 10, 11, 12, etc. Just as &#8216;<SAMP>11</SAMP>&#8217;, in decimal, is 1 times 10 plus 1, so &#8216;<SAMP>11</SAMP>&#8217;, in octal, is 1 times 8, plus 1. This equals 9 in decimal. In hexadecimal, there are 16 digits. Since the everyday decimal number system only has ten digits (&#8216;<SAMP>0</SAMP>&#8217;&#8211;&#8216;<SAMP>9</SAMP>&#8217;), the letters &#8216;<SAMP>a</SAMP>&#8217; through &#8216;<SAMP>f</SAMP>&#8217; are used to represent the rest. (Case in the letters is usually irrelevant; hexadecimal &#8216;<SAMP>a</SAMP>&#8217; and &#8216;<SAMP>A</SAMP>&#8217; have the same value.) Thus, &#8216;<SAMP>11</SAMP>&#8217;, in hexadecimal, is 1 times 16 plus 1, which equals 17 in decimal. </P>
<P>Just by looking at plain &#8216;<SAMP>11</SAMP>&#8217;, you can&#8217;t tell what base it&#8217;s in. So, in C, C++, and other languages derived from C, there is a special notation to signify the base. Octal numbers start with a leading &#8216;<SAMP>0</SAMP>&#8217;, and hexadecimal numbers start with a leading &#8216;<SAMP>0x</SAMP>&#8217; or &#8216;<SAMP>0X</SAMP>&#8217;: </P>
<DL compact>
<DT><CODE>11</CODE></DT>
<DD>
<P>Decimal value 11. </P></DD>
<DT><CODE>011</CODE></DT>
<DD>
<P>Octal 11, decimal value 9. </P></DD>
<DT><CODE>0x11</CODE></DT>
<DD>
<P>Hexadecimal 11, decimal value 17. </P></DD></DL>
<P>This example shows the difference: </P>
<DIV class=example><PRE class=example>$ <KBD><EM>gawk 'BEGIN { printf "%d, %d, %d\n", 011, 11, 0x11 }'</EM></KBD>
-| 9, 11, 17
</PRE></DIV>
<P>Being able to use octal and hexadecimal constants in your programs is most useful when working with data that cannot be represented conveniently as characters or as regular numbers, such as binary data of various sorts. </P><A name=index-gawk_002c-octal-numbers-and></A><A name=index-gawk_002c-hexadecimal-numbers-and></A>
<P><CODE>gawk</CODE> allows the use of octal and hexadecimal constants in your program text. However, such numbers in the input data are not treated differently; doing so by default would break old programs. (If you really need to do this, use the <SAMP>--non-decimal-data</SAMP> command-line option; see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Nondecimal-Data">Nondecimal Data</A>.) If you have octal or hexadecimal data, you can use the <CODE>strtonum()</CODE> function (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#String-Functions">String Functions</A>) to convert the data into a number. Most of the time, you will want to use octal or hexadecimal constants when working with the built-in bit manipulation functions; see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Bitwise-Functions">Bitwise Functions</A>, for more information. </P>
<P>Unlike some early C implementations, &#8216;<SAMP>8</SAMP>&#8217; and &#8216;<SAMP>9</SAMP>&#8217; are not valid in octal constants; e.g., <CODE>gawk</CODE> treats &#8216;<SAMP>018</SAMP>&#8217; as decimal 18: </P>
<DIV class=example><PRE class=example>$ <KBD><EM>gawk 'BEGIN { print "021 is", 021 ; print 018 }'</EM></KBD>
-| 021 is 17
-| 18
</PRE></DIV><A name=index-compatibility-mode-_0028gawk_0029_002c-octal-numbers></A><A name=index-compatibility-mode-_0028gawk_0029_002c-hexadecimal-numbers></A>
<P>Octal and hexadecimal source code constants are a <CODE>gawk</CODE> extension. If <CODE>gawk</CODE> is in compatibility mode (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Options">Options</A>), they are not available. </P><A name=index-sidebar_002c-A-Constant_0027s-Base-Does-Not-Affect-Its-Value></A>
<TABLE class=cartouche border=1>
<TBODY>
<TR>
<TD>
<DIV align=center><B>A Constant&#8217;s Base Does Not Affect Its Value</B> </DIV>
<P>Once a numeric constant has been converted internally into a number, <CODE>gawk</CODE> no longer remembers what the original form of the constant was; the internal value is always used. This has particular consequences for conversion of numbers to strings: </P>
<DIV class=example><PRE class=example>$ <KBD><EM>gawk 'BEGIN { printf "0x11 is &lt;%s&gt;\n", 0x11 }'</EM></KBD>
-| 0x11 is &lt;17&gt;
</PRE></DIV></TD></TR></TBODY></TABLE>