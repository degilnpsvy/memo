<H4 class=subsection>6.2.4 Increment and Decrement Operators</H4><A name=index-increment-operators></A><A name=index-operators_002c-decrement_002fincrement></A>
<P><EM>Increment</EM> and <EM>decrement operators</EM> increase or decrease the value of a variable by one. An assignment operator can do the same thing, so the increment operators add no power to the <CODE>awk</CODE> language; however, they are convenient abbreviations for very common operations. </P><A name=index-side-effects-1></A><A name=index-_002b-_0028plus-sign_0029_002c-_002b_002b-operator></A><A name=index-plus-sign-_0028_002b_0029_002c-_002b_002b-operator></A><A name=index-side-effects_002c-decrement_002fincrement-operators></A>
<P>The operator used for adding one is written &#8216;<SAMP>++</SAMP>&#8217;. It can be used to increment a variable either before or after taking its value. To pre-increment a variable <CODE>v</CODE>, write &#8216;<SAMP>++v</SAMP>&#8217;. This adds one to the value of <CODE>v</CODE>&#8212;that new value is also the value of the expression. (The assignment expression &#8216;<SAMP>v += 1</SAMP>&#8217; is completely equivalent.) Writing the &#8216;<SAMP>++</SAMP>&#8217; after the variable specifies post-increment. This increments the variable value just the same; the difference is that the value of the increment expression itself is the variable&#8217;s <EM>old</EM> value. Thus, if <CODE>foo</CODE> has the value four, then the expression &#8216;<SAMP>foo++</SAMP>&#8217; has the value four, but it changes the value of <CODE>foo</CODE> to five. In other words, the operator returns the old value of the variable, but with the side effect of incrementing it. </P>
<P>The post-increment &#8216;<SAMP>foo++</SAMP>&#8217; is nearly the same as writing &#8216;<SAMP>(foo += 1) - 1</SAMP>&#8217;. It is not perfectly equivalent because all numbers in <CODE>awk</CODE> are floating-point&#8212;in floating-point, &#8216;<SAMP>foo + 1 - 1</SAMP>&#8217; does not necessarily equal <CODE>foo</CODE>. But the difference is minute as long as you stick to numbers that are fairly small (less than 10e12). </P><A name=index-_0024-_0028dollar-sign_0029_002c-incrementing-fields-and-arrays></A><A name=index-dollar-sign-_0028_0024_0029_002c-incrementing-fields-and-arrays></A>
<P>Fields and array elements are incremented just like variables. (Use &#8216;<SAMP>$(i++)</SAMP>&#8217; when you want to do a field reference and a variable increment at the same time. The parentheses are necessary because of the precedence of the field reference operator &#8216;<SAMP>$</SAMP>&#8217;.) </P><A name=index-decrement-operators></A>
<P>The decrement operator &#8216;<SAMP>--</SAMP>&#8217; works just like &#8216;<SAMP>++</SAMP>&#8217;, except that it subtracts one instead of adding it. As with &#8216;<SAMP>++</SAMP>&#8217;, it can be used before the lvalue to pre-decrement or after it to post-decrement. Following is a summary of increment and decrement expressions: </P>
<DL compact>
<DD><A name=index-_002b-_0028plus-sign_0029_002c-_002b_002b-operator-1></A><A name=index-plus-sign-_0028_002b_0029_002c-_002b_002b-operator-1></A></DD>
<DT><CODE>++<VAR>lvalue</VAR></CODE></DT>
<DD>
<P>Increment <VAR>lvalue</VAR>, returning the new value as the value of the expression. </P></DD>
<DT><CODE><VAR>lvalue</VAR>++</CODE></DT>
<DD>
<P>Increment <VAR>lvalue</VAR>, returning the <EM>old</EM> value of <VAR>lvalue</VAR> as the value of the expression. </P><A name=index-_002d-_0028hyphen_0029_002c-_002d_002d-operator></A><A name=index-hyphen-_0028_002d_0029_002c-_002d_002d-operator></A></DD>
<DT><CODE>--<VAR>lvalue</VAR></CODE></DT>
<DD>
<P>Decrement <VAR>lvalue</VAR>, returning the new value as the value of the expression. (This expression is like &#8216;<SAMP>++<VAR>lvalue</VAR></SAMP>&#8217;, but instead of adding, it subtracts.) </P></DD>
<DT><CODE><VAR>lvalue</VAR>--</CODE></DT>
<DD>
<P>Decrement <VAR>lvalue</VAR>, returning the <EM>old</EM> value of <VAR>lvalue</VAR> as the value of the expression. (This expression is like &#8216;<SAMP><VAR>lvalue</VAR>++</SAMP>&#8217;, but instead of adding, it subtracts.) </P></DD></DL><A name=index-sidebar_002c-Operator-Evaluation-Order></A>
<TABLE class=cartouche border=1>
<TBODY>
<TR>
<TD>
<DIV align=center><B>Operator Evaluation Order</B> </DIV><A name=index-precedence></A><A name=index-operators_002c-precedence></A><A name=index-portability_002c-operators></A><A name=index-evaluation-order></A><A name=index-Marx_002c-Groucho></A>
<BLOCKQUOTE>
<P><I>Doctor, doctor! It hurts when I do this!<BR>So don&#8217;t do that!</I> </P></BLOCKQUOTE>
<DIV align=center>&#8212; <EM>Groucho Marx</EM> </DIV>
<P>What happens for something like the following? </P>
<DIV class=example><PRE class=example>b = 6
print b += b++
</PRE></DIV>
<P>Or something even stranger? </P>
<DIV class=example><PRE class=example>b = 6
b += ++b + b++
print b
</PRE></DIV><A name=index-side-effects-2></A>
<P>In other words, when do the various side effects prescribed by the postfix operators (&#8216;<SAMP>b++</SAMP>&#8217;) take effect? When side effects happen is <EM>implementation defined</EM>. In other words, it is up to the particular version of <CODE>awk</CODE>. The result for the first example may be 12 or 13, and for the second, it may be 22 or 23. </P>
<P>In short, doing things like this is not recommended and definitely not anything that you can rely upon for portability. You should avoid such things in your own programs. </P></TD></TR></TBODY></TABLE>