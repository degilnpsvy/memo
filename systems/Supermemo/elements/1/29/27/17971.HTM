<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>16.4.6.4 Customized Input Parsers</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-customized-input-parser></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">By default,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>reads text files as its input. It uses the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>RS</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to find the end of the record, and then uses<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>FS</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>FIELDWIDTHS</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>FPAT</CODE>) to split it into fields (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/gawk/manual/gawk.html#Reading-Files">Reading Files</A>). Additionally, it sets the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>RT</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/gawk/manual/gawk.html#Built_002din-Variables">Built-in Variables</A>).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If you want, you can provide your own custom input parser. An input parser&#8217;s job is to return a record to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>record processing code, along with indicators for the value and length of the data to be used for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>RT</CODE>, if any.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To provide an input parser, you must first provide two functions (where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>XXX</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a prefix name for your extension):</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DT><CODE>awk_bool_t<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>XXX</VAR>_can_take_file(const awk_input_buf_t *iobuf)</CODE></DT>
<DD>
<P>This function examines the information available in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>iobuf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(which we discuss shortly). Based on the information there, it decides if the input parser should be used for this file. If so, it should return true. Otherwise, it should return false. It should not change any state (variable values, etc.) within<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE>.</P></DD>
<DT><CODE>awk_bool_t<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>XXX</VAR>_take_control_of(awk_input_buf_t *iobuf)</CODE></DT>
<DD>
<P>When<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>decides to hand control of the file over to the input parser, it calls this function. This function in turn must fill in certain fields in the<CODE>awk_input_buf_t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>structure, and ensure that certain conditions are true. It should then return true. If an error of some kind occurs, it should not fill in any fields, and should return false; then<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will not use the input parser. The details are presented shortly.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Your extension should package these functions inside an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk_input_parser_t</CODE>, which looks like this:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>typedef struct awk_input_parser {
    const char *name;   /* name of parser */
    awk_bool_t (*can_take_file)(const awk_input_buf_t *iobuf);
    awk_bool_t (*take_control_of)(awk_input_buf_t *iobuf);
    awk_const struct awk_input_parser *awk_const next;   /* for gawk */
} awk_input_parser_t;
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The fields are:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DT><CODE>const char *name;</CODE></DT>
<DD>
<P>The name of the input parser. This is a regular C string.</P></DD>
<DT><CODE>awk_bool_t (*can_take_file)(const awk_input_buf_t *iobuf);</CODE></DT>
<DD>
<P>A pointer to your<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE><VAR>XXX</VAR>_can_take_file()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function.</P></DD>
<DT><CODE>awk_bool_t (*take_control_of)(awk_input_buf_t *iobuf);</CODE></DT>
<DD>
<P>A pointer to your<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE><VAR>XXX</VAR>_take_control_of()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function.</P></DD>
<DT><CODE>awk_const struct input_parser *awk_const next;</CODE></DT>
<DD>
<P>This pointer is used by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE>. The extension cannot modify it.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The steps are as follows:</P>
<OL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>Create a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>static awk_input_parser_t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>variable and initialize it appropriately.</LI>
<LI>When your extension is loaded, register your input parser with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>register_input_parser()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>API function (described below).</LI></OL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">An<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk_input_buf_t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>looks like this:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>typedef struct awk_input {
    const char *name;       /* filename */
    int fd;                 /* file descriptor */
#define INVALID_HANDLE (-1)
    void *opaque;           /* private data for input parsers */
    int (*get_record)(char **out, struct awk_input *iobuf,
                      int *errcode, char **rt_start, size_t *rt_len);
    ssize_t (*read_func)();
    void (*close_func)(struct awk_input *iobuf);
    struct stat sbuf;       /* stat buf */
} awk_input_buf_t;
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The fields can be divided into two categories: those for use (initially, at least) by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE><VAR>XXX</VAR>_can_take_file()</CODE>, and those for use by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE><VAR>XXX</VAR>_take_control_of()</CODE>. The first group of fields and their uses are as follows:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DT><CODE>const char *name;</CODE></DT>
<DD>
<P>The name of the file.</P></DD>
<DT><CODE>int fd;</CODE></DT>
<DD>
<P>A file descriptor for the file. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>was able to open the file, then<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fd</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>not</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>be equal to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>INVALID_HANDLE</CODE>. Otherwise, it will.</P></DD>
<DT><CODE>struct stat sbuf;</CODE></DT>
<DD>
<P>If file descriptor is valid, then<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will have filled in this structure via a call to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fstat()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>system call.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE><VAR>XXX</VAR>_can_take_file()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function should examine these fields and decide if the input parser should be used for the file. The decision can be made based upon<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>state (the value of a variable defined previously by the extension and set by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>code), the name of the file, whether or not the file descriptor is valid, the information in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct stat</CODE>, or any combination of the above.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Once<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE><VAR>XXX</VAR>_can_take_file()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>has returned true, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>has decided to use your input parser, it calls<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE><VAR>XXX</VAR>_take_control_of()</CODE>. That function then fills one of either the<CODE>get_record</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>field or the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read_func</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>field in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk_input_buf_t</CODE>. It must also ensure that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fd</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>not</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>set to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>INVALID_HANDLE</CODE>. All of the fields that may be filled by<CODE><VAR>XXX</VAR>_take_control_of()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are as follows:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DT><CODE>void *opaque;</CODE></DT>
<DD>
<P>This is used to hold any state information needed by the input parser for this file. It is &#8220;opaque&#8221; to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE>. The input parser is not required to use this pointer.</P></DD>
<DT><CODE>int&nbsp;(*get_record)(char&nbsp;**out,</CODE></DT>
<DT><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;struct&nbsp;awk_input *iobuf,</CODE></DT>
<DT><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;int *errcode,</CODE></DT>
<DT><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;char **rt_start,</CODE></DT>
<DT><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;size_t *rt_len);</CODE></DT>
<DD>
<P>This function pointer should point to a function that creates the input records. Said function is the core of the input parser. Its behavior is described below.</P></DD>
<DT><CODE>ssize_t (*read_func)();</CODE></DT>
<DD>
<P>This function pointer should point to function that has the same behavior as the standard POSIX<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>system call. It is an alternative to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>get_record</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>pointer. Its behavior is also described below.</P></DD>
<DT><CODE>void (*close_func)(struct awk_input *iobuf);</CODE></DT>
<DD>
<P>This function pointer should point to a function that does the &#8220;tear down.&#8221; It should release any resources allocated by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE><VAR>XXX</VAR>_take_control_of()</CODE>. It may also close the file. If it does so, it should set the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fd</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>field to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>INVALID_HANDLE</CODE>.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fd</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is still not<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>INVALID_HANDLE</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>after the call to this function,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls the regular<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>close()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>system call.</P>
<P>Having a &#8220;tear down&#8221; function is optional. If your input parser does not need it, do not set this field. Then,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls the regular<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>close()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>system call on the file descriptor, so it should be valid.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE><VAR>XXX</VAR>_get_record()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function does the work of creating input records. The parameters are as follows:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DT><CODE>char **out</CODE></DT>
<DD>
<P>This is a pointer to a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char *</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>variable which is set to point to the record.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>makes its own copy of the data, so the extension must manage this storage.</P></DD>
<DT><CODE>struct awk_input *iobuf</CODE></DT>
<DD>
<P>This is the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk_input_buf_t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for the file. The fields should be used for reading data (<CODE>fd</CODE>) and for managing private state (<CODE>opaque</CODE>), if any.</P></DD>
<DT><CODE>int *errcode</CODE></DT>
<DD>
<P>If an error occurs,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*errcode</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be set to an appropriate code from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;errno.h&gt;</CODE>.</P></DD>
<DT><CODE>char **rt_start</CODE></DT>
<DT><CODE>size_t *rt_len</CODE></DT>
<DD>
<P>If the concept of a &#8220;record terminator&#8221; makes sense, then<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*rt_start</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be set to point to the data to be used for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>RT</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*rt_len</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be set to the length of the data. Otherwise,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*rt_len</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be set to zero.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>makes its own copy of this data, so the extension must manage the storage.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The return value is the length of the buffer pointed to by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*out</CODE>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>EOF</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if end-of-file was reached or an error occurred.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">It is guaranteed that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>errcode</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a valid pointer, so there is no need to test for a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>sets<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*errcode</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to zero, so there is no need to set it unless an error occurs.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If an error does occur, the function should return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>EOF</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and set<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*errcode</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to a non-zero value. In that case, if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*errcode</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not equal -1,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>automatically updates the<CODE>ERRNO</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>variable based on the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*errcode</CODE>. (In general, setting &#8216;<SAMP>*errcode = errno</SAMP>&#8217; should do the right thing.)</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">As an alternative to supplying a function that returns an input record, you may instead supply a function that simply reads bytes, and let<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>parse the data into records. If you do so, the data should be returned in the multibyte encoding of the current locale. Such a function should follow the same behavior as the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read()</CODE>system call, and you fill in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read_func</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>pointer with its address in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk_input_buf_t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>structure.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">By default,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>sets the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read_func</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>pointer to point to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>system call. So your extension need not set this field explicitly.</P>
<BLOCKQUOTE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<P><B>NOTE:</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>You must choose one method or the other: either a function that returns a record, or one that returns raw data. In particular, if you supply a function to get a record,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will call it, and never call the raw read function.</P></BLOCKQUOTE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>ships with a sample extension that reads directories, returning records for each entry in the directory (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/gawk/manual/gawk.html#Extension-Sample-Readdir">Extension Sample Readdir</A>). You may wish to use that code as a guide for writing your own input parser.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When writing an input parser, you should think about (and document) how it is expected to interact with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>code. You may want it to always be called, and take effect as appropriate (as the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>readdir</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>extension does). Or you may want it to take effect based upon the value of an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>variable, as the XML extension from the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawkextlib</CODE>project does (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/gawk/manual/gawk.html#gawkextlib">gawkextlib</A>). In the latter case, code in a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>BEGINFILE</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>section can look at<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>FILENAME</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ERRNO</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to decide whether or not to activate an input parser (see<A href="http://www.gnu.org/software/gawk/manual/gawk.html#BEGINFILE_002fENDFILE">BEGINFILE/ENDFILE</A>).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">You register your input parser with the following function:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DT><CODE>void register_input_parser(awk_input_parser_t *input_parser);</CODE></DT>
<DD>
<P>Register the input parser pointed to by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>input_parser</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE>.</P></DD></DL>