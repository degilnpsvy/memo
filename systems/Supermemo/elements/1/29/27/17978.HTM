<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>16.4.10.1 Variable Access and Update by Name</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following routines provide the ability to access and update global<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk</CODE>-level variables by name. In compiler terminology, identifiers of different kinds are termed<EM>symbols</EM>, thus the &#8220;sym&#8221; in the routines&#8217; names. The data structure which stores information about symbols is termed a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>symbol table</EM>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DT><CODE>awk_bool_t sym_lookup(const char *name,</CODE></DT>
<DT><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;awk_valtype_t wanted,</CODE></DT>
<DT><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;awk_value_t *result);</CODE></DT>
<DD>
<P>Fill in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk_value_t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>structure pointed to by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>result</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with the value of the variable named by the string<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>name</CODE>, which is a regular C string.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>wanted</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>indicates the type of value expected. Return true if the actual type matches<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>wanted</CODE>, false otherwise In the latter case,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>result-&gt;val_type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>indicates the actual type (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/gawk/manual/gawk.html#table_002dvalue_002dtypes_002dreturned">Table 16.1</A>).</P></DD>
<DT><CODE>awk_bool_t sym_update(const char *name, awk_value_t *value);</CODE></DT>
<DD>
<P>Update the variable named by the string<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>name</CODE>, which is a regular C string. The variable is added to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE>&#8217;s symbol table if it is not there. Return true if everything worked, false otherwise.</P>
<P>Changing types (scalar to array or vice versa) of an existing variable is<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>not</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>allowed, nor may this routine be used to update an array. This routine cannot be used to update any of the predefined variables (such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ARGC</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NF</CODE>).</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">An extension can look up the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE>&#8217;s special variables. However, with the exception of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>PROCINFO</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>array, an extension cannot change any of those variables.</P>
<BLOCKQUOTE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<P><B>NOTE:</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>It is possible for the lookup of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>PROCINFO</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to fail. This happens if the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>program being run does not reference<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>PROCINFO</CODE>; in this case<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>doesn&#8217;t bother to create the array and populate it.</P></BLOCKQUOTE>