<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>14.3.3 Viewing and Changing Data</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The commands for viewing and changing variables inside of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DD><A name=index-debugger-commands_002c-display></A><A name=index-display-debugger-command></A></DD>
<DT><CODE>display</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>[<VAR>var</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>|<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$</CODE><VAR>n</VAR>]</DT>
<DD>
<P>Add variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>var</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(or field<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$<VAR>n</VAR></CODE>) to the display list. The value of the variable or field is displayed each time the program stops. Each variable added to the list is identified by a unique number:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>gawk&gt; <KBD style="FONT-STYLE: oblique">display x</KBD>
-| 10: x = 1
</PRE></DIV>
<P>displays the assigned item number, the variable name and its current value. If the display variable refers to a function parameter, it is silently deleted from the list as soon as the execution reaches a context where no such variable of the given name exists. Without argument,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>display</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>displays the current values of items on the list.</P><A name=index-debugger-commands_002c-eval></A><A name=index-eval-debugger-command></A><A name=index-evaluate-expressions_002c-in-debugger></A></DD>
<DT><CODE>eval "<VAR>awk statements</VAR>"</CODE></DT>
<DD>
<P>Evaluate<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>awk statements</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the context of the running program. You can do anything that an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>program would do: assign values to variables, call functions, and so on.</P></DD>
<DT><CODE>eval</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>param</VAR>, &#8230;</DT>
<DT><VAR>awk statements</VAR></DT>
<DT><CODE>end</CODE></DT>
<DD>
<P>This form of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eval</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is similar, but it allows you to define &#8220;local variables&#8221; that exist in the context of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>awk statements</VAR>, instead of using variables or function parameters defined by the program.</P><A name=index-debugger-commands_002c-p-_0028print_0029></A><A name=index-debugger-commands_002c-print></A><A name=index-print-debugger-command></A><A name=index-p-debugger-command-_0028alias-for-print_0029></A><A name=index-print-variables_002c-in-debugger></A></DD>
<DT><CODE>print</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>var1</VAR>[<CODE>,</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>var2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230;]</DT>
<DT><CODE>p</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>var1</VAR>[<CODE>,</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>var2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230;]</DT>
<DD>
<P>Print the value of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>variable or field. Fields must be referenced by constants:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>gawk&gt; <KBD style="FONT-STYLE: oblique">print $3</KBD>
</PRE></DIV>
<P>This prints the third field in the input record (if the specified field does not exist, it prints &#8216;<SAMP>Null field</SAMP>&#8217;). A variable can be an array element, with the subscripts being constant values. To print the contents of an array, prefix the name of the array with the &#8216;<SAMP>@</SAMP>&#8217; symbol:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>gawk&gt; <KBD style="FONT-STYLE: oblique">print @a</KBD>
</PRE></DIV>
<P>This prints the indices and the corresponding values for all elements in the array<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>a</CODE>.</P><A name=index-debugger-commands_002c-printf></A><A name=index-printf-debugger-command></A></DD>
<DT><CODE>printf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>format</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>[<CODE>,</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230;]</DT>
<DD>
<P>Print formatted text. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>format</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may include escape sequences, such as &#8216;<SAMP>\n</SAMP>&#8217; (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/gawk/manual/gawk.html#Escape-Sequences">Escape Sequences</A>). No newline is printed unless one is specified.</P><A name=index-debugger-commands_002c-set></A><A name=index-set-debugger-command></A><A name=index-assign-values-to-variables_002c-in-debugger></A></DD>
<DT><CODE>set</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>var</VAR><CODE>=</CODE><VAR>value</VAR></DT>
<DD>
<P>Assign a constant (number or string) value to an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>variable or field. String values must be enclosed between double quotes (<CODE>"&#8230;"</CODE>).</P>
<P>You can also set special<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>variables, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>FS</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NF</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NR</CODE>, etc.</P><A name=index-debugger-commands_002c-w-_0028watch_0029></A><A name=index-debugger-commands_002c-watch></A><A name=index-watch-debugger-command></A><A name=index-w-debugger-command-_0028alias-for-watch_0029></A><A name=index-set-watchpoint></A></DD>
<DT><CODE>watch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>var</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>|<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$</CODE><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>[<CODE>"<VAR>expression</VAR>"</CODE>]</DT>
<DT><CODE>w</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>var</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>|<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$</CODE><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>[<CODE>"<VAR>expression</VAR>"</CODE>]</DT>
<DD>
<P>Add variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>var</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(or field<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$<VAR>n</VAR></CODE>) to the watch list. The debugger then stops whenever the value of the variable or field changes. Each watched item is assigned a number which can be used to delete it from the watch list using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unwatch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>command.</P>
<P>With a watchpoint, you may also supply a condition. This is an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression (enclosed in double quotes) that the debugger evaluates whenever the watchpoint is reached. If the condition is true, then the debugger stops execution and prompts for a command. Otherwise,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>continues executing the program.</P><A name=index-debugger-commands_002c-undisplay></A><A name=index-undisplay-debugger-command></A><A name=index-stop-automatic-display_002c-in-debugger></A></DD>
<DT><CODE>undisplay</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>[<VAR>n</VAR>]</DT>
<DD>
<P>Remove item number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(or all items, if no argument) from the automatic display list.</P><A name=index-debugger-commands_002c-unwatch></A><A name=index-unwatch-debugger-command></A><A name=index-delete-watchpoint></A></DD>
<DT><CODE>unwatch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>[<VAR>n</VAR>]</DT>
<DD>
<P>Remove item number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(or all items, if no argument) from the watch list.</P></DD></DL>