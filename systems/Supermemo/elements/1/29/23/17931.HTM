<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>14.3.2 Control of Execution</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Now that your breakpoints are ready, you can start running the program and observing its behavior. There are more commands for controlling execution of the program than we saw in our earlier example:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DD><A name=index-debugger-commands_002c-commands></A><A name=index-commands-debugger-command></A><A name=index-debugger-commands_002c-silent></A><A name=index-silent-debugger-command></A><A name=index-debugger-commands_002c-end></A><A name=index-end-debugger-command></A><A name=index-breakpoint-commands></A><A name=index-commands-to-execute-at-breakpoint></A></DD>
<DT><CODE>commands</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>[<VAR>n</VAR>]</DT>
<DT><CODE>silent</CODE></DT>
<DT>&#8230;</DT>
<DT><CODE>end</CODE></DT>
<DD>
<P>Set a list of commands to be executed upon stopping at a breakpoint or watchpoint.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the breakpoint or watchpoint number. Without a number, the last one set is used. The actual commands follow, starting on the next line, and terminated by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>end</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>command. If the command<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>silent</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is in the list, the usual messages about stopping at a breakpoint and the source line are not printed. Any command in the list that resumes execution (e.g.,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>continue</CODE>) terminates the list (an implicit<CODE>end</CODE>), and subsequent commands are ignored. For example:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>gawk&gt; <KBD style="FONT-STYLE: oblique">commands</KBD>
&gt; <KBD style="FONT-STYLE: oblique">silent</KBD>
&gt; <KBD style="FONT-STYLE: oblique">printf "A silent breakpoint; i = %d\n", i</KBD>
&gt; <KBD style="FONT-STYLE: oblique">info locals</KBD>
&gt; <KBD style="FONT-STYLE: oblique">set i = 10</KBD>
&gt; <KBD style="FONT-STYLE: oblique">continue</KBD>
&gt; <KBD style="FONT-STYLE: oblique">end</KBD>
gawk&gt;
</PRE></DIV><A name=index-debugger-commands_002c-c-_0028continue_0029></A><A name=index-debugger-commands_002c-continue></A><A name=index-continue-program_002c-in-debugger></A></DD>
<DT><CODE>continue</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>[<VAR>count</VAR>]</DT>
<DT><CODE>c</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>[<VAR>count</VAR>]</DT>
<DD>
<P>Resume program execution. If continued from a breakpoint and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified, ignores the breakpoint at that location the next<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>times before stopping.</P><A name=index-debugger-commands_002c-finish></A><A name=index-finish-debugger-command></A></DD>
<DT><CODE>finish</CODE></DT>
<DD>
<P>Execute until the selected stack frame returns. Print the returned value.</P><A name=index-debugger-commands_002c-n-_0028next_0029></A><A name=index-debugger-commands_002c-next></A><A name=index-next-debugger-command></A><A name=index-n-debugger-command-_0028alias-for-next_0029></A><A name=index-single_002dstep-execution_002c-in-the-debugger></A></DD>
<DT><CODE>next</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>[<VAR>count</VAR>]</DT>
<DT><CODE>n</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>[<VAR>count</VAR>]</DT>
<DD>
<P>Continue execution to the next source line, stepping over function calls. The argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>controls how many times to repeat the action, as in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>step</CODE>.</P><A name=index-debugger-commands_002c-ni-_0028nexti_0029></A><A name=index-debugger-commands_002c-nexti></A><A name=index-nexti-debugger-command></A><A name=index-ni-debugger-command-_0028alias-for-nexti_0029></A></DD>
<DT><CODE>nexti</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>[<VAR>count</VAR>]</DT>
<DT><CODE>ni</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>[<VAR>count</VAR>]</DT>
<DD>
<P>Execute one (or<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR>) instruction(s), stepping over function calls.</P><A name=index-debugger-commands_002c-return></A><A name=index-return-debugger-command></A></DD>
<DT><CODE>return</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>[<VAR>value</VAR>]</DT>
<DD>
<P>Cancel execution of a function call. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(either a string or a number) is specified, it is used as the function&#8217;s return value. If used in a frame other than the innermost one (the currently executing function, i.e., frame number 0), discard all inner frames in addition to the selected one, and the caller of that frame becomes the innermost frame.</P><A name=index-debugger-commands_002c-r-_0028run_0029></A><A name=index-debugger-commands_002c-run></A><A name=index-run-debugger-command></A><A name=index-r-debugger-command-_0028alias-for-run_0029></A></DD>
<DT><CODE>run</CODE></DT>
<DT><CODE>r</CODE></DT>
<DD>
<P>Start/restart execution of the program. When restarting, the debugger retains the current breakpoints, watchpoints, command history, automatic display variables, and debugger options.</P><A name=index-debugger-commands_002c-s-_0028step_0029></A><A name=index-debugger-commands_002c-step></A><A name=index-step-debugger-command></A><A name=index-s-debugger-command-_0028alias-for-step_0029></A></DD>
<DT><CODE>step</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>[<VAR>count</VAR>]</DT>
<DT><CODE>s</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>[<VAR>count</VAR>]</DT>
<DD>
<P>Continue execution until control reaches a different source line in the current stack frame.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>step</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>steps inside any function called within the line. If the argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is supplied, steps that many times before stopping, unless it encounters a breakpoint or watchpoint.</P><A name=index-debugger-commands_002c-si-_0028stepi_0029></A><A name=index-debugger-commands_002c-stepi></A><A name=index-stepi-debugger-command></A><A name=index-si-debugger-command-_0028alias-for-stepi_0029></A></DD>
<DT><CODE>stepi</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>[<VAR>count</VAR>]</DT>
<DT><CODE>si</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>[<VAR>count</VAR>]</DT>
<DD>
<P>Execute one (or<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR>) instruction(s), stepping inside function calls. (For illustration of what is meant by an &#8220;instruction&#8221; in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE>, see the output shown under<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dump</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/gawk/manual/gawk.html#Miscellaneous-Debugger-Commands">Miscellaneous Debugger Commands</A>.)</P><A name=index-debugger-commands_002c-u-_0028until_0029></A><A name=index-debugger-commands_002c-until></A><A name=index-until-debugger-command></A><A name=index-u-debugger-command-_0028alias-for-until_0029></A></DD>
<DT><CODE>until</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>[[<VAR>filename</VAR><CODE>:</CODE>]<VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>|<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>function</VAR>]</DT>
<DT><CODE>u</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>[[<VAR>filename</VAR><CODE>:</CODE>]<VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>|<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>function</VAR>]</DT>
<DD>
<P>Without any argument, continue execution until a line past the current line in current stack frame is reached. With an argument, continue execution until the specified location is reached, or the current stack frame returns.</P></DD></DL>