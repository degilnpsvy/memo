<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>14.3.4 Dealing with the Stack</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Whenever you run a program which contains any function calls,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>maintains a stack of all of the function calls leading up to where the program is right now. You can see how you got to where you are, and also move around in the stack to see what the state of things was in the functions which called the one you are in. The commands for doing this are:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DD><A name=index-debugger-commands_002c-bt-_0028backtrace_0029></A><A name=index-debugger-commands_002c-backtrace></A><A name=index-backtrace-debugger-command></A><A name=index-bt-debugger-command-_0028alias-for-backtrace_0029></A><A name=index-call-stack_002c-display-in-debugger></A><A name=index-traceback_002c-display-in-debugger></A></DD>
<DT><CODE>backtrace</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>[<VAR>count</VAR>]</DT>
<DT><CODE>bt</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>[<VAR>count</VAR>]</DT>
<DD>
<P>Print a backtrace of all function calls (stack frames), or innermost<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>frames if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&gt; 0. Print the outermost<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>frames if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&lt; 0. The backtrace displays the name and arguments to each function, the source file name, and the line number.</P><A name=index-debugger-commands_002c-down></A><A name=index-down-debugger-command></A></DD>
<DT><CODE>down</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>[<VAR>count</VAR>]</DT>
<DD>
<P>Move<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(default 1) frames down the stack toward the innermost frame. Then select and print the frame.</P><A name=index-debugger-commands_002c-f-_0028frame_0029></A><A name=index-debugger-commands_002c-frame></A><A name=index-frame-debugger-command></A><A name=index-f-debugger-command-_0028alias-for-frame_0029></A></DD>
<DT><CODE>frame</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>[<VAR>n</VAR>]</DT>
<DT><CODE>f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>[<VAR>n</VAR>]</DT>
<DD>
<P>Select and print (frame number, function and argument names, source file, and the source line) stack frame<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>. Frame 0 is the currently executing, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>innermost</EM>, frame (function call), frame 1 is the frame that called the innermost one. The highest numbered frame is the one for the main program.</P><A name=index-debugger-commands_002c-up></A><A name=index-up-debugger-command></A></DD>
<DT><CODE>up</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>[<VAR>count</VAR>]</DT>
<DD>
<P>Move<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(default 1) frames up the stack toward the outermost frame. Then select and print the frame.</P></DD></DL>