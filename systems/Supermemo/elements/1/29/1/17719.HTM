<H3 class=section>3.1 How to Use Regular Expressions</H3><A name=index-regular-expressions_002c-as-patterns></A>
<P>A regular expression can be used as a pattern by enclosing it in slashes. Then the regular expression is tested against the entire text of each record. (Normally, it only needs to match some part of the text in order to succeed.) For example, the following prints the second field of each record that contains the string &#8216;<SAMP>li</SAMP>&#8217; anywhere in it: </P>
<DIV class=example><PRE class=example>$ <KBD><EM>awk '/li/ { print $2 }' mail-list</EM></KBD>
-| 555-5553
-| 555-0542
-| 555-6699
-| 555-3430
</PRE></DIV><A name=index-regular-expressions_002c-operators></A><A name=index-operators_002c-string_002dmatching></A><A name=index-string_002dmatching-operators></A><A name=index-_007e-_0028tilde_0029_002c-_007e-operator></A><A name=index-tilde-_0028_007e_0029_002c-_007e-operator></A><A name=index-_0021-_0028exclamation-point_0029_002c-_0021_007e-operator></A><A name=index-exclamation-point-_0028_0021_0029_002c-_0021_007e-operator></A><A name=index-if-statement_002c-use-of-regexps-in></A><A name=index-while-statement_002c-use-of-regexps-in></A><A name=index-do_002dwhile-statement_002c-use-of-regexps-in></A>
<P>Regular expressions can also be used in matching expressions. These expressions allow you to specify the string to match against; it need not be the entire current input record. The two operators &#8216;<SAMP>~</SAMP>&#8217; and &#8216;<SAMP>!~</SAMP>&#8217; perform regular expression comparisons. Expressions using these operators can be used as patterns, or in <CODE>if</CODE>, <CODE>while</CODE>, <CODE>for</CODE>, and <CODE>do</CODE> statements. (See <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Statements">Statements</A>.) For example: </P>
<DIV class=example><PRE class=example><VAR>exp</VAR> ~ /<VAR>regexp</VAR>/
</PRE></DIV>
<P>is true if the expression <VAR>exp</VAR> (taken as a string) matches <VAR>regexp</VAR>. The following example matches, or selects, all input records with the uppercase letter &#8216;<SAMP>J</SAMP>&#8217; somewhere in the first field: </P>
<DIV class=example><PRE class=example>$ <KBD><EM>awk '$1 ~ /J/' inventory-shipped</EM></KBD>
-| Jan  13  25  15 115
-| Jun  31  42  75 492
-| Jul  24  34  67 436
-| Jan  21  36  64 620
</PRE></DIV>
<P>So does this: </P>
<DIV class=example><PRE class=example>awk '{ if ($1 ~ /J/) print }' inventory-shipped
</PRE></DIV>
<P>This next example is true if the expression <VAR>exp</VAR> (taken as a character string) does <EM>not</EM> match <VAR>regexp</VAR>: </P>
<DIV class=example><PRE class=example><VAR>exp</VAR> !~ /<VAR>regexp</VAR>/
</PRE></DIV>
<P>The following example matches, or selects, all input records whose first field <EM>does not</EM> contain the uppercase letter &#8216;<SAMP>J</SAMP>&#8217;: </P>
<DIV class=example><PRE class=example>$ <KBD><EM>awk '$1 !~ /J/' inventory-shipped</EM></KBD>
-| Feb  15  32  24 226
-| Mar  15  24  34 228
-| Apr  31  52  63 420
-| May  16  34  29 208
&#8230;
</PRE></DIV><A name=index-regexp-constants></A><A name=index-constant-regexps></A><A name=index-regular-expressions_002c-constants_002c-See-regexp-constants></A>
<P>When a regexp is enclosed in slashes, such as <CODE>/foo/</CODE>, we call it a <EM>regexp constant</EM>, much like <CODE>5.27</CODE> is a numeric constant and <CODE>"foo"</CODE> is a string constant.