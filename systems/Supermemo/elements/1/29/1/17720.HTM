<H3 class=section>3.2 Escape Sequences</H3><A name=index-escape-sequences_002c-in-strings></A><A name=index-backslash-_0028_005c_0029_002c-in-escape-sequences></A><A name=index-_005c-_0028backslash_0029_002c-in-escape-sequences></A>
<P>Some characters cannot be included literally in string constants (<CODE>"foo"</CODE>) or regexp constants (<CODE>/foo/</CODE>). Instead, they should be represented with <EM>escape sequences</EM>, which are character sequences beginning with a backslash (&#8216;<SAMP>\</SAMP>&#8217;). One use of an escape sequence is to include a double-quote character in a string constant. Because a plain double quote ends the string, you must use &#8216;<SAMP>\"</SAMP>&#8217; to represent an actual double-quote character as a part of the string. For example: </P>
<DIV class=example><PRE class=example>$ <KBD><EM>awk 'BEGIN { print "He said \"hi!\" to her." }'</EM></KBD>
-| He said "hi!" to her.
</PRE></DIV>
<P>The backslash character itself is another character that cannot be included normally; you must write &#8216;<SAMP>\\</SAMP>&#8217; to put one backslash in the string or regexp. Thus, the string whose contents are the two characters &#8216;<SAMP>"</SAMP>&#8217; and &#8216;<SAMP>\</SAMP>&#8217; must be written <CODE>"\"\\"</CODE>. </P>
<P>Other escape sequences represent unprintable characters such as TAB or newline. While there is nothing to stop you from entering most unprintable characters directly in a string constant or regexp constant, they may look ugly. </P>
<P>The following table lists all the escape sequences used in <CODE>awk</CODE> and what they represent. Unless noted otherwise, all these escape sequences apply to both string constants and regexp constants: </P>
<DL compact>
<DT><CODE>\\</CODE></DT>
<DD>
<P>A literal backslash, &#8216;<SAMP>\</SAMP>&#8217;. </P><A name=index-_005c-_0028backslash_0029_002c-_005ca-escape-sequence></A><A name=index-backslash-_0028_005c_0029_002c-_005ca-escape-sequence></A></DD>
<DT><CODE>\a</CODE></DT>
<DD>
<P>The &#8220;alert&#8221; character, <KBD><EM>Ctrl-g</EM></KBD>, ASCII code 7 (BEL). (This usually makes some sort of audible noise.) </P><A name=index-_005c-_0028backslash_0029_002c-_005cb-escape-sequence></A><A name=index-backslash-_0028_005c_0029_002c-_005cb-escape-sequence></A></DD>
<DT><CODE>\b</CODE></DT>
<DD>
<P>Backspace, <KBD><EM>Ctrl-h</EM></KBD>, ASCII code 8 (BS). </P><A name=index-_005c-_0028backslash_0029_002c-_005cf-escape-sequence></A><A name=index-backslash-_0028_005c_0029_002c-_005cf-escape-sequence></A></DD>
<DT><CODE>\f</CODE></DT>
<DD>
<P>Formfeed, <KBD><EM>Ctrl-l</EM></KBD>, ASCII code 12 (FF). </P><A name=index-_005c-_0028backslash_0029_002c-_005cn-escape-sequence></A><A name=index-backslash-_0028_005c_0029_002c-_005cn-escape-sequence></A></DD>
<DT><CODE>\n</CODE></DT>
<DD>
<P>Newline, <KBD><EM>Ctrl-j</EM></KBD>, ASCII code 10 (LF). </P><A name=index-_005c-_0028backslash_0029_002c-_005cr-escape-sequence></A><A name=index-backslash-_0028_005c_0029_002c-_005cr-escape-sequence></A></DD>
<DT><CODE>\r</CODE></DT>
<DD>
<P>Carriage return, <KBD><EM>Ctrl-m</EM></KBD>, ASCII code 13 (CR). </P><A name=index-_005c-_0028backslash_0029_002c-_005ct-escape-sequence></A><A name=index-backslash-_0028_005c_0029_002c-_005ct-escape-sequence></A></DD>
<DT><CODE>\t</CODE></DT>
<DD>
<P>Horizontal TAB, <KBD><EM>Ctrl-i</EM></KBD>, ASCII code 9 (HT). </P><A name=index-_005c-_0028backslash_0029_002c-_005cv-escape-sequence></A><A name=index-backslash-_0028_005c_0029_002c-_005cv-escape-sequence></A></DD>
<DT><CODE>\v</CODE></DT>
<DD>
<P>Vertical tab, <KBD><EM>Ctrl-k</EM></KBD>, ASCII code 11 (VT). </P><A name=index-_005c-_0028backslash_0029_002c-_005cnnn-escape-sequence></A><A name=index-backslash-_0028_005c_0029_002c-_005cnnn-escape-sequence></A></DD>
<DT><CODE>\<VAR>nnn</VAR></CODE></DT>
<DD>
<P>The octal value <VAR>nnn</VAR>, where <VAR>nnn</VAR> stands for 1 to 3 digits between &#8216;<SAMP>0</SAMP>&#8217; and &#8216;<SAMP>7</SAMP>&#8217;. For example, the code for the ASCII ESC (escape) character is &#8216;<SAMP>\033</SAMP>&#8217;. </P><A name=index-_005c-_0028backslash_0029_002c-_005cx-escape-sequence></A><A name=index-backslash-_0028_005c_0029_002c-_005cx-escape-sequence></A><A name=index-common-extensions_002c-_005cx-escape-sequence></A><A name=index-extensions_002c-common_002c-_005cx-escape-sequence></A></DD>
<DT><CODE>\x<VAR>hh</VAR>&#8230;</CODE></DT>
<DD>
<P>The hexadecimal value <VAR>hh</VAR>, where <VAR>hh</VAR> stands for a sequence of hexadecimal digits (&#8216;<SAMP>0</SAMP>&#8217;&#8211;&#8216;<SAMP>9</SAMP>&#8217;, and either &#8216;<SAMP>A</SAMP>&#8217;&#8211;&#8216;<SAMP>F</SAMP>&#8217; or &#8216;<SAMP>a</SAMP>&#8217;&#8211;&#8216;<SAMP>f</SAMP>&#8217;). Like the same construct in ISO C, the escape sequence continues until the first nonhexadecimal digit is seen. (c.e.) However, using more than two hexadecimal digits produces undefined results. (The &#8216;<SAMP>\x</SAMP>&#8217; escape sequence is not allowed in POSIX <CODE>awk</CODE>.) </P><A name=index-_005c-_0028backslash_0029_002c-_005c_002f-escape-sequence></A><A name=index-backslash-_0028_005c_0029_002c-_005c_002f-escape-sequence></A></DD>
<DT><CODE>\/</CODE></DT>
<DD>
<P>A literal slash (necessary for regexp constants only). This sequence is used when you want to write a regexp constant that contains a slash. Because the regexp is delimited by slashes, you need to escape the slash that is part of the pattern, in order to tell <CODE>awk</CODE> to keep processing the rest of the regexp. </P><A name=index-_005c-_0028backslash_0029_002c-_005c_0022-escape-sequence></A><A name=index-backslash-_0028_005c_0029_002c-_005c_0022-escape-sequence></A></DD>
<DT><CODE>\"</CODE></DT>
<DD>
<P>A literal double quote (necessary for string constants only). This sequence is used when you want to write a string constant that contains a double quote. Because the string is delimited by double quotes, you need to escape the quote that is part of the string, in order to tell <CODE>awk</CODE> to keep processing the rest of the string. </P></DD></DL>
<P>In <CODE>gawk</CODE>, a number of additional two-character sequences that begin with a backslash have special meaning in regexps. See <A href="http://www.gnu.org/software/gawk/manual/gawk.html#GNU-Regexp-Operators">GNU Regexp Operators</A>. </P>
<P>In a regexp, a backslash before any character that is not in the previous list and not listed in <A href="http://www.gnu.org/software/gawk/manual/gawk.html#GNU-Regexp-Operators">GNU Regexp Operators</A>, means that the next character should be taken literally, even if it would normally be a regexp operator. For example, <CODE>/a\+b/</CODE> matches the three characters &#8216;<SAMP>a+b</SAMP>&#8217;. </P><A name=index-backslash-_0028_005c_0029_002c-in-escape-sequences-1></A><A name=index-_005c-_0028backslash_0029_002c-in-escape-sequences-1></A><A name=index-portability></A>
<P>For complete portability, do not use a backslash before any character not shown in the previous list. </P>
<P>To summarize: </P>
<UL>
<LI>The escape sequences in the table above are always processed first, for both string constants and regexp constants. This happens very early, as soon as <CODE>awk</CODE> reads your program. </LI>
<LI><CODE>gawk</CODE> processes both regexp constants and dynamic regexps (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Computed-Regexps">Computed Regexps</A>), for the special operators listed in <A href="http://www.gnu.org/software/gawk/manual/gawk.html#GNU-Regexp-Operators">GNU Regexp Operators</A>. </LI>
<LI>A backslash before any other character means to treat that character literally. </LI></UL><A name=index-sidebar_002c-Backslash-Before-Regular-Characters></A>
<TABLE class=cartouche border=1>
<TBODY>
<TR>
<TD>
<DIV align=center><B>Backslash Before Regular Characters</B> </DIV><A name=index-portability_002c-backslash-in-escape-sequences></A><A name=index-POSIX-awk_002c-backslashes-in-string-constants></A><A name=index-backslash-_0028_005c_0029_002c-in-escape-sequences_002c-POSIX-and></A><A name=index-_005c-_0028backslash_0029_002c-in-escape-sequences_002c-POSIX-and></A><A name=index-troubleshooting_002c-backslash-before-nonspecial-character></A>
<P>If you place a backslash in a string constant before something that is not one of the characters previously listed, POSIX <CODE>awk</CODE> purposely leaves what happens as undefined. There are two choices: </P><A name=index-Brian-Kernighan_0027s-awk-2></A>
<DL compact>
<DT>Strip the backslash out</DT>
<DD>
<P>This is what Brian Kernighan&#8217;s <CODE>awk</CODE> and <CODE>gawk</CODE> both do. For example, <CODE>"a\qc"</CODE> is the same as <CODE>"aqc"</CODE>. (Because this is such an easy bug both to introduce and to miss, <CODE>gawk</CODE> warns you about it.) Consider &#8216;<SAMP>FS = "[&nbsp;\t]+\|[&nbsp;\t]+"<!-- /@w --></SAMP>&#8217; to use vertical bars surrounded by whitespace as the field separator. There should be two backslashes in the string: &#8216;<SAMP>FS = "[&nbsp;\t]+\\|[&nbsp;\t]+"<!-- /@w --></SAMP>&#8217;.) </P><A name=index-gawk_002c-escape-sequences></A><A name=index-Unix-awk_002c-backslashes-in-escape-sequences></A><A name=index-mawk-utility></A></DD>
<DT>Leave the backslash alone</DT>
<DD>
<P>Some other <CODE>awk</CODE> implementations do this. In such implementations, typing <CODE>"a\qc"</CODE> is the same as typing <CODE>"a\\qc"</CODE>. </P></DD></DL></TD></TR></TBODY></TABLE><A name=index-sidebar_002c-Escape-Sequences-for-Metacharacters></A>
<TABLE class=cartouche border=1>
<TBODY>
<TR>
<TD>
<DIV align=center><B>Escape Sequences for Metacharacters</B> </DIV><A name=index-metacharacters_002c-escape-sequences-for></A>
<P>Suppose you use an octal or hexadecimal escape to represent a regexp metacharacter. (See <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Regexp-Operators">Regexp Operators</A>.) Does <CODE>awk</CODE> treat the character as a literal character or as a regexp operator? </P><A name=index-dark-corner_002c-escape-sequences_002c-for-metacharacters></A>
<P>Historically, such characters were taken literally. (d.c.) However, the POSIX standard indicates that they should be treated as real metacharacters, which is what <CODE>gawk</CODE> does. In compatibility mode (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Options">Options</A>), <CODE>gawk</CODE> treats the characters represented by octal and hexadecimal escape sequences literally when used in regexp constants. Thus, <CODE>/a\52b/</CODE> is equivalent to <CODE>/a\*b/</CODE>. </P></TD></TR></TBODY></TABLE>