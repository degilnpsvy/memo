<H4 class=subsection>2.5.3 Other Environment Variables</H4>
<P>A number of other environment variables affect <CODE>gawk</CODE>&#8217;s behavior, but they are more specialized. Those in the following list are meant to be used by regular users. </P>
<DL compact>
<DT><CODE>POSIXLY_CORRECT</CODE></DT>
<DD>
<P>Causes <CODE>gawk</CODE> to switch POSIX compatibility mode, disabling all traditional and GNU extensions. See <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Options">Options</A>. </P></DD>
<DT><CODE>GAWK_SOCK_RETRIES</CODE></DT>
<DD>
<P>Controls the number of time <CODE>gawk</CODE> will attempt to retry a two-way TCP/IP (socket) connection before giving up. See <A href="http://www.gnu.org/software/gawk/manual/gawk.html#TCP_002fIP-Networking">TCP/IP Networking</A>. </P></DD>
<DT><CODE>GAWK_MSEC_SLEEP</CODE></DT>
<DD>
<P>Specifies the interval between connection retries, in milliseconds. On systems that do not support the <CODE>usleep()</CODE> system call, the value is rounded up to an integral number of seconds. </P></DD>
<DT><CODE>GAWK_READ_TIMEOUT</CODE></DT>
<DD>
<P>Specifies the time, in milliseconds, for <CODE>gawk</CODE> to wait for input before returning with an error. See <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Read-Timeout">Read Timeout</A>. </P></DD></DL>
<P>The environment variables in the following list are meant for use by the <CODE>gawk</CODE> developers for testing and tuning. They are subject to change. The variables are: </P>
<DL compact>
<DT><CODE>AWK_HASH</CODE></DT>
<DD>
<P>If this variable exists with a value of &#8216;<SAMP>gst</SAMP>&#8217;, <CODE>gawk</CODE> will switch to using the hash function from GNU Smalltalk for managing arrays. This function may be marginally faster than the standard function. </P></DD>
<DT><CODE>AWKREADFUNC</CODE></DT>
<DD>
<P>If this variable exists, <CODE>gawk</CODE> switches to reading source files one line at a time, instead of reading in blocks. This exists for debugging problems on filesystems on non-POSIX operating systems where I/O is performed in records, not in blocks. </P></DD>
<DT><CODE>GAWK_MSG_SRC</CODE></DT>
<DD>
<P>If this variable exists, <CODE>gawk</CODE> includes the source file name and line number from which warning and/or fatal messages are generated. Its purpose is to help isolate the source of a message, since there can be multiple places which produce the same warning or error message. </P></DD>
<DT><CODE>GAWK_NO_DFA</CODE></DT>
<DD>
<P>If this variable exists, <CODE>gawk</CODE> does not use the DFA regexp matcher for &#8220;does it match&#8221; kinds of tests. This can cause <CODE>gawk</CODE> to be slower. Its purpose is to help isolate differences between the two regexp matchers that <CODE>gawk</CODE> uses internally. (There aren&#8217;t supposed to be differences, but occasionally theory and practice don&#8217;t coordinate with each other.) </P></DD>
<DT><CODE>GAWK_STACKSIZE</CODE></DT>
<DD>
<P>This specifies the amount by which <CODE>gawk</CODE> should grow its internal evaluation stack, when needed. </P></DD>
<DT><CODE>INT_CHAIN_MAX</CODE></DT>
<DD>
<P>The average number of items <CODE>gawk</CODE> will maintain on a hash chain for managing arrays indexed by integers. </P></DD>
<DT><CODE>STR_CHAIN_MAX</CODE></DT>
<DD>
<P>The average number of items <CODE>gawk</CODE> will maintain on a hash chain for managing arrays indexed by strings. </P></DD>
<DT><CODE>TIDYMEM</CODE></DT>
<DD>
<P>If this variable exists, <CODE>gawk</CODE> uses the <CODE>mtrace()</CODE> library calls from GNU LIBC to help track down possible memory leaks. </P></DD></DL>