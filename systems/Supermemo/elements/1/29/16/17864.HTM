<H4 class=subsection>10.2.2 Assertions</H4><A name=index-assertions></A><A name=index-assert_0028_0029-function-_0028C-library_0029></A><A name=index-libraries-of-awk-functions_002c-assertions></A><A name=index-functions_002c-library_002c-assertions></A><A name=index-awk-programs_002c-lengthy_002c-assertions></A>
<P>When writing large programs, it is often useful to know that a condition or set of conditions is true. Before proceeding with a particular computation, you make a statement about what you believe to be the case. Such a statement is known as an <EM>assertion</EM>. The C language provides an <CODE>&lt;assert.h&gt;</CODE> header file and corresponding <CODE>assert()</CODE> macro that the programmer can use to make assertions. If an assertion fails, the <CODE>assert()</CODE> macro arranges to print a diagnostic message describing the condition that should have been true but was not, and then it kills the program. In C, using <CODE>assert()</CODE> looks this: </P>
<DIV class=example><PRE class=example>#include &lt;assert.h&gt;

int myfunc(int a, double b)
{
     assert(a &lt;= 5 &amp;&amp; b &gt;= 17.1);
     &#8230;
}
</PRE></DIV>
<P>If the assertion fails, the program prints a message similar to this: </P>
<DIV class=example><PRE class=example>prog.c:5: assertion failed: a &lt;= 5 &amp;&amp; b &gt;= 17.1
</PRE></DIV><A name=index-assert_0028_0029-user_002ddefined-function></A>
<P>The C language makes it possible to turn the condition into a string for use in printing the diagnostic message. This is not possible in <CODE>awk</CODE>, so this <CODE>assert()</CODE> function also requires a string version of the condition that is being tested. Following is the function: </P>
<DIV class=example><PRE class=example># assert --- assert that a condition is true. Otherwise exit.

function assert(condition, string)
{
    if (! condition) {
        printf("%s:%d: assertion failed: %s\n",
            FILENAME, FNR, string) &gt; "/dev/stderr"
        _assert_exit = 1
        exit 1
    }
}

</PRE><PRE class=example>END {
    if (_assert_exit)
        exit 1
}
</PRE></DIV>
<P>The <CODE>assert()</CODE> function tests the <CODE>condition</CODE> parameter. If it is false, it prints a message to standard error, using the <CODE>string</CODE> parameter to describe the failed condition. It then sets the variable <CODE>_assert_exit</CODE> to one and executes the <CODE>exit</CODE> statement. The <CODE>exit</CODE> statement jumps to the <CODE>END</CODE> rule. If the <CODE>END</CODE> rules finds <CODE>_assert_exit</CODE> to be true, it exits immediately. </P>
<P>The purpose of the test in the <CODE>END</CODE> rule is to keep any other <CODE>END</CODE> rules from running. When an assertion fails, the program should exit immediately. If no assertions fail, then <CODE>_assert_exit</CODE> is still false when the <CODE>END</CODE> rule is run normally, and the rest of the program&#8217;s <CODE>END</CODE> rules execute. For all of this to work correctly, <SAMP>assert.awk</SAMP> must be the first source file read by <CODE>awk</CODE>. The function can be used in a program in the following way: </P>
<DIV class=example><PRE class=example>function myfunc(a, b)
{
     assert(a &lt;= 5 &amp;&amp; b &gt;= 17.1, "a &lt;= 5 &amp;&amp; b &gt;= 17.1")
     &#8230;
}
</PRE></DIV>
<P>If the assertion fails, you see a message similar to the following: </P>
<DIV class=example><PRE class=example>mydata:1357: assertion failed: a &lt;= 5 &amp;&amp; b &gt;= 17.1
</PRE></DIV><A name=index-END-pattern_002c-assert_0028_0029-user_002ddefined-function-and></A>
<P>There is a small problem with this version of <CODE>assert()</CODE>. An <CODE>END</CODE> rule is automatically added to the program calling <CODE>assert()</CODE>. Normally, if a program consists of just a <CODE>BEGIN</CODE> rule, the input files and/or standard input are not read. However, now that the program has an <CODE>END</CODE> rule, <CODE>awk</CODE> attempts to read the input data files or standard input (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Using-BEGIN_002fEND">Using BEGIN/END</A>), most likely causing the program to hang as it waits for input. </P><A name=index-BEGIN-pattern_002c-assert_0028_0029-user_002ddefined-function-and></A>
<P>There is a simple workaround to this: make sure that such a <CODE>BEGIN</CODE> rule always ends with an <CODE>exit</CODE> statement.