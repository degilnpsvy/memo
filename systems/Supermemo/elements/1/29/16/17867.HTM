<H4 class=subsection>10.2.5 Translating Between Characters and Numbers</H4><A name=index-libraries-of-awk-functions_002c-character-values-as-numbers></A><A name=index-functions_002c-library_002c-character-values-as-numbers></A><A name=index-characters_002c-values-of-as-numbers></A><A name=index-numbers_002c-as-values-of-characters></A>
<P>One commercial implementation of <CODE>awk</CODE> supplies a built-in function, <CODE>ord()</CODE>, which takes a character and returns the numeric value for that character in the machine&#8217;s character set. If the string passed to <CODE>ord()</CODE> has more than one character, only the first one is used. </P>
<P>The inverse of this function is <CODE>chr()</CODE> (from the function of the same name in Pascal), which takes a number and returns the corresponding character. Both functions are written very nicely in <CODE>awk</CODE>; there is no real reason to build them into the <CODE>awk</CODE> interpreter: </P><A name=index-ord_0028_0029-user_002ddefined-function></A><A name=index-chr_0028_0029-user_002ddefined-function></A><A name=index-_005ford_005finit_0028_0029-user_002ddefined-function></A>
<DIV class=example><PRE class=example># ord.awk --- do ord and chr

# Global identifiers:
#    _ord_:        numerical values indexed by characters
#    _ord_init:    function to initialize _ord_

BEGIN    { _ord_init() }

function _ord_init(    low, high, i, t)
{
    low = sprintf("%c", 7) # BEL is ascii 7
    if (low == "\a") {    # regular ascii
        low = 0
        high = 127
    } else if (sprintf("%c", 128 + 7) == "\a") {
        # ascii, mark parity
        low = 128
        high = 255
    } else {        # ebcdic(!)
        low = 0
        high = 255
    }

    for (i = low; i &lt;= high; i++) {
        t = sprintf("%c", i)
        _ord_[t] = i
    }
}
</PRE></DIV><A name=index-character-sets-_0028machine-character-encodings_0029></A><A name=index-ASCII></A><A name=index-EBCDIC></A><A name=index-Unicode></A><A name=index-mark-parity></A>
<P>Some explanation of the numbers used by <CODE>_ord_init()</CODE> is worthwhile. The most prominent character set in use today is ASCII.<A href="http://www.gnu.org/software/gawk/manual/gawk.html#FOOT65" name=DOCF65><SUP>65</SUP></A> Although an 8-bit byte can hold 256 distinct values (from 0 to 255), ASCII only defines characters that use the values from 0 to 127.<A href="http://www.gnu.org/software/gawk/manual/gawk.html#FOOT66" name=DOCF66><SUP>66</SUP></A> In the now distant past, at least one minicomputer manufacturer used ASCII, but with mark parity, meaning that the leftmost bit in the byte is always 1. This means that on those systems, characters have numeric values from 128 to 255. Finally, large mainframe systems use the EBCDIC character set, which uses all 256 values. While there are other character sets in use on some older systems, they are not really worth worrying about: </P>
<DIV class=example><PRE class=example>function ord(str,    c)
{
    # only first character is of interest
    c = substr(str, 1, 1)
    return _ord_[c]
}

function chr(c)
{
    # force c to be numeric by adding 0
    return sprintf("%c", c + 0)
}

#### test code ####
# BEGIN    \
# {
#    for (;;) {
#        printf("enter a character: ")
#        if (getline var &lt;= 0)
#            break
#        printf("ord(%s) = %d\n", var, ord(var))
#    }
# }
</PRE></DIV>
<P>An obvious improvement to these functions is to move the code for the <CODE><SPAN class=nolinebreak>_ord_init</SPAN><!-- /@w --></CODE> function into the body of the <CODE>BEGIN</CODE> rule. It was written this way initially for ease of development. There is a &#8220;test program&#8221; in a <CODE>BEGIN</CODE> rule, to test the function. It is commented out for production use.