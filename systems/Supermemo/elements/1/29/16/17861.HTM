<H3 class=section>10.1 Naming Library Function Global Variables</H3><A name=index-names_002c-arrays_002fvariables-1></A><A name=index-names_002c-functions-1></A><A name=index-namespace-issues-1></A><A name=index-awk-programs_002c-documenting-1></A><A name=index-documentation_002c-of-awk-programs></A>
<P>Due to the way the <CODE>awk</CODE> language evolved, variables are either <EM>global</EM> (usable by the entire program) or <EM>local</EM> (usable just by a specific function). There is no intermediate state analogous to <CODE>static</CODE> variables in C. </P><A name=index-variables_002c-global_002c-for-library-functions></A><A name=index-private-variables></A><A name=index-variables_002c-private></A>
<P>Library functions often need to have global variables that they can use to preserve state information between calls to the function&#8212;for example, <CODE>getopt()</CODE>&#8217;s variable <CODE>_opti</CODE> (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Getopt-Function">Getopt Function</A>). Such variables are called <EM>private</EM>, since the only functions that need to use them are the ones in the library. </P>
<P>When writing a library function, you should try to choose names for your private variables that will not conflict with any variables used by either another library function or a user&#8217;s main program. For example, a name like <CODE>i</CODE> or <CODE>j</CODE> is not a good choice, because user programs often use variable names like these for their own purposes. </P><A name=index-programming-conventions_002c-private-variable-names></A>
<P>The example programs shown in this chapter all start the names of their private variables with an underscore (&#8216;<SAMP>_</SAMP>&#8217;). Users generally don&#8217;t use leading underscores in their variable names, so this convention immediately decreases the chances that the variable name will be accidentally shared with the user&#8217;s program. </P><A name=index-_005f-_0028underscore_0029_002c-in-names-of-private-variables></A><A name=index-underscore-_0028_005f_0029_002c-in-names-of-private-variables></A>
<P>In addition, several of the library functions use a prefix that helps indicate what function or set of functions use the variables&#8212;for example, <CODE>_pw_byname()</CODE> in the user database routines (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Passwd-Functions">Passwd Functions</A>). This convention is recommended, since it even further decreases the chance of inadvertent conflict among variable names. Note that this convention is used equally well for variable names and for private function names.<A href="http://www.gnu.org/software/gawk/manual/gawk.html#FOOT63" name=DOCF63><SUP>63</SUP></A> </P>
<P>As a final note on variable naming, if a function makes global variables available for use by a main program, it is a good convention to start that variable&#8217;s name with a capital letter&#8212;for example, <CODE>getopt()</CODE>&#8217;s <CODE>Opterr</CODE> and <CODE>Optind</CODE> variables (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Getopt-Function">Getopt Function</A>). The leading capital letter indicates that it is global, while the fact that the variable name is not all capital letters indicates that the variable is not one of <CODE>awk</CODE>&#8217;s built-in variables, such as <CODE>FS</CODE>. </P><A name=index-_002d_002ddump_002dvariables-option_002c-using-for-library-functions></A>
<P>It is also important that <EM>all</EM> variables in library functions that do not need to save state are, in fact, declared local.<A href="http://www.gnu.org/software/gawk/manual/gawk.html#FOOT64" name=DOCF64><SUP>64</SUP></A> If this is not done, the variable could accidentally be used in the user&#8217;s program, leading to bugs that are very difficult to track down: </P>
<DIV class=example><PRE class=example>function lib_func(x, y,    l1, l2)
{
    &#8230;
    <VAR>use variable</VAR> some_var   # some_var should be local
    &#8230;                     # but is not by oversight
}
</PRE></DIV><A name=index-arrays_002c-associative_002c-library-functions-and></A><A name=index-libraries-of-awk-functions_002c-associative-arrays-and></A><A name=index-functions_002c-library_002c-associative-arrays-and></A><A name=index-Tcl></A>
<P>A different convention, common in the Tcl community, is to use a single associative array to hold the values needed by the library function(s), or &#8220;package.&#8221; This significantly decreases the number of actual global names in use. For example, the functions described in <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Passwd-Functions">Passwd Functions</A>, might have used array elements <CODE><SPAN class=nolinebreak>PW_data["inited"]</SPAN><!-- /@w --></CODE>, <CODE><SPAN class=nolinebreak>PW_data["total"]</SPAN><!-- /@w --></CODE>, <CODE><SPAN class=nolinebreak>PW_data["count"]</SPAN><!-- /@w --></CODE>, and <CODE><SPAN class=nolinebreak>PW_data["awklib"]</SPAN><!-- /@w --></CODE>, instead of <CODE><SPAN class=nolinebreak>_pw_inited</SPAN><!-- /@w --></CODE>, <CODE><SPAN class=nolinebreak>_pw_awklib</SPAN><!-- /@w --></CODE>, <CODE><SPAN class=nolinebreak>_pw_total</SPAN><!-- /@w --></CODE>, and <CODE><SPAN class=nolinebreak>_pw_count</SPAN><!-- /@w --></CODE>. </P>
<P>The conventions presented in this section are exactly that: conventions. You are not required to write your programs this way&#8212;we merely recommend that you do so.