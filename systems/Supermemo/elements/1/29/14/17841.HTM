<H4 class=subsection>9.1.1 Calling Built-in Functions</H4>
<P>To call one of <CODE>awk</CODE>&#8217;s built-in functions, write the name of the function followed by arguments in parentheses. For example, &#8216;<SAMP>atan2(y + z, 1)</SAMP>&#8217; is a call to the function <CODE>atan2()</CODE> and has two arguments. </P><A name=index-programming-conventions_002c-functions_002c-calling></A><A name=index-whitespace_002c-functions_002c-calling></A>
<P>Whitespace is ignored between the built-in function name and the open parenthesis, but nonetheless it is good practice to avoid using whitespace there. User-defined functions do not permit whitespace in this way, and it is easier to avoid mistakes by following a simple convention that always works&#8212;no whitespace after a function name. </P><A name=index-troubleshooting_002c-gawk_002c-fatal-errors_002c-function-arguments></A><A name=index-gawk_002c-function-arguments-and></A><A name=index-differences-in-awk-and-gawk_002c-function-arguments-_0028gawk_0029></A>
<P>Each built-in function accepts a certain number of arguments. In some cases, arguments can be omitted. The defaults for omitted arguments vary from function to function and are described under the individual functions. In some <CODE>awk</CODE> implementations, extra arguments given to built-in functions are ignored. However, in <CODE>gawk</CODE>, it is a fatal error to give extra arguments to a built-in function. </P>
<P>When a function is called, expressions that create the function&#8217;s actual parameters are evaluated completely before the call is performed. For example, in the following code fragment: </P>
<DIV class=example><PRE class=example>i = 4
j = sqrt(i++)
</PRE></DIV><A name=index-evaluation-order_002c-functions></A><A name=index-functions_002c-built_002din_002c-evaluation-order></A><A name=index-built_002din-functions_002c-evaluation-order></A>
<P>the variable <CODE>i</CODE> is incremented to the value five before <CODE>sqrt()</CODE> is called with a value of four for its actual parameter. The order of evaluation of the expressions used for the function&#8217;s parameters is undefined. Thus, avoid writing programs that assume that parameters are evaluated from left to right or from right to left. For example: </P>
<DIV class=example><PRE class=example>i = 5
j = atan2(i++, i *= 2)
</PRE></DIV>
<P>If the order of evaluation is left to right, then <CODE>i</CODE> first becomes 6, and then 12, and <CODE>atan2()</CODE> is called with the two arguments 6 and 12. But if the order of evaluation is right to left, <CODE>i</CODE> first becomes 10, then 11, and <CODE>atan2()</CODE> is called with the two arguments 11 and 10.