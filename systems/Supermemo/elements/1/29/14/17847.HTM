<H4 class=subsection>9.1.6 Bit-Manipulation Functions</H4><A name=index-bit_002dmanipulation-functions></A><A name=index-bitwise_002c-operations></A><A name=index-AND-bitwise-operation></A><A name=index-OR-bitwise-operation></A><A name=index-XOR-bitwise-operation></A><A name=index-operations_002c-bitwise></A>
<BLOCKQUOTE>
<P><I>I can explain it for you, but I can&#8217;t understand it for you.</I> </P></BLOCKQUOTE>
<DIV align=center>&#8212; <EM>Anonymous</EM> </DIV>
<P>Many languages provide the ability to perform <EM>bitwise</EM> operations on two integer numbers. In other words, the operation is performed on each successive pair of bits in the operands. Three common operations are bitwise AND, OR, and XOR. The operations are described in <A href="http://www.gnu.org/software/gawk/manual/gawk.html#table_002dbitwise_002dops">Table 9.6</A>. </P>
<DIV class=float><A name=table_002dbitwise_002dops></A>
<DIV class=display><PRE class=display>                Bit Operator
          |  AND  |   OR  |  XOR
          |&#8212;+&#8212;+&#8212;+&#8212;+&#8212;+&#8212;
Operands  | 0 | 1 | 0 | 1 | 0 | 1
&#8212;&#8212;&#8212;-+&#8212;+&#8212;+&#8212;+&#8212;+&#8212;+&#8212;
    0     | 0   0 | 0   1 | 0   1
    1     | 0   1 | 1   1 | 1   0
</PRE></DIV>
<DIV class=float-caption>
<P><STRONG>Table 9.6: </STRONG>Bitwise Operations</P></DIV></DIV><A name=index-bitwise_002c-complement></A><A name=index-complement_002c-bitwise></A>
<P>As you can see, the result of an AND operation is 1 only when <EM>both</EM> bits are 1. The result of an OR operation is 1 if <EM>either</EM> bit is 1. The result of an XOR operation is 1 if either bit is 1, but not both. The next operation is the <EM>complement</EM>; the complement of 1 is 0 and the complement of 0 is 1. Thus, this operation &#8220;flips&#8221; all the bits of a given value. </P><A name=index-bitwise_002c-shift></A><A name=index-left-shift_002c-bitwise></A><A name=index-right-shift_002c-bitwise></A><A name=index-shift_002c-bitwise></A>
<P>Finally, two other common operations are to shift the bits left or right. For example, if you have a bit string &#8216;<SAMP>10111001</SAMP>&#8217; and you shift it right by three bits, you end up with &#8216;<SAMP>00010111</SAMP>&#8217;.<A href="http://www.gnu.org/software/gawk/manual/gawk.html#FOOT58" name=DOCF58><SUP>58</SUP></A> If you start over again with &#8216;<SAMP>10111001</SAMP>&#8217; and shift it left by three bits, you end up with &#8216;<SAMP>11001000</SAMP>&#8217;. <CODE>gawk</CODE> provides built-in functions that implement the bitwise operations just described. They are: </P><A name=index-gawk_002c-bitwise-operations-in></A>
<DL compact>
<DD><A name=index-and_0028_0029-function-_0028gawk_0029></A><A name=index-bitwise-AND></A></DD>
<DT><CODE>and(<VAR>v1</VAR>, <VAR>v2</VAR> <SPAN class=roman><FONT face=Batang>[</FONT></SPAN>, <SPAN class=roman><FONT face=Batang>&#8230;]</FONT></SPAN>)</CODE></DT>
<DD>
<P>Return the bitwise AND of the arguments. There must be at least two. </P><A name=index-compl_0028_0029-function-_0028gawk_0029></A><A name=index-bitwise-complement></A></DD>
<DT><CODE>compl(<VAR>val</VAR>)</CODE></DT>
<DD>
<P>Return the bitwise complement of <VAR>val</VAR>. </P><A name=index-lshift_0028_0029-function-_0028gawk_0029></A><A name=index-left-shift></A></DD>
<DT><CODE>lshift(<VAR>val</VAR>, <VAR>count</VAR>)</CODE></DT>
<DD>
<P>Return the value of <VAR>val</VAR>, shifted left by <VAR>count</VAR> bits. </P><A name=index-or_0028_0029-function-_0028gawk_0029></A><A name=index-bitwise-OR></A></DD>
<DT><CODE>or(<VAR>v1</VAR>, <VAR>v2</VAR> <SPAN class=roman><FONT face=Batang>[</FONT></SPAN>, <SPAN class=roman><FONT face=Batang>&#8230;]</FONT></SPAN>)</CODE></DT>
<DD>
<P>Return the bitwise OR of the arguments. There must be at least two. </P><A name=index-rshift_0028_0029-function-_0028gawk_0029></A><A name=index-right-shift></A></DD>
<DT><CODE>rshift(<VAR>val</VAR>, <VAR>count</VAR>)</CODE></DT>
<DD>
<P>Return the value of <VAR>val</VAR>, shifted right by <VAR>count</VAR> bits. </P><A name=index-xor_0028_0029-function-_0028gawk_0029></A><A name=index-bitwise-XOR></A></DD>
<DT><CODE>xor(<VAR>v1</VAR>, <VAR>v2</VAR> <SPAN class=roman><FONT face=Batang>[</FONT></SPAN>, <SPAN class=roman><FONT face=Batang>&#8230;]</FONT></SPAN>)</CODE></DT>
<DD>
<P>Return the bitwise XOR of the arguments. There must be at least two. </P></DD></DL>
<P>For all of these functions, first the double precision floating-point value is converted to the widest C unsigned integer type, then the bitwise operation is performed. If the result cannot be represented exactly as a C <CODE>double</CODE>, leading nonzero bits are removed one by one until it can be represented exactly. The result is then converted back into a C <CODE>double</CODE>. (If you don&#8217;t understand this paragraph, don&#8217;t worry about it.) </P>
<P>Here is a user-defined function (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#User_002ddefined">User-defined</A>) that illustrates the use of these functions: </P><A name=index-bits2str_0028_0029-user_002ddefined-function></A><A name=index-testbits_002eawk-program></A>
<DIV class=example><PRE class=example># bits2str --- turn a byte into readable 1's and 0's

function bits2str(bits,        data, mask)
{
    if (bits == 0)
        return "0"

    mask = 1
    for (; bits != 0; bits = rshift(bits, 1))
        data = (and(bits, mask) ? "1" : "0") data

    while ((length(data) % 8) != 0)
        data = "0" data

    return data
}
</PRE><PRE class=example>BEGIN {
    printf "123 = %s\n", bits2str(123)
    printf "0123 = %s\n", bits2str(0123)
    printf "0x99 = %s\n", bits2str(0x99)
    comp = compl(0x99)
    printf "compl(0x99) = %#x = %s\n", comp, bits2str(comp)
    shift = lshift(0x99, 2)
    printf "lshift(0x99, 2) = %#x = %s\n", shift, bits2str(shift)
    shift = rshift(0x99, 2)
    printf "rshift(0x99, 2) = %#x = %s\n", shift, bits2str(shift)
}
</PRE></DIV>
<P>This program produces the following output when run: </P>
<DIV class=example><PRE class=example>$ <KBD><EM>gawk -f testbits.awk</EM></KBD>
-| 123 = 01111011
-| 0123 = 01010011
-| 0x99 = 10011001
-| compl(0x99) = 0xffffff66 = 11111111111111111111111101100110
-| lshift(0x99, 2) = 0x264 = 0000001001100100
-| rshift(0x99, 2) = 0x26 = 00100110
</PRE></DIV><A name=index-converting_002c-strings-to-numbers-1></A><A name=index-strings_002c-converting-1></A><A name=index-numbers_002c-converting-1></A><A name=index-converting_002c-numbers-to-strings-1></A><A name=index-number-as-string-of-bits></A>
<P>The <CODE>bits2str()</CODE> function turns a binary number into a string. The number <CODE>1</CODE> represents a binary value where the rightmost bit is set to 1. Using this mask, the function repeatedly checks the rightmost bit. ANDing the mask with the value indicates whether the rightmost bit is 1 or not. If so, a <CODE>"1"</CODE> is concatenated onto the front of the string. Otherwise, a <CODE>"0"</CODE> is added. The value is then shifted right by one bit and the loop continues until there are no more 1 bits. </P>
<P>If the initial value is zero it returns a simple <CODE>"0"</CODE>. Otherwise, at the end, it pads the value with zeros to represent multiples of 8-bit quantities. This is typical in modern computers. </P>
<P>The main code in the <CODE>BEGIN</CODE> rule shows the difference between the decimal and octal values for the same numbers (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Nondecimal_002dnumbers">Nondecimal-numbers</A>), and then demonstrates the results of the <CODE>compl()</CODE>, <CODE>lshift()</CODE>, and <CODE>rshift()</CODE> functions.