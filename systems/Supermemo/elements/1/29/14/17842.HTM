<H4 class=subsection>9.1.2 Numeric Functions</H4><A name=index-numeric-functions></A>
<P>The following list describes all of the built-in functions that work with numbers. Optional parameters are enclosed in square brackets&nbsp;([&nbsp;]):<!-- /@w --> </P>
<DL compact>
<DT><CODE>atan2(<VAR>y</VAR>, <VAR>x</VAR>)</CODE></DT>
<DD><A name=index-atan2_0028_0029-function></A><A name=index-arctangent></A>
<P>Return the arctangent of <CODE><VAR>y</VAR> / <VAR>x</VAR></CODE> in radians. You can use &#8216;<SAMP>pi = atan2(0, -1)</SAMP>&#8217; to retrieve the value of <I>pi</I>. </P></DD>
<DT><CODE>cos(<VAR>x</VAR>)</CODE></DT>
<DD><A name=index-cos_0028_0029-function></A><A name=index-cosine></A>
<P>Return the cosine of <VAR>x</VAR>, with <VAR>x</VAR> in radians. </P></DD>
<DT><CODE>exp(<VAR>x</VAR>)</CODE></DT>
<DD><A name=index-exp_0028_0029-function></A><A name=index-exponent></A>
<P>Return the exponential of <VAR>x</VAR> (<CODE>e ^ <VAR>x</VAR></CODE>) or report an error if <VAR>x</VAR> is out of range. The range of values <VAR>x</VAR> can have depends on your machine&#8217;s floating-point representation. </P></DD>
<DT><CODE>int(<VAR>x</VAR>)</CODE></DT>
<DD><A name=index-int_0028_0029-function></A><A name=index-round-to-nearest-integer></A>
<P>Return the nearest integer to <VAR>x</VAR>, located between <VAR>x</VAR> and zero and truncated toward zero. </P>
<P>For example, <CODE>int(3)</CODE> is 3, <CODE>int(3.9)</CODE> is 3, <CODE>int(-3.9)</CODE> is -3, and <CODE>int(-3)</CODE> is -3 as well. </P></DD>
<DT><CODE>log(<VAR>x</VAR>)</CODE></DT>
<DD><A name=index-log_0028_0029-function></A><A name=index-logarithm></A>
<P>Return the natural logarithm of <VAR>x</VAR>, if <VAR>x</VAR> is positive; otherwise, report an error. </P></DD>
<DT><CODE>rand()</CODE></DT>
<DD><A name=index-rand_0028_0029-function></A><A name=index-random-numbers_002c-rand_0028_0029_002fsrand_0028_0029-functions></A>
<P>Return a random number. The values of <CODE>rand()</CODE> are uniformly distributed between zero and one. The value could be zero but is never one.<A href="http://www.gnu.org/software/gawk/manual/gawk.html#FOOT43" name=DOCF43><SUP>43</SUP></A> </P>
<P>Often random integers are needed instead. Following is a user-defined function that can be used to obtain a random non-negative integer less than <VAR>n</VAR>: </P>
<DIV class=example><PRE class=example>function randint(n) {
     return int(n * rand())
}
</PRE></DIV>
<P>The multiplication produces a random number greater than zero and less than <CODE>n</CODE>. Using <CODE>int()</CODE>, this result is made into an integer between zero and <CODE>n</CODE> - 1, inclusive. </P>
<P>The following example uses a similar function to produce random integers between one and <VAR>n</VAR>. This program prints a new random number for each input record: </P>
<DIV class=example><PRE class=example># Function to roll a simulated die.
function roll(n) { return 1 + int(rand() * n) }

# Roll 3 six-sided dice and
# print total number of points.
{
      printf("%d points\n",
             roll(6)+roll(6)+roll(6))
}
</PRE></DIV><A name=index-seeding-random-number-generator></A><A name=index-random-numbers_002c-seed-of></A>
<BLOCKQUOTE>
<P><B>CAUTION:</B> In most <CODE>awk</CODE> implementations, including <CODE>gawk</CODE>, <CODE>rand()</CODE> starts generating numbers from the same starting number, or <EM>seed</EM>, each time you run <CODE>awk</CODE>.<A href="http://www.gnu.org/software/gawk/manual/gawk.html#FOOT44" name=DOCF44><SUP>44</SUP></A> Thus, a program generates the same results each time you run it. The numbers are random within one <CODE>awk</CODE> run but predictable from run to run. This is convenient for debugging, but if you want a program to do different things each time it is used, you must change the seed to a value that is different in each run. To do this, use <CODE>srand()</CODE>. </P></BLOCKQUOTE></DD>
<DT><CODE>sin(<VAR>x</VAR>)</CODE></DT>
<DD><A name=index-sin_0028_0029-function></A><A name=index-sine></A>
<P>Return the sine of <VAR>x</VAR>, with <VAR>x</VAR> in radians. </P></DD>
<DT><CODE>sqrt(<VAR>x</VAR>)</CODE></DT>
<DD><A name=index-sqrt_0028_0029-function></A><A name=index-square-root></A>
<P>Return the positive square root of <VAR>x</VAR>. <CODE>gawk</CODE> prints a warning message if <VAR>x</VAR> is negative. Thus, <CODE>sqrt(4)</CODE> is 2. </P></DD>
<DT><CODE>srand(<SPAN class=roman><FONT face=Batang>[</FONT></SPAN><VAR>x</VAR><SPAN class=roman><FONT face=Batang>]</FONT></SPAN>)</CODE></DT>
<DD><A name=index-srand_0028_0029-function></A>
<P>Set the starting point, or seed, for generating random numbers to the value <VAR>x</VAR>. </P>
<P>Each seed value leads to a particular sequence of random numbers.<A href="http://www.gnu.org/software/gawk/manual/gawk.html#FOOT45" name=DOCF45><SUP>45</SUP></A> Thus, if the seed is set to the same value a second time, the same sequence of random numbers is produced again. </P>
<BLOCKQUOTE>
<P><B>CAUTION:</B> Different <CODE>awk</CODE> implementations use different random-number generators internally. Don&#8217;t expect the same <CODE>awk</CODE> program to produce the same series of random numbers when executed by different versions of <CODE>awk</CODE>. </P></BLOCKQUOTE>
<P>If the argument <VAR>x</VAR> is omitted, as in &#8216;<SAMP>srand()</SAMP>&#8217;, then the current date and time of day are used for a seed. This is the way to get random numbers that are truly unpredictable. </P>
<P>The return value of <CODE>srand()</CODE> is the previous seed. This makes it easy to keep track of the seeds in case you need to consistently reproduce sequences of random numbers. </P></DD></DL>