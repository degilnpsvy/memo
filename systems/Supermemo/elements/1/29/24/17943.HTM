<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>15.1.1.3 Standards Versus Existing Practice</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Historically,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>has converted any non-numeric looking string to the numeric value zero, when required. Furthermore, the original definition of the language and the original POSIX standards specified that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>only understands decimal numbers (base 10), and not octal (base 8) or hexadecimal numbers (base 16).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Changes in the language of the 2001 and 2004 POSIX standards can be interpreted to imply that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>should support additional features. These features are:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>Interpretation of floating point data values specified in hexadecimal notation (&#8216;<SAMP>0xDEADBEEF</SAMP>&#8217;). (Note: data values,<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>not</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>source code constants.)</LI>
<LI>Support for the special IEEE 754 floating point values &#8220;Not A Number&#8221; (NaN), positive Infinity (&#8220;inf&#8221;) and negative Infinity (&#8220;-inf&#8221;). In particular, the format for these values is as specified by the ISO 1999 C standard, which ignores case and can allow machine-dependent additional characters after the &#8216;<SAMP>nan</SAMP>&#8217; and allow either &#8216;<SAMP>inf</SAMP>&#8217; or &#8216;<SAMP>infinity</SAMP>&#8217;.</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The first problem is that both of these are clear changes to historical practice:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>maintainer feels that supporting hexadecimal floating point values, in particular, is ugly, and was never intended by the original designers to be part of the language.</LI>
<LI>Allowing completely alphabetic strings to have valid numeric values is also a very severe departure from historical practice.</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The second problem is that the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>maintainer feels that this interpretation of the standard, which requires a certain amount of &#8220;language lawyering&#8221; to arrive at in the first place, was not even intended by the standard developers. In other words, &#8220;we see how you got where you are, but we don&#8217;t think that that&#8217;s where you want to be.&#8221;</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Recognizing the above issues, but attempting to provide compatibility with the earlier versions of the standard, the 2008 POSIX standard added explicit wording to allow, but not require, that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>support hexadecimal floating point values and special values for &#8220;Not A Number&#8221; and infinity.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Although the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>maintainer continues to feel that providing those features is inadvisable, nevertheless, on systems that support IEEE floating point, it seems reasonable to provide<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>some</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>way to support NaN and Infinity values. The solution implemented in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is as follows:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>With the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>--posix</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>command-line option,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>becomes &#8220;hands off.&#8221; String values are passed directly to the system library&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strtod()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function, and if it successfully returns a numeric value, that is what&#8217;s used.<A href="http://www.gnu.org/software/gawk/manual/gawk.html#FOOT90" name=DOCF90><SUP>90</SUP></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>By definition, the results are not portable across different systems. They are also a little surprising:
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>$ <KBD style="FONT-STYLE: oblique">echo nanny | gawk --posix '{ print $1 + 0 }'</KBD>
-| nan
$ <KBD style="FONT-STYLE: oblique">echo 0xDeadBeef | gawk --posix '{ print $1 + 0 }'</KBD>
-| 3735928559
</PRE></DIV></LI>
<LI>Without<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>--posix</SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>interprets the four strings &#8216;<SAMP>+inf</SAMP>&#8217;, &#8216;<SAMP>-inf</SAMP>&#8217;, &#8216;<SAMP>+nan</SAMP>&#8217;, and &#8216;<SAMP>-nan</SAMP>&#8217; specially, producing the corresponding special numeric values. The leading sign acts a signal to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(and the user) that the value is really numeric. Hexadecimal floating point is not supported (unless you also use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>--non-decimal-data</SAMP>, which is<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>not</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>recommended). For example:
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>$ <KBD style="FONT-STYLE: oblique">echo nanny | gawk '{ print $1 + 0 }'</KBD>
-| 0
$ <KBD style="FONT-STYLE: oblique">echo +nan | gawk '{ print $1 + 0 }'</KBD>
-| nan
$ <KBD style="FONT-STYLE: oblique">echo 0xDeadBeef | gawk '{ print $1 + 0 }'</KBD>
-| 0
</PRE></DIV>
<P><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>does ignore case in the four special values. Thus &#8216;<SAMP>+nan</SAMP>&#8217; and &#8216;<SAMP>+NaN</SAMP>&#8217; are the same.</P></LI></UL>