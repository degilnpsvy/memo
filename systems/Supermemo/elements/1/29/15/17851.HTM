<H4 class=subsection>9.2.1 Function Definition Syntax</H4><A name=index-functions_002c-defining></A>
<P>Definitions of functions can appear anywhere between the rules of an <CODE>awk</CODE> program. Thus, the general form of an <CODE>awk</CODE> program is extended to include sequences of rules <EM>and</EM> user-defined function definitions. There is no need to put the definition of a function before all uses of the function. This is because <CODE>awk</CODE> reads the entire program before starting to execute any of it. </P>
<P>The definition of a function named <VAR>name</VAR> looks like this: </P>
<DIV class=example><PRE class=example>function <VAR>name</VAR>(<SPAN class=roman><FONT face=Batang>[</FONT></SPAN><VAR>parameter-list</VAR><SPAN class=roman><FONT face=Batang>]</FONT></SPAN>)
{
     <VAR>body-of-function</VAR>
}
</PRE></DIV><A name=index-names_002c-functions></A><A name=index-functions_002c-names-of-1></A><A name=index-namespace-issues_002c-functions></A>
<P>Here, <VAR>name</VAR> is the name of the function to define. A valid function name is like a valid variable name: a sequence of letters, digits, and underscores that doesn&#8217;t start with a digit. Within a single <CODE>awk</CODE> program, any particular name can only be used as a variable, array, or function. </P>
<P><VAR>parameter-list</VAR> is an optional list of the function&#8217;s arguments and local variable names, separated by commas. When the function is called, the argument names are used to hold the argument values given in the call. The local variables are initialized to the empty string. A function cannot have two parameters with the same name, nor may it have a parameter with the same name as the function itself. </P>
<P>In addition, according to the POSIX standard, function parameters cannot have the same name as one of the special built-in variables (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Built_002din-Variables">Built-in Variables</A>. Not all versions of <CODE>awk</CODE> enforce this restriction.) </P>
<P>The <VAR>body-of-function</VAR> consists of <CODE>awk</CODE> statements. It is the most important part of the definition, because it says what the function should actually <EM>do</EM>. The argument names exist to give the body a way to talk about the arguments; local variables exist to give the body places to keep temporary values. </P>
<P>Argument names are not distinguished syntactically from local variable names. Instead, the number of arguments supplied when the function is called determines how many argument variables there are. Thus, if three argument values are given, the first three names in <VAR>parameter-list</VAR> are arguments and the rest are local variables. </P>
<P>It follows that if the number of arguments is not the same in all calls to the function, some of the names in <VAR>parameter-list</VAR> may be arguments on some occasions and local variables on others. Another way to think of this is that omitted arguments default to the null string. </P><A name=index-programming-conventions_002c-functions_002c-writing></A>
<P>Usually when you write a function, you know how many names you intend to use for arguments and how many you intend to use as local variables. It is conventional to place some extra space between the arguments and the local variables, in order to document how your function is supposed to be used. </P><A name=index-variables_002c-shadowing></A><A name=index-shadowing-of-variable-values></A>
<P>During execution of the function body, the arguments and local variable values hide, or <EM>shadow</EM>, any variables of the same names used in the rest of the program. The shadowed variables are not accessible in the function definition, because there is no way to name them while their names have been taken away for the local variables. All other variables used in the <CODE>awk</CODE> program can be referenced or set normally in the function&#8217;s body. </P>
<P>The arguments and local variables last only as long as the function body is executing. Once the body finishes, you can once again access the variables that were shadowed while the function was running. </P><A name=index-recursive-functions></A><A name=index-functions_002c-recursive></A>
<P>The function body can contain expressions that call functions. They can even call this function, either directly or by way of another function. When this happens, we say the function is <EM>recursive</EM>. The act of a function calling itself is called <EM>recursion</EM>. </P>
<P>All the built-in functions return a value to their caller. User-defined functions can do so also, using the <CODE>return</CODE> statement, which is described in detail in <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Return-Statement">Return Statement</A>. Many of the subsequent examples in this section use the <CODE>return</CODE> statement. </P><A name=index-common-extensions_002c-func-keyword></A><A name=index-extensions_002c-common_002c-func-keyword></A><A name=index-POSIX-awk_002c-function-keyword-in></A>
<P>In many <CODE>awk</CODE> implementations, including <CODE>gawk</CODE>, the keyword <CODE>function</CODE> may be abbreviated <CODE>func</CODE>. (c.e.) However, POSIX only specifies the use of the keyword <CODE>function</CODE>. This actually has some practical implications. If <CODE>gawk</CODE> is in POSIX-compatibility mode (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Options">Options</A>), then the following statement does <EM>not</EM> define a function: </P>
<DIV class=example><PRE class=example>func foo() { a = sqrt($1) ; print a }
</PRE></DIV>
<P>Instead it defines a rule that, for each record, concatenates the value of the variable &#8216;<SAMP>func</SAMP>&#8217; with the return value of the function &#8216;<SAMP>foo</SAMP>&#8217;. If the resulting string is non-null, the action is executed. This is probably not what is desired. (<CODE>awk</CODE> accepts this input as syntactically valid, because functions may be used before they are defined in <CODE>awk</CODE> programs.<A href="http://www.gnu.org/software/gawk/manual/gawk.html#FOOT59" name=DOCF59><SUP>59</SUP></A>) </P><A name=index-portability_002c-functions_002c-defining></A>
<P>To ensure that your <CODE>awk</CODE> programs are portable, always use the keyword <CODE>function</CODE> when defining a function.