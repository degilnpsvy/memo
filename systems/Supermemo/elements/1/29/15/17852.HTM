<H4 class=subsection>9.2.2 Function Definition Examples</H4><A name=index-function-definition-example></A>
<P>Here is an example of a user-defined function, called <CODE>myprint()</CODE>, that takes a number and prints it in a specific format: </P>
<DIV class=example><PRE class=example>function myprint(num)
{
     printf "%6.3g\n", num
}
</PRE></DIV>
<P>To illustrate, here is an <CODE>awk</CODE> rule that uses our <CODE>myprint</CODE> function: </P>
<DIV class=example><PRE class=example>$3 &gt; 0     { myprint($3) }
</PRE></DIV>
<P>This program prints, in our special format, all the third fields that contain a positive number in our input. Therefore, when given the following input: </P>
<DIV class=example><PRE class=example> 1.2   3.4    5.6   7.8
 9.10 11.12 -13.14 15.16
17.18 19.20  21.22 23.24
</PRE></DIV>
<P>this program, using our function to format the results, prints: </P>
<DIV class=example><PRE class=example>   5.6
  21.2
</PRE></DIV>
<P>This function deletes all the elements in an array: </P>
<DIV class=example><PRE class=example>function delarray(a,    i)
{
    for (i in a)
       delete a[i]
}
</PRE></DIV>
<P>When working with arrays, it is often necessary to delete all the elements in an array and start over with a new list of elements (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Delete">Delete</A>). Instead of having to repeat this loop everywhere that you need to clear out an array, your program can just call <CODE>delarray</CODE>. (This guarantees portability. The use of &#8216;<SAMP>delete <VAR>array</VAR></SAMP>&#8217; to delete the contents of an entire array is a recent<A href="http://www.gnu.org/software/gawk/manual/gawk.html#FOOT60" name=DOCF60><SUP>60</SUP></A> addition to the POSIX standard.) </P>
<P>The following is an example of a recursive function. It takes a string as an input parameter and returns the string in backwards order. Recursive functions must always have a test that stops the recursion. In this case, the recursion terminates when the starting position is zero, i.e., when there are no more characters left in the string. </P><A name=index-rev_0028_0029-user_002ddefined-function></A>
<DIV class=example><PRE class=example>function rev(str, start)
{
    if (start == 0)
        return ""

    return (substr(str, start, 1) rev(str, start - 1))
}
</PRE></DIV>
<P>If this function is in a file named <SAMP>rev.awk</SAMP>, it can be tested this way: </P>
<DIV class=example><PRE class=example>$ <KBD><EM>echo "Don't Panic!" |</EM></KBD>
&gt; <KBD><EM>gawk --source '{ print rev($0, length($0)) }' -f rev.awk</EM></KBD>
-| !cinaP t'noD
</PRE></DIV>
<P>The C <CODE>ctime()</CODE> function takes a timestamp and returns it in a string, formatted in a well-known fashion. The following example uses the built-in <CODE>strftime()</CODE> function (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Time-Functions">Time Functions</A>) to create an <CODE>awk</CODE> version of <CODE>ctime()</CODE>: </P><A name=index-ctime_0028_0029-user_002ddefined-function></A>
<DIV class=example><PRE class=example># ctime.awk
#
# awk version of C ctime(3) function

function ctime(ts,    format)
{
    format = "%a %b %e %H:%M:%S %Z %Y"
    if (ts == 0)
        ts = systime()       # use current time as default
    return strftime(format, ts)
}
</PRE></DIV>