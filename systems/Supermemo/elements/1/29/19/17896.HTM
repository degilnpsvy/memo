<H4 class=subsection>11.3.5 Generating Word-Usage Counts</H4><A name=index-words_002c-usage-counts_002c-generating></A>
<P>When working with large amounts of text, it can be interesting to know how often different words appear. For example, an author may overuse certain words, in which case she might wish to find synonyms to substitute for words that appear too often. This subsection develops a program for counting words and presenting the frequency information in a useful format. </P>
<P>At first glance, a program like this would seem to do the job: </P>
<DIV class=example><PRE class=example># Print list of word frequencies

{
    for (i = 1; i &lt;= NF; i++)
        freq[$i]++
}

END {
    for (word in freq)
        printf "%s\t%d\n", word, freq[word]
}
</PRE></DIV>
<P>The program relies on <CODE>awk</CODE>&#8217;s default field splitting mechanism to break each line up into &#8220;words,&#8221; and uses an associative array named <CODE>freq</CODE>, indexed by each word, to count the number of times the word occurs. In the <CODE>END</CODE> rule, it prints the counts. </P>
<P>This program has several problems that prevent it from being useful on real text files: </P>
<UL>
<LI>The <CODE>awk</CODE> language considers upper- and lowercase characters to be distinct. Therefore, &#8220;bartender&#8221; and &#8220;Bartender&#8221; are not treated as the same word. This is undesirable, since in normal text, words are capitalized if they begin sentences, and a frequency analyzer should not be sensitive to capitalization. </LI>
<LI>Words are detected using the <CODE>awk</CODE> convention that fields are separated just by whitespace. Other characters in the input (except newlines) don&#8217;t have any special meaning to <CODE>awk</CODE>. This means that punctuation characters count as part of words. </LI>
<LI>The output does not come out in any useful order. You&#8217;re more likely to be interested in which words occur most frequently or in having an alphabetized table of how frequently each word occurs. </LI></UL><A name=index-sort-utility></A>
<P>The first problem can be solved by using <CODE>tolower()</CODE> to remove case distinctions. The second problem can be solved by using <CODE>gsub()</CODE> to remove punctuation characters. Finally, we solve the third problem by using the system <CODE>sort</CODE> utility to process the output of the <CODE>awk</CODE> script. Here is the new version of the program: </P><A name=index-wordfreq_002eawk-program></A>
<DIV class=example><PRE class=example># wordfreq.awk --- print list of word frequencies

{
    $0 = tolower($0)    # remove case distinctions
    # remove punctuation
    gsub(/[^[:alnum:]_[:blank:]]/, "", $0)
    for (i = 1; i &lt;= NF; i++)
        freq[$i]++
}

END {
    for (word in freq)
        printf "%s\t%d\n", word, freq[word]
}
</PRE></DIV>
<P>Assuming we have saved this program in a file named <SAMP>wordfreq.awk</SAMP>, and that the data is in <SAMP>file1</SAMP>, the following pipeline: </P>
<DIV class=example><PRE class=example>awk -f wordfreq.awk file1 | sort -k 2nr
</PRE></DIV>
<P>produces a table of the words appearing in <SAMP>file1</SAMP> in order of decreasing frequency. </P>
<P>The <CODE>awk</CODE> program suitably massages the data and produces a word frequency table, which is not ordered. The <CODE>awk</CODE> script&#8217;s output is then sorted by the <CODE>sort</CODE> utility and printed on the screen. </P>
<P>The options given to <CODE>sort</CODE> specify a sort that uses the second field of each input line (skipping one field), that the sort keys should be treated as numeric quantities (otherwise &#8216;<SAMP>15</SAMP>&#8217; would come before &#8216;<SAMP>5</SAMP>&#8217;), and that the sorting should be done in descending (reverse) order. </P>
<P>The <CODE>sort</CODE> could even be done from within the program, by changing the <CODE>END</CODE> action to: </P>
<DIV class=example><PRE class=example>END {
    sort = "sort -k 2nr"
    for (word in freq)
        printf "%s\t%d\n", word, freq[word] | sort
    close(sort)
}
</PRE></DIV>
<P>This way of sorting must be used on systems that do not have true pipes at the command-line (or batch-file) level. See the general operating system documentation for more information on how to use the <CODE>sort</CODE> program.