<H4 class=subsection>11.2.6 Printing Nonduplicated Lines of Text</H4><A name=index-printing_002c-unduplicated-lines-of-text></A><A name=index-text_002c-printing_002c-unduplicated-lines-of></A><A name=index-uniq-utility></A>
<P>The <CODE>uniq</CODE> utility reads sorted lines of data on its standard input, and by default removes duplicate lines. In other words, it only prints unique lines&#8212;hence the name. <CODE>uniq</CODE> has a number of options. The usage is as follows: </P>
<DIV class=example><PRE class=example>uniq <SPAN class=roman><FONT face=Batang>[</FONT></SPAN>-udc <SPAN class=roman><FONT face=Batang>[</FONT></SPAN>-<VAR>n</VAR><SPAN class=roman><FONT face=Batang>]]</FONT></SPAN> <SPAN class=roman><FONT face=Batang>[</FONT></SPAN>+<VAR>n</VAR><SPAN class=roman><FONT face=Batang>]</FONT></SPAN> <SPAN class=roman><FONT face=Batang>[</FONT></SPAN> <VAR>input file</VAR> <SPAN class=roman><FONT face=Batang>[</FONT></SPAN> <VAR>output file</VAR> <SPAN class=roman><FONT face=Batang>]]</FONT></SPAN>
</PRE></DIV>
<P>The options for <CODE>uniq</CODE> are: </P>
<DL compact>
<DT><CODE>-d</CODE></DT>
<DD>
<P>Print only repeated lines. </P></DD>
<DT><CODE>-u</CODE></DT>
<DD>
<P>Print only nonrepeated lines. </P></DD>
<DT><CODE>-c</CODE></DT>
<DD>
<P>Count lines. This option overrides <SAMP>-d</SAMP> and <SAMP>-u</SAMP>. Both repeated and nonrepeated lines are counted. </P></DD>
<DT><CODE>-<VAR>n</VAR></CODE></DT>
<DD>
<P>Skip <VAR>n</VAR> fields before comparing lines. The definition of fields is similar to <CODE>awk</CODE>&#8217;s default: nonwhitespace characters separated by runs of spaces and/or TABs. </P></DD>
<DT><CODE>+<VAR>n</VAR></CODE></DT>
<DD>
<P>Skip <VAR>n</VAR> characters before comparing lines. Any fields specified with &#8216;<SAMP>-<VAR>n</VAR></SAMP>&#8217; are skipped first. </P></DD>
<DT><CODE><VAR>input file</VAR></CODE></DT>
<DD>
<P>Data is read from the input file named on the command line, instead of from the standard input. </P></DD>
<DT><CODE><VAR>output file</VAR></CODE></DT>
<DD>
<P>The generated output is sent to the named output file, instead of to the standard output. </P></DD></DL>
<P>Normally <CODE>uniq</CODE> behaves as if both the <SAMP>-d</SAMP> and <SAMP>-u</SAMP> options are provided. </P>
<P><CODE>uniq</CODE> uses the <CODE>getopt()</CODE> library function (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Getopt-Function">Getopt Function</A>) and the <CODE>join()</CODE> library function (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Join-Function">Join Function</A>). </P>
<P>The program begins with a <CODE>usage()</CODE> function and then a brief outline of the options and their meanings in comments. The <CODE>BEGIN</CODE> rule deals with the command-line arguments and options. It uses a trick to get <CODE>getopt()</CODE> to handle options of the form &#8216;<SAMP>-25</SAMP>&#8217;, treating such an option as the option letter &#8216;<SAMP>2</SAMP>&#8217; with an argument of &#8216;<SAMP>5</SAMP>&#8217;. If indeed two or more digits are supplied (<CODE>Optarg</CODE> looks like a number), <CODE>Optarg</CODE> is concatenated with the option digit and then the result is added to zero to make it into a number. If there is only one digit in the option, then <CODE>Optarg</CODE> is not needed. In this case, <CODE>Optind</CODE> must be decremented so that <CODE>getopt()</CODE> processes it next time. This code is admittedly a bit tricky. </P>
<P>If no options are supplied, then the default is taken, to print both repeated and nonrepeated lines. The output file, if provided, is assigned to <CODE>outputfile</CODE>. Early on, <CODE>outputfile</CODE> is initialized to the standard output, <SAMP>/dev/stdout</SAMP>: </P><A name=index-uniq_002eawk-program></A>
<DIV class=example><PRE class=example># uniq.awk --- do uniq in awk
#
# Requires getopt() and join() library functions
</PRE><PRE class=example>function usage(    e)
{
    e = "Usage: uniq [-udc [-n]] [+n] [ in [ out ]]"
    print e &gt; "/dev/stderr"
    exit 1
}

# -c    count lines. overrides -d and -u
# -d    only repeated lines
# -u    only nonrepeated lines
# -n    skip n fields
# +n    skip n characters, skip fields first

BEGIN   \
{
    count = 1
    outputfile = "/dev/stdout"
    opts = "udc0:1:2:3:4:5:6:7:8:9:"
    while ((c = getopt(ARGC, ARGV, opts)) != -1) {
        if (c == "u")
            non_repeated_only++
        else if (c == "d")
            repeated_only++
        else if (c == "c")
            do_count++
        else if (index("0123456789", c) != 0) {
            # getopt requires args to options
            # this messes us up for things like -5
            if (Optarg ~ /^[[:digit:]]+$/)
                fcount = (c Optarg) + 0
            else {
                fcount = c + 0
                Optind--
            }
        } else
            usage()
    }

    if (ARGV[Optind] ~ /^\+[[:digit:]]+$/) {
        charcount = substr(ARGV[Optind], 2) + 0
        Optind++
    }

    for (i = 1; i &lt; Optind; i++)
        ARGV[i] = ""

    if (repeated_only == 0 &amp;&amp; non_repeated_only == 0)
        repeated_only = non_repeated_only = 1

    if (ARGC - Optind == 2) {
        outputfile = ARGV[ARGC - 1]
        ARGV[ARGC - 1] = ""
    }
}
</PRE></DIV>
<P>The following function, <CODE>are_equal()</CODE>, compares the current line, <CODE>$0</CODE>, to the previous line, <CODE>last</CODE>. It handles skipping fields and characters. If no field count and no character count are specified, <CODE>are_equal()</CODE> simply returns one or zero depending upon the result of a simple string comparison of <CODE>last</CODE> and <CODE>$0</CODE>. Otherwise, things get more complicated. If fields have to be skipped, each line is broken into an array using <CODE>split()</CODE> (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#String-Functions">String Functions</A>); the desired fields are then joined back into a line using <CODE>join()</CODE>. The joined lines are stored in <CODE>clast</CODE> and <CODE>cline</CODE>. If no fields are skipped, <CODE>clast</CODE> and <CODE>cline</CODE> are set to <CODE>last</CODE> and <CODE>$0</CODE>, respectively. Finally, if characters are skipped, <CODE>substr()</CODE> is used to strip off the leading <CODE>charcount</CODE> characters in <CODE>clast</CODE> and <CODE>cline</CODE>. The two strings are then compared and <CODE>are_equal()</CODE> returns the result: </P>
<DIV class=example><PRE class=example>function are_equal(    n, m, clast, cline, alast, aline)
{
    if (fcount == 0 &amp;&amp; charcount == 0)
        return (last == $0)

    if (fcount &gt; 0) {
        n = split(last, alast)
        m = split($0, aline)
        clast = join(alast, fcount+1, n)
        cline = join(aline, fcount+1, m)
    } else {
        clast = last
        cline = $0
    }
    if (charcount) {
        clast = substr(clast, charcount + 1)
        cline = substr(cline, charcount + 1)
    }

    return (clast == cline)
}
</PRE></DIV>
<P>The following two rules are the body of the program. The first one is executed only for the very first line of data. It sets <CODE>last</CODE> equal to <CODE>$0</CODE>, so that subsequent lines of text have something to be compared to. </P>
<P>The second rule does the work. The variable <CODE>equal</CODE> is one or zero, depending upon the results of <CODE>are_equal()</CODE>&#8217;s comparison. If <CODE>uniq</CODE> is counting repeated lines, and the lines are equal, then it increments the <CODE>count</CODE> variable. Otherwise, it prints the line and resets <CODE>count</CODE>, since the two lines are not equal. </P>
<P>If <CODE>uniq</CODE> is not counting, and if the lines are equal, <CODE>count</CODE> is incremented. Nothing is printed, since the point is to remove duplicates. Otherwise, if <CODE>uniq</CODE> is counting repeated lines and more than one line is seen, or if <CODE>uniq</CODE> is counting nonrepeated lines and only one line is seen, then the line is printed, and <CODE>count</CODE> is reset. </P>
<P>Finally, similar logic is used in the <CODE>END</CODE> rule to print the final line of input data: </P>
<DIV class=example><PRE class=example>NR == 1 {
    last = $0
    next
}

{
    equal = are_equal()

    if (do_count) {    # overrides -d and -u
        if (equal)
            count++
        else {
            printf("%4d %s\n", count, last) &gt; outputfile
            last = $0
            count = 1    # reset
        }
        next
    }

    if (equal)
        count++
    else {
        if ((repeated_only &amp;&amp; count &gt; 1) ||
            (non_repeated_only &amp;&amp; count == 1))
                print last &gt; outputfile
        last = $0
        count = 1
    }
}

END {
    if (do_count)
        printf("%4d %s\n", count, last) &gt; outputfile
    else if ((repeated_only &amp;&amp; count &gt; 1) ||
            (non_repeated_only &amp;&amp; count == 1))
        print last &gt; outputfile
    close(outputfile)
}
</PRE></DIV>