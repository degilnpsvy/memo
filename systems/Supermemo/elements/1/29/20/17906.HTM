<H4 class=subsection>12.2.1 Controlling Array Traversal</H4>
<P>By default, the order in which a &#8216;<SAMP>for (i in array)</SAMP>&#8217; loop scans an array is not defined; it is generally based upon the internal implementation of arrays inside <CODE>awk</CODE>. </P>
<P>Often, though, it is desirable to be able to loop over the elements in a particular order that you, the programmer, choose. <CODE>gawk</CODE> lets you do this. </P>
<P><A href="http://www.gnu.org/software/gawk/manual/gawk.html#Controlling-Scanning">Controlling Scanning</A>, describes how you can assign special, pre-defined values to <CODE>PROCINFO["sorted_in"]</CODE> in order to control the order in which <CODE>gawk</CODE> will traverse an array during a <CODE>for</CODE> loop. </P>
<P>In addition, the value of <CODE>PROCINFO["sorted_in"]</CODE> can be a function name. This lets you traverse an array based on any custom criterion. The array elements are ordered according to the return value of this function. The comparison function should be defined with at least four arguments: </P>
<DIV class=example><PRE class=example>function comp_func(i1, v1, i2, v2)
{
    <VAR>compare elements 1 and 2 in some fashion</VAR>
    <VAR>return &lt; 0; 0; or &gt; 0</VAR>
}
</PRE></DIV>
<P>Here, <VAR>i1</VAR> and <VAR>i2</VAR> are the indices, and <VAR>v1</VAR> and <VAR>v2</VAR> are the corresponding values of the two elements being compared. Either <VAR>v1</VAR> or <VAR>v2</VAR>, or both, can be arrays if the array being traversed contains subarrays as values. (See <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Arrays-of-Arrays">Arrays of Arrays</A>, for more information about subarrays.) The three possible return values are interpreted as follows: </P>
<DL compact>
<DT><CODE>comp_func(i1, v1, i2, v2) &lt; 0</CODE></DT>
<DD>
<P>Index <VAR>i1</VAR> comes before index <VAR>i2</VAR> during loop traversal. </P></DD>
<DT><CODE>comp_func(i1, v1, i2, v2) == 0</CODE></DT>
<DD>
<P>Indices <VAR>i1</VAR> and <VAR>i2</VAR> come together but the relative order with respect to each other is undefined. </P></DD>
<DT><CODE>comp_func(i1, v1, i2, v2) &gt; 0</CODE></DT>
<DD>
<P>Index <VAR>i1</VAR> comes after index <VAR>i2</VAR> during loop traversal. </P></DD></DL>
<P>Our first comparison function can be used to scan an array in numerical order of the indices: </P>
<DIV class=example><PRE class=example>function cmp_num_idx(i1, v1, i2, v2)
{
     # numerical index comparison, ascending order
     return (i1 - i2)
}
</PRE></DIV>
<P>Our second function traverses an array based on the string order of the element values rather than by indices: </P>
<DIV class=example><PRE class=example>function cmp_str_val(i1, v1, i2, v2)
{
    # string value comparison, ascending order
    v1 = v1 ""
    v2 = v2 ""
    if (v1 &lt; v2)
        return -1
    return (v1 != v2)
}
</PRE></DIV>
<P>The third comparison function makes all numbers, and numeric strings without any leading or trailing spaces, come out first during loop traversal: </P>
<DIV class=example><PRE class=example>function cmp_num_str_val(i1, v1, i2, v2,   n1, n2)
{
     # numbers before string value comparison, ascending order
     n1 = v1 + 0
     n2 = v2 + 0
     if (n1 == v1) 
         return (n2 == v2) ? (n1 - n2) : -1
     else if (n2 == v2)
         return 1 
     return (v1 &lt; v2) ? -1 : (v1 != v2)
}
</PRE></DIV>
<P>Here is a main program to demonstrate how <CODE>gawk</CODE> behaves using each of the previous functions: </P>
<DIV class=example><PRE class=example>BEGIN {
    data["one"] = 10
    data["two"] = 20
    data[10] = "one"
    data[100] = 100
    data[20] = "two"
    
    f[1] = "cmp_num_idx"
    f[2] = "cmp_str_val"
    f[3] = "cmp_num_str_val"
    for (i = 1; i &lt;= 3; i++) {
        printf("Sort function: %s\n", f[i])
        PROCINFO["sorted_in"] = f[i]
        for (j in data)
            printf("\tdata[%s] = %s\n", j, data[j])
        print ""
    }
}
</PRE></DIV>
<P>Here are the results when the program is run: </P>
<DIV class=example><PRE class=example>$ <KBD><EM>gawk -f compdemo.awk</EM></KBD>
-| Sort function: cmp_num_idx      <I>Sort by numeric index</I>
-|     data[two] = 20
-|     data[one] = 10              <I>Both strings are numerically zero</I>
-|     data[10] = one
-|     data[20] = two
-|     data[100] = 100
-| 
-| Sort function: cmp_str_val      <I>Sort by element values as strings</I>
-|     data[one] = 10
-|     data[100] = 100             <I>String 100 is less than string 20</I>
-|     data[two] = 20
-|     data[10] = one
-|     data[20] = two
-| 
-| Sort function: cmp_num_str_val  <I>Sort all numeric values before all strings</I>
-|     data[one] = 10
-|     data[two] = 20
-|     data[100] = 100
-|     data[10] = one
-|     data[20] = two
</PRE></DIV>
<P>Consider sorting the entries of a GNU/Linux system password file according to login name. The following program sorts records by a specific field position and can be used for this purpose: </P>
<DIV class=example><PRE class=example># sort.awk --- simple program to sort by field position
# field position is specified by the global variable POS

function cmp_field(i1, v1, i2, v2)
{
    # comparison by value, as string, and ascending order
    return v1[POS] &lt; v2[POS] ? -1 : (v1[POS] != v2[POS])
}

{
    for (i = 1; i &lt;= NF; i++)
        a[NR][i] = $i
}

END {
    PROCINFO["sorted_in"] = "cmp_field"
    if (POS &lt; 1 || POS &gt; NF)
        POS = 1
    for (i in a) {
        for (j = 1; j &lt;= NF; j++)
            printf("%s%c", a[i][j], j &lt; NF ? ":" : "")
        print ""
    }
}
</PRE></DIV>
<P>The first field in each entry of the password file is the user&#8217;s login name, and the fields are separated by colons. Each record defines a subarray, with each field as an element in the subarray. Running the program produces the following output: </P>
<DIV class=example><PRE class=example>$ <KBD><EM>gawk -v POS=1 -F: -f sort.awk /etc/passwd</EM></KBD>
-| adm:x:3:4:adm:/var/adm:/sbin/nologin
-| apache:x:48:48:Apache:/var/www:/sbin/nologin
-| avahi:x:70:70:Avahi daemon:/:/sbin/nologin
&#8230;
</PRE></DIV>
<P>The comparison should normally always return the same value when given a specific pair of array elements as its arguments. If inconsistent results are returned then the order is undefined. This behavior can be exploited to introduce random order into otherwise seemingly ordered data: </P>
<DIV class=example><PRE class=example>function cmp_randomize(i1, v1, i2, v2)
{
    # random order (caution: this may never terminate!)
    return (2 - 4 * rand())
}
</PRE></DIV>
<P>As mentioned above, the order of the indices is arbitrary if two elements compare equal. This is usually not a problem, but letting the tied elements come out in arbitrary order can be an issue, especially when comparing item values. The partial ordering of the equal elements may change during the next loop traversal, if other elements are added or removed from the array. One way to resolve ties when comparing elements with otherwise equal values is to include the indices in the comparison rules. Note that doing this may make the loop traversal less efficient, so consider it only if necessary. The following comparison functions force a deterministic order, and are based on the fact that the (string) indices of two elements are never equal: </P>
<DIV class=example><PRE class=example>function cmp_numeric(i1, v1, i2, v2)
{
    # numerical value (and index) comparison, descending order
    return (v1 != v2) ? (v2 - v1) : (i2 - i1)
}

function cmp_string(i1, v1, i2, v2)
{
    # string value (and index) comparison, descending order
    v1 = v1 i1
    v2 = v2 i2
    return (v1 &gt; v2) ? -1 : (v1 != v2)
}
</PRE></DIV>
<P>A custom comparison function can often simplify ordered loop traversal, and the sky is really the limit when it comes to designing such a function. </P>
<P>When string comparisons are made during a sort, either for element values where one or both aren&#8217;t numbers, or for element indices handled as strings, the value of <CODE>IGNORECASE</CODE> (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Built_002din-Variables">Built-in Variables</A>) controls whether the comparisons treat corresponding uppercase and lowercase letters as equivalent or distinct. </P>
<P>Another point to keep in mind is that in the case of subarrays the element values can themselves be arrays; a production comparison function should use the <CODE>isarray()</CODE> function (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Type-Functions">Type Functions</A>), to check for this, and choose a defined sorting order for subarrays. </P>
<P>All sorting based on <CODE>PROCINFO["sorted_in"]</CODE> is disabled in POSIX mode, since the <CODE>PROCINFO</CODE> array is not special in that case. </P>
<P>As a side note, sorting the array indices before traversing the array has been reported to add 15% to 20% overhead to the execution time of <CODE>awk</CODE> programs. For this reason, sorted array traversal is not the default.