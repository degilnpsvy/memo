<H3 class=section>12.3 Two-Way Communications with Another Process</H3><A name=index-Brennan_002c-Michael-3></A><A name=index-programmers_002c-attractiveness-of></A>
<DIV class=smallexample><PRE class=smallexample>From: brennan@whidbey.com (Mike Brennan)
Newsgroups: comp.lang.awk
Subject: Re: Learn the SECRET to Attract Women Easily
Date: 4 Aug 1997 17:34:46 GMT
Message-ID: &lt;5s53rm$eca@news.whidbey.com&gt;

On 3 Aug 1997 13:17:43 GMT, Want More Dates???
&lt;tracy78@kilgrona.com&gt; wrote:
&gt;Learn the SECRET to Attract Women Easily
&gt;
&gt;The SCENT(tm)  Pheromone Sex Attractant For Men to Attract Women

The scent of awk programmers is a lot more attractive to women than
the scent of perl programmers.
--
Mike Brennan
</PRE></DIV><A name=index-advanced-features_002c-processes_002c-communicating-with></A><A name=index-processes_002c-two_002dway-communications-with></A>
<P>It is often useful to be able to send data to a separate program for processing and then read the result. This can always be done with temporary files: </P>
<DIV class=example><PRE class=example># Write the data for processing
tempfile = ("mydata." PROCINFO["pid"])
while (<VAR>not done with data</VAR>)
    print <VAR>data</VAR> | ("subprogram &gt; " tempfile)
close("subprogram &gt; " tempfile)

# Read the results, remove tempfile when done
while ((getline newdata &lt; tempfile) &gt; 0)
    <VAR>process</VAR> newdata <VAR>appropriately</VAR>
close(tempfile)
system("rm " tempfile)
</PRE></DIV>
<P>This works, but not elegantly. Among other things, it requires that the program be run in a directory that cannot be shared among users; for example, <SAMP>/tmp</SAMP> will not do, as another user might happen to be using a temporary file with the same name. </P><A name=index-coprocesses-1></A><A name=index-input_002foutput_002c-two_002dway></A><A name=index-_007c-_0028vertical-bar_0029_002c-_007c_0026-operator-_0028I_002fO_0029-3></A><A name=index-vertical-bar-_0028_007c_0029_002c-_007c_0026-operator-_0028I_002fO_0029-2></A><A name=index-csh-utility_002c-_007c_0026-operator_002c-comparison-with></A>
<P>However, with <CODE>gawk</CODE>, it is possible to open a <EM>two-way</EM> pipe to another process. The second process is termed a <EM>coprocess</EM>, since it runs in parallel with <CODE>gawk</CODE>. The two-way connection is created using the &#8216;<SAMP>|&amp;</SAMP>&#8217; operator (borrowed from the Korn shell, <CODE>ksh</CODE>):<A href="http://www.gnu.org/software/gawk/manual/gawk.html#FOOT81" name=DOCF81><SUP>81</SUP></A> </P>
<DIV class=example><PRE class=example>do {
    print <VAR>data</VAR> |&amp; "subprogram"
    "subprogram" |&amp; getline results
} while (<VAR>data left to process</VAR>)
close("subprogram")
</PRE></DIV>
<P>The first time an I/O operation is executed using the &#8216;<SAMP>|&amp;</SAMP>&#8217; operator, <CODE>gawk</CODE> creates a two-way pipeline to a child process that runs the other program. Output created with <CODE>print</CODE> or <CODE>printf</CODE> is written to the program&#8217;s standard input, and output from the program&#8217;s standard output can be read by the <CODE>gawk</CODE> program using <CODE>getline</CODE>. As is the case with processes started by &#8216;<SAMP>|</SAMP>&#8217;, the subprogram can be any program, or pipeline of programs, that can be started by the shell. </P>
<P>There are some cautionary items to be aware of: </P>
<UL>
<LI>As the code inside <CODE>gawk</CODE> currently stands, the coprocess&#8217;s standard error goes to the same place that the parent <CODE>gawk</CODE>&#8217;s standard error goes. It is not possible to read the child&#8217;s standard error separately. </LI>
<LI><A name=index-deadlocks></A><A name=index-buffering_002c-input_002foutput-1></A><A name=index-getline-command_002c-deadlock-and></A>I/O buffering may be a problem. <CODE>gawk</CODE> automatically flushes all output down the pipe to the coprocess. However, if the coprocess does not flush its output, <CODE>gawk</CODE> may hang when doing a <CODE>getline</CODE> in order to read the coprocess&#8217;s results. This could lead to a situation known as <EM>deadlock</EM>, where each process is waiting for the other one to do something. </LI></UL><A name=index-close_0028_0029-function_002c-two_002dway-pipes-and></A>
<P>It is possible to close just one end of the two-way pipe to a coprocess, by supplying a second argument to the <CODE>close()</CODE> function of either <CODE>"to"</CODE> or <CODE>"from"</CODE> (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Close-Files-And-Pipes">Close Files And Pipes</A>). These strings tell <CODE>gawk</CODE> to close the end of the pipe that sends data to the coprocess or the end that reads from it, respectively. </P><A name=index-sort-utility_002c-coprocesses-and></A>
<P>This is particularly necessary in order to use the system <CODE>sort</CODE> utility as part of a coprocess; <CODE>sort</CODE> must read <EM>all</EM> of its input data before it can produce any output. The <CODE>sort</CODE> program does not receive an end-of-file indication until <CODE>gawk</CODE> closes the write end of the pipe. </P>
<P>When you have finished writing data to the <CODE>sort</CODE> utility, you can close the <CODE>"to"</CODE> end of the pipe, and then start reading sorted data via <CODE>getline</CODE>. For example: </P>
<DIV class=example><PRE class=example>BEGIN {
    command = "LC_ALL=C sort"
    n = split("abcdefghijklmnopqrstuvwxyz", a, "")

    for (i = n; i &gt; 0; i--)
        print a[i] |&amp; command
    close(command, "to")

    while ((command |&amp; getline line) &gt; 0)
        print "got", line
    close(command)
}
</PRE></DIV>
<P>This program writes the letters of the alphabet in reverse order, one per line, down the two-way pipe to <CODE>sort</CODE>. It then closes the write end of the pipe, so that <CODE>sort</CODE> receives an end-of-file indication. This causes <CODE>sort</CODE> to sort the data and write the sorted data back to the <CODE>gawk</CODE> program. Once all of the data has been read, <CODE>gawk</CODE> terminates the coprocess and exits. </P>
<P>As a side note, the assignment &#8216;<SAMP>LC_ALL=C</SAMP>&#8217; in the <CODE>sort</CODE> command ensures traditional Unix (ASCII) sorting from <CODE>sort</CODE>. </P><A name=index-gawk_002c-PROCINFO-array-in-3></A><A name=index-PROCINFO-array_002c-and-communications-via-ptys></A>
<P>You may also use pseudo-ttys (ptys) for two-way communication instead of pipes, if your system supports them. This is done on a per-command basis, by setting a special element in the <CODE>PROCINFO</CODE> array (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Auto_002dset">Auto-set</A>), like so: </P>
<DIV class=example><PRE class=example>command = "sort -nr"           # command, save in convenience variable
PROCINFO[command, "pty"] = 1   # update PROCINFO
print &#8230; |&amp; command       # start two-way pipe
&#8230;
</PRE></DIV>
<P>Using ptys avoids the buffer deadlock issues described earlier, at some loss in performance. If your system does not have ptys, or if all the system&#8217;s ptys are in use, <CODE>gawk</CODE> automatically falls back to using regular pipes.