<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>15.4.5 Exact Arithmetic with Floating-point Numbers</H4>
<BLOCKQUOTE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<P><B>CAUTION:</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>Never depend on the exactness of floating-point arithmetic, even for apparently simple expressions!</P></BLOCKQUOTE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Can arbitrary precision arithmetic give exact results? There are no easy answers. The standard rules of algebra often do not apply when using floating-point arithmetic. Among other things, the distributive and associative laws do not hold completely, and order of operation may be important for your computation. Rounding error, cumulative precision loss and underflow are often troublesome.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>tests the expressions &#8216;<SAMP>0.1 + 12.2</SAMP>&#8217; and &#8216;<SAMP>12.3</SAMP>&#8217; for equality using the machine double precision arithmetic, it decides that they are not equal! (See<A href="http://www.gnu.org/software/gawk/manual/gawk.html#Floating_002dpoint-Programming">Floating-point Programming</A>.) You can get the result you want by increasing the precision; 56 bits in this case will get the job done:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>$ <KBD style="FONT-STYLE: oblique">gawk -M -v PREC=56 'BEGIN { print (0.1 + 12.2 == 12.3) }'</KBD>
-| 1
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If adding more bits is good, perhaps adding even more bits of precision is better? Here is what happens if we use an even larger value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>PREC</CODE>:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>$ <KBD style="FONT-STYLE: oblique">gawk -M -v PREC=201 'BEGIN { print (0.1 + 12.2 == 12.3) }'</KBD>
-| 0
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This is not a bug in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or in the MPFR library. It is easy to forget that the finite number of bits used to store the value is often just an approximation after proper rounding. The test for equality succeeds if and only if<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>all</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>bits in the two operands are exactly the same. Since this is not necessarily true after floating-point computations with a particular precision and effective rounding rule, a straight test for equality may not work.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">So, don&#8217;t assume that floating-point values can be compared for equality. You should also exercise caution when using other forms of comparisons. The standard way to compare between floating-point numbers is to determine how much error (or<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>tolerance</EM>) you will allow in a comparison and check to see if one value is within this error range of the other.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In applications where 15 or fewer decimal places suffice, hardware double precision arithmetic can be adequate, and is usually much faster. But you do need to keep in mind that every floating-point operation can suffer a new rounding error with catastrophic consequences as illustrated by our earlier attempt to compute the value of the constant<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>pi</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/gawk/manual/gawk.html#Floating_002dpoint-Programming">Floating-point Programming</A>). Extra precision can greatly enhance the stability and the accuracy of your computation in such cases.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Repeated addition is not necessarily equivalent to multiplication in floating-point arithmetic. In the example in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/gawk/manual/gawk.html#Floating_002dpoint-Programming">Floating-point Programming</A>:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>$ <KBD style="FONT-STYLE: oblique">gawk 'BEGIN {</KBD>
&gt;   <KBD style="FONT-STYLE: oblique">for (d = 1.1; d &lt;= 1.5; d += 0.1)    # loop five times (?)</KBD>
&gt;       <KBD style="FONT-STYLE: oblique">i++</KBD>
&gt;   <KBD style="FONT-STYLE: oblique">print i</KBD>
&gt; <KBD style="FONT-STYLE: oblique">}'</KBD>
-| 4
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">you may or may not succeed in getting the correct result by choosing an arbitrarily large value for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>PREC</CODE>. Reformulation of the problem at hand is often the correct approach in such situations.