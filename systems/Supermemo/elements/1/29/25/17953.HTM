<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>15.4.3 Representing Floating-point Constants</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-constants_002c-floating_002dpoint></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Be wary of floating-point constants! When reading a floating-point constant from program source code,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>uses the default precision, unless overridden by an assignment to the special variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>PREC</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on the command line, to store it internally as a MPFR number. Changing the precision using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>PREC</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the program text does<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>not</EM>change the precision of a constant. If you need to represent a floating-point constant at a higher precision than the default and cannot use a command line assignment to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>PREC</CODE>, you should either specify the constant as a string, or as a rational number, whenever possible. The following example illustrates the differences among various ways to print a floating-point constant:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); MARGIN-LEFT: 3.2em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=example><PRE class=example>$ <KBD style="FONT-STYLE: oblique">gawk -M 'BEGIN { PREC = 113; printf("%0.25f\n", 0.1) }'</KBD>
-| 0.1000000000000000055511151 
$ <KBD style="FONT-STYLE: oblique">gawk -M -v PREC=113 'BEGIN { printf("%0.25f\n", 0.1) }'</KBD>
-| 0.1000000000000000000000000
$ <KBD style="FONT-STYLE: oblique">gawk -M 'BEGIN { PREC = 113; printf("%0.25f\n", "0.1") }'</KBD>
-| 0.1000000000000000000000000
$ <KBD style="FONT-STYLE: oblique">gawk -M 'BEGIN { PREC = 113; printf("%0.25f\n", 1/10) }'</KBD>
-| 0.1000000000000000000000000
</PRE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In the first case, the number is stored with the default precision of 53 bits.