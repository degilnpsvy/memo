<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>16.3 At A High Level How It Works</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Communication between<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and an extension is two-way. First, when an extension is loaded, it is passed a pointer to a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>whose fields are function pointers. This is shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/gawk/manual/gawk.html#load_002dextension">Figure 16.1</A>.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=float><A name=load_002dextension></A>
<DIV align=center><IMG alt="Loading the extension" src="http://www.gnu.org/software/gawk/manual/api-figure1.png"></DIV>
<DIV class=float-caption>
<P><STRONG>Figure 16.1:<SPAN class=Apple-converted-space>&nbsp;</SPAN></STRONG>Loading The Extension</P></DIV></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The extension can call functions inside<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>through these function pointers, at runtime, without needing (link-time) access to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE>&#8217;s symbols. One of these function pointers is to a function for &#8220;registering&#8221; new built-in functions. This is shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/gawk/manual/gawk.html#load_002dnew_002dfunction">Figure 16.2</A>.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=float><A name=load_002dnew_002dfunction></A>
<DIV align=center><IMG alt="Loading the new function" src="http://www.gnu.org/software/gawk/manual/api-figure2.png"></DIV>
<DIV class=float-caption>
<P><STRONG>Figure 16.2:<SPAN class=Apple-converted-space>&nbsp;</SPAN></STRONG>Loading The New Function</P></DIV></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In the other direction, the extension registers its new functions with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>by passing function pointers to the functions that provide the new feature (<CODE>do_chdir()</CODE>, for example).<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>associates the function pointer with a name and can then call it, using a defined calling convention. This is shown in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/gawk/manual/gawk.html#call_002dnew_002dfunction">Figure 16.3</A>.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=float><A name=call_002dnew_002dfunction></A>
<DIV align=center><IMG alt="Calling the new function" src="http://www.gnu.org/software/gawk/manual/api-figure3.png"></DIV>
<DIV class=float-caption>
<P><STRONG>Figure 16.3:<SPAN class=Apple-converted-space>&nbsp;</SPAN></STRONG>Calling The New Function</P></DIV></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>do_<VAR>xxx</VAR>()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function, in turn, then uses the function pointers in the API<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to do its work, such as updating variables or arrays, printing messages, setting<CODE>ERRNO</CODE>, and so on.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Convenience macros in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>gawkapi.h</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>header file make calling through the function pointers look like regular function calls so that extension code is quite readable and understandable.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Although all of this sounds somewhat complicated, the result is that extension code is quite straightforward to write and to read. You can see this in the sample extensions<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>filefuncs.c</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/gawk/manual/gawk.html#Extension-Example">Extension Example</A>) and also the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP>testext.c</SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>code for testing the APIs.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Some other bits and pieces:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>The API provides access to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE>&#8217;s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>do_<VAR>xxx</VAR></CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>values, reflecting command line options, like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>do_lint</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>do_profiling</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and so on (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/gawk/manual/gawk.html#Extension-API-Variables">Extension API Variables</A>). These are informational: an extension cannot affect their values inside<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE>. In addition, attempting to assign to them produces a compile-time error. 
<LI>The API also provides major and minor version numbers, so that an extension can check if the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>it is loaded with supports the facilities it was compiled with. (Version mismatches &#8220;shouldn&#8217;t&#8221; happen, but we all know how<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>that</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>goes.) See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/gawk/manual/gawk.html#Extension-Versioning">Extension Versioning</A>, for details.</LI></UL>