<H4 class=subsection>5.5.2 Format-Control Letters</H4><A name=index-printf-statement_002c-format_002dcontrol-characters></A><A name=index-format-specifiers_002c-printf-statement></A>
<P>A format specifier starts with the character &#8216;<SAMP>%</SAMP>&#8217; and ends with a <EM>format-control letter</EM>&#8212;it tells the <CODE>printf</CODE> statement how to output one item. The format-control letter specifies what <EM>kind</EM> of value to print. The rest of the format specifier is made up of optional <EM>modifiers</EM> that control <EM>how</EM> to print the value, such as the field width. Here is a list of the format-control letters: </P>
<DL compact>
<DT><CODE>%c</CODE></DT>
<DD>
<P>Print a number as an ASCII character; thus, &#8216;<SAMP>printf "%c", 65</SAMP>&#8217; outputs the letter &#8216;<SAMP>A</SAMP>&#8217;. The output for a string value is the first character of the string. </P><A name=index-dark-corner_002c-format_002dcontrol-characters></A><A name=index-gawk_002c-format_002dcontrol-characters></A>
<BLOCKQUOTE>
<P><B>NOTE:</B> The POSIX standard says the first character of a string is printed. In locales with multibyte characters, <CODE>gawk</CODE> attempts to convert the leading bytes of the string into a valid wide character and then to print the multibyte encoding of that character. Similarly, when printing a numeric value, <CODE>gawk</CODE> allows the value to be within the numeric range of values that can be held in a wide character. </P>
<P>Other <CODE>awk</CODE> versions generally restrict themselves to printing the first byte of a string or to numeric values within the range of a single byte (0&#8211;255). </P></BLOCKQUOTE></DD>
<DT><CODE>%d<SPAN class=roman><FONT face=Batang>,</FONT></SPAN> %i</CODE></DT>
<DD>
<P>Print a decimal integer. The two control letters are equivalent. (The &#8216;<SAMP>%i</SAMP>&#8217; specification is for compatibility with ISO C.) </P></DD>
<DT><CODE>%e<SPAN class=roman><FONT face=Batang>,</FONT></SPAN> %E</CODE></DT>
<DD>
<P>Print a number in scientific (exponential) notation; for example: </P>
<DIV class=example><PRE class=example>printf "%4.3e\n", 1950
</PRE></DIV>
<P>prints &#8216;<SAMP>1.950e+03</SAMP>&#8217;, with a total of four significant figures, three of which follow the decimal point. (The &#8216;<SAMP>4.3</SAMP>&#8217; represents two modifiers, discussed in the next subsection.) &#8216;<SAMP>%E</SAMP>&#8217; uses &#8216;<SAMP>E</SAMP>&#8217; instead of &#8216;<SAMP>e</SAMP>&#8217; in the output. </P></DD>
<DT><CODE>%f</CODE></DT>
<DD>
<P>Print a number in floating-point notation. For example: </P>
<DIV class=example><PRE class=example>printf "%4.3f", 1950
</PRE></DIV>
<P>prints &#8216;<SAMP>1950.000</SAMP>&#8217;, with a total of four significant figures, three of which follow the decimal point. (The &#8216;<SAMP>4.3</SAMP>&#8217; represents two modifiers, discussed in the next subsection.) </P>
<P>On systems supporting IEEE 754 floating point format, values representing negative infinity are formatted as &#8216;<SAMP>-inf</SAMP>&#8217; or &#8216;<SAMP>-infinity</SAMP>&#8217;, and positive infinity as &#8216;<SAMP>inf</SAMP>&#8217; and &#8216;<SAMP>infinity</SAMP>&#8217;. The special &#8220;not a number&#8221; value formats as &#8216;<SAMP>-nan</SAMP>&#8217; or &#8216;<SAMP>nan</SAMP>&#8217;. </P></DD>
<DT><CODE>%F</CODE></DT>
<DD>
<P>Like &#8216;<SAMP>%f</SAMP>&#8217; but the infinity and &#8220;not a number&#8221; values are spelled using uppercase letters. </P>
<P>The &#8216;<SAMP>%F</SAMP>&#8217; format is a POSIX extension to ISO C; not all systems support it. On those that don&#8217;t, <CODE>gawk</CODE> uses &#8216;<SAMP>%f</SAMP>&#8217; instead. </P></DD>
<DT><CODE>%g<SPAN class=roman><FONT face=Batang>,</FONT></SPAN> %G</CODE></DT>
<DD>
<P>Print a number in either scientific notation or in floating-point notation, whichever uses fewer characters; if the result is printed in scientific notation, &#8216;<SAMP>%G</SAMP>&#8217; uses &#8216;<SAMP>E</SAMP>&#8217; instead of &#8216;<SAMP>e</SAMP>&#8217;. </P></DD>
<DT><CODE>%o</CODE></DT>
<DD>
<P>Print an unsigned octal integer (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Nondecimal_002dnumbers">Nondecimal-numbers</A>). </P></DD>
<DT><CODE>%s</CODE></DT>
<DD>
<P>Print a string. </P></DD>
<DT><CODE>%u</CODE></DT>
<DD>
<P>Print an unsigned decimal integer. (This format is of marginal use, because all numbers in <CODE>awk</CODE> are floating-point; it is provided primarily for compatibility with C.) </P></DD>
<DT><CODE>%x<SPAN class=roman><FONT face=Batang>,</FONT></SPAN> %X</CODE></DT>
<DD>
<P>Print an unsigned hexadecimal integer; &#8216;<SAMP>%X</SAMP>&#8217; uses the letters &#8216;<SAMP>A</SAMP>&#8217; through &#8216;<SAMP>F</SAMP>&#8217; instead of &#8216;<SAMP>a</SAMP>&#8217; through &#8216;<SAMP>f</SAMP>&#8217; (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Nondecimal_002dnumbers">Nondecimal-numbers</A>). </P></DD>
<DT><CODE>%%</CODE></DT>
<DD>
<P>Print a single &#8216;<SAMP>%</SAMP>&#8217;. This does not consume an argument and it ignores any modifiers. </P></DD></DL><A name=index-dark-corner_002c-format_002dcontrol-characters-1></A><A name=index-gawk_002c-format_002dcontrol-characters-1></A>
<BLOCKQUOTE>
<P><B>NOTE:</B> When using the integer format-control letters for values that are outside the range of the widest C integer type, <CODE>gawk</CODE> switches to the &#8216;<SAMP>%g</SAMP>&#8217; format specifier. If <SAMP>--lint</SAMP> is provided on the command line (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Options">Options</A>), <CODE>gawk</CODE> warns about this. Other versions of <CODE>awk</CODE> may print invalid values or do something else entirely. (d.c.) </P></BLOCKQUOTE>