<H3 class=section>5.6 Redirecting Output of <CODE>print</CODE> and <CODE>printf</CODE></H3><A name=index-output-redirection></A><A name=index-redirection-of-output></A><A name=index-_002d_002dsandbox-option_002c-output-redirection-with-print_002c-printf></A>
<P>So far, the output from <CODE>print</CODE> and <CODE>printf</CODE> has gone to the standard output, usually the screen. Both <CODE>print</CODE> and <CODE>printf</CODE> can also send their output to other places. This is called <EM>redirection</EM>. </P>
<BLOCKQUOTE>
<P><B>NOTE:</B> When <SAMP>--sandbox</SAMP> is specified (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Options">Options</A>), redirecting output to files and pipes is disabled. </P></BLOCKQUOTE>
<P>A redirection appears after the <CODE>print</CODE> or <CODE>printf</CODE> statement. Redirections in <CODE>awk</CODE> are written just like redirections in shell commands, except that they are written inside the <CODE>awk</CODE> program. </P><A name=index-print-statement_002c-See-Also-redirection_002c-of-output></A><A name=index-printf-statement_002c-See-Also-redirection_002c-of-output></A>
<P>There are four forms of output redirection: output to a file, output appended to a file, output through a pipe to another command, and output to a coprocess. They are all shown for the <CODE>print</CODE> statement, but they work identically for <CODE>printf</CODE>: </P>
<DL compact>
<DD><A name=index-_003e-_0028right-angle-bracket_0029_002c-_003e-operator-_0028I_002fO_0029></A><A name=index-right-angle-bracket-_0028_003e_0029_002c-_003e-operator-_0028I_002fO_0029></A><A name=index-operators_002c-input_002foutput-3></A></DD>
<DT><CODE>print <VAR>items</VAR> &gt; <VAR>output-file</VAR></CODE></DT>
<DD>
<P>This redirection prints the items into the output file named <VAR>output-file</VAR>. The file name <VAR>output-file</VAR> can be any expression. Its value is changed to a string and then used as a file name (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Expressions">Expressions</A>). </P>
<P>When this type of redirection is used, the <VAR>output-file</VAR> is erased before the first output is written to it. Subsequent writes to the same <VAR>output-file</VAR> do not erase <VAR>output-file</VAR>, but append to it. (This is different from how you use redirections in shell scripts.) If <VAR>output-file</VAR> does not exist, it is created. For example, here is how an <CODE>awk</CODE> program can write a list of peoples&#8217; names to one file named <SAMP>name-list</SAMP>, and a list of phone numbers to another file named <SAMP>phone-list</SAMP>: </P>
<DIV class=example><PRE class=example>$ <KBD><EM>awk '{ print $2 &gt; "phone-list"</EM></KBD>
&gt;        <KBD><EM>print $1 &gt; "name-list" }' mail-list</EM></KBD>
$ <KBD><EM>cat phone-list</EM></KBD>
-| 555-5553
-| 555-3412
&#8230;
$ <KBD><EM>cat name-list</EM></KBD>
-| Amelia
-| Anthony
&#8230;
</PRE></DIV>
<P>Each output file contains one name or number per line. </P><A name=index-_003e-_0028right-angle-bracket_0029_002c-_003e_003e-operator-_0028I_002fO_0029></A><A name=index-right-angle-bracket-_0028_003e_0029_002c-_003e_003e-operator-_0028I_002fO_0029></A></DD>
<DT><CODE>print <VAR>items</VAR> &gt;&gt; <VAR>output-file</VAR></CODE></DT>
<DD>
<P>This redirection prints the items into the pre-existing output file named <VAR>output-file</VAR>. The difference between this and the single-&#8216;<SAMP>&gt;</SAMP>&#8217; redirection is that the old contents (if any) of <VAR>output-file</VAR> are not erased. Instead, the <CODE>awk</CODE> output is appended to the file. If <VAR>output-file</VAR> does not exist, then it is created. </P><A name=index-_007c-_0028vertical-bar_0029_002c-_007c-operator-_0028I_002fO_0029-1></A><A name=index-pipe_002c-output></A><A name=index-output_002c-pipes></A></DD>
<DT><CODE>print <VAR>items</VAR> | <VAR>command</VAR></CODE></DT>
<DD>
<P>It is possible to send output to another program through a pipe instead of into a file. This redirection opens a pipe to <VAR>command</VAR>, and writes the values of <VAR>items</VAR> through this pipe to another process created to execute <VAR>command</VAR>. </P>
<P>The redirection argument <VAR>command</VAR> is actually an <CODE>awk</CODE> expression. Its value is converted to a string whose contents give the shell command to be run. For example, the following produces two files, one unsorted list of peoples&#8217; names, and one list sorted in reverse alphabetical order: </P>
<DIV class=example><PRE class=example>awk '{ print $1 &gt; "names.unsorted"
       command = "sort -r &gt; names.sorted"
       print $1 | command }' mail-list
</PRE></DIV>
<P>The unsorted list is written with an ordinary redirection, while the sorted list is written by piping through the <CODE>sort</CODE> utility. </P>
<P>The next example uses redirection to mail a message to the mailing list &#8216;<SAMP>bug-system</SAMP>&#8217;. This might be useful when trouble is encountered in an <CODE>awk</CODE> script run periodically for system maintenance: </P>
<DIV class=example><PRE class=example>report = "mail bug-system"
print "Awk script failed:", $0 | report
m = ("at record number " FNR " of " FILENAME)
print m | report
close(report)
</PRE></DIV>
<P>The message is built using string concatenation and saved in the variable <CODE>m</CODE>. It&#8217;s then sent down the pipeline to the <CODE>mail</CODE> program. (The parentheses group the items to concatenate&#8212;see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Concatenation">Concatenation</A>.) </P>
<P>The <CODE>close()</CODE> function is called here because it&#8217;s a good idea to close the pipe as soon as all the intended output has been sent to it. See <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Close-Files-And-Pipes">Close Files And Pipes</A>, for more information. </P>
<P>This example also illustrates the use of a variable to represent a <VAR>file</VAR> or <VAR>command</VAR>&#8212;it is not necessary to always use a string constant. Using a variable is generally a good idea, because (if you mean to refer to that same file or command) <CODE>awk</CODE> requires that the string value be spelled identically every time. </P><A name=index-coprocesses></A><A name=index-_007c-_0028vertical-bar_0029_002c-_007c_0026-operator-_0028I_002fO_0029-1></A><A name=index-operators_002c-input_002foutput-4></A><A name=index-differences-in-awk-and-gawk_002c-input_002foutput-operators-1></A></DD>
<DT><CODE>print <VAR>items</VAR> |&amp; <VAR>command</VAR></CODE></DT>
<DD>
<P>This redirection prints the items to the input of <VAR>command</VAR>. The difference between this and the single-&#8216;<SAMP>|</SAMP>&#8217; redirection is that the output from <VAR>command</VAR> can be read with <CODE>getline</CODE>. Thus <VAR>command</VAR> is a <EM>coprocess</EM>, which works together with, but subsidiary to, the <CODE>awk</CODE> program. </P>
<P>This feature is a <CODE>gawk</CODE> extension, and is not available in POSIX <CODE>awk</CODE>. See <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Getline_002fCoprocess">Getline/Coprocess</A>, for a brief discussion. See <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Two_002dway-I_002fO">Two-way I/O</A>, for a more complete discussion. </P></DD></DL>
<P>Redirecting output using &#8216;<SAMP>&gt;</SAMP>&#8217;, &#8216;<SAMP>&gt;&gt;</SAMP>&#8217;, &#8216;<SAMP>|</SAMP>&#8217;, or &#8216;<SAMP>|&amp;</SAMP>&#8217; asks the system to open a file, pipe, or coprocess only if the particular <VAR>file</VAR> or <VAR>command</VAR> you specify has not already been written to by your program or if it has been closed since it was last written to. </P><A name=index-troubleshooting_002c-printing></A>
<P>It is a common error to use &#8216;<SAMP>&gt;</SAMP>&#8217; redirection for the first <CODE>print</CODE> to a file, and then to use &#8216;<SAMP>&gt;&gt;</SAMP>&#8217; for subsequent output: </P>
<DIV class=example><PRE class=example># clear the file
print "Don't panic" &gt; "guide.txt"
&#8230;
# append
print "Avoid improbability generators" &gt;&gt; "guide.txt"
</PRE></DIV>
<P>This is indeed how redirections must be used from the shell. But in <CODE>awk</CODE>, it isn&#8217;t necessary. In this kind of case, a program should use &#8216;<SAMP>&gt;</SAMP>&#8217; for all the <CODE>print</CODE> statements, since the output file is only opened once. (It happens that if you mix &#8216;<SAMP>&gt;</SAMP>&#8217; and &#8216;<SAMP>&gt;&gt;</SAMP>&#8217; that output is produced in the expected order. However, mixing the operators for the same file is definitely poor style, and is confusing to readers of your program.) </P><A name=index-differences-in-awk-and-gawk_002c-implementation-limitations-1></A><A name=index-implementation-issues_002c-gawk_002c-limits-1></A><A name=index-awk_002c-implementation-issues_002c-pipes></A><A name=index-gawk_002c-implementation-issues_002c-pipes></A>
<P>As mentioned earlier (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Getline-Notes">Getline Notes</A>), many Many older <CODE>awk</CODE> implementations limit the number of pipelines that an <CODE>awk</CODE> program may have open to just one! In <CODE>gawk</CODE>, there is no such limit. <CODE>gawk</CODE> allows a program to open as many pipelines as the underlying operating system permits. </P><A name=index-sidebar_002c-Piping-into-sh></A>
<TABLE class=cartouche border=1>
<TBODY>
<TR>
<TD>
<DIV align=center><B>Piping into <CODE>sh</CODE></B> </DIV><A name=index-shells_002c-piping-commands-into></A>
<P>A particularly powerful way to use redirection is to build command lines and pipe them into the shell, <CODE>sh</CODE>. For example, suppose you have a list of files brought over from a system where all the file names are stored in uppercase, and you wish to rename them to have names in all lowercase. The following program is both simple and efficient: </P>
<DIV class=example><PRE class=example>{ printf("mv %s %s\n", $0, tolower($0)) | "sh" }

END { close("sh") }
</PRE></DIV>
<P>The <CODE>tolower()</CODE> function returns its argument string with all uppercase characters converted to lowercase (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#String-Functions">String Functions</A>). The program builds up a list of command lines, using the <CODE>mv</CODE> utility to rename the files. It then sends the list to the shell for execution. </P></TD></TR></TBODY></TABLE>