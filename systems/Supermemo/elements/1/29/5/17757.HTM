<H3 class=section>5.2 <CODE>print</CODE> Statement Examples</H3>
<P>Each <CODE>print</CODE> statement makes at least one line of output. However, it isn&#8217;t limited to only one line. If an item value is a string containing a newline, the newline is output along with the rest of the string. A single <CODE>print</CODE> statement can make any number of lines this way. </P><A name=index-newlines_002c-printing></A>
<P>The following is an example of printing a string that contains embedded newlines (the &#8216;<SAMP>\n</SAMP>&#8217; is an escape sequence, used to represent the newline character; see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Escape-Sequences">Escape Sequences</A>): </P>
<DIV class=example><PRE class=example>$ <KBD><EM>awk 'BEGIN { print "line one\nline two\nline three" }'</EM></KBD>
-| line one
-| line two
-| line three
</PRE></DIV><A name=index-fields_002c-printing></A>
<P>The next example, which is run on the <SAMP>inventory-shipped</SAMP> file, prints the first two fields of each input record, with a space between them: </P>
<DIV class=example><PRE class=example>$ <KBD><EM>awk '{ print $1, $2 }' inventory-shipped</EM></KBD>
-| Jan 13
-| Feb 15
-| Mar 15
&#8230;
</PRE></DIV><A name=index-print-statement_002c-commas_002c-omitting></A><A name=index-troubleshooting_002c-print-statement_002c-omitting-commas></A>
<P>A common mistake in using the <CODE>print</CODE> statement is to omit the comma between two items. This often has the effect of making the items run together in the output, with no space. The reason for this is that juxtaposing two string expressions in <CODE>awk</CODE> means to concatenate them. Here is the same program, without the comma: </P>
<DIV class=example><PRE class=example>$ <KBD><EM>awk '{ print $1 $2 }' inventory-shipped</EM></KBD>
-| Jan13
-| Feb15
-| Mar15
&#8230;
</PRE></DIV><A name=index-BEGIN-pattern_002c-headings_002c-adding></A>
<P>To someone unfamiliar with the <SAMP>inventory-shipped</SAMP> file, neither example&#8217;s output makes much sense. A heading line at the beginning would make it clearer. Let&#8217;s add some headings to our table of months (<CODE>$1</CODE>) and green crates shipped (<CODE>$2</CODE>). We do this using the <CODE>BEGIN</CODE> pattern (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#BEGIN_002fEND">BEGIN/END</A>) so that the headings are only printed once: </P>
<DIV class=example><PRE class=example>awk 'BEGIN {  print "Month Crates"
              print "----- ------" }
           {  print $1, $2 }' inventory-shipped
</PRE></DIV>
<P>When run, the program prints the following: </P>
<DIV class=example><PRE class=example>Month Crates
----- ------
Jan 13
Feb 15
Mar 15
&#8230;
</PRE></DIV>
<P>The only problem, however, is that the headings and the table data don&#8217;t line up! We can fix this by printing some spaces between the two fields: </P>
<DIV class=example><PRE class=example>awk 'BEGIN { print "Month Crates"
             print "----- ------" }
           { print $1, "     ", $2 }' inventory-shipped
</PRE></DIV><A name=index-printf-statement_002c-columns_002c-aligning></A><A name=index-columns_002c-aligning></A>
<P>Lining up columns this way can get pretty complicated when there are many columns to fix. Counting spaces for two or three columns is simple, but any more than this can take up a lot of time. This is why the <CODE>printf</CODE> statement was created (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Printf">Printf</A>); one of its specialties is lining up columns of data. </P><A name=index-line-continuations_002c-in-print-statement></A><A name=index-print-statement_002c-line-continuations-and></A>
<BLOCKQUOTE>
<P><B>NOTE:</B> You can continue either a <CODE>print</CODE> or <CODE>printf</CODE> statement simply by putting a newline after any comma (see <A href="http://www.gnu.org/software/gawk/manual/gawk.html#Statements_002fLines">Statements/Lines</A>). </P></BLOCKQUOTE>