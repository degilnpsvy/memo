<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>14.3.1 Control of Breakpoints</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">As we saw above, the first thing you probably want to do in a debugging session is to get your breakpoints set up, since otherwise your program will just run as if it was not under the debugger. The commands for controlling breakpoints are:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DD><A name=index-debugger-commands_002c-b-_0028break_0029></A><A name=index-debugger-commands_002c-break></A><A name=index-break-debugger-command></A><A name=index-b-debugger-command-_0028alias-for-break_0029></A><A name=index-set-breakpoint></A><A name=index-breakpoint_002c-setting></A></DD>
<DT><CODE>break</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>[[<VAR>filename</VAR><CODE>:</CODE>]<VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>|<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>function</VAR>] [<CODE>"<VAR>expression</VAR>"</CODE>]</DT>
<DT><CODE>b</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>[[<VAR>filename</VAR><CODE>:</CODE>]<VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>|<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>function</VAR>] [<CODE>"<VAR>expression</VAR>"</CODE>]</DT>
<DD>
<P>Without any argument, set a breakpoint at the next instruction to be executed in the selected stack frame. Arguments can be one of the following:</P>
<DL compact>
<DT><VAR>n</VAR></DT>
<DD>
<P>Set a breakpoint at line number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the current source file.</P></DD>
<DT><VAR>filename</VAR><CODE>:</CODE><VAR>n</VAR></DT>
<DD>
<P>Set a breakpoint at line number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in source file<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>filename</VAR>.</P></DD>
<DT><VAR>function</VAR></DT>
<DD>
<P>Set a breakpoint at entry to (the first instruction of) function<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>function</VAR>.</P></DD></DL>
<P>Each breakpoint is assigned a number which can be used to delete it from the breakpoint list using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>delete</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>command.</P>
<P>With a breakpoint, you may also supply a condition. This is an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression (enclosed in double quotes) that the debugger evaluates whenever the breakpoint is reached. If the condition is true, then the debugger stops execution and prompts for a command. Otherwise, it continues executing the program.</P><A name=index-debugger-commands_002c-clear></A><A name=index-clear-debugger-command></A><A name=index-delete-breakpoint-at-location></A><A name=index-breakpoint-at-location_002c-how-to-delete></A></DD>
<DT><CODE>clear</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>[[<VAR>filename</VAR><CODE>:</CODE>]<VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>|<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>function</VAR>]</DT>
<DD>
<P>Without any argument, delete any breakpoint at the next instruction to be executed in the selected stack frame. If the program stops at a breakpoint, this deletes that breakpoint so that the program does not stop at that location again. Arguments can be one of the following:</P>
<DL compact>
<DT><VAR>n</VAR></DT>
<DD>
<P>Delete breakpoint(s) set at line number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the current source file.</P></DD>
<DT><VAR>filename</VAR><CODE>:</CODE><VAR>n</VAR></DT>
<DD>
<P>Delete breakpoint(s) set at line number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in source file<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>filename</VAR>.</P></DD>
<DT><VAR>function</VAR></DT>
<DD>
<P>Delete breakpoint(s) set at entry to function<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>function</VAR>.</P></DD></DL><A name=index-debugger-commands_002c-condition></A><A name=index-condition-debugger-command></A><A name=index-breakpoint-condition></A></DD>
<DT><CODE>condition</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"<VAR>expression</VAR>"</CODE></DT>
<DD>
<P>Add a condition to existing breakpoint or watchpoint<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>. The condition is an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression that the debugger evaluates whenever the breakpoint or watchpoint is reached. If the condition is true, then the debugger stops execution and prompts for a command. Otherwise, the debugger continues executing the program. If the condition expression is not specified, any existing condition is removed; i.e., the breakpoint or watchpoint is made unconditional.</P><A name=index-debugger-commands_002c-d-_0028delete_0029></A><A name=index-debugger-commands_002c-delete></A><A name=index-delete-debugger-command></A><A name=index-d-debugger-command-_0028alias-for-delete_0029></A><A name=index-delete-breakpoint-by-number></A><A name=index-breakpoint_002c-delete-by-number></A></DD>
<DT><CODE>delete</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>[<VAR>n1 n2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230;] [<VAR>n</VAR>&#8211;<VAR>m</VAR>]</DT>
<DT><CODE>d</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>[<VAR>n1 n2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230;] [<VAR>n</VAR>&#8211;<VAR>m</VAR>]</DT>
<DD>
<P>Delete specified breakpoints or a range of breakpoints. Deletes all defined breakpoints if no argument is supplied.</P><A name=index-debugger-commands_002c-disable></A><A name=index-disable-debugger-command></A><A name=index-disable-breakpoint></A><A name=index-breakpoint_002c-how-to-disable-or-enable></A></DD>
<DT><CODE>disable</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>[<VAR>n1 n2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230; |<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>&#8211;<VAR>m</VAR>]</DT>
<DD>
<P>Disable specified breakpoints or a range of breakpoints. Without any argument, disables all breakpoints.</P><A name=index-debugger-commands_002c-e-_0028enable_0029></A><A name=index-debugger-commands_002c-enable></A><A name=index-enable-debugger-command></A><A name=index-e-debugger-command-_0028alias-for-enable_0029></A><A name=index-enable-breakpoint></A></DD>
<DT><CODE>enable</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>[<CODE>del</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>|<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>once</CODE>] [<VAR>n1 n2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230;] [<VAR>n</VAR>&#8211;<VAR>m</VAR>]</DT>
<DT><CODE>e</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>[<CODE>del</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>|<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>once</CODE>] [<VAR>n1 n2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8230;] [<VAR>n</VAR>&#8211;<VAR>m</VAR>]</DT>
<DD>
<P>Enable specified breakpoints or a range of breakpoints. Without any argument, enables all breakpoints. Optionally, you can specify how to enable the breakpoint:</P>
<DL compact>
<DT><CODE>del</CODE></DT>
<DD>
<P>Enable the breakpoint(s) temporarily, then delete it when the program stops at the breakpoint.</P></DD>
<DT><CODE>once</CODE></DT>
<DD>
<P>Enable the breakpoint(s) temporarily, then disable it when the program stops at the breakpoint.</P></DD></DL><A name=index-debugger-commands_002c-ignore></A><A name=index-ignore-debugger-command></A><A name=index-ignore-breakpoint></A></DD>
<DT><CODE>ignore</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR></DT>
<DD>
<P>Ignore breakpoint number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>the next<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>times it is hit.</P><A name=index-debugger-commands_002c-t-_0028tbreak_0029></A><A name=index-debugger-commands_002c-tbreak></A><A name=index-tbreak-debugger-command></A><A name=index-t-debugger-command-_0028alias-for-tbreak_0029></A><A name=index-temporary-breakpoint></A></DD>
<DT><CODE>tbreak</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>[[<VAR>filename</VAR><CODE>:</CODE>]<VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>|<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>function</VAR>]</DT>
<DT><CODE>t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>[[<VAR>filename</VAR><CODE>:</CODE>]<VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>|<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>function</VAR>]</DT>
<DD>
<P>Set a temporary breakpoint (enabled for only one stop). The arguments are the same as for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>break</CODE>.</P></DD></DL>