<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>14.1.2 Additional Debugging Concepts</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Before diving in to the details, we need to introduce several important concepts that apply to just about all debuggers. The following list defines terms used throughout the rest of this chapter.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DD><A name=index-stack-frame></A></DD>
<DT><EM>Stack Frame</EM></DT>
<DD>
<P>Programs generally call functions during the course of their execution. One function can call another, or a function can call itself (recursion). You can view the chain of called functions (main program calls A, which calls B, which calls C), as a stack of executing functions: the currently running function is the topmost one on the stack, and when it finishes (returns), the next one down then becomes the active function. Such a stack is termed a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>call stack</EM>.</P>
<P>For each function on the call stack, the system maintains a data area that contains the function&#8217;s parameters, local variables, and return value, as well as any other &#8220;bookkeeping&#8221; information needed to manage the call stack. This data area is termed a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>stack frame</EM>.</P>
<P><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>also follows this model, and gives you access to the call stack and to each stack frame. You can see the call stack, as well as from where each function on the stack was invoked. Commands that print the call stack print information about each stack frame (as detailed later on).</P></DD>
<DT><EM>Breakpoint</EM></DT>
<DD><A name=index-breakpoint></A>
<P>During debugging, you often wish to let the program run until it reaches a certain point, and then continue execution from there one statement (or instruction) at a time. The way to do this is to set a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>breakpoint</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>within the program. A breakpoint is where the execution of the program should break off (stop), so that you can take over control of the program&#8217;s execution. You can add and remove as many breakpoints as you like.</P></DD>
<DT><EM>Watchpoint</EM></DT>
<DD><A name=index-watchpoint></A>
<P>A watchpoint is similar to a breakpoint. The difference is that breakpoints are oriented around the code: stop when a certain point in the code is reached. A watchpoint, however, specifies that program execution should stop when a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>data value</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>is changed. This is useful, since sometimes it happens that a variable receives an erroneous value, and it&#8217;s hard to track down where this happens just by looking at the code. By using a watchpoint, you can stop whenever a variable is assigned to, and usually find the errant code quite quickly.</P></DD></DL>