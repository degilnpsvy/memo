<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>16.4.4 Memory Allocation Functions and Convenience Macros</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-allocating-memory-for-extensions></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-extensions_002c-allocating-memory></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The API provides a number of<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>memory allocation</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>functions for allocating memory that can be passed to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE>, as well as a number of convenience macros.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DT><CODE>void *gawk_malloc(size_t size);</CODE></DT>
<DD>
<P>Call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE>-provided<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>api_malloc()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to allocate storage that may be passed to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE>.</P></DD>
<DT><CODE>void *gawk_calloc(size_t nmemb, size_t size);</CODE></DT>
<DD>
<P>Call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE>-provided<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>api_calloc()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to allocate storage that may be passed to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE>.</P></DD>
<DT><CODE>void *gawk_realloc(void *ptr, size_t size);</CODE></DT>
<DD>
<P>Call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE>-provided<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>api_realloc()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to allocate storage that may be passed to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE>.</P></DD>
<DT><CODE>void gawk_free(void *ptr);</CODE></DT>
<DD>
<P>Call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE>-provided<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>api_free()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to release storage that was allocated with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk_malloc()</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk_calloc()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk_realloc()</CODE>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The API has to provide these functions because it is possible for an extension to be compiled and linked against a different version of the C library than was used for the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>executable.<A href="http://www.gnu.org/software/gawk/manual/gawk.html#FOOT98" name=DOCF98><SUP>98</SUP></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>were to use its version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>free()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>when the memory came from an unrelated version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>malloc()</CODE>, unexpected behavior would likely result.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Two convenience macros may be used for allocating storage from the API-provided function pointers<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>api_malloc()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>api_realloc()</CODE>. If the allocation fails, they cause<CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to exit with a fatal error message. They should be used as if they were procedure calls that do not return a value.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DT><CODE>#define emalloc(pointer, type, size, message) &#8230;</CODE></DT>
<DD>
<P>The arguments to this macro are as follows:</P>
<DL compact>
<DT><CODE>pointer</CODE></DT>
<DD>
<P>The pointer variable to point at the allocated storage.</P></DD>
<DT><CODE>type</CODE></DT>
<DD>
<P>The type of the pointer variable, used to create a cast for the call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>api_malloc()</CODE>.</P></DD>
<DT><CODE>size</CODE></DT>
<DD>
<P>The total number of bytes to be allocated.</P></DD>
<DT><CODE>message</CODE></DT>
<DD>
<P>A message to be prefixed to the fatal error message. Typically this is the name of the function using the macro.</P></DD></DL>
<P>For example, you might allocate a string value like so:</P>
<DIV style="MARGIN-LEFT: 3.2em" class=example><PRE class=example>awk_value_t result;
char *message;
const char greet[] = "Don't Panic!";

emalloc(message, char *, sizeof(greet), "myfunc");
strcpy(message, greet);
make_malloced_string(message, strlen(message), &amp; result);
</PRE></DIV></DD>
<DT><CODE>#define erealloc(pointer, type, size, message) &#8230;</CODE></DT>
<DD>
<P>This is like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>emalloc()</CODE>, but it calls<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>api_realloc()</CODE>, instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>api_malloc()</CODE>. The arguments are the same as for the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>emalloc()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>macro.</P></DD></DL>