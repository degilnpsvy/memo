<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>16.4.2 General Purpose Data Types</H4><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Robbins_002c-Arnold-4></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN><A style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" name=index-Ramey_002c-Chet-1></A><SPAN style="TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<BLOCKQUOTE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<P><I>I have a true love/hate relationship with unions.</I></P></BLOCKQUOTE>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" align=center>&#8212;<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>Arnold Robbins</EM></DIV>
<BLOCKQUOTE style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<P><I>That&#8217;s the thing about unions: the compiler will arrange things so they can accommodate both love and hate.</I></P></BLOCKQUOTE>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" align=center>&#8212;<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>Chet Ramey</EM></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The extension API defines a number of simple types and structures for general purpose use. Additional, more specialized, data structures are introduced in subsequent sections, together with the functions that use them.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DT><CODE>typedef void *awk_ext_id_t;</CODE></DT>
<DD>
<P>A value of this type is received from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>when an extension is loaded. That value must then be passed back to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the first parameter of each API function.</P></DD>
<DT><CODE>#define awk_const &#8230;</CODE></DT>
<DD>
<P>This macro expands to &#8216;<SAMP>const</SAMP>&#8217; when compiling an extension, and to nothing when compiling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>itself. This makes certain fields in the API data structures unwritable from extension code, while allowing<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to use them as it needs to.</P></DD>
<DT><CODE>typedef enum awk_bool {</CODE></DT>
<DT><CODE>&nbsp;&nbsp;&nbsp;&nbsp;awk_false = 0,</CODE></DT>
<DT><CODE>&nbsp;&nbsp;&nbsp;&nbsp;awk_true</CODE></DT>
<DT><CODE>} awk_bool_t;</CODE></DT>
<DD>
<P>A simple boolean type.</P></DD>
<DT><CODE>typedef struct awk_string {</CODE></DT>
<DT><CODE>&nbsp;&nbsp;&nbsp;&nbsp;char *str;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* data */</CODE></DT>
<DT><CODE>&nbsp;&nbsp;&nbsp;&nbsp;size_t len;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* length thereof, in chars */</CODE></DT>
<DT><CODE>} awk_string_t;</CODE></DT>
<DD>
<P>This represents a mutable string.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>owns the memory pointed to if it supplied the value. Otherwise, it takes ownership of the memory pointed to.<SPAN class=Apple-converted-space>&nbsp;</SPAN><STRONG>Such memory must come from calling the API-provided function pointers<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>api_malloc()</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>api_calloc()</CODE>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>api_realloc()</CODE>!</STRONG></P>
<P>As mentioned earlier, strings are maintained using the current multibyte encoding.</P></DD>
<DT><CODE>typedef enum {</CODE></DT>
<DT><CODE>&nbsp;&nbsp;&nbsp;&nbsp;AWK_UNDEFINED,</CODE></DT>
<DT><CODE>&nbsp;&nbsp;&nbsp;&nbsp;AWK_NUMBER,</CODE></DT>
<DT><CODE>&nbsp;&nbsp;&nbsp;&nbsp;AWK_STRING,</CODE></DT>
<DT><CODE>&nbsp;&nbsp;&nbsp;&nbsp;AWK_ARRAY,</CODE></DT>
<DT><CODE>&nbsp;&nbsp;&nbsp;&nbsp;AWK_SCALAR,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* opaque access to a variable */</CODE></DT>
<DT><CODE>&nbsp;&nbsp;&nbsp;&nbsp;AWK_VALUE_COOKIE&nbsp;&nbsp;&nbsp;&nbsp;/* for updating a previously created value */</CODE></DT>
<DT><CODE>} awk_valtype_t;</CODE></DT>
<DD>
<P>This<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>enum</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>indicates the type of a value. It is used in the following<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct</CODE>.</P></DD>
<DT><CODE>typedef struct awk_value {</CODE></DT>
<DT><CODE>&nbsp;&nbsp;&nbsp;&nbsp;awk_valtype_t val_type;</CODE></DT>
<DT><CODE>&nbsp;&nbsp;&nbsp;&nbsp;union {</CODE></DT>
<DT><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;awk_string_t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;s;</CODE></DT>
<DT><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;double&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;d;</CODE></DT>
<DT><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;awk_array_t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a;</CODE></DT>
<DT><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;awk_scalar_t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;scl;</CODE></DT>
<DT><CODE>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;awk_value_cookie_t&nbsp;vc;</CODE></DT>
<DT><CODE>&nbsp;&nbsp;&nbsp;&nbsp;} u;</CODE></DT>
<DT><CODE>} awk_value_t;</CODE></DT>
<DD>
<P>An &#8220;<CODE>awk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value.&#8221; The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>val_type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>member indicates what kind of value the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>union</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>holds, and each member is of the appropriate type.</P></DD>
<DT><CODE>#define str_value&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u.s</CODE></DT>
<DT><CODE>#define num_value&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;u.d</CODE></DT>
<DT><CODE>#define array_cookie&nbsp;&nbsp;&nbsp;u.a</CODE></DT>
<DT><CODE>#define scalar_cookie&nbsp;&nbsp;u.scl</CODE></DT>
<DT><CODE>#define value_cookie&nbsp;&nbsp;&nbsp;u.vc</CODE></DT>
<DD>
<P>These macros make accessing the fields of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk_value_t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>more readable.</P></DD>
<DT><CODE>typedef void *awk_scalar_t;</CODE></DT>
<DD>
<P>Scalars can be represented as an opaque type. These values are obtained from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and then passed back into it. This is discussed in a general fashion below, and in more detail in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/gawk/manual/gawk.html#Symbol-table-by-cookie">Symbol table by cookie</A>.</P></DD>
<DT><CODE>typedef void *awk_value_cookie_t;</CODE></DT>
<DD>
<P>A &#8220;value cookie&#8221; is an opaque type representing a cached value. This is also discussed in a general fashion below, and in more detail in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/gawk/manual/gawk.html#Cached-values">Cached values</A>.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Scalar values in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are either numbers or strings. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk_value_t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>struct represents values. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>val_type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>member indicates what is in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>union</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Representing numbers is easy&#8212;the API uses a C<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>double</CODE>. Strings require more work. Since<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>allows embedded<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NUL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes in string values, a string must be represented as a pair containing a data-pointer and length. This is the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk_string_t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>type.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Identifiers (i.e., the names of global variables) can be associated with either scalar values or with arrays. In addition,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>provides true arrays of arrays, where any given array element can itself be an array. Discussion of arrays is delayed until<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.gnu.org/software/gawk/manual/gawk.html#Array-Manipulation">Array Manipulation</A>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The various macros listed earlier make it easier to use the elements of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>union</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as if they were fields in a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct</CODE>; this is a common coding practice in C. Such code is easier to write and to read, however it remains<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>your</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>responsibility to make sure that the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>val_type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>member correctly reflects the type of the value in the<CODE>awk_value_t</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Conceptually, the first three members of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>union</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(number, string, and array) are all that is needed for working with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>values. However, since the API provides routines for accessing and changing the value of global scalar variables only by using the variable&#8217;s name, there is a performance penalty:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>must find the variable each time it is accessed and changed. This turns out to be a real issue, not just a theoretical one.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Thus, if you know that your extension will spend considerable time reading and/or changing the value of one or more scalar variables, you can obtain a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>scalar cookie</EM><A href="http://www.gnu.org/software/gawk/manual/gawk.html#FOOT97" name=DOCF97><SUP>97</SUP></A>object for that variable, and then use the cookie for getting the variable&#8217;s value or for changing the variable&#8217;s value. This is the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk_scalar_t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>type and<CODE>scalar_cookie</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>macro. Given a scalar cookie,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can directly retrieve or modify the value, as required, without having to first find it.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk_value_cookie_t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>type and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>value_cookie</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>macro are similar. If you know that you wish to use the same numeric or string<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>value</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>for one or more variables, you can create the value once, retaining a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>value cookie</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>for it, and then pass in that value cookie whenever you wish to set the value of a variable. This saves both storage space within the running<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>process as well as the time needed to create the value.