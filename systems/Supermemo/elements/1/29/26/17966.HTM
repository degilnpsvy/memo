<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>16.4.5 Constructor Functions</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The API provides a number of<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>constructor</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>functions for creating string and numeric values, as well as a number of convenience macros. This subsection presents them all as function prototypes, in the way that extension code would use them.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" compact>
<DT><CODE>static inline awk_value_t *</CODE></DT>
<DT><CODE>make_const_string(const char *string, size_t length, awk_value_t *result)</CODE></DT>
<DD>
<P>This function creates a string value in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk_value_t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>variable pointed to by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>result</CODE>. It expects<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to be a C string constant (or other string data), and automatically creates a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>copy</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the data for storage in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>result</CODE>. It returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>result</CODE>.</P></DD>
<DT><CODE>static inline awk_value_t *</CODE></DT>
<DT><CODE>make_malloced_string(const char *string, size_t length, awk_value_t *result)</CODE></DT>
<DD>
<P>This function creates a string value in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk_value_t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>variable pointed to by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>result</CODE>. It expects<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to be a &#8216;<SAMP>char *</SAMP>&#8217; value pointing to data previously obtained from the api-provided functions<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>api_malloc()</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>api_calloc()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>api_realloc()</CODE>. The idea here is that the data is passed directly to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gawk</CODE>, which assumes responsibility for it. It returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>result</CODE>.</P></DD>
<DT><CODE>static inline awk_value_t *</CODE></DT>
<DT><CODE>make_null_string(awk_value_t *result)</CODE></DT>
<DD>
<P>This specialized function creates a null string (the &#8220;undefined&#8221; value) in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk_value_t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>variable pointed to by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>result</CODE>. It returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>result</CODE>.</P></DD>
<DT><CODE>static inline awk_value_t *</CODE></DT>
<DT><CODE>make_number(double num, awk_value_t *result)</CODE></DT>
<DD>
<P>This function simply creates a numeric value in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>awk_value_t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>variable pointed to by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>result</CODE>.</P></DD></DL>