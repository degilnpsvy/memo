<H4 class=subsection style="FONT-SIZE: medium; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">3.5.1 File layout</H4>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The mmo file contents is not partitioned into named sections as with e.g. ELF. Memory areas is formed by specifying the location of the data that follows. Only the memory area `<SAMP><SPAN class=samp>0x0000...00</SPAN></SAMP>' to `<SAMP><SPAN class=samp>0x01ff...ff</SPAN></SAMP>' is executable, so it is used for code (and constants) and the area `<SAMP><SPAN class=samp>0x2000...00</SPAN></SAMP>' to `<SAMP><SPAN class=samp>0x20ff...ff</SPAN></SAMP>' is used for writable data. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://sourceware.org/binutils/docs-2.23.1/bfd/mmo-section-mapping.html#mmo-section-mapping">mmo section mapping</A>.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">There is provision for specifying &#8220;special data&#8221; of 65536 different types. We use type 80 (decimal), arbitrarily chosen the same as the ELF<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>e_machine</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>number for MMIX, filling it with section information normally found in ELF objects. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://sourceware.org/binutils/docs-2.23.1/bfd/mmo-section-mapping.html#mmo-section-mapping">mmo section mapping</A>.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Contents is entered as 32-bit words, xor:ed over previous contents, always zero-initialized. A word that starts with the byte `<SAMP><SPAN class=samp>0x98</SPAN></SAMP>' forms a command called a `<SAMP><SPAN class=samp>lopcode</SPAN></SAMP>', where the next byte distinguished between the thirteen lopcodes. The two remaining bytes, called the `<SAMP><SPAN class=samp>Y</SPAN></SAMP>' and `<SAMP><SPAN class=samp>Z</SPAN></SAMP>' fields, or the `<SAMP><SPAN class=samp>YZ</SPAN></SAMP>' field (a 16-bit big-endian number), are used for various purposes different for each lopcode. As documented in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www-cs-faculty.stanford.edu/~knuth/mmixal-intro.ps.gz">http://www-cs-faculty.stanford.edu/~knuth/mmixal-intro.ps.gz</A>, the lopcodes are:</P>
<DL style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<DT><CODE>lop_quote</CODE></DT>
<DD>0x98000001. The next word is contents, regardless of whether it starts with 0x98 or not.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>lop_loc</CODE></DT>
<DD>0x9801YYZZ, where `<SAMP><SPAN class=samp>Z</SPAN></SAMP>' is 1 or 2. This is a location directive, setting the location for the next data to the next 32-bit word (for Z = 1) or 64-bit word (for Z = 2), plus Y * 2^56. Normally `<SAMP><SPAN class=samp>Y</SPAN></SAMP>' is 0 for the text segment and 2 for the data segment.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>lop_skip</CODE></DT>
<DD>0x9802YYZZ. Increase the current location by `<SAMP><SPAN class=samp>YZ</SPAN></SAMP>' bytes.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>lop_fixo</CODE></DT>
<DD>0x9803YYZZ, where `<SAMP><SPAN class=samp>Z</SPAN></SAMP>' is 1 or 2. Store the current location as 64 bits into the location pointed to by the next 32-bit (Z = 1) or 64-bit (Z = 2) word, plus Y * 2^56.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>lop_fixr</CODE></DT>
<DD>0x9804YYZZ. `<SAMP><SPAN class=samp>YZ</SPAN></SAMP>' is stored into the current location plus 2 - 4 * YZ.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>lop_fixrx</CODE></DT>
<DD>0x980500ZZ. `<SAMP><SPAN class=samp>Z</SPAN></SAMP>' is 16 or 24. A value `<SAMP><SPAN class=samp>L</SPAN></SAMP>' derived from the following 32-bit word are used in a manner similar to `<SAMP><SPAN class=samp>YZ</SPAN></SAMP>' in lop_fixr: it is xor:ed into the current location minus 4 * L. The first byte of the word is 0 or 1. If it is 1, then L = (<VAR>lowest 24 bits of word</VAR>) - 2^Z, if 0, then L = (<VAR>lowest 24 bits of word</VAR>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>lop_file</CODE></DT>
<DD>0x9806YYZZ. `<SAMP><SPAN class=samp>Y</SPAN></SAMP>' is the file number, `<SAMP><SPAN class=samp>Z</SPAN></SAMP>' is count of 32-bit words. Set the file number to `<SAMP><SPAN class=samp>Y</SPAN></SAMP>' and the line counter to 0. The next Z * 4 bytes contain the file name, padded with zeros if the count is not a multiple of four. The same `<SAMP><SPAN class=samp>Y</SPAN></SAMP>' may occur multiple times, but `<SAMP><SPAN class=samp>Z</SPAN></SAMP>' must be 0 for all but the first occurrence.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>lop_line</CODE></DT>
<DD>0x9807YYZZ. `<SAMP><SPAN class=samp>YZ</SPAN></SAMP>' is the line number. Together with lop_file, it forms the source location for the next 32-bit word. Note that for each non-lopcode 32-bit word, line numbers are assumed incremented by one.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>lop_spec</CODE></DT>
<DD>0x9808YYZZ. `<SAMP><SPAN class=samp>YZ</SPAN></SAMP>' is the type number. Data until the next lopcode other than lop_quote forms special data of type `<SAMP><SPAN class=samp>YZ</SPAN></SAMP>'. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://sourceware.org/binutils/docs-2.23.1/bfd/mmo-section-mapping.html#mmo-section-mapping">mmo section mapping</A>.
<P>Other types than 80, (or type 80 with a content that does not parse) is stored in sections named<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.MMIX.spec_data.</CODE><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the `<SAMP><SPAN class=samp>YZ</SPAN></SAMP>'-type. The flags for such a sections say not to allocate or load the data. The vma is 0. Contents of multiple occurrences of special data<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is concatenated to the data of the previous lop_spec<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>s. The location in data or code at which the lop_spec occurred is lost.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>lop_pre</CODE></DT>
<DD>0x980901ZZ. The first lopcode in a file. The `<SAMP><SPAN class=samp>Z</SPAN></SAMP>' field forms the length of header information in 32-bit words, where the first word tells the time in seconds since `<SAMP><SPAN class=samp>00:00:00 GMT Jan 1 1970</SPAN></SAMP>'.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>lop_post</CODE></DT>
<DD>0x980a00ZZ. Z &gt; 32. This lopcode follows after all content-generating lopcodes in a program. The `<SAMP><SPAN class=samp>Z</SPAN></SAMP>' field denotes the value of `<SAMP><SPAN class=samp>rG</SPAN></SAMP>' at the beginning of the program. The following 256 - Z big-endian 64-bit words are loaded into global registers `<SAMP><SPAN class=samp>$G</SPAN></SAMP>'<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=dots>...</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>`<SAMP><SPAN class=samp>$255</SPAN></SAMP>'.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>lop_stab</CODE></DT>
<DD>0x980b0000. The next-to-last lopcode in a program. Must follow immediately after the lop_post lopcode and its data. After this lopcode follows all symbols in a compressed format (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://sourceware.org/binutils/docs-2.23.1/bfd/Symbol_002dtable.html#Symbol_002dtable">Symbol-table</A>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>lop_end</CODE></DT>
<DD>0x980cYYZZ. The last lopcode in a program. It must follow the lop_stab lopcode and its data. The `<SAMP><SPAN class=samp>YZ</SPAN></SAMP>' field contains the number of 32-bit words of symbol table information after the preceding lop_stab lopcode.</DD></DL>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Note that the lopcode "fixups";<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lop_fixr</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lop_fixrx</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lop_fixo</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are not generated by BFD, but are handled. They are generated by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mmixal</CODE>.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">This trivial one-label, one-instruction file:</P><PRE class=example style="FONT-WEIGHT: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">      :Main TRAP 1,2,3
</PRE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">can be represented this way in mmo:</P><PRE class=example style="FONT-WEIGHT: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">      0x98090101 - lop_pre, one 32-bit word with timestamp.
      &lt;timestamp&gt;
      0x98010002 - lop_loc, text segment, using a 64-bit address.
                   Note that mmixal does not emit this for the file above.
      0x00000000 - Address, high 32 bits.
      0x00000000 - Address, low 32 bits.
      0x98060002 - lop_file, 2 32-bit words for file-name.
      0x74657374 - "test"
      0x2e730000 - ".s\0\0"
      0x98070001 - lop_line, line 1.
      0x00010203 - TRAP 1,2,3
      0x980a00ff - lop_post, setting $255 to 0.
      0x00000000
      0x00000000
      0x980b0000 - lop_stab for ":Main" = 0, serial 1.
      0x203a4040   See <A href="https://sourceware.org/binutils/docs-2.23.1/bfd/Symbol_002dtable.html#Symbol_002dtable">Symbol-table</A>.
      0x10404020
      0x4d206120
      0x69016e00
      0x81000000
      0x980c0005 - lop_end; symbol table contained five 32-bit words.</PRE>