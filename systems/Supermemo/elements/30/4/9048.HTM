<H3 class=section style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">3.2 a.out backends</H3>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><STRONG>Description</STRONG><BR>BFD supports a number of different flavours of a.out format, though the major differences are only the sizes of the structures on disk, and the shape of the relocation information.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The support is split into a basic support file<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>aoutx.h</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and other files which derive functions from the base. One derivation file is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>aoutf1.h</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>(for a.out flavour 1), and adds to the basic a.out functions support for sun3, sun4, 386 and 29k a.out files, to create a target jump vector for a specific target.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">This information is further split out into more specific files for each machine, including<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>sunos.c</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>for sun3 and sun4,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>newsos3.c</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>for the Sony NEWS, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>demo64.c</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>for a demonstration of a 64 bit a.out format.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The base file<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>aoutx.h</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>defines general mechanisms for reading and writing records to and from disk and various other methods which BFD requires. It is included by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>aout32.c</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SAMP><SPAN class=file>aout64.c</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to form the names<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>aout_32_swap_exec_header_in</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>aout_64_swap_exec_header_in</CODE>, etc.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">As an example, this is what goes on to make the back end for a sun4, from<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>aout32.c</SPAN></SAMP>:</P><PRE class=example style="FONT-WEIGHT: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">            #define ARCH_SIZE 32
            #include "aoutx.h"
</PRE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Which exports names:</P><PRE class=example style="FONT-WEIGHT: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">            ...
            aout_32_canonicalize_reloc
            aout_32_find_nearest_line
            aout_32_get_lineno
            aout_32_get_reloc_upper_bound
            ...
</PRE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">from<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>sunos.c</SPAN></SAMP>:</P><PRE class=example style="FONT-WEIGHT: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">            #define TARGET_NAME "a.out-sunos-big"
            #define VECNAME    sunos_big_vec
            #include "aoutf1.h"
</PRE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">requires all the names from<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>aout32.c</SPAN></SAMP>, and produces the jump vector</P><PRE class=example style="FONT-WEIGHT: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">            sunos_big_vec
</PRE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The file<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>host-aout.c</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a special case. It is for a large set of hosts that use &#8220;more or less standard&#8221; a.out files, and for which cross-debugging is not interesting. It uses the standard 32-bit a.out support routines, but determines the file offsets and addresses of the text, data, and BSS sections, the machine architecture and machine type, and the entry point address, in a host-dependent manner. Once these values have been determined, generic code is used to handle the object file.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">When porting it to run on a new system, you must supply:</P><PRE class=example style="FONT-WEIGHT: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">             HOST_PAGE_SIZE
             HOST_SEGMENT_SIZE
             HOST_MACHINE_ARCH       (optional)
             HOST_MACHINE_MACHINE    (optional)
             HOST_TEXT_START_ADDR
             HOST_STACK_END_ADDR
</PRE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">in the file<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>../include/sys/h-</SPAN><VAR>XXX</VAR><SPAN class=file>.h</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>(for your host). These values, plus the structures and macros defined in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>a.out.h</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>on your host system, will produce a BFD target that will access ordinary a.out files on your host. To configure a new machine to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>host-aout.c</SPAN></SAMP>, specify:</P><PRE class=example style="FONT-WEIGHT: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">            TDEFAULTS = -DDEFAULT_VECTOR=host_aout_big_vec
            TDEPFILES= host-aout.o trad-core.o
</PRE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>config/</SPAN><VAR>XXX</VAR><SPAN class=file>.mt</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>file, and modify<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>configure.in</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><VAR>XXX</VAR><SPAN class=file>.mt</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>file (by setting "<CODE>bfd_target=XXX</CODE>") when your configuration is selected.