<H5 class=subsubsection style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">2.18.4.2 Write the derived creation routine</H5>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">You must write a routine which will create and initialize an entry in the hash table. This routine is passed as the function argument to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bfd_hash_table_init</CODE>.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">In order to permit other hash tables to be derived from the hash table you are creating, this routine must be written in a standard way.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The first argument to the creation routine is a pointer to a hash table entry. This may be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE>, in which case the routine should allocate the right amount of space. Otherwise the space has already been allocated by a hash table type derived from this one.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">After allocating space, the creation routine must call the creation routine of the hash table type it is derived from, passing in a pointer to the space it just allocated. This will initialize any fields used by the base hash table.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Finally the creation routine must initialize any local fields for the new hash table type.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Here is a boilerplate example of a creation routine.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>function_name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the name of the routine.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>entry_type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the type of an entry in the hash table you are creating.<VAR>base_newfunc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the name of the creation routine of the hash table type your hash table is derived from.</P><PRE class=example style="FONT-WEIGHT: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">     struct bfd_hash_entry *
     <VAR>function_name</VAR> (struct bfd_hash_entry *entry,
                          struct bfd_hash_table *table,
                          const char *string)
     {
       struct <VAR>entry_type</VAR> *ret = (<VAR>entry_type</VAR> *) entry;
     
      /* Allocate the structure if it has not already been allocated by a
         derived class.  */
       if (ret == NULL)
         {
           ret = bfd_hash_allocate (table, sizeof (* ret));
           if (ret == NULL)
             return NULL;
         }
     
      /* Call the allocation method of the base class.  */
       ret = ((<VAR>entry_type</VAR> *)
             <VAR>base_newfunc</VAR> ((struct bfd_hash_entry *) ret, table, string));
     
      /* Initialize the local fields here.  */
     
       return (struct bfd_hash_entry *) ret;
     }
</PRE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><STRONG>Description</STRONG><BR>The creation routine for the linker hash table, which is in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>linker.c</CODE>, looks just like this example.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>function_name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_bfd_link_hash_newfunc</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>entry_type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct bfd_link_hash_entry</CODE>.<VAR>base_newfunc</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bfd_hash_newfunc</CODE>, the creation routine for a basic hash table.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><CODE>_bfd_link_hash_newfunc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>also initializes the local fields in a linker hash table entry:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>written</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>next</CODE>.