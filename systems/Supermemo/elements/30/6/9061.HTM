<H5 class=subsubsection style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">3.3.2.1 File layout</H5>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The Coff backend is split into generic routines that are applicable to any Coff target and routines that are specific to a particular target. The target-specific routines are further split into ones which are basically the same for all Coff targets except that they use the external symbol format or use different values for certain constants.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The generic routines are in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>coffgen.c</SPAN></SAMP>. These routines work for any Coff target. They use some hooks into the target specific code; the hooks are in a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bfd_coff_backend_data</CODE>structure, one of which exists for each target.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The essentially similar target-specific routines are in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>coffcode.h</SPAN></SAMP>. This header file includes executable C code. The various Coff targets first include the appropriate Coff header file, make any special defines that are needed, and then include<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>coffcode.h</SPAN></SAMP>.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Some of the Coff targets then also have additional routines in the target source file itself.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">For example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>coff-i960.c</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>includes<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>coff/internal.h</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>coff/i960.h</SPAN></SAMP>. It then defines a few constants, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>I960</CODE>, and includes<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>coffcode.h</SPAN></SAMP>. Since the i960 has complex relocation types,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>coff-i960.c</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>also includes some code to manipulate the i960 relocs. This code is not in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>coffcode.h</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>because it would not be used by any other target.