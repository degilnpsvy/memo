<H5 class=subsubsection style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">3.3.2.2 Coff long section names</H5>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">In the standard Coff object format, section names are limited to the eight bytes available in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>s_name</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>field of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SCNHDR</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>section header structure. The format requires the field to be NUL-padded, but not necessarily NUL-terminated, so the longest section names permitted are a full eight characters.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The Microsoft PE variants of the Coff object file format add an extension to support the use of long section names. This extension is defined in section 4 of the Microsoft PE/COFF specification (rev 8.1). If a section name is too long to fit into the section header's<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>s_name</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>field, it is instead placed into the string table, and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>s_name</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>field is filled with a slash ("/") followed by the ASCII decimal representation of the offset of the full name relative to the string table base.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Note that this implies that the extension can only be used in object files, as executables do not contain a string table. The standard specifies that long section names from objects emitted into executable images are to be truncated.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">However, as a GNU extension, BFD can generate executable images that contain a string table and long section names. This would appear to be technically valid, as the standard only says that Coff debugging information is deprecated, not forbidden, and in practice it works, although some tools that parse PE files expecting the MS standard format may become confused;<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>PEview</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is one known example.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The functionality is supported in BFD by code implemented under the control of the macro<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>COFF_LONG_SECTION_NAMES</CODE>. If not defined, the format does not support long section names in any way. If defined, it is used to initialise a flag,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_bfd_coff_long_section_names</CODE>, and a hook function pointer,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_bfd_coff_set_long_section_names</CODE>, in the Coff backend data structure. The flag controls the generation of long section names in output BFDs at runtime; if it is false, as it will be by default when generating an executable image, long section names are truncated; if true, the long section names extension is employed. The hook points to a function that allows the value of the flag to be altered at runtime, on formats that support long section names at all; on other formats it points to a stub that returns an error indication. With input BFDs, the flag is set according to whether any long section names are detected while reading the section headers. For a completely new BFD, the flag is set to the default for the target format. This information can be used by a client of the BFD library when deciding what output format to generate, and means that a BFD that is opened for read and subsequently converted to a writeable BFD and modified in-place will retain whatever format it had on input.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>COFF_LONG_SECTION_NAMES</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is simply defined (blank), or is defined to the value "1", then long section names are enabled by default; if it is defined to the value zero, they are disabled by default (but still accepted in input BFDs). The header<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>coffcode.h</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>defines a macro,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>COFF_DEFAULT_LONG_SECTION_NAMES</CODE>, which is used in the backends to initialise the backend data structure fields appropriately; see the comments for further detail.