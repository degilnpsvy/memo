<H5 class=subsubsection style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">3.3.2.5 Symbol writing</H5>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Writing a symbol to a coff file which didn't come from a coff file will lose any debugging information. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asymbol</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>structure remembers the BFD from which the symbol was taken, and on output the back end makes sure that the same destination target as source target is present.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">When the symbols have come from a coff file then all the debugging information is preserved.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Symbol tables are provided for writing to the back end in a vector of pointers to pointers. This allows applications like the linker to accumulate and output large symbol tables without having to do too much byte copying.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">This function runs through the provided symbol table and patches each symbol marked as a file place holder (<CODE>C_FILE</CODE>) to point to the next file place holder in the list. It also marks each<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>offset</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>field in the list with the offset from the first symbol of the current symbol.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Another function of this procedure is to turn the canonical value form of BFD into the form used by coff. Internally, BFD expects symbol values to be offsets from a section base; so a symbol physically at 0x120, but in a section starting at 0x100, would have the value 0x20. Coff expects symbols to contain their final value, so symbols have their values changed at this point to reflect their sum with their owning section. This transformation uses the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>output_section</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>field of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asymbol</CODE>'s<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asection</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://sourceware.org/binutils/docs-2.23.1/bfd/Sections.html#Sections">Sections</A>.</P>
<UL style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<LI><CODE>coff_mangle_symbols</CODE></LI></UL><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">This routine runs though the provided symbol table and uses the offsets generated by the previous pass and the pointers generated when the symbol table was read in to create the structured hierarchy required by coff. It changes each pointer to a symbol into the index into the symbol table of the asymbol.</SPAN>
<UL style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<LI><CODE>coff_write_symbols</CODE></LI></UL><SPAN style="DISPLAY: inline! important; FLOAT: none; WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">This routine runs through the symbol table and patches up the symbols from their internal form into the coff way, calls the bit twiddlers, and writes out the table to the file.</SPAN>