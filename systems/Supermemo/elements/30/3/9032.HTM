<H5 class=subsubsection style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">2.17.3.3 Writing the symbol table</H5>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_bfd_final_link</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function must gather all the symbols in the input files and write them out. It must also write out all the symbols in the global hash table. This must be controlled by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strip</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>discard</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>fields of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bfd_link_info</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>structure.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The local symbols of the input files will not have been entered into the linker hash table. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_bfd_final_link</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>routine must consider each input file and include the symbols in the output file. It may be convenient to do this when looking through the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>link_order</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>structures, or it may be done by stepping through the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>input_bfds</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>list.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_bfd_final_link</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>routine must also traverse the global hash table to gather all the externally visible symbols. It is possible that most of the externally visible symbols may be written out when considering the symbols of each input file, but it is still necessary to traverse the hash table since the linker script may have defined some symbols that are not in any of the input files.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strip</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>field of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bfd_link_info</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>structure controls which symbols are written out. The possible values are listed in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bfdlink.h</CODE>. If the value is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strip_some</CODE>, then the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>keep_hash</CODE>field of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bfd_link_info</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>structure is a hash table of symbols to keep; each symbol should be looked up in this hash table, and only symbols which are present should be included in the output file.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">If the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strip</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>field of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bfd_link_info</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>structure permits local symbols to be written out, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>discard</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>field is used to further controls which local symbols are included in the output file. If the value is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>discard_l</CODE>, then all local symbols which begin with a certain prefix are discarded; this is controlled by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bfd_is_local_label_name</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>entry point.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The a.out backend handles symbols by calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>aout_link_write_symbols</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on each input BFD and then traversing the global hash table with the function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>aout_link_write_other_symbol</CODE>. It builds a string table while writing out the symbols, which is written to the output file at the end of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NAME(aout,final_link)</CODE>.