<H4 class=subsection style="FONT-SIZE: medium; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">2.17.1 Creating a linker hash table</H4>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A name=index-g_t_005fbfd_005flink_005fhash_005ftable_005fcreate-in-target-vector-1910></A><A name=index-target-vector-_0028_005fbfd_005flink_005fhash_005ftable_005fcreate_0029-1911></A>The linker routines must create a hash table, which must be derived from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct bfd_link_hash_table</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>described in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bfdlink.c</CODE>. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://sourceware.org/binutils/docs-2.23.1/bfd/Hash-Tables.html#Hash-Tables">Hash Tables</A>, for information on how to create a derived hash table. This entry point is called using the target vector of the linker output file.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_bfd_link_hash_table_create</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>entry point must allocate and initialize an instance of the desired hash table. If the back end does not require any additional information to be stored with the entries in the hash table, the entry point may simply create a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct bfd_link_hash_table</CODE>. Most likely, however, some additional information will be needed.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">For example, with each entry in the hash table the a.out linker keeps the index the symbol has in the final output file (this index number is used so that when doing a relocatable link the symbol index used in the output file can be quickly filled in when copying over a reloc). The a.out linker code defines the required structures and functions for a hash table derived from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct bfd_link_hash_table</CODE>. The a.out linker hash table is created by the function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NAME(aout,link_hash_table_create)</CODE>; it simply allocates space for the hash table, initializes it, and returns a pointer to it.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">When writing the linker routines for a new back end, you will generally not know exactly which fields will be required until you have finished. You should simply create a new hash table which defines no additional fields, and then simply add fields as they become necessary.