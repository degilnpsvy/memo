<H5 class=subsubsection style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">2.17.2.1 Differing file formats</H5>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Normally all the files involved in a link will be of the same format, but it is also possible to link together different format object files, and the back end must support that. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_bfd_link_add_symbols</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>entry point is called via the target vector of the file to be added. This has an important consequence: the function may not assume that the hash table is the type created by the corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_bfd_link_hash_table_create</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>vector. All the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_bfd_link_add_symbols</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function can assume about the hash table is that it is derived from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct bfd_link_hash_table</CODE>.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Sometimes the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_bfd_link_add_symbols</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function must store some information in the hash table entry to be used by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_bfd_final_link</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function. In such a case the output bfd xvec must be checked to make sure that the hash table was created by an object file of the same format.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_bfd_final_link</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>routine must be prepared to handle a hash entry without any extra information added by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_bfd_link_add_symbols</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function. A hash entry without extra information will also occur when the linker script directs the linker to create a symbol. Note that, regardless of how a hash table entry is added, all the fields will be initialized to some sort of null value by the hash table entry initialization function.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">See<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ecoff_link_add_externals</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for an example of how to check the output bfd before saving information (in this case, the ECOFF external symbol debugging information) in a hash table entry.