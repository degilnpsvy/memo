<H3 class=section style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">2.17 Linker Functions</H3>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A name=index-Linker-1909></A>The linker uses three special entry points in the BFD target vector. It is not necessary to write special routines for these entry points when creating a new BFD back end, since generic versions are provided. However, writing them can speed up linking and make it use significantly less runtime memory.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The first routine creates a hash table used by the other routines. The second routine adds the symbols from an object file to the hash table. The third routine takes all the object files and links them together to create the output file. These routines are designed so that the linker proper does not need to know anything about the symbols in the object files that it is linking. The linker merely arranges the sections as directed by the linker script and lets BFD handle the details of symbols and relocs.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The second routine and third routines are passed a pointer to a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct bfd_link_info</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>structure (defined in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bfdlink.h</CODE>) which holds information relevant to the link, including the linker hash table (which was created by the first routine) and a set of callback functions to the linker proper.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The generic linker routines are in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>linker.c</CODE>, and use the header file<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>genlink.h</CODE>. As of this writing, the only back ends which have implemented versions of these routines are a.out (in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>aoutx.h</CODE>) and ECOFF (in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ecoff.c</CODE>). The a.out routines are used as examples throughout this section.</P>
<UL class=menu style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<LI><A accessKey=1 href="https://sourceware.org/binutils/docs-2.23.1/bfd/Creating-a-Linker-Hash-Table.html#Creating-a-Linker-Hash-Table">Creating a Linker Hash Table</A></LI>
<LI><A accessKey=2 href="https://sourceware.org/binutils/docs-2.23.1/bfd/Adding-Symbols-to-the-Hash-Table.html#Adding-Symbols-to-the-Hash-Table">Adding Symbols to the Hash Table</A></LI>
<LI><A accessKey=3 href="https://sourceware.org/binutils/docs-2.23.1/bfd/Performing-the-Final-Link.html#Performing-the-Final-Link">Performing the Final Link</A></LI></UL>