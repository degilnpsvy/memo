<H3 style="MARGIN: 13pt 0cm"><SPAN lang=EN-US style="FONT-SIZE: 22pt; LINE-HEIGHT: 173%; mso-bidi-font-size: 16.0pt">Process creation and program execution</SPAN></H3>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 12.0pt">A process can create a new process using the fork() system call. The process that calls fork() is referred to as the parent process, and the new process is referred to as the child process. The kernel creates the child process by making a duplicate of the parent process. The child inherits copies of the parent&#8217;s data, stack, and heap segments, which it may then modify independently of the parent&#8217;s copies. (The program text, which is placed in memory marked as read-only, is shared by the two processes.)</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 12.0pt">The child process goes on either to execute a different set of functions in the same code as the parent, or, frequently, to use the execve() system call to load and execute an entirely new program. An execve() call destroys the existing text, data, stack, and heap segments, replacing them with new segments based on the code of the new program.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 12.0pt">Several related C library functions are layered on top of execve(), each providing a slightly different interface to the same functionality. All of these functions have names starting with the string exec, and where the differences don&#8217;t matter, we&#8217;ll use the notation exec()to refer generally to these functions. Be aware, however, that there is no actual function with the name exec().</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 12.0pt">Commonly, we&#8217;ll use the verb to exec to describe the operation performed execve() and the library functions layered on top of it.</SPAN>