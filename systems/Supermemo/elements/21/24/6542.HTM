Editors and build environments often leave temporary or transient files among your source code. Such files usually shouldn&#8217;t be tracked as source files in a repository. To have Git ignore a file within a directory, simply add that file&#8217;s name to the special file .gitignore:</P>
<P># Manually create an example junk file </P>
<P>$ touch main.o </P>
<P>$ git status </P>
<P># On branch master </P>
<P># </P>
<P># Initial commit </P>
<P># </P>
<P># Untracked files: </P>
<P># (use "git add <FILE>..." to include in what will be committed) </P>
<P># </P>
<P># data</P>
<P># main.o </P>
<P>$ echo main.o &gt; .gitignore </P>
<P>$ git status </P>
<P># On branch master </P>
<P># </P>
<P># Initial commit </P>
<P># </P>
<P># Untracked files: </P>
<P># (use "git add <FILE>..." to include in what will be committed) </P>
<P># </P>
<P># .gitignore</P>
<P># data</P>
<P>Thus main.o is ignored, but git status now shows a new, untracked file called .gitignore. Although the .gitignore file has special meaning to Git, it is managed just like any other normal file within your repository. Until .gitignore is added, Git considers it untracked.