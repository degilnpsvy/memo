To continue the example, let&#8217;s change the file data so it&#8217;s different from the one in the index and use the arcane git hash-object file command (which you&#8217;ll hardly ever invoke directly) to directly compute and print the SHA1 hash for the new version. 
<P></P>
<P><FONT class=extract>$ git ls-files --stage </FONT></P>
<P><FONT class=extract>100644 0487f44090ad950f61955271cf0a2d6c6a83ad9a 0 .gitignore </FONT></P>
<P><FONT class=extract>100644 534469f67ae5ce72a7a274faf30dee3c2ea1746d 0 data</FONT></P>
<P># edit "data" to contain... </P>
<P>$ cat data</P>
<P>New data </P>
<P>And some more data now</P>
<P><FONT class=extract>$ git hash-object data </FONT></P>
<P><FONT class=extract>e476983f39f6e4f453f0fe4a859410f63b58b500 </FONT></P>
<P>After the file is amended, the previous version of the file in the object store and index has SHA1 534469f67ae5ce72a7a274faf30dee3c2ea1746d. However, the updated version of the file has SHA1 e476983f39f6e4f453f0fe4a859410f63b58b500. Let&#8217;s update the index to contain the new version of the file: </P>
<P>$ git add data</P>
<P>$ git ls-files --stage </P>
<P>100644 0487f44090ad950f61955271cf0a2d6c6a83ad9a 0 .gitignore </P>
<P>100644 e476983f39f6e4f453f0fe4a859410f63b58b500 0 data </P>
<P>The index now has the updated version of the file. Again, &#8220;the file data has been staged,&#8221; or speaking loosely, &#8220;the file data is in the index.&#8221; The latter phrase is less accurate because the file is actually in the object store and the index merely refers to it. The seemingly idle play with SHA1 hashes and the index brings home a key point: Think of git add not as &#8220;add this file,&#8221; but more as &#8220;add this content.&#8221;