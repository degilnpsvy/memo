<HEAD></HEAD>
<BODY>
<P>Object Store Pictures </P>
<P>Let&#8217;s look at how Git&#8217;s objects fit and work together to form the complete system. The blob object is at the &#8220;bottom&#8221; of the data structure; it references nothing and is referenced only by tree objects. In the figures that follow, each blob is represented by a rectangle. </P>
<P>Tree objects point to blobs and possibly to other trees as well. Any given tree object might be pointed at by many different commit objects. Each tree is represented by a triangle. </P>
<P>Figure 4-1. Git objects </P>
<P>A circle represents a commit. A commit points to one particular tree that is introduced into the repository by the commit.</P>
<P>Each tag is represented by a parallelogram. Each tag can point to, at most, one commit.</P>
<P>The branch is not a fundamental Git object, yet it plays a crucial role in naming commits. Each branch is pictured as a rounded rectangle. </P>
<P>Figure 4-1 captures how all the pieces fit together. This diagram shows the state of a repository after a single, initial commit added two files. Both files are in the top-level directory. Both the master branch and a tag named V1.0 point to the commit with ID 1492. </P>
<P>Now, let&#8217;s make things a bit more complicated. Let&#8217;s leave the original two files as is, adding a new subdirectory with one file in it. The resulting object store looks like Figure 4-2.</P>
<P>As in the previous picture, the new commit has added one associated tree object to represent the total state of directory and file structure. In this case, it is the tree object with ID cafed00d.</P>
<P>Because the top-level directory is changed by the addition of the new subdirectory, the content of the top-level tree object has changed as well, so Git introduces a new tree, cafed00d. </P>
<P>Figure 4-2. Git objects after a second commit </P>
<P>However, the blobs dead23 and feeb1e didn&#8217;t change from the first commit to the second. Git realizes that the IDs haven&#8217;t changed and thus can be directly referenced and shared by the new cafed00d tree. </P>
<P>Pay attention to the direction of the arrows between commits. The parent commit or commits come earlier in time. Therefore, in Git&#8217;s implementation, each commit points back to its parent or parents. Many people get confused because the state of a repository is conventionally portrayed in the opposite direction: as a dataflow from the parent commit to child commits.</P>
<P>In Chapter 6, we extend these pictures to show how the history of a repository is built up and manipulated by various commands.</P></BODY>