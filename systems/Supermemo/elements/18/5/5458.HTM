Files and Trees 
<P></P>
<P>Now that the &#8220;hello world&#8221; blob is safely ensconced in the object store, what happened to its filename? Git wouldn&#8217;t be very useful if it couldn&#8217;t find files by name. </P>
<P>As mentioned before, Git tracks the pathnames of files through another kind of object called a tree. When you use git add, Git creates an object for the contents of each file you add, but it doesn&#8217;t create an object for your tree right away. Instead, it updates the index. The index is found in .git/index and keeps track of file pathnames and corresponding blobs. Each time you run commands such as git add, git rm, or git mv, Git updates the index with the new pathname and blob information.</P>
<P><FONT class=extract>Whenever you want, you can create a tree object from your current index by capturing a snapshot of its current information with the low-level git write-tree command. At the moment, the index contains exactly one file, hello.txt. </FONT></P>
<P><FONT class=extract>$ git ls-files -s</FONT></P>
<P><FONT class=extract>100644 3b18e512dba79e4c8300dd08aeb37f8e728b8dad 0 hello.txt </FONT></P>
<P><FONT class=extract>Here you can see the association of the file, hello.txt, and the 3b18e5...blob.</FONT></P>
<P><FONT class=extract>Next, let&#8217;s capture the index state and save it to a tree object: </FONT></P>
<P><FONT class=extract>$ git write-tree</FONT></P>
<P><FONT class=extract>68aba62e560c0ebc3396e8ae9335232cd93a3f60</FONT></P>
<P><FONT class=extract>$ find .git/objects</FONT></P>
<P><FONT class=extract>.git/objects </FONT></P>
<P><FONT class=extract>.git/objects/68 </FONT></P>
<P><FONT class=extract>.git/objects/68/aba62e560c0ebc3396e8ae9335232cd93a3f60 </FONT></P>
<P><FONT class=extract>.git/objects/pack </FONT></P>
<P><FONT class=extract>.git/objects/3b </FONT></P>
<P><FONT class=extract>.git/objects/3b/18e512dba79e4c8300dd08aeb37f8e728b8dad </FONT></P>
<P><FONT class=extract>.git/objects/info</FONT></P>
<P><FONT class=extract>Now there are two objects: the &#8220;hello world&#8221; object at 3b18e5 and a new one, the tree object, at 68aba6. As you can see, the SHA1 object name corresponds exactly to the subdirectory and filename in .git/objects.</FONT></P>
<P><FONT class=extract>But what does a tree look like? Because it&#8217;s an object, just like the blob, you can use the same low-level command to view it. </FONT></P>
<P><FONT class=extract>$ git cat-file -p 68aba6 </FONT></P>
<P><FONT class=extract>100644 blob 3b18e512dba79e4c8300dd08aeb37f8e728b8dad hello.txt </FONT></P>
<P><FONT class=extract>The contents of the object should be easy to interpret. The first number, 100644, represents the file attributes of the object in octal, which should be familiar to anyone who has used the Unix chmod command. Here, 3b18e5 is the object name of the hello world blob, and hello.txt is the name associated with that blob.</FONT></P>
<P><FONT class=extract>It is now easy to see that the tree object has captured the information that was in the index when you ran git ls-files -s.</FONT>