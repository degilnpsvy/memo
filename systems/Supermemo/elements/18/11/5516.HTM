<HEAD></HEAD>
<BODY>
<P>In this case, topic..master, contains only the commits W, X, Y, and Z. Remember, the range will exclude all commits that are reachable (going back or left over the graph) from topic (i.e., the commits D, C, B, A, and earlier), as well as V, U, and earlier from the other parent of B. The result is just W through Z. </P>
<P>There are two other range permutations. If you leave either the start or end commits out of range, HEAD is assumed. Thus, ..end is equivalent to HEAD..end and start.. is equivalent to start..HEAD. </P>
<P>Finally, just as start..end can be thought of as representing a set subtraction operation, the notation A...B (using three periods) represents the symmetric difference between A and B, or the set of commits that are reachable from either A or B but not from both. Because of the function&#8217;s symmetry, neither commit can really be considered a start or end. In this sense A and B are equal. </P>
<P>More formally, the set of revisions in the symmetric difference between A and B, A...B, is givenby </P>
<P>$ git rev-list A B --not $(git merge-base --all A B) </P>
<P>Let&#8217;s look at the example in Figure 6-14. </P>
<P>We can compute each piece of the symmetric difference definition: master...dev = (master OR dev) AND NOT (merge-base --all master dev) The commits that contribute to master are (I, H, . . . , B, A, W, V, U). The commits that contribute to dev are (Z, Y, . . . , U, C, B, A). </P>
<P>The union of those two sets is (A, . . . , I, U, . . . , Z). The merge base between master and dev is commit W. In more complex cases, there might be multiple merge bases, but here we have only one. The commits that contribute to W are (W, V, U, C, B, and A); those are also the commits that are common to both master and dev, so they need to be removed to form the symmetric difference: (I, H, Z, Y, X, G, F, E, D). </P>
<P>It may be helpful to think of the symmetric difference between two branches, A and B, as &#8220;show everything in branch A or in branch B, but only back to the point where the two branches diverged.&#8221; </P>
<P>Now that we&#8217;ve described what commit ranges are, how to write them, and how they work, it&#8217;s important to reveal that Git doesn&#8217;t actually support a true range operator. It is purely a notational convenience that A..B represents the underlying ^A B form. Git actually allows much more powerful commit set manipulation on its command line. Commands that accept a range are actually accepting an arbitrary sequence of included and excluded commits. For example, you could use: </P>
<P>$ git log ^dev ^topic ^bugfix master </P>
<P>to select those commits in master but not in either of the dev, topic, or bugfix branches. All of these example may be a bit abstract, but the power of the range representation really comes to fruition when you consider that any branch name can be used as part of the range. As described in &#8220;Tracking Branches&#8221; on page 199 of Chapter 12, if one of your branches represents the commits from another repository, then you can quickly discover the set of commits that are in your repository that are not in another repository!<SPAN lang=EN-US style="FONT-SIZE: 10pt; FONT-FAMILY: Birka; COLOR: black; mso-bidi-font-family: Birka; mso-font-kerning: 0pt"></P>
<P></SPAN>&nbsp;</P></BODY>