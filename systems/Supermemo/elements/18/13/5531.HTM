Viewing Branches 
<P></P>
<P><FONT class=extract>The git show-branch command provides more detailed output than git branch, listing the commits that contribute to one or more branches in roughly reverse chronological order.</FONT> <FONT class=extract>As with git branch, no options list the topic branches, -r shows remote tracking branches, and -a shows all branches. </FONT></P>
<P>Let&#8217;s look at an example. </P>
<P>$ git show-branch</P>
<P>! [bug/pr-1] Fix Problem Report 1 </P>
<P>&nbsp;* [dev] Improve the new development </P>
<P>&nbsp; ! [master] Added Bob'sfixes.</P>
<P>--- </P>
<P>&nbsp;* [dev] Improve the new development </P>
<P>&nbsp;* [dev^] Start some new development. </P>
<P>+ [bug/pr-1] Fix Problem Report 1 </P>
<P>+*+ [master] Added Bob's fixes.</P>
<P>The git show-branch output is broken down into two sections separated by a line of dashes. The section above the separator lists the names of branches enclosed in square brackets, one per line. <FONT class=extract>Each branch name is associated with a single column of output, identified by either an exclamation mark or&#8212;if it is also the current branch&#8212;an asterisk.</FONT> In the example just shown, commits within the branch bug/pr-1 start in the first column, commits within the current branch dev start in the second column, and commits in the third branch master start in the third column. For quick reference, each branch in the upper section is also listed with the first line of the log message from the most recent commit on that branch.</P>
<P>The lower section of output is a matrix stating which commits are present in each branch. Again, each commit is listed with the first log message line from that commit. <FONT class=extract>A commit is present in a branch if there a plus (+), an asterisk (*), or a minus (-) in that branch&#8217;s column. The plus sign indicates the commit is in a branch; the asterisk just highlights the commit as being present on the active branch. The minus sign denotes a merge commit.</FONT></P>
<P>For example, both of the following commits are identified by asterisks and are present in the dev branch:</P>
<P>* [dev] Improve the new development </P>
<P>* [dev^] Start some new development.</P>
<P>These two commits are not present in any other branch. They are listed in reverse chronological order: The most recent commit is at the top and the oldest commit at the bottom.</P>
<P>Enclosed within square brackets on each commit line, Git also shows you a name for that commit. As already mentioned, Git assigns the branch name to the most recent commit. Previous commits have the same name with trailing caret (^) characters. In Chapter 6, you saw master as the name for the most recent commit and master^ as the name for the penultimate commit. Similarly, dev and dev^ are the two most recent commits on the branch dev.</P>
<P>Although the commits within a branch are ordered, branches themselves are listed in an arbitrary order. This is because all branches have equal status; there is no rule stating that one branch is more important than another.</P>
<P>If the same commit is present in multiple branches, then it will have a plus sign or an asterisk indicator for each branch. Thus, the last commit shown in the previous output is present in all three branches:</P>
<P>+*+ [master] Added Bob's fixes. </P>
<P>The first plus sign means that the commit is in bug/pr-1, the asterisk means the same commit is in the active branch dev, and the final plus sign means the commit is also in the master branch.</P>
<P>When invoked, git show-branch traverses through all the commits on all branches being shown, stopping the listing on the most recent common commit present on all of them. In this case, Git listed four commits before it found one common to all three branches (Added Bob's fixes.), at which point it stopped.</P>
<P><FONT class=extract>Stopping at the first common commit is the default heuristic for reasonable behavior. It is presumed that reaching such a common point yields sufficient context to understand how the branches relate to each other. If for some reason you actually want more commit history, use the --more=num option, specifying the number of additional commits you want to see going back in time along the common branch.</FONT></P>
<P><FONT class=extract>The git show-branch command accepts a set of branch names as parameters, allowing you to limit the history shown to those branches.</FONT> For example, if new branch named bug/pr-2 is added starting at the master commit, it would look like this:</P>
<P>$ git branch bug/pr-2 master </P>
<P>$ git show-branch </P>
<P>! [bug/pr-1] Fix Problem Report 1 </P>
<P>&nbsp;! [bug/pr-2] Added Bob's fixes. </P>
<P>&nbsp; * [dev] Improve the new development </P>
<P>&nbsp;&nbsp; ! [master] Added Bob's fixes. </P>
<P>---- </P>
<P>&nbsp; * [dev] Improve the new development </P>
<P>&nbsp; * [dev^] Start some new development. </P>
<P>+ [bug/pr-1] Fix Problem Report 1 </P>
<P>++*+ [bug/pr-2] Added Bob's fixes.</P>
<P>If you wanted to see the commit history for just the bug/pr-1 and bug/pr-2 branches, you could use </P>
<P>$ git show-branch bug/pr-1 bug/pr-2</P>
<P>Although that might be fine for a few branches, if there were many such branches, then naming them all would be quite tedious. Fortunately, Git allows wildcard matching of branch names as well. The same results can be achieved using the simpler bug/* branch wildcard name:</P>
<P>$ git show-branch bug/pr-1 bug/pr-2 </P>
<P>! [bug/pr-1] Fix Problem Report 1 </P>
<P>&nbsp;! [bug/pr-2] Added Bob's fixes. </P>
<P>-- </P>
<P>+ [bug/pr-1] Fix Problem Report 1 </P>
<P>++ [bug/pr-2] Added Bob's fixes. </P>
<P>$ git show-branch bug/* </P>
<P>! [bug/pr-1] Fix Problem Report 1 </P>
<P>&nbsp;! [bug/pr-2] Added Bob's fixes. </P>
<P>-- </P>
<P>+ [bug/pr-1] Fix Problem Report 1 </P>
<P>++ [bug/pr-2] Added Bob's fixes.