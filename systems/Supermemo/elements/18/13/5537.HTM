Detached HEAD Branches 
<P></P>
<P>Normally, it&#8217;s advisable to check out only the tip of a branch by naming the branch directly. Thus, by default, git checkout changes to the tip of a desired branch. </P>
<P>However, you can check out any commit. In such an instance, Git creates a sort of anonymous branch for you called a detached HEAD. <FONT class=extract>Git creates a detached HEAD when you: </FONT></P>
<P><FONT class=extract>? Check out a commit that is not the head of a branch. </FONT></P>
<P><FONT class=extract>? Check out a tracking branch. You might do this to explore changes recently brought into your repository from a remote repository. </FONT></P>
<P><FONT class=extract>? Check out the commit referenced by a tag. You might do this to put together a release based on tagged versions of files. </FONT></P>
<P><FONT class=extract>? Start a git bisect operation, described in &#8220;Using git bisect&#8221; on page 83 of Chapter 6. </FONT></P>
<P><FONT class=extract>? Use the git submodule update command.</FONT></P>
<P>In these cases, Git tells you that you have moved to a detached HEAD: </P>
<P># I have a copy of the Git sources handy! </P>
<P>$ cd git.git </P>
<P>$ git checkout v1.6.0</P>
<P>Note: moving to "v1.6.0" which isn't a local branch</P>
<P>If you want to create a new branch from this checkout, you may do so (now or later) by using -b with the checkout command again. Example: </P>
<P>git checkout -b &lt;new_branch_name&gt;</P>
<P>HEAD is now at ea02eef... GIT 1.6.0</P>
<P>If, after finding yourself on a detached HEAD, you later decide that you need to make new commits at that point and keep them, you must first create a new branch: </P>
<P>$ git checkout -b new_branch</P>
<P>This will give you a new, proper branch based on the commit where the detached HEAD was. You can then continue with normal development. Essentially, you named the branch that was previously anonymous.</P>
<P>To find out if you are on a detached HEAD, just ask: </P>
<P>$ git branch </P>
<P>* (no branch)</P>
<P>master</P>
<P>On the other hand, if you are finished with the detached HEAD and want to simply abandon that state, you can convert to a named branch by simply entering git checkout branch.</P>
<P>$ git checkout master </P>
<P>Previous HEAD position was ea02eef... GIT 1.6.0 </P>
<P>Checking out files: 100% (608/608), done. </P>
<P>Switched to branch "master"</P>
<P>$ git branch </P>
<P>* master