Recall that time flows left to right, so M~14 is the oldest commit shown, M~9 is the most recent commit shown, and A is the 11th prior commit. 
<P></P>
<P><FONT class=extract>The range M~12..M~10 represents two commits, the 11th and 10th oldest commits</FONT>, which are labeled A and B. The range does not include M~12. Why? It&#8217;s a matter of definition. A commit range, start..end, is defined as the set of commits reachable from end that are not reachable from start. In other words, &#8220;the commit end is included&#8221; whereas &#8220;the commit start is excluded.&#8221; Usually this is simplified to just the phrase &#8220;in end but not start.&#8221; </P>
<P><FONT class=extract>When you specify a commit Y, to git log, you are actually requesting Git to show the log for all commits that are reachable from Y.</FONT> <FONT class=extract>You can exclude a specific commit X and all commits reachable from X with the expression ^X. </FONT></P>
<P><FONT class=extract>Combining the two forms, git log ^X Y is the same as git log X..Y and might be paraphrased as &#8220;give me all commits that are reachable from Y and don&#8217;t give me any commit leading up to and including X.&#8221;</FONT> </P>
<P><FONT class=extract>The commit range X..Y is mathematically equivalent to ^X Y. You can also think of it as a set subtraction: Use everything leading up to Y minus everything leading up to and including X.</FONT> </P>
<P>Returning to the commit series from the earlier example, here&#8217;s how M~12..M~10 specifies just two commits, A and B. Begin with everything leading up to M~10 as shown in the first line of Figure 6-9. Find everything leading up to and including M~12, as shown in the second line of the figure. And finally, subtract M~12 from M~10 to get the commits shown in the third line of the figure.