CHAPTER 5 File Management and the Index 
<P></P>
<P>When your project is under the care of a VCS, you edit in your working directory and commit your changes to your repository for safekeeping. Git works similarly but inserts another layer, the index, between the working directory and the repository to stage, or collect, alterations. When you manage your code with Git, you edit in your working directory, accumulate changes in your index, and commit whatever has amassed in the index as a single changeset. </P>
<P>You can think of Git&#8217;s index as a set of intended or prospective modifications. You add, remove, move, or repeatedly edit files right up to the culminating commit, which actualizes the accumulated changes in the repository. Most of the critical work actually precedes the commit step. </P>
<P><FONT class=extract>Remember, a commit is a two-step process: stage your changes and commit the changes. An alteration found in the working directory but not in the index isn&#8217;t staged and thus can&#8217;t be committed.</FONT></P>
<P><FONT class=extract>For convenience, Git allows you to combine the two steps when you add or change a file:</FONT></P>
<P><FONT class=extract>$ git commit index.html</FONT></P>
<P><FONT class=extract>But if you move or remove a file, you don&#8217;t have that luxury. The two steps must then be separate:</FONT></P>
<P><FONT class=extract>$ git rm index.html </FONT></P>
<P><FONT class=extract>$ git commit</FONT></P>
<P>This chapter(1. I have it on good authority that this chapter should, in fact, be titled &#8220;Things Bart Massey Hates About Git.&#8221; ) explains how to manage the index and your corpus of files. It describes how to add and remove a file from your repository, how to rename a file, and how to catalog the state of the index. The finale of this chapter shows how to make Git ignore temporary and other irrelevant files that need not be tracked by version control.