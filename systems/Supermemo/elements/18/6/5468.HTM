<FONT class=extract>Using git commit --all </FONT>
<P></P>
<P><FONT class=extract>The -a or --all option to git commit causes it to automatically stage all unstaged, tracked file changes&#8212;including removals of tracked files from the working copy&#8212; before it performs the commit. </FONT></P>
<P>Let&#8217;s see how this works by setting up a few files with different staging characteristics: </P>
<P># Setup test repository </P>
<P>$ mkdir /tmp/commit-all-example </P>
<P>$ cd /tmp/commit-all-example </P>
<P>$ git init</P>
<P>Initialized empty Git repository in /tmp/commit-all-example/.git/ </P>
<P>$ echo something &gt;&gt; ready </P>
<P>$ echo somthing else &gt;&gt; notyet </P>
<P>$ git add ready notyet </P>
<P>$ git commit -m "Setup" </P>
<P>[master (root-commit) 71774a1] Setup </P>
<P>2 files changed, 2 insertions(+), 0 deletions(-) </P>
<P>create mode 100644 notyet </P>
<P>create mode 100644 ready </P>
<P># Modify file "ready" and "git add" it to the index </P>
<P># edit ready </P>
<P>$ git add ready </P>
<P># Modify file "notyet", leaving it unstaged </P>
<P># edit notyet </P>
<P># Add a new file in a subdirectory, but don't add it </P>
<P>$ mkdir subdir</P>
<P>$ echo Nope &gt;&gt; subdir/new </P>
<P>Use git status to see what a regular commit (without command line options) would do: </P>
<P>$ git status </P>
<P># On branch master </P>
<P># Changes to be committed: </P>
<P># (use "git reset HEAD <FILE>..." to unstage) </P>
<P># </P>
<P># modified: ready </P>
<P># </P>
<P># Changed but not updated: </P>
<P># (use "git add <FILE>..." to update what will be committed) </P>
<P># </P>
<P># modified: notyet </P>
<P># </P>
<P># Untracked files: </P>
<P># (use "git add <FILE>..." to include in what will be committed) </P>
<P># </P>
<P># subdir/ </P>
<P>Here, the index is prepared to commit just the one file named ready, because it&#8217;s the only file that&#8217;s been staged.</P>
<P>However, if you run git commit --all, Git recursively traverses the entire repository; stages all known, modified files and commits those. In this case, when your editor presents the commit message template, it should indicate that the modified and known file notyet will, in fact, be committed as well:</P>
<P># Please enter the commit message for your changes. </P>
<P># (Comment lines starting with '#' will not be included) </P>
<P># On branch master </P>
<P># Changes to be committed: </P>
<P># (use "git reset HEAD <FILE>..." to unstage) </P>
<P># </P>
<P># modified: notyet </P>
<P># modified: ready </P>
<P># </P>
<P># Untracked files: </P>
<P># (use "git add <FILE>..." to include in what will be committed) </P>
<P>#</P>
<P># subdir/ </P>
<P>Finally, because the directory named subdir/ is new and no file name or path within it is tracked, not even the --all option causes it to be committed: </P>
<P>Created commit db7de5f: Some --all thing. </P>
<P>2 files changed, 2 insertions(+), 0 deletions(-)</P>
<P>While Git recursively traverses the repository looking for modified and removed files, the completely new file subdir/ directory and all of its files do not become part of the commit.