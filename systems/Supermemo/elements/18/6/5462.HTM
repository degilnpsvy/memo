Tags 
<P></P>
<P><FONT class=extract>Finally, the last object Git manages is the tag. Although Git implements only one kind of tag object, there are two basic tag types, usually called lightweight and annotated. Lightweight tags are simply references to a commit object and are usually considered private to a repository. These tags do not create a permanent object in the object store. An annotated tag is more substantial and creates an object. It contains a message, supplied by you, and can be digitally signed using a GnuPG key according to RFC4880. Git treats both lightweight and annotated tag names equivalently for the purposes of naming a commit. However, by default, many Git commands work only on annotated tags, because they are considered &#8220;permanent&#8221; objects. </FONT></P>
<P><FONT class=extract>You create an annotated, unsigned tag with a message on a commit using the git tag command: </FONT></P>
<P><FONT class=extract>$ git tag -m "Tag version 1.0" V1.0 3ede462 </FONT></P>
<P><FONT class=extract>You can see the tag object via the git cat-file -p command, but what is the SHA1 of the tag object? To find it, use the Tip from &#8220;Objects, Hashes, and Blobs&#8221; on page 40: </FONT></P>
<P><FONT class=extract>$ git rev-parse V1.0</FONT></P>
<P><FONT class=extract>6b608c1093943939ae78348117dd18b1ba151c6a </FONT></P>
<P><FONT class=extract>$ git cat-file -p 6b608c</FONT></P>
<P><FONT class=extract>object 3ede4622cc241bcb09683af36360e7413b9ddf6c </FONT></P>
<P><FONT class=extract>type commit</FONT></P>
<P><FONT class=extract>tag V1.0 </FONT></P>
<P><FONT class=extract>tagger Jon Loeliger <JDL@EXAMPLE.COM>Sun Oct 26 17:07:15 2008 -0500</FONT></P>
<P><FONT class=extract>Tag version 1.0</FONT></P>
<P><FONT class=extract>In addition to the log message and author information, the tag refers to the commit object 3ede462. Usually, Git tags a particular commit as named by some branch. Note that this behavior is notably different from that of other VCSs. </FONT></P>
<P><FONT class=extract>Git usually tags a commit object, which points to a tree object, which encompasses the total state of the entire hierarchy of files and directories within your repository.</FONT> Recall from Figure 4-1 that the V1.0 tag points to the commit named 1492, which in turn points to a tree (8675309) that spans multiple files. Thus, the tag simultaneously applies to all files of that tree.</P>
<P>This is unlike CVS, for example, which will apply a tag to each individual file and then rely on the collection of all those tagged files to reconstitute a whole tagged revision. And whereas CVS lets you move the tag on an individual file, Git requires a new commit, encompassing the file state change, onto which the tag will be moved.