It&#8217;s All About the Index 
<P></P>
<P>Linus Torvalds argued on the Git mailing list that you can&#8217;t grasp and fully appreciate the power of Git without first understanding the purpose of the index. </P>
<P><FONT class=extract>Git&#8217;s index doesn&#8217;t contain any file content; it simply tracks what you want to commit. When you run git commit, Git checks the index rather than your working directory to discover what to commit. (Commits are covered fully in Chapter 6.)</FONT></P>
<P>Although many of Git&#8217;s <FONT class=extract>&#8220;porcelain&#8221; (higher level)</FONT> commands are designed to hide the details of the index from you and make your job easier, it is still important to keep the index and its state in mind.</P>
<P><FONT class=extract>You can query the state of the index at any time with the command git status. It explicitly calls out what files Git considers staged. You can also peer into the internal state of Git with &#8220;plumbing&#8221; commands such as git ls-files.</FONT></P>
<P><FONT class=extract>You&#8217;ll also likely find the git diff command useful during staging. (Diffs are discussed extensively in Chapter 8.) This command can display two different sets of changes: git diff displays the changes that remain in your working directory and are not staged; git diff --cached shows changes that are staged and will therefore contribute to your next commit.</FONT></P>
<P><FONT class=extract>You can use both variations of git diff to guide you through the process of staging changes. Initially, git diff is a large set of all modifications, and --cached is empty. As you stage, the former set will shrink and the latter set will grow. If all your working changes are staged and ready for a commit, the --cached will be full and git diff will show nothing.</FONT>