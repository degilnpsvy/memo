Commits 
<P></P>
<P><FONT class=extract>The next object to discuss is the commit. Now that hello.txt has been added with git add and the tree object has been produced with git write-tree, you can create a commit object using low-level commands like this: </FONT></P>
<P><FONT class=extract>$ echo -n "Commit a file that says hello\n"&nbsp; | git commit-tree 492413269336d21fac079d4a4672e55d5d2147ac</FONT></P>
<P><FONT class=extract>3ede4622cc241bcb09683af36360e7413b9ddf6c</FONT></P>
<P><FONT class=extract>The result will look something like this: </FONT></P>
<P><FONT class=extract>$ git cat-file -p 3ede462</FONT></P>
<P><FONT class=extract>tree 492413269336d21fac079d4a4672e55d5d2147ac </FONT></P>
<P><FONT class=extract>author Jon Loeliger <JDL@EXAMPLE.COM>1220233277 -0500 </FONT></P>
<P><FONT class=extract>committer Jon Loeliger <JDL@EXAMPLE.COM>1220233277 -0500</FONT></P>
<P><FONT class=extract>Commit a file that says hello</FONT></P>
<P>If you&#8217;re following along on your computer, you probably found that the commit object you generated does not have the same name as the one in this book. If you&#8217;ve understood everything so far, the reason for that should be obvious: it&#8217;s not the same commit. The commit contains your name and the time you made the commit, so of course it is different, however subtly. On the other hand, your commit does have the same tree. This is why commit objects are separate from their tree objects: different commits often refer to exactly the same tree. When that happens, Git is smart enough to transfer around only the new commit object, which is tiny, instead of the tree and blob objects, which are probably much larger.</P>
<P><FONT class=extract>In real life, you can (and should!) pass over the low-level git write-tree and git commit-tree steps, and just use the git commit command. You don&#8217;t need to remember all those plumbing commands to be a perfectly happy Git user. A basic commit object is fairly simple, and it&#8217;s the last ingredient required for a real RCS. The commit object just shown is the simplest possible one, containing:</FONT></P>
<P><FONT class=extract>? The name of a tree object that actually identifies the associated files </FONT></P>
<P><FONT class=extract>? The name of the person who composed the new version (the author) and the time when it was composed </FONT></P>
<P><FONT class=extract>? The name of the person who placed the new version into the repository (the committer) and the time when it was committed </FONT></P>
<P><FONT class=extract>? A description of the reason for this revision (the commit message)</FONT></P>
<P>By default, the author and committer are the same; there are a few situations where they&#8217;re different.</P>
<P><FONT class=extract>You can use the command git show --pretty=fuller to see additional details about a given commit.</FONT></P>
<P><FONT class=extract>Commit objects are also stored in a graph structure, although it&#8217;s completely different from the structures used by tree objects. When you make a new commit, you can give it one or more parent commits. By following back through the chain of parents, you can discover the history of your project. More details about commits and the commit graph are given in Chapter 6.</FONT>