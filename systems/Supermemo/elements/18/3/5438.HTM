Configuration Files 
<P></P>
<P><FONT class=extract>Git&#8217;s configuration files are all simple text files in the style of .ini files. They record various choices and settings used by many Git commands. Some settings represent purely personal preferences (should a color.pager be used?); others are vital to a repository functioning correctly (core.repositoryformatversion); and still others tweak command behavior a bit (gc.auto). </FONT></P>
<P><FONT class=extract>Like many tools, Git supports a hierarchy of configuration files. In decreasing precedence they are: </FONT></P>
<P><FONT class=extract>.git/config</FONT></P>
<P><FONT class=extract>Repository-specific configuration settings manipulated with the --file option or by default. These settings have the highest precedence. </FONT></P>
<P><FONT class=extract>~/.gitconfig</FONT></P>
<P><FONT class=extract>User-specific configuration settings manipulated with the --global option. </FONT></P>
<P><FONT class=extract>/etc/gitconfig </FONT></P>
<P><FONT class=extract>System-wide configuration settings manipulated with the --system option if you have proper Unix file write permissions on it. These settings have the lowest precedence.</FONT></P>
<P><FONT class=extract>Depending on your actual installation, the system settings file might be somewhere else (perhaps in /usr/local/etc/gitconfig), or may be entirely absent. For example, to establish an author name and email address that will be used on all the commits you make for all of your repositories, configure values for user.name and user.email in your $HOME/.gitconfig file using git config --global:</FONT></P>
<P><FONT class=extract>$ git config --global user.name "Jon Loeliger" </FONT></P>
<P><FONT class=extract>$ git config --global user.email </FONT><A href="mailto:jdl@example.com"><FONT class=extract>jdl@example.com</FONT></A></P>
<P><FONT class=extract>Or, to set a repository-specific name and email address that would override a --global setting, simply omit the --global flag: </FONT></P>
<P><FONT class=extract>$ git config user.name "Jon Loeliger" </FONT></P>
<P><FONT class=extract>$ git config user.email </FONT><A href="mailto:jdl@special-project.example.org"><FONT class=extract>jdl@special-project.example.org</FONT></A></P>
<P><FONT class=extract>Use git config -l to list the settings of all the variables collectively found in the complete set of configuration files</FONT>: </P>
<P># Make a brand new empty repository </P>
<P>$ mkdir /tmp/new </P>
<P>$ cd /tmp/new </P>
<P>$ git init </P>
<P># Set some config values </P>
<P>$ git config --global user.name "Jon Loeliger" </P>
<P>$ git config --global user.email <A href="mailto:jdl@example.com">jdl@example.com</A> </P>
<P>$ git config user.email <A href="mailto:jdl@special-project.example.org">jdl@special-project.example.org</A> </P>
<P>$ git config -l</P>
<P>user.name=Jon Loeliger </P>
<P><A href="mailto:user.email=jdl@example.com">user.email=jdl@example.com</A> </P>
<P>core.repositoryformatversion=0 </P>
<P>core.filemode=true </P>
<P>core.bare=false </P>
<P>core.logallrefupdates=true</P>
<P><A href="mailto:user.email=jdl@special-project.example.org">user.email=jdl@special-project.example.org</A></P>
<P>Because the configuration files are simple text files, you can view their contents with cat and edit them with your favorite text editor, too. </P>
<P># Look at just the repository specific settings </P>
<P>$ cat .git/config</P>
<P>[core] </P>
<P>repositoryformatversion = 0 </P>
<P>filemode = true </P>
<P>bare = false </P>
<P>logallrefupdates = true </P>
<P>[user]</P>
<P>email = <A href="mailto:jdl@special-project.example.org">jdl@special-project.example.org</A></P>
<P>Oh, and, if you use a Pacific Northwest-based OS, you may see some differences here. Maybe something like this:</P>
<P>[core] </P>
<P>repositoryformatversion = 0 </P>
<P>filemode = true </P>
<P>bare = true </P>
<P>logallrefupdates = true </P>
<P>symlinks = false </P>
<P>ignorecase = true </P>
<P>hideDotFiles = dotGitOnly</P>
<P>Many of these differences allow for different file system characteristics. <FONT class=extract>Use the --unset option to remove a setting:</FONT></P>
<P><FONT class=extract>$ git config --unset --global user.email </FONT></P>
<P>The behavior of the git config command changed between versions 1.6.2 and 1.6.3. Earlier versions required option --unset to follow option --global; newer versions allow either order.</P>
<P><FONT class=extract>Multiple configuration options and environment variables frequently exist for the same purpose. For example, the editor to be used when composing a commit log message follows these steps, in order: </FONT></P>
<P><FONT class=extract>? GIT_EDITOR environment variable </FONT></P>
<P><FONT class=extract>? core.editor configuration option </FONT></P>
<P><FONT class=extract>? VISUAL environment variable </FONT></P>
<P><FONT class=extract>? EDITOR environment variable </FONT></P>
<P><FONT class=extract>? the vi command</FONT></P>
<P>There are more than a few hundred configuration parameters. I&#8217;m not going to bore you with them, but I will point out important ones as we go along. A more extensive (yet still incomplete) list can be found on the git config manual page.