Removing and Renaming Files in Your Repository 
<P></P>
<P>Removing a file from a repository is analogous to adding a file but uses git rm. Suppose you have the file poem.html in your website content and it&#8217;s no longer needed. </P>
<P>$ cd ~/public_html </P>
<P>$ ls </P>
<P>index.html </P>
<P>poem.html </P>
<P>$ git rm poem.html </P>
<P>rm 'poem.html'</P>
<P>$ git commit -m "Remove a poem" </P>
<P>Created commit 364a708: Remove a poem</P>
<P>0 files changed, 0 insertions(+), 0 deletions(-) </P>
<P>delete mode 100644 poem.html</P>
<P>As with an addition, a deletion requires two steps: git rm expresses your intent to remove the file and stages the change, and then git commit realizes the change in the repository. Again, you can omit the -m option and type a log message such as &#8220;Remove a poem&#8221; interactively in your favorite text editor.</P>
<P>You can rename a file indirectly by using a combination of git rm and git add, or you can rename it more quickly and directly with git mv. Here&#8217;s an example of the former:</P>
<P>$ mv foo.html bar.html </P>
<P>$ git rm foo.html </P>
<P>rm 'foo.html' </P>
<P>$ git add bar.html</P>
<P>In this sequence, you must execute mv foo.html bar.html at the onset lest git rm permanently delete the foo.html file from the filesystem.</P>
<P>Here&#8217;s the same operation performed with git mv. </P>
<P>$ git mv foo.html bar.html </P>
<P>In either case, the staged changes must be committed subsequently:</P>
<P>$ git commit -m "Moved foo to bar" Created commit 8805821: Moved foo to bar </P>
<P>1 files changed, 0 insertions(+), 0 deletions(-)</P>
<P>rename foo.html =&gt; bar.html (100%)</P>
<P>Git handles file move operations differently than most akin systems, employing a mechanism based on the similarity of the content between two file versions. The specifics are described in Chapter 5.