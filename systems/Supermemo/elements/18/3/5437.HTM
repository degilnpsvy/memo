Making a Copy of Your Repository 
<P></P>
<P>If you followed the previous steps and made an initial repository in your ~/public_ html directory, then you can now create a complete copy, or clone, of that repository using the git clone command. This is how people around the world use Git to pursue pet projects on the same files and keep in sync with other repositories. </P>
<P>For the purposes of this tutorial, let&#8217;s just make a copy in your home directory and call it my_website:</P>
<P>$ cd ~ </P>
<P><FONT class=clozed>$ git clone public_html my_website</FONT></P>
<P>Although these two Git repositories now contain exactly the same objects, files, and directories, there are some subtle differences. You may want to explore those differences with commands such as: </P>
<P>$ ls -lsa public_html my_website </P>
<P>$ <FONT class=clozed>diff -r public_html my_website</FONT></P>
<P>On a local filesystem like this, using git clone to make a copy of a repository is quite similar to cp -a or rsync. However, Git supports a richer set of repository sources, including network names, for naming the repository to be cloned. These forms and usage are explained in Chapter 12.</P>
<P>Once you clone a repository, you are able to modify the cloned version, make new commits, inspect its logs and history, and so on. It is a complete repository with full history.