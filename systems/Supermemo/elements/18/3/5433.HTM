Making Another Commit 
<P></P>
<P>To show a few more features of Git, let&#8217;s make some modifications and create a complex history of changes within the repository. </P>
<P><FONT class=extract>Let&#8217;s commit an alteration to the index.html file. Open the file, convert it to HTML, and save the file.</FONT></P>
<P><FONT class=extract>$ cd ~/public_html </FONT></P>
<P><FONT class=extract># edit the index.html file </FONT></P>
<P><FONT class=extract>$ cat index.html </FONT></P>
<P><FONT class=extract>... My web site is alive! ... </FONT></P>
<P><FONT class=extract>$ git commit index.html</FONT></P>
<P><FONT class=extract>If you are already somewhat familiar with Git, you may be tempted to think &#8220;Aha! You need to git add index.html before you can commit that file!&#8221; But that isn&#8217;t true. Because the file was already added to the repository (in &#8220;Adding a File to Your Repository&#8221; on page 22), there&#8217;s no need to tell the index about the file; it already knows. Furthermore, file changes are captured when directly committing a file named on the command line! Using a generic git commit without naming the file would not have worked in this case.</FONT></P>
<P>When your editor comes up, enter a commit log entry such as &#8220;Convert to HTML&#8221; and exit the editor. There are now two versions of index.html in the repository.