Absolute Commit Names 
<P></P>
<P>The most rigorous name for a commit is its hash identifier. The hash ID is an absolute name, meaning it can only refer to exactly one commit. It doesn&#8217;t matter where the commit is among the entire repository&#8217;s history; the hash ID always identifies the same commit. </P>
<P><FONT class=extract>Each commit ID is globally unique, not just for one repository but for any and all repositories. For example, if a developer writes you with reference to a particular commit ID in his repository and if you find the same commit in your repository, then you can be certain that you both have the same commit with the same content. Furthermore, because the data that contribute to a commit ID contain the state of the whole repository tree as well as the prior commit state, by an inductive argument, an even stronger claim can be made: You can be certain that both of you are discussing the same complete line of development leading up to and including the commit.</FONT></P>
<P>Because a 40-hexadecimal-digit SHA1 number makes for a tedious and error-prone entry, Git allows you to shorten this number to a unique prefix within a repository&#8217;s object database. Here is an example from Git&#8217;s own repository. </P>
<P>$ git log -1 --pretty=oneline HEAD</P>
<P>1fbb58b4153e90eda08c2b022ee32d90729582e6 Merge git://repo.or.cz/git-gui </P>
<P>$ git log -1 --pretty=oneline 1fbb</P>
<P>error: short SHA1 1fbb is ambiguous. </P>
<P>fatal: ambiguous argument '1fbb': unknown revision or path not in the working tree.</P>
<P>Use '--' to separate paths from revisions </P>
<P>$ git log -1 --pretty=oneline 1fbb58</P>
<P>1fbb58b4153e90eda08c2b022ee32d90729582e6 Merge git://repo.or.cz/git-gui </P>
<P>Although a tag name isn&#8217;t a globally unique name, it is absolute in that it points to a unique commit and doesn&#8217;t change over time (unless you explicitly change it, of course).