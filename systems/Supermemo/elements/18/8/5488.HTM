refs and symrefs 
<P></P>
<P><FONT class=extract>A ref is an SHA1 hash ID that refers to an object within the Git object store. Although a ref may refer to any Git object, it usually refers to a commit object.</FONT> <FONT class=extract>A symbolic reference, or symref, is a name that indirectly points to a Git object. It is still just a ref.</FONT> <FONT class=extract>Local topic branch names, remote tracking branch names, and tag names are all refs.</FONT> <FONT class=extract>Each symbolic ref has an explicit, full name that begins with refs/ and each is stored hierarchically within the repository in the .git/refs/ directory.</FONT> <FONT class=extract>There are basically three different namespaces represented in refs/: refs/heads/ref for your local branches, refs/remotes/ref for your remote tracking branches, and refs/tags/ref for your tags. (Branches are covered in more detail in Chapter 7 and in Chapter 12.) </FONT></P>
<P><FONT class=extract>For example, a local topic branch named dev is really a short form of refs/heads/dev. Remote tracking branches are in the refs/remotes/namespace, so origin/master really names refs/remotes/origin/master. And finally, a tag such as v2.6.23 is short for refs/tags/v2.6.23.</FONT></P>
<P><FONT class=extract>You can use either a full ref name or its abbreviation, but if you have a branch and a tag with the same name, Git applies a disambiguation heuristic and uses the first match according to this list from the git rev-parse manpage:</FONT></P>
<P><FONT class=extract>.git/ref </FONT></P>
<P><FONT class=extract>.git/refs/ref </FONT></P>
<P><FONT class=extract>.git/refs/tags/ref </FONT></P>
<P><FONT class=extract>.git/refs/heads/ref </FONT></P>
<P><FONT class=extract>.git/refs/remotes/ref </FONT></P>
<P><FONT class=extract>.git/refs/remotes/ref/HEAD</FONT></P>
<P>The first rule is usually just for a few refs described later: HEAD, ORIG_HEAD, FETCH_HEAD, CHERRY_PICK_HEAD, and MERGE_HEAD. </P>
<P><FONT class=extract>Technically, the name of the Git directory, .git, can be changed. Thus, Git&#8217;s internal documentation uses the variable $GIT_DIR instead of the literal .git. </FONT></P>
<P>Git maintains several special symrefs automatically for particular purposes. They can be used anywhere a commit is used.</P>
<P><FONT class=extract>HEAD </FONT></P>
<P><FONT class=extract>HEAD always refers to the most recent commit on the current branch. When you change branches, HEAD is updated to refer to the new branch&#8217;s latest commit.</FONT></P>
<P><FONT class=extract>ORIG_HEAD </FONT></P>
<P><FONT class=extract>Certain operations, such as merge and reset, record the previous version of HEAD in ORIG_HEAD just prior to adjusting it to a new value. You can use ORIG_HEAD to recover or revert to the previous state or to make a comparison.</FONT></P>
<P><FONT class=extract>FETCH_HEAD </FONT></P>
<P><FONT class=extract>When remote repositories are used, git fetch records the heads of all branches fetched in the file .git/FETCH_HEAD. FETCH_HEAD is a shorthand for the head of the last branch fetched and is valid only immediately after a fetch operation. Using this symref, you can find the HEAD of commits from git fetch even if an anonymous fetch that doesn&#8217;t specifically name a branch is used. The fetch operation is covered in Chapter 12.</FONT></P>
<P><FONT class=extract>MERGE_HEAD </FONT></P>
<P><FONT class=extract>When a merge is in progress, the tip of the other branch is temporarily recorded in the symref MERGE_HEAD. In other words, MERGE_HEAD is the commit that is being merged into HEAD. </FONT></P>
<P><FONT class=extract>All of these symbolic references are managed by the plumbing command git symbolic-ref.</FONT></P>
<P><FONT class=extract>Although it is possible to create your own branch with one of these special symbolic names (e.g., HEAD), it isn&#8217;t a good idea.</FONT></P>
<P>There are a whole raft of special character variants for ref names. The two most common, the caret (^) and tilde (~), are described in the next section. In another twist on refs, colons can be used to refer to alternate versions of a common file involved in a merge conflict. This procedure is described in Chapter 9.