Relative Commit Names 
<P></P>
<P>Git also provides mechanisms for identifying a commit relative to another reference, commonly the tip of a branch. </P>
<P>You&#8217;ve seen some of these names already, such as master and master^, where <FONT class=extract>master^ always refers to the penultimate commit on the master branch.</FONT> There are others as well: you can use master^^, master~2, and even a complex name like master~10^2~2^2.</P>
<P>Except for the first root commit,( 2. <FONT class=extract>Yes, you can actually introduce multiple root commits into a single repository. This happens, for example, when two different projects and both entire repositories are brought together and merged into one.</FONT> ) each commit is derived from at least one earlier commit and possibly many, where direct ancestors are called parent commits. <FONT class=extract>For a commit to have multiple parent commits, it must be the result of a merge operation. As a result, there will be a parent commit for each branch contributing to a merge commit.</FONT></P>
<P><FONT class=extract>Within a single generation, the caret is used to select a different parent. Given a commit C, C^1 is the first parent, C^2 is the second parent, C^3 is the third parent, and so on</FONT>, as shown in Figure 6-1. </P>
<P>&nbsp;</P>
<P>Figure 6-1. Multiple parent names </P>
<P><FONT class=extract>The tilde is used to go back before an ancestral parent and select a preceding generation. Again, given the commit C, C~1 is the first parent, C~2 is the first grandparent, and C~3 is the first great-grandparent. When there are multiple parents in a generation, the first parent of the first parent is followed. You might also notice that both C^1 and C~1 refer to the first parent; either name is correct</FONT>, and is shown in Figure 6-2. </P>
<P>Figure 6-2. Multiple parent names </P>
<P><FONT class=extract>Git supports other abbreviations and combinations as well. The abbreviated forms C^ and C~ are the same as C^1 and C~1, respectively. Also, C^^ is the same as C^1^1 and, because that means the &#8220;first parent of the first parent of commit C,&#8221; it refers to the same commit as C~2. </FONT></P>
<P>By combining a ref and instances of caret and tilde, arbitrary commits may be selected from the ancestral commit graph of ref. Remember, though, that these names are relative to the current value of ref. If a new commit is made on top of ref, the commit graph is amended with a new generation and each &#8220;parent&#8221; name shifts further back in the history and graph. </P>
<P>Here&#8217;s an example from Git&#8217;s own history when Git&#8217;s master branch was at commit 1fbb58b4153e90eda08c2b022ee32d90729582e6. <FONT class=extract>Using the command:</FONT></P>
<P><FONT class=extract>git show-branch --more=35 </FONT></P>
<P><FONT class=extract>and limiting the output to the final 10 lines, you can inspect the graph history and examine a complex branch merge structure:</FONT></P>
<P><FONT class=extract>$ git rev-parse master </FONT></P>
<P><FONT class=extract>1fbb58b4153e90eda08c2b022ee32d90729582e6</FONT></P>
<P><FONT class=extract>$ git show-branch --more=35 | tail -10</FONT></P>
<P><FONT class=extract>-- [master~15] Merge branch 'maint' </FONT></P>
<P><FONT class=extract>-- [master~3^2^] Merge branch 'maint-1.5.4' into maint </FONT></P>
<P><FONT class=extract>+* [master~3^2^2^] wt-status.h: declare global variables as extern </FONT></P>
<P><FONT class=extract>-- [master~3^2~2] Merge branch 'maint-1.5.4' into maint </FONT></P>
<P><FONT class=extract>-- [master~16] Merge branch 'lt/core-optim' </FONT></P>
<P><FONT class=extract>+* [master~16^2] Optimize symlink/directory detection </FONT></P>
<P><FONT class=extract>+* [master~17] rev-parse --verify: do not output anything on error </FONT></P>
<P><FONT class=extract>+* [master~18] rev-parse: fix using "--default" with "--verify" </FONT></P>
<P><FONT class=extract>+* [master~19] rev-parse: add test script for "--verify" </FONT></P>
<P><FONT class=extract>+* [master~20] Add svn-compatible "blame" output format to git-svn</FONT></P>
<P>$ git rev-parse master~3^2^2^ </P>
<P>32efcd91c6505ae28f87c0e9a3e2b3c0115017d8 </P>
<P>Between master~15 and master~16, a merge took place that introduced a couple of other merges as well as a simple commit named master~3^2^2^. That happens to be commit 32efcd91c6505ae28f87c0e9a3e2b3c0115017d8.</P>
<P><FONT class=extract>The command git rev-parse is the final authority on translating any form of commit name&#8212;tag, relative, shortened, or absolute&#8212;into an actual, absolute commit hash ID within the object database.</FONT>