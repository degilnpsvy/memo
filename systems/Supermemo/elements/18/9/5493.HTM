Viewing Old Commits 
<P></P>
<P>The primary command to show the history of commits is git log. It has more options, parameters, bells, whistles, colorizers, selectors, formatters, and doodads than the fabled ls. But don&#8217;t worry. Just as with ls, you don&#8217;t need to learn all the details right away. </P>
<P><FONT class=extract>In its parameterless form, git log acts like git log HEAD, printing the log message associated with every commit in your history that is reachable from HEAD. Changes are shown starting with the HEAD commit and work back through the graph. They are likely to be in roughly reverse chronological order, but recall Git adheres to the commit graph, not time, when traveling back over the history.</FONT></P>
<P>If you supply a commit &#224; la git log commit, the log starts at the named commit and works backward. This form of the command is useful for viewing the history of a branch:</P>
<P>$ git log master </P>
<P>commit 1fbb58b4153e90eda08c2b022ee32d90729582e6 </P>
<P>Merge: 58949bb... 76bb40c... </P>
<P>Author: Junio C Hamano </P>
<P><GITSTER@POBOX.COM>Date: Thu May 15 01:31:15 2008 -0700</P>
<P>Merge git://repo.or.cz/git-gui </P>
<P>* git://repo.or.cz/git-gui:</P>
<P>git-gui: Delete branches with 'git branch -D' to clear config </P>
<P>git-gui: Setup branch.remote,merge for shorthand git-pull </P>
<P>git-gui: Update German translation </P>
<P>git-gui: Don't use '$$cr master' with aspell earlier than 0.60 </P>
<P>git-gui: Report less precise object estimates for database compression </P>
<P>commit 58949bb18a1610d109e64e997c41696e0dfe97c3</P>
<P>Author: Chris Frey </P>
<P><CDFREY@FOURSQUARE.NET>Date: Wed May 14 19:22:18 2008 -0400</P>
<P>Documentation/git-prune.txt: document unpacked logic </P>
<P>Clarifies the git-prune manpage, documenting that it only prunes unpacked objects.</P>
<P>Signed-off-by: Chris Frey </P>
<P><CDFREY@FOURSQUARE.NET>Signed-off-by: Junio C Hamano </P>
<P><GITSTER@POBOX.COM>commit c7ea453618e41e05a06f05e3ab63d555d0ddd7d9</P>
<P>... </P>
<P>The logs are authoritative, but rolling back through the entire commit history of your repository is likely not very practical or meaningful. Typically, a limited history is more informative. One technique to constrain history is to specify a commit range using the form since..until. Given a range, git log shows all commits following since running through until. Here&#8217;s an example.</P>
<P>$ git log --pretty=short --abbrev-commit master~12..master~10 </P>
<P>commit 6d9878c... </P>
<P>Author: Jeff King </P>
<P><PEFF@PEFF.NET>clone: bsd shell portability fix</P>
<P>commit 30684df... </P>
<P>Author: Jeff King </P>
<P><PEFF@PEFF.NET>t5000: tar portability fix</P>
<P>Here, git log shows the commits between master~12 and master~10, or the 10th and 11th prior commits on the master branch. You&#8217;ll see more about ranges in &#8220;Commit Ranges&#8221; on page 78 later in this chapter.</P>
<P>The previous example also introduces <FONT class=extract>two formatting options, --pretty=short and --abbrev-commit. The former adjusts the amount of information about each commit and has several variations, including oneline, short, and full. The latter simply requests that hash IDs be abbreviated.</FONT></P>
<P><FONT class=extract>Use the -p option to print the patch, or changes, introduced by the commit. </FONT></P>
<P><FONT class=extract>$ git log -1 -p 4fe86488</FONT></P>
<P><FONT class=extract>commit 4fe86488e1a550aa058c081c7e67644dd0f7c98e </FONT></P>
<P><FONT class=extract>Author: Jon Loeliger </FONT></P>
<P><JDL@FREESCALE.COM><FONT class=extract>Date: Wed Apr 23 16:14:30 2008 -0500</FONT></P>
<P><FONT class=extract>Add otherwise missing --strict option to unpack-objects summary. </FONT></P>
<P><FONT class=extract>Signed-off-by: Jon Loeliger </FONT></P>
<P><JDL@FREESCALE.COM><FONT class=extract>Signed-off-by: Junio C Hamano </FONT></P>
<P><FONT class=extract>diff --git a/Documentation/git-unpack-objects.txt b/Documentation/git-unpack-objects.txt </FONT></P>
<P><FONT class=extract>index 3697896..50947c5 100644</FONT></P>
<P><FONT class=extract>--- a/Documentation/git-unpack-objects.txt </FONT></P>
<P><FONT class=extract>+++ b/Documentation/git-unpack-objects.txt </FONT></P>
<P><FONT class=extract>@@ -8,7 +8,7 @@ git-unpack-objects - Unpack objects from a packed archive</FONT></P>
<P><FONT class=extract>SYNOPSIS </FONT></P>
<P><FONT class=extract>--------</FONT></P>
<P><FONT class=extract>-'git-unpack-objects' [-n] [-q] [-r] &lt;pack-file </FONT></P>
<P><FONT class=extract>+'git-unpack-objects' [-n] [-q] [-r] [--strict] &lt;pack-file </FONT></P>
<P><FONT class=extract>Notice the -1 option as well: it restricts the output to a single commit. You can also type -n to limit the output to at most n commits.</FONT></P>
<P><FONT class=extract>The --stat option enumerates the files changed in a commit and tallies how many lines were modified in each file.</FONT></P>
<P><FONT class=extract>$ git log --pretty=short --stat master~12..master~10 </FONT></P>
<P><FONT class=extract>commit 6d9878cc60ba97fc99aa92f40535644938cad907 </FONT></P>
<P><FONT class=extract>Author: Jeff King </FONT></P>
<P><PEFF@PEFF.NET><FONT class=extract>clone: bsd shell portability fix</FONT></P>
<P><FONT class=extract>git-clone.sh | 3 +-- </FONT></P>
<P><FONT class=extract>1 files changed, 1 insertions(+), 2 deletions(-)</FONT></P>
<P><FONT class=extract>commit 30684dfaf8cf96e5afc01668acc01acc0ade59db</FONT></P>
<P><FONT class=extract>Author: Jeff King </FONT><A href="mailto:peff@peff.net"><FONT class=extract>peff@peff.net</FONT></A></P>
<P><FONT class=extract>t5000: tar portability fix</FONT></P>
<P><FONT class=extract>t/t5000-tar-tree.sh | 8 ++++---- </FONT></P>
<P><FONT class=extract>1 files changed, 4 insertions(+), 4 deletions(-) </FONT></P>
<P><FONT class=extract>Compare the output of git log --stat with the output of git diff --stat. There is a fundamental difference in their displays. The former produces a summary for each individual commit named in the range, whereas the latter prints a single summary of the total difference between two repository states named on the command line.</FONT></P>
<P><FONT class=extract>Another command to display objects from the object store is git show. You can use it to see a commit:</FONT></P>
<P><FONT class=extract>$ git show HEAD~2 or to see a specific blob object: </FONT></P>
<P><FONT class=extract>$ git show origin/master:Makefile</FONT></P>
<P>In the latter display, the blob shown is the Makefile from the branch named origin/ master.