In practice, the fine points of intervening commits are considered unimportant. Also, the implementation detail of a commit pointing back to its parent is often elided, as shown in Figure 6-6. 
<P></P>
<P>&nbsp;</P>
<P>Figure 6-6. Commit graph without arrows </P>
<P>Time is still vaguely left to right, there are two branches shown, and there is one identified merge commit (H), but the actual directed edges are simplified because they are implicitly understood. </P>
<P>This kind of commit graph is often used to talk about the operation of certain Git commands and how each might modify the commit history. <FONT class=extract>The graphs are a fairly abstract representation of the actual commit history, in contrast to tools (e.g., gitk and git show-branch) that provide concrete representations of commit history graphs.</FONT> With these tools, though, time is usually represented from bottom to top, oldest to most recent. Conceptually, it is the same information.