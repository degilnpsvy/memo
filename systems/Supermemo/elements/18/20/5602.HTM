<HEAD></HEAD>
<BODY>
<P>Rebasing Commits </P>
<P>The git rebase command is used to alter where a sequence of commits is based. This command requires at least the name of the other branch onto which your commits will be relocated. By default, the commits from the current branch that are not already on the other branch are rebased. </P>
<P>A common use for git rebase is to keep a series of commits that you are developing up-to-date with respect to another branch, usually a master branch or a tracking branch from another repository.</P>
<P>In Figure 10-12, two branches have been developed. Originally, the topic branch started on the master branch when it was at commit B. In the meantime, it has progressed to commitE. </P>
<P>Figure 10-12. </P>
<P>Before git rebase You can keep your commit series up-to-date with respect to the master branch by writing the commits so that they are based on commit E rather than B. Because the topic branch needs to be the current branch, you can use either:</P>
<P>$ git checkout topic </P>
<P>$ git rebase master </P>
<P>or </P>
<P>$ git rebase master topic</P>
<P>After the rebase operation is complete, the new commit graph resembles Figure 10-13. </P>
<P>&nbsp;</P>
<P>Figure 10-13. After git rebase </P>
<P>Using the git rebase command in situations like the one shown in Figure 10-12 is often called forward porting. In this example, the topic branch topic has been forward ported to the master branch.</P>
<P>There is no magic to a rebase being a forward or a backward port; both are possible using git rebase. The interpretation is usually left to a more fundamental understanding of what functionality is considered ahead of or behind another functionality.</P>
<P>In the context of a repository that you have cloned from somewhere else, it is common to forward port your development branch or branches onto the origin/master tracking branch like this using the git rebase operation. In Chapter 12, you will see how this operation is requested frequently by a repository maintainer using a phrase such as &#8220;Please rebase your patch to the tip-of-master.&#8221;</P>
<P>The git rebase command may also be used to completely transplant a line of development from one branch to an entirely different branch using the --onto option.</P>
<P>For example, suppose you&#8217;ve developed a new feature on the feature branch with the commits P and Q, which were based on the maint branch as shown in Figure 10-14. To transplant the P and Q commits on the feature branch from the maint to the master branch, issue the command:</P>
<P>$ git rebase --onto master maint^ feature </P>
<P>&nbsp;</P>
<P>Figure 10-14. Before git rebase transplant</P>
<P>The resulting commit graphlooks like Figure 10-15. </P>
<P>&nbsp;</P>
<P>Figure 10-15. After git rebase transplant</P>
<P>The rebase operation relocates commits one at a time from each respective original commit location to a new commit base. As a result, each commit that is moved might have conflicts to resolve.</P>
<P>If a conflict is found, the rebase operation suspends its processing temporarily so you can resolve the conflict. Any conflict during the rebase process that needs to be resolved should be handled as described in &#8220;A Merge with a Conflict&#8221; on page 124 of Chapter 9. Once all conflicts are resolved and the index has been updated with the results, the rebase operation can be resumed using the git rebase --continue command. The command resumes its operation by committing the resolved conflict and proceeding to the next commit in the series being rebased.</P>
<P>If, while inspecting a rebase conflict, you decide that this particular commit really isn&#8217;t necessary, then you can also instruct the git rebase command to simply skip this commit and move to the next by using git rebase --skip. This may not be the correct thing to do, especially if subsequent commits in the series really depend on the changes introduced by this one. The problems are likely to snowball in this case, so it&#8217;s better to truly resolve the conflict.</P>
<P>Finally, if the rebase operation turns out to be the totally wrong thing to do, git rebase --abort abandons the operation and restores the repository to the state prior to issuing the original git rebase.</P></BODY>