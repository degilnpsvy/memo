CHAPTER 9 Merges 
<P></P>
<P>Git is a distributed version control system (DVCS). It allows, for example, a developer in Japan and another in New Jersey to make and record changes independently, and it permits the two developers to combine their changes at any time, all without a central repository. In this chapter, we&#8217;ll learn how to combine two or more different lines of development. </P>
<P>A merge unifies two or more commit history branches. Most often, a merge unites just two branches, although Git supports a merge of three, four, or more branches at the same time.</P>
<P><FONT class=extract>In Git, a merge must occur within a single repository&#8212;that is, all the branches to be merged must be present in the same repository.</FONT> How the branches come to be in the repository is not important. (As you will see in Chapter 12, Git provides mechanisms for referring to other repositories and for bringing remote branches into your current working repository.)</P>
<P><FONT class=extract>When modifications in one branch do not conflict with modifications found in another branch, Git computes a merge result and creates a new commit that represents the new, unified state. But when branches conflict, which occurs whenever changes compete to alter the same line of the same file, Git does not resolve the dispute. Instead, Git marks such contentious changes as &#8220;unmerged&#8221; in the index and leaves reconciliation up to you, the developer. When Git cannot merge automatically, it&#8217;s also up to you to make the final commit once all conflicts are resolved.</FONT>