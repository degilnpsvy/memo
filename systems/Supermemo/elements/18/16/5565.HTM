Degenerate Merges </P>
<P>There are two common degenerate scenarios that lead to merges and are called already up-to-date and fast-forward. Because neither of these scenarios actually introduces a new merge commit after performing the git merge,( 1. Yes, you can force Git to create one anyway by using the --no-ff option in the fast-forward case. However, you should fully understand why you want to do so. ) some might consider them not to be true merge strategies. </P>
<P>? Already up-to-date. When all the commits from the other branch (its HEAD) are already present in your target branch, even if it has advanced on its own, the target branch is said to be already up-to-date. As a result, no new commits are added to your branch.</P>
<P>For example, if you perform a merge and immediately follow it with the exact same merge request, then you will be told that your branch is already up-to-date. </P>
<P># Show that alternate is already merged into master </P>
<P>$ git show-branch</P>
<P>! [alternate] Add alternate line 5 and 6 </P>
<P>&nbsp;* [master] Merge branch 'alternate' </P>
<P>-- </P>
<P>&nbsp;- [master] Merge branch 'alternate' </P>
<P>+* [alternate] Add alternate line 5 and 6 </P>
<P># Try to merge alternate into master again </P>
<P>$ git merge alternate</P>
<P>Already up-to-date.</P>
<P>? Fast-forward. A fast-forward merge happens when your branch HEAD is already fully present and represented in the other branch. This is the inverse of the Already upto-date case.</P>
<P>Because your HEAD is already present in the other branch (likely due to a common ancestor), Git simply tacks on to your HEAD the new commits from the other branch. Git then moves your branch HEAD to point to the final, new commit. Naturally, the index and your working directory are also adjusted accordingly to reflect the new, final commit state.</P>
<P>The fast-forward case is particularly common on tracking branches because they simply fetch and record the remote commits from other repositories. Your local tracking branch HEADs will always be fully present and represented, because that is where the branch HEAD was after the previous fetch operation. See Chapter 12 for more details.</P>
<P>It is important for Git to handle these cases without introducing actual commits. Imagine what would happen in the fast-forward case if Git created a commit. Merging branch A into B would first produce Figure 9-5. Then merging B into A would produce Figure 9-6, and merging back again would yield Figure 9-7. </P>
<P>&nbsp;</P>
<P>Figure 9-5. First nonconverging merge </P>
<P>&nbsp;</P>
<P>Figure 9-6. Second nonconverging merge </P>
<P>&nbsp;</P>
<P>Figure 9-7. Third nonconverging merge</P>
<P>Each new merge is a new commit, so the sequence will never converge on a steady state and reveal that the two branches are identical.