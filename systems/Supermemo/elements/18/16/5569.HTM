Normal Merges </P>
<P>These merge strategies all produce a final commit, added to your current branch, that represents the combined state of the merge. </P>
<P>? Resolve. The resolve strategy operates on only two branches, locating the common ancestor as the merge basis and performing a direct three-way merge by applying the changes from the merge base to the tip of the other branch HEAD onto the current branch. This method makes intuitive sense. </P>
<P>? Recursive. The recursive strategy is similar to the resolve strategy in that it can only join two branches at once. However, it is designed to handle the scenario where there is more than one merge base between the two branches. In these cases, Git forms a temporary merge of all of the common merge bases and then uses that as the base from which to derive the resulting merge of the two given branches via a normal three-way merge algorithm. </P>
<P>The temporary merge basis is thrown away, and the final merge state is committed on your target branch.</P>
<P>? Octopus. The octopus strategy is specifically designed to merge together more than two branches simultaneously. Conceptually, it is fairly simple; internally, it calls the recursive merge strategy multiple times, once for each branch you are merging. However, this strategy cannot handle a merge that requires any form of conflict resolution that would necessitate user interaction. In such a case, you are forced to do a series of normal merges, resolving the conflicts one step at a time.