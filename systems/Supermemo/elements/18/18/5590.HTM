Using git cherry-pick 
<P></P>
<P>The command git cherry-pick commit applies the changes introduced by the named commit on the current branch. It will introduce a new, distinct commit. Strictly speaking, using git cherry-pick doesn&#8217;t alter the existing history within a repository; instead, it adds to the history. </P>
<P>As with other Git operations that introduce changes via the process of applying a diff, you may need to resolve conflicts to fully apply the changes from the given commit. The command git cherry-pick is typically used to introduce particular commits from one branch within a repository onto a different branch. A common use is to forward or back-port commits from a maintenance branch to a development branch.</P>
<P>In Figure 10-4, the dev branch has normal development, whereas the rel_2.3 contains commits for the maintenance of release 2.3. </P>
<P>&nbsp;</P>
<P>Figure 10-4. Before git cherry-pick of one commit</P>
<P>During the course of normal development, a bug is fixed on the development line with commit F. If that bug turns out to be present in the 2.3 release also, the bug fix, F, can be made to the rel_2.3 branch using git cherry-pick:</P>
<P>$ git checkout rel_2.3 </P>
<P>$ git cherry-pick dev~2 # commit F, above</P>
<P>After cherry-pick, the graph resembles Figure10-5. </P>
<P>&nbsp;</P>
<P>Figure 10-5. After git cherry-pick of one commit</P>
<P>In Figure 10-5, commit F' is substantially similar to commit F, but it is a new commit and will have to be adjusted&#8212;perhaps with conflict resolutions&#8212;to account for its application to commit Z rather than commit E. None of the commits following F are applied after F'; only the named commit is picked and applied.</P>
<P>Another common use for cherry-pick is to rebuild a series of commits by selectively picking a batch from one branch and introducing them onto a new branch. Suppose you had a series of commits on your development branch, my_dev, as shown in Figure 10-6, and you wanted to introduce them onto the master branch but in a substantially different order. </P>
<P>Figure 10-6. Before git cherry-pick shuffle</P>
<P>To apply them on the master branch in the order Y, W, X, Z, you could use the following commands.</P>
<P>$ git checkout master </P>
<P>$ git cherry-pick my_dev^ # Y </P>
<P>$ git cherry-pick my_dev~3 # W </P>
<P>$ git cherry-pick my_dev~2 # X </P>
<P>$ git cherry-pick my_dev# Z </P>
<P>Afterward, your commit history would look something like Figure 10-7. </P>
<P>&nbsp;</P>
<P>Figure 10-7. After git cherry-pick shuffle</P>
<P>In situations like this, where the order of commits undergoes fairly volatile changes, it is quite likely that you will have to resolve conflicts. It depends entirely on the relationship between the commits. If they are highly coupled and change overlapping lines, then you will have conflicts that need to be resolved. If they are highly independent, then you will be able to move them around quite readily.</P>
<P><FONT class=extract>Originally, the git cherry-pick command selected and reapplied one commit at a time. However, in later versions of Git, git cherry-pick allowed a range of commits to be selected and reapplied in a single command. For example, the following command: # on branch master</FONT></P>
<P><FONT class=extract>$ git cherry-pick X..Z</FONT></P>
<P><FONT class=extract>would apply new commits X', Y', and Z' on the master branch. This is particularly handy in porting or moving a large sequence of commits from one line of development to another without necessarily using the entire source branch at one time.</FONT>