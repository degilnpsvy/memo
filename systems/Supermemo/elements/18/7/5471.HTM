<FONT class=extract>Using git mv </FONT>
<P></P>
<P><FONT class=extract>Suppose you need to move or rename a file. You may use a combination of git rm on the old file and git add on the new file, or you may use git mv directly. Given a repository with a file named stuff that you want to rename newstuff, the following sequences of commands are equivalent Git operations: </FONT></P>
<P><FONT class=extract>$ mv stuff newstuff </FONT></P>
<P><FONT class=extract>$ git rm stuff </FONT></P>
<P><FONT class=extract>$ git add newstuff </FONT></P>
<P><FONT class=extract>and </FONT></P>
<P><FONT class=extract>$ git mv stuff newstuff</FONT></P>
<P>In both cases, Git removes the pathname stuff from the index, adds a new pathname newstuff, keeps the original content for stuff in the object store, and reassociates that content with the pathname newstuff.</P>
<P><FONT class=extract>With data back in the example repository, let&#8217;s rename it and commit the change: </FONT></P>
<P><FONT class=extract>$ git mv data mydata </FONT></P>
<P><FONT class=extract>$ git status </FONT></P>
<P><FONT class=extract># On branch master </FONT></P>
<P><FONT class=extract># Changes to be committed: </FONT></P>
<P><FONT class=extract># (use "git reset HEAD <FILE>..." to unstage) </FONT></P>
<P><FONT class=extract># </FONT></P>
<P><FONT class=extract># renamed: data -&gt; mydata </FONT></P>
<P><FONT class=extract># </FONT></P>
<P><FONT class=extract>$ git commit -m "Moved data to mydata"</FONT></P>
<P><FONT class=extract>Created commit ec7d888: Moved data to mydata </FONT></P>
<P><FONT class=extract>1 files changed, 0 insertions(+), 0 deletions(-) </FONT></P>
<P><FONT class=extract>rename data =&gt; mydata (100%)</FONT></P>
<P><FONT class=extract>If you happen to check the history of the file, you may be a bit disturbed to see that Git has apparently lost the history of the original data file and remembers only that it renamed data to the current name:</FONT></P>
<P><FONT class=extract>$ git log mydata </FONT></P>
<P><FONT class=extract>commit ec7d888b6492370a8ef43f56162a2a4686aea3b4 </FONT></P>
<P><FONT class=extract>Author: Jon Loeliger </FONT></P>
<P><JDL@EXAMPLE.COM><FONT class=extract>Date: Sun Nov 2 19:01:20 2008 -0600 </FONT></P>
<P><FONT class=extract>Moved data to mydata</FONT></P>
<P><FONT class=extract>Git does still remember the whole history, but the display is limited to the particular filename you specified in the command. The --follow option asks Git to trace back through the log and find the whole history associated with the content: </FONT></P>
<P><FONT class=extract>$ git log --follow mydata</FONT></P>
<P><FONT class=extract>commit ec7d888b6492370a8ef43f56162a2a4686aea3b4 </FONT></P>
<P><FONT class=extract>Author: Jon Loeliger </FONT></P>
<P><JDL@EXAMPLE.COM><FONT class=extract>Date: Sun Nov 2 19:01:20 2008 -0600 Moved data to mydata </FONT></P>
<P><FONT class=extract>commit 5b22108820b6638a86bf57145a136f3a7ab71818 </FONT></P>
<P><FONT class=extract>Author: Jon Loeliger </FONT></P>
<P><JDL@EXAMPLE.COM><FONT class=extract>Date: Sun Nov 2 18:38:28 2008 -0600 Add some files</FONT></P>
<P><FONT class=extract>One of the classic problems with VCSs is that renaming a file can cause them to lose track of a file&#8217;s history. Git preserves this information even after a rename.</FONT>