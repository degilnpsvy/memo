The .gitignore 
<P></P>
<P>File Earlier in this chapter you saw how to use the .gitignore file to pass over main.o, an irrelevant file. As in that example, <FONT class=extract>you can skip any file by adding its name to .gitignore in the same directory. Additionally, you can ignore the file everywhere by adding it to the .gitignore file in the topmost directory of your repository. </FONT></P>
<P><FONT class=extract>But Git also supports a much richer mechanism. A .gitignore file can contain a list of filename patterns that specify what files to ignore. The format of .gitignore is as follows:</FONT></P>
<P><FONT class=extract>? Blank lines are ignored, and lines starting with a pound sign (#) can be used for comments. However, the # does not represent a comment if it follows other text on the line. </FONT></P>
<P><FONT class=extract>? A simple, literal filename matches a file in any directory with that name. </FONT></P>
<P><FONT class=extract>? A directory name is marked by a trailing slash character (/). This matches the named directory and any subdirectory but does not match a file or a symbolic link. </FONT></P>
<P><FONT class=extract>? A pattern containing shell globbing characters, such as an asterisk (*), is expanded as a shell glob pattern. Just as in standard shell globbing, the match cannot extend across directories and so an asterisk can match only a single file or directory name. But an asterisk can still be part of a pattern that includes slashes to specify directory names (e.g., debug/32bit/*.o). </FONT></P>
<P><FONT class=extract>? An initial exclamation point (!) inverts the sense of the pattern on the rest of the line. Additionally, any file excluded by an earlier pattern but matching an inversion rule is included. An inverted pattern overrides lower precedencerules.</FONT></P>
<P><FONT class=extract>Furthermore, Git allows you to have a .gitignore file in any directory within your repository. Each file affects its directory and all subdirectories. The .gitignore rules also cascade: you can override the rules in a higher directory by including an inverted pattern (using the initial !) in one of the subdirectories.</FONT></P>
<P><FONT class=extract>To resolve a hierarchy with multiple .gitignore directories, and to allow command-line addenda to the list of ignored files, Git honors the following precedence, from highest to lowest:</FONT></P>
<P><FONT class=extract>? Patterns specified on the command line. </FONT></P>
<P><FONT class=extract>? Patterns read from .gitignore in the same directory. </FONT></P>
<P><FONT class=extract>? Patterns in parent directories, proceeding upward. Hence, the current directory&#8217;s patterns overrule the parents&#8217; patterns, and the parents close to the current directory take precedence over higher parents. </FONT></P>
<P><FONT class=extract>? Patterns from the .git/info/exclude file. </FONT></P>
<P><FONT class=extract>? Patterns from the file specified by the configuration variable core.exclude file.</FONT></P>
<P><FONT class=extract>Because a .gitignore is treated as a regular file within your repository, it is copied during clone operations and applies to all copies of your repository. In general, you should place entries into your version controlled .gitignore files only if the patterns apply to all derived repositories universally.</FONT></P>
<P><FONT class=extract>If the exclusion pattern is somehow specific to your one repository and should not (or might not) be applicable to anyone else&#8217;s clone of your repository, then the patterns should instead go into the .git/info/exclude file, because it is not propagated during clone operations. Its pattern format and treatment is the same as .gitignore files.</FONT></P>
<P><FONT class=extract>Here&#8217;s another scenario. It&#8217;s typical to exclude .o files, which are generated from source by the compiler. To ignore .o files, place *.o in your top level .gitignore. But what if you also had a particular *.o file that was, say, supplied by someone else and for which you couldn&#8217;t generate a replacement yourself? You&#8217;d likely want to explicitly track that particular file. You might then have a configuration like this:</FONT></P>
<P><FONT class=extract>$ cd my_package </FONT></P>
<P><FONT class=extract>$ cat .gitignore </FONT></P>
<P><FONT class=extract>*.o </FONT></P>
<P><FONT class=extract>$ cd my_package/vendor_files </FONT></P>
<P><FONT class=extract>$ cat .gitignore </FONT></P>
<P><FONT class=extract>!driver.o </FONT></P>
<P><FONT class=extract>The combination of rules means that Git will ignore all .o files within the repository but will track one exception, the file driver.o within the vendor_files subdirectory.</FONT>