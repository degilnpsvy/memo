Git Object Types 
<P></P>
<P></P>
<P>At the heart of Git&#8217;s repository implementation is the object store. It contains your original data files and all the log messages, author information, dates, and other information required to rebuild any version or branch of the project. </P>
<P>Git places only four types of objects in the object store: the blobs, trees, commits, and tags. These four atomic objects form the foundation of Git&#8217;s higher level data structures.</P>
<P><FONT class=extract>Blobs </FONT></P>
<P><FONT class=extract>Each version of a file is represented as a blob. Blob, a contraction of &#8220;binary large object,&#8221; is a term that&#8217;s commonly used in computing to refer to some variable or file that can contain any data and whose internal structure is ignored by the program. A blob is treated as being opaque. A blob holds a file&#8217;s data but does not contain any metadata about the file or even its name.</FONT></P>
<P><FONT class=extract>Trees </FONT></P>
<P><FONT class=extract>A tree object represents one level of directory information. It records blob identifiers, path names, and a bit of metadata for all the files in one directory. It can also recursively reference other (sub)tree objects and thus build a complete hierarchy of files and subdirectories.</FONT></P>
<P><FONT class=extract>Commits </FONT></P>
<P><FONT class=extract>A commit object holds metadata for each change introduced into the repository, including the author, committer, commit date, and log message. Each commit points to a tree object that captures, in one complete snapshot, the state of the repository at the time the commit was performed. The initial commit, or root commit, has no parent. Most commits have one commit parent, although later in the book (Chapter 9) we explain how a commit can reference more than one parent.</FONT></P>
<P><FONT class=extract>Tags </FONT></P>
<P><FONT class=extract>A tag object assigns an arbitrary yet presumably human readable name to a specific object, usually a commit. Although 9da581d910c9c4ac93557ca4859e767f5caf5169 refers to an exact and well-defined commit, a more familiar tag name like Ver-1.0-Alpha might make more sense! Over time, all the information in the object store changes and grows, tracking and modeling your project edits, additions, and deletions. To use disk space and network bandwidth efficiently, Git compresses and stores the objects in pack files, which are also placed in the object store.</FONT>