Specialty Merges </P>
<P>There are two special merge strategies that you should be aware of because they can sometimes help you solve strange problems. Feel free to skip this section if you don&#8217;t have a strange problem. The two special strategies are ours and subtree. </P>
<P>These merge strategies each produce a final commit, added to your current branch, that represents the combined state of the merge. </P>
<P>? Ours. The ours strategy merges in any number of other branches, but it actually discards changes from those branches and uses only the files from the current branch. The result of an ours merge is identical to the current HEAD, but any other named branches are also recorded as commit parents.</P>
<P>This is useful if you know you already have all the changes from the other branches but want to combine the two histories anyway. That is, it lets you record that you have somehow performed the merge, perhaps directly by hand, and that future Git operations shouldn&#8217;t try to merge the histories again. Git can treat this as real merge no matter how it came to be.</P>
<P>? Subtree. The subtree strategy merges in another branch, but everything in that branch is merged into a particular subtree of the current tree. You don&#8217;t specify which subtree; Git determines that automatically.