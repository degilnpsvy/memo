Creating an Initial Repository 
<P></P>
<P>To model a typical situation, let&#8217;s create a repository for your personal website from the directory ~/public_html and place it in a Git repository. </P>
<P>If you don&#8217;t have content for your personal website in ~/public_html, create the directory and place some simple content in a file called index.html:</P>
<P>$ mkdir ~/public_html </P>
<P>$ cd ~/public_html </P>
<P>$ echo 'My website is alive!' &gt; index.html</P>
<P>To turn ~/public_html or any directory into a Git repository, run git init: </P>
<P>$ git init</P>
<P>Initialized empty Git repository in .git/</P>
<P>Git doesn&#8217;t care whether you start with a completely empty directory or if you start with a directory full of files. In either case, the process of converting the directory into a Git repository is the same.</P>
<P>To signify that your directory is a Git repository, the git init command creates a hidden directory, called .git, at the top level of your project. Whereas CVS and SVN place revision information in CVS and .svn subdirectories within each of your project&#8217;s directories, Git places all its revision information in this one, top-level .git directory. The contents and purpose of the data files are discussed in more detail in &#8220;Inside the .git Directory&#8221; on page 39 of Chapter 4.</P>
<P>Everything in your ~/public_html directory remains untouched. Git considers it your project&#8217;s working directory, or the directory where you alter your files. In contrast, the repository hidden within .git is maintained by Git.