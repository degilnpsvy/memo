The Git Command Line 
<P></P>
<P><FONT class=extract>Git is simple to use. Just type git. Without any arguments, Git lists its options and the most common subcommands. </FONT></P>
<P><FONT class=extract>$ git </FONT></P>
<P><FONT class=extract>git [--version] [--exec-path[=GIT_EXEC_PATH]] [-p|--paginate|--no-pager] [--bare] [--git-dir=GIT_DIR] [--work-tree=GIT_WORK_TREE] [--help] COMMAND [ARGS] </FONT></P>
<P><FONT class=extract>The most commonly used git commands are: </FONT></P>
<P><FONT class=extract>add Add file contents to the index </FONT></P>
<P><FONT class=extract>bisect Find the change that introduced a bug by binary search</FONT></P>
<P><FONT class=extract>branch List, create, or delete branches</FONT></P>
<P><FONT class=extract>checkout Checkout and switch to a branch</FONT></P>
<P><FONT class=extract>clone Clone a repository into a new directory</FONT></P>
<P><FONT class=extract>commit Record changes to the repository</FONT></P>
<P><FONT class=extract>diff Show changes between commits, the commit and working trees, etc</FONT></P>
<P><FONT class=extract>fetch Download objects and refs from another repository</FONT></P>
<P><FONT class=extract>grep Print lines matching a pattern</FONT></P>
<P><FONT class=extract>init Create an empty git repository or reinitialize an existing one</FONT></P>
<P><FONT class=extract>log Show commit logs</FONT></P>
<P><FONT class=extract>merge Join two or more developmenthistories</FONT></P>
<P><FONT class=extract>mv Move or rename a file, a directory, or a symlink</FONT></P>
<P><FONT class=extract>pull Fetch from and merge with another repository or a local branch</FONT></P>
<P><FONT class=extract>push Update remote refs along with associated objects</FONT></P>
<P><FONT class=extract>rebase Forward-port local commits to the updated upstream head </FONT></P>
<P><FONT class=extract>reset Reset current HEAD to the specified state </FONT></P>
<P><FONT class=extract>rm Remove files from the working tree and from the index </FONT></P>
<P><FONT class=extract>show Show various types of objects status Show the working tree status</FONT></P>
<P><FONT class=extract>tag Create, list, delete, or verify a tag object signed with GPG</FONT></P>
<P><FONT class=extract>For a complete (and somewhat daunting) list of git subcommands, type</FONT></P>
<P><FONT class=extract>git help --all. </FONT></P>
<P>As you can see from the usage hint, a small handful of options apply to git. Most options, shown as [ARGS] in the hint, apply to specific subcommands.</P>
<P>For example, the option --version affects the git command and produces a version number.</P>
<P>$ git --version</P>
<P>git version 1.6.0</P>
<P>In contrast , --amend is an example of an option specific to the git subcommand commit.</P>
<P>$ git commit --amend </P>
<P>Some invocations require both forms of options. (Here, the extra spaces in the command line merely serve to visually separate the subcommand from the base command and are not required.)</P>
<P>$ git --git-dir=project.git repack-d</P>
<P>For convenience, documentation for each git subcommand is available using git help subcommand, git --help subcommand or git subcommand --help.</P>
<P>Historically, Git was provided as a suite of many simple, distinct, standalone commands developed according to the &#8220;Unix toolkit&#8221; philosophy: build small, interoperable tools. Each command sported a hyphenated name, such as git-commit and git-log. However, the current trend among developers is to use the single git executable and affix a subcommand. That being said, the forms git commit and git-commit are identical.</P>
<P>You can visit http://www.kernel.org/pub/software/scm/git/docs/ to read the complete Git documentation online.</P>
<P>Git commands understand both &#8220;short&#8221; and &#8220;long&#8221; options. For example, the git commit command treats the following examples as equivalents. </P>
<P>$ git commit -m "Fixed a typo." </P>
<P>$ git commit --message="Fixed a typo."</P>
<P>The short form, -m, uses a single hyphen, whereas the long form, --message, uses two. (This is consistent with the GNU long options extension.) Some options exist only in one form.</P>
<P>Finally, you can separate options from a list of arguments via the &#8220;bare double dash&#8221; convention. For instance, use the double dash to contrast the control portion of the command line from a list of operands, such as filenames.</P>
<P>$ git diff -w master origin -- tools/Makefile</P>
<P>You may need to use the double dash to separate and explicitly identify filenames if they might otherwise be mistaken for another part of the command. For example, if you happened to have both a file and a tag named main.c, then you will get different behavior:</P>
<P># Checkout the tag named "main.c" </P>
<P>$ git checkout main.c </P>
<P># Checkout the file named "main.c" </P>
<P>$ git checkout -- main.c