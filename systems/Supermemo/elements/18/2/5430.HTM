Adding a File to Your Repository 
<P></P>
<P>The command git init creates a new Git repository. Initially, each Git repository is empty. To manage content, you must explicitly deposit it in the repository. Such a conscious step separates scratch files from important files. </P>
<P>Use git add file to add file to the repository: </P>
<P>$ git add index.html</P>
<P>If you have a directory populated with several files, let Git add all the files in the directory and all subdirectories with git add .. (The argument ., the single period or &#8220;dot&#8221; in Unix parlance, is shorthand for the current directory.)</P>
<P>After an add, Git knows that the file, index.html, is to remain in the repository. However, so far, Git has merely staged the file, <FONT class=extract>an interim step before committal</FONT>. Git separates the add and commit steps to avoid volatility. Imagine how disruptive, confusing, and time-consuming it would be to update the repository each time you add, remove, or change a file. Instead, multiple provisional and related steps, such as an add, can be &#8220;<FONT class=extract>batched</FONT>,&#8221; keeping the repository in a stable, consistent state.</P>
<P>Running git status reveals this in-between state of index.html:</P>
<P>$ git status </P>
<P># On branch master </P>
<P># </P>
<P># Initial commit </P>
<P># </P>
<P># Changes to be committed: </P>
<P># (use "git rm --cached <FILE>..." to unstage) </P>
<P># </P>
<P># new file: index.html </P>
<P>The command reports that the new file index.html will be added to the repository during the next commit.</P>
<P>In addition to actual changes to the directory and to file contents, Git records several other pieces of metadata with each commit, including a log message and the author of the change. A fully qualified git commit command supplies a log message and an author:</P>
<P>$ git commit -m "Initial contents of public_html"&nbsp;--author="Jon Loeliger <JDL@EXAMPLE.COM>"</P>
<P>Created initial commit 9da581d: Initial contents of public_html </P>
<P>1 files changed, 1 insertions(+), 0 deletions(-) </P>
<P>create mode 100644 index.html</P>
<P><FONT class=extract>You can provide a log message on the command line, but it&#8217;s more typical to create the message during an interactive editor session. This gives you an opportunity to compose a complete and detailed log message in your favorite editor. To configure Git to open your favorite editor during a git commit, set your GIT_EDITOR environment variable. </FONT></P>
<P><FONT class=extract># In tcsh </FONT></P>
<P><FONT class=extract>$ setenv GIT_EDITOR emacs </FONT></P>
<P><FONT class=extract># In bash </FONT></P>
<P><FONT class=extract>$ export GIT_EDITOR=vim </FONT></P>
<P>After you commit the addition of the new file into the repository, git status indicates that there are no outstanding, staged changes to be committed.</P>
<P>$ git status </P>
<P># On branch master </P>
<P>nothing to commit (working directory clean)</P>
<P>Git also takes the time to tell you that your working directory is clean, which means the working directory has no unknown or modified files that differ from what is in the repository.