Inspecting Conflicts </P>
<P>When a conflict appears, the working directory copy of each conflicted file is enhanced with three-way diff or merge markers. Continuing from where the example left off, the resulting conflicted file now looks like this: </P>
<P>$ cat hello </P>
<P>hello </P>
<P>&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:hello </P>
<P>worlds </P>
<P>======= </P>
<P>world </P>
<P>&gt;&gt;&gt;&gt;&gt;&gt;&gt; 6ab5ed10d942878015e38e4bab333daff614b46e:hello </P>
<P>Yay!</P>
<P>The merge markers delineate the two possible versions of the conflicting chunk of the file. In the first version, the chunk says &#8220;worlds&#8221;; in the other version, it says &#8220;world.&#8221; You could simply choose one phrase or the other, remove the conflict markers, and then run git add and git commit, but let&#8217;s explore some of the other features Git offers to help resolve conflicts.</P>
<P>The three-way merge marker lines (&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;, ========, and &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;) are automatically generated, but they&#8217;re just meant to be read by you, not (necessarily) a program. You should delete them with your text editor once you resolve the conflict.