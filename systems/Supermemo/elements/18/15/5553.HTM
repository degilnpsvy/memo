Locating Conflicted Files 
<P></P>
<P>But what if Git&#8217;s helpful directions scrolled off the screen or if there were many files with conflicts? Luckily, Git keeps track of problematic files by marking each one in the index as conflicted, or unmerged. </P>
<P><FONT class=extract>You can also use either the git status command or the git ls-files -u command to show the set of files that remain unmerged in your working tree.</FONT></P>
<P><FONT class=extract>$ git status </FONT></P>
<P><FONT class=extract>hello: needs merge </FONT></P>
<P><FONT class=extract># On branch master </FONT></P>
<P><FONT class=extract># Changed but not updated: </FONT></P>
<P><FONT class=extract># (use "git add <FILE>..." to update what will be committed) </FONT></P>
<P><FONT class=extract># </FONT></P>
<P><FONT class=extract># unmerged: hello </FONT></P>
<P><FONT class=extract>#</FONT></P>
<P><FONT class=extract>no changes added to commit (use "git add" and/or "git commit -a") </FONT></P>
<P><FONT class=extract>$ git ls-files -u </FONT></P>
<P><FONT class=extract>100644 ce013625030ba8dba906f756967f9e9ca394464a 1 hello </FONT></P>
<P><FONT class=extract>100644 e63164d9518b1e6caf28f455ac86c8246f78ab70 2 hello </FONT></P>
<P><FONT class=extract>100644 562080a4c6518e1bf67a9f58a32a67bff72d4f00 3 hello</FONT></P>
<P><FONT class=extract>You can use git diff to show what&#8217;s not yet merged, but it will show all of the gory details, too!</FONT>