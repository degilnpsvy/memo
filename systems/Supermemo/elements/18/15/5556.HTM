Finishing Up a Conflict Resolution </P>
<P>Let&#8217;s make one last change to the hello file before declaring it merged: </P>
<P>$ cat hello </P>
<P>hello </P>
<P>everyone </P>
<P>Yay! </P>
<P>Now that the file is fully merged and resolved, git add reduces the index to just a single copy of the hello file again:</P>
<P>$ git add hello </P>
<P>$ git ls-files -s </P>
<P>100644 ebc56522386c504db37db907882c9dbd0d05a0f0 0 hello</P>
<P>That lone 0 between the SHA1 and the path name tells you that the stage number for a nonconflicted file is zero.</P>
<P>You must work through all the conflicted files as recorded in the index. You cannot commit as long as there is an unresolved conflict. Therefore, as you fix the conflicts in a file, run git add (or git rm, git update-index, etc.) on the file to clear its conflict status.</P>
<P>Be careful not to git add files with lingering conflict markers. Although that will clear the conflict in the index and allow you to commit, your file won&#8217;t be correct.</P>
<P>Finally, you can git commit the end result and use git show to see the merge commit:</P>
<P>$ cat .git/MERGE_MSG</P>
<P>Merge branch 'alt' </P>
<P>Conflicts: </P>
<P>hello</P>
<P>$ git commit </P>
<P>$ git show</P>
<P>commit a274b3003fc705ad22445308bdfb172ff583f8ad </P>
<P>Merge: eddcb7d... d03e77f... </P>
<P>Author: Jon Loeliger &lt;@example.com&gt; </P>
<P>Date: Wed Oct 22 23:04:18 2008 -0500 </P>
<P>Merge branch'alt'</P>
<P>Conflicts: </P>
<P>hello </P>
<P>diff --cc hello</P>
<P>index e63164d,562080a..ebc5652 </P>
<P>--- a/hello </P>
<P>+++ b/hello </P>
<P>@@@ -1,3 -1,3 +1,3 @@@</P>
<P>hello </P>
<P>- worlds </P>
<P>-world </P>
<P>++everyone</P>
<P>Yay!</P>
<P>You should notice three interesting things when you look at a merge commit: </P>
<P>? There is a new, second line in the header that says Merge:. Normally there&#8217;s no need to show the parent of a commit in git log or git show, since there is only one parent and it&#8217;s typically the one that comes right after it in the log. But merge commits typically have two (and sometimes more) parents, and those parents are important to understanding the merge. Hence, git log and git show always print the SHA1 of each ancestor. </P>
<P>? The automatically generated commit log message helpfully notes the list of files that conflicted. This can be useful later if it turns out a particular problem was caused by your merge. Usually, problems caused by a merge are caused by the files that had to be merged by hand. </P>
<P>? The diff of a merge commit is not a normal diff. It is always in the combined diff or &#8220;conflicted merge&#8221; format. A successful merge in Git is considered to be no change at all; it is simply the combination of other changes that already appeared in the history. Thus, showing the contents of a merge commit shows only the parts that are different from one of the merged branches, not the entire set of changes.