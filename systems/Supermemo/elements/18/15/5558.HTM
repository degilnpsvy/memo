git diff with conflicts 
<P></P>
<P><FONT class=extract>Git has a special, merge-specific variant of git diff to display the changes made against both parents simultaneously. In the example, it looks like this: </FONT></P>
<P><FONT class=extract>$ git diff </FONT></P>
<P><FONT class=extract>diff --cc hello </FONT></P>
<P><FONT class=extract>index e63164d,562080a..0000000 </FONT></P>
<P><FONT class=extract>--- a/hello </FONT></P>
<P><FONT class=extract>+++ b/hello </FONT></P>
<P><FONT class=extract>@@@ -1,3 -1,3 +1,7 @@@ </FONT></P>
<P><FONT class=extract>hello </FONT></P>
<P><FONT class=extract>++&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:hello </FONT></P>
<P><FONT class=extract>+worlds </FONT></P>
<P><FONT class=extract>++======= </FONT></P>
<P><FONT class=extract>+ world </FONT></P>
<P><FONT class=extract>++&gt;&gt;&gt;&gt;&gt;&gt;&gt; alt:hello </FONT></P>
<P><FONT class=extract>Yay!</FONT></P>
<P><FONT class=extract>What does it all mean? It&#8217;s the simple combination of two diffs: one versus the first parent, called HEAD, and one against the second parent, or alt. (Don&#8217;t be surprised if the second parent is an absolute SHA1 name representing some unnamed commit from some other repository!) To make things easier, Git also gives the second parent the special name MERGE_HEAD.</FONT></P>
<P><FONT class=extract>You can compare both the HEAD and MERGE_HEAD versions against the working directory (&#8220;merged&#8221;) version:</FONT></P>
<P><FONT class=extract>$ git diff HEAD </FONT></P>
<P><FONT class=extract>diff --git a/hello b/hello</FONT></P>
<P><FONT class=extract>index e63164d..4e4bc4e 100644 </FONT></P>
<P><FONT class=extract>--- a/hello </FONT></P>
<P><FONT class=extract>+++ b/hello</FONT></P>
<P><FONT class=extract>@@ -1,3 +1,7 @@ </FONT></P>
<P><FONT class=extract>hello </FONT></P>
<P><FONT class=extract>+&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:hello</FONT></P>
<P><FONT class=extract>worlds </FONT></P>
<P><FONT class=extract>+======= </FONT></P>
<P><FONT class=extract>+world</FONT></P>
<P><FONT class=extract>+&gt;&gt;&gt;&gt;&gt;&gt;&gt; alt:hello </FONT></P>
<P><FONT class=extract>Yay!</FONT></P>
<P><FONT class=extract>And then this: </FONT></P>
<P><FONT class=extract>$ git diff MERGE_HEAD </FONT></P>
<P><FONT class=extract>diff --git a/hello b/hello</FONT></P>
<P><FONT class=extract>index 562080a..4e4bc4e 100644 </FONT></P>
<P><FONT class=extract>--- a/hello </FONT></P>
<P><FONT class=extract>+++ b/hello </FONT></P>
<P><FONT class=extract>@@ -1,3 +1,7 @@</FONT></P>
<P><FONT class=extract>hello </FONT></P>
<P><FONT class=extract>+&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD:hello </FONT></P>
<P><FONT class=extract>+worlds </FONT></P>
<P><FONT class=extract>+======= </FONT></P>
<P><FONT class=extract>world </FONT></P>
<P><FONT class=extract>+&gt;&gt;&gt;&gt;&gt;&gt;&gt; </FONT></P>
<P><FONT class=extract>alt:hello </FONT></P>
<P><FONT class=extract>Yay!</FONT></P>
<P><FONT class=extract>In newer versions of Git, git diff --ours is a synonym for git diff HEAD, because it shows the differences between &#8220;our&#8221; version and the merged version. Similarly, git diff MERGE_HEAD can be written as git diff --theirs. You can use git diff --base to see the combined set of changes since the merge base, which would otherwise be rather awkwardly written as:</FONT></P>
<P><FONT class=extract>$ git diff $(git merge-base HEAD MERGE_HEAD) </FONT></P>
<P>If you line up the two diffs side by side, all the text except the + columns are the same, so Git prints the main text only once and prints the + columns next to each other. </P>
<P>The conflict found by git diff has two columns of information prepended to each line of output. A plus sign in a column indicates a line addition, a minus sign indicates a line removal, and a blank indicates a line with no change. The first column shows what&#8217;s changing versus your version, and the second column shows what&#8217;s changing versus the other version. The conflict marker lines are new in both versions, so they get a ++. The world and worlds lines are new only in one version or the other, so they have just a single + in the corresponding column.</P>
<P>Suppose you edit the file to pick a third option, like this: </P>
<P>$ cat hello</P>
<P>hello </P>
<P>worldly ones</P>
<P>Yay! </P>
<P>Then the new git diff output is </P>
<P>$ git diff</P>
<P>diff --cc hello </P>
<P>index e63164d,562080a..0000000 </P>
<P>--- a/hello </P>
<P>+++ b/hello </P>
<P>@@@ -1,3 -1,3 +1,3 @@@ </P>
<P>hello </P>
<P>- worlds </P>
<P>-world </P>
<P>++worldly ones </P>
<P>Yay!</P>
<P>Alternatively, you could choose one or the other original version, like this: </P>
<P>$&nbsp;cat hello</P>
<P>hello </P>
<P>world </P>
<P>Yay!</P>
<P>The git diff output would then be: </P>
<P>$ git diff </P>
<P>diff --cc hello </P>
<P>index e63164d,562080a..0000000</P>
<P>--- a/hello </P>
<P>+++ b/hello</P>
<P>Wait! Something strange happened there. Where does it show where the world line was added to the base version? Where does it show that the worlds line was removed from the HEAD version? As you have resolved the conflict in favor of the MERGE_HEAD version, Git deliberately omits the diff because it thinks you probably don&#8217;t care about that section anymore.</P>
<P><FONT class=extract>Running git diff on a conflicted file only shows you the sections that really have a conflict. In a large file with numerous changes scattered throughout, most of those changes don&#8217;t have a conflict; either one side of the merge changed a particular section or the other side did. When you&#8217;re trying to resolve a conflict, you rarely care about those sections, so git diff trims out uninteresting sections using a simple heuristic: if a section has changes versus only one side, that section isn&#8217;t shown.</FONT></P>
<P><FONT class=extract>This optimization has a slightly confusing side effect: once you resolve something that used to be a conflict by simply picking one side or the other, it stops showing up. That&#8217;s because you modified the section so that it only changes one side or the other (i.e., the side that you didn&#8217;t choose), so to Git it looks just like a section that was never conflicted at all.</FONT></P>
<P><FONT class=extract>This is really more a side effect of the implementation than an intentional feature, but you might consider it useful anyway: git diff shows you only those sections of the file that are still conflicted, so you can use it to keep track of the conflicts you haven&#8217;t fixed yet.</FONT>