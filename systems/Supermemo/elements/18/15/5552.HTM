Working with Merge Conflicts </P>
<P>As demonstrated by the previous example, there are instances when conflicting changes can&#8217;t be merged automatically. </P>
<P>Let&#8217;s create another scenario with a merge conflict to explore the tools Git provides to help resolve disparities. Starting with a common hello with just the contents &#8220;hello,&#8221; let&#8217;s create two different branches with two different variants of the file.</P>
<P>$ git init </P>
<P>Initialized empty Git repository in /tmp/conflict/.git/ </P>
<P>$ echo hello &gt; hello </P>
<P>$ git add hello </P>
<P>$ git commit -m "Initial hello file"</P>
<P>Created initial commit b8725ac: Initial hello file </P>
<P>1 files changed, 1 insertions(+), 0 deletions(-) </P>
<P>create mode 100644 hello</P>
<P>$ git checkout -b alt </P>
<P>Switched to a new branch "alt" </P>
<P>$ echo world &gt;&gt; hello </P>
<P>$ echo 'Yay!' &gt;&gt; hello </P>
<P>$ git commit -a -m "One world"</P>
<P>Created commit d03e77f: One world </P>
<P>1 files changed, 2 insertions(+), 0 deletions(-) </P>
<P>$ git checkout master </P>
<P>$ echo worlds &gt;&gt; hello </P>
<P>$ echo 'Yay!' &gt;&gt; hello </P>
<P>$ git commit -a -m "All worlds"</P>
<P>Created commit eddcb7d: All worlds </P>
<P>1 files changed, 2 insertions(+), 0 deletions(-) </P>
<P>One branch says world, whereas the other says worlds&#8212;a deliberate difference.</P>
<P>As in the earlier example, if you check out master and try to merge the alt branch into it, a conflict arises. </P>
<P>$ git merge alt</P>
<P>Auto-merged hello </P>
<P>CONFLICT (content): Merge conflict in hello</P>
<P>Automatic merge failed; fix conflicts and then commit the result. </P>
<P>As expected, Git warns you about the conflict found in the hello file.