Creating Branches 
<P></P>
<P>A new branch is based upon an existing commit within the repository. It is entirely up to you to determine and specify which commit to use as the start of the new branch. Git supports an arbitrarily complex branching structure, including branching branches and forking multiple branches from the same commit. </P>
<P>The lifetime of a branch is, again, your decision. A branch may be short lived or long lived. A given branch name may be added and deleted multiple times over the lifetime of the repository.</P>
<P><FONT class=extract>Once you have identified the commit from which a branch should start, simply use the git branch command. Thus, to create a new branch off the HEAD of your current branch for the purposes of fixing Problem Report #1138, you might use: </FONT></P>
<P><FONT class=extract>$ git branch prs/pr-1138</FONT></P>
<P><FONT class=extract>The basic form of the command is </FONT></P>
<P><FONT class=extract>git branch branch [starting-commit] </FONT></P>
<P><FONT class=extract>When no starting-commit is specified, the default is the revision committed most recently on the current branch. In other words, the default is to start a new branch at the point where you&#8217;re working right now.</FONT></P>
<P><FONT class=extract>Note that the git branch command merely introduces the name of a branch into the repository. It does not change your working directory to use the new branch. No working directory files change, no implicit branch context changes, and no new commits are made. The command simply creates a named branch at the given commit. You can&#8217;t actually start work on the branch until you switch to it, as we show shortly in &#8220;Checking out Branches&#8221; on page 97.</FONT></P>
<P><FONT class=extract>Sometimes you want to specify a different commit as the start of a branch. For instance, suppose that your project creates a new branch for each reported bug and you hear about a bug in a certain release. It may be convenient to use the starting-commit parameter as an alternative to switching your working directory to the branch that represents the release.</FONT></P>
<P><FONT class=extract>Normally, your project establishes conventions that let you specify a starting commit with certainty. For instance, to make a bug fix on the Version 2.3 release of your software, you might specify a branch named rel-2.3 as the starting commit: </FONT></P>
<P><FONT class=extract>$ git branch prs/pr-1138 rel-2.3</FONT></P>
<P><FONT class=extract>The only commit name guaranteed to be unique is the hash ID. If you know a hash ID, you can use it directly: </FONT></P>
<P><FONT class=extract>$ git branch prs/pr-1138 db7de5feebef8bcd18c5356cb47c337236b50c13</FONT>