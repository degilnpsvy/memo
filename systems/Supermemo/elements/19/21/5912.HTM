<H3 class=section style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">6.13<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>wcsftime</CODE>&#8211;convert date and time to a formatted wide-character string</H3>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A name=index-wcsftime-417></A><STRONG>Synopsis</STRONG></P><PRE class=example style="FONT-WEIGHT: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">     #include &lt;time.h&gt;
     #include &lt;wchar.h&gt;
     size_t wcsftime(wchar_t *<VAR>s</VAR>, size_t <VAR>maxsize</VAR>,
         const wchar_t *<VAR>format</VAR>, const struct tm *<VAR>timp</VAR>);
     
</PRE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><STRONG>Description</STRONG><BR><CODE>wcsftime</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strftime</CODE>, except that:</P>
<UL style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<LI>The argument s points to the initial element of an array of wide characters into which the generated output is to be placed.</LI>
<LI>The argument maxsize indicates the limiting number of wide characters.</LI>
<LI>The argument format is a wide-character string and the conversion specifiers are replaced by corresponding sequences of wide characters.</LI>
<LI>The return value indicates the number of wide characters.</LI></UL>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">(The difference in all of the above being wide characters versus regular characters.) See<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strftime</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for the details of the format specifiers.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><BR><STRONG>Returns</STRONG><BR>When the formatted time takes up no more than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>maxsize</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>wide characters, the result is the length of the formatted wide string. Otherwise, if the formatting operation was abandoned due to lack of room, the result is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0</CODE>, and the wide-character string starting at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>corresponds to just those parts of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*</CODE><VAR>format</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>that could be completely filled in within the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>maxsize</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>limit.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><BR><STRONG>Portability</STRONG><BR>C99 and POSIX require<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>wcsftime</CODE>, but do not specify the contents of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*</CODE><VAR>s</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>when the formatted string would require more than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>maxsize</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>characters. Unrecognized specifiers and fields of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>timp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that are out of range cause undefined results. Since some formats expand to 0 bytes, it is wise to set<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*</CODE><VAR>s</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to a nonzero value beforehand to distinguish between failure and an empty string. This implementation does not support<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>s</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>being NULL, nor overlapping<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>s</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>format</CODE>.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><CODE>wcsftime</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>requires no supporting OS subroutines.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><BR><STRONG>See Also</STRONG><BR><CODE>strftime</CODE></P><BR class=Apple-interchange-newline>