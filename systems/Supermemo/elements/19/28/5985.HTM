<P class=Default style="MARGIN: 0cm 0cm 0pt"><B><SPAN lang=EN-US style="FONT-SIZE: 18pt; mso-bidi-font-size: 13.5pt">6.3. </SPAN></B><FONT size=3><B><SPAN lang=EN-US style="FONT-FAMILY: 'Courier New'; mso-bidi-font-size: 10.0pt">_fork_r </SPAN></B><SPAN lang=EN-US style="FONT-FAMILY: 'Courier New'; mso-bidi-font-size: 10.0pt"></SPAN></FONT></P>
<P class=Default style="MARGIN: 0cm 0cm 0pt"><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 11.5pt">Newlib calls upon this stub to do the work for the </SPAN><SPAN lang=EN-US style="FONT-FAMILY: 'Courier New'; mso-bidi-font-size: 10.0pt"><FONT size=3>fork() </FONT></SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 11.5pt">system call, which in POSIX environments is used to create a clone of the current processing context. A hardcore POSIX enthusiast could implement this stub with help from uC/OS's </SPAN><SPAN lang=EN-US style="FONT-FAMILY: 'Courier New'; mso-bidi-font-size: 10.0pt"><FONT size=3>OSTaskCreate() </FONT></SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 11.5pt">function, but that is a challenging exercise because the semantics of the conventional </SPAN><SPAN lang=EN-US style="FONT-FAMILY: 'Courier New'; mso-bidi-font-size: 10.0pt"><FONT size=3>fork() </FONT></SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 11.5pt">do not coexist peacefully with uC/OS's way of managing task creation and identification. </SPAN></P>
<P class=Default style="MARGIN: 0cm 0cm 0pt"><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 11.5pt">In fact, trying to implement </SPAN><SPAN lang=EN-US style="FONT-FAMILY: 'Courier New'; mso-bidi-font-size: 10.0pt"><FONT size=3>fork() </FONT></SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 11.5pt">in uC/OS is probably a bad idea, because it raises task priority and synchronization issues that uC/OS already addresses quite well on its own. So save joining the two for another day, and leave this stub essentially unimplemented. The code is in Figure 5. </SPAN></P>
<P class=Default style="MARGIN: 0cm 0cm 0pt"><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 11.5pt">Figure 5. The _fork_r stub. </SPAN></P>
<P class=Default style="MARGIN: 0cm 0cm 0pt"><SPAN lang=EN-US style="FONT-FAMILY: 'Courier New'; mso-bidi-font-size: 10.0pt"><FONT size=3>int _fork_r ( struct _reent *ptr ) { /* return "not supported" */ ptr-&gt;errno = ENOTSUP; return -1; } </FONT></SPAN></P>
<P class=Default style="MARGIN: 0cm 0cm 0pt"><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 11.5pt">Take this approach for several other context management-related stubs, including </SPAN><SPAN lang=EN-US style="FONT-FAMILY: 'Courier New'; mso-bidi-font-size: 10.0pt"><FONT size=3>_execve</FONT></SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 11.5pt">, </SPAN><SPAN lang=EN-US style="FONT-FAMILY: 'Courier New'; mso-bidi-font-size: 10.0pt"><FONT size=3>_kill</FONT></SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 11.5pt">, </SPAN><SPAN lang=EN-US style="FONT-FAMILY: 'Courier New'; mso-bidi-font-size: 10.0pt"><FONT size=3>_wait_r </FONT></SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 11.5pt">and </SPAN><SPAN lang=EN-US style="FONT-FAMILY: 'Courier New'; mso-bidi-font-size: 10.0pt"><FONT size=3>_getpid_r</FONT></SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 11.5pt">. </SPAN>