<H3 class=section style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">5.5<SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT class=extract><CODE>memccpy</CODE>&#8212;copy memory regions with end-token check</FONT></H3>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><STRONG>Synopsis</STRONG></P><PRE class=example style="FONT-WEIGHT: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">     #include &lt;string.h&gt;
     void* memccpy(void *<VAR>out</VAR>, const void *<VAR>in</VAR>,
         int <VAR>endchar</VAR>, size_t <VAR>n</VAR>);
     
</PRE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><STRONG>Description</STRONG><BR>This function copies up to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes from the memory region pointed to by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>in</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the memory region pointed to by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>out</VAR>. If a byte matching the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>endchar</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is encountered, the byte is copied and copying stops.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">If the regions overlap, the behavior is undefined.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><BR><STRONG>Returns</STRONG><BR><CODE>memccpy</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns a pointer to the first byte following the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>endchar</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>out</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>region. If no byte matching<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>endchar</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>was copied, then<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><BR><STRONG>Portability</STRONG><BR><CODE>memccpy</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a GNU extension.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><CODE>memccpy</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>requires no supporting OS subroutines.