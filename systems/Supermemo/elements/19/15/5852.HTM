<H3 class=section style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">4.72<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>viprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vfiprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vsiprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vsniprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vasiprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vasniprintf</CODE>&#8212;format argument list (integer only)</H3>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A name=index-viprintf-355></A><A name=index-g_t_005fviprintf_005fr-356></A><A name=index-vfiprintf-357></A><A name=index-g_t_005fvfiprintf_005fr-358></A><A name=index-vsiprintf-359></A><A name=index-g_t_005fvsiprintf_005fr-360></A><A name=index-vsniprintf-361></A><A name=index-g_t_005fvsniprintf_005fr-362></A><A name=index-vasiprintf-363></A><A name=index-g_t_005fvasiprintf_005fr-364></A><A name=index-vasniprintf-365></A><A name=index-g_t_005fvasniprintf_005fr-366></A><STRONG>Synopsis</STRONG></P><PRE class=example style="FONT-WEIGHT: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">     #include &lt;stdio.h&gt;
     #include &lt;stdarg.h&gt;
     int viprintf(const char *<VAR>fmt</VAR>, va_list <VAR>list</VAR>);
     int vfiprintf(FILE *<VAR>fp</VAR>, const char *<VAR>fmt</VAR>, va_list <VAR>list</VAR>);
     int vsiprintf(char *<VAR>str</VAR>, const char *<VAR>fmt</VAR>, va_list <VAR>list</VAR>);
     int vsniprintf(char *<VAR>str</VAR>, size_t <VAR>size</VAR>, const char *<VAR>fmt</VAR>,
         va_list <VAR>list</VAR>);
     int vasiprintf(char **<VAR>strp</VAR>, const char *<VAR>fmt</VAR>, va_list <VAR>list</VAR>);
     char *vasniprintf(char *<VAR>str</VAR>, size_t *<VAR>size</VAR>, const char *<VAR>fmt</VAR>,
         va_list <VAR>list</VAR>);
     
     int _viprintf_r(struct _reent *<VAR>reent</VAR>, const char *<VAR>fmt</VAR>,
         va_list <VAR>list</VAR>);
     int _vfiprintf_r(struct _reent *<VAR>reent</VAR>, FILE *<VAR>fp</VAR>,
         const char *<VAR>fmt</VAR>, va_list <VAR>list</VAR>);
     int _vsiprintf_r(struct _reent *<VAR>reent</VAR>, char *<VAR>str</VAR>,
         const char *<VAR>fmt</VAR>, va_list <VAR>list</VAR>);
     int _vsniprintf_r(struct _reent *<VAR>reent</VAR>, char *<VAR>str</VAR>,
         size_t <VAR>size</VAR>, const char *<VAR>fmt</VAR>, va_list <VAR>list</VAR>);
     int _vasiprintf_r(struct _reent *<VAR>reent</VAR>, char **<VAR>str</VAR>,
         const char *<VAR>fmt</VAR>, va_list <VAR>list</VAR>);
     char *_vasniprintf_r(struct _reent *<VAR>reent</VAR>, char *<VAR>str</VAR>,
         size_t *<VAR>size</VAR>, const char *<VAR>fmt</VAR>, va_list <VAR>list</VAR>);
     
</PRE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><STRONG>Description</STRONG><BR><CODE>viprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vfiprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vasiprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vsiprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vsniprintf</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vasniprintf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are (respectively) variants of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>iprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fiprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asiprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>siprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sniprintf</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asniprintf</CODE>. They differ only in allowing their caller to pass the variable argument list as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>va_list</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>object (initialized by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>va_start</CODE>) rather than directly accepting a variable number of arguments. The caller is responsible for calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>va_end</CODE>.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><CODE>_viprintf_r</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_vfiprintf_r</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_vasiprintf_r</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_vsiprintf_r</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_vsniprintf_r</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_vasniprintf_r</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are reentrant versions of the above.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><BR><STRONG>Returns</STRONG><BR>The return values are consistent with the corresponding functions:</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><BR><STRONG>Portability</STRONG><BR>All of these functions are newlib extensions.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Supporting OS subroutines required:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>close</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fstat</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>isatty</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lseek</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sbrk</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write</CODE>.