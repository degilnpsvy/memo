<H3 class=section style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">5.25<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strerror_r</CODE>&#8212;convert error number to string and copy to buffer</H3>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A name=index-strerror_005fr-393></A><STRONG>Synopsis</STRONG></P><PRE class=example style="FONT-WEIGHT: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">     #include &lt;string.h&gt;
     #ifdef _GNU_SOURCE
     char *strerror_r(int <VAR>errnum</VAR>, char *<VAR>buffer</VAR>, size_t <VAR>n</VAR>);
     #else
     int strerror_r(int <VAR>errnum</VAR>, char *<VAR>buffer</VAR>, size_t <VAR>n</VAR>);
     #endif
     
</PRE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><STRONG>Description</STRONG><BR><CODE>strerror_r</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>converts the error number<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>errnum</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>into a string and copies the result into the supplied<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>buffer</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>for a length up to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>, including the NUL terminator. The value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>errnum</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is usually a copy of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>errno</CODE>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>errnum</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not a known error number, the result is the empty string.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">See<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strerror</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for how strings are mapped to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>errnum</CODE>.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><BR><STRONG>Returns</STRONG><BR>There are two variants: the GNU version always returns a NUL-terminated string, which is<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>buffer</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>if all went well, but which is another pointer if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>was too small (leaving<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>buffer</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>untouched). If the return is not<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>buffer</VAR>, your application must not modify that string. The POSIX version returns 0 on success,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>EINVAL</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<CODE>errnum</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>was not recognized, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ERANGE</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>was too small. The variant chosen depends on macros that you define before inclusion of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>string.h</CODE>.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><BR><STRONG>Portability</STRONG><BR><CODE>strerror_r</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with a<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>char *</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>result is a GNU extension.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strerror_r</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with an<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>int</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>result is required by POSIX 2001. This function is compliant only if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_user_strerror</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not provided, or if it is thread-safe and uses separate storage according to whether the second argument of that function is non-zero. For more details on<CODE>_user_strerror</CODE>, see the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strerror</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>documentation.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">POSIX states that the contents of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>buf</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are unspecified on error, although this implementation guarantees a NUL-terminated string for all except<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>of 0.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">POSIX recommends that unknown<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>errnum</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>result in a message including that value, however it is not a requirement and this implementation provides only an empty string (unless you provide<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_user_strerror</CODE>). POSIX also recommends that unknown<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>errnum</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>fail with EINVAL even when providing such a message, however it is not a requirement and this implementation will return success if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_user_strerror</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>provided a non-empty alternate string without assigning into its third argument.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><CODE>strerror_r</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>requires no supporting OS subroutines.