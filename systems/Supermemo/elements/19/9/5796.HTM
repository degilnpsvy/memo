<H3 class=section style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">4.16<SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT class=extract><CODE>fmemopen</CODE>&#8212;open a stream around a fixed-length string</FONT></H3>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A name=index-fmemopen-177></A><STRONG>Synopsis</STRONG></P><PRE class=example style="FONT-WEIGHT: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">     #include &lt;stdio.h&gt;
     FILE *fmemopen(void *restrict <VAR>buf</VAR>, size_t <VAR>size</VAR>,
         const char *restrict <VAR>mode</VAR>);
     
</PRE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><STRONG>Description</STRONG><BR><CODE>fmemopen</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>creates a seekable<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>FILE</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>stream that wraps a fixed-length buffer of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes starting at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>buf</VAR>. The stream is opened with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mode</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>treated as in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fopen</CODE>, where append mode starts writing at the first NUL byte. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>buf</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is NULL, then<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes are automatically provided as if by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>malloc</CODE>, with the initial size of 0, and<VAR>mode</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must contain<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>so that data can be read after it is written.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The stream maintains a current position, which moves according to bytes read or written, and which can be one past the end of the array. The stream also maintains a current file size, which is never greater than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mode</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>starts with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>r</CODE>, the position starts at<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0</CODE>, and file size starts at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>buf</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>was provided. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mode</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>starts with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>w</CODE>, the position and file size start at<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0</CODE>, and if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>buf</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>was provided, the first byte is set to NUL. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mode</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>starts with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>a</CODE>, the position and file size start at the location of the first NUL byte, or else<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>buf</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>was provided.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">When reading, NUL bytes have no significance, and reads cannot exceed the current file size. When writing, the file size can increase up to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as needed, and NUL bytes may be embedded in the stream (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>open_memstream</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for an alternative that automatically enlarges the buffer). When the stream is flushed or closed after a write that changed the file size, a NUL byte is written at the current position if there is still room; if the stream is not also open for reading, a NUL byte is additionally written at the last byte of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>buf</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>when the stream has exceeded<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR>, so that a write-only<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>buf</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is always NUL-terminated when the stream is flushed or closed (and the initial<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should take this into account). It is not possible to seek outside the bounds of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR>. A NUL byte written during a flush is restored to its previous value when seeking elsewhere in the string.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><BR><STRONG>Returns</STRONG><BR>The return value is an open FILE pointer on success. On error,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>errno</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be set to EINVAL if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is zero or<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mode</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is invalid, ENOMEM if<VAR>buf</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>was NULL and memory could not be allocated, or EMFILE if too many streams are already open.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><BR><STRONG>Portability</STRONG><BR>This function is being added to POSIX 200x, but is not in POSIX 2001.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Supporting OS subroutines required:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sbrk</CODE>.