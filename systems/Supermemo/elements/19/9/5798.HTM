<H3 class=section style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">4.18<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fopencookie</CODE>&#8212;open a stream with custom callbacks</H3>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A name=index-fopencookie-180></A><STRONG>Synopsis</STRONG></P><PRE class=example style="FONT-WEIGHT: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">     #include &lt;stdio.h&gt;
     FILE *fopencookie(const void *<VAR>cookie</VAR>, const char *<VAR>mode</VAR>,
         cookie_io_functions_t <VAR>functions</VAR>);
     
</PRE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><STRONG>Description</STRONG><BR><CODE>fopencookie</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>creates a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>FILE</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>stream where I/O is performed using custom callbacks. The callbacks are registered via the structure:</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">typedef ssize_t (*cookie_read_function_t)(void *_cookie, char *_buf, size_t _n); typedef ssize_t (*cookie_write_function_t)(void *_cookie, const char *_buf, size_t _n); typedef int (*cookie_seek_function_t)(void *_cookie, off_t *_off, int _whence); typedef int (*cookie_close_function_t)(void *_cookie);</P><PRE class=smallexample style="FONT-WEIGHT: normal; FONT-SIZE: smaller; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">     	typedef struct
     	{
     		cookie_read_function_t	*read;
     		cookie_write_function_t *write;
     		cookie_seek_function_t	*seek;
     		cookie_close_function_t *close;
     	} cookie_io_functions_t;
</PRE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The stream is opened with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mode</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>treated as in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fopen</CODE>. The callbacks<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>functions.read</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>functions.write</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may only be NULL when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mode</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not require them.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><VAR>functions.read</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should return -1 on failure, or else the number of bytes read (0 on EOF). It is similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read</CODE>, except that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cookie</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be passed as the first argument.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><VAR>functions.write</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should return -1 on failure, or else the number of bytes written. It is similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write</CODE>, except that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cookie</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be passed as the first argument.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><VAR>functions.seek</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should return -1 on failure, and 0 on success, with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>_off</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>set to the current file position. It is a cross between<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lseek</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fseek</CODE>, with the<VAR>_whence</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument interpreted in the same manner. A NULL<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>functions.seek</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>makes the stream behave similarly to a pipe in relation to stdio functions that require positioning.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><VAR>functions.close</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should return -1 on failure, or 0 on success. It is similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>close</CODE>, except that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cookie</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be passed as the first argument. A NULL<VAR>functions.close</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>merely flushes all data then lets<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fclose</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>succeed. A failed close will still invalidate the stream.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Read and write I/O functions are allowed to change the underlying buffer on fully buffered or line buffered streams by calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setvbuf</CODE>. They are also not required to completely fill or empty the buffer. They are not, however, allowed to change streams from unbuffered to buffered or to change the state of the line buffering flag. They must also be prepared to have read or write calls occur on buffers other than the one most recently specified.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><BR><STRONG>Returns</STRONG><BR>The return value is an open FILE pointer on success. On error,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>errno</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be set to EINVAL if a function pointer is missing or<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mode</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is invalid, ENOMEM if the stream cannot be created, or EMFILE if too many streams are already open.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><BR><STRONG>Portability</STRONG><BR>This function is a newlib extension, copying the prototype from Linux. It is not portable. See also the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>funopen</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>interface from BSD.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Supporting OS subroutines required:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sbrk</CODE>.