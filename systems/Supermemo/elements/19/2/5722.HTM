<H3 class=section style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">2.23<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>malloc</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>realloc</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>free</CODE>&#8212;manage memory</H3>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A name=index-malloc-37></A><A name=index-realloc-38></A><A name=index-reallocf-39></A><A name=index-free-40></A><A name=index-memalign-41></A><A name=index-malloc_005fusable_005fsize-42></A><A name=index-g_t_005fmalloc_005fr-43></A><A name=index-g_t_005frealloc_005fr-44></A><A name=index-g_t_005freallocf_005fr-45></A><A name=index-g_t_005ffree_005fr-46></A><A name=index-g_t_005fmemalign_005fr-47></A><A name=index-g_t_005fmalloc_005fusable_005fsize_005fr-48></A><STRONG>Synopsis</STRONG></P><PRE class=example style="FONT-WEIGHT: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">     #include &lt;stdlib.h&gt;
     void *malloc(size_t <VAR>nbytes</VAR>);
     void *realloc(void *<VAR>aptr</VAR>, size_t <VAR>nbytes</VAR>);
     void *reallocf(void *<VAR>aptr</VAR>, size_t <VAR>nbytes</VAR>);
     void free(void *<VAR>aptr</VAR>);
     
     void *memalign(size_t <VAR>align</VAR>, size_t <VAR>nbytes</VAR>);
     
     size_t malloc_usable_size(void *<VAR>aptr</VAR>);
     
     void *_malloc_r(void *<VAR>reent</VAR>, size_t <VAR>nbytes</VAR>);
     void *_realloc_r(void *<VAR>reent</VAR>,
         void *<VAR>aptr</VAR>, size_t <VAR>nbytes</VAR>);
     void *_reallocf_r(void *<VAR>reent</VAR>,
         void *<VAR>aptr</VAR>, size_t <VAR>nbytes</VAR>);
     void _free_r(void *<VAR>reent</VAR>, void *<VAR>aptr</VAR>);
     
     void *_memalign_r(void *<VAR>reent</VAR>,
         size_t <VAR>align</VAR>, size_t <VAR>nbytes</VAR>);
     
     size_t _malloc_usable_size_r(void *<VAR>reent</VAR>, void *<VAR>aptr</VAR>);
     
</PRE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><STRONG>Description</STRONG><BR>These functions manage a pool of system memory.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>malloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to request allocation of an object with at least<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>nbytes</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes of storage available. If the space is available,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>malloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns a pointer to a newly allocated block as its result.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><FONT class=extract>If you already have a block of storage allocated by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>malloc</CODE>, but you no longer need all the space allocated to it, you can make it smaller by calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>realloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with both the object pointer and the new desired size as arguments.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>realloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>guarantees that the contents of the smaller object match the beginning of the original object.</FONT></P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><FONT class=extract>Similarly, if you need more space for an object, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>realloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to request the larger size; again,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>realloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>guarantees that the beginning of the new, larger object matches the contents of the original object.</FONT></P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">When you no longer need an object originally allocated by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>malloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>realloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(or the related function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>calloc</CODE>), return it to the memory storage pool by calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>free </CODE>with the address of the object as the argument. You can also use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>realloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for this purpose by calling it with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>nbytes</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><FONT class=extract>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>reallocf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function behaves just like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>realloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>except if the function is required to allocate new storage and this fails. In this case<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>reallocf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will free the original object passed in whereas<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>realloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will not.</FONT></P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><FONT class=extract>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>memalign</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function returns a block of size<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>nbytes</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>aligned to a<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>align</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>boundary. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>align</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument must be a power of two.</FONT></P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><FONT class=extract>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>malloc_usable_size</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function takes a pointer to a block allocated by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>malloc</CODE>. It returns the amount of space that is available in the block. This may or may not be more than the size requested from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>malloc</CODE>, due to alignment or minimum size constraints.</FONT></P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The alternate functions<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_malloc_r</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_realloc_r</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_reallocf_r</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_free_r</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_memalign_r</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_malloc_usable_size_r</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are reentrant versions. The extra argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>reent</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a pointer to a reentrancy structure.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><FONT class=extract>If you have multiple threads of execution which may call any of these routines, or if any of these routines may be called reentrantly, then you must provide implementations of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__malloc_lock</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__malloc_unlock</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>functions for your system. See the documentation for those functions.</FONT></P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">These functions operate by calling the function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_sbrk_r</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sbrk</CODE>, which allocates space. You may need to provide one of these functions for your system.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_sbrk_r </CODE>is called with a positive value to allocate more space, and with a negative value to release previously allocated space if it is no longer required. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://sourceware.org/newlib/libc.html#Stubs">Stubs</A>.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><BR><STRONG>Returns</STRONG><BR><CODE>malloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns a pointer to the newly allocated space, if successful; otherwise it returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE>. If your application needs to generate empty objects, you may use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>malloc(0)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for this purpose.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><CODE>realloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns a pointer to the new block of memory, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if a new block could not be allocated.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is also the result when you use `<CODE>realloc(</CODE><VAR>aptr</VAR><CODE>,0)</CODE>' (which has the same effect as `<CODE>free(</CODE><VAR>aptr</VAR><CODE>)</CODE>'). You should always check the result of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>realloc</CODE>; successful reallocation is not guaranteed even when you request a smaller object.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><CODE>free</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not return a result.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><CODE>memalign</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns a pointer to the newly allocated space.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><CODE>malloc_usable_size</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the usable size.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><BR><STRONG>Portability</STRONG><BR><CODE>malloc</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>realloc</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>free</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are specified by the ANSI C standard, but other conforming implementations of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>malloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may behave differently when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>nbytes</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is zero.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><CODE>memalign</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is part of SVR4.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><CODE>malloc_usable_size</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not portable.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Supporting OS subroutines required:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sbrk</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN>