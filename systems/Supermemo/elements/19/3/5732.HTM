<H3 class=section style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">2.33<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>rand48</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>drand48</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>erand48</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lrand48</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nrand48</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mrand48</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>jrand48</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>srand48</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>seed48</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lcong48</CODE>&#8212;pseudo-random number generators and initialization routines</H3>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A name=index-rand48-69></A><A name=index-drand48-70></A><A name=index-erand48-71></A><A name=index-lrand48-72></A><A name=index-nrand48-73></A><A name=index-mrand48-74></A><A name=index-jrand48-75></A><A name=index-srand48-76></A><A name=index-seed48-77></A><A name=index-lcong48-78></A><STRONG>Synopsis</STRONG></P><PRE class=example style="FONT-WEIGHT: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">     #include &lt;stdlib.h&gt;
     double drand48(void);
     double erand48(unsigned short <VAR>xseed</VAR>[3]);
     long lrand48(void);
     long nrand48(unsigned short <VAR>xseed</VAR>[3]);
     long mrand48(void);
     long jrand48(unsigned short <VAR>xseed</VAR>[3]);
     void srand48(long <VAR>seed</VAR>);
     unsigned short *seed48(unsigned short <VAR>xseed</VAR>[3]);
     void lcong48(unsigned short <VAR>p</VAR>[7]);
     
</PRE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><STRONG>Description</STRONG><BR>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>rand48</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>family of functions generates pseudo-random numbers using a linear congruential algorithm working on integers 48 bits in size. The particular formula employed is r(n+1) = (a * r(n) + c) mod m where the default values are for the multiplicand a = 0xfdeece66d = 25214903917 and the addend c = 0xb = 11. The modulo is always fixed at m = 2 ** 48. r(n) is called the seed of the random number generator.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">For all the six generator routines described next, the first computational step is to perform a single iteration of the algorithm.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><CODE>drand48</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>erand48</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>return values of type double. The full 48 bits of r(n+1) are loaded into the mantissa of the returned value, with the exponent set such that the values produced lie in the interval [0.0, 1.0].</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><CODE>lrand48</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nrand48</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>return values of type long in the range [0, 2**31-1]. The high-order (31) bits of r(n+1) are loaded into the lower bits of the returned value, with the topmost (sign) bit set to zero.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><CODE>mrand48</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>jrand48</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>return values of type long in the range [-2**31, 2**31-1]. The high-order (32) bits of r(n+1) are loaded into the returned value.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><CODE>drand48</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lrand48</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mrand48</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>use an internal buffer to store r(n). For these functions the initial value of r(0) = 0x1234abcd330e = 20017429951246.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">On the other hand,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>erand48</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nrand48</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>jrand48</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>use a user-supplied buffer to store the seed r(n), which consists of an array of 3 shorts, where the zeroth member holds the least significant bits.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">All functions share the same multiplicand and addend.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><CODE>srand48</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used to initialize the internal buffer r(n) of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>drand48</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lrand48</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mrand48</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>such that the 32 bits of the seed value are copied into the upper 32 bits of r(n), with the lower 16 bits of r(n) arbitrarily being set to 0x330e. Additionally, the constant multiplicand and addend of the algorithm are reset to the default values given above.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><CODE>seed48</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>also initializes the internal buffer r(n) of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>drand48</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lrand48</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mrand48</CODE>, but here all 48 bits of the seed can be specified in an array of 3 shorts, where the zeroth member specifies the lowest bits. Again, the constant multiplicand and addend of the algorithm are reset to the default values given above.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>seed48</CODE>returns a pointer to an array of 3 shorts which contains the old seed. This array is statically allocated, thus its contents are lost after each new call to<CODE>seed48</CODE>.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Finally,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lcong48</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>allows full control over the multiplicand and addend used in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>drand48</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>erand48</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lrand48</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nrand48</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mrand48</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>jrand48</CODE>, and the seed used in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>drand48</CODE>,<CODE>lrand48</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mrand48</CODE>. An array of 7 shorts is passed as parameter; the first three shorts are used to initialize the seed; the second three are used to initialize the multiplicand; and the last short is used to initialize the addend. It is thus not possible to use values greater than 0xffff as the addend.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Note that all three methods of seeding the random number generator always also set the multiplicand and addend for any of the six generator calls.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">For a more powerful random number generator, see<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>random</CODE>.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><BR><STRONG>Portability</STRONG><BR>SUS requires these functions.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">No supporting OS subroutines are required.