<H3 class=section style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">2.40<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>wcstod</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>wcstof</CODE>&#8212;wide char string to double or float</H3>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A name=index-wcstod-94></A><A name=index-g_t_005fwcstod_005fr-95></A><A name=index-wcstof-96></A><A name=index-g_t_005fwcstof_005fr-97></A><STRONG>Synopsis</STRONG></P><PRE class=example style="FONT-WEIGHT: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">     #include &lt;stdlib.h&gt;
     double wcstod(const wchar_t *<VAR>str</VAR>, wchar_t **<VAR>tail</VAR>);
     float wcstof(const wchar_t *<VAR>str</VAR>, wchar_t **<VAR>tail</VAR>);
     
     double _wcstod_r(void *<VAR>reent</VAR>,
         const wchar_t *<VAR>str</VAR>, wchar_t **<VAR>tail</VAR>);
     float _wcstof_r(void *<VAR>reent</VAR>,
         const wchar_t *<VAR>str</VAR>, wchar_t **<VAR>tail</VAR>);
     
</PRE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><STRONG>Description</STRONG><BR>The function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>wcstod</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>parses the wide character string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR>, producing a substring which can be converted to a double value. The substring converted is the longest initial subsequence of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR>, beginning with the first non-whitespace character, that has one of these formats:</P><PRE class=smallexample style="FONT-WEIGHT: normal; FONT-SIZE: smaller; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">     [+|-]<VAR>digits</VAR>[.[<VAR>digits</VAR>]][(e|E)[+|-]<VAR>digits</VAR>]
     [+|-].<VAR>digits</VAR>[(e|E)[+|-]<VAR>digits</VAR>]
     [+|-](i|I)(n|N)(f|F)[(i|I)(n|N)(i|I)(t|T)(y|Y)]
     [+|-](n|N)(a|A)(n|N)[&lt;(&gt;[<VAR>hexdigits</VAR>]&lt;)&gt;]
     [+|-]0(x|X)<VAR>hexdigits</VAR>[.[<VAR>hexdigits</VAR>]][(p|P)[+|-]<VAR>digits</VAR>]
     [+|-]0(x|X).<VAR>hexdigits</VAR>[(p|P)[+|-]<VAR>digits</VAR>]
</PRE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The substring contains no characters if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is empty, consists entirely of whitespace, or if the first non-whitespace character is something other than<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.</CODE>, or a digit, and cannot be parsed as infinity or NaN. If the platform does not support NaN, then NaN is treated as an empty substring. If the substring is empty, no conversion is done, and the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is stored in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*</CODE><VAR>tail</VAR>. Otherwise, the substring is converted, and a pointer to the final string (which will contain at least the terminating null character of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR>) is stored in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*</CODE><VAR>tail</VAR>. If you want no assignment to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*</CODE><VAR>tail</VAR>, pass a null pointer as<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tail</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>wcstof</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is identical to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>wcstod</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>except for its return type.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">This implementation returns the nearest machine number to the input decimal string. Ties are broken by using the IEEE round-even rule. However,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>wcstof</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is currently subject to double rounding errors.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The alternate functions<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_wcstod_r</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_wcstof_r</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are reentrant versions of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>wcstod</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>wcstof</CODE>, respectively. The extra argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>reent</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a pointer to a reentrancy structure.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><BR><STRONG>Returns</STRONG><BR>Return the converted substring value, if any. If no conversion could be performed, 0 is returned. If the correct value is out of the range of representable values, plus or minus<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>HUGE_VAL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ERANGE</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is stored in errno. If the correct value would cause underflow, 0 is returned and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ERANGE</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is stored in errno.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Supporting OS subroutines required:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>close</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fstat</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>isatty</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lseek</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sbrk</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write</CODE>.