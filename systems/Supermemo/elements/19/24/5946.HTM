<H3 class=section style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">9.1<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setlocale</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>localeconv</CODE>&#8212;select or query locale</H3>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A name=index-setlocale-445></A><A name=index-localeconv-446></A><A name=index-g_t_005fsetlocale_005fr-447></A><A name=index-g_t_005flocaleconv_005fr-448></A><STRONG>Synopsis</STRONG></P><PRE class=example style="FONT-WEIGHT: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">     #include &lt;locale.h&gt;
     char *setlocale(int <VAR>category</VAR>, const char *<VAR>locale</VAR>);
     lconv *localeconv(void);
     
     char *_setlocale_r(void *<VAR>reent</VAR>,
         int <VAR>category</VAR>, const char *<VAR>locale</VAR>);
     lconv *_localeconv_r(void *<VAR>reent</VAR>);
     
</PRE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><STRONG>Description</STRONG><BR><CODE>setlocale</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the facility defined by ANSI C to condition the execution environment for international collating and formatting information;<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>localeconv</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>reports on the settings of the current locale.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">This is a minimal implementation, supporting only the required<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"POSIX"</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"C"</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>values for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>locale</VAR>; strings representing other locales are not honored unless _MB_CAPABLE is defined.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">If _MB_CAPABLE is defined, POSIX locale strings are allowed, following the form</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">language[_TERRITORY][.charset][@modifier]</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><CODE>"language"</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a two character string per ISO 639, or, if not available for a given language, a three character string per ISO 639-3.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"TERRITORY"</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a country code per ISO 3166. For<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"charset"</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"modifier"</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>see below.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Additionally to the POSIX specifier, the following extension is supported for backward compatibility with older implementations using newlib:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"C-charset"</CODE>. Instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"C-"</CODE>, you can also specify<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"C."</CODE>. Both variations allow to specify language neutral locales while using other charsets than ASCII, for instance<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"C.UTF-8"</CODE>, which keeps all settings as in the C locale, but uses the UTF-8 charset.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The following charsets are recognized:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"UTF-8"</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"JIS"</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"EUCJP"</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"SJIS"</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"KOI8-R"</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"KOI8-U"</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"GEORGIAN-PS"</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"PT154"</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"TIS-620"</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"ISO-8859-x"</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with 1 &lt;= x &lt;= 16, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"CPxxx"</CODE>with xxx in [437, 720, 737, 775, 850, 852, 855, 857, 858, 862, 866, 874, 932, 1125, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258].</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Charsets are case insensitive. For instance,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"EUCJP"</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"eucJP"</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are equivalent. Charset names with dashes can also be written without dashes, as in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"UTF8"</CODE>,<CODE>"iso88591"</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"koi8r"</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"EUCJP"</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"EUCKR"</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are also recognized with dash,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"EUC-JP"</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"EUC-KR"</CODE>.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Full support for all of the above charsets requires that newlib has been build with multibyte support and support for all ISO and Windows Codepage. Otherwise all singlebyte charsets are simply mapped to ASCII. Right now, only newlib for Cygwin is built with full charset support by default. Under Cygwin, this implementation additionally supports the charsets<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"GBK"</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"GB2312"</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"eucCN"</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"eucKR"</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"Big5"</CODE>. Cygwin does not support<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"JIS"</CODE>.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Cygwin additionally supports locales from the file /usr/share/locale/locale.alias.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">(<CODE>""</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is also accepted; if given, the settings are read from the corresponding LC_* environment variables and $LANG according to POSIX rules.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">This implementation also supports the modifier<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"cjknarrow"</CODE>, which affects how the functions<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>wcwidth</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>wcswidth</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>handle characters from the "CJK Ambiguous Width" category of characters described at http://www.unicode.org/reports/tr11/#Ambiguous. These characters have a width of 1 for singlebyte charsets and a width of 2 for multibyte charsets other than UTF-8. For UTF-8, their width depends on the language specifier: it is 2 for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"zh"</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(Chinese),<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"ja"</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(Japanese), and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"ko"</CODE>(Korean), and 1 for everything else. Specifying<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"cjknarrow"</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>forces a width of 1, independent of charset and language.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">If you use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>locale</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setlocale</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns a pointer to the string representing the current locale. The acceptable values for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>category</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are defined in `<CODE>locale.h</CODE>' as macros beginning with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"LC_"</CODE>.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><CODE>localeconv</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns a pointer to a structure (also defined in `<CODE>locale.h</CODE>') describing the locale-specific conventions currently in effect.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><CODE>_localeconv_r</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_setlocale_r</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are reentrant versions of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>localeconv</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setlocale</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>respectively. The extra argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>reent</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a pointer to a reentrancy structure.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><BR><STRONG>Returns</STRONG><BR>A successful call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setlocale</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns a pointer to a string associated with the specified category for the new locale. The string returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setlocale</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is such that a subsequent call using that string will restore that category (or all categories in case of LC_ALL), to that state. The application shall not modify the string returned which may be overwritten by a subsequent call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setlocale</CODE>. On error,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setlocale</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE>.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><CODE>localeconv</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns a pointer to a structure of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lconv</CODE>, which describes the formatting and collating conventions in effect (in this implementation, always those of the C locale).</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><BR><STRONG>Portability</STRONG><BR>ANSI C requires<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setlocale</CODE>, but the only locale required across all implementations is the C locale.