<H3 class=section style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">8.8<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strftime</CODE>&#8212;convert date and time to a formatted string</H3>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A name=index-strftime-439></A><STRONG>Synopsis</STRONG></P><PRE class=example style="FONT-WEIGHT: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">     #include &lt;time.h&gt;
     size_t strftime(char *<VAR>s</VAR>, size_t <VAR>maxsize</VAR>,
         const char *<VAR>format</VAR>, const struct tm *<VAR>timp</VAR>);
     
</PRE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><STRONG>Description</STRONG><BR><CODE>strftime</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>converts a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct tm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>representation of the time (at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>timp</VAR>) into a null-terminated string, starting at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and occupying no more than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>maxsize</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>characters.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">You control the format of the output using the string at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>format</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*</CODE><VAR>format</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can contain two kinds of specifications: text to be copied literally into the formatted string, and time conversion specifications. Time conversion specifications are two- and three-character sequences beginning with `<CODE>%</CODE>' (use `<CODE>%%</CODE>' to include a percent sign in the output). Each defined conversion specification selects only the specified field(s) of calendar time data from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*</CODE><VAR>timp</VAR>, and converts it to a string in one of the following ways:</P>
<DL style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<DT><CODE>%a</CODE></DT>
<DD>The abbreviated weekday name according to the current locale. [tm_wday]<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%A</CODE></DT>
<DD>The full weekday name according to the current locale. In the default "C" locale, one of `<CODE>Sunday</CODE>', `<CODE>Monday</CODE>', `<CODE>Tuesday</CODE>', `<CODE>Wednesday</CODE>', `<CODE>Thursday</CODE>', `<CODE>Friday</CODE>', `<CODE>Saturday</CODE>'. [tm_wday]<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%b</CODE></DT>
<DD>The abbreviated month name according to the current locale. [tm_mon]<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%B</CODE></DT>
<DD>The full month name according to the current locale. In the default "C" locale, one of `<CODE>January</CODE>', `<CODE>February</CODE>', `<CODE>March</CODE>', `<CODE>April</CODE>', `<CODE>May</CODE>', `<CODE>June</CODE>', `<CODE>July</CODE>', `<CODE>August</CODE>', `<CODE>September</CODE>', `<CODE>October</CODE>', `<CODE>November</CODE>', `<CODE>December</CODE>'. [tm_mon]<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%c</CODE></DT>
<DD>The preferred date and time representation for the current locale. [tm_sec, tm_min, tm_hour, tm_mday, tm_mon, tm_year, tm_wday]<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%C</CODE></DT>
<DD>The century, that is, the year divided by 100 then truncated. For 4-digit years, the result is zero-padded and exactly two characters; but for other years, there may a negative sign or more digits. In this way, `<CODE>%C%y</CODE>' is equivalent to `<CODE>%Y</CODE>'. [tm_year]<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%d</CODE></DT>
<DD>The day of the month, formatted with two digits (from `<CODE>01</CODE>' to `<CODE>31</CODE>'). [tm_mday]<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%D</CODE></DT>
<DD>A string representing the date, in the form `<CODE>"%m/%d/%y"</CODE>'. [tm_mday, tm_mon, tm_year]<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%e</CODE></DT>
<DD>The day of the month, formatted with leading space if single digit (from `<CODE>1</CODE>' to `<CODE>31</CODE>'). [tm_mday]<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%Ex</CODE></DT>
<DD>In some locales, the E modifier selects alternative representations of certain modifiers<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x</CODE>. In newlib, it is ignored, and treated as %<CODE>x</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%F</CODE></DT>
<DD>A string representing the ISO 8601:2000 date format, in the form `<CODE>"%Y-%m-%d"</CODE>'. [tm_mday, tm_mon, tm_year]<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%g</CODE></DT>
<DD>The last two digits of the week-based year, see specifier %G (from `<CODE>00</CODE>' to `<CODE>99</CODE>'). [tm_year, tm_wday, tm_yday]<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%G</CODE></DT>
<DD>The week-based year. In the ISO 8601:2000 calendar, week 1 of the year includes January 4th, and begin on Mondays. Therefore, if January 1st, 2nd, or 3rd falls on a Sunday, that day and earlier belong to the last week of the previous year; and if December 29th, 30th, or 31st falls on Monday, that day and later belong to week 1 of the next year. For consistency with %Y, it always has at least four characters. Example: "%G" for Saturday 2nd January 1999 gives "1998", and for Tuesday 30th December 1997 gives "1998". [tm_year, tm_wday, tm_yday]<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%h</CODE></DT>
<DD>Synonym for "%b". [tm_mon]<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%H</CODE></DT>
<DD>The hour (on a 24-hour clock), formatted with two digits (from `<CODE>00</CODE>' to `<CODE>23</CODE>'). [tm_hour]<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%I</CODE></DT>
<DD>The hour (on a 12-hour clock), formatted with two digits (from `<CODE>01</CODE>' to `<CODE>12</CODE>'). [tm_hour]<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%j</CODE></DT>
<DD>The count of days in the year, formatted with three digits (from `<CODE>001</CODE>' to `<CODE>366</CODE>'). [tm_yday]<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%k</CODE></DT>
<DD>The hour (on a 24-hour clock), formatted with leading space if single digit (from `<CODE>0</CODE>' to `<CODE>23</CODE>'). Non-POSIX extension (c.p. %I). [tm_hour]<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%l</CODE></DT>
<DD>The hour (on a 12-hour clock), formatted with leading space if single digit (from `<CODE>1</CODE>' to `<CODE>12</CODE>'). Non-POSIX extension (c.p. %H). [tm_hour]<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%m</CODE></DT>
<DD>The month number, formatted with two digits (from `<CODE>01</CODE>' to `<CODE>12</CODE>'). [tm_mon]<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%M</CODE></DT>
<DD>The minute, formatted with two digits (from `<CODE>00</CODE>' to `<CODE>59</CODE>'). [tm_min]<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%n</CODE></DT>
<DD>A newline character (`<CODE>\n</CODE>').<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%Ox</CODE></DT>
<DD>In some locales, the O modifier selects alternative digit characters for certain modifiers<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x</CODE>. In newlib, it is ignored, and treated as %<CODE>x</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%p</CODE></DT>
<DD>Either `<CODE>AM</CODE>' or `<CODE>PM</CODE>' as appropriate, or the corresponding strings for the current locale. [tm_hour]<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%P</CODE></DT>
<DD>Same as '<CODE>%p</CODE>', but in lowercase. This is a GNU extension. [tm_hour]<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%r</CODE></DT>
<DD>Replaced by the time in a.m. and p.m. notation. In the "C" locale this is equivalent to "%I:%M:%S %p". In locales which don't define a.m./p.m. notations, the result is an empty string. [tm_sec, tm_min, tm_hour]<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%R</CODE></DT>
<DD>The 24-hour time, to the minute. Equivalent to "%H:%M". [tm_min, tm_hour]<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%S</CODE></DT>
<DD>The second, formatted with two digits (from `<CODE>00</CODE>' to `<CODE>60</CODE>'). The value 60 accounts for the occasional leap second. [tm_sec]<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%t</CODE></DT>
<DD>A tab character (`<CODE>\t</CODE>').<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%T</CODE></DT>
<DD>The 24-hour time, to the second. Equivalent to "%H:%M:%S". [tm_sec, tm_min, tm_hour]<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%u</CODE></DT>
<DD>The weekday as a number, 1-based from Monday (from `<CODE>1</CODE>' to `<CODE>7</CODE>'). [tm_wday]<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%U</CODE></DT>
<DD>The week number, where weeks start on Sunday, week 1 contains the first Sunday in a year, and earlier days are in week 0. Formatted with two digits (from `<CODE>00</CODE>' to `<CODE>53</CODE>'). See also<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%W</CODE>. [tm_wday, tm_yday]<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%V</CODE></DT>
<DD>The week number, where weeks start on Monday, week 1 contains January 4th, and earlier days are in the previous year. Formatted with two digits (from `<CODE>01</CODE>' to `<CODE>53</CODE>'). See also<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%G</CODE>. [tm_year, tm_wday, tm_yday]<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%w</CODE></DT>
<DD>The weekday as a number, 0-based from Sunday (from `<CODE>0</CODE>' to `<CODE>6</CODE>'). [tm_wday]<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%W</CODE></DT>
<DD>The week number, where weeks start on Monday, week 1 contains the first Monday in a year, and earlier days are in week 0. Formatted with two digits (from `<CODE>00</CODE>' to `<CODE>53</CODE>'). [tm_wday, tm_yday]<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%x</CODE></DT>
<DD>Replaced by the preferred date representation in the current locale. In the "C" locale this is equivalent to "%m/%d/%y". [tm_mon, tm_mday, tm_year]<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%X</CODE></DT>
<DD>Replaced by the preferred time representation in the current locale. In the "C" locale this is equivalent to "%H:%M:%S". [tm_sec, tm_min, tm_hour]<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%y</CODE></DT>
<DD>The last two digits of the year (from `<CODE>00</CODE>' to `<CODE>99</CODE>'). [tm_year] (Implementation interpretation: always positive, even for negative years.)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%Y</CODE></DT>
<DD>The full year, equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%C%y</CODE>. It will always have at least four characters, but may have more. The year is accurate even when tm_year added to the offset of 1900 overflows an int. [tm_year]<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%z</CODE></DT>
<DD>The offset from UTC. The format consists of a sign (negative is west of Greewich), two characters for hour, then two characters for minutes (-hhmm or +hhmm). If tm_isdst is negative, the offset is unknown and no output is generated; if it is zero, the offset is the standard offset for the current time zone; and if it is positive, the offset is the daylight savings offset for the current timezone. The offset is determined from the TZ environment variable, as if by calling tzset(). [tm_isdst]<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%Z</CODE></DT>
<DD>The time zone name. If tm_isdst is negative, no output is generated. Otherwise, the time zone name is based on the TZ environment variable, as if by calling tzset(). [tm_isdst]<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%%</CODE></DT>
<DD>A single character, `<CODE>%</CODE>'.</DD></DL>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><BR><STRONG>Returns</STRONG><BR>When the formatted time takes up no more than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>maxsize</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>characters, the result is the length of the formatted string. Otherwise, if the formatting operation was abandoned due to lack of room, the result is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0</CODE>, and the string starting at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>s</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>corresponds to just those parts of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*</CODE><VAR>format</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>that could be completely filled in within the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>maxsize</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>limit.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><BR><STRONG>Portability</STRONG><BR>ANSI C requires<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strftime</CODE>, but does not specify the contents of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*</CODE><VAR>s</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>when the formatted string would require more than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>maxsize</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>characters. Unrecognized specifiers and fields of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>timp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that are out of range cause undefined results. Since some formats expand to 0 bytes, it is wise to set<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*</CODE><VAR>s</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to a nonzero value beforehand to distinguish between failure and an empty string. This implementation does not support<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>s</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>being NULL, nor overlapping<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>s</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>format</CODE>.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><CODE>strftime</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>requires no supporting OS subroutines.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><BR><STRONG>Bugs</STRONG><BR><CODE>strftime</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>ignores the LC_TIME category of the current locale, hard-coding the "C" locale settings.</P><BR class=Apple-interchange-newline>