<H3 class=section style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">12.2 Reentrant covers for OS subroutines</H3>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Since the system subroutines are used by other library routines that require reentrancy,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libc.a</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>provides cover routines (for example, the reentrant version of<CODE>fork</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_fork_r</CODE>). These cover routines are consistent with the other reentrant subroutines in this library, and achieve reentrancy by using a reserved global data block (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://sourceware.org/newlib/libc.html#Reentrancy">Reentrancy</A>).</P>
<DL style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<DT><CODE>_open_r</CODE><A name=index-g_t_005fopen_005fr-485></A></DT>
<DD>A reentrant version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>open</CODE>. It takes a pointer to the global data block, which holds<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>errno</CODE>.<PRE class=example>          int _open_r(void *<VAR>reent</VAR>,
              const char *<VAR>file</VAR>, int <VAR>flags</VAR>, int <VAR>mode</VAR>);
</PRE><BR></DD>
<DT><CODE>_close_r</CODE><A name=index-g_t_005fclose_005fr-486></A></DT>
<DD>A reentrant version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>close</CODE>. It takes a pointer to the global data block, which holds<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>errno</CODE>.<PRE class=example>          int _close_r(void *<VAR>reent</VAR>, int <VAR>fd</VAR>);
</PRE><BR></DD>
<DT><CODE>_lseek_r</CODE><A name=index-g_t_005flseek_005fr-487></A></DT>
<DD>A reentrant version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lseek</CODE>. It takes a pointer to the global data block, which holds<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>errno</CODE>.<PRE class=example>          off_t _lseek_r(void *<VAR>reent</VAR>,
              int <VAR>fd</VAR>, off_t <VAR>pos</VAR>, int <VAR>whence</VAR>);
</PRE><BR></DD>
<DT><CODE>_read_r</CODE><A name=index-g_t_005fread_005fr-488></A></DT>
<DD>A reentrant version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read</CODE>. It takes a pointer to the global data block, which holds<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>errno</CODE>.<PRE class=example>          long _read_r(void *<VAR>reent</VAR>,
              int <VAR>fd</VAR>, void *<VAR>buf</VAR>, size_t <VAR>cnt</VAR>);
</PRE><BR></DD>
<DT><CODE>_write_r</CODE><A name=index-g_t_005fwrite_005fr-489></A></DT>
<DD>A reentrant version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write</CODE>. It takes a pointer to the global data block, which holds<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>errno</CODE>.<PRE class=example>          long _write_r(void *<VAR>reent</VAR>,
              int <VAR>fd</VAR>, const void *<VAR>buf</VAR>, size_t <VAR>cnt</VAR>);
</PRE><BR></DD>
<DT><CODE>_fork_r</CODE><A name=index-g_t_005ffork_005fr-490></A></DT>
<DD>A reentrant version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fork</CODE>. It takes a pointer to the global data block, which holds<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>errno</CODE>.<PRE class=example>          int _fork_r(void *<VAR>reent</VAR>);
</PRE><BR></DD>
<DT><CODE>_wait_r</CODE><A name=index-g_t_005fwait_005fr-491></A></DT>
<DD>A reentrant version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>wait</CODE>. It takes a pointer to the global data block, which holds<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>errno</CODE>.<PRE class=example>          int _wait_r(void *<VAR>reent</VAR>, int *<VAR>status</VAR>);
</PRE><BR></DD>
<DT><CODE>_stat_r</CODE><A name=index-g_t_005fstat_005fr-492></A></DT>
<DD>A reentrant version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stat</CODE>. It takes a pointer to the global data block, which holds<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>errno</CODE>.<PRE class=example>          int _stat_r(void *<VAR>reent</VAR>,
              const char *<VAR>file</VAR>, struct stat *<VAR>pstat</VAR>);
</PRE><BR></DD>
<DT><CODE>_fstat_r</CODE><A name=index-g_t_005ffstat_005fr-493></A></DT>
<DD>A reentrant version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fstat</CODE>. It takes a pointer to the global data block, which holds<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>errno</CODE>.<PRE class=example>          int _fstat_r(void *<VAR>reent</VAR>,
              int <VAR>fd</VAR>, struct stat *<VAR>pstat</VAR>);
</PRE><BR></DD>
<DT><CODE>_link_r</CODE><A name=index-g_t_005flink_005fr-494></A></DT>
<DD>A reentrant version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>link</CODE>. It takes a pointer to the global data block, which holds<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>errno</CODE>.<PRE class=example>          int _link_r(void *<VAR>reent</VAR>,
              const char *<VAR>old</VAR>, const char *<VAR>new</VAR>);
</PRE><BR></DD>
<DT><CODE>_unlink_r</CODE><A name=index-g_t_005funlink_005fr-495></A></DT>
<DD>A reentrant version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unlink</CODE>. It takes a pointer to the global data block, which holds<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>errno</CODE>.<PRE class=example>          int _unlink_r(void *<VAR>reent</VAR>, const char *<VAR>file</VAR>);
</PRE><BR></DD>
<DT><CODE>_sbrk_r</CODE><A name=index-g_t_005fsbrk_005fr-496></A></DT>
<DD>A reentrant version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sbrk</CODE>. It takes a pointer to the global data block, which holds<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>errno</CODE>.<PRE class=example>          char *_sbrk_r(void *<VAR>reent</VAR>, size_t <VAR>incr</VAR>);</PRE></DD></DL>