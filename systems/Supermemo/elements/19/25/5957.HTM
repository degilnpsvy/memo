<H4 class=subsection style="FONT-SIZE: medium; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">13.1.2 Extract a value from argument list</H4>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A name=index-va_005farg-498></A><STRONG>Synopsis</STRONG></P><PRE class=example style="FONT-WEIGHT: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">     #include &lt;stdarg.h&gt;
     <VAR>type</VAR> va_arg(va_list <VAR>ap</VAR>, <VAR>type</VAR>);
</PRE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><STRONG>Description</STRONG><BR><CODE>va_arg</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the next unprocessed value from a variable argument list<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ap</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(which you must previously create with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>va_start</VAR>). Specify the type for the value as the second parameter to the macro,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR>.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">You may pass a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>va_list</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>object<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ap</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to a subfunction, and use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>va_arg</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>from the subfunction rather than from the function actually declared with an ellipsis in the header; however, in that case you may<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>only</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>va_arg</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>from the subfunction. ANSI C does not permit extracting successive values from a single variable-argument list from different levels of the calling stack.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">There is no mechanism for testing whether there is actually a next argument available; you might instead pass an argument count (or some other data that implies an argument count) as one of the fixed arguments in your function call.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><STRONG>Returns</STRONG><BR><CODE>va_arg</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the next argument, an object of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR>.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><STRONG>Portability</STRONG><BR>ANSI C requires<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>va_arg</CODE>.