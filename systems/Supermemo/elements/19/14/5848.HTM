<H3 class=section style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">4.68<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vfprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vsprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vsnprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vasprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vasnprintf</CODE>&#8212;format argument list</H3>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A name=index-vfprintf-325></A><A name=index-g_t_005fvfprintf_005fr-326></A><A name=index-vprintf-327></A><A name=index-g_t_005fvprintf_005fr-328></A><A name=index-vsprintf-329></A><A name=index-g_t_005fvsprintf_005fr-330></A><A name=index-vsnprintf-331></A><A name=index-g_t_005fvsnprintf_005fr-332></A><A name=index-vasprintf-333></A><A name=index-g_t_005fvasprintf_005fr-334></A><A name=index-vasnprintf-335></A><A name=index-g_t_005fvasnprintf_005fr-336></A><STRONG>Synopsis</STRONG></P><PRE class=example style="FONT-WEIGHT: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">     #include &lt;stdio.h&gt;
     #include &lt;stdarg.h&gt;
     int vprintf(const char *<VAR>fmt</VAR>, va_list <VAR>list</VAR>);
     int vfprintf(FILE *<VAR>fp</VAR>, const char *<VAR>fmt</VAR>, va_list <VAR>list</VAR>);
     int vsprintf(char *<VAR>str</VAR>, const char *<VAR>fmt</VAR>, va_list <VAR>list</VAR>);
     int vsnprintf(char *<VAR>str</VAR>, size_t <VAR>size</VAR>, const char *<VAR>fmt</VAR>,
         va_list <VAR>list</VAR>);
     int vasprintf(char **<VAR>strp</VAR>, const char *<VAR>fmt</VAR>, va_list <VAR>list</VAR>);
     char *vasnprintf(char *<VAR>str</VAR>, size_t *<VAR>size</VAR>, const char *<VAR>fmt</VAR>,
         va_list <VAR>list</VAR>);
     
     int _vprintf_r(struct _reent *<VAR>reent</VAR>, const char *<VAR>fmt</VAR>,
         va_list <VAR>list</VAR>);
     int _vfprintf_r(struct _reent *<VAR>reent</VAR>, FILE *<VAR>fp</VAR>,
         const char *<VAR>fmt</VAR>, va_list <VAR>list</VAR>);
     int _vsprintf_r(struct _reent *<VAR>reent</VAR>, char *<VAR>str</VAR>,
         const char *<VAR>fmt</VAR>, va_list <VAR>list</VAR>);
     int _vasprintf_r(struct _reent *<VAR>reent</VAR>, char **<VAR>str</VAR>,
         const char *<VAR>fmt</VAR>, va_list <VAR>list</VAR>);
     int _vsnprintf_r(struct _reent *<VAR>reent</VAR>, char *<VAR>str</VAR>,
         size_t <VAR>size</VAR>, const char *<VAR>fmt</VAR>, va_list <VAR>list</VAR>);
     char *_vasnprintf_r(struct _reent *<VAR>reent</VAR>, char *<VAR>str</VAR>,
         size_t *<VAR>size</VAR>, const char *<VAR>fmt</VAR>, va_list <VAR>list</VAR>);
     
</PRE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><STRONG>Description</STRONG><BR><CODE>vprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vfprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vasprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vsprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vsnprintf</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vasnprintf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are (respectively) variants of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>printf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>snprintf</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asnprintf</CODE>. They differ only in allowing their caller to pass the variable argument list as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>va_list</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>object (initialized by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>va_start</CODE>) rather than directly accepting a variable number of arguments. The caller is responsible for calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>va_end</CODE>.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><CODE>_vprintf_r</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_vfprintf_r</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_vasprintf_r</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_vsprintf_r</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_vsnprintf_r</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_vasnprintf_r</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are reentrant versions of the above.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><BR><STRONG>Returns</STRONG><BR>The return values are consistent with the corresponding functions.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><BR><STRONG>Portability</STRONG><BR>ANSI C requires<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vfprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vsprintf</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vsnprintf</CODE>. The remaining functions are newlib extensions.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Supporting OS subroutines required:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>close</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fstat</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>isatty</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lseek</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sbrk</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write</CODE>.