<P class=Default style="MARGIN: 0cm 0cm 0pt"><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 11.5pt">An unfortunate limitation of newlib's stdio library is that, with the exception of the </SPAN><SPAN lang=EN-US style="FONT-FAMILY: 'Courier New'; mso-bidi-font-size: 10.0pt"><FONT size=3>iprintf() </FONT></SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 11.5pt">function, it requires at least a minimal </SPAN><SPAN lang=EN-US style="FONT-FAMILY: 'Courier New'; mso-bidi-font-size: 10.0pt"><FONT size=3>malloc() </FONT></SPAN></FONT><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 11.5pt"><FONT class=extract>for proper operation.</FONT> Fortunately, newlib includes a pretty good dynamic memory allocator that is straightforward to set up and use. One can also build a </SPAN><SPAN lang=EN-US style="FONT-FAMILY: 'Courier New'; mso-bidi-font-size: 10.0pt"><FONT size=3>malloc() </FONT></SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 11.5pt">based on a fixed size memory block allocator, to eliminate fragmentation worries in systems where this is a concern. </SPAN>