<H3 class=section style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">4.60<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>printf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>snprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asnprintf</CODE>&#8212;format output</H3>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A name=index-fprintf-285></A><A name=index-g_t_005ffprintf_005fr-286></A><A name=index-printf-287></A><A name=index-g_t_005fprintf_005fr-288></A><A name=index-asprintf-289></A><A name=index-g_t_005fasprintf_005fr-290></A><A name=index-sprintf-291></A><A name=index-g_t_005fsprintf_005fr-292></A><A name=index-snprintf-293></A><A name=index-g_t_005fsnprintf_005fr-294></A><A name=index-asnprintf-295></A><A name=index-g_t_005fasnprintf_005fr-296></A><STRONG>Synopsis</STRONG></P><PRE class=example style="FONT-WEIGHT: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">     #include &lt;stdio.h&gt;
     
     int printf(const char *<VAR>format</VAR>, ...);
     int fprintf(FILE *<VAR>fd</VAR>, const char *<VAR>format</VAR>, ...);
     int sprintf(char *<VAR>str</VAR>, const char *<VAR>format</VAR>, ...);
     int snprintf(char *<VAR>str</VAR>, size_t <VAR>size</VAR>, const char *<VAR>format</VAR>,
         ...);
     int asprintf(char **<VAR>strp</VAR>, const char *<VAR>format</VAR>, ...);
     char *asnprintf(char *<VAR>str</VAR>, size_t *<VAR>size</VAR>, const char *<VAR>format</VAR>,
         ...);
     
     int _printf_r(struct _reent *<VAR>ptr</VAR>, const char *<VAR>format</VAR>, ...);
     int _fprintf_r(struct _reent *<VAR>ptr</VAR>, FILE *<VAR>fd</VAR>,
         const char *<VAR>format</VAR>, ...);
     int _sprintf_r(struct _reent *<VAR>ptr</VAR>, char *<VAR>str</VAR>,
         const char *<VAR>format</VAR>, ...);
     int _snprintf_r(struct _reent *<VAR>ptr</VAR>, char *<VAR>str</VAR>, size_t <VAR>size</VAR>,
         const char *<VAR>format</VAR>, ...);
     int _asprintf_r(struct _reent *<VAR>ptr</VAR>, char **<VAR>strp</VAR>,
         const char *<VAR>format</VAR>, ...);
     char *_asnprintf_r(struct _reent *<VAR>ptr</VAR>, char *<VAR>str</VAR>,
         size_t *<VAR>size</VAR>, const char *<VAR>format</VAR>, ...);
     
</PRE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><STRONG>Description</STRONG><BR><CODE>printf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>accepts a series of arguments, applies to each a format specifier from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*</CODE><VAR>format</VAR>, and writes the formatted data to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stdout</CODE>, without a terminating NUL character. The behavior of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>printf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is undefined if there are not enough arguments for the format.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>printf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns when it reaches the end of the format string. If there are more arguments than the format requires, excess arguments are ignored.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><CODE>fprintf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>printf</CODE>, except that output is directed to the stream<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fd</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>rather than<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stdout</CODE>.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><CODE>sprintf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>printf</CODE>, except that output is directed to the buffer<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR>, and a terminating NUL is output. Behavior is undefined if more output is generated than the buffer can hold.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><CODE>snprintf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sprintf</CODE>, except that output is limited to at most<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes, including the terminating<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NUL</CODE>. As a special case, if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 0,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be NULL, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>snprintf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>merely calculates how many bytes would be printed.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><CODE>asprintf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sprintf</CODE>, except that the output is stored in a dynamically allocated buffer,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pstr</VAR>, which should be freed later with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>free</CODE>.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><CODE>asnprintf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sprintf</CODE>, except that the return type is either the original<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>if it was large enough, or a dynamically allocated string if the output exceeds *<VAR>size</VAR>; the length of the result is returned in *<VAR>size</VAR>. When dynamic allocation occurs, the contents of the original<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may have been modified.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">For<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>snprintf</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asnprintf</CODE>, the behavior is undefined if the output<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*</CODE><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>overlaps with one of the arguments. Behavior is also undefined if the argument for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%n</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>within<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*</CODE><VAR>format</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>overlaps another argument.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><VAR>format</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a pointer to a character string containing two types of objects: ordinary characters (other than<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%</CODE>), which are copied unchanged to the output, and conversion specifications, each of which is introduced by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%</CODE>. (To include<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the output, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%%</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the format string.) A conversion specification has the following form:</P><PRE class=smallexample style="FONT-WEIGHT: normal; FONT-SIZE: smaller; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">            %[<VAR>pos</VAR>][<VAR>flags</VAR>][<VAR>width</VAR>][.<VAR>prec</VAR>][<VAR>size</VAR>]<VAR>type</VAR>
</PRE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The fields of the conversion specification have the following meanings:</P>
<UL style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">
<LI><VAR>pos</VAR> 
<P>Conversions normally consume arguments in the order that they are presented. However, it is possible to consume arguments out of order, and reuse an argument for more than one conversion specification (although the behavior is undefined if the same argument is requested with different types), by specifying<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pos</VAR>, which is a decimal integer followed by '$'. The integer must be between 1 and &lt;NL_ARGMAX&gt; from limits.h, and if argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%n$</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is requested, all earlier arguments must be requested somewhere within<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>format</VAR>. If positional parameters are used, then all conversion specifications except for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%%</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>must specify a position. This positional parameters method is a POSIX extension to the C standard definition for the functions.</P>
<LI><VAR>flags</VAR> 
<P><VAR>flags</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an optional sequence of characters which control output justification, numeric signs, decimal points, trailing zeros, and octal and hex prefixes. The flag characters are minus (<CODE>-</CODE>), plus (<CODE>+</CODE>), space ( ), zero (<CODE>0</CODE>), sharp (<CODE>#</CODE>), and quote (<CODE>'</CODE>). They can appear in any combination, although not all flags can be used for all conversion specification types.</P>
<DL>
<DT><CODE>'</CODE> 
<DD>A POSIX extension to the C standard. However, this implementation presently treats it as a no-op, which is the default behavior for the C locale, anyway. (If it did what it is supposed to, when<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>were<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>i</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>d</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>u</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>f</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>F</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>g</CODE>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>G</CODE>, the integer portion of the conversion would be formatted with thousands' grouping wide characters.)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-</CODE> 
<DD>The result of the conversion is left justified, and the right is padded with blanks. If you do not use this flag, the result is right justified, and padded on the left.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>+</CODE> 
<DD>The result of a signed conversion (as determined by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>d</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>i</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>a</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>A</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>e</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>E</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>f</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>F</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>g</CODE>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>G</CODE>) will always begin with a plus or minus sign. (If you do not use this flag, positive values do not begin with a plus sign.)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>" " (space)</CODE> 
<DD>If the first character of a signed conversion specification is not a sign, or if a signed conversion results in no characters, the result will begin with a space. If the space ( ) flag and the plus (<CODE>+</CODE>) flag both appear, the space flag is ignored.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>0</CODE> 
<DD>If the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>character is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>d</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>i</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>o</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>u</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>X</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>a</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>A</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>e</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>E</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>f</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>F</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>g</CODE>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>G</CODE>: leading zeros are used to pad the field width (following any indication of sign or base); no spaces are used for padding. If the zero (<CODE>0</CODE>) and minus (<CODE>-</CODE>) flags both appear, the zero (<CODE>0</CODE>) flag will be ignored. For<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>d</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>i</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>o</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>u</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>X</CODE>conversions, if a precision<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>prec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified, the zero (<CODE>0</CODE>) flag is ignored. 
<P>Note that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is interpreted as a flag, not as the beginning of a field width.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>#</CODE> 
<DD>The result is to be converted to an alternative form, according to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>character: 
<DL>
<DT><CODE>o</CODE> 
<DD>Increases precision to force the first digit of the result to be a zero.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>x</CODE> 
<DD>A non-zero result will have a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0x</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>prefix.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>X</CODE> 
<DD>A non-zero result will have a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0X</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>prefix.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>a, A, e, E, f, or F</CODE> 
<DD>The result will always contain a decimal point even if no digits follow the point. (Normally, a decimal point appears only if a digit follows it.) Trailing zeros are removed.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>g or G</CODE> 
<DD>The result will always contain a decimal point even if no digits follow the point. Trailing zeros are not removed.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>all others</CODE> 
<DD>Undefined.</DD></DL></DD></DL>
<LI><VAR>width</VAR> 
<P><VAR>width</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an optional minimum field width. You can either specify it directly as a decimal integer, or indirectly by using instead an asterisk (<CODE>*</CODE>), in which case an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument is used as the field width. If positional arguments are used, then the width must also be specified positionally as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*m$</CODE>, with m as a decimal integer. Negative field widths are treated as specifying the minus (<CODE>-</CODE>) flag for left justfication, along with a positive field width. The resulting format may be wider than the specified width.</P>
<LI><VAR>prec</VAR> 
<P><VAR>prec</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an optional field; if present, it is introduced with `<CODE>.</CODE>' (a period). You can specify the precision either directly as a decimal integer or indirectly by using an asterisk (<CODE>*</CODE>), in which case an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument is used as the precision. If positional arguments are used, then the precision must also be specified positionally as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*m$</CODE>, with m as a decimal integer. Supplying a negative precision is equivalent to omitting the precision. If only a period is specified the precision is zero. The effect depends on the conversion<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR>.</P>
<DL>
<DT><CODE>d, i, o, u, x, or X</CODE> 
<DD>Minimum number of digits to appear. If no precision is given, defaults to 1.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>a or A</CODE> 
<DD>Number of digits to appear after the decimal point. If no precision is given, the precision defaults to the minimum needed for an exact representation.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>e, E, f or F</CODE> 
<DD>Number of digits to appear after the decimal point. If no precision is given, the precision defaults to 6.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>g or G</CODE> 
<DD>Maximum number of significant digits. A precision of 0 is treated the same as a precision of 1. If no precision is given, the precision defaults to 6.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>s or S</CODE> 
<DD>Maximum number of characters to print from the string. If no precision is given, the entire string is printed.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>all others</CODE> 
<DD>undefined.</DD></DL>
<LI><VAR>size</VAR> 
<P><VAR>size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an optional modifier that changes the data type that the corresponding argument has. Behavior is unspecified if a size is given that does not match the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR>.</P>
<DL>
<DT><CODE>hh</CODE> 
<DD>With<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>d</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>i</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>o</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>u</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x</CODE>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>X</CODE>, specifies that the argument should be converted to a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>signed char</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unsigned char</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>before printing. 
<P>With<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>n</CODE>, specifies that the argument is a pointer to a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>signed char</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>h</CODE> 
<DD>With<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>d</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>i</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>o</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>u</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x</CODE>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>X</CODE>, specifies that the argument should be converted to a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>short</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unsigned short</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>before printing. 
<P>With<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>n</CODE>, specifies that the argument is a pointer to a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>short</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>l</CODE> 
<DD>With<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>d</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>i</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>o</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>u</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x</CODE>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>X</CODE>, specifies that the argument is a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unsigned long</CODE>. 
<P>With<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>c</CODE>, specifies that the argument has type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>wint_t</CODE>.</P>
<P>With<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>s</CODE>, specifies that the argument is a pointer to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>wchar_t</CODE>.</P>
<P>With<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>n</CODE>, specifies that the argument is a pointer to a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long</CODE>.</P>
<P>With<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>a</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>A</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>e</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>E</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>f</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>F</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>g</CODE>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>G</CODE>, has no effect (because of vararg promotion rules, there is no need to distinguish between<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>float</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>double</CODE>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>ll</CODE> 
<DD>With<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>d</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>i</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>o</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>u</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x</CODE>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>X</CODE>, specifies that the argument is a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long long</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unsigned long long</CODE>. 
<P>With<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>n</CODE>, specifies that the argument is a pointer to a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long long</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>j</CODE> 
<DD>With<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>d</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>i</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>o</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>u</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x</CODE>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>X</CODE>, specifies that the argument is an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>intmax_t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>uintmax_t</CODE>. 
<P>With<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>n</CODE>, specifies that the argument is a pointer to an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>intmax_t</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>z</CODE> 
<DD>With<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>d</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>i</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>o</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>u</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x</CODE>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>X</CODE>, specifies that the argument is a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>size_t</CODE>. 
<P>With<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>n</CODE>, specifies that the argument is a pointer to a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>size_t</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>t</CODE> 
<DD>With<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>d</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>i</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>o</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>u</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x</CODE>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>X</CODE>, specifies that the argument is a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ptrdiff_t</CODE>. 
<P>With<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>n</CODE>, specifies that the argument is a pointer to a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ptrdiff_t</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>L</CODE> 
<DD>With<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>a</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>A</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>e</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>E</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>f</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>F</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>g</CODE>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>G</CODE>, specifies that the argument is a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long double</CODE>.</DD></DL>
<LI><VAR>type</VAR> 
<P><VAR>type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>specifies what kind of conversion<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>printf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>performs. Here is a table of these:</P>
<DL>
<DT><CODE>%</CODE> 
<DD>Prints the percent character (<CODE>%</CODE>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>c</CODE> 
<DD>Prints<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arg</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as single character. If the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>l</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>size specifier is in effect, a multibyte character is printed.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>C</CODE> 
<DD>Short for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%lc</CODE>. A POSIX extension to the C standard.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>s</CODE> 
<DD>Prints the elements of a pointer to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>until the precision or a null character is reached. If the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>l</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>size specifier is in effect, the pointer is to an array of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>wchar_t</CODE>, and the string is converted to multibyte characters before printing.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>S</CODE> 
<DD>Short for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%ls</CODE>. A POSIX extension to the C standard.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>d or i</CODE> 
<DD>Prints a signed decimal integer; takes an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int</CODE>. Leading zeros are inserted as necessary to reach the precision. A value of 0 with a precision of 0 produces an empty string.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>D</CODE> 
<DD>Newlib extension, short for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%ld</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>o</CODE> 
<DD>Prints an unsigned octal integer; takes an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unsigned</CODE>. Leading zeros are inserted as necessary to reach the precision. A value of 0 with a precision of 0 produces an empty string.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>O</CODE> 
<DD>Newlib extension, short for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%lo</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>u</CODE> 
<DD>Prints an unsigned decimal integer; takes an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unsigned</CODE>. Leading zeros are inserted as necessary to reach the precision. A value of 0 with a precision of 0 produces an empty string.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>U</CODE> 
<DD>Newlib extension, short for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%lu</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>x</CODE> 
<DD>Prints an unsigned hexadecimal integer (using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>abcdef</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as digits beyond<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>9</CODE>); takes an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unsigned</CODE>. Leading zeros are inserted as necessary to reach the precision. A value of 0 with a precision of 0 produces an empty string.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>X</CODE> 
<DD>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x</CODE>, but uses<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ABCDEF</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as digits beyond<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>9</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>f</CODE> 
<DD>Prints a signed value of the form<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>[-]9999.9999</CODE>, with the precision determining how many digits follow the decimal point; takes a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>double</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(remember that<CODE>float</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>promotes to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>double</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a vararg). The low order digit is rounded to even. If the precision results in at most DECIMAL_DIG digits, the result is rounded correctly; if more than DECIMAL_DIG digits are printed, the result is only guaranteed to round back to the original value. 
<P>If the value is infinite, the result is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>inf</CODE>, and no zero padding is performed. If the value is not a number, the result is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nan</CODE>, and no zero padding is performed.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>F</CODE> 
<DD>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>f</CODE>, but uses<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>INF</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NAN</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for non-finite numbers.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>e</CODE> 
<DD>Prints a signed value of the form<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>[-]9.9999e[+|-]999</CODE>; takes a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>double</CODE>. The digit before the decimal point is non-zero if the value is non-zero. The precision determines how many digits appear between<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>e</CODE>, and the exponent always contains at least two digits. The value zero has an exponent of zero. If the value is not finite, it is printed like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>f</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>E</CODE> 
<DD>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>e</CODE>, but using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>E</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to introduce the exponent, and like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>F</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for non-finite values.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>g</CODE> 
<DD>Prints a signed value in either<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>e</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form, based on the given value and precision&#8212;an exponent less than -4 or greater than the precision selects the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>e</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form. Trailing zeros and the decimal point are printed only if necessary; takes a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>double</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>G</CODE> 
<DD>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>g</CODE>, except use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>F</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>E</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>form.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>a</CODE> 
<DD>Prints a signed value of the form<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>[-]0x1.ffffp[+|-]9</CODE>; takes a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>double</CODE>. The letters<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>abcdef</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are used for digits beyond<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>9</CODE>. The precision determines how many digits appear after the decimal point. The exponent contains at least one digit, and is a decimal value representing the power of 2; a value of 0 has an exponent of 0. Non-finite values are printed like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>f</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>A</CODE> 
<DD>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>a</CODE>, except uses<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>X</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>P</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ABCDEF</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead of lower case.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>n</CODE> 
<DD>Takes a pointer to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int</CODE>, and stores a count of the number of bytes written so far. No output is created.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>p</CODE> 
<DD>Takes a pointer to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>void</CODE>, and prints it in an implementation-defined format. This implementation is similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%#tx</CODE>), except that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0x</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>appears even for the NULL pointer.</DD></DL></LI></UL>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><CODE>_printf_r</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_fprintf_r</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_asprintf_r</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_sprintf_r</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_snprintf_r</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_asnprintf_r</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are simply reentrant versions of the functions above.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><BR><STRONG>Returns</STRONG><BR>On success,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sprintf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asprintf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>return the number of bytes in the output string, except the concluding<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NUL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not counted.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>snprintf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the number of bytes that would be in the output string, except the concluding<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NUL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not counted.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>printf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fprintf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>return the number of characters transmitted.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asnprintf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the original<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>if there was enough room, otherwise it returns an allocated string.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">If an error occurs, the result of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>printf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>snprintf</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asprintf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a negative value, and the result of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asnprintf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is NULL. No error returns occur for<CODE>sprintf</CODE>. For<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>printf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>errno</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be set according to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fputc</CODE>. For<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asprintf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asnprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>errno</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be set to ENOMEM if allocation fails, and for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>snprintf</CODE>,<CODE>errno</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be set to EOVERFLOW if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or the output length exceeds INT_MAX.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><BR><STRONG>Bugs</STRONG><BR>The &#8220;&#8221;' (quote) flag does not work when locale's thousands_sep is not empty.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><BR><STRONG>Portability</STRONG><BR>ANSI C requires<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>printf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sprintf</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>snprintf</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asprintf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asnprintf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are newlib extensions.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The ANSI C standard specifies that implementations must support at least formatted output of up to 509 characters. This implementation has no inherent limit.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Depending on how newlib was configured, not all format specifiers are supported.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Supporting OS subroutines required:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>close</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fstat</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>isatty</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lseek</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sbrk</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write</CODE>.