<H3 class=section style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; -webkit-text-stroke-width: 0px">4.29<SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT class=extract><CODE>funopen</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fropen</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fwopen</CODE>&#8212;open a stream with custom callbacks</FONT></H3>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; -webkit-text-stroke-width: 0px"><A name=index-funopen-208></A><A name=index-fropen-209></A><A name=index-fwopen-210></A><STRONG>Synopsis</STRONG></P><PRE class=example style="FONT-WEIGHT: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; -webkit-text-stroke-width: 0px">     #include &lt;stdio.h&gt;
     FILE *funopen(const void *<VAR>cookie</VAR>,
         int (*<VAR>readfn</VAR>) (void *cookie, char *buf, int n),
         int (*<VAR>writefn</VAR>) (void *cookie, const char *buf, int n),
         fpos_t (*<VAR>seekfn</VAR>) (void *cookie, fpos_t off, int whence),
         int (*<VAR>closefn</VAR>) (void *cookie));
     FILE *fropen(const void *<VAR>cookie</VAR>,
         int (*<VAR>readfn</VAR>) (void *cookie, char *buf, int n));
     FILE *fwopen(const void *<VAR>cookie</VAR>,
         int (*<VAR>writefn</VAR>) (void *cookie, const char *buf, int n));
     
</PRE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; -webkit-text-stroke-width: 0px"><STRONG>Description</STRONG><BR><CODE>funopen</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>creates a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>FILE</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>stream where I/O is performed using custom callbacks. At least one of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>readfn</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>writefn</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be provided, which determines whether the stream behaves with mode &lt;"r"&gt;, &lt;"w"&gt;, or &lt;"r+"&gt;.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; -webkit-text-stroke-width: 0px"><VAR>readfn</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should return -1 on failure, or else the number of bytes read (0 on EOF). It is similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read</CODE>, except that &lt;int&gt; rather than &lt;size_t&gt; bounds a transaction size, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cookie</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be passed as the first argument. A NULL<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>readfn</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>makes attempts to read the stream fail.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; -webkit-text-stroke-width: 0px"><VAR>writefn</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should return -1 on failure, or else the number of bytes written. It is similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write</CODE>, except that &lt;int&gt; rather than &lt;size_t&gt; bounds a transaction size, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cookie</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be passed as the first argument. A NULL<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>writefn</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>makes attempts to write the stream fail.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; -webkit-text-stroke-width: 0px"><VAR>seekfn</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should return (fpos_t)-1 on failure, or else the current file position. It is similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lseek</CODE>, except that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cookie</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be passed as the first argument. A NULL<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>seekfn</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>makes the stream behave similarly to a pipe in relation to stdio functions that require positioning. This implementation assumes fpos_t and off_t are the same type.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; -webkit-text-stroke-width: 0px"><VAR>closefn</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should return -1 on failure, or 0 on success. It is similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>close</CODE>, except that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cookie</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be passed as the first argument. A NULL<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>closefn</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>merely flushes all data then lets<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fclose</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>succeed. A failed close will still invalidate the stream.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; -webkit-text-stroke-width: 0px">Read and write I/O functions are allowed to change the underlying buffer on fully buffered or line buffered streams by calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setvbuf</CODE>. They are also not required to completely fill or empty the buffer. They are not, however, allowed to change streams from unbuffered to buffered or to change the state of the line buffering flag. They must also be prepared to have read or write calls occur on buffers other than the one most recently specified.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; -webkit-text-stroke-width: 0px">The functions<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fropen</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fwopen</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are convenience macros around<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>funopen</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that only use the specified callback.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; -webkit-text-stroke-width: 0px"><BR><STRONG>Returns</STRONG><BR>The return value is an open FILE pointer on success. On error,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>errno</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be set to EINVAL if a function pointer is missing, ENOMEM if the stream cannot be created, or EMFILE if too many streams are already open.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; -webkit-text-stroke-width: 0px"><BR><STRONG>Portability</STRONG><BR>This function is a newlib extension, copying the prototype from BSD. It is not portable. See also the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fopencookie</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>interface from Linux.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; -webkit-text-stroke-width: 0px">Supporting OS subroutines required:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sbrk</CODE>.