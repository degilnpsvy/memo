<H3 class=section style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">4.31<SPAN class=Apple-converted-space>&nbsp;</SPAN><FONT class=extract><CODE>fwrite</CODE>&#8212;write array elements</FONT></H3>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A name=index-fwrite-213></A><A name=index-g_t_005ffwrite_005fr-214></A><STRONG>Synopsis</STRONG></P><PRE class=example style="FONT-WEIGHT: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">     #include &lt;stdio.h&gt;
     size_t fwrite(const void *<VAR>buf</VAR>, size_t <VAR>size</VAR>,
         size_t <VAR>count</VAR>, FILE *<VAR>fp</VAR>);
     
     #include &lt;stdio.h&gt;
     size_t _fwrite_r(struct _reent *<VAR>ptr</VAR>, const void *<VAR>buf</VAR>, size_t <VAR>size</VAR>,
         size_t <VAR>count</VAR>, FILE *<VAR>fp</VAR>);
     
</PRE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><STRONG>Description</STRONG><BR><CODE>fwrite</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attempts to copy, starting from the memory location<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>buf</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>elements (each of size<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR>) into the file or stream identified by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fp</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fwrite</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may copy fewer elements than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>if an error intervenes.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><CODE>fwrite</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>also advances the file position indicator (if any) for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fp</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>by the number of<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>characters</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>actually written.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><CODE>_fwrite_r</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is simply the reentrant version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fwrite</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that takes an additional reentrant structure argument:<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ptr</VAR>.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><BR><STRONG>Returns</STRONG><BR>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fwrite</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>succeeds in writing all the elements you specify, the result is the same as the argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>count</VAR>. In any event, the result is the number of complete elements that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fwrite</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>copied to the file.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><BR><STRONG>Portability</STRONG><BR>ANSI C requires<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fwrite</CODE>.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">Supporting OS subroutines required:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>close</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fstat</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>isatty</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lseek</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sbrk</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write</CODE>.