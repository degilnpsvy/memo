<H3 class=section style="WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">4.40<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getwchar</CODE>&#8212;read a wide character from standard input</H3>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><A name=index-getwchar-228></A><A name=index-g_t_005fgetwchar_005fr-229></A><STRONG>Synopsis</STRONG></P><PRE class=example style="FONT-WEIGHT: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; LINE-HEIGHT: normal; FONT-STYLE: normal; LETTER-SPACING: normal; FONT-VARIANT: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">     #include &lt;wchar.h&gt;
     wint_t getwchar(void);
     
     wint_t _getwchar_r(struct _reent *<VAR>reent</VAR>);
     
</PRE>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><STRONG>Description</STRONG><BR><CODE>getwchar</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function or macro is the wide character equivalent of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getchar</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function. You can use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getwchar</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to get the next wide character from the standard input stream. As a side effect,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getwchar</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>advances the standard input's current position indicator.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">The alternate function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_getwchar_r</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a reentrant version. The extra argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>reent</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a pointer to a reentrancy structure.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><BR><STRONG>Returns</STRONG><BR>The next wide character cast to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>wint_t</CODE>, unless there is no more data, or the host system reports a read error; in either of these situations,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getwchar</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns<CODE>WEOF</CODE>.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px">You can distinguish the two situations that cause an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>WEOF</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>result by using `<CODE>ferror(stdin)</CODE>' and `<CODE>feof(stdin)</CODE>'.</P>
<P style="WORD-SPACING: 0px; FONT: medium Simsun; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; orphans: auto; widows: auto; -webkit-text-stroke-width: 0px"><BR><STRONG>Portability</STRONG><BR>C99