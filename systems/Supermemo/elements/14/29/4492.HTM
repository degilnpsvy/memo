<SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: &#23435;&#20307;; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">mad s,t</SPAN>
<P></P></TD><TD style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: #ffffff; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: #ffffff; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid; HEIGHT: 28.5pt; BACKGROUND-COLOR: transparent; mso-border-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt">
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: &#23435;&#20307;; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">32-bit integer multiply-accumulate, standard in MIPS32. The two registers are multiplied with full precision and accumulated:<BR>hilo = hilo + ((long long) s * (long long) t);</SPAN></P></TD></TR><TR style="HEIGHT: 42.75pt; mso-yfti-irow: 142"><TD style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: #ffffff; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: windowtext 1pt solid; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid; HEIGHT: 42.75pt; BACKGROUND-COLOR: transparent; mso-border-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt">
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: &#23435;&#20307;; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">madu s,t</SPAN></P></TD><TD style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: #ffffff; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: #ffffff; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid; HEIGHT: 42.75pt; BACKGROUND-COLOR: transparent; mso-border-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt">
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: &#23435;&#20307;; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">Same but unsigned:<BR>hilo = hilo+((unsigned long long)s * (unsigned long long)t);</SPAN></P></TD></TR><TR style="HEIGHT: 71.25pt; mso-yfti-irow: 143"><TD style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: #ffffff; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: windowtext 1pt solid; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid; HEIGHT: 71.25pt; BACKGROUND-COLOR: transparent; mso-border-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt">
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: &#23435;&#20307;; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">madd d,s,t<BR>maddu d,s,t</SPAN></P></TD><TD style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: #ffffff; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: #ffffff; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid; HEIGHT: 71.25pt; BACKGROUND-COLOR: transparent; mso-border-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt">
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: &#23435;&#20307;; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">Integer multiply-accumulate with integral write of result to a general register (signed and unsigned versions). The general-register write is only implemented by Toshiba 3900 series cores, with this unique name. But note that in the case where d is actually zero, this is compatible with the MIPS32 standard mad/madu.<BR>hilo += (long long) s * (long long) t;<BR>d = lo;</SPAN></P></TD></TR><TR style="HEIGHT: 28.5pt; mso-yfti-irow: 144"><TD style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: #ffffff; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: windowtext 1pt solid; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid; HEIGHT: 28.5pt; BACKGROUND-COLOR: transparent; mso-border-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt">
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: &#23435;&#20307;; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">madd16 s,t</SPAN></P></TD><TD style="BORDER-RIGHT: windowtext 1pt solid; PADDING-RIGHT: 5.4pt; BORDER-TOP: #ffffff; PADDING-LEFT: 5.4pt; PADDING-BOTTOM: 0cm; BORDER-LEFT: #ffffff; PADDING-TOP: 0cm; BORDER-BOTTOM: windowtext 1pt solid; HEIGHT: 28.5pt; BACKGROUND-COLOR: transparent; mso-border-alt: solid windowtext .5pt; mso-border-left-alt: solid windowtext .5pt; mso-border-top-alt: solid windowtext .5pt">
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: &#23435;&#20307;; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">NEC Vr4100-specific integer multiply-accumulate; handles only 16-bit operands:<BR>lo = lo + ((short)s * (short)t);</SPAN></P></TD></TR>