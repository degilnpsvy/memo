<B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Bold-0-1000-21; mso-bidi-font-family: Minion-Bold-0-1000-21; mso-font-kerning: 0pt">15.1.1 </SPAN></B><B><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-BoldItalic-0-1000-27; mso-bidi-font-family: Minion-BoldItalic-0-1000-27; mso-font-kerning: 0pt">DMA Device Accesses</SPAN></I></B> 
<P></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">DMA controllers write memory (leaving cache contents out-of-date) or read it (perhaps missing cached data not yet written back). On some systems</SPAN><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">&#8212;<SPAN lang=EN-US>particularly x86 PCs</SPAN>&#8212;<SPAN lang=EN-US>the DMA controllers find some way to tell the hardware cache controller about their transfers, and the cache controller automatically invalidates or writes back cache contents as required to make the whole process transparent, just as though the CPU was reading and writing raw memory. Such a system is called </SPAN>&#8220;<SPAN lang=EN-US>I/O-cache coherent</SPAN>&#8221;<SPAN lang=EN-US> or more often just </SPAN>&#8220;<SPAN lang=EN-US>I/O coherent.</SPAN>&#8221;<SPAN lang=EN-US></SPAN></SPAN></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt"><FONT class=extract>Few MIPS systems are I/O-cache coherent. In most cases, a DMA transfer will take place without any notification to the cache logic, and the device driver software must manage the caches to make sure that no stale data in cache or memory is used.</FONT></SPAN></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">Linux has a DMA API that exports routines to device drivers that manage DMA data flow (many of the routines become null in an I/O coherent system). You can read about it in the documentation provided with the Linux kernel sources, which includes </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-8r-0-1000-34; mso-bidi-font-family: Courier-8r-0-1000-34; mso-font-kerning: 0pt">Documentation/DMA-API.txt</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">. In fact, if you</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">re writing or porting a device driver, you should read that. When a driver asks to allocate a buffer, it can choose:</SPAN></FONT></P>
<P><FONT class=extract><I><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Italic-0-1000-33; mso-bidi-font-family: Minion-Italic-0-1000-33; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>Consistent</SPAN>&#8221;<SPAN lang=EN-US> memory</SPAN></SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">: Linux guarantees that </SPAN><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>consistent</SPAN>&#8221;<SPAN lang=EN-US> memory is I/O coherent, possibly at some cost to performance. On a MIPS CPU this is likely to be uncached, and the cost to performance is considerable. But consistent buffers are the best way to handle small memory-resident control structures for complex device controllers.</SPAN></SPAN></FONT></P>
<P><FONT class=extract><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Italic-0-1000-33; mso-bidi-font-family: Minion-Italic-0-1000-33; mso-font-kerning: 0pt">Using nonconsistent memory for buffers</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">: Since consistent memory will be uncached for many MIPS systems, it can lead to very poor performance to use it for large DMA buffers. So for most regular DMA, the API offers calls with names like </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-8r-0-1000-34; mso-bidi-font-family: Courier-8r-0-1000-34; mso-font-kerning: 0pt">dma map xx()</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">. They provide buffers suitable for DMA, but the buffers won</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">t be I/O coherent unless the system makes univeral coherence cheap. </SPAN></FONT></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">The kernel memory allocator makes sure the buffer is in a memory region that DMA can reach, segregates different buffers so they don</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">t share the same cache lines, and provides you with an address in a form usable by the DMA controller.</SPAN></FONT></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">Since this is not coherent, there are calls that operate on the buffer and do the necessary cache invalidation or write-back operations before or after DMA: They are called </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-8r-0-1000-34; mso-bidi-font-family: Courier-8r-0-1000-34; mso-font-kerning: 0pt">dma sync xx()</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">, and the API includes instructions on when and how to call these functions.</SPAN></FONT></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">For genuinely coherent hardware, the </SPAN><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>sync</SPAN>&#8221;<SPAN lang=EN-US> functions are null. The language of the API documentation is unfortunate here. There is a little-used extension to the API whose function names contain the word </SPAN>&#8220;<SPAN lang=EN-US>noncoherent,</SPAN>&#8221;<SPAN lang=EN-US> but you should </SPAN></SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Italic-0-1000-33; mso-bidi-font-family: Minion-Italic-0-1000-33; mso-font-kerning: 0pt">not </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">use it unless your system is really strange. A regular MIPS system, even though it is not I/O coherent, can and should work fine with drivers using the standard API.</SPAN></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt"></SPAN>&nbsp;</P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">This is all moderately straightforward by OS standards. But many driver developers are working on machines that manage this in hardware, where the </SPAN><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>sync</SPAN>&#8221;<SPAN lang=EN-US> functions are just stubs. If they forget to call the right sync function at the right moment, their software will work: It will work until you port it to a MIPS machine requiring explicit cache management. So be cautious when taking driver code from elsewhere. The need to make porting more trouble free is the most persuasive argument for adding some level of hardware cache management in future CPUs.</SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">If you</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">re interested in peeking into the Linux implementation to see how the cache synchronization functions are built from MIPS instructions, use section 4.6 as a reference.</SPAN>