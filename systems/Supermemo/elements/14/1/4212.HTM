<HEAD></HEAD>
<BODY><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Bold-0-1000-21; mso-bidi-font-family: Minion-Bold-0-1000-21; mso-font-kerning: 0pt">14.4.8 </SPAN></B><B><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-BoldItalic-0-1000-54; mso-bidi-font-family: Minion-BoldItalic-0-1000-54; mso-font-kerning: 0pt">How the Kernel Services a TLB Refill Exception</SPAN></I></B>
<P></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">MIPS</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">s TLB refill exception has always had its own unique entry point (at least as long as the CPU wasn</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">t already in exception mode; in Linux, that would be a fatal error, and isn</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">t considered further).</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">When the exception routine is called, the hardware has set up </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">EntryHi (VPN2) </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">to the page number of the location we just couldn</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">t translate: </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">EntryHi </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">is set exactly to what is required to create a new TLB entry to map the offending address.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">The hardware has also set up a bunch of other address-related fields, but we</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">re not going to use any of them.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">In particular, we</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">re not going to use the convenient </SPAN><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>MIPS standard</SPAN>&#8221;<SPAN lang=EN-US> way of using </SPAN></SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">Context </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">to find the relevant page table entry, which was described in section 6.2.4. The MIPS standard way requires that a (notionally very long) linear page table is constructed in kseg2 (it won</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">t really take up excessive space, because kseg2 is mapped and the vast empty spaces of the table would never be mapped to real memory). But Linux really does not like to have the unique-tothread-group kernel mappings that would require.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">Instead, Linux</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">s TLB refill page tables are organized as a three-level hierarchy of tables (called </SPAN><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>global,</SPAN>&#8221; &#8220;<SPAN lang=EN-US>middle,</SPAN>&#8221;<SPAN lang=EN-US> and just </SPAN>&#8220;<SPAN lang=EN-US>PTE</SPAN>&#8221;<SPAN lang=EN-US>). But cunning use of C macros allows the middle level to disappear completely without changing the code</SPAN>&#8212;<SPAN lang=EN-US>a two-level structure is enough for 32-bit MIPS.( 17. However, all three are required for the extended virtual memory space available with 64-bit MIPS.) So you can find the data for any TLB entry you want</SPAN>&#8212;<SPAN lang=EN-US>if it exists at all</SPAN>&#8212;<SPAN lang=EN-US>by following the links, as shown in Figure 14.4.</SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt"><?xml:namespace prefix = v /><v:shapetype id=_x0000_t75 coordsize="21600,21600" o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f" stroked="f"><v:stroke joinstyle="miter"></v:stroke><v:formulas><v:f eqn="if lineDrawn pixelLineWidth 0"></v:f><v:f eqn="sum @0 1 0"></v:f><v:f eqn="sum 0 0 @1"></v:f><v:f eqn="prod @2 1 2"></v:f><v:f eqn="prod @3 21600 pixelWidth"></v:f><v:f eqn="prod @3 21600 pixelHeight"></v:f><v:f eqn="sum @0 0 1"></v:f><v:f eqn="prod @6 1 2"></v:f><v:f eqn="prod @7 21600 pixelWidth"></v:f><v:f eqn="sum @8 21600 0"></v:f><v:f eqn="prod @7 21600 pixelHeight"></v:f><v:f eqn="sum @10 21600 0"></v:f></v:formulas><v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"></v:path><?xml:namespace prefix = o /><o:lock v:ext="edit" aspectratio="t"></o:lock></v:shapetype><v:shape id=_x0000_i1025 style="WIDTH: 414.75pt; HEIGHT: 288.75pt" type="#_x0000_t75"><v:imagedata src="file:///C:\DOCUME~1\DONPOP~1\LOCALS~1\Temp\msohtml1\23\clip_image001.emz" o:title=""></v:imagedata></v:shape></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">This structure is reasonably economical of kernel memory: A largish Linux program with a 50-MB virtual address space has about 12-K 4-KB pages, each needing four bytes of PTE: That makes 48 KB or 12 pages. That</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">s an underestimate, because the address space components have holes in them, but a reasonable-size thread group</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">s mapping needs take only 15 or so pages. Kernel (kseg2) mappings take more, but they</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">re common to all memory maps, so there is only one set of PTEs for kernel mappings.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">Most 32-bit CPUs are restricted to a 32-bit physical address, too: Where that</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">s so, there are six unused high-order bits in the </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">EntryLo0-1 </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">registers. Linux recycles those to remember some software state about the page table entries.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">This does mean that the TLB refill handler for this 32-bit needs to do two index calculations and three loads. It</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">s certainly longer than the tiny instruction sequence of the original magic MIPS scheme (where the index calculation is done by magic by the way the </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">Context </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">register works, and the only loads are from the final page table), but it</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">s not bad.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">You may have noticed that this description is very particular to a certain sort of MIPS CPU. Do all Linux systems have a unique kernel? Well, no: But in the current Linux/MIPS kernel certain critical routines</SPAN><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">&#8212;<SPAN lang=EN-US>including the TLB miss exception handler</SPAN>&#8212;<SPAN lang=EN-US>are binaries generated by table-driven kernel software during start-up and tailored to the requirements of this particular CPU.</SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">Here, for example, is the TLB miss handler autogenerated for a system based on a 32-bit MIPS 24-K core:</SPAN></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">tlb_refill:</SPAN></B></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt"># (1) get base of PGD into k1</SPAN></B></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">lui k1, %hi(pgd_current)</SPAN></B></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt"># get miss virtual address (VA)</SPAN></B></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">mfc0 k0, c0_badvaddr # (2) moved up to save a cycle</SPAN></B></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">lw k1, %lo(pgd_current)(k1)</SPAN></B></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">srl k0, k0, 24</SPAN></B></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">sll k0, k0, 2 # (3) shift and mask VA for PGD index</SPAN></B></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">addu k1, k1, k0 # got a pointer to the correct PGD entry</SPAN></B></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt"># get VA again, this time from Context register</SPAN></B></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">mfc0 k0, c0_context # (4) moved up to save a cycle</SPAN></B></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">lw k1, 0(k1) # OK, read the PTE pointer</SPAN></B></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">srl k0, k0, 0x1 # (5) Context register designed for 2x64-bit,</SPAN></B></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt"># entry, ours are half that size</SPAN></B></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">andi k0, k0, 0xff8 # (6) mask out higher VPN bits etc</SPAN></B></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">addu k1, k1, k0 # pointer to VPE entry</SPAN></B></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt"># load the TLB entries</SPAN></B></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">lw k0, 0(k1) # (7) will lose a cycle here</SPAN></B></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">lw k1, 4(k1)</SPAN></B></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">srl k0, k0, 0x6 # (8) shift-out software-only bits</SPAN></B></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">mtc0 k0, c0_entrylo0</SPAN></B></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">srl k1, k1, 0x6 # same for other half</SPAN></B></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">mtc0 k1, c0_entrylo1</SPAN></B></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">ehb # (9) wait for CP0 values to be ready</SPAN></B></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">tlbwr # (10) write into TLB (somewhere)</SPAN></B></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">eret # (11) back to user</SPAN></B></P>
<P><B><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-BoldItalic-0-1000-54; mso-bidi-font-family: Minion-BoldItalic-0-1000-54; mso-font-kerning: 0pt">Notes on the TLB Refill Code</SPAN></I></B></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">(1) In an exception handler, the software convention allows us to use two registers (</SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">k0-1</SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">) with impunity. All other general-purpose registers are still holding application data, and we can</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">t touch them.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">(2, 4, 5) The code is made a little harder to read by the places where one sequence has been interleaved with the next. That</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">s done for efficiency: A 24-K CPU load requires the register base to be ready one clock early, so if you compute the base in the previous instruction you</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">ll get a one-clock stall. At (2) and (4) we found a nondependent instruction to interleave, but at (5) there isn</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">t one.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">(3) As you can see from Figure 14.4, we want to use the top bits of the virtual addresswith the missing translation (which is in </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">BadVaddr</SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">) to index the PGD. Since the PGD has pointers (four bytes) in each entry, we need to shift the index value by two to get a byte offset. You can</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">t just do a shiftright by 22 bits, because you might generate a nonword-aligned pointer, which is illegal for a MIPS load-word.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">(4) See (2, 4, 5).</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">(5) With only two registers to play with, we can</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">t keep the original virtual address. So now we get it again, but this time from the </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">Context </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">register, which has the low bits of the </SPAN><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>VPN2</SPAN>&#8221;<SPAN lang=EN-US> field we need. For a 64-bit CPU</SPAN>&#8212;<SPAN lang=EN-US>where we</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">d need to keep two 64-bit entries to fill the </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">EntryLo0-1 </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">pair</SPAN><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">&#8212; <SPAN lang=EN-US>it</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">s just right, with the VPN2 number shifted up by four positions to index a table of 16-byte entries. But Linux/MIPS for MIPS32 has eightbyte entries in the PTE table; so we shift it right one place.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">(6) The high bits of </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">Context </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">are unwanted, so we mask them out. Even above the page number, they</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">re not always zero: SMP Linux systems use the </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">Context(PTEBase) </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">field, which consists of plain read/write bits, to store a CPU ID.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">(7) See (2, 4, 5).</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">(8) On systems like this with 32-bit physical addresses, the </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">EntryLo </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">register only has 26 meaningful bits. Linux uses the other six for software flags, which we shift away.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">(9) This execution hazard barrier ensures that the instructions following it are delayed until the writes to the CP0 </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">EntryLo0-1 </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">registers are complete. In many CPUs, the write to the CP0 register from the </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">mtc0 </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">instruction happens in a late pipeline stage.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">(10) </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">tlbwr </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">writes the complete TLB entry to a </SPAN><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>random</SPAN>&#8221;<SPAN lang=EN-US> place in the TLB. In fact, it gets the index from </SPAN></SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">Random</SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">, which just counts continually round TLB entries, but the timing of TLB misses is random enough that this works well.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">Note that the TLB contents comprise four CP0 registers: We</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">ve just loaded </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">EntryLo0-1</SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">, </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">EntryHi </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">was set up automatically by the TLB miss exception hardware, and </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">PageMask </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">is maintained by Linux/MIPS at a constant value meaning 4-KB pages.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">(11) </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">eret </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">takes us back to the instruction that suffered the TLB miss, and it should do better this time. Note that </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">eret </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">is also a CP0 hazard barrier, and it won</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">t allow the returned-to user instruction to be fetched until the </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-48; mso-bidi-font-family: Courier-Bold-8r-0-1000-48; mso-font-kerning: 0pt">tlbwr </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">is complete.</SPAN></P></BODY>