<SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">16.2 Global Offset Table (GOT) Organization</SPAN>
<P></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">The program build process (I refer to compilation and build-time linking) defines at least one GOT for each link unit, though it</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">s perfectly legal for there to be more than one.( 4. The use of multiple GOTs</SPAN><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">&#8212;<SPAN lang=EN-US>one per C module, usually</SPAN>&#8212;<SPAN lang=EN-US>is the preferred way to deal with large link units that overflow the 128-KB GOT size (if the GOT grows bigger than this, compilers and assemblers have to generate longer code sequences to retrieve pointers from the GOT).) Each function can find its GOT, because it</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">s at a known offset from the function entry point (remember, a link unit really is brought into memory as one rigid piece, so internal offsets are as the compiler made them).</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">Each entry in the GOT is</SPAN><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">&#8212;<SPAN lang=EN-US>effectively</SPAN>&#8212;<SPAN lang=EN-US>an absolute pointer to a piece of data or function entry point(5. In some limited circumstances the compiler might </SPAN>&#8220;<SPAN lang=EN-US>know</SPAN>&#8221;<SPAN lang=EN-US> the offset between two data items: In that case, it can make do with one GOT entry for the two items.) defined (implicitly or explicitly) as external by any function in the link unit using this particular GOT. GOT entries depend on the layout of link units within the program</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">s address space and are computed by the dynamic loader as link units are loaded.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">Because the binary image of the code (and read-only data) of a link unit is really shared in an OS like Linux, we can</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">t do any address-map dependent fixups on the code when loading it. But GOTs are part of the data, and each program has its own copy. The pointers in the GOT may be different for each program that uses the shared link unit.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">GOT accesses are frequent, so in PIC code the compiler/linker synthesize code that keeps the </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-54; mso-bidi-font-family: Courier-Bold-8r-0-1000-54; mso-font-kerning: 0pt">gp </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">register pointing to each function</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">s GOT. The register </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-54; mso-bidi-font-family: Courier-Bold-8r-0-1000-54; mso-font-kerning: 0pt">gp </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">is a good choice for the table base, since this use is analogous to the GP-relative data idea that led to </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-54; mso-bidi-font-family: Courier-Bold-8r-0-1000-54; mso-font-kerning: 0pt">gp </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">being reserved. Old-fashioned GP-relative data is inherently incompatible with PIC, so there</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">s no great conflict.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">The GOT pointer must be computed and loaded into </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-54; mso-bidi-font-family: Courier-Bold-8r-0-1000-54; mso-font-kerning: 0pt">gp </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">at the beginning of each function. That</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">s slightly tricky</SPAN><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">&#8212;<SPAN lang=EN-US>this is PIC code, so we don</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">t know at compile time where the GOT will be. But the GOT is part of the same link unit, so the offset from the function</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">s own entry point to the GOT </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Italic-0-1000-24; mso-bidi-font-family: Minion-Italic-0-1000-24; mso-font-kerning: 0pt">is </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">known at compile time.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">It makes this computation easier if a remote function </SPAN><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>knows</SPAN>&#8221;<SPAN lang=EN-US> that it</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">s been called by address, since it then has a register that already contains the address of the function, and that saves effort in computing the pointer to its own GOT.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">The Linux/MIPS convention is that all PIC calls use </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-54; mso-bidi-font-family: Courier-Bold-8r-0-1000-54; mso-font-kerning: 0pt">t9 </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">to hold the address of the called function.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">Then a function prologue can compute GP in a single step (not necessarily a single instruction, though):</SPAN></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-54; mso-bidi-font-family: Courier-Bold-8r-0-1000-54; mso-font-kerning: 0pt">entrypoint:</SPAN></B></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-54; mso-bidi-font-family: Courier-Bold-8r-0-1000-54; mso-font-kerning: 0pt">addu gp, t9, GOT - entrypoint</SPAN></B></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">Code using a GOT entry to access data in a different link unit knows </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Italic-0-1000-24; mso-bidi-font-family: Minion-Italic-0-1000-24; mso-font-kerning: 0pt">only </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">the slot of the GOT where it should find the pointer: The GOT slots are allocated when the link unit is linked together, but the pointer stored in the GOT is not fixed until the other link unit is loaded at program load time. So the compiler must generate code that does a double-indirect, loading a pointer to the external data:</SPAN></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-54; mso-bidi-font-family: Courier-Bold-8r-0-1000-54; mso-font-kerning: 0pt">load:</SPAN></B></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-54; mso-bidi-font-family: Courier-Bold-8r-0-1000-54; mso-font-kerning: 0pt">lw t1, gp(MYSYMBOL_INDEX)</SPAN></B></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-54; mso-bidi-font-family: Courier-Bold-8r-0-1000-54; mso-font-kerning: 0pt">lw t1, (t1)</SPAN></B></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-54; mso-bidi-font-family: Courier-Bold-8r-0-1000-54; mso-font-kerning: 0pt">store:</SPAN></B></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-54; mso-bidi-font-family: Courier-Bold-8r-0-1000-54; mso-font-kerning: 0pt">lw t1, gp(MYSYMBOL_INDEX)</SPAN></B></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-54; mso-bidi-font-family: Courier-Bold-8r-0-1000-54; mso-font-kerning: 0pt">sw t2, (t1)</SPAN></B></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-54; mso-bidi-font-family: Courier-Bold-8r-0-1000-54; mso-font-kerning: 0pt">call:</SPAN></B></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-54; mso-bidi-font-family: Courier-Bold-8r-0-1000-54; mso-font-kerning: 0pt">lw t9, gp(MYFUNCTION_INDEX)</SPAN></B></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-54; mso-bidi-font-family: Courier-Bold-8r-0-1000-54; mso-font-kerning: 0pt">jalr t9</SPAN></B></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">PIC code runs slower than code using fixed addresses, but the benefits of shared libraries are important enough to make this a price well worth paying. We mentioned a couple at the beginning of the chapter, but only to get you motivated. The advantages are typical of those resulting from any form of late binding. A more full list might include:</SPAN></P>
<P><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Italic-0-1000-24; mso-bidi-font-family: Minion-Italic-0-1000-24; mso-font-kerning: 0pt">Smaller binaries</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">: As above, your system binaries don</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">t need to each carry a copy of the C library. Large and complex libraries often dwarf simple applications.</SPAN></P>
<P><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Italic-0-1000-24; mso-bidi-font-family: Minion-Italic-0-1000-24; mso-font-kerning: 0pt">Fix a library and you</SPAN></I><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Italic-0-1000-24; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Italic-0-1000-24; mso-ascii-font-family: Minion-Italic-0-1000-24">&#8217;</SPAN></I><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Italic-0-1000-24; mso-bidi-font-family: Minion-Italic-0-1000-24; mso-font-kerning: 0pt">ve fixed all dependent applications</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">: Some of the most complex code in the system is in the libraries, so it</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">s good to have the same update cycle as for individual binaries, even though individual systems may have different sets of applications installed.</SPAN></P>
<P><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Italic-0-1000-24; mso-bidi-font-family: Minion-Italic-0-1000-24; mso-font-kerning: 0pt">Creates new options in providing legacy interfaces</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">: When you want to obsolete some library or kernel function, you can provide a compatibility library to reimplement it using the new features.</SPAN></P>
<P><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Italic-0-1000-24; mso-bidi-font-family: Minion-Italic-0-1000-24; mso-font-kerning: 0pt">Library layer insulates applications from kernels</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">: This allows applications and kernels to evolve separately.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">In the end, dynamic library code is a somewhat higher-level development environment than is offered by statically linked C/C++.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">There is a downside, apart from the execution overhead of doing all external calls and data references through the GOT. With dynamic loading, applications and libraries are entangled in complex webs of dependencies:</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">It makes installing new software tricky, and removing existing software from a system even trickier. A robust library search and version-labeling system is essential. Earlier Windows systems notoriously suffered </SPAN><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>DLL hell,</SPAN>&#8221;<SPAN lang=EN-US> where differen applications had incompatible requirements of the same library.</SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">Modern systems (Windows and Linux alike) seem to have constructed dependency database systems that keep track of dependencies robustly. Dynamically linked code is here to stay, and the memory economy means it is important to any embedded system with a significant amount of application software.</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt"></SPAN>