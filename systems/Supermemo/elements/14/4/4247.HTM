<P class=Default style="MARGIN: 0cm 0cm 0pt"><FONT face=Arial><B><SPAN lang=EN-US style="FONT-SIZE: 16pt">2.2 How to Run </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 16pt"></SPAN></FONT></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt">RLX-VM uses dynamically loaded library of SystemC Verification Library(SCV) for</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">OCP transaction monitor. It is released with the RLX-VM bundle. Usually the wrapper script will set the environment variable for this library. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">However in case the wrapper script does not work, user has to add the path of this library to the search path of shared libraries. To add the directory of SCV shared libraries to the search path, try </SPAN></P>
<p><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">setenv LD_LIBRARY_PATH path_to_libscv:${LD_LIBRARY_PATH} </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt"></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">for csh-shell, and </SPAN></P>
<p><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">export LD_LIBRARY_PATH=path_to_libscv:${LD_LIBRARY_PATH} </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt"></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">for sh-shell. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">It&#8217;s easy to use the RLX-VM. A brief help page is included in the executable with the option &#8220;-h&#8221;, which is located as INSTALL_DIR/bin/rlxvm. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">RLX-VM can construct the architecture of the simulated SOC system at run-time. The simulation architecture is based on some configure files. The global configure file is default to INSTALL_DIR/platform/rlxocp/rlxvm_config_user.lua, which describes the architecture specified by the document &#8220;OCP-based DW_AXI Evaluation Platform Specification V1.1&#8221; (located as <I>INSTALL_DIR/platform/rlxocp/rlx5181_20061110_OCP_platform.pdf</I>). The AHB to OCP adapters described in the spec are not included, because models in RLX-VM have OCP interface already. The configure file instantiates one UART only for simplicity, whose base address is 0x1D01_2000. The module &#8220;GPIO&#8221; is not included yet. Users are free to create their own configure file base on this example to simulate other SOC system utilizing the components supported by RLX-VM. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">To Tell RLX-VM to use a specified configuration file, try the &#8220;-c&#8221; option. For example: </SPAN></P>
<p><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">INSTALL_DIR/bin/rlxvm &#8211;c platform/taroko/rlxvm_config_user.lua </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt"></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">If the simulation lasts a long time, user is free to stop the simulation by &#8220;CTRL-C&#8221;. In some rare cases, if the simulation does not stop, type &#8220;CTRL-C&#8221; again. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">There is an example Linux boot-up program image installed with RLX-VM that can run on the default SOC architecture. To try the example, type </SPAN></P>
<p><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">INSTALL_DIR/bin</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">/<I>rlxvm </I></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">Some information is printed out in the console. You can see that RLX-VM waits for TCP connection to the UART wrapper. Open a terminal-like program, such as</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">HyperTerminal from Microsoft Windows; connect to the UART wrapper through the specified TCP port. Now you can expect Linux boot message (The Linux image is not completed yet) shown in the terminal after some seconds (it depends on the speed of the host). </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">If you want to connect a debugger, such as GDB, or Insight, which use Remote Serial Protocol (Refer to the manual of GDB for detail of Remote Serial Protocol.) to RLX-VM, configure the processor module instance to run in GDB server mode. Refer to 3.42 for detail. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">RLX-VM uses dynamic loading for the modules specified in the configure file. It tries to find the shared libraries for those modules in a specific path. If you invoke RLX-VM through a full path name including the path information, it can deduce the module library path automatically. However if the executable is in your path, and you invoke just by the program name, it needs an environment variable <B>RLXVM_HOME </B>to help it to deduce the module library path. <B>RLXVM_HOME </B>points to the top <I>INSTALL_DIR </I>(where there is directory, such as bin). </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">Usually, what user needs to do is only to modify the global configuration file and configuration files for each model according to the architecture of the target system. However, if some module is not supported yet, user can write his own model and integrate into VM as described in Developer&#8217;s Guide. </SPAN>