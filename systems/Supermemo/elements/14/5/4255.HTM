<HEAD></HEAD>
<BODY><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; FONT-FAMILY: Arial; mso-font-kerning: 0pt">2.6 Sub-system </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; FONT-FAMILY: Arial; mso-font-kerning: 0pt"></SPAN>
<P></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">The generic engine can also be used to generate a sub-system. Sub-system can be used for two purposes: one is for co-simulation with RTL, the other is for user-constructed top model simulation. </SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">Sub-system, like the generic engine, reads in a configuration file and constructs the target sub-system architecture at run-time. The ports at boundary are left un-connected. It&#8217;s the user&#8217;s responsibility to connect those boundary ports in his top model/main function/wrapper for RTL simulation. </SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">Sub-system load supported model types and connection methods at run-time. It depends on the environment variable &#8220;<B>RLXVM_HOME</B>&#8221;. This environment variable must point to the top directory of RLX-VM, where you can find directories such as &#8220;bin&#8221;, &#8220;lib&#8221;. </SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">Figure 2-2 shows the public API of the generic engine used as sub-system. (We will call it subsystem following on.)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt"><?xml:namespace prefix = v /><v:shapetype id=_x0000_t75 coordsize="21600,21600" o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f" stroked="f"><v:stroke joinstyle="miter"></v:stroke><v:formulas><v:f eqn="if lineDrawn pixelLineWidth 0"></v:f><v:f eqn="sum @0 1 0"></v:f><v:f eqn="sum 0 0 @1"></v:f><v:f eqn="prod @2 1 2"></v:f><v:f eqn="prod @3 21600 pixelWidth"></v:f><v:f eqn="prod @3 21600 pixelHeight"></v:f><v:f eqn="sum @0 0 1"></v:f><v:f eqn="prod @6 1 2"></v:f><v:f eqn="prod @7 21600 pixelWidth"></v:f><v:f eqn="sum @8 21600 0"></v:f><v:f eqn="prod @7 21600 pixelHeight"></v:f><v:f eqn="sum @10 21600 0"></v:f></v:formulas><v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"></v:path><?xml:namespace prefix = o /><o:lock v:ext="edit" aspectratio="t"></o:lock></v:shapetype><v:shape id=_x0000_i1025 style="WIDTH: 414.75pt; HEIGHT: 152.25pt" type="#_x0000_t75"><v:imagedata src="file:///C:\DOCUME~1\DONPOP~1\LOCALS~1\Temp\msohtml1\01\clip_image001.emz" o:title=""></v:imagedata></v:shape></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">Figure 2-2 sub-system public API </SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">APIs: </SPAN></P>
<P><B><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">rlxvm_engine(const char *nm, const string config_file, const cmd_config_cl * const p_cmd_cfg); </SPAN></I></B><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt"></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">This is the constructor to instantiate a sub-system according to a configuration file. </SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">&#61623; <B><I>nm </I></B>[in] the name of the sub-system. It must be the same with the one specified in the configuration file for this subsystem. All other models instantiated in that subsystem are sub-model instances of that subsystem. </SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">&#61623; <B><I>config_file </I></B>[in] the Lua configuration file for this subsystem. It is a relative path, relative to where you run the subsystem, or an absolute path. Some global parameters must be in the file for the first instantiated subsystem. Such parameters are: <B>SIM_RESOLUTION</B>. Refer 2.5.3 to for global parameters. Refer to 2.5 for Lua configuration file. </SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">&#61623; <B><I>p_cmd_cfg </I></B>[in] a pointer points to a data structure, which holds options passed from your main function. For example, tell the subsystem that we only want to show the supported model types and connection methods; or to override the <B>SHOW_TLM</B>, SHOW_ACTION parameters of each individual component. This data structure is defined in rlxvm_comm_c.h </SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">&nbsp;</SPAN></P>
<P><B><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">sc_object* get_port_export(const string &amp;model_nm, const string &amp;port_nm); </SPAN></I></B><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt"></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">This is the API to get a pointer to a port at the subsystem boundary. </SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">&#61623; <B>model_nm </B>[in] the name of model instance which the port belongs to </SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">&#61623; <B><I>port_nm </I></B>[in] the name of the port itself. You can find the ports each model has from the model reference chapter of this user guide, refer to Chapter 3. </SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">&#61623; <B>Return </B>the pointer of the port. This only is a pointer to the base type of any port. You have to dynamically cast it back to its original type before doing connection in your main function. For example, the OCP TL2 bus port can be </SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; FONT-FAMILY: Symbol; mso-font-kerning: 0pt; mso-bidi-font-family: Symbol">&nbsp;</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; FONT-FAMILY: Symbol; mso-font-kerning: 0pt; mso-bidi-font-family: Symbol">&#168; </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">ocpip::ocp_master_socket_tl2&lt;32&gt;, </SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">&#61608; ocpip::ocp_slave_socket_tl2&lt;32&gt; </SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">Where 32 is the bus width. And the interrupt port can be </SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">&#61608; sc_port&lt;rlxvm_pin_if_sc, 0&gt; </SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">&#61608; sc_export&lt;rlxvm_pin_if_sc&gt; </SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">&nbsp;</SPAN></P>
<P><B><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">void print_registered_models(void); </SPAN></I></B><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt"></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">This is the API to print all supported model types. Before calling this API, you have to instantiate a dummy <I>rlxvm_engine</I>, where <I>config_file </I>can be NULL, and <I>p_cmd_cfg </I>must not be NULL. And the <I>m_show_reg_mods </I>field of <I>p_cmd_cfg </I>must be true. </SPAN></P>
<P><B><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">void print_registered_connectors(void); </SPAN></I></B><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt"></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">This is the API to print all supported connection methods. Connection method here can connect two ports inside the subsystem according to the configuration item. Before calling this API, you have to instantiate a dummy <I>rlxvm_engine</I>, where <I>config_file </I>can be NULL, and <I>p_cmd_cfg </I>must not be NULL. And the <I>m_show_reg_mods </I>field of <I>p_cmd_cfg </I>must be true. </SPAN></P>
<P><B><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">void print_statistics(void); </SPAN></I></B><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt"></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">This is the API to print performance information as described in 2.4. </SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">There is an example, INSTALL_DIR/example/subsystem/, showing how to use the subsystem. Read the README for more detail.</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt"></SPAN></P></BODY>