<P class=Default style="MARGIN: 0cm 0cm 0pt"><FONT face=Arial><B><SPAN lang=EN-US style="FONT-SIZE: 16pt">1.2 Supported Components </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 16pt"></SPAN></FONT></P>
<P class=Default style="MARGIN: 0cm 0cm 0pt"><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'Times New Roman'">Module types defined below are supported in RLX-VM. </SPAN></P>
<P class=Default style="MARGIN: 0cm 0cm 0pt"><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'Times New Roman'">1 gdb_remote </SPAN></P>
<P class=Default style="MARGIN: 0cm 0cm 0pt"><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'Times New Roman'">This is the GDB server, to which GDB connects for software debugging purpose. This module is mostly borrowed from GDB server wrapper of Rex&#8217;s RLXSIM module with little modification. User shall not instantiate this component directly. It&#8217;s included in the components of processor model. </SPAN></P>
<P class=Default style="MARGIN: 0cm 0cm 0pt"><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'Times New Roman'">Gdb_remote implements non-intrusive read if possible, which means you have a peek of the state. The debug read won&#8217;t change the state of the register or memory. Debug write will change the register or memory of course, however the side effect of the debug write, triggering some event for example, is not guaranteed to happen, since the SystemC simulation engine is not running when gdb_remote does debug write. </SPAN></P>
<P class=Default style="MARGIN: 0cm 0cm 0pt"><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'Times New Roman'">&nbsp;</SPAN></P>
<P class=Default style="MARGIN: 0cm 0cm 0pt"><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: 'Times New Roman'">2 rlxvm_adapter_s64m32_ocp_tl2 </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt">This is the OCP TL2 adapter module to connect 64-bit OCP bus and 32-bit OCP bus.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">It acts as a bus slave in the 64-bit bus and a bus master in the 32-bit bus. In other words, it can translate from a 64-bit OCP TL2 master port to a 32-bit OCP TL2 master port. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">&nbsp;</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">3 rlxvm_i2c_bus_tlm_lt </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">This is i2c bus model which implements the bus protocols of i2c, and according to I2C_Specification_3.0. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">&nbsp;</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">4 rlxvm_i2c_dw_ocp_tlm_lt </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">This is the i2c device model base on the datasheet of </SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt; mso-ascii-font-family: &#23435;&#20307;; mso-bidi-font-family: &#23435;&#20307;">&#8220;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">DesignWare DW_apb_i2c Databook&#8221;, v1.11a. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">&nbsp;</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">5 rlxvm_i2c_flash_tlm_lt </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">This is i2c flash model according to the datasheet of at24cxx, which xx can be 08,32,64,256, this model is used to test i2c device and i2c bus model as one slave device. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">6 rlxvm_ictl_dw_ocp_tl2 </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">The DesignWare interrupt controller model according to &#8220;DesignWare DW_apb_ictl Databook&#8221;, v2.02a, except the bus interface is OCP TL2. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">&nbsp;</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">7 rlxvm_lance_ocp_tl2 </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">This is a LANCE Ethernet NIC SystemC model based on the specification of &#8220;PMAD-AA TURBO channel Ethernet Module Functional Specification&#8221;. This model is based on the NIC model for LANCE in Gxemul, 0.4.6.2. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">&nbsp;</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">8 rlxvm_net_gateway </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">This is a SystemC NAT style gateway model, which acts as the wrapper between NIC model and the outside real network environment. This model is based on the network model in Gxemul, 0.4.6.2. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">&nbsp;</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">9 rlxvm_ocp_mon_addr_stat </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">An OCP transaction monitor which collects address access statistic based on a memory block. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">&nbsp;</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">10 rlxvm_pin_inverter </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">This model simply inverts the input value between 0 and 1.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">&nbsp;</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">11 rlxvm_qcmaster20_ocp_tl2 </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">The testbench, which reads in OCP commands from qcmaster20.stl or other similar script file and do the tests. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">&nbsp;</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">12 rlxvm_rlxsim_ocp_tl2 </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">This is the Instruction Set Simulator for Realtek processors, borrowed from tlm_ocp_tl2 wrapper by Rex with little modification. Detailed information about rlxsim, please refer to the document of rlxsim. Rlxsim supports LX4180, RLX4181, RLX5181, LX5280. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">&nbsp;</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">13 rlxvm_serial_flash_mxic_tlm </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">This is the Transaction level model for serial flash from Macronix International Co., LTD (MXIC). Supported serial flash types are: </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">MX25L512, </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">MX25V512, </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">MX25L1005, </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">MX25L2005, </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">MX25L4005A, </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">MX25V4005, </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">MX25L8005, </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">MX25V8005, </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">MX25L1605D, </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">MX25L1635D, </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">MX25L3205A, </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">MX25L3205D, </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">MX25L3225D, </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">MX25L3235D, </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">MX25L3237D, </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">MX25L6405D, </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">MX25L12805D. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">&nbsp;</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">14 rlxvm_simple_memory_ocp_tl2 </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">This is the simple sparse memory model, borrowed from tlm_ocp_tl2 wrapper by Rex with little modification. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">&nbsp;</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">15 rlxvm_simple_bus_ocp_tl2 </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">This is a simple OCP TL2 bus model.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">&nbsp;</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">16 rlxvm_ssi_ocp_tl2 </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">This is the SSI model according to &#8220;DesignWare DW_apb_ssi Databook&#8221;, v3.11a, except that the bus interface is OCP TL2. The protocols for Texax Intruments SSP, National Semiconductors Microwire are not implemented yet. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">&nbsp;</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">17 rlxvm_tarokopv_ocp_tl2 </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">This is the OCP TL2 wrapper for the Taroko processor: RX4281, RX5281. The Taroko PV (Programmer&#8217;s View) simulator is included in the wrapper. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">&nbsp;</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">18 rlxvm_timer_dw_ocp_tl2 </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">The timer model according to &#8220;DesignWare DW_apb_timers Databook&#8221;, v2.02a, except that the bus interface is OCP TL2. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">&nbsp;</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">19 rlxvm_uart_dw_ocp_tl2 </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">The UART model according to &#8220;DesignWare DW_apb_uart Databook&#8221;, v3.05a, except that the bus interface is OCP TL2. This model simulates data sending/receiving at the granularity of byte with SystemC FIFO interface. A wrapper model has to be connected to this UART model with SystemC FIFO to form a functional communication module. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">&nbsp;</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">20 rlxvm_uart2stdio </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">This is the UART wrapper, which transforms UART tx/rx request/response to stdio input/output. It tries to turn off console line mode and local echo mode if possible. With this wrapper, RLX-VM will not wait for a TCP connection (rlxvm_uart2tcp does need to wait) before simulation goes on. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">&nbsp;</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">21 rlxvm_uart2tcp </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">The UART wrapper, which transforms UART tx/rx request/response to TCP request/response. User shall not use this model directly. It&#8217;s included in the components of UART. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">&nbsp;</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">22 rlxvm_wdt_dw_ocp_tl2 </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">The Watchdog Timer model according to &#8220;DesignWare DW_apb_wdt Databook&#8221;, v1.03b, except that the interface if OCP TL2. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">All these supported components indicate the module type name defined by RLX-VM. The &#8220;-m&#8221; or &#8220;&#8211;show_registered_modules&#8221; option shows all those type names. Refer</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">to 2.5.1 for naming rule of RLX-VM. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; COLOR: black; mso-font-kerning: 0pt">RLX-VM supports dynamic loading on Linux platform. User can add his own module easily without any re-compilation of the modules existed or the top module. New module can be integrated like a plug-and-play plug-in. Refer to Chapter 4 for adding a new module. </SPAN>