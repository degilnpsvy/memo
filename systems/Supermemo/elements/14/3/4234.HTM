<B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Bold-0-1000-21; mso-bidi-font-family: Minion-Bold-0-1000-21; mso-font-kerning: 0pt">B.1.1 </SPAN></B><B><I><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-BoldItalic-0-1000-46; mso-bidi-font-family: Minion-BoldItalic-0-1000-46; mso-font-kerning: 0pt">Special Encodings and Instructions in the MIPS16 ASE</SPAN></I></B></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">MIPS16 has two particular weaknesses that will add size back to the program; the 5-bit immediate field is inadequate to build constants, and there</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">s not enough address range on load/store operations. Three new kinds of instructions and one extra convention help out.</SPAN></P>
<p><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-49; mso-bidi-font-family: Courier-Bold-8r-0-1000-49; mso-font-kerning: 0pt">extend </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">is a special MIPS16 instruction consisting of a 5-bit code and an 11-bit field, which is concatenated with the immediate field in the following instruction to allow an instruction pair to encode a 16-bit immediate. It appears as an instruction prefix in assembly language.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">Loading constants takes extra instructions even in regular MIPS and would be a huge burden in MIPS16; it</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">s quicker to put the constants into memory and load them. MIPS16 adds support for loads relative to the instruction</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">s own location (PC-relative loads), allowing constants to be embedded in the code segment (typically, just before the start of a function). These are the only MIPS16 instructions that don</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">t correspond exactly to a normal MIPS instruction</SPAN><SPAN style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">&#8212;<SPAN lang=EN-US>MIPS has no PC-relative data operations.</SPAN></SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">Many MIPS load/stores are directed at the stack frame, and </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-49; mso-bidi-font-family: Courier-Bold-8r-0-1000-49; mso-font-kerning: 0pt">$29</SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">/</SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-49; mso-bidi-font-family: Courier-Bold-8r-0-1000-49; mso-font-kerning: 0pt">sp </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">is probably the most popular base register. MIPS16 defines a group of instructions that implicitly use </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Courier-Bold-8r-0-1000-49; mso-bidi-font-family: Courier-Bold-8r-0-1000-49; mso-font-kerning: 0pt">sp</SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">, allowing us to encode a function</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-19; mso-ascii-font-family: Minion-Regular-0-1000-19">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">s stack frame references without needing a separate register field.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">MIPS load instructions always generate a full 32-bit address. Since loadword instructions are only valid for an address that is a multiple of four, the two least significant bits are wasted. MIPS16 loads are scaled: The address offset is shifted left according to the size of the object being loaded/stored, increasing the address range available from the instruction.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 16pt; FONT-FAMILY: Minion-Regular-0-1000-19; mso-bidi-font-family: Minion-Regular-0-1000-19; mso-font-kerning: 0pt">As an additional escape mechanism, MIPS16 defines instructions that allow it to do an arbitrary move between one of the eight MIPS16-accessible registers and any of the 32 MIPS general registers.</SPAN>