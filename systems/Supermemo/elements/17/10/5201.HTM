3.4.1 Hazard Barrier Instructions </P>
<P>Before we get started, note that any exception clears all hazards (so nothing can go wrong because of something incomplete at the start of an exception handler), and so does an eret&#8212;so nothing done by the OS can cause trouble back in the user program. </P>
<P>There are three explicit hazard barrier instructions. You can clear execution hazards with ehb&#8212;which older CPUs will see as a no-op. Instruction hazards are cleared by special jump-register instructions jr.hb and jalr.hb, which are most often substituted for a normal subroutine return or subroutine call, respectively. </P>
<P>MIPS architects were being smart when they chose special jump-register instructions, which will just be decoded as jr or jalr on older CPUs. On those CPUs such instructions clear the CPU pipeline (the jump-to-register is inherently &#8220;unpredictable&#8221;), and in most cases will provide the necessary delay on CPUs that don&#8217;t comply with later MIPS32/64 specifications.