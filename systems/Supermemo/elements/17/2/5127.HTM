MIPS64 needs new 64-bit versions of simple arithmetic (the MIPS32 addu instruction, when confronted by 32-bit overflow, has to produce the overflow value in the low half of the register, and bit 31 copies in the top half&#8212;not the same as a 64-bit add!). It also needs a load-64-bits and new shift instructions, but it&#8217;s a modest enough set. Where new instructions are needed for 64-bit data they get a &#8220;d&#8221; for double in the instruction mnemonic, generating names like daddu, dsub, dmult, and ld.</P>
<P></FONT>Slightly less obvious is that the existing 32-bit load instruction lw is now more precisely described as load word signed, so a new zero-extending lwu appears. The number of instructions added is fattened by the need to support existing variants of load and store and (in the case of shift-by-a-constant) the need to use a different opcode to escape the limits of MIPS32&#8217;s 5-bit shift amount field.