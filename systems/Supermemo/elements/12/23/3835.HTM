<HEAD></HEAD>
<BODY><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Bold-0-1000-23; mso-bidi-font-family: Minion-Bold-0-1000-23; mso-font-kerning: 0pt">10.2.2 </SPAN></B><B><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-BoldItalic-0-1000-34; mso-bidi-font-family: Minion-BoldItalic-0-1000-34; mso-font-kerning: 0pt">Software and Endianness</SPAN></I></B>
<P></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">Here</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">s a software-oriented definition of endianness: A CPU/compiler system where the lowest addressed byte of amultibyte integer holds the least significant bits is called little-endian; a system where the lowest addressed byte of a multibyte integer holds the most significant bits is called big-endian. You can very easily find out which sort of CPU you have by running a piece of deliberately nonportable code:</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-8r-0-1000-32; mso-bidi-font-family: Courier-8r-0-1000-32; mso-font-kerning: 0pt">#include&lt;stdio.h&gt;</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-8r-0-1000-32; mso-bidi-font-family: Courier-8r-0-1000-32; mso-font-kerning: 0pt">main ()</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-8r-0-1000-32; mso-bidi-font-family: Courier-8r-0-1000-32; mso-font-kerning: 0pt">{</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-8r-0-1000-32; mso-bidi-font-family: Courier-8r-0-1000-32; mso-font-kerning: 0pt">union {</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-8r-0-1000-32; mso-bidi-font-family: Courier-8r-0-1000-32; mso-font-kerning: 0pt">int as_int;</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-8r-0-1000-32; mso-bidi-font-family: Courier-8r-0-1000-32; mso-font-kerning: 0pt">short as_short[2];</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-8r-0-1000-32; mso-bidi-font-family: Courier-8r-0-1000-32; mso-font-kerning: 0pt">char as_char[4];</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-8r-0-1000-32; mso-bidi-font-family: Courier-8r-0-1000-32; mso-font-kerning: 0pt">} either;</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-8r-0-1000-32; mso-bidi-font-family: Courier-8r-0-1000-32; mso-font-kerning: 0pt">either.as_int = 0x12345678;</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-8r-0-1000-32; mso-bidi-font-family: Courier-8r-0-1000-32; mso-font-kerning: 0pt">if (sizeof(int) == 4 &amp;&amp; either.as_char[0] == 0x78) {</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-8r-0-1000-32; mso-bidi-font-family: Courier-8r-0-1000-32; mso-font-kerning: 0pt">printf ("Little endian\n");</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-8r-0-1000-32; mso-bidi-font-family: Courier-8r-0-1000-32; mso-font-kerning: 0pt">}</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-8r-0-1000-32; mso-bidi-font-family: Courier-8r-0-1000-32; mso-font-kerning: 0pt">else if (sizeof(int) == 4 &amp;&amp; either.as_char[0] == 0x12) {</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-8r-0-1000-32; mso-bidi-font-family: Courier-8r-0-1000-32; mso-font-kerning: 0pt">printf ("Big endian\n");</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-8r-0-1000-32; mso-bidi-font-family: Courier-8r-0-1000-32; mso-font-kerning: 0pt">}</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-8r-0-1000-32; mso-bidi-font-family: Courier-8r-0-1000-32; mso-font-kerning: 0pt">else {</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-8r-0-1000-32; mso-bidi-font-family: Courier-8r-0-1000-32; mso-font-kerning: 0pt">printf ("Confused\n");</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-8r-0-1000-32; mso-bidi-font-family: Courier-8r-0-1000-32; mso-font-kerning: 0pt">}</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-8r-0-1000-32; mso-bidi-font-family: Courier-8r-0-1000-32; mso-font-kerning: 0pt">}</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">Strictly speaking, software endianness is an attribute of the compiler toolchain, which could always</SPAN><SPAN style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">&#8212;<SPAN lang=EN-US>if it worked hard enough</SPAN>&#8212;<SPAN lang=EN-US>produce the effect of either endianness. But on a byte-addressable CPU like MIPS with native 32-bit arithmetic it would be unreasonably inefficient to buck the hardware; thus we talk of the endianness of the CPU.</SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">Of course, the question of byte layout within the address space applies to other data types besides integers; it affects any item that occupies more than a single byte, such as floating-point data types, text strings, and even the 32-bit op-codes that represent machine instructions. For some of these noninteger data types, the idea of arithmetic significance applies only in a limited way, and for others it has no meaning at all.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">When a language deals in software-constructed data types bigger than the hardware can manage, then their endianness is purely an issue of software convention</SPAN><SPAN style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">&#8212;<SPAN lang=EN-US>they can be constructed with either endianness. I hope that modern compiler writers appreciate that it</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">s a good idea to be consistent with the hardware</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">s own convention.</SPAN></P>
<P><B><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-BoldItalic-0-1000-34; mso-bidi-font-family: Minion-BoldItalic-0-1000-34; mso-font-kerning: 0pt">Endianness and Program Portability</SPAN></I></B></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">So long as binary data items are never imported into an application from elsewhere, and so long as you avoid accessing the same piece of data under two different integer types (as we deliberately did above), your CPU</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">s endianness is invisible (and your code is portable). Modern C compilers will try to watch out for you: If you do this by accident, you</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">ll probably get a compiler error or warning.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">You may not be able to live within those limitations, however; you may have to deal with foreign data delivered into your system from elsewhere, or with memory-mapped hardware registers. For either of these, you need to know exactly how your compiler accesses memory.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt"><?xml:namespace prefix = v /><v:shapetype id=_x0000_t75 coordsize="21600,21600" o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f" stroked="f"><v:stroke joinstyle="miter"></v:stroke><v:formulas><v:f eqn="if lineDrawn pixelLineWidth 0"></v:f><v:f eqn="sum @0 1 0"></v:f><v:f eqn="sum 0 0 @1"></v:f><v:f eqn="prod @2 1 2"></v:f><v:f eqn="prod @3 21600 pixelWidth"></v:f><v:f eqn="prod @3 21600 pixelHeight"></v:f><v:f eqn="sum @0 0 1"></v:f><v:f eqn="prod @6 1 2"></v:f><v:f eqn="prod @7 21600 pixelWidth"></v:f><v:f eqn="sum @8 21600 0"></v:f><v:f eqn="prod @7 21600 pixelHeight"></v:f><v:f eqn="sum @10 21600 0"></v:f></v:formulas><v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"></v:path><?xml:namespace prefix = o /><o:lock v:ext="edit" aspectratio="t"></o:lock></v:shapetype><v:shape id=_x0000_i1025 style="WIDTH: 415.5pt; HEIGHT: 255.75pt" type="#_x0000_t75"><v:imagedata src="file:///C:\DOCUME~1\DONPOP~1\LOCALS~1\Temp\msohtml1\01\clip_image001.emz" o:title=""></v:imagedata></v:shape></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">This all seems fairly harmless, but experience shows that of all data-mapping problems, endianness is uniquely confusing. I think this is because it is difficult even to describe the problem without taking a side. The origin of the two alternatives lies in two different ways of drawing the pictures and describing the data; both are natural in different contexts.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">As we saw above, big-endians typically draw their pictures organized around words. So that gives us a big-endian picture of the data structure we used in Figure 10.4. It would look a lot prettier with the IBM convention of labeling the MS bit as bit 0, but that</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">s no longer done.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">But little-endians are likely to emphasize a software-oriented, abstract view of computer memory as an array of bytes. So the same data structure looks like Figure 10.5. Little-endians don</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">t think of computer data as primarily numeric, so they tend to put all the low numbers (bits, bytes, or whatever) on the left.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">It</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">s very difficult to achieve a real grasp of endianness without drawing pictures, but many people find themselves struggling to set aside the conventions they</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">re used to; for example, if you</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">re used to numbering the bits from right to left, it can take a real effort of will to number them from left to right (a picture of a little-endian structure as drawn by someone with big-endian habits can look very illogical). This is the essence of the subject</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">s capacity to confuse: It</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">s difficult even to think about an unfamiliar convention without getting caught up in the ones you know.</SPAN></P></BODY>