<HEAD></HEAD>
<BODY><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Bold-0-1000-23; mso-bidi-font-family: Minion-Bold-0-1000-23; mso-font-kerning: 0pt">10.2.4 </SPAN></B><B><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-BoldItalic-0-1000-34; mso-bidi-font-family: Minion-BoldItalic-0-1000-34; mso-font-kerning: 0pt">Bi-endian Software for a MIPS CPU</SPAN></I></B>
<P></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">You may want to create binary code that will run correctly on MIPS CPUs with either endianness</SPAN><SPAN style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">&#8212;<SPAN lang=EN-US>probably for a particular board that may be run either way or to create a portable device driver that may run on boards of either configuration. It</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">s a bit tricky, and you will probably only do a tiny part of your bootstrap code like this, but here are some guidelines.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">The MIPS CPU doesn</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">t have to do too much to change endianness. The only parts of the instruction set that recognize objects smaller than 32 bits are partial word loads and stores. On a MIPS CPU with a 32-bit bus, the instruction:</SPAN></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-Bold-8r-0-1000-73; mso-bidi-font-family: Courier-Bold-8r-0-1000-73; mso-font-kerning: 0pt">lbu t0, 1(zero)</SPAN></B></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">takes the byte at byte program address 1, loads it into the least significant bits (0 through 7) of register </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-Bold-8r-0-1000-73; mso-bidi-font-family: Courier-Bold-8r-0-1000-73; mso-font-kerning: 0pt">t0</SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">, and fills the rest of the register with zero bits. This description is endianness independent. However, in big-endian mode the data loaded into the register will be taken from bits 16</SPAN><SPAN style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">&#8211;<SPAN lang=EN-US>23 of the CPU data bus; in little-endian mode, the byte is loaded from bits 8</SPAN>&#8211;<SPAN lang=EN-US>15 of the CPU data bus.</SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">Inside the MIPS CPU, there</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">s data-steering hardware that the CPU uses to direct all the active bytes in a transfer from their respective byte lanes at the interface to the correct positions within the internal registers. This steering logic has to accommodate all permutations of load size, address, and alignment (including the load/store left/right instructions described in section 8.5.1).</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">It is the change in the relationship between the active byte lane and the address on partial-word loads and stores that characterizes the MIPS CPU</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">s endianness. When you reconfigure your MIPS CPU</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">s endianness, it</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">s that steering logic between data and register whose behavior changes.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">Complementing the chip</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">s configurability, most MIPS toolchains can produce code of either endianness, based on a command-line option. If you set a MIPS CPU to the wrong endianness for its system, then a couple of things will happen.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">First, if you change nothing else, the software will crash quickly, because on any partial-word write the memory system will pick up garbage data from the wrong part of the CPU bus. At the same time as reconfiguring the CPU, we</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">d better reconfigure the logic that decodes CPU cycles.( 2. There are some CPU interfaces where partial-word transfers are signaled with independent byte lane enable signals, and in that case this problem doesn</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">t happen.)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">If you fix that, you</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">ll find that the CPU</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">s view of byte addressing becomes scrambled with respect to the rest of the system; in terms of the description above, we</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">ve implicitly opted for a connection that keeps the bit numbers consistent, rather than the byte addresses.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">Of course, data </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Italic-0-1000-26; mso-bidi-font-family: Minion-Italic-0-1000-26; mso-font-kerning: 0pt">written </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">by the CPU after a change of endianness will seem fine to the CPU itself; if we allow changes of endianness only at reset time, then volatile memory that is private to the CPU won</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">t give us any trouble.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt"><?xml:namespace prefix = v /><v:shapetype id=_x0000_t75 coordsize="21600,21600" o:spt="75" o:preferrelative="t" path="m@4@5l@4@11@9@11@9@5xe" filled="f" stroked="f"><v:stroke joinstyle="miter"></v:stroke><v:formulas><v:f eqn="if lineDrawn pixelLineWidth 0"></v:f><v:f eqn="sum @0 1 0"></v:f><v:f eqn="sum 0 0 @1"></v:f><v:f eqn="prod @2 1 2"></v:f><v:f eqn="prod @3 21600 pixelWidth"></v:f><v:f eqn="prod @3 21600 pixelHeight"></v:f><v:f eqn="sum @0 0 1"></v:f><v:f eqn="prod @6 1 2"></v:f><v:f eqn="prod @7 21600 pixelWidth"></v:f><v:f eqn="sum @8 21600 0"></v:f><v:f eqn="prod @7 21600 pixelHeight"></v:f><v:f eqn="sum @10 21600 0"></v:f></v:formulas><v:path o:extrusionok="f" gradientshapeok="t" o:connecttype="rect"></v:path><?xml:namespace prefix = o /><o:lock v:ext="edit" aspectratio="t"></o:lock></v:shapetype><v:shape id=_x0000_i1025 style="WIDTH: 415.5pt; HEIGHT: 236.25pt" type="#_x0000_t75"><v:imagedata src="file:///C:\DOCUME~1\DONPOP~1\LOCALS~1\Temp\msohtml1\01\clip_image001.emz" o:title=""></v:imagedata></v:shape></SPAN></P>
<P><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Italic-0-1000-26; mso-bidi-font-family: Minion-Italic-0-1000-26; mso-font-kerning: 0pt">Note also that the CPU</SPAN></I><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Italic-0-1000-26; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Italic-0-1000-26; mso-ascii-font-family: Minion-Italic-0-1000-26">&#8217;</SPAN></I><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Italic-0-1000-26; mso-bidi-font-family: Minion-Italic-0-1000-26; mso-font-kerning: 0pt">s view of bit numbering within aligned bus-width words continues to match the rest of the system. </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">This is the choice we described earlier as bit number consistent and that we suggested you should generally avoid. But in this particular case it has a useful side effect, because MIPS instructions are encoded as bitfields in 32-bit words. An instruction ROM that makes sense to a big-endian CPU will make sense to a little-endian CPU too, allowing us to share a bootstrap. Nothing works perfectly</SPAN><SPAN style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">&#8212;<SPAN lang=EN-US>in this case, any data in the ROM that doesn</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">t consist of aligned 32-bit words will be scrambled. Many years ago, Algorithmics</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt"> MIPS boards had just enough bi-endian code in their boot ROM to detect that the main ROM program does not match the CPU</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">s endianness and to print the helpful message:</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-8r-0-1000-32; mso-bidi-font-family: Courier-8r-0-1000-32; mso-font-kerning: 0pt">Emergency - wrong endianness configured.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">The word </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-8r-0-1000-32; mso-bidi-font-family: Courier-8r-0-1000-32; mso-font-kerning: 0pt">Emergency </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">is held as a C string, null-terminated. You should now know enough to understand why the ROM start-up code contains the enigmatic lines:</SPAN></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-Bold-8r-0-1000-73; mso-bidi-font-family: Courier-Bold-8r-0-1000-73; mso-font-kerning: 0pt">.align 4</SPAN></B></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-Bold-8r-0-1000-73; mso-bidi-font-family: Courier-Bold-8r-0-1000-73; mso-font-kerning: 0pt">.ascii "remEcneg\000\000\000y"</SPAN></B></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">That</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">s what the string </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-8r-0-1000-32; mso-bidi-font-family: Courier-8r-0-1000-32; mso-font-kerning: 0pt">Emergency </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">(with its standard C terminating null and two bytes of essential padding) looks like when viewed with the wrong endianness. It would be even worse if it didn</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">t start on a four-byte-aligned location. Figure 10.8 (drawn from the point of view of a confirmed big-endian) shows what is going on.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">You</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">ve seen that writing bi-endian code is possible, but be aware that when you</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">re ready to load it into ROM, you</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">ll be asking your tools to do something they weren</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">t designed to handle. Typically, big-endian tools pack instruction words into the bytes of a load file with the most significant bits first, and little-endian tools work the other way around. You</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">ll need to think carefully about the result you need to achieve, and examine the files you generate to make sure everything went according to plan.</SPAN></P></BODY>