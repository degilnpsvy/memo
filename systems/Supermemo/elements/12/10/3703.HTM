Apart from the arguments (whose layout must be agreed with the caller), the stack structure is private to the function. The only reason we need a standard arrangement is for debugging and diagnostic tools, which want to be able to navigate the stack. If we interrupt a running program for debugging, we&#8217;d very much like to be able to run backward up the stack, displaying a list of the functions that have been called on the way to our breakpoint, and the arguments passed to those functions. Moreover, we&#8217;d like to be able to step the debugger context back up the stack a few positions and in that context to discover the value of variables&#8212;even if that piece of code was maintaining the variable&#8217;s data in a register, as optimizing compilers should.