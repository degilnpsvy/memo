<B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">gcc </SPAN></B><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Arial; mso-font-kerning: 0pt">and </SPAN></B><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">g++</SPAN></B><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Arial; mso-font-kerning: 0pt">, the GNU Compilers</SPAN></B> 
<P></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">The GNU Compiler Collection, known as GCC, is a complete set of tools for compiling programs written in C, C++, Objective C, or languages for which you have installed front-ends, invoking the GNU compiler passes with the following utilities.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: AdobePiStd; mso-bidi-font-family: AdobePiStd; mso-font-kerning: 0pt">n </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">cpp</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">GNU preprocessor that processes all the header files and macros which your target requires (see &#8220;cpp, the GNU Preprocessor&#8221; on page 23).</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: AdobePiStd; mso-bidi-font-family: AdobePiStd; mso-font-kerning: 0pt">n </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">as</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">GNU assembler that produces binary code from assembly language code and puts it in an object file (see &#8220;as, the GNU Assembler&#8221; on page 29).</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: AdobePiStd; mso-bidi-font-family: AdobePiStd; mso-font-kerning: 0pt">n </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt"><FONT class=extract>ld</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt"><FONT class=extract>GNU linker that binds the code to addresses, linking the startup file and libraries to an object file, and then producing an executable binary image (see &#8220;ld, the GNU Linker&#8221; on page 24).</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">To invoke the compiler, type:</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">gcc options</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">Providing </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">options </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">allows you to stop the compile process at intermediate stages. Use commas to separate the options.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">There are many options available for providing a specific type of compiled output, others for preprocessing, and others controlling assembly, linking, optimization, debugging, and other target-specific functions. For instance, call the driver with a </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">-v </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">option to see precisely which options are in use for each compilation pass.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">There are four implicit file extensions: </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">.c </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">(for C source code which must be preprocessed),</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">.C </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">(for C++ source code which must be preprocessed), </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">.s </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">(for assembler code), and </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">.S </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">(for assembler code which must be preprocessed).</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">When referring to C++ compilation, </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">g++ </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">is its customary name. Since there is only one compiler, it is also accurate to use the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">gcc </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">call, no matter what the language context. The </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">g++ </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">distinction is more useful when the emphasis is on compiling C++ programs, with the GNU compiler acting not merely as a preprocessor, but building object code directly from your C++ program source.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">There is no intermediate C version of the program; avoiding an intermediate C representation of the program means that you get better object code, and better debugging information. The GNU debugger works with this information in the object code to give you comprehensive C++ source-level editing capabilities.</SPAN></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">When you compile C or C++ programs, the compiler inserts a call at the beginning of </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">main </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">to a </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">__main </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">support subroutine. To avoid linking to the standard libraries, specify the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">-nostdlib </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">option (including </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">-lgcc </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">at the end of your compiler command line input resolves this reference, linking only with the compiler support library </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">libgcc.a</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">; ending your command&#8217;s input with it ensures that you get a chance to link first with any of your own special libraries).</SPAN></FONT></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">__main </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">is the initialization routine for C++ constructors. Since GNU C is meant to interoperate with GNU C++, even C programs must have this call; otherwise, C++ object files linked with a C </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-bidi-font-family: Courier; mso-font-kerning: 0pt">main </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">might fail.</SPAN></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt"><FONT class=extract>Compilation can involve up to four stages, always in the following order.</FONT></SPAN></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: AdobePiStd; mso-bidi-font-family: AdobePiStd; mso-font-kerning: 0pt">n </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">preprocessing</SPAN></I></FONT></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: AdobePiStd; mso-bidi-font-family: AdobePiStd; mso-font-kerning: 0pt">n </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">compiling</SPAN></I></FONT></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: AdobePiStd; mso-bidi-font-family: AdobePiStd; mso-font-kerning: 0pt">n </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">assembling</SPAN></I></FONT></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: AdobePiStd; mso-bidi-font-family: AdobePiStd; mso-font-kerning: 0pt">n </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">linking</SPAN></I></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt"><FONT class=extract>The first three stages apply to an individual source file: <I>preprocessing </I>establishes the type of source code to process, <I>compiling </I>produces an object file, <I>assembling </I>establishes the syntax that the compiler expects for symbols, constants, expressions and the general directives; the last stage, <I>linking</I>, completes the compilation process, combining all object files (newly compiled, and those specified as input) into an executable file.</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">For working with the GNU compiler and using its options, see <I>Using GNU CC </I>in <B><I>GNUPro Compiler Tools</I></B>.</SPAN>