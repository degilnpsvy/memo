<SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">The following documentation shows a basic initialization of a </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">crt0.s </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">file; your file may differ, although there will be a similar initialization process.</SPAN>
<P></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">1. </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">Set up concatenation macros.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">#define CONCAT1(a, b) CONCAT2(a, b)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">#define CONCAT2(a, b) a ## b</SPAN></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">2. </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">Set up label macros, using the following example&#8217;s input.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">#ifndef _ _USER_LABEL_PREFIX_ _</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">#define _ _USER_LABEL_PREFIX_ _</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">#endif</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">#define SYM(x) CONCAT1 (_ _USER_LABEL_PREFIX_ _, x)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">These macros make the code portable between COFF and </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">a.out</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">; COFF has </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">_ _ </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">(two underlines) before its global symbol names, while </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">a.out </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">has none.</SPAN></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">3. </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">Set up register names (with the appropriate prefix), using the following input.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">#ifndef _ _REGISTER_PREFIX_ _</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">#define _ _REGISTER_PREFIX_ _</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">#endif</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">/* Use the right prefix for registers. */</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">#define REG(x) CONCAT1 (_ _REGISTER_PREFIX_ _, x)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">#define d0 REG (d0)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">#define d1 REG (d1)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">#define d2 REG (d2)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">#define d3 REG (d3)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">#define d4 REG (d4)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">#define d5 REG (d5)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">#define d6 REG (d6)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">#define d7 REG (d7)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">#define a0 REG (a0)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">#define a1 REG (a1)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">#define a2 REG (a2)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">#define a3 REG (a3)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">#define a4 REG (a4)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">#define a5 REG (a5)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">#define a6 REG (a6)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">#define fp REG (fp)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">#define sp REG (sp)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">Register names are for portability between assemblers. Some register names have </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">% </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">or </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">$ </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">prepended to them.</SPAN></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">4. </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">Set up space for the stack for assigning part of memory, using the following example&#8217;s input.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">You can also set this allocation in the linker script, although it typically is done at this point.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">.set stack_size, 0x2000 .</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">comm SYM (stack), stack_size</SPAN></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">5. </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">Define empty space for an environment, using the following example&#8217;s input.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">.data</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">.align 2</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">SYM (environ):</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">.long 0</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">This call is unlike most any for a ROM monitor, although it&#8217;s best generally set up as a valid address, and by then passing the address to </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">main()</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">; then, if an application checks for an empty environment, it finds one.</SPAN></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">6. </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">Set up a few global symbols.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">.align 2</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">.text</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">.global SYM (stack)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">.global SYM (main)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">.global SYM (exit)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">.global _ _bss_start</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">The last line really should not be </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">SYM (_ _bss_start)</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">, since declaring </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">_ _bss_start </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">this way ensures the appropriate setting of its value in the linker script.</SPAN></P>
<P><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">7. </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">Set up the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">start </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">global symbol for the linker to use as the default address for the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">.text </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">section, as the following example&#8217;s input shows. This helps your program run.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">SYM (start):</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">link a6, #-8</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">moveal #SYM (stack) + stack_size, sp</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: AdobePiStd; mso-font-kerning: 0pt; mso-bidi-font-family: AdobePiStd">n </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">crt0 </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">zeroes the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">.bss </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">section.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">Clear the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">.bss </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">section for uninitialized data, using the following example&#8217;s input. Initialize all of the addresses in the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">.bss </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">section to zero so programs will get predictable results when there is no check for the default values of new variables.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">moveal #_ _bss_start, a0</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">moveal #SYM (end), a1</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">1:</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">movel #0, (a0)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">leal 4(a0), a0</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">cmpal a0, a1</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">bne 1b</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">Applications can get unpredictable effects without the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">.bss </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">section left uncleared, causing particular problems with some implementations of </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">malloc() </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">calls.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: AdobePiStd; mso-font-kerning: 0pt; mso-bidi-font-family: AdobePiStd">n </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">crt0 </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">calls </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">main()</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">If your ROM monitor supports it, set up </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">argc </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">and </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">argv </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">for command line arguments and an environment pointer before the call to </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">main()</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">; for GNU C++ compiling, the code generator inserts a branch to </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">_ _main </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">at the top of your </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">main() </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">routine, while the GNU C++ compiler uses </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">_ _main </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">to initialize its internal tables and then returns control to your </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">main() </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">routine. For </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">crt0 </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">to call your </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">main() </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">routine, use the following example&#8217;s input; set up the environment pointer and jump to </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">main()</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">; call the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">main </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">routine from the application with</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">main (argc, argv, environ)</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">, using </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">argv </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">as a pointer to </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">NULL</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">pea 0</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">pea SYM (environ)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">pea sp@(4)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">pea 0</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">jsr SYM (main)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">movel d0, sp@-4</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: AdobePiStd; mso-font-kerning: 0pt; mso-bidi-font-family: AdobePiStd">n </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">crt0 </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">calls </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">(exit)</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">After </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">main() </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">runs, the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">crt0 </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">file then returns control of the hardware from the application. On some hardware there is nothing to return to, especially if your program is in ROM. If that&#8217;s the case, you need to do a hardware reset or branch back to the original start address; using a ROM monitor, you can usually call a user trap to provide the ROM control. Pick a safe vector with no sides effects.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">Some ROMs have a built-in trap handler for just this case. Exit from the application with </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">_exit</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">; normally, this causes a user trap to return to the ROM monitor for another run. Proceed by using the following example&#8217;s input.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">SYM (exit):</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">trap #0</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">Both </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">rom68k </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">and </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">bug </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">can handle an exception of </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">0 </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">with no side effects; although the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">bug </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">monitor has a user-caused trap that returns control to the ROM monitor, the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">bug </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">monitor is more portable.</SPAN>