<B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Bold-0-1000-23; mso-bidi-font-family: Minion-Bold-0-1000-23; mso-font-kerning: 0pt">10.3.3 </SPAN></B><B><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-BoldItalic-0-1000-34; mso-bidi-font-family: Minion-BoldItalic-0-1000-34; mso-font-kerning: 0pt">Cache Management and Uncached or Write-Through Data</SPAN></I></B>
<P></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">If you mix cached and uncached references that map to the same physical range of addresses, you need to think about what this means for the caches. Uncached writes will update </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Italic-0-1000-26; mso-bidi-font-family: Minion-Italic-0-1000-26; mso-font-kerning: 0pt">only </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">the copy of a given address in main memory, possibly leaving what</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">s nowa stale copy of that location</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">s contents in the D-cache</SPAN><SPAN style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">&#8212;<SPAN lang=EN-US>orthe I-cache.Uncached loads will pick up whatever they find in main memory</SPAN>&#8212;<SPAN lang=EN-US>even if that information is, in fact, stale with respect to an up-to-date copy present only in cache.</SPAN></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">Careful use of cached and uncached references to the same physical region may be useful, or even necessary, in the low-level code that brings your system into a known state following a reset. But for running code, you probably don</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">t want to do that. For each region of physical memory, decide whether your software should access it cached or uncached, then be absolutely consistent in treating it that way.</SPAN>