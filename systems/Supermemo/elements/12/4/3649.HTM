<B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Arial; mso-font-kerning: 0pt">What Embedded Development Means</SPAN></B></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">When developing with a cross-configuration, you work with the tools themselves on the host by using a <I>toolchain</I>. For example, working with a SPARCstation, you generate and debug code for a Power PC-based board by calling a specific tool with a specific embedded target&#8217;s toolchain; for an explanation, see &#8220;Tools, Toolchains and Usage&#8221; on page 39. Using the toolchain method, there are routines for providing a specific type of compiled output, others for preprocessing, and others controlling assembling, linking, optimizing, debugging, and other target-specific functions.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">When compiling, the following routines are for optimization.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: AdobePiStd; mso-font-kerning: 0pt; mso-bidi-font-family: AdobePiStd">n </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">-inbyte</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">Returns a single byte from the console.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: AdobePiStd; mso-font-kerning: 0pt; mso-bidi-font-family: AdobePiStd">n </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">-outbyte</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">For low-level debugging, takes an argument for </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">print() </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">and prints a byte out to the console (typically used for ASCII text).</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">When compiling, the following routines are for dynamic memory allocation.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: AdobePiStd; mso-font-kerning: 0pt; mso-bidi-font-family: AdobePiStd">n </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">sbrk()</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">Returns a pointer to the last memory address your application uses before </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">malloc()</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">, </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">calloc()</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">, and </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">realloc() </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">functions allocated more memory (all at their lowest levels).</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: AdobePiStd; mso-font-kerning: 0pt; mso-bidi-font-family: AdobePiStd">n </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">caddr_t</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">Defines use of the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">char * </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">definition.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: AdobePiStd; mso-font-kerning: 0pt; mso-bidi-font-family: AdobePiStd">n </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">RAMSIZE</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">Moves a pointer to heap memory during compile time, checking for upper limit. </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">newlib </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">calls the following support routines, although not for embedded targets. </SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: AdobePiStd; mso-font-kerning: 0pt; mso-bidi-font-family: AdobePiStd">n </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">isatty()</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">Checks for a terminal device.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: AdobePiStd; mso-font-kerning: 0pt; mso-bidi-font-family: AdobePiStd">n </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">kill()</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">Exits.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: AdobePiStd; mso-font-kerning: 0pt; mso-bidi-font-family: AdobePiStd">n </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">getpd()</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">Returns any value greater than one; value doesn&#8217;t effect anything in </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">newlib</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">Most applications use calls to the standard C library. To link </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">libc.a</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">, when you are developing with a target that has no operating system, you must first define several I/O functions, such as the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">open() </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">and </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier; mso-font-kerning: 0pt; mso-bidi-font-family: Courier">close() </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">functions; for more information, see &#8220;System Calls&#8221; on page 169 in <I>GNUPro C Library </I>in <B><I>GNUPro Libraries</I></B>.</SPAN></P>
<p><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">When debugging, set up the tools using the following process.</SPAN></P>
<p><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">1. <I>Set up the C run-time environment; see </I></SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">&#8220;The C Run-time Environment (crt0)&#8221; on page 40.</SPAN></P>
<p><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">2. <I>Create </I></SPAN></B><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">stubs<B>, or minimal versions of operating system subroutines for the C subroutine library; see </B></SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">&#8220;Using Cygmon for Remote Debugging&#8221; on page 57<B><I>, and see also </I></B>&#8220;System Calls&#8221; on page 169 <B><I>in </I></B><I>GNUPro C Library <B>in GNUPro Libraries</B></I>.</SPAN></P>
<p><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">3. <I>Connect to the debugger; see </I></SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">&#8220;Specifying a Debugging Target&#8221; on page 131 <B><I>in </I></B><I>Debugging with GDB <B>in GNUPro Debugging Tools, and see also </B></I>&#8220;Using Insight, the GUI Debugger&#8221; on page 74.</SPAN></P>
<p><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Arial; mso-font-kerning: 0pt">WARNING! </SPAN></B><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-font-kerning: 0pt">This type of embedded development may be inappropriate for real-time operating systems, since embedded operating systems may provide their own configuration of tools.</SPAN>