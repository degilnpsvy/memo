<FONT class=extract>MIPS machine instructions always generate addresses for load/store operations using just the contents of a register plus a 16-bit signed displacement</FONT>,&#65288;1. Someone always has to break things; <FONT class=extract>there are some register+register address formats but only for load/stores with floating-point registers. This is done in deference to the importance of multidimensional-array organizations in floating-point codes.</FONT>&#65289; written, for example, lw $1,14($2). <FONT class=extract>MIPS assemblers support quite a few other addressing mode formats; notably lw $1,thing,which loads data from the location whose assembly code label (or external C name) is &#8220;thing.&#8221;</FONT> See section 9.4 for details; note that all of these modes are quietly available to any assembly instruction that specifies a memory address. We&#8217;ll just write lw t,addr for the assembly instruction and the base+ displacement format for the machine code.