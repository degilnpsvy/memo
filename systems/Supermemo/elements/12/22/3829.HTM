<SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">10.1 Low-Level Software for MIPS Applications: A Checklist of Frequently Encountered Problems</SPAN>
<P></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">The following are problems that have come up fairly frequently:</SPAN></P>
<P><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Italic-0-1000-26; mso-bidi-font-family: Minion-Italic-0-1000-26; mso-font-kerning: 0pt">Endianness</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">: The computer world is divided into little- and big-endian camps, and a gulf of incomprehension falls between them. Most MIPS CPUs can be set up to run either big-endian or little-endian; but even if you already know which way your MIPS system will be </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">configured, it</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">s strongly recommended that you make sure you understand this issue thoroughly. It</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">s caught out many experienced developers before you, and it will catch out some more. Read about it in section 10.2.</SPAN></P>
<P><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Italic-0-1000-26; mso-bidi-font-family: Minion-Italic-0-1000-26; mso-font-kerning: 0pt">Data layout and alignment in memory</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">: Your program may make unportable assumptions about the memory layout of data declared in C. It</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">s almost always unportable to use C </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Courier-8r-0-1000-32; mso-bidi-font-family: Courier-8r-0-1000-32; mso-font-kerning: 0pt">struct </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">declarations to map input files or data received through a communication link, for example.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">Danger can lurk in a program that employs multiple views of private data with differently typed pointers or unions.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">However, data layout goes together with a description of other conventions (for register use, argument passing, and stack handling) and you</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">ll find that in the next chapter: If you need to take a peek ahead, it</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">s in section 11.1.</SPAN></P>
<P><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Italic-0-1000-26; mso-bidi-font-family: Minion-Italic-0-1000-26; mso-font-kerning: 0pt">Need for explicit cache management</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">: You may find that code you</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">d like to reuse was developed for a microprocessor that didn</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">t implement caches at all, or one that used a CPU with caches that are </SPAN><SPAN style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>invisible</SPAN>&#8221;<SPAN lang=EN-US> to software (almost all side effects of caching in PC-compatible processors are hidden by clever hardware, for instance). But most MIPS CPUs keep their hardware simple by letting some side effects remain visible and making software responsible for cache management; we</SPAN></SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">ll describe what this means in section 10.3.</SPAN></P>
<P><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Italic-0-1000-26; mso-bidi-font-family: Minion-Italic-0-1000-26; mso-font-kerning: 0pt">Memory access ordering and reordering</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">: In many modern embedded or consumer systems, data moving around the system may pass through a chain of subsystems as it moves from its source to its final destination. Those subsystems may themselves encapsulate a lot of complicated hardware, and may present you with unexpected problems. For example, pieces of information passed between the CPU and I/O devices may be forced to wait in queues, incurring variable amounts of delay; or they may be separated into several independent traffic streams, so the order in which they arrive at their respective destinations can</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt; mso-fareast-font-family: Minion-Regular-0-1000-21; mso-ascii-font-family: Minion-Regular-0-1000-21">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">t be guaranteed to match the order in which they were originally sent. </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">Typical problems and solutions are discussed in section 10.4.</SPAN></P>
<P><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Italic-0-1000-26; mso-bidi-font-family: Minion-Italic-0-1000-26; mso-font-kerning: 0pt">Writing it in C</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Minion-Regular-0-1000-21; mso-bidi-font-family: Minion-Regular-0-1000-21; mso-font-kerning: 0pt">: This is not so much a problem as an opportunity. But there are things you can do in C (and probably should do in preference to writing assembly code) that are fairly MIPS-specific. This section talks about inline assembly, using memory-mapped registers, and a ragbag of possible pitfalls using MIPS.</SPAN>