<TABLE summary="Navigation header" width="100%">
<TBODY>
<TR>
<TH colSpan=3 align=middle><SPAN class=phrase>schedule_hrtimeout</SPAN></TH></TR>
<TR>
<TD width="20%" align=left><A accessKey=p href="file:///C:/Users/donpope_tang/Documents/docbook/device-drivers/API-schedule-hrtimeout-range.html">Prev</A>&nbsp;</TD>
<TH width="60%" align=middle>High-resolution timers</TH>
<TD width="20%" align=right>&nbsp;<A accessKey=n href="file:///C:/Users/donpope_tang/Documents/docbook/device-drivers/ch01s06.html">Next</A></TD></TR></TBODY></TABLE>
<HR>

<DIV class=refentry><A name=API-schedule-hrtimeout></A>
<DIV class=titlepage></DIV>
<DIV class=refnamediv>
<H2>Name</H2>
<P>schedule_hrtimeout &#8212; sleep until timeout </P></DIV>
<DIV class=refsynopsisdiv>
<H2>Synopsis</H2>
<DIV class=funcsynopsis>
<TABLE style="cellspacing: 0; cellpadding: 0" class=funcprototype-table border=0 summary="Function synopsis">
<TBODY>
<TR>
<TD><CODE class=funcdef>int __sched <B class=fsfunc>schedule_hrtimeout </B>(</CODE></TD>
<TD>ktime_t * <VAR class=pdparam>expires</VAR>, </TD></TR>
<TR>
<TD>&nbsp;</TD>
<TD>const enum hrtimer_mode <VAR class=pdparam>mode</VAR><CODE>)</CODE>;</TD></TR></TBODY></TABLE>
<DIV class=funcprototype-spacer>&nbsp;</DIV></DIV></DIV>
<DIV class=refsect1><A name=idp42213732></A>
<H2>Arguments</H2>
<DIV class=variablelist>
<DL class=variablelist>
<DT><SPAN class=term><EM class=parameter><CODE>expires</CODE></EM></SPAN> 
<DD>
<P>timeout value (ktime_t) </P>
<DT><SPAN class=term><EM class=parameter><CODE>mode</CODE></EM></SPAN> 
<DD>
<P>timer mode, HRTIMER_MODE_ABS or HRTIMER_MODE_REL </P></DD></DL></DIV></DIV>
<DIV class=refsect1><A name=idp42216316></A>
<H2>Description</H2>
<P>Make the current task sleep until the given expiry time has elapsed. The routine will return immediately unless the current task state has been set (see <CODE class=function>set_current_state</CODE>). </P>
<P>You can set the task state as follows - </P>
<P><CODE class=constant>TASK_UNINTERRUPTIBLE</CODE> - at least <EM class=parameter><CODE>timeout</CODE></EM> time is guaranteed to pass before the routine returns. </P>
<P><CODE class=constant>TASK_INTERRUPTIBLE</CODE> - the routine may return early if a signal is delivered to the current task. </P>
<P>The current task state is guaranteed to be TASK_RUNNING when this routine returns. </P>
<P>Returns 0 when the timer has expired otherwise -EINTR </P></DIV></DIV>