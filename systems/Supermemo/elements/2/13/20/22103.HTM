<DIV class=navheader>
<TABLE summary="Navigation header" width="100%">
<TBODY>
<TR>
<TH colSpan=3 align=middle><SPAN class=phrase>struct bus_type</SPAN></TH></TR>
<TR>
<TD width="20%" align=left><A accessKey=p href="file:///C:/Users/donpope_tang/Documents/docbook/device-drivers/devdrivers.html">Prev</A>&nbsp;</TD>
<TH width="60%" align=middle>The Basic Device Driver-Model Structures </TH>
<TD width="20%" align=right>&nbsp;<A accessKey=n href="file:///C:/Users/donpope_tang/Documents/docbook/device-drivers/API-struct-device-driver.html">Next</A></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<DIV class=refentry><A name=API-struct-bus-type></A>
<DIV class=titlepage></DIV>
<DIV class=refnamediv>
<H2>Name</H2>
<P>struct bus_type &#8212; The bus type of the device </P></DIV>
<DIV class=refsynopsisdiv>
<H2>Synopsis</H2><PRE class=programlisting>struct bus_type {
  const char * name;
  const char * dev_name;
  struct device * dev_root;
  struct device_attribute * dev_attrs;
  const struct attribute_group ** bus_groups;
  const struct attribute_group ** dev_groups;
  const struct attribute_group ** drv_groups;
  int (* match) (struct device *dev, struct device_driver *drv);
  int (* uevent) (struct device *dev, struct kobj_uevent_env *env);
  int (* probe) (struct device *dev);
  int (* remove) (struct device *dev);
  void (* shutdown) (struct device *dev);
  int (* online) (struct device *dev);
  int (* offline) (struct device *dev);
  int (* suspend) (struct device *dev, pm_message_t state);
  int (* resume) (struct device *dev);
  const struct dev_pm_ops * pm;
  const struct iommu_ops * iommu_ops;
  struct subsys_private * p;
  struct lock_class_key lock_key;
};  </PRE></DIV>
<DIV class=refsect1><A name=idp43589292></A>
<H2>Members</H2>
<DIV class=variablelist>
<DL class=variablelist>
<DT><SPAN class=term>name</SPAN> 
<DD>
<P>The name of the bus. </P>
<DT><SPAN class=term>dev_name</SPAN> 
<DD>
<P>Used for subsystems to enumerate devices like (<SPAN class=quote>&#8220;<SPAN class=quote>foo<CODE class=constant>u</CODE></SPAN>&#8221;</SPAN>, dev-&gt;id). </P>
<DT><SPAN class=term>dev_root</SPAN> 
<DD>
<P>Default device to use as the parent. </P>
<DT><SPAN class=term>dev_attrs</SPAN> 
<DD>
<P>Default attributes of the devices on the bus. </P>
<DT><SPAN class=term>bus_groups</SPAN> 
<DD>
<P>Default attributes of the bus. </P>
<DT><SPAN class=term>dev_groups</SPAN> 
<DD>
<P>Default attributes of the devices on the bus. </P>
<DT><SPAN class=term>drv_groups</SPAN> 
<DD>
<P>Default attributes of the device drivers on the bus. </P>
<DT><SPAN class=term>match</SPAN> 
<DD>
<P>Called, perhaps multiple times, whenever a new device or driver is added for this bus. It should return a nonzero value if the given device can be handled by the given driver. </P>
<DT><SPAN class=term>uevent</SPAN> 
<DD>
<P>Called when a device is added, removed, or a few other things that generate uevents to add the environment variables. </P>
<DT><SPAN class=term>probe</SPAN> 
<DD>
<P>Called when a new device or driver add to this bus, and callback the specific driver's probe to initial the matched device. </P>
<DT><SPAN class=term>remove</SPAN> 
<DD>
<P>Called when a device removed from this bus. </P>
<DT><SPAN class=term>shutdown</SPAN> 
<DD>
<P>Called at shut-down time to quiesce the device. </P>
<DT><SPAN class=term>online</SPAN> 
<DD>
<P>Called to put the device back online (after offlining it). </P>
<DT><SPAN class=term>offline</SPAN> 
<DD>
<P>Called to put the device offline for hot-removal. May fail. </P>
<DT><SPAN class=term>suspend</SPAN> 
<DD>
<P>Called when a device on this bus wants to go to sleep mode. </P>
<DT><SPAN class=term>resume</SPAN> 
<DD>
<P>Called to bring a device on this bus out of sleep mode. </P>
<DT><SPAN class=term>pm</SPAN> 
<DD>
<P>Power management operations of this bus, callback the specific device driver's pm-ops. </P>
<DT><SPAN class=term>iommu_ops</SPAN> 
<DD>
<P>IOMMU specific operations for this bus, used to attach IOMMU driver implementations to a bus and allow the driver to do bus-specific setup </P>
<DT><SPAN class=term>p</SPAN> 
<DD>
<P>The private data of the driver core, only the driver core can touch this. </P>
<DT><SPAN class=term>lock_key</SPAN> 
<DD>
<P>Lock class key for use by the lock validator </P></DD></DL></DIV></DIV>
<DIV class=refsect1><A name=idp43605148></A>
<H2>Description</H2>
<P>A bus is a channel between the processor and one or more devices. For the purposes of the device model, all devices are connected via a bus, even if it is an internal, virtual, <SPAN class=quote>&#8220;<SPAN class=quote>platform</SPAN>&#8221;</SPAN> bus. Buses can plug into each other. A USB controller is usually a PCI device, for example. The device model represents the actual connections between buses and the devices they control. A bus is represented by the bus_type structure. It contains the name, the default attributes, the bus' methods, PM operations, and the driver core's private data. </P></DIV></DIV>
<DIV class=navfooter>
<HR>

<TABLE summary="Navigation footer" width="100%">
<TBODY>
<TR>
<TD width="40%" align=left><A accessKey=p href="file:///C:/Users/donpope_tang/Documents/docbook/device-drivers/devdrivers.html">Prev</A>&nbsp;</TD>
<TD width="20%" align=middle><A accessKey=u href="file:///C:/Users/donpope_tang/Documents/docbook/device-drivers/devdrivers.html#idp43584244">Up</A></TD>
<TD width="40%" align=right>&nbsp;<A accessKey=n href="file:///C:/Users/donpope_tang/Documents/docbook/device-drivers/API-struct-device-driver.html">Next</A></TD></TR>
<TR>
<TD vAlign=top width="40%" align=left>Chapter&nbsp;2.&nbsp;Device drivers infrastructure&nbsp;</TD>
<TD width="20%" align=middle><A accessKey=h href="file:///C:/Users/donpope_tang/Documents/docbook/device-drivers/index.html">Home</A></TD>
<TD vAlign=top width="40%" align=right>&nbsp;<SPAN class=phrase>struct device_driver</SPAN></TD></TR></TBODY></TABLE></DIV>