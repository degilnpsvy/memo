<DIV class=navheader>
<TABLE summary="Navigation header" width="100%">
<TBODY>
<TR>
<TH colSpan=3 align=middle><SPAN class=phrase>struct device</SPAN></TH></TR>
<TR>
<TD width="20%" align=left><A accessKey=p href="file:///C:/Users/donpope_tang/Documents/docbook/device-drivers/API-struct-class.html">Prev</A>&nbsp;</TD>
<TH width="60%" align=middle>The Basic Device Driver-Model Structures </TH>
<TD width="20%" align=right>&nbsp;<A accessKey=n href="file:///C:/Users/donpope_tang/Documents/docbook/device-drivers/API-module-driver.html">Next</A></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<DIV class=refentry><A name=API-struct-device></A>
<DIV class=titlepage></DIV>
<DIV class=refnamediv>
<H2>Name</H2>
<P>struct device &#8212; The basic device structure </P></DIV>
<DIV class=refsynopsisdiv>
<H2>Synopsis</H2><PRE class=programlisting>struct device {
  struct device * parent;
  struct device_private * p;
  struct kobject kobj;
  const char * init_name;
  const struct device_type * type;
  struct mutex mutex;
  struct bus_type * bus;
  struct device_driver * driver;
  void * platform_data;
  void * driver_data;
  struct dev_pm_info power;
  struct dev_pm_domain * pm_domain;
#ifdef CONFIG_PINCTRL
  struct dev_pin_info * pins;
#endif
#ifdef CONFIG_NUMA
  int numa_node;
#endif
  u64 * dma_mask;
  u64 coherent_dma_mask;
  unsigned long dma_pfn_offset;
  struct device_dma_parameters * dma_parms;
  struct list_head dma_pools;
  struct dma_coherent_mem * dma_mem;
#ifdef CONFIG_DMA_CMA
  struct cma * cma_area;
#endif
  struct dev_archdata archdata;
  struct device_node * of_node;
  struct acpi_dev_node acpi_node;
  dev_t devt;
  u32 id;
  spinlock_t devres_lock;
  struct list_head devres_head;
  struct klist_node knode_class;
  struct class * class;
  const struct attribute_group ** groups;
  void (* release) (struct device *dev);
  struct iommu_group * iommu_group;
  bool offline_disabled:1;
  bool offline:1;
};  </PRE></DIV>
<DIV class=refsect1><A name=idp43654348></A>
<H2>Members</H2>
<DIV class=variablelist>
<DL class=variablelist>
<DT><SPAN class=term>parent</SPAN> 
<DD>
<P>The device's <SPAN class=quote>&#8220;<SPAN class=quote>parent</SPAN>&#8221;</SPAN> device, the device to which it is attached. In most cases, a parent device is some sort of bus or host controller. If parent is NULL, the device, is a top-level device, which is not usually what you want. </P>
<DT><SPAN class=term>p</SPAN> 
<DD>
<P>Holds the private data of the driver core portions of the device. See the comment of the struct device_private for detail. </P>
<DT><SPAN class=term>kobj</SPAN> 
<DD>
<P>A top-level, abstract class from which other classes are derived. </P>
<DT><SPAN class=term>init_name</SPAN> 
<DD>
<P>Initial name of the device. </P>
<DT><SPAN class=term>type</SPAN> 
<DD>
<P>The type of device. This identifies the device type and carries type-specific information. </P>
<DT><SPAN class=term>mutex</SPAN> 
<DD>
<P>Mutex to synchronize calls to its driver. </P>
<DT><SPAN class=term>bus</SPAN> 
<DD>
<P>Type of bus device is on. </P>
<DT><SPAN class=term>driver</SPAN> 
<DD>
<P>Which driver has allocated this </P>
<DT><SPAN class=term>platform_data</SPAN> 
<DD>
<P>Platform data specific to the device. </P>
<DT><SPAN class=term>driver_data</SPAN> 
<DD>
<P>Private pointer for driver specific info. </P>
<DT><SPAN class=term>power</SPAN> 
<DD>
<P>For device power management. See Documentation/power/devices.txt for details. </P>
<DT><SPAN class=term>pm_domain</SPAN> 
<DD>
<P>Provide callbacks that are executed during system suspend, hibernation, system resume and during runtime PM transitions along with subsystem-level and driver-level callbacks. </P>
<DT><SPAN class=term>pins</SPAN> 
<DD>
<P>For device pin management. See Documentation/pinctrl.txt for details. </P>
<DT><SPAN class=term>numa_node</SPAN> 
<DD>
<P>NUMA node this device is close to. </P>
<DT><SPAN class=term>dma_mask</SPAN> 
<DD>
<P>Dma mask (if dma'ble device). </P>
<DT><SPAN class=term>coherent_dma_mask</SPAN> 
<DD>
<P>Like dma_mask, but for alloc_coherent mapping as not all hardware supports 64-bit addresses for consistent allocations such descriptors. </P>
<DT><SPAN class=term>dma_pfn_offset</SPAN> 
<DD>
<P>offset of DMA memory range relatively of RAM </P>
<DT><SPAN class=term>dma_parms</SPAN> 
<DD>
<P>A low level driver may set these to teach IOMMU code about segment limitations. </P>
<DT><SPAN class=term>dma_pools</SPAN> 
<DD>
<P>Dma pools (if dma'ble device). </P>
<DT><SPAN class=term>dma_mem</SPAN> 
<DD>
<P>Internal for coherent mem override. </P>
<DT><SPAN class=term>cma_area</SPAN> 
<DD>
<P>Contiguous memory area for dma allocations </P>
<DT><SPAN class=term>archdata</SPAN> 
<DD>
<P>For arch-specific additions. </P>
<DT><SPAN class=term>of_node</SPAN> 
<DD>
<P>Associated device tree node. </P>
<DT><SPAN class=term>acpi_node</SPAN> 
<DD>
<P>Associated ACPI device node. </P>
<DT><SPAN class=term>devt</SPAN> 
<DD>
<P>For creating the sysfs <SPAN class=quote>&#8220;<SPAN class=quote>dev</SPAN>&#8221;</SPAN>. </P>
<DT><SPAN class=term>id</SPAN> 
<DD>
<P>device instance </P>
<DT><SPAN class=term>devres_lock</SPAN> 
<DD>
<P>Spinlock to protect the resource of the device. </P>
<DT><SPAN class=term>devres_head</SPAN> 
<DD>
<P>The resources list of the device. </P>
<DT><SPAN class=term>knode_class</SPAN> 
<DD>
<P>The node used to add the device to the class list. </P>
<DT><SPAN class=term>class</SPAN> 
<DD>
<P>The class of the device. </P>
<DT><SPAN class=term>groups</SPAN> 
<DD>
<P>Optional attribute groups. </P>
<DT><SPAN class=term>release</SPAN> 
<DD>
<P>Callback to free the device after all references have gone away. This should be set by the allocator of the device (i.e. the bus driver that discovered the device). </P>
<DT><SPAN class=term>iommu_group</SPAN> 
<DD>
<P>IOMMU group the device belongs to. </P>
<DT><SPAN class=term>offline_disabled</SPAN> 
<DD>
<P>If set, the device is permanently online. </P>
<DT><SPAN class=term>offline</SPAN> 
<DD>
<P>Set after successful invocation of bus type's .<CODE class=function>offline</CODE>. </P></DD></DL></DIV></DIV>
<DIV class=refsect1><A name=idp43681428></A>
<H2>Example</H2>
<DIV class=informalexample><PRE class=programlisting>   For devices on custom boards, as typical of embedded
   		and SOC based hardware, Linux often uses platform_data to point
   		to board-specific structures describing devices and how they
   		are wired.  That can include what ports are available, chip
   		variants, which GPIO pins act in what additional roles, and so
   		on.  This shrinks the <SPAN class=quote>&#8220;<SPAN class=quote>Board Support Packages</SPAN>&#8221;</SPAN> (BSPs) and
   		minimizes board-specific #ifdefs in drivers.
</PRE></DIV></DIV>
<DIV class=refsect1><A name=idp43683236></A>
<H2>Description</H2>
<P>At the lowest level, every device in a Linux system is represented by an instance of struct device. The device structure contains the information that the device model core needs to model the system. Most subsystems, however, track additional information about the devices they host. As a result, it is rare for devices to be represented by bare device structures; instead, that structure, like kobject structures, is usually embedded within a higher-level representation of the device. </P></DIV></DIV>
<DIV class=navfooter>
<HR>

<TABLE summary="Navigation footer" width="100%">
<TBODY>
<TR>
<TD width="40%" align=left><A accessKey=p href="file:///C:/Users/donpope_tang/Documents/docbook/device-drivers/API-struct-class.html">Prev</A>&nbsp;</TD>
<TD width="20%" align=middle><A accessKey=u href="file:///C:/Users/donpope_tang/Documents/docbook/device-drivers/devdrivers.html#idp43584244">Up</A></TD>
<TD width="40%" align=right>&nbsp;<A accessKey=n href="file:///C:/Users/donpope_tang/Documents/docbook/device-drivers/API-module-driver.html">Next</A></TD></TR>
<TR>
<TD vAlign=top width="40%" align=left><SPAN class=phrase>struct class</SPAN>&nbsp;</TD>
<TD width="20%" align=middle><A accessKey=h href="file:///C:/Users/donpope_tang/Documents/docbook/device-drivers/index.html">Home</A></TD>
<TD vAlign=top width="40%" align=right>&nbsp;<SPAN class=phrase>module_driver</SPAN></TD></TR></TBODY></TABLE></DIV>