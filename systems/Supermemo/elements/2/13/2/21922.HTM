<TABLE summary="Navigation header" width="100%">
<TBODY>
<TR>
<TH colSpan=3 align=middle><SPAN class=phrase>wake_up_bit</SPAN></TH></TR>
<TR>
<TD width="20%" align=left><A accessKey=p href="file:///C:/Users/donpope_tang/Documents/docbook/device-drivers/API-abort-exclusive-wait.html">Prev</A>&nbsp;</TD>
<TH width="60%" align=middle>Wait queues and Wake events</TH>
<TD width="20%" align=right>&nbsp;<A accessKey=n href="file:///C:/Users/donpope_tang/Documents/docbook/device-drivers/API-wake-up-atomic-t.html">Next</A></TD></TR></TBODY></TABLE>
<HR>

<DIV class=refentry><A name=API-wake-up-bit></A>
<DIV class=titlepage></DIV>
<DIV class=refnamediv>
<H2>Name</H2>
<P>wake_up_bit &#8212; wake up a waiter on a bit </P></DIV>
<DIV class=refsynopsisdiv>
<H2>Synopsis</H2>
<DIV class=funcsynopsis>
<TABLE style="cellspacing: 0; cellpadding: 0" class=funcprototype-table border=0 summary="Function synopsis">
<TBODY>
<TR>
<TD><CODE class=funcdef>void <B class=fsfunc>wake_up_bit </B>(</CODE></TD>
<TD>void * <VAR class=pdparam>word</VAR>, </TD></TR>
<TR>
<TD>&nbsp;</TD>
<TD>int <VAR class=pdparam>bit</VAR><CODE>)</CODE>;</TD></TR></TBODY></TABLE>
<DIV class=funcprototype-spacer>&nbsp;</DIV></DIV></DIV>
<DIV class=refsect1><A name=idp42032484></A>
<H2>Arguments</H2>
<DIV class=variablelist>
<DL class=variablelist>
<DT><SPAN class=term><EM class=parameter><CODE>word</CODE></EM></SPAN> 
<DD>
<P>the word being waited on, a kernel virtual address </P>
<DT><SPAN class=term><EM class=parameter><CODE>bit</CODE></EM></SPAN> 
<DD>
<P>the bit of the word being waited on </P></DD></DL></DIV></DIV>
<DIV class=refsect1><A name=idp42035092></A>
<H2>Description</H2>
<P>There is a standard hashed waitqueue table for generic use. This is the part of the hashtable's accessor API that wakes up waiters on a bit. For instance, if one were to have waiters on a bitflag, one would call <CODE class=function>wake_up_bit</CODE> after clearing the bit. </P>
<P>In order for this to function properly, as it uses <CODE class=function>waitqueue_active</CODE> internally, some kind of memory barrier must be done prior to calling this. Typically, this will be <CODE class=function>smp_mb__after_atomic</CODE>, but in some cases where bitflags are manipulated non-atomically under a lock, one may need to use a less regular barrier, such fs/inode.c's <CODE class=function>smp_mb</CODE>, because <CODE class=function>spin_unlock</CODE> does not guarantee a memory barrier. </P></DIV></DIV>