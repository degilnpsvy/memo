Declaration<BR>~~~~~~~~~~~ 
<P></P>
<P><FONT class=extract>As stated above, struct device_driver objects are statically<BR>allocated. Below is an example declaration of the eepro100<BR>driver. This declaration is hypothetical only; it relies on the driver<BR>being converted completely to the new model. </FONT></P>
<P><FONT class=extract>static struct device_driver eepro100_driver = {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .name&nbsp;&nbsp;= "eepro100",<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .bus&nbsp;&nbsp;= &amp;pci_bus_type,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .probe&nbsp;&nbsp;= eepro100_probe,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .remove&nbsp;&nbsp;= eepro100_remove,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .suspend&nbsp;&nbsp;= eepro100_suspend,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .resume&nbsp;&nbsp;= eepro100_resume,<BR>};</FONT></P>
<P><FONT class=extract>Most drivers will not be able to be converted completely to the new<BR>model because the bus they belong to has a bus-specific structure with<BR>bus-specific fields that cannot be generalized. </FONT></P>
<P><FONT class=extract>The most common example of this are device ID structures. A driver<BR>typically defines an array of device IDs that it supports. The format<BR>of these structures and the semantics for comparing device IDs are<BR>completely bus-specific. Defining them as bus-specific entities would<BR>sacrifice type-safety, so we keep bus-specific structures around.</FONT> </P>
<P><FONT class=extract>Bus-specific drivers should include a generic struct device_driver in<BR>the definition of the bus-specific driver. Like this:</FONT></P>
<P><FONT class=extract>struct pci_driver {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const struct pci_device_id *id_table;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct device_driver&nbsp;&nbsp; driver;<BR>};</FONT></P>
<P><FONT class=extract>A definition that included bus-specific fields would look like<BR>(using the eepro100 driver again):</FONT></P>
<P><FONT class=extract>static struct pci_driver eepro100_driver = {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .id_table&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = eepro100_pci_tbl,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .driver&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = {<BR>&nbsp;&nbsp;.name&nbsp;&nbsp;= "eepro100",<BR>&nbsp;&nbsp;.bus&nbsp;&nbsp;= &amp;pci_bus_type,<BR>&nbsp;&nbsp;.probe&nbsp;&nbsp;= eepro100_probe,<BR>&nbsp;&nbsp;.remove&nbsp;&nbsp;= eepro100_remove,<BR>&nbsp;&nbsp;.suspend&nbsp;= eepro100_suspend,<BR>&nbsp;&nbsp;.resume&nbsp;&nbsp;= eepro100_resume,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; },<BR>};</FONT></P>
<P><FONT class=extract>Some may find the syntax of embedded struct initialization awkward or<BR>even a bit ugly. So far, it's the best way we've found to do what we want...</FONT>