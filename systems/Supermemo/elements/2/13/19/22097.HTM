Callbacks<BR>~~~~~~~~~ 
<P></P>
<P><FONT class=extract>&nbsp;int&nbsp;(*probe)&nbsp;(struct device * dev);</FONT></P>
<P><FONT class=extract>The probe() entry is called in task context, with the bus's rwsem locked<BR>and the driver partially bound to the device.&nbsp; Drivers commonly use<BR>container_of() to convert "dev" to a bus-specific type, both in probe()<BR>and other routines.&nbsp; That type often provides device resource data, such<BR>as pci_dev.resource[] or platform_device.resources, which is used in<BR>addition to dev-&gt;platform_data to initialize the driver.</FONT></P>
<P><FONT class=extract>This callback holds the driver-specific logic to bind the driver to a<BR>given device.&nbsp; That includes verifying that the device is present, that<BR>it's a version the driver can handle, that driver data structures can<BR>be allocated and initialized, and that any hardware can be initialized.<BR>Drivers often store a pointer to their state with dev_set_drvdata().<BR>When the driver has successfully bound itself to that device, then probe()<BR>returns zero and the driver model code will finish its part of binding<BR>the driver to that device.</FONT></P>
<P><FONT class=extract>A driver's probe() may return a negative errno value to indicate that<BR>the driver did not bind to this device, in which case it should have<BR>released all resources it allocated.</FONT></P>
<P><FONT class=extract>&nbsp;int &nbsp;(*remove)&nbsp;(struct device * dev);</FONT></P>
<P><FONT class=extract>remove is called to unbind a driver from a device. This may be<BR>called if a device is physically removed from the system, if the<BR>driver module is being unloaded, during a reboot sequence, or<BR>in other cases.</FONT></P>
<P><FONT class=extract>It is up to the driver to determine if the device is present or<BR>not. It should free any resources allocated specifically for the<BR>device; i.e. anything in the device's driver_data field. </FONT></P>
<P><FONT class=extract>If the device is still present, it should quiesce the device and place<BR>it into a supported low-power state.</FONT></P>
<P><FONT class=extract>&nbsp;int&nbsp;(*suspend)&nbsp;(struct device * dev, pm_message_t state);</FONT></P>
<P><FONT class=extract>suspend is called to put the device in a low power state.</FONT></P>
<P><FONT class=extract>&nbsp;int&nbsp;(*resume)&nbsp;(struct device * dev);</FONT></P>
<P><FONT class=extract>Resume is used to bring a device back from a low power state.</FONT>