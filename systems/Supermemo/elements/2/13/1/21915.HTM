<TABLE summary="Navigation header" width="100%">
<TBODY>
<TR>
<TH colSpan=3 align=middle><SPAN class=phrase>wait_on_bit_lock_io</SPAN></TH></TR>
<TR>
<TD width="20%" align=left><A accessKey=p href="file:///C:/Users/donpope_tang/Documents/docbook/device-drivers/API-wait-on-bit-lock.html">Prev</A>&nbsp;</TD>
<TH width="60%" align=middle>Wait queues and Wake events</TH>
<TD width="20%" align=right>&nbsp;<A accessKey=n href="file:///C:/Users/donpope_tang/Documents/docbook/device-drivers/API-wait-on-bit-lock-action.html">Next</A></TD></TR></TBODY></TABLE>
<HR>

<DIV class=refentry><A name=API-wait-on-bit-lock-io></A>
<DIV class=titlepage></DIV>
<DIV class=refnamediv>
<H2>Name</H2>
<P>wait_on_bit_lock_io &#8212; wait for a bit to be cleared, when wanting to set it </P></DIV>
<DIV class=refsynopsisdiv>
<H2>Synopsis</H2>
<DIV class=funcsynopsis>
<TABLE style="cellspacing: 0; cellpadding: 0" class=funcprototype-table border=0 summary="Function synopsis">
<TBODY>
<TR>
<TD><CODE class=funcdef>int <B class=fsfunc>wait_on_bit_lock_io </B>(</CODE></TD>
<TD>void * <VAR class=pdparam>word</VAR>, </TD></TR>
<TR>
<TD>&nbsp;</TD>
<TD>int <VAR class=pdparam>bit</VAR>, </TD></TR>
<TR>
<TD>&nbsp;</TD>
<TD>unsigned <VAR class=pdparam>mode</VAR><CODE>)</CODE>;</TD></TR></TBODY></TABLE>
<DIV class=funcprototype-spacer>&nbsp;</DIV></DIV></DIV>
<DIV class=refsect1><A name=idp41957956></A>
<H2>Arguments</H2>
<DIV class=variablelist>
<DL class=variablelist>
<DT><SPAN class=term><EM class=parameter><CODE>word</CODE></EM></SPAN> 
<DD>
<P>the word being waited on, a kernel virtual address </P>
<DT><SPAN class=term><EM class=parameter><CODE>bit</CODE></EM></SPAN> 
<DD>
<P>the bit of the word being waited on </P>
<DT><SPAN class=term><EM class=parameter><CODE>mode</CODE></EM></SPAN> 
<DD>
<P>the task state to sleep in </P></DD></DL></DIV></DIV>
<DIV class=refsect1><A name=idp41961564></A>
<H2>Description</H2>
<P>Use the standard hashed waitqueue table to wait for a bit to be cleared and then to atomically set it. This is similar to <CODE class=function>wait_on_bit</CODE>, but calls <CODE class=function>io_schedule</CODE> instead of <CODE class=function>schedule</CODE> for the actual waiting. </P>
<P>Returns zero if the bit was (eventually) found to be clear and was set. Returns non-zero if a signal was delivered to the process and the <EM class=parameter><CODE>mode</CODE></EM> allows that signal to wake the process. </P></DIV></DIV>