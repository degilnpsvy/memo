# Documentation/sysctl/kernel.txt&nbsp; 
<P></P>
<P>Documentation for /proc/sys/kernel/*&nbsp;kernel version 2.2.10<BR>&nbsp;(c) 1998, 1999,&nbsp; Rik van Riel &lt;<A href="mailto:riel@nl.linux.org">riel@nl.linux.org</A>&gt;<BR>&nbsp;(c) 2009,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Shen Feng&lt;<A href="mailto:shen@cn.fujitsu.com">shen@cn.fujitsu.com</A>&gt;</P>
<P></P>
<P>For general info and legal blurb, please look in README.</P>
<P>==============================================================</P>
<P>This file contains documentation for the sysctl files in<BR>/proc/sys/kernel/ and is valid for Linux kernel version 2.2.</P>
<P>The files in this directory can be used to tune and monitor<BR>miscellaneous and general things in the operation of the Linux<BR>kernel. Since some of the files _can_ be used to screw up your<BR>system, it is advisable to read both documentation and source<BR>before actually making adjustments.</P>
<P>Currently, these files might (depending on your configuration)<BR>show up in /proc/sys/kernel:</P>
<P>- acct<BR>- acpi_video_flags<BR>- auto_msgmni<BR>- bootloader_type&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ X86 only ]<BR>- bootloader_version&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ X86 only ]<BR>- callhome&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ S390 only ]<BR>- cap_last_cap<BR>- core_pattern<BR>- core_pipe_limit<BR>- core_uses_pid<BR>- ctrl-alt-del<BR>- dmesg_restrict<BR>- domainname<BR>- hostname<BR>- hotplug<BR>- kptr_restrict<BR>- kstack_depth_to_print&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ X86 only ]<BR>- l2cr&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ PPC only ]<BR>- modprobe&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ==&gt; Documentation/debugging-modules.txt<BR>- modules_disabled<BR>- msg_next_id&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ sysv ipc ]<BR>- msgmax<BR>- msgmnb<BR>- msgmni<BR>- nmi_watchdog<BR>- osrelease<BR>- ostype<BR>- overflowgid<BR>- overflowuid<BR>- panic<BR>- panic_on_oops<BR>- panic_on_unrecovered_nmi<BR>- panic_on_stackoverflow<BR>- pid_max<BR>- powersave-nap&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ PPC only ]<BR>- printk<BR>- printk_delay<BR>- printk_ratelimit<BR>- printk_ratelimit_burst<BR>- randomize_va_space<BR>- real-root-dev&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ==&gt; Documentation/initrd.txt<BR>- reboot-cmd&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ SPARC only ]<BR>- rtsig-max<BR>- rtsig-nr<BR>- sem<BR>- sem_next_id&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ sysv ipc ]<BR>- sg-big-buff&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ generic SCSI device (sg) ]<BR>- shm_next_id&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ sysv ipc ]<BR>- shm_rmid_forced<BR>- shmall<BR>- shmmax&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ sysv ipc ]<BR>- shmmni<BR>- softlockup_thresh<BR>- stop-a&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [ SPARC only ]<BR>- sysrq&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ==&gt; Documentation/sysrq.txt<BR>- tainted<BR>- threads-max<BR>- unknown_nmi_panic<BR>- version</P>
<P>==============================================================</P>
<P>acct:</P>
<P>highwater lowwater frequency</P>
<P>If BSD-style process accounting is enabled these values control<BR>its behaviour. If free space on filesystem where the log lives<BR>goes below &lt;lowwater&gt;% accounting suspends. If free space gets<BR>above &lt;highwater&gt;% accounting resumes. &lt;Frequency&gt; determines<BR>how often do we check the amount of free space (value is in<BR>seconds). Default:<BR>4 2 30<BR>That is, suspend accounting if there left &lt;= 2% free; resume it<BR>if we got &gt;=4%; consider information about amount of free space<BR>valid for 30 seconds.</P>
<P>==============================================================</P>
<P>acpi_video_flags:</P>
<P>flags</P>
<P>See Doc*/kernel/power/video.txt, it allows mode of video boot to be<BR>set during run time.</P>
<P>==============================================================</P>
<P>auto_msgmni:</P>
<P>Enables/Disables automatic recomputing of msgmni upon memory add/remove<BR>or upon ipc namespace creation/removal (see the msgmni description<BR>above). Echoing "1" into this file enables msgmni automatic recomputing.<BR>Echoing "0" turns it off. auto_msgmni default value is 1.</P>
<P><BR>==============================================================</P>
<P>bootloader_type:</P>
<P>x86 bootloader identification</P>
<P>This gives the bootloader type number as indicated by the bootloader,<BR>shifted left by 4, and OR'd with the low four bits of the bootloader<BR>version.&nbsp; The reason for this encoding is that this used to match the<BR>type_of_loader field in the kernel header; the encoding is kept for<BR>backwards compatibility.&nbsp; That is, if the full bootloader type number<BR>is 0x15 and the full version number is 0x234, this file will contain<BR>the value 340 = 0x154.</P>
<P>See the type_of_loader and ext_loader_type fields in<BR>Documentation/x86/boot.txt for additional information.</P>
<P>==============================================================</P>
<P>bootloader_version:</P>
<P>x86 bootloader version</P>
<P>The complete bootloader version number.&nbsp; In the example above, this<BR>file will contain the value 564 = 0x234.</P>
<P>See the type_of_loader and ext_loader_ver fields in<BR>Documentation/x86/boot.txt for additional information.</P>
<P>==============================================================</P>
<P>callhome:</P>
<P>Controls the kernel's callhome behavior in case of a kernel panic.</P>
<P>The s390 hardware allows an operating system to send a notification<BR>to a service organization (callhome) in case of an operating system panic.</P>
<P>When the value in this file is 0 (which is the default behavior)<BR>nothing happens in case of a kernel panic. If this value is set to "1"<BR>the complete kernel oops message is send to the IBM customer service<BR>organization in case the mainframe the Linux operating system is running<BR>on has a service contract with IBM.</P>
<P>==============================================================</P>
<P>cap_last_cap</P>
<P>Highest valid capability of the running kernel.&nbsp; Exports<BR>CAP_LAST_CAP from the kernel.</P>
<P>==============================================================</P>
<P>core_pattern:</P>
<P>core_pattern is used to specify a core dumpfile pattern name.<BR>. max length 128 characters; default value is "core"<BR>. core_pattern is used as a pattern template for the output filename;<BR>&nbsp; certain string patterns (beginning with '%') are substituted with<BR>&nbsp; their actual values.<BR>. backward compatibility with core_uses_pid:<BR>&nbsp;If core_pattern does not include "%p" (default does not)<BR>&nbsp;and core_uses_pid is set, then .PID will be appended to<BR>&nbsp;the filename.<BR>. corename format specifiers:<BR>&nbsp;%&lt;NUL&gt;&nbsp;'%' is dropped<BR>&nbsp;%%&nbsp;output one '%'<BR>&nbsp;%p&nbsp;pid<BR>&nbsp;%u&nbsp;uid<BR>&nbsp;%g&nbsp;gid<BR>&nbsp;%d&nbsp;dump mode, matches PR_SET_DUMPABLE and<BR>&nbsp;&nbsp;/proc/sys/fs/suid_dumpable<BR>&nbsp;%s&nbsp;signal number<BR>&nbsp;%t&nbsp;UNIX time of dump<BR>&nbsp;%h&nbsp;hostname<BR>&nbsp;%e&nbsp;executable filename (may be shortened)<BR>&nbsp;%E&nbsp;executable path<BR>&nbsp;%&lt;OTHER&gt; both are dropped<BR>. If the first character of the pattern is a '|', the kernel will treat<BR>&nbsp; the rest of the pattern as a command to run.&nbsp; The core dump will be<BR>&nbsp; written to the standard input of that program instead of to a file.</P>
<P>==============================================================</P>
<P>core_pipe_limit:</P>
<P>This sysctl is only applicable when core_pattern is configured to pipe<BR>core files to a user space helper (when the first character of<BR>core_pattern is a '|', see above).&nbsp; When collecting cores via a pipe<BR>to an application, it is occasionally useful for the collecting<BR>application to gather data about the crashing process from its<BR>/proc/pid directory.&nbsp; In order to do this safely, the kernel must wait<BR>for the collecting process to exit, so as not to remove the crashing<BR>processes proc files prematurely.&nbsp; This in turn creates the<BR>possibility that a misbehaving userspace collecting process can block<BR>the reaping of a crashed process simply by never exiting.&nbsp; This sysctl<BR>defends against that.&nbsp; It defines how many concurrent crashing<BR>processes may be piped to user space applications in parallel.&nbsp; If<BR>this value is exceeded, then those crashing processes above that value<BR>are noted via the kernel log and their cores are skipped.&nbsp; 0 is a<BR>special value, indicating that unlimited processes may be captured in<BR>parallel, but that no waiting will take place (i.e. the collecting<BR>process is not guaranteed access to /proc/&lt;crashing pid&gt;/).&nbsp; This<BR>value defaults to 0.</P>
<P>==============================================================</P>
<P>core_uses_pid:</P>
<P>The default coredump filename is "core".&nbsp; By setting<BR>core_uses_pid to 1, the coredump filename becomes core.PID.<BR>If core_pattern does not include "%p" (default does not)<BR>and core_uses_pid is set, then .PID will be appended to<BR>the filename.</P>
<P>==============================================================</P>
<P>ctrl-alt-del:</P>
<P>When the value in this file is 0, ctrl-alt-del is trapped and<BR>sent to the init(1) program to handle a graceful restart.<BR>When, however, the value is &gt; 0, Linux's reaction to a Vulcan<BR>Nerve Pinch (tm) will be an immediate reboot, without even<BR>syncing its dirty buffers.</P>
<P>Note: when a program (like dosemu) has the keyboard in 'raw'<BR>mode, the ctrl-alt-del is intercepted by the program before it<BR>ever reaches the kernel tty layer, and it's up to the program<BR>to decide what to do with it.</P>
<P>==============================================================</P>
<P>dmesg_restrict:</P>
<P>This toggle indicates whether unprivileged users are prevented<BR>from using dmesg(8) to view messages from the kernel's log buffer.<BR>When dmesg_restrict is set to (0) there are no restrictions. When<BR>dmesg_restrict is set set to (1), users must have CAP_SYSLOG to use<BR>dmesg(8).</P>
<P>The kernel config option CONFIG_SECURITY_DMESG_RESTRICT sets the<BR>default value of dmesg_restrict.</P>
<P>==============================================================</P>
<P>domainname &amp; hostname:</P>
<P>These files can be used to set the NIS/YP domainname and the<BR>hostname of your box in exactly the same way as the commands<BR>domainname and hostname, i.e.:<BR># echo "darkstar" &gt; /proc/sys/kernel/hostname<BR># echo "mydomain" &gt; /proc/sys/kernel/domainname<BR>has the same effect as<BR># hostname "darkstar"<BR># domainname "mydomain"</P>
<P>Note, however, that the classic darkstar.frop.org has the<BR>hostname "darkstar" and DNS (Internet Domain Name Server)<BR>domainname "frop.org", not to be confused with the NIS (Network<BR>Information Service) or YP (Yellow Pages) domainname. These two<BR>domain names are in general different. For a detailed discussion<BR>see the hostname(1) man page.</P>
<P>==============================================================</P>
<P>hotplug:</P>
<P>Path for the hotplug policy agent.<BR>Default value is "/sbin/hotplug".</P>
<P>==============================================================</P>
<P>kptr_restrict:</P>
<P>This toggle indicates whether restrictions are placed on<BR>exposing kernel addresses via /proc and other interfaces.</P>
<P>When kptr_restrict is set to (0), the default, there are no restrictions.</P>
<P>When kptr_restrict is set to (1), kernel pointers printed using the %pK<BR>format specifier will be replaced with 0's unless the user has CAP_SYSLOG<BR>and effective user and group ids are equal to the real ids. This is<BR>because %pK checks are done at read() time rather than open() time, so<BR>if permissions are elevated between the open() and the read() (e.g via<BR>a setuid binary) then %pK will not leak kernel pointers to unprivileged<BR>users. Note, this is a temporary solution only. The correct long-term<BR>solution is to do the permission checks at open() time. Consider removing<BR>world read permissions from files that use %pK, and using dmesg_restrict<BR>to protect against uses of %pK in dmesg(8) if leaking kernel pointer<BR>values to unprivileged users is a concern.</P>
<P>When kptr_restrict is set to (2), kernel pointers printed using<BR>%pK will be replaced with 0's regardless of privileges.</P>
<P>==============================================================</P>
<P>kstack_depth_to_print: (X86 only)</P>
<P>Controls the number of words to print when dumping the raw<BR>kernel stack.</P>
<P>==============================================================</P>
<P>l2cr: (PPC only)</P>
<P>This flag controls the L2 cache of G3 processor boards. If<BR>0, the cache is disabled. Enabled if nonzero.</P>
<P>==============================================================</P>
<P>modules_disabled:</P>
<P>A toggle value indicating if modules are allowed to be loaded<BR>in an otherwise modular kernel.&nbsp; This toggle defaults to off<BR>(0), but can be set true (1).&nbsp; Once true, modules can be<BR>neither loaded nor unloaded, and the toggle cannot be set back<BR>to false.</P>
<P>==============================================================</P>
<P>msg_next_id, sem_next_id, and shm_next_id:</P>
<P>These three toggles allows to specify desired id for next allocated IPC<BR>object: message, semaphore or shared memory respectively.</P>
<P>By default they are equal to -1, which means generic allocation logic.<BR>Possible values to set are in range {0..INT_MAX}.</P>
<P>Notes:<BR>1) kernel doesn't guarantee, that new object will have desired id. So,<BR>it's up to userspace, how to handle an object with "wrong" id.<BR>2) Toggle with non-default value will be set back to -1 by kernel after<BR>successful IPC object allocation.</P>
<P>==============================================================</P>
<P>nmi_watchdog:</P>
<P>Enables/Disables the NMI watchdog on x86 systems. When the value is<BR>non-zero the NMI watchdog is enabled and will continuously test all<BR>online cpus to determine whether or not they are still functioning<BR>properly. Currently, passing "nmi_watchdog=" parameter at boot time is<BR>required for this function to work.</P>
<P>If LAPIC NMI watchdog method is in use (nmi_watchdog=2 kernel<BR>parameter), the NMI watchdog shares registers with oprofile. By<BR>disabling the NMI watchdog, oprofile may have more registers to<BR>utilize.</P>
<P>==============================================================</P>
<P>osrelease, ostype &amp; version:</P>
<P># cat osrelease<BR>2.1.88<BR># cat ostype<BR>Linux<BR># cat version<BR>#5 Wed Feb 25 21:49:24 MET 1998</P>
<P>The files osrelease and ostype should be clear enough. Version<BR>needs a little more clarification however. The '#5' means that<BR>this is the fifth kernel built from this source base and the<BR>date behind it indicates the time the kernel was built.<BR>The only way to tune these values is to rebuild the kernel :-)</P>
<P>==============================================================</P>
<P>overflowgid &amp; overflowuid:</P>
<P>if your architecture did not always support 32-bit UIDs (i.e. arm,<BR>i386, m68k, sh, and sparc32), a fixed UID and GID will be returned to<BR>applications that use the old 16-bit UID/GID system calls, if the<BR>actual UID or GID would exceed 65535.</P>
<P>These sysctls allow you to change the value of the fixed UID and GID.<BR>The default is 65534.</P>
<P>==============================================================</P>
<P>panic:</P>
<P>The value in this file represents the number of seconds the kernel<BR>waits before rebooting on a panic. When you use the software watchdog,<BR>the recommended setting is 60.</P>
<P>==============================================================</P>
<P>panic_on_unrecovered_nmi:</P>
<P>The default Linux behaviour on an NMI of either memory or unknown is<BR>to continue operation. For many environments such as scientific<BR>computing it is preferable that the box is taken out and the error<BR>dealt with than an uncorrected parity/ECC error get propagated.</P>
<P>A small number of systems do generate NMI's for bizarre random reasons<BR>such as power management so the default is off. That sysctl works like<BR>the existing panic controls already in that directory.</P>
<P>==============================================================</P>
<P>panic_on_oops:</P>
<P>Controls the kernel's behaviour when an oops or BUG is encountered.</P>
<P>0: try to continue operation</P>
<P>1: panic immediately.&nbsp; If the `panic' sysctl is also non-zero then the<BR>&nbsp;&nbsp; machine will be rebooted.</P>
<P>==============================================================</P>
<P>panic_on_stackoverflow:</P>
<P>Controls the kernel's behavior when detecting the overflows of<BR>kernel, IRQ and exception stacks except a user stack.<BR>This file shows up if CONFIG_DEBUG_STACKOVERFLOW is enabled.</P>
<P>0: try to continue operation.</P>
<P>1: panic immediately.</P>
<P>==============================================================</P>
<P>perf_cpu_time_max_percent:</P>
<P>Hints to the kernel how much CPU time it should be allowed to<BR>use to handle perf sampling events.&nbsp; If the perf subsystem<BR>is informed that its samples are exceeding this limit, it<BR>will drop its sampling frequency to attempt to reduce its CPU<BR>usage.</P>
<P>Some perf sampling happens in NMIs.&nbsp; If these samples<BR>unexpectedly take too long to execute, the NMIs can become<BR>stacked up next to each other so much that nothing else is<BR>allowed to execute.</P>
<P>0: disable the mechanism.&nbsp; Do not monitor or correct perf's<BR>&nbsp;&nbsp; sampling rate no matter how CPU time it takes.</P>
<P>1-100: attempt to throttle perf's sample rate to this<BR>&nbsp;&nbsp; percentage of CPU.&nbsp; Note: the kernel calculates an<BR>&nbsp;&nbsp; "expected" length of each sample event.&nbsp; 100 here means<BR>&nbsp;&nbsp; 100% of that expected length.&nbsp; Even if this is set to<BR>&nbsp;&nbsp; 100, you may still see sample throttling if this<BR>&nbsp;&nbsp; length is exceeded.&nbsp; Set to 0 if you truly do not care<BR>&nbsp;&nbsp; how much CPU is consumed.</P>
<P>==============================================================</P>
<P><BR>pid_max:</P>
<P>PID allocation wrap value.&nbsp; When the kernel's next PID value<BR>reaches this value, it wraps back to a minimum PID value.<BR>PIDs of value pid_max or larger are not allocated.</P>
<P>==============================================================</P>
<P>ns_last_pid:</P>
<P>The last pid allocated in the current (the one task using this sysctl<BR>lives in) pid namespace. When selecting a pid for a next task on fork<BR>kernel tries to allocate a number starting from this one.</P>
<P>==============================================================</P>
<P>powersave-nap: (PPC only)</P>
<P>If set, Linux-PPC will use the 'nap' mode of powersaving,<BR>otherwise the 'doze' mode will be used.</P>
<P>==============================================================</P>
<P>printk:</P>
<P>The four values in printk denote: console_loglevel,<BR>default_message_loglevel, minimum_console_loglevel and<BR>default_console_loglevel respectively.</P>
<P>These values influence printk() behavior when printing or<BR>logging error messages. See 'man 2 syslog' for more info on<BR>the different loglevels.</P>
<P>- console_loglevel: messages with a higher priority than<BR>&nbsp; this will be printed to the console<BR>- default_message_loglevel: messages without an explicit priority<BR>&nbsp; will be printed with this priority<BR>- minimum_console_loglevel: minimum (highest) value to which<BR>&nbsp; console_loglevel can be set<BR>- default_console_loglevel: default value for console_loglevel</P>
<P>==============================================================</P>
<P>printk_delay:</P>
<P>Delay each printk message in printk_delay milliseconds</P>
<P>Value from 0 - 10000 is allowed.</P>
<P>==============================================================</P>
<P>printk_ratelimit:</P>
<P>Some warning messages are rate limited. printk_ratelimit specifies<BR>the minimum length of time between these messages (in jiffies), by<BR>default we allow one every 5 seconds.</P>
<P>A value of 0 will disable rate limiting.</P>
<P>==============================================================</P>
<P>printk_ratelimit_burst:</P>
<P>While long term we enforce one message per printk_ratelimit<BR>seconds, we do allow a burst of messages to pass through.<BR>printk_ratelimit_burst specifies the number of messages we can<BR>send before ratelimiting kicks in.</P>
<P>==============================================================</P>
<P>randomize_va_space:</P>
<P>This option can be used to select the type of process address<BR>space randomization that is used in the system, for architectures<BR>that support this feature.</P>
<P>0 - Turn the process address space randomization off.&nbsp; This is the<BR>&nbsp;&nbsp;&nbsp; default for architectures that do not support this feature anyways,<BR>&nbsp;&nbsp;&nbsp; and kernels that are booted with the "norandmaps" parameter.</P>
<P>1 - Make the addresses of mmap base, stack and VDSO page randomized.<BR>&nbsp;&nbsp;&nbsp; This, among other things, implies that shared libraries will be<BR>&nbsp;&nbsp;&nbsp; loaded to random addresses.&nbsp; Also for PIE-linked binaries, the<BR>&nbsp;&nbsp;&nbsp; location of code start is randomized.&nbsp; This is the default if the<BR>&nbsp;&nbsp;&nbsp; CONFIG_COMPAT_BRK option is enabled.</P>
<P>2 - Additionally enable heap randomization.&nbsp; This is the default if<BR>&nbsp;&nbsp;&nbsp; CONFIG_COMPAT_BRK is disabled.</P>
<P>&nbsp;&nbsp;&nbsp; There are a few legacy applications out there (such as some ancient<BR>&nbsp;&nbsp;&nbsp; versions of libc.so.5 from 1996) that assume that brk area starts<BR>&nbsp;&nbsp;&nbsp; just after the end of the code+bss.&nbsp; These applications break when<BR>&nbsp;&nbsp;&nbsp; start of the brk area is randomized.&nbsp; There are however no known<BR>&nbsp;&nbsp;&nbsp; non-legacy applications that would be broken this way, so for most<BR>&nbsp;&nbsp;&nbsp; systems it is safe to choose full randomization.</P>
<P>&nbsp;&nbsp;&nbsp; Systems with ancient and/or broken binaries should be configured<BR>&nbsp;&nbsp;&nbsp; with CONFIG_COMPAT_BRK enabled, which excludes the heap from process<BR>&nbsp;&nbsp;&nbsp; address space randomization.</P>
<P>==============================================================</P>
<P>reboot-cmd: (Sparc only)</P>
<P>??? This seems to be a way to give an argument to the Sparc<BR>ROM/Flash boot loader. Maybe to tell it what to do after<BR>rebooting. ???</P>
<P>==============================================================</P>
<P>rtsig-max &amp; rtsig-nr:</P>
<P>The file rtsig-max can be used to tune the maximum number<BR>of POSIX realtime (queued) signals that can be outstanding<BR>in the system.</P>
<P>rtsig-nr shows the number of RT signals currently queued.</P>
<P>==============================================================</P>
<P>sg-big-buff:</P>
<P>This file shows the size of the generic SCSI (sg) buffer.<BR>You can't tune it just yet, but you could change it on<BR>compile time by editing include/scsi/sg.h and changing<BR>the value of SG_BIG_BUFF.</P>
<P>There shouldn't be any reason to change this value. If<BR>you can come up with one, you probably know what you<BR>are doing anyway :)</P>
<P>==============================================================</P>
<P>shmall:</P>
<P>This parameter sets the total amount of shared memory pages that<BR>can be used system wide. Hence, SHMALL should always be at least<BR>ceil(shmmax/PAGE_SIZE).</P>
<P>If you are not sure what the default PAGE_SIZE is on your Linux<BR>system, you can run the following command:</P>
<P># getconf PAGE_SIZE</P>
<P>==============================================================</P>
<P>shmmax:</P>
<P>This value can be used to query and set the run time limit<BR>on the maximum shared memory segment size that can be created.<BR>Shared memory segments up to 1Gb are now supported in the<BR>kernel.&nbsp; This value defaults to SHMMAX.</P>
<P>==============================================================</P>
<P>shm_rmid_forced:</P>
<P>Linux lets you set resource limits, including how much memory one<BR>process can consume, via setrlimit(2).&nbsp; Unfortunately, shared memory<BR>segments are allowed to exist without association with any process, and<BR>thus might not be counted against any resource limits.&nbsp; If enabled,<BR>shared memory segments are automatically destroyed when their attach<BR>count becomes zero after a detach or a process termination.&nbsp; It will<BR>also destroy segments that were created, but never attached to, on exit<BR>from the process.&nbsp; The only use left for IPC_RMID is to immediately<BR>destroy an unattached segment.&nbsp; Of course, this breaks the way things are<BR>defined, so some applications might stop working.&nbsp; Note that this<BR>feature will do you no good unless you also configure your resource<BR>limits (in particular, RLIMIT_AS and RLIMIT_NPROC).&nbsp; Most systems don't<BR>need this.</P>
<P>Note that if you change this from 0 to 1, already created segments<BR>without users and with a dead originative process will be destroyed.</P>
<P>==============================================================</P>
<P>softlockup_thresh:</P>
<P>This value can be used to lower the softlockup tolerance threshold.&nbsp; The<BR>default threshold is 60 seconds.&nbsp; If a cpu is locked up for 60 seconds,<BR>the kernel complains.&nbsp; Valid values are 1-60 seconds.&nbsp; Setting this<BR>tunable to zero will disable the softlockup detection altogether.</P>
<P>==============================================================</P>
<P>tainted:</P>
<P>Non-zero if the kernel has been tainted.&nbsp; Numeric values, which<BR>can be ORed together:</P>
<P>&nbsp;&nbsp; 1 - A module with a non-GPL license has been loaded, this<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; includes modules with no license.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set by modutils &gt;= 2.4.9 and module-init-tools.<BR>&nbsp;&nbsp; 2 - A module was force loaded by insmod -f.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Set by modutils &gt;= 2.4.9 and module-init-tools.<BR>&nbsp;&nbsp; 4 - Unsafe SMP processors: SMP with CPUs not designed for SMP.<BR>&nbsp;&nbsp; 8 - A module was forcibly unloaded from the system by rmmod -f.<BR>&nbsp; 16 - A hardware machine check error occurred on the system.<BR>&nbsp; 32 - A bad page was discovered on the system.<BR>&nbsp; 64 - The user has asked that the system be marked "tainted".&nbsp; This<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; could be because they are running software that directly modifies<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; the hardware, or for other reasons.<BR>&nbsp;128 - The system has died.<BR>&nbsp;256 - The ACPI DSDT has been overridden with one supplied by the user<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; instead of using the one provided by the hardware.<BR>&nbsp;512 - A kernel warning has occurred.<BR>1024 - A module from drivers/staging was loaded.<BR>2048 - The system is working around a severe firmware bug.<BR>4096 - An out-of-tree module has been loaded.</P>
<P>==============================================================</P>
<P>unknown_nmi_panic:</P>
<P>The value in this file affects behavior of handling NMI. When the<BR>value is non-zero, unknown NMI is trapped and then panic occurs. At<BR>that time, kernel debugging information is displayed on console.</P>
<P>NMI switch that most IA32 servers have fires unknown NMI up, for<BR>example.&nbsp; If a system hangs up, try pressing the NMI switch.