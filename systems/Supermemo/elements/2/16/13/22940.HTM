# Documentation/virtual/kvm/review-checklist.txt
<P></P>
<P>Review checklist for kvm patches<BR>================================</P>
<P></P>
<P>1.&nbsp; The patch must follow Documentation/CodingStyle and<BR>&nbsp;&nbsp;&nbsp; Documentation/SubmittingPatches.</P>
<P>2.&nbsp; Patches should be against kvm.git master branch.</P>
<P>3.&nbsp; If the patch introduces or modifies a new userspace API:<BR>&nbsp;&nbsp;&nbsp; - the API must be documented in Documentation/virtual/kvm/api.txt<BR>&nbsp;&nbsp;&nbsp; - the API must be discoverable using KVM_CHECK_EXTENSION</P>
<P>4.&nbsp; New state must include support for save/restore.</P>
<P>5.&nbsp; New features must default to off (userspace should explicitly request them).<BR>&nbsp;&nbsp;&nbsp; Performance improvements can and should default to on.</P>
<P>6.&nbsp; New cpu features should be exposed via KVM_GET_SUPPORTED_CPUID2</P>
<P>7.&nbsp; Emulator changes should be accompanied by unit tests for qemu-kvm.git<BR>&nbsp;&nbsp;&nbsp; kvm/test directory.</P>
<P>8.&nbsp; Changes should be vendor neutral when possible.&nbsp; Changes to common code<BR>&nbsp;&nbsp;&nbsp; are better than duplicating changes to vendor code.</P>
<P>9.&nbsp; Similarly, prefer changes to arch independent code than to arch dependent<BR>&nbsp;&nbsp;&nbsp; code.</P>
<P>10. User/kernel interfaces and guest/host interfaces must be 64-bit clean<BR>&nbsp;&nbsp;&nbsp; (all variables and sizes naturally aligned on 64-bit; use specific types<BR>&nbsp;&nbsp;&nbsp; only - u64 rather than ulong).</P>
<P>11. New guest visible features must either be documented in a hardware manual<BR>&nbsp;&nbsp;&nbsp; or be accompanied by documentation.</P>
<P>12. Features must be robust against reset and kexec - for example, shared<BR>&nbsp;&nbsp;&nbsp; host/guest memory must be unshared to prevent the host from writing to<BR>&nbsp;&nbsp;&nbsp; guest memory that the guest has not reserved for this purpose.