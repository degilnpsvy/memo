<H3 id=-100000 class=docSection1Title>USB Architecture</H3>
<P class=docText><A name="is a"></A>USB is a master-slave protocol where a host controller communicates with client devices. <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch11.html#ch11fig01">Figure 11.1</A><A name="is part"></A> shows USB in the PC environment. The USB host controller is part of the South Bridge chipset and communicates with the processor over the PCI bus.</P><A name=ch11fig01></A>
<P>
<CENTER>
<H5 class=docFigureTitle>Figure 11.1. USB in the PC environment.</H5>
<P class=docText><IMG border=0 alt="" src="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/images/ZTVyMWQ5OHB0Z2lzMC8vbWMzNWE5NC9yMzZnMjdhZ3AuaWNzaTAxLzFmMWhpZ2Y-.jpg" width=500 height=356></P></CENTER>
<P></P><BR>
<P class=docText><A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch11.html#ch11fig02">Figure 11.2</A><A name="The SoC"></A> illustrates USB on an embedded device. The SoC in the figure has built-in USB controller silicon that supports four buses and three modes of operation:</P>
<UL>
<LI>
<P class=docList><A name="an A"></A>Bus 1 runs in host mode and is wired to an A-type receptacle via a USB transceiver (see the sidebar "<A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch11.html#ch11sb02">USB Receptacles and Transceivers</A><A name="or a"></A>"). You can connect a USB pen drive or a keyboard to this port.</P></LI>
<LI>
<P class=docList><A name="is connected"></A>Bus 2 also functions in host mode but the associated transceiver is connected to an internal USB device rather than to a receptacle. Examples of internal USB devices are biometric scanners, cryptographic engines, printers, <SPAN class=docEmphasis>Disk-On-Chips</SPAN> (DOCs), touch controllers, and telemetry cards.</P></LI>
<LI>
<P class=docList><A name="device mode"></A>Bus 3 runs in device mode and is wired to a B-type receptacle through a transceiver. The B-type receptacle connects to a host computer via a B-to-A cable. In this mode, the embedded device functions as, for example, a USB pen drive, and exports a storage partition to the outside world. Embedded devices such as MP3 players and cell phones are more likely than PC systems to be at the device side of USB, so many embedded SoCs support a USB device controller in addition to a host controller.</P></LI>
<LI>
<P class=docList><A name="driven by"></A>Bus 4 is driven by an <SPAN class=docEmphasis>On-The-Go</SPAN><A name="You can"></A> (OTG) controller. You can use this port, for example, to either connect a pen drive to your system or to turn your system into a pen drive and connect it to a host. Unlike buses 1 to 3, bus 4 uses an <A name=iddle3756></A><A name=iddle4304></A><A name=iddle4436></A><A name=iddle4445></A><A name="that exchanges"></A>intelligent transceiver that exchanges control information with the processor over I<SUP>2</SUP><A name="transceiver is"></A>C. The transceiver is wired to a Mini-AB OTG receptacle. If two embedded devices support OTG, they can directly communicate without the intervention of a host computer.</P></LI></UL><A name=ch11fig02></A>
<P>
<CENTER>
<H5 class=docFigureTitle>Figure 11.2. USB on an embedded system.</H5>
<P class=docText>
<DIV class=st1><A href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/images/ZTVyMWQ5OHB0Z2lzMC8vbWMzNWE5NC9yMzZnMjdhZy5wX2xjc2kwMXQvMjFoZmlnaWFm.jpg" target=_blank>[View full size image]</A></DIV><IMG border=0 alt="" src="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/images/ZTVyMWQ5OHB0Z2lzMC8vbWMzNWE5NC9yMzZnMjdhZ3AuaWNzaTAxLzJmMWhpZ2Y-.jpg" width=500 height=369>
<P></P></CENTER>
<P></P><BR>
<P class=docText><A name="of a"></A>Most of this chapter is written from the perspective of a system residing at the host-side of USB. We briefly look at the device function in the section "<A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch11lev1sec7.html#ch11lev1sec7">Gadget Drivers</A>." Mainstream <SPAN class=docEmphasis>host controller drivers</SPAN><A name="chapter we"></A> (HCDs) are already available, so in this chapter we further confine ourselves to drivers for USB devices (also called <SPAN class=docEmphasis>client drivers</SPAN>).</P><A name=ch11sb02></A>
<P>
<TABLE cellSpacing=0 cellPadding=5 width="90%" border=1>
<TBODY>
<TR>
<TD>
<H2 class=docSidebarTitle>USB Receptacles and Transceivers</H2>
<P class=docText><A name="square receptacles"></A>USB hosts use four-pin A-type rectangular receptacles, whereas USB devices connect via four-pin B-type square receptacles. In both cases, the four pins are differential data signals D+ and D-, a voltage line VBUS, and ground. VBUS is used to supply power from USB hosts to USB devices. VBUS is thus pulled high on an A connector but receives power on a B connector. USB OTG controllers connect to five-pin Mini-AB rectangular receptacles having a smaller form factor. Four of the Mini-AB pins are identical to what we discussed previously; the fifth is an ID pin used to detect whether the connected peripheral is a host or a device.</P>
<P class=docText><A name="can be"></A>The same transceiver chip (such as TUSB1105 from Texas Instruments) can be used on USB hosts and devices. You may thus choose to use the same transceiver part on buses 1 through 3 in <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch11.html#ch11fig02">Figure 11.2</A>. OTG requires a special-purpose transceiver chip (such as ISP1301 from Philips Semiconductors), however.</P></TD></TR></TBODY></TABLE></P><BR><A name=ch11lev2sec1></A>
<H4 id=title-ID0ESAAO class=docSection2Title>Bus Speeds</H4>
<P class=docText><A name=iddle2118></A><A name=iddle2217></A><A name=iddle2855></A><A name=iddle4110></A><A name=iddle4413></A><A name="to as"></A>USB supports three operational speeds. The original USB 1.0 specification supports 1.5MBps, referred to as low-speed USB. USB 1.1, the next version of the specification, handles 12MBps, called full-speed USB. The current level of the specification is USB 2.0, which supports 480MBps, or high-speed USB. USB 2.0 is backward-compatible with the earlier versions of the specification. Peripherals such as USB keyboards and mice are examples of low-speed devices, and USB storage drives are examples of full-speed and high-speed devices. Today's PC systems are USB 2.0-compliant and allow all three target speeds, but some embedded controllers adhere to USB 1.1 and support only full-speed and low-speed modes of operation.</P><A name=ch11lev2sec2></A>
<H4 id=title-ID0ENCAO class=docSection2Title>Host Controllers</H4>
<P class=docText><A name=iddle1611></A><A name=iddle1672></A><A name=iddle1853></A><A name=iddle1859></A><A name=iddle1908></A><A name=iddle1991></A><A name=iddle2227></A><A name=iddle2231></A><A name=iddle2233></A><A name=iddle3317></A><A name=iddle3328></A><A name=iddle3843></A><A name=iddle4384></A><A name=iddle4391></A><A name=iddle4429></A><A name=iddle4434></A><A name=iddle4446></A><A name="conform to"></A>USB host controllers conform to one of a few standards:</P>
<UL>
<LI>
<P class=docText><SPAN class=docEmphStrong><A name="Controller Interface"></A>Universal Host Controller Interface (UHCI):</SPAN><A name="The UHCI"></A> The UHCI specification was initiated by Intel, so your PC is likely to have this controller if it's Intel-based.</P></LI>
<LI>
<P class=docText><SPAN class=docEmphStrong><A name="Controller Interface"></A>Open Host Controller Interface (OHCI):</SPAN><A name="OHCI specification"></A> The OHCI specification originated from companies such as Compaq and Microsoft. An OHCI-compatible controller has more intelligence built in to hardware than UHCI, so an OHCI HCD is relatively simpler than a UHCI HCD.</P></LI>
<LI>
<P class=docText><SPAN class=docEmphStrong>Enhanced Host Controller Interface (EHCI):</SPAN><A name="controllers usually"></A> This is the host controller that supports high-speed USB 2.0 devices. EHCI controllers usually have either a UHCI or OHCI companion controller to handle slower devices.</P></LI>
<LI>
<P class=docText><SPAN class=docEmphStrong>USB OTG controllers:</SPAN><A name="in embedded"></A> They are getting increasingly popular in embedded microcontrollers. With OTG support, each communicating end can act as a <SPAN class=docEmphasis>dual-role device</SPAN> (DRD). By initiating a dialog using the <SPAN class=docEmphasis>Host Negotiation Protocol</SPAN><A name="device mode"></A> (HNP), a DRD can switch itself to host mode or device mode based on the desired functionality.</P></LI></UL>
<P class=docText><A name="Linux supports"></A>In addition to these mainstream USB host controllers, Linux supports a few more controllers. An example is the HCD for the ISP116x chip.</P>
<P class=docText>Host controllers have a built-in hardware component called the <SPAN class=docEmphasis>root hub.</SPAN><A name="The ports"></A> The root hub is a virtual hub that sources USB ports. The ports, in turn, can connect to external or internal physical hubs and source more ports, yielding a tree topology.</P><A name=ch11lev2sec3></A>
<H4 id=title-ID0ECJAO class=docSection2Title>Transfer Types</H4>
<P class=docText><A name="a USB"></A>Data exchange with a USB device can be one of four types:</P>
<UL>
<LI>
<P class=docList><A name="to carry"></A>Control transfers, used to carry configuration and control information</P></LI>
<LI>
<P class=docList><A name="Bulk transfers"></A>Bulk transfers that ferry large quantities of time-insensitive data</P></LI>
<LI>
<P class=docList><A name="that exchange"></A>Interrupt transfers that exchange small quantities of time-sensitive data</P></LI>
<LI>
<P class=docList><A name="transfers for"></A>Isochronous transfers for real-time data at predictable bit rates</P></LI></UL>
<P class=docText><A name="disk access"></A>A USB storage drive, for example, uses control transfers to issue disk access commands and bulk transfers to exchange data. A keyboard uses interrupt transfers to carry key strokes within predictable delays. A device that needs to stream audio data in real time uses isochronous transfers. The responsibilities of the four transfer types for USB <A name=iddle1053></A><A name=iddle1059></A><A name=iddle1343></A><A name=iddle1354></A><A name=iddle1989></A><A name=iddle1990></A><A name=iddle2252></A><A name=iddle2803></A><A name=iddle3411></A><A name=iddle4392></A><A name=iddle4409></A><A name=iddle4410></A><A name=iddle4418></A><A name=iddle4426></A><A name="the section"></A>Bluetooth devices are discussed in the section "<A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch16lev1sec1.html#ch16lev2sec3">Device Example: USB Adapter</A>" in <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch16.html#ch16">Chapter 16</A>, "Linux Without Wires."</P><A name=ch11lev2sec4></A>
<H4 id=title-ID0ENPAO class=docSection2Title>Addressing</H4>
<P class=docText><A name=an></A>Each addressable unit in a USB device is called an <SPAN class=docEmphasis>endpoint.</SPAN><A name="called an"></A> The address assigned to an endpoint is called an <SPAN class=docEmphasis>endpoint address.</SPAN><A name="endpoint is"></A> Each endpoint address has an associated data transfer type. If an endpoint is responsible for bulk data transfer, for example, it's called a <SPAN class=docEmphasis>bulk endpoint.</SPAN><A name="used exclusively"></A> Endpoint address 0 is used exclusively for device configuration. A control pipe is attached to this endpoint for device enumeration (see the section "<A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch11lev1sec4.html#ch11lev1sec4">Enumeration</A>").</P>
<P class=docText><A name="can be"></A>An endpoint can be associated with upstream or downstream data transfer. Data arriving upstream from a device is called an <TT>IN</TT><A name="whereas data"></A> transfer, whereas data flowing downstream to a device is an <TT>OUT</TT> transfer. <TT>IN</TT> and <TT>OUT</TT><A name="separate address"></A> transfers own separate address spaces. So, you can have a bulk <TT>IN</TT><A name="and a"></A> endpoint and a bulk <TT>OUT</TT> endpoint answering to the same address.</P>
<P class=docText>USB resembles I<SUP>2</SUP><A name="summarized in"></A>C on some counts and PCI on others as summarized in <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch11.html#ch11tab01">Table 11.1</A>. USB's device addressing is similar to I<SUP>2</SUP><A name="USB device"></A>C, while it supports hotplugging like PCI. USB device addresses, like standard I<SUP>2</SUP><A name="reside in"></A>C, do not consume a portion of the CPU's address space. Rather, they reside in a private space ranging from 1 to 127.</P><A name=ch11tab01></A>
<P>
<TABLE cellSpacing=0 cellPadding=5 rules=none frame=hsides>
<CAPTION>
<H5 class=docTableTitle>Table 11.1. USB's Similarities with I<SUP>2</SUP>C and PCI</H5></CAPTION>
<COLGROUP align=left>
<COL width=550></COLGROUP>
<THEAD></THEAD>
<TBODY>
<TR>
<TD class=docTableCell vAlign=top align=left>USB's similarities with I<SUP>2</SUP>C: 
<UL>
<LI>
<P class=docList>USB and I<SUP>2</SUP>C are master-slave protocols.</P></LI>
<LI>
<P class=docList>Device addresses reside in a private 7-bit space.</P></LI>
<LI>
<P class=docList><A name="or I"></A>Device-resident memory is not mapped to the CPU's memory or I/O space, so it does not consume CPU resources.</P></LI></UL></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left>USB's similarities with PCI: 
<UL>
<LI>
<P class=docList>Devices can be hotplugged.</P></LI>
<LI>
<P class=docList>Device driver architecture resembles PCI drivers. Both classes of drivers own <TT>probe()/disconnect()</TT><SUP class=docFootnote><A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch11.html#ch11fn01">[1]</A></SUP> methods and ID tables identifying the devices they support.</P></LI>
<LI>
<P class=docList>Supports high speeds. Slower than PCI, however. See <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch10lev1sec1.html#ch10tab01">Table 10.1</A> in <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch10.html#ch10">Chapter 10</A><A name="PCI family"></A>, "Peripheral Component Interconnect," for the speeds supported by different members of the PCI family.</P></LI>
<LI>
<P class=docList><A name="PCI controllers"></A>USB host controllers, like PCI controllers, usually have built-in DMA engines that can master the bus.</P></LI>
<LI>
<P class=docList><A name="USB supports"></A>Supports multifunction devices. USB supports interface descriptors per function. Each PCI device function has its own device ID and configuration space.</P></LI></UL></TD></TR></TBODY></TABLE></P><BR>
<BLOCKQUOTE>
<P class=docFootnote><SUP><A name=ch11fn01>[1]</A></SUP> <TT>disconnect()</TT><A name="is called"></A> is called <TT>remove()</TT> in PCI parlance.</P></BLOCKQUOTE>