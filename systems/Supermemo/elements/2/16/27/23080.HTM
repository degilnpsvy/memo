<H3 id=-100000 class=docSection1Title>Linux-USB Subsystem</H3>
<P class=docText><A name=iddle4432></A><A name="Look at"></A>Look at <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch11lev1sec2.html#ch11fig03">Figure 11.3</A><A name="the architecture"></A> to understand the architecture of the Linux-USB subsystem. The constituent pieces of the subsystem are as follows:</P>
<UL>
<LI>
<P class=docList><A name="USB core"></A>The USB core. Like the core layers of driver subsystems that you saw in previous chapters, the USB core is a code base consisting of routines and structures available to HCDs and client drivers. The core also provides a level of indirection that renders client drivers independent of host controllers.</P></LI>
<LI>
<P class=docList>HCDs that drive different host controllers.</P></LI>
<LI>
<P class=docList><A name="a helper"></A>A hub driver for the root hub (and physical hubs) and a helper kernel thread <SPAN class=docEmphasis>khubd</SPAN><A name="to the"></A> that monitors all ports connected to the hub. Detecting port status changes and configuring hotplugged devices is time-consuming and is best accomplished using a helper thread for reasons you learned in <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch03.html#ch03">Chapter 3</A><A name="wakes khubd"></A>, "Kernel Facilities." The khubd thread is asleep by default. The hub driver wakes khubd whenever it detects a status change on a USB port connected to it.</P></LI>
<LI>
<P class=docList>Device drivers for USB client devices.</P></LI>
<LI>
<P class=docList>The USB filesystem <SPAN class=docEmphasis>usbfs</SPAN><A name="user space"></A> that lets you drive USB devices from user space. We discuss user mode USB drivers in <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch19.html#ch19">Chapter 19</A>, "Drivers in User Space."</P></LI></UL><A name=ch11fig03></A>
<P>
<CENTER>
<H5 class=docFigureTitle>Figure 11.3. The Linux-USB subsystem.</H5>
<P class=docText>
<DIV class=st1><A href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/images/ZTVyMWQ5OHB0Z2lzMC8vbWMzNWE5NC9yMzZnMjdhZy5wX2xjc2kwMXQvMzFoZmlnaWFm.jpg" target=_blank>[View full size image]</A></DIV><IMG border=0 alt="" src="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/images/ZTVyMWQ5OHB0Z2lzMC8vbWMzNWE5NC9yMzZnMjdhZ3AuaWNzaTAxLzNmMWhpZ2Y-.jpg" width=500 height=450>
<P></P></CENTER>
<P></P><BR>
<P class=docText><A name="for assistance"></A>For end-to-end operation, the USB subsystem calls on various other kernel layers for assistance. To support USB mass storage devices, for example, the USB subsystem works in tandem with SCSI drivers, as shown in <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch11lev1sec2.html#ch11fig03">Figure 11.3</A><A name="stakeholders are"></A>. To drive USB-Bluetooth keyboards, the stakeholders are fourfold: the USB subsystem, the Bluetooth layer, the input subsystem, and the tty layer.