# Documentation/fb/internals.txt 
<P></P>
<P>This is a first start for some documentation about frame buffer device<BR>internals.</P>
<P></P>
<P>Geert Uytterhoeven &lt;<A href="mailto:geert@linux-m68k.org">geert@linux-m68k.org</A>&gt;, 21 July 1998<BR>James Simmons &lt;<A href="mailto:jsimmons@user.sf.net">jsimmons@user.sf.net</A>&gt;, Nov 26 2002</P>
<P>--------------------------------------------------------------------------------</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp; ***&nbsp; STRUCTURES USED BY THE FRAME BUFFER DEVICE API&nbsp; ***</P>
<P>The following structures play a role in the game of frame buffer devices. They<BR>are defined in &lt;linux/fb.h&gt;.</P>
<P><FONT class=extract>1. Outside the kernel (user space)</FONT></P>
<P><FONT class=extract>&nbsp; - struct fb_fix_screeninfo</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; Device independent unchangeable information about a frame buffer device and<BR>&nbsp;&nbsp;&nbsp; a specific video mode. This can be obtained using the FBIOGET_FSCREENINFO<BR>&nbsp;&nbsp;&nbsp; ioctl.</FONT></P>
<P><FONT class=extract>&nbsp; - struct fb_var_screeninfo</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; Device independent changeable information about a frame buffer device and a<BR>&nbsp;&nbsp;&nbsp; specific video mode. This can be obtained using the FBIOGET_VSCREENINFO<BR>&nbsp;&nbsp;&nbsp; ioctl, and updated with the FBIOPUT_VSCREENINFO ioctl. If you want to pan<BR>&nbsp;&nbsp;&nbsp; the screen only, you can use the FBIOPAN_DISPLAY ioctl.</FONT></P>
<P><FONT class=extract>&nbsp; - struct fb_cmap</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; Device independent colormap information. You can get and set the colormap<BR>&nbsp;&nbsp;&nbsp; using the FBIOGETCMAP and FBIOPUTCMAP ioctls.</FONT></P>
<P><BR><FONT class=extract>2. Inside the kernel</FONT></P>
<P><FONT class=extract>&nbsp; - struct fb_info</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; Generic information, API and low level information about a specific frame<BR>&nbsp;&nbsp;&nbsp; buffer device instance (slot number, board address, ...).</FONT></P>
<P><FONT class=extract>&nbsp; - struct `par'</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; Device dependent information that uniquely defines the video mode for this<BR>&nbsp;&nbsp;&nbsp; particular piece of hardware.</FONT></P>
<P><BR>--------------------------------------------------------------------------------</P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp;&nbsp; ***&nbsp; VISUALS USED BY THE FRAME BUFFER DEVICE API&nbsp; ***</FONT></P>
<P><BR><FONT class=extract>Monochrome (FB_VISUAL_MONO01 and FB_VISUAL_MONO10)<BR>-------------------------------------------------<BR>Each pixel is either black or white.</FONT></P>
<P><BR><FONT class=extract>Pseudo color (FB_VISUAL_PSEUDOCOLOR and FB_VISUAL_STATIC_PSEUDOCOLOR)<BR>---------------------------------------------------------------------<BR>The whole pixel value is fed through a programmable lookup table that has one<BR>color (including red, green, and blue intensities) for each possible pixel<BR>value, and that color is displayed.</FONT></P>
<P><BR><FONT class=extract>True color (FB_VISUAL_TRUECOLOR)<BR>--------------------------------<BR>The pixel value is broken up into red, green, and blue fields.</FONT></P>
<P><BR><FONT class=extract>Direct color (FB_VISUAL_DIRECTCOLOR)<BR>------------------------------------<BR>The pixel value is broken up into red, green, and blue fields, each of which <BR>are looked up in separate red, green, and blue lookup tables.</FONT></P>
<P><BR><FONT class=extract>Grayscale displays<BR>------------------<BR>Grayscale and static grayscale are special variants of pseudo color and static<BR>pseudo color, where the red, green and blue components are always equal to<BR>each other.</FONT></P>
<P>&nbsp;