# Documentation/fb/api.txt 
<P></P>
<P>&nbsp;&nbsp;&nbsp;The Frame Buffer Device API<BR>&nbsp;&nbsp;&nbsp;---------------------------</P>
<P></P>
<P>Last revised: June 21, 2011</P>
<P><BR>0. Introduction<BR>---------------</P>
<P>This document describes the frame buffer API used by applications to interact<BR>with frame buffer devices. In-kernel APIs between device drivers and the frame<BR>buffer core are not described.</P>
<P>Due to a lack of documentation in the original frame buffer API, drivers<BR>behaviours differ in subtle (and not so subtle) ways. This document describes<BR>the recommended API implementation, but applications should be prepared to<BR>deal with different behaviours.</P>
<P><BR>1. Capabilities<BR>---------------</P>
<P>Device and driver capabilities are reported in the fixed screen information<BR>capabilities field.</P>
<P>struct fb_fix_screeninfo {<BR>&nbsp;...<BR>&nbsp;__u16 capabilities;&nbsp;&nbsp;/* see FB_CAP_*&nbsp;&nbsp;&nbsp;*/<BR>&nbsp;...<BR>};</P>
<P>Application should use those capabilities to find out what features they can<BR>expect from the device and driver.</P>
<P>- FB_CAP_FOURCC</P>
<P>The driver supports the four character code (FOURCC) based format setting API.<BR>When supported, formats are configured using a FOURCC instead of manually<BR>specifying color components layout.</P>
<P><BR>2. Types and visuals<BR>--------------------</P>
<P>Pixels are stored in memory in hardware-dependent formats. Applications need<BR>to be aware of the pixel storage format in order to write image data to the<BR>frame buffer memory in the format expected by the hardware.</P>
<P>Formats are described by frame buffer types and visuals. Some visuals require<BR>additional information, which are stored in the variable screen information<BR>bits_per_pixel, grayscale, red, green, blue and transp fields.</P>
<P>Visuals describe how color information is encoded and assembled to create<BR>macropixels. Types describe how macropixels are stored in memory. The following<BR>types and visuals are supported.</P>
<P>- FB_TYPE_PACKED_PIXELS</P>
<P>Macropixels are stored contiguously in a single plane. If the number of bits<BR>per macropixel is not a multiple of 8, whether macropixels are padded to the<BR>next multiple of 8 bits or packed together into bytes depends on the visual.</P>
<P>Padding at end of lines may be present and is then reported through the fixed<BR>screen information line_length field.</P>
<P>- FB_TYPE_PLANES</P>
<P>Macropixels are split across multiple planes. The number of planes is equal to<BR>the number of bits per macropixel, with plane i'th storing i'th bit from all<BR>macropixels.</P>
<P>Planes are located contiguously in memory.</P>
<P>- FB_TYPE_INTERLEAVED_PLANES</P>
<P>Macropixels are split across multiple planes. The number of planes is equal to<BR>the number of bits per macropixel, with plane i'th storing i'th bit from all<BR>macropixels.</P>
<P>Planes are interleaved in memory. The interleave factor, defined as the<BR>distance in bytes between the beginning of two consecutive interleaved blocks<BR>belonging to different planes, is stored in the fixed screen information<BR>type_aux field.</P>
<P>- FB_TYPE_FOURCC</P>
<P>Macropixels are stored in memory as described by the format FOURCC identifier<BR>stored in the variable screen information grayscale field.</P>
<P>- FB_VISUAL_MONO01</P>
<P>Pixels are black or white and stored on a number of bits (typically one)<BR>specified by the variable screen information bpp field.</P>
<P>Black pixels are represented by all bits set to 1 and white pixels by all bits<BR>set to 0. When the number of bits per pixel is smaller than 8, several pixels<BR>are packed together in a byte.</P>
<P>FB_VISUAL_MONO01 is currently used with FB_TYPE_PACKED_PIXELS only.</P>
<P>- FB_VISUAL_MONO10</P>
<P>Pixels are black or white and stored on a number of bits (typically one)<BR>specified by the variable screen information bpp field.</P>
<P>Black pixels are represented by all bits set to 0 and white pixels by all bits<BR>set to 1. When the number of bits per pixel is smaller than 8, several pixels<BR>are packed together in a byte.</P>
<P>FB_VISUAL_MONO01 is currently used with FB_TYPE_PACKED_PIXELS only.</P>
<P>- FB_VISUAL_TRUECOLOR</P>
<P>Pixels are broken into red, green and blue components, and each component<BR>indexes a read-only lookup table for the corresponding value. Lookup tables<BR>are device-dependent, and provide linear or non-linear ramps.</P>
<P>Each component is stored in a macropixel according to the variable screen<BR>information red, green, blue and transp fields.</P>
<P>- FB_VISUAL_PSEUDOCOLOR and FB_VISUAL_STATIC_PSEUDOCOLOR</P>
<P>Pixel values are encoded as indices into a colormap that stores red, green and<BR>blue components. The colormap is read-only for FB_VISUAL_STATIC_PSEUDOCOLOR<BR>and read-write for FB_VISUAL_PSEUDOCOLOR.</P>
<P>Each pixel value is stored in the number of bits reported by the variable<BR>screen information bits_per_pixel field.</P>
<P>- FB_VISUAL_DIRECTCOLOR</P>
<P>Pixels are broken into red, green and blue components, and each component<BR>indexes a programmable lookup table for the corresponding value.</P>
<P>Each component is stored in a macropixel according to the variable screen<BR>information red, green, blue and transp fields.</P>
<P>- FB_VISUAL_FOURCC</P>
<P>Pixels are encoded and&nbsp; interpreted as described by the format FOURCC<BR>identifier stored in the variable screen information grayscale field.</P>
<P><BR>3. Screen information<BR>---------------------</P>
<P>Screen information are queried by applications using the FBIOGET_FSCREENINFO<BR>and FBIOGET_VSCREENINFO ioctls. Those ioctls take a pointer to a<BR>fb_fix_screeninfo and fb_var_screeninfo structure respectively.</P>
<P>struct fb_fix_screeninfo stores device independent unchangeable information<BR>about the frame buffer device and the current format. Those information can't<BR>be directly modified by applications, but can be changed by the driver when an<BR>application modifies the format.</P>
<P>struct fb_fix_screeninfo {<BR>&nbsp;char id[16];&nbsp;&nbsp;&nbsp;/* identification string eg "TT Builtin" */<BR>&nbsp;unsigned long smem_start;&nbsp;/* Start of frame buffer mem */<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* (physical address) */<BR>&nbsp;__u32 smem_len;&nbsp;&nbsp;&nbsp;/* Length of frame buffer mem */<BR>&nbsp;__u32 type;&nbsp;&nbsp;&nbsp;/* see FB_TYPE_*&nbsp;&nbsp;*/<BR>&nbsp;__u32 type_aux;&nbsp;&nbsp;&nbsp;/* Interleave for interleaved Planes */<BR>&nbsp;__u32 visual;&nbsp;&nbsp;&nbsp;/* see FB_VISUAL_*&nbsp;&nbsp;*/<BR>&nbsp;__u16 xpanstep;&nbsp;&nbsp;&nbsp;/* zero if no hardware panning&nbsp; */<BR>&nbsp;__u16 ypanstep;&nbsp;&nbsp;&nbsp;/* zero if no hardware panning&nbsp; */<BR>&nbsp;__u16 ywrapstep;&nbsp;&nbsp;/* zero if no hardware ywrap&nbsp;&nbsp;&nbsp; */<BR>&nbsp;__u32 line_length;&nbsp;&nbsp;/* length of a line in bytes&nbsp;&nbsp;&nbsp; */<BR>&nbsp;unsigned long mmio_start;&nbsp;/* Start of Memory Mapped I/O&nbsp;&nbsp; */<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* (physical address) */<BR>&nbsp;__u32 mmio_len;&nbsp;&nbsp;&nbsp;/* Length of Memory Mapped I/O&nbsp; */<BR>&nbsp;__u32 accel;&nbsp;&nbsp;&nbsp;/* Indicate to driver which&nbsp;*/<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/*&nbsp; specific chip/card we have&nbsp;*/<BR>&nbsp;__u16 capabilities;&nbsp;&nbsp;/* see FB_CAP_*&nbsp;&nbsp;&nbsp;*/<BR>&nbsp;__u16 reserved[2];&nbsp;&nbsp;/* Reserved for future compatibility */<BR>};</P>
<P>struct fb_var_screeninfo stores device independent changeable information<BR>about a frame buffer device, its current format and video mode, as well as<BR>other miscellaneous parameters.</P>
<P>struct fb_var_screeninfo {<BR>&nbsp;__u32 xres;&nbsp;&nbsp;&nbsp;/* visible resolution&nbsp;&nbsp;*/<BR>&nbsp;__u32 yres;<BR>&nbsp;__u32 xres_virtual;&nbsp;&nbsp;/* virtual resolution&nbsp;&nbsp;*/<BR>&nbsp;__u32 yres_virtual;<BR>&nbsp;__u32 xoffset;&nbsp;&nbsp;&nbsp;/* offset from virtual to visible */<BR>&nbsp;__u32 yoffset;&nbsp;&nbsp;&nbsp;/* resolution&nbsp;&nbsp;&nbsp;*/</P>
<P>&nbsp;__u32 bits_per_pixel;&nbsp;&nbsp;/* guess what&nbsp;&nbsp;&nbsp;*/<BR>&nbsp;__u32 grayscale;&nbsp;&nbsp;/* 0 = color, 1 = grayscale,&nbsp;*/<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* &gt;1 = FOURCC&nbsp;&nbsp;&nbsp;*/<BR>&nbsp;struct fb_bitfield red;&nbsp;&nbsp;/* bitfield in fb mem if true color, */<BR>&nbsp;struct fb_bitfield green;&nbsp;/* else only length is significant */<BR>&nbsp;struct fb_bitfield blue;<BR>&nbsp;struct fb_bitfield transp;&nbsp;/* transparency&nbsp;&nbsp;&nbsp;*/</P>
<P>&nbsp;__u32 nonstd;&nbsp;&nbsp;&nbsp;/* != 0 Non standard pixel format */</P>
<P>&nbsp;__u32 activate;&nbsp;&nbsp;&nbsp;/* see FB_ACTIVATE_*&nbsp;&nbsp;*/</P>
<P>&nbsp;__u32 height;&nbsp;&nbsp;&nbsp;/* height of picture in mm&nbsp;&nbsp;&nbsp; */<BR>&nbsp;__u32 width;&nbsp;&nbsp;&nbsp;/* width of picture in mm&nbsp;&nbsp;&nbsp;&nbsp; */</P>
<P>&nbsp;__u32 accel_flags;&nbsp;&nbsp;/* (OBSOLETE) see fb_info.flags */</P>
<P>&nbsp;/* Timing: All values in pixclocks, except pixclock (of course) */<BR>&nbsp;__u32 pixclock;&nbsp;&nbsp;&nbsp;/* pixel clock in ps (pico seconds) */<BR>&nbsp;__u32 left_margin;&nbsp;&nbsp;/* time from sync to picture&nbsp;*/<BR>&nbsp;__u32 right_margin;&nbsp;&nbsp;/* time from picture to sync&nbsp;*/<BR>&nbsp;__u32 upper_margin;&nbsp;&nbsp;/* time from sync to picture&nbsp;*/<BR>&nbsp;__u32 lower_margin;<BR>&nbsp;__u32 hsync_len;&nbsp;&nbsp;/* length of horizontal sync&nbsp;*/<BR>&nbsp;__u32 vsync_len;&nbsp;&nbsp;/* length of vertical sync&nbsp;*/<BR>&nbsp;__u32 sync;&nbsp;&nbsp;&nbsp;/* see FB_SYNC_*&nbsp;&nbsp;*/<BR>&nbsp;__u32 vmode;&nbsp;&nbsp;&nbsp;/* see FB_VMODE_*&nbsp;&nbsp;*/<BR>&nbsp;__u32 rotate;&nbsp;&nbsp;&nbsp;/* angle we rotate counter clockwise */<BR>&nbsp;__u32 colorspace;&nbsp;&nbsp;/* colorspace for FOURCC-based modes */<BR>&nbsp;__u32 reserved[4];&nbsp;&nbsp;/* Reserved for future compatibility */<BR>};</P>
<P>To modify variable information, applications call the FBIOPUT_VSCREENINFO<BR>ioctl with a pointer to a fb_var_screeninfo structure. If the call is<BR>successful, the driver will update the fixed screen information accordingly.</P>
<P>Instead of filling the complete fb_var_screeninfo structure manually,<BR>applications should call the FBIOGET_VSCREENINFO ioctl and modify only the<BR>fields they care about.</P>
<P><BR>4. Format configuration<BR>-----------------------</P>
<P>Frame buffer devices offer two ways to configure the frame buffer format: the<BR>legacy API and the FOURCC-based API.</P>
<P><BR>The legacy API has been the only frame buffer format configuration API for a<BR>long time and is thus widely used by application. It is the recommended API<BR>for applications when using RGB and grayscale formats, as well as legacy<BR>non-standard formats.</P>
<P>To select a format, applications set the fb_var_screeninfo bits_per_pixel field<BR>to the desired frame buffer depth. Values up to 8 will usually map to<BR>monochrome, grayscale or pseudocolor visuals, although this is not required.</P>
<P>- For grayscale formats, applications set the grayscale field to one. The red,<BR>&nbsp; blue, green and transp fields must be set to 0 by applications and ignored by<BR>&nbsp; drivers. Drivers must fill the red, blue and green offsets to 0 and lengths<BR>&nbsp; to the bits_per_pixel value.</P>
<P>- For pseudocolor formats, applications set the grayscale field to zero. The<BR>&nbsp; red, blue, green and transp fields must be set to 0 by applications and<BR>&nbsp; ignored by drivers. Drivers must fill the red, blue and green offsets to 0<BR>&nbsp; and lengths to the bits_per_pixel value.</P>
<P>- For truecolor and directcolor formats, applications set the grayscale field<BR>&nbsp; to zero, and the red, blue, green and transp fields to describe the layout of<BR>&nbsp; color components in memory.</P>
<P>struct fb_bitfield {<BR>&nbsp;__u32 offset;&nbsp;&nbsp;&nbsp;/* beginning of bitfield&nbsp;*/<BR>&nbsp;__u32 length;&nbsp;&nbsp;&nbsp;/* length of bitfield&nbsp;&nbsp;*/<BR>&nbsp;__u32 msb_right;&nbsp;&nbsp;/* != 0 : Most significant bit is */<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* right */<BR>};</P>
<P>&nbsp; Pixel values are bits_per_pixel wide and are split in non-overlapping red,<BR>&nbsp; green, blue and alpha (transparency) components. Location and size of each<BR>&nbsp; component in the pixel value are described by the fb_bitfield offset and<BR>&nbsp; length fields. Offset are computed from the right.</P>
<P>&nbsp; Pixels are always stored in an integer number of bytes. If the number of<BR>&nbsp; bits per pixel is not a multiple of 8, pixel values are padded to the next<BR>&nbsp; multiple of 8 bits.</P>
<P>Upon successful format configuration, drivers update the fb_fix_screeninfo<BR>type, visual and line_length fields depending on the selected format.</P>
<P><BR>The FOURCC-based API replaces format descriptions by four character codes<BR>(FOURCC). FOURCCs are abstract identifiers that uniquely define a format<BR>without explicitly describing it. This is the only API that supports YUV<BR>formats. Drivers are also encouraged to implement the FOURCC-based API for RGB<BR>and grayscale formats.</P>
<P>Drivers that support the FOURCC-based API report this capability by setting<BR>the FB_CAP_FOURCC bit in the fb_fix_screeninfo capabilities field.</P>
<P>FOURCC definitions are located in the linux/videodev2.h header. However, and<BR>despite starting with the V4L2_PIX_FMT_prefix, they are not restricted to V4L2<BR>and don't require usage of the V4L2 subsystem. FOURCC documentation is<BR>available in Documentation/DocBook/v4l/pixfmt.xml.</P>
<P>To select a format, applications set the grayscale field to the desired FOURCC.<BR>For YUV formats, they should also select the appropriate colorspace by setting<BR>the colorspace field to one of the colorspaces listed in linux/videodev2.h and<BR>documented in Documentation/DocBook/v4l/colorspaces.xml.</P>
<P>The red, green, blue and transp fields are not used with the FOURCC-based API.<BR>For forward compatibility reasons applications must zero those fields, and<BR>drivers must ignore them. Values other than 0 may get a meaning in future<BR>extensions.</P>
<P>Upon successful format configuration, drivers update the fb_fix_screeninfo<BR>type, visual and line_length fields depending on the selected format. The type<BR>and visual fields are set to FB_TYPE_FOURCC and FB_VISUAL_FOURCC respectively.</P>
<P><BR>5. DMA buffer sharing<BR>---------------------</P>
<P>The dma-buf kernel framework allows DMA buffers to be shared across devices<BR>and applications. Sharing buffers across display devices and video capture or<BR>video decoding devices allow zero-copy operation when displaying video content<BR>produced by a hardware device such as a camera or a hardware codec. This is<BR>crucial to achieve optimal system performances during video display.</P>
<P>While dma-buf supports both exporting internally allocated memory as a dma-buf<BR>object (known as the exporter role) and importing a dma-buf object to be used<BR>as device memory (known as the importer role), the frame buffer API only<BR>supports the exporter role, as the frame buffer device model doesn't support<BR>using externally-allocated memory.</P>
<P>The export a frame buffer as a dma-buf file descriptors, applications call the<BR>FBIOGET_DMABUF ioctl. The ioctl takes a pointer to a fb_dmabuf_export<BR>structure.</P>
<P>struct fb_dmabuf_export {<BR>&nbsp;__u32 fd;<BR>&nbsp;__u32 flags;<BR>};</P>
<P>The flag field specifies the flags to be used when creating the dma-buf file<BR>descriptor. The only supported flag is O_CLOEXEC. If the call is successful,<BR>the driver will set the fd field to a file descriptor corresponding to the<BR>dma-buf object.</P>
<P>Applications can then pass the file descriptors to another application or<BR>another device driver. The dma-buf object is automatically reference-counted,<BR>applications can and should close the file descriptor as soon as they don't<BR>need it anymore. The underlying dma-buf object will not be freed before the<BR>last device that uses the dma-buf object releases it.