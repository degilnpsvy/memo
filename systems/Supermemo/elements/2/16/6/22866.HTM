# Documentation/fb/framebuffer.txt 
<P></P>
<P>&nbsp;&nbsp;&nbsp;The Frame Buffer Device<BR>&nbsp;&nbsp;&nbsp;-----------------------</P>
<P></P>
<P>Maintained by Geert Uytterhoeven &lt;<A href="mailto:geert@linux-m68k.org">geert@linux-m68k.org</A>&gt;<BR>Last revised: May 10, 2001</P>
<P><BR>0. Introduction<BR>---------------</P>
<P><FONT class=extract>The frame buffer device provides an abstraction for the graphics hardware. It<BR>represents the frame buffer of some video hardware and allows application<BR>software to access the graphics hardware through a well-defined interface, so<BR>the software doesn't need to know anything about the low-level (hardware<BR>register) stuff.</FONT></P>
<P><FONT class=extract>The device is accessed through special device nodes, usually located in the<BR>/dev directory, i.e. /dev/fb*.</FONT></P>
<P><BR><FONT class=extract>1. User's View of /dev/fb*<BR>--------------------------</FONT></P>
<P><FONT class=extract>From the user's point of view, the frame buffer device looks just like any<BR>other device in /dev. It's a character device using major 29; the minor<BR>specifies the frame buffer number.</FONT></P>
<P><FONT class=extract>By convention, the following device nodes are used (numbers indicate the device<BR>minor numbers):</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0 = /dev/fb0&nbsp;First frame buffer<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1 = /dev/fb1&nbsp;Second frame buffer<BR>&nbsp;&nbsp; ...<BR>&nbsp;&nbsp;&nbsp;&nbsp; 31 = /dev/fb31&nbsp;32nd frame buffer</FONT></P>
<P><FONT class=extract>For backwards compatibility, you may want to create the following symbolic<BR>links:</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; /dev/fb0current -&gt; fb0<BR>&nbsp;&nbsp;&nbsp; /dev/fb1current -&gt; fb1</FONT></P>
<P><FONT class=extract>and so on...</FONT></P>
<P><FONT class=extract>The frame buffer devices are also `normal' memory devices, this means, you can<BR>read and write their contents. You can, for example, make a screen snapshot by</FONT></P>
<P><FONT class=extract>&nbsp; cp /dev/fb0 myfile</FONT></P>
<P><FONT class=extract>There also can be more than one frame buffer at a time, e.g. if you have a<BR>graphics card in addition to the built-in hardware. The corresponding frame<BR>buffer devices (/dev/fb0 and /dev/fb1 etc.) work independently.</FONT></P>
<P><FONT class=extract>Application software that uses the frame buffer device (e.g. the X server) will<BR>use /dev/fb0 by default (older software uses /dev/fb0current). You can specify<BR>an alternative frame buffer device by setting the environment variable<BR>$FRAMEBUFFER to the path name of a frame buffer device, e.g. (for sh/bash<BR>users):</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; export FRAMEBUFFER=/dev/fb1</FONT></P>
<P><FONT class=extract>or (for csh users):</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; setenv FRAMEBUFFER /dev/fb1</FONT></P>
<P><FONT class=extract>After this the X server will use the second frame buffer.</FONT></P>
<P><BR><FONT class=extract>2. Programmer's View of /dev/fb*<BR>--------------------------------</FONT></P>
<P><FONT class=extract>As you already know, a frame buffer device is a memory device like /dev/mem and<BR>it has the same features. You can read it, write it, seek to some location in<BR>it and mmap() it (the main usage). The difference is just that the memory that<BR>appears in the special file is not the whole memory, but the frame buffer of<BR>some video hardware.</FONT></P>
<P><FONT class=extract>/dev/fb* also allows several ioctls on it, by which lots of information about<BR>the hardware can be queried and set. The color map handling works via ioctls,<BR>too. Look into &lt;linux/fb.h&gt; for more information on what ioctls exist and on<BR>which data structures they work. Here's just a brief overview:</FONT></P>
<P><FONT class=extract>&nbsp; - You can request unchangeable information about the hardware, like name,<BR>&nbsp;&nbsp;&nbsp; organization of the screen memory (planes, packed pixels, ...) and address<BR>&nbsp;&nbsp;&nbsp; and length of the screen memory.</FONT></P>
<P><FONT class=extract>&nbsp; - You can request and change variable information about the hardware, like<BR>&nbsp;&nbsp;&nbsp; visible and virtual geometry, depth, color map format, timing, and so on.<BR>&nbsp;&nbsp;&nbsp; If you try to change that information, the driver maybe will round up some<BR>&nbsp;&nbsp;&nbsp; values to meet the hardware's capabilities (or return EINVAL if that isn't<BR>&nbsp;&nbsp;&nbsp; possible).</FONT></P>
<P><FONT class=extract>&nbsp; - You can get and set parts of the color map. Communication is done with 16<BR>&nbsp;&nbsp;&nbsp; bits per color part (red, green, blue, transparency) to support all <BR>&nbsp;&nbsp;&nbsp; existing hardware. The driver does all the computations needed to apply <BR>&nbsp;&nbsp;&nbsp; it to the hardware (round it down to less bits, maybe throw away <BR>&nbsp;&nbsp;&nbsp; transparency).</FONT></P>
<P><FONT class=extract>All this hardware abstraction makes the implementation of application programs<BR>easier and more portable. E.g. the X server works completely on /dev/fb* and<BR>thus doesn't need to know, for example, how the color registers of the concrete<BR>hardware are organized. XF68_FBDev is a general X server for bitmapped,<BR>unaccelerated video hardware. The only thing that has to be built into<BR>application programs is the screen organization (bitplanes or chunky pixels<BR>etc.), because it works on the frame buffer image data directly.</FONT></P>
<P><FONT class=extract>For the future it is planned that frame buffer drivers for graphics cards and<BR>the like can be implemented as kernel modules that are loaded at runtime. Such<BR>a driver just has to call register_framebuffer() and supply some functions.<BR>Writing and distributing such drivers independently from the kernel will save<BR>much trouble...</FONT></P>
<P><BR><FONT class=extract>3. Frame Buffer Resolution Maintenance<BR>--------------------------------------</FONT></P>
<P><FONT class=extract>Frame buffer resolutions are maintained using the utility `fbset'. It can<BR>change the video mode properties of a frame buffer device. Its main usage is<BR>to change the current video mode, e.g. during boot up in one of your /etc/rc.*<BR>or /etc/init.d/* files.</FONT></P>
<P><FONT class=extract>Fbset uses a video mode database stored in a configuration file, so you can<BR>easily add your own modes and refer to them with a simple identifier.</FONT></P>
<P><BR><FONT class=extract>4. The X Server<BR>---------------</FONT></P>
<P><FONT class=extract>The X server (XF68_FBDev) is the most notable application program for the frame<BR>buffer device. Starting with XFree86 release 3.2, the X server is part of<BR>XFree86 and has 2 modes:</FONT></P>
<P><FONT class=extract>&nbsp; - If the `Display' subsection for the `fbdev' driver in the /etc/XF86Config<BR>&nbsp;&nbsp;&nbsp; file contains a</FONT></P>
<P><FONT class=extract>&nbsp;Modes "default"</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; line, the X server will use the scheme discussed above, i.e. it will start<BR>&nbsp;&nbsp;&nbsp; up in the resolution determined by /dev/fb0 (or $FRAMEBUFFER, if set). You<BR>&nbsp;&nbsp;&nbsp; still have to specify the color depth (using the Depth keyword) and virtual<BR>&nbsp;&nbsp;&nbsp; resolution (using the Virtual keyword) though. This is the default for the<BR>&nbsp;&nbsp;&nbsp; configuration file supplied with XFree86. It's the most simple<BR>&nbsp;&nbsp;&nbsp; configuration, but it has some limitations.</FONT></P>
<P><FONT class=extract>&nbsp; - Therefore it's also possible to specify resolutions in the /etc/XF86Config<BR>&nbsp;&nbsp;&nbsp; file. This allows for on-the-fly resolution switching while retaining the<BR>&nbsp;&nbsp;&nbsp; same virtual desktop size. The frame buffer device that's used is still<BR>&nbsp;&nbsp;&nbsp; /dev/fb0current (or $FRAMEBUFFER), but the available resolutions are<BR>&nbsp;&nbsp;&nbsp; defined by /etc/XF86Config now. The disadvantage is that you have to<BR>&nbsp;&nbsp;&nbsp; specify the timings in a different format (but `fbset -x' may help).</FONT></P>
<P><FONT class=extract>To tune a video mode, you can use fbset or xvidtune. Note that xvidtune doesn't<BR>work 100% with XF68_FBDev: the reported clock values are always incorrect.</FONT></P>
<P><BR>5. Video Mode Timings<BR>---------------------</P>
<P>A monitor draws an image on the screen by using an electron beam (3 electron<BR>beams for color models, 1 electron beam for monochrome monitors). The front of<BR>the screen is covered by a pattern of colored phosphors (pixels). If a phosphor<BR>is hit by an electron, it emits a photon and thus becomes visible.</P>
<P>The electron beam draws horizontal lines (scanlines) from left to right, and<BR>from the top to the bottom of the screen. By modifying the intensity of the<BR>electron beam, pixels with various colors and intensities can be shown.</P>
<P>After each scanline the electron beam has to move back to the left side of the<BR>screen and to the next line: this is called the horizontal retrace. After the<BR>whole screen (frame) was painted, the beam moves back to the upper left corner:<BR>this is called the vertical retrace. During both the horizontal and vertical<BR>retrace, the electron beam is turned off (blanked).</P>
<P>The speed at which the electron beam paints the pixels is determined by the<BR>dotclock in the graphics board. For a dotclock of e.g. 28.37516 MHz (millions<BR>of cycles per second), each pixel is 35242 ps (picoseconds) long:</P>
<P>&nbsp;&nbsp;&nbsp; 1/(28.37516E6 Hz) = 35.242E-9 s</P>
<P>If the screen resolution is 640x480, it will take</P>
<P>&nbsp;&nbsp;&nbsp; 640*35.242E-9 s = 22.555E-6 s</P>
<P>to paint the 640 (xres) pixels on one scanline. But the horizontal retrace<BR>also takes time (e.g. 272 `pixels'), so a full scanline takes</P>
<P>&nbsp;&nbsp;&nbsp; (640+272)*35.242E-9 s = 32.141E-6 s</P>
<P>We'll say that the horizontal scanrate is about 31 kHz:</P>
<P>&nbsp;&nbsp;&nbsp; 1/(32.141E-6 s) = 31.113E3 Hz</P>
<P>A full screen counts 480 (yres) lines, but we have to consider the vertical<BR>retrace too (e.g. 49 `lines'). So a full screen will take</P>
<P>&nbsp;&nbsp;&nbsp; (480+49)*32.141E-6 s = 17.002E-3 s</P>
<P>The vertical scanrate is about 59 Hz:</P>
<P>&nbsp;&nbsp;&nbsp; 1/(17.002E-3 s) = 58.815 Hz</P>
<P>This means the screen data is refreshed about 59 times per second. To have a<BR>stable picture without visible flicker, VESA recommends a vertical scanrate of<BR>at least 72 Hz. But the perceived flicker is very human dependent: some people<BR>can use 50 Hz without any trouble, while I'll notice if it's less than 80 Hz.</P>
<P>Since the monitor doesn't know when a new scanline starts, the graphics board<BR>will supply a synchronization pulse (horizontal sync or hsync) for each<BR>scanline.&nbsp; Similarly it supplies a synchronization pulse (vertical sync or<BR>vsync) for each new frame. The position of the image on the screen is<BR>influenced by the moments at which the synchronization pulses occur.</P>
<P>The following picture summarizes all timings. The horizontal retrace time is<BR>the sum of the left margin, the right margin and the hsync length, while the<BR>vertical retrace time is the sum of the upper margin, the lower margin and the<BR>vsync length.</P>
<P>&nbsp; +----------+---------------------------------------------+----------+-------+<BR>&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#8593;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<BR>&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |upper_margin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<BR>&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#8595;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<BR>&nbsp; +----------###############################################----------+-------+<BR>&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#8593;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<BR>&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<BR>&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<BR>&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<BR>&nbsp; |&nbsp;&nbsp; left&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp; right&nbsp;&nbsp; | hsync |<BR>&nbsp; |&nbsp; margin&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; xres&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp; margin&nbsp; |&nbsp; len&nbsp; |<BR>&nbsp; |&lt;--------&gt;#&lt;---------------+---------------------------&gt;#&lt;--------&gt;|&lt;-----&gt;|<BR>&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<BR>&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<BR>&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<BR>&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |yres&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<BR>&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<BR>&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<BR>&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<BR>&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<BR>&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<BR>&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<BR>&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<BR>&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<BR>&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#8595;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; #&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<BR>&nbsp; +----------###############################################----------+-------+<BR>&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#8593;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<BR>&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |lower_margin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<BR>&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#8595;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<BR>&nbsp; +----------+---------------------------------------------+----------+-------+<BR>&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#8593;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<BR>&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |vsync_len&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<BR>&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#8595;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; |<BR>&nbsp; +----------+---------------------------------------------+----------+-------+</P>
<P>The frame buffer device expects all horizontal timings in number of dotclocks<BR>(in picoseconds, 1E-12 s), and vertical timings in number of scanlines.</P>
<P><BR>6. Converting XFree86 timing values info frame buffer device timings<BR>--------------------------------------------------------------------</P>
<P>An XFree86 mode line consists of the following fields:<BR>&nbsp;"800x600"&nbsp;&nbsp;&nbsp;&nbsp; 50&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 800&nbsp; 856&nbsp; 976 1040&nbsp;&nbsp;&nbsp; 600&nbsp; 637&nbsp; 643&nbsp; 666<BR>&nbsp;&lt; name &gt;&nbsp;&nbsp;&nbsp;&nbsp; DCF&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; HR&nbsp; SH1&nbsp; SH2&nbsp; HFL&nbsp;&nbsp;&nbsp;&nbsp; VR&nbsp; SV1&nbsp; SV2&nbsp; VFL</P>
<P>The frame buffer device uses the following fields:</P>
<P>&nbsp; - pixclock: pixel clock in ps (pico seconds)<BR>&nbsp; - left_margin: time from sync to picture<BR>&nbsp; - right_margin: time from picture to sync<BR>&nbsp; - upper_margin: time from sync to picture<BR>&nbsp; - lower_margin: time from picture to sync<BR>&nbsp; - hsync_len: length of horizontal sync<BR>&nbsp; - vsync_len: length of vertical sync</P>
<P>1) Pixelclock:<BR>&nbsp;&nbsp; xfree: in MHz<BR>&nbsp;&nbsp; fb: in picoseconds (ps)</P>
<P>&nbsp;&nbsp; pixclock = 1000000 / DCF</P>
<P>2) horizontal timings:<BR>&nbsp;&nbsp; left_margin = HFL - SH2<BR>&nbsp;&nbsp; right_margin = SH1 - HR<BR>&nbsp;&nbsp; hsync_len = SH2 - SH1</P>
<P>3) vertical timings:<BR>&nbsp;&nbsp; upper_margin = VFL - SV2<BR>&nbsp;&nbsp; lower_margin = SV1 - VR<BR>&nbsp;&nbsp; vsync_len = SV2 - SV1</P>
<P>Good examples for VESA timings can be found in the XFree86 source tree,<BR>under "xc/programs/Xserver/hw/xfree86/doc/modeDB.txt".</P>
<P><BR>7. References<BR>-------------</P>
<P>For more specific information about the frame buffer device and its<BR>applications, please refer to the Linux-fbdev website:</P>
<P>&nbsp;&nbsp;&nbsp; <A href="http://linux-fbdev.sourceforge.net/">http://linux-fbdev.sourceforge.net/</A></P>
<P>and to the following documentation:</P>
<P>&nbsp; - The manual pages for fbset: fbset(8), fb.modes(5)<BR>&nbsp; - The manual pages for XFree86: XF68_FBDev(1), XF86Config(4/5)<BR>&nbsp; - The mighty kernel sources:<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; o linux/drivers/video/<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; o linux/include/linux/fb.h<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; o linux/include/video/</P>
<P>&nbsp;</P>
<P>8. Mailing list<BR>---------------</P>
<P>There is a frame buffer device related mailing list at kernel.org:<BR><A href="mailto:linux-fbdev@vger.kernel.org">linux-fbdev@vger.kernel.org</A>.</P>
<P>Point your web browser to <A href="http://sourceforge.net/projects/linux-fbdev/">http://sourceforge.net/projects/linux-fbdev/</A> for<BR>subscription information and archive browsing.</P>
<P><BR>9. Downloading<BR>--------------</P>
<P>All necessary files can be found at</P>
<P>&nbsp;&nbsp;&nbsp; <A href="ftp://ftp.uni-erlangen.de/pub/Linux/LOCAL/680x0/">ftp://ftp.uni-erlangen.de/pub/Linux/LOCAL/680x0/</A></P>
<P>and on its mirrors.</P>
<P>The latest version of fbset can be found at</P>
<P>&nbsp;&nbsp;&nbsp; <A href="http://www.linux-fbdev.org/">http://www.linux-fbdev.org/</A> </P>
<P>&nbsp; <BR>10. Credits&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR>----------&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR>This readme was written by Geert Uytterhoeven, partly based on the original<BR>`X-framebuffer.README' by Roman Hodek and Martin Schaller. Section 6 was<BR>provided by Frank Neumann.</P>
<P>The frame buffer device abstraction was designed by Martin Schaller.