# Documentation/rfkill.txt
<P></P>
<P>rfkill - RF kill switch support<BR>===============================</P>
<P></P>
<P>1. Introduction<BR>2. Implementation details<BR>3. Kernel API<BR>4. Userspace support</P>
<P><BR>1. Introduction</P>
<P>The rfkill subsystem provides a generic interface to disabling any radio<BR>transmitter in the system. When a transmitter is blocked, it shall not<BR>radiate any power.</P>
<P>The subsystem also provides the ability to react on button presses and<BR>disable all transmitters of a certain type (or all). This is intended for<BR>situations where transmitters need to be turned off, for example on<BR>aircraft.</P>
<P>The rfkill subsystem has a concept of "hard" and "soft" block, which<BR>differ little in their meaning (block == transmitters off) but rather in<BR>whether they can be changed or not:<BR>&nbsp;- hard block: read-only radio block that cannot be overriden by software<BR>&nbsp;- soft block: writable radio block (need not be readable) that is set by<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; the system software.</P>
<P><BR>2. Implementation details</P>
<P>The rfkill subsystem is composed of three main components:<BR>&nbsp;* the rfkill core,<BR>&nbsp;* the deprecated rfkill-input module (an input layer handler, being<BR>&nbsp;&nbsp; replaced by userspace policy code) and<BR>&nbsp;* the rfkill drivers.</P>
<P>The rfkill core provides API for kernel drivers to register their radio<BR>transmitter with the kernel, methods for turning it on and off and, letting<BR>the system know about hardware-disabled states that may be implemented on<BR>the device.</P>
<P>The rfkill core code also notifies userspace of state changes, and provides<BR>ways for userspace to query the current states. See the "Userspace support"<BR>section below.</P>
<P>When the device is hard-blocked (either by a call to rfkill_set_hw_state()<BR>or from query_hw_block) set_block() will be invoked for additional software<BR>block, but drivers can ignore the method call since they can use the return<BR>value of the function rfkill_set_hw_state() to sync the software state<BR>instead of keeping track of calls to set_block(). In fact, drivers should<BR>use the return value of rfkill_set_hw_state() unless the hardware actually<BR>keeps track of soft and hard block separately.</P>
<P><BR>3. Kernel API</P>
<P><BR>Drivers for radio transmitters normally implement an rfkill driver.</P>
<P>Platform drivers might implement input devices if the rfkill button is just<BR>that, a button. If that button influences the hardware then you need to<BR>implement an rfkill driver instead. This also applies if the platform provides<BR>a way to turn on/off the transmitter(s).</P>
<P>For some platforms, it is possible that the hardware state changes during<BR>suspend/hibernation, in which case it will be necessary to update the rfkill<BR>core with the current state is at resume time.</P>
<P>To create an rfkill driver, driver's Kconfig needs to have</P>
<P>&nbsp;depends on RFKILL || !RFKILL</P>
<P>to ensure the driver cannot be built-in when rfkill is modular. The !RFKILL<BR>case allows the driver to be built when rfkill is not configured, which which<BR>case all rfkill API can still be used but will be provided by static inlines<BR>which compile to almost nothing.</P>
<P>Calling rfkill_set_hw_state() when a state change happens is required from<BR>rfkill drivers that control devices that can be hard-blocked unless they also<BR>assign the poll_hw_block() callback (then the rfkill core will poll the<BR>device). Don't do this unless you cannot get the event in any other way.</P>
<P>&nbsp;</P>
<P>5. Userspace support</P>
<P>The recommended userspace interface to use is /dev/rfkill, which is a misc<BR>character device that allows userspace to obtain and set the state of rfkill<BR>devices and sets of devices. It also notifies userspace about device addition<BR>and removal. The API is a simple read/write API that is defined in<BR>linux/rfkill.h, with one ioctl that allows turning off the deprecated input<BR>handler in the kernel for the transition period.</P>
<P>Except for the one ioctl, communication with the kernel is done via read()<BR>and write() of instances of 'struct rfkill_event'. In this structure, the<BR>soft and hard block are properly separated (unlike sysfs, see below) and<BR>userspace is able to get a consistent snapshot of all rfkill devices in the<BR>system. Also, it is possible to switch all rfkill drivers (or all drivers of<BR>a specified type) into a state which also updates the default state for<BR>hotplugged devices.</P>
<P>After an application opens /dev/rfkill, it can read the current state of all<BR>devices. Changes can be either obtained by either polling the descriptor for<BR>hotplug or state change events or by listening for uevents emitted by the<BR>rfkill core framework.</P>
<P>Additionally, each rfkill device is registered in sysfs and emits uevents.</P>
<P>rfkill devices issue uevents (with an action of "change"), with the following<BR>environment variables set:</P>
<P>RFKILL_NAME<BR>RFKILL_STATE<BR>RFKILL_TYPE</P>
<P>The contents of these variables corresponds to the "name", "state" and<BR>"type" sysfs files explained above.</P>
<P><BR>For further details consult Documentation/ABI/stable/sysfs-class-rfkill.