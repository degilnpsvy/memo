#Documentation/w1/w1.<FONT style="BACKGROUND-COLOR: #c2d1d6">netlink</FONT> 
<P>Userspace communication protocol over connector [1].</P>
<P></P>
<P><BR>Message types.<BR>=============</P>
<P>There are three types of messages between w1 core and userspace:<BR>1. Events. They are generated each time new master or slave device<BR>&nbsp;found either due to automatic or requested search.<BR>2. Userspace commands.<BR>3. Replies to userspace commands.</P>
<P><BR>Protocol.<BR>========</P>
<P>[struct cn_msg] - connector header.<BR>&nbsp;Its length field is equal to size of the attached data<BR>[struct w1_netlink_msg] - w1 netlink header.<BR>&nbsp;__u8 type &nbsp;- message type.<BR>&nbsp;&nbsp;&nbsp;W1_LIST_MASTERS<BR>&nbsp;&nbsp;&nbsp;&nbsp;list current bus masters<BR>&nbsp;&nbsp;&nbsp;W1_SLAVE_ADD/W1_SLAVE_REMOVE<BR>&nbsp;&nbsp;&nbsp;&nbsp;slave add/remove events<BR>&nbsp;&nbsp;&nbsp;W1_MASTER_ADD/W1_MASTER_REMOVE<BR>&nbsp;&nbsp;&nbsp;&nbsp;master add/remove events<BR>&nbsp;&nbsp;&nbsp;W1_MASTER_CMD<BR>&nbsp;&nbsp;&nbsp;&nbsp;userspace command for bus master<BR>&nbsp;&nbsp;&nbsp;&nbsp;device (search/alarm search)<BR>&nbsp;&nbsp;&nbsp;W1_SLAVE_CMD<BR>&nbsp;&nbsp;&nbsp;&nbsp;userspace command for slave device<BR>&nbsp;&nbsp;&nbsp;&nbsp;(read/write/touch)<BR>&nbsp;__u8 res&nbsp;- reserved<BR>&nbsp;__u16 len&nbsp;- size of data attached to this header data<BR>&nbsp;union {<BR>&nbsp;&nbsp;__u8 id[8];&nbsp;&nbsp;&nbsp; - slave unique device id<BR>&nbsp;&nbsp;struct w1_mst {<BR>&nbsp;&nbsp;&nbsp;__u32&nbsp;&nbsp;id;&nbsp; - master's id<BR>&nbsp;&nbsp;&nbsp;__u32&nbsp;&nbsp;res;&nbsp; - reserved<BR>&nbsp;&nbsp;} mst;<BR>&nbsp;} id;</P>
<P>[struct w1_netlink_cmd] - command for given master or slave device.<BR>&nbsp;__u8 cmd&nbsp;- command opcode.<BR>&nbsp;&nbsp;&nbsp;W1_CMD_READ &nbsp;- read command<BR>&nbsp;&nbsp;&nbsp;W1_CMD_WRITE&nbsp;- write command<BR>&nbsp;&nbsp;&nbsp;W1_CMD_TOUCH&nbsp;- touch command<BR>&nbsp;&nbsp;&nbsp;&nbsp;(write and sample data back to userspace)<BR>&nbsp;&nbsp;&nbsp;W1_CMD_SEARCH&nbsp;- search command<BR>&nbsp;&nbsp;&nbsp;W1_CMD_ALARM_SEARCH - alarm search command<BR>&nbsp;__u8 res&nbsp;- reserved<BR>&nbsp;__u16 len&nbsp;- length of data for this command<BR>&nbsp;&nbsp;For read command data must be allocated like for write command<BR>&nbsp;__u8 data[0]&nbsp;- data for this command</P>
<P><BR>Each connector message can include one or more w1_netlink_msg with<BR>zero or more attached w1_netlink_cmd messages.</P>
<P>For event messages there are no w1_netlink_cmd embedded structures,<BR>only connector header and w1_netlink_msg strucutre with "len" field<BR>being zero and filled type (one of event types) and id:<BR>either 8 bytes of slave unique id in host order,<BR>or master's id, which is assigned to bus master device<BR>when it is added to w1 core.</P>
<P>Currently replies to userspace commands are only generated for read<BR>command request. One reply is generated exactly for one w1_netlink_cmd<BR>read request. Replies are not combined when sent - i.e. typical reply<BR>messages looks like the following:</P>
<P>[cn_msg][w1_netlink_msg][w1_netlink_cmd]<BR>cn_msg.len = sizeof(struct w1_netlink_msg) +<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sizeof(struct w1_netlink_cmd) +<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmd-&gt;len;<BR>w1_netlink_msg.len = sizeof(struct w1_netlink_cmd) + cmd-&gt;len;<BR>w1_netlink_cmd.len = cmd-&gt;len;</P>
<P>Replies to W1_LIST_MASTERS should send a message back to the userspace<BR>which will contain list of all registered master ids in the following<BR>format:</P>
<P>&nbsp;cn_msg (CN_W1_IDX.CN_W1_VAL as id, len is equal to sizeof(struct<BR>&nbsp;w1_netlink_msg) plus number of masters multiplied by 4)<BR>&nbsp;w1_netlink_msg (type: W1_LIST_MASTERS, len is equal to<BR>&nbsp;&nbsp;number of masters multiplied by 4 (u32 size))<BR>&nbsp;id0 ... idN</P>
<P>&nbsp;Each message is at most 4k in size, so if number of master devices<BR>&nbsp;exceeds this, it will be split into several messages,<BR>&nbsp;cn.seq will be increased for each one.</P>
<P>W1 search and alarm search commands.<BR>request:<BR>[cn_msg]<BR>&nbsp; [w1_netlink_msg type = W1_MASTER_CMD<BR>&nbsp; &nbsp;id is equal to the bus master id to use for searching]<BR>&nbsp; [w1_netlink_cmd cmd = W1_CMD_SEARCH or W1_CMD_ALARM_SEARCH]</P>
<P>reply:<BR>&nbsp; [cn_msg, ack = 1 and increasing, 0 means the last message,<BR>&nbsp; &nbsp;seq is equal to the request seq]<BR>&nbsp; [w1_netlink_msg type = W1_MASTER_CMD]<BR>&nbsp; [w1_netlink_cmd cmd = W1_CMD_SEARCH or W1_CMD_ALARM_SEARCH<BR>&nbsp;len is equal to number of IDs multiplied by 8]<BR>&nbsp; [64bit-id0 ... 64bit-idN]<BR>Length in each header corresponds to the size of the data behind it, so<BR>w1_netlink_cmd-&gt;len = N * 8; where N is number of IDs in this message.<BR>&nbsp;Can be zero.<BR>w1_netlink_msg-&gt;len = sizeof(struct w1_netlink_cmd) + N * 8;<BR>cn_msg-&gt;len = sizeof(struct w1_netlink_msg) +<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sizeof(struct w1_netlink_cmd) +<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; N*8;</P>
<P>W1 reset command.<BR>[cn_msg]<BR>&nbsp; [w1_netlink_msg type = W1_MASTER_CMD<BR>&nbsp; &nbsp;id is equal to the bus master id to use for searching]<BR>&nbsp; [w1_netlink_cmd cmd = W1_CMD_RESET]</P>
<P><BR>Command status replies.<BR>======================</P>
<P>Each command (either root, master or slave with or without w1_netlink_cmd<BR>structure) will be 'acked' by the w1 core. Format of the reply is the same<BR>as request message except that length parameters do not account for data<BR>requested by the user, i.e. read/write/touch IO requests will not contain<BR>data, so w1_netlink_cmd.len will be 0, w1_netlink_msg.len will be size<BR>of the w1_netlink_cmd structure and cn_msg.len will be equal to the sum<BR>of the sizeof(struct w1_netlink_msg) and sizeof(struct w1_netlink_cmd).<BR>If reply is generated for master or root command (which do not have<BR>w1_netlink_cmd attached), reply will contain only cn_msg and w1_netlink_msg<BR>structires.</P>
<P>w1_netlink_msg.status field will carry positive error value<BR>(EINVAL for example) or zero in case of success.</P>
<P>All other fields in every structure will mirror the same parameters in the<BR>request message (except lengths as described above).</P>
<P>Status reply is generated for every w1_netlink_cmd embedded in the<BR>w1_netlink_msg, if there are no w1_netlink_cmd structures,<BR>reply will be generated for the w1_netlink_msg.</P>
<P>All w1_netlink_cmd command structures are handled in every w1_netlink_msg,<BR>even if there were errors, only length mismatch interrupts message processing.</P>
<P><BR>Operation steps in w1 core when new command is received.<BR>=======================================================</P>
<P>When new message (w1_netlink_msg) is received w1 core detects if it is<BR>master or slave request, according to w1_netlink_msg.type field.<BR>Then master or slave device is searched for.<BR>When found, master device (requested or those one on where slave device<BR>is found) is locked. If slave command is requested, then reset/select<BR>procedure is started to select given device.</P>
<P>Then all requested in w1_netlink_msg operations are performed one by one.<BR>If command requires reply (like read command) it is sent on command completion.</P>
<P>When all commands (w1_netlink_cmd) are processed muster device is unlocked<BR>and next w1_netlink_msg header processing started.</P>
<P><BR>Connector [1] specific documentation.<BR>====================================</P>
<P>Each connector message includes two u32 fields as "address".<BR>w1 uses CN_W1_IDX and CN_W1_VAL defined in include/linux/connector.h header.<BR>Each message also includes sequence and acknowledge numbers.<BR>Sequence number for event messages is appropriate bus master sequence number<BR>increased with each event message sent "through" this master.<BR>Sequence number for userspace requests is set by userspace application.<BR>Sequence number for reply is the same as was in request, and<BR>acknowledge number is set to seq+1.</P>
<P><BR>Additional documantion, source code examples.<BR>============================================</P>
<P>1. Documentation/connector<BR>2. <A href="http://www.ioremap.net/archive/w1">http://www.ioremap.net/archive/w1</A><BR>This archive includes userspace application w1d.c which uses<BR>read/write/search commands for all master/slave devices found on the bus.