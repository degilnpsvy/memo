<H3 id=-100000 class=docSection1Title>Looking at the Sources</H3>
<P class=docText><A name="Char drivers"></A>Char drivers do not exclusively live in the <SPAN class=docEmphasis>drivers/char/</SPAN><A name="some examples"></A> directory. Here are some examples of "super" char drivers that merit special treatment and directories:</P>
<UL>
<LI>
<P class=docList><A name="drivers are"></A>Serial drivers are char drivers that manage your computer's serial port. However, they are much more than simple char drivers and reside separately in the <SPAN class=docEmphasis>drivers/serial/</SPAN> directory. The next chapter discusses serial drivers.</P>
<LI>
<P class=docList><A name="They live"></A>Input drivers are responsible for devices such as keyboards, mice, and joysticks. They live in a separate source directory, <SPAN class=docEmphasis>drivers/input/</SPAN> and, hence, get a distinct chapter, <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch07.html#ch07">Chapter 7</A>.</P>
<LI>
<P class=docList>Frame buffers (<SPAN class=docEmphasis>/dev/fb/*</SPAN><A name=way></A>) offer access to video memory, the way <SPAN class=docEmphasis>/dev/mem</SPAN> exports access to system memory. <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch12.html#ch12">Chapter 12</A>, "Video Drivers," looks at frame buffer drivers.</P>
<LI>
<P class=docList><A name="a char"></A>Some device classes support a minority of hardware possessing a char interface. For example, SCSI devices are generally block devices, but a SCSI tape is a char device.</P>
<LI>
<P class=docList><A name="that present"></A>Some subsystems export additional char interfaces that present a raw device model to user space. The MTD subsystem is generally used for emulating a disk on top of diverse types of flash memory, but some applications might be better served if they are provided with a raw view of the underlying flash memory. This is done by the MTD char driver, <SPAN class=docEmphasis>drivers/mtd/mtdchar.c</SPAN>, which is discussed in <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch17.html#ch17">Chapter 17</A>, "Memory Technology Devices."</P>
<LI>
<P class=docList><A name="drivers by"></A>Certain kernel layers provide hooks for implementing user-space device drivers by exporting suitable char interfaces. Applications can directly access the innards of the device via these interfaces. One example is the generic SCSI driver <SPAN class=docEmphasis>drivers/scsi/sg.c</SPAN><A name="to implement"></A> used to implement user space device drivers for SCSI scanners and CD drives. Another example is the I<SUP>2</SUP>C device interface, <SPAN class=docEmphasis>i2c-dev.</SPAN> Such char interfaces are explained in <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch19.html#ch19">Chapter 19</A>.</P></LI></UL>
<P class=docText><A name=iddle1081></A><A name=iddle1377></A><A name=iddle1378></A><A name=iddle1380></A><A name=iddle1382></A><A name=iddle1595></A><A name=iddle1615></A><A name=iddle1616></A><A name=iddle1770></A><A name=iddle2056></A><A name=iddle2743></A><A name=iddle3005></A><A name=iddle3377></A><A name=iddle3602></A><A name=iddle3857></A><A name=iddle4395></A><A name=iddle4397></A>Meanwhile, run a <TT>grep -r</TT> on <TT>register_chrdev</TT> in the <SPAN class=docEmphasis>drivers/</SPAN><A name="drivers in"></A> directory to get an idea of the popularity of char drivers in the kernel.</P>
<P class=docText><A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch05lev1sec9.html#ch05tab03">Table 5.3</A><A name="contains a"></A> contains a summary of the main data structures used in this chapter and the location of their definitions in the source tree. <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch05lev1sec9.html#ch05tab04">Table 5.4</A><A name="main kernel"></A> lists the main kernel programming interfaces that you used in this chapter along with the location of their definitions.</P><A name=ch05tab03></A>
<P>
<TABLE cellSpacing=0 cellPadding=5 rules=groups frame=hsides>
<CAPTION>
<H5 class=docTableTitle><A name="Summary of"></A>Table 5.3. Summary of Data Structures</H5></CAPTION>
<COLGROUP span=3 align=left>
<COL width=150>
<COL width=150>
<COL width=250></COLGROUP>
<THEAD>
<TR>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left>Data Structure</TH>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left>Location</TH>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left>Description</TH></TR></THEAD>
<TBODY>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>cdev</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/cdev.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Kernel abstraction of a char device</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>file_operations</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/fs.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Char driver methods</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>dev_t</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/types.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Device major/minor numbers</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>poll_table</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/poll.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="are being"></A>A table of wait queues owned by drivers that are being polled for data</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>pardevice</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/parport.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="port device"></A>Kernel abstraction of a parallel port device</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>rtc_class_ops</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/rtc.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Communication interface between top layer and bottom layer RTC drivers</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>miscdevice</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/miscdevice.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Representation of a misc device</TD></TR></TBODY></TABLE></P><BR><A name=ch05tab04></A>
<P>
<TABLE cellSpacing=0 cellPadding=5 rules=groups frame=hsides>
<CAPTION>
<H5 class=docTableTitle>Table 5.4. Summary of Kernel Programming Interfaces</H5></CAPTION>
<COLGROUP span=3 align=left>
<COL width=150>
<COL width=150>
<COL width=250></COLGROUP>
<THEAD>
<TR>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left>Kernel Interface</TH>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left>Location</TH>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left>Description</TH></TR></THEAD>
<TBODY>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>alloc_chrdev_region()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>fs/char_dev.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Requests dynamic allocation of a device major number</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>unregister_chrdev_region()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>fs/char_dev.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Reverse of <TT>alloc_chrdev_region()</TT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>cdev_init()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>fs/char_dev.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Connects char driver methods with the associated <TT>cdev</TT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>cdev_add()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>fs/char_dev.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Associates a device number with a <TT>cdev</TT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>cdev_del()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>fs/char_dev.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Removes a <TT>cdev</TT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>container_of()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/kernel.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>From a structure member, gets the address of its containing structure</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>copy_from_user()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>arch/x86/lib/usercopy_32.c (For i386)</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Copies data from user space to kernel space</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>copy_to_user()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>arch/x86/lib/usercopy_32.c (For i386)</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Copies data from kernel space to user space</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left>
<DIV class=docText><PRE>likely()
unlikely()</PRE></DIV><BR></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/compiler.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="associated conditional"></A>Informs GCC about the possibility of success of the associated conditional evaluation</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>request_region()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/ioport.h kernel/resource.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Stakes claim to an I/O region</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left>
<DIV class=docText><PRE>release_region()</PRE></DIV><BR></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/ioport.h kernel/resource.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Relinquishes claim to an I/O region</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left>
<DIV class=docText><PRE>in[b|w|l|sn|sl]()
out[b|w|l|sn|sl]()</PRE></DIV><BR></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/asm-your-arch/io.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="with I"></A>Family of functions to exchange data with I/O regions</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left>
<DIV class=docText><PRE>poll_wait()</PRE></DIV><BR></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/poll.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Adds a wait queue to the kernel <TT>poll_table</TT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>fasync_helper()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>fs/fcntl.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Ensures that if a driver issues a <TT>kill_fasync()</TT>, a <TT>SIGIO</TT> is dispatched to the owning application</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>kill_fasync()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>fs/fcntl.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Dispatches a <TT>SIGIO</TT> to the owning application</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>parport_register_device()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>drivers/parport/share.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Registers a parallel port device with parport</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left>
<DIV class=docText><PRE>parport_unregister_device()</PRE></DIV><BR></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>drivers/parport/share.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Unregisters a parallel port device</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left>
<DIV class=docText><PRE>parport_register_driver()</PRE></DIV><BR></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>drivers/parport/share.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Registers a parallel port driver with parport</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left>
<DIV class=docText><PRE>parport_unregister_driver()</PRE></DIV><BR></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>drivers/parport/share.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Unregisters a parallel port driver</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left>
<DIV class=docText><PRE>parport_claim_or_block()</PRE></DIV><BR></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>drivers/parport/share.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Claims a parallel port</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>parport_write_data()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/parport.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Writes data to a parallel port</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>parport_read_data()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/parport.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Reads data from a parallel port</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>parport_release()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>drivers/parport/share.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Releases a parallel port</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>kobject_register()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>lib/kobject.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Registers a kobject and creates associated files in sysfs</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>kobject_unregister()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>lib/kobject.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Reverse of <TT>kobject_register()</TT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left>
<DIV class=docText><PRE>rtc_device_register()/
rtc_device_unregister()</PRE></DIV><BR></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>drivers/rtc/class.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Registers/unregisters a bottom-layer driver with the RTC subsystem</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>misc_register()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>drivers/char/misc.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Registers a misc driver</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>misc_deregister()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>drivers/char/misc.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Unregisters a misc driver</TD></TR></TBODY></TABLE>