<H3 id=-100000 class=docSection1Title>Character Caveats</H3>
<P class=docText><A name="Driver methods"></A>Driver methods, and, hence, the associated system calls issued by user applications, may fail or partially succeed. Your application has to factor this in to avoid unpleasant surprises. Let's look at some common pitfalls:</P>
<UL>
<LI>
<P class=docList>An <TT>open()</TT><A name="fail for"></A> call may fail for several reasons. Some char drivers support only a single user at a time, so they fail with <TT>-EBUSY</TT><A name="an application"></A> if an application attempts to open a device that is already in use. If a printer is out of paper, the driver fails with <TT>-ENOSPC</TT> if you issue a device <TT>open()</TT>.</P>
<LI>
<P class=docList>A successful <TT>read()</TT> or <TT>write()</TT><A name="bytes requested"></A> can return anything between 1 byte and the number of bytes requested, so your application needs sufficient logic to handle this.</P>
<LI>
<P class=docList>A <TT>select()</TT><A name="a single"></A> call returns success even if a single byte of data is ready to be read or written.</P>
<LI>
<P class=docList><A name="are input"></A>Some char devices such as mice and touch screens are input-only, so their drivers will not support the write method family (<TT>write()/aio_write()/fsync()</TT>). <A name=iddle1445></A><A name=iddle4088></A><A name="and their"></A>Other devices such as printers are output-only, and their drivers will not support the read method family (<TT>read()/aio_read()</TT><A name="will not"></A>). Also, many char driver methods are optional, so all methods will not be present in all drivers. When a method is absent, the corresponding system call fails.</P></LI></UL>