<H3 id=-100000 class=docSection1Title>Looking at the Sources</H3>
<P class=docText><A name=iddle2320></A><A name=iddle3583></A><A name=iddle3588></A><A name=iddle3950></A><A name=iddle3964></A><A name=iddle4100></A><A name=iddle4316></A><A name=iddle4318></A><A name=iddle4320></A><A name=iddle4329></A><A name=iddle4336></A><A name=iddle4348></A><A name=iddle4365></A><A name=iddle4367></A><A name="The serial"></A>The serial core resides in <SPAN class=docEmphasis>drivers/serial/</SPAN><A name="implementations and"></A>, but tty implementations and low-level drivers are scattered across the source tree. The driver files referred to in <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch06lev1sec1.html#ch06fig03">Figure 6.3</A><A name="live in"></A>, for example, live in four different directories: <SPAN class=docEmphasis>drivers/serial/, drivers/char/, drivers/usb/serial/</SPAN>, and <SPAN class=docEmphasis>drivers/net/irda/.</SPAN> The <SPAN class=docEmphasis>drivers/serial/</SPAN><A name="used to"></A> directory, which now also contains UART drivers, didn't exist in the 2.4 kernel; UART-specific code used to be dispersed between <SPAN class=docEmphasis>drivers/char/</SPAN> and <SPAN class=docEmphasis>arch/your-arch/</SPAN><A name="more logical"></A> directories. The present code partitioning is more logical because UART drivers are not the only folks that access the serial layer&#37413;&#25860;evices such as USB-to-serial converters and IrDA dongles also need to talk to the serial core.</P>
<P class=docText>Look at <SPAN class=docEmphasis>drivers/serial/</SPAN><SPAN class=docEmphasis>imx.c</SPAN><A name="of Freescale"></A> for a real-world, low-level UART driver. It handles UARTs that are part of Freescale's i.MX series of embedded controllers.</P>
<P class=docText><A name="supported on"></A>For a list of line disciplines supported on Linux, see <SPAN class=docEmphasis>include/linux/tty.h.</SPAN><A name="at the"></A> To get a feel of networking line disciplines, look at the corresponding source files for PPP (<SPAN class=docEmphasis>drivers/net/ppp_async.c</SPAN>), Bluetooth (<SPAN class=docEmphasis>drivers/bluetooth/hci_ldisc.c</SPAN>), Infrared (<SPAN class=docEmphasis>drivers/net/irda/irtty-sir.c</SPAN><A name="SLIP "></A>), and SLIP (<SPAN class=docEmphasis>drivers/net/slip.c</SPAN>).</P>
<P class=docText><A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch06lev1sec5.html#ch06tab03">Table 6.3</A><A name="this chapter"></A> contains a summary of the main data structures used in this chapter and the location of their definitions in the source tree. <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch06lev1sec5.html#ch06tab04">Table 6.4</A><A name="lists the"></A> lists the main kernel programming interfaces that you used in this chapter along with the location of their definitions.</P><A name=ch06tab03></A>
<P>
<TABLE cellSpacing=0 cellPadding=5 rules=groups frame=hsides>
<CAPTION>
<H5 class=docTableTitle><A name="of Data"></A>Table 6.3. Summary of Data Structures</H5></CAPTION>
<COLGROUP span=3 align=left>
<COL width=150>
<COL width=200>
<COL width=200></COLGROUP>
<THEAD>
<TR>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left>Data Structure</TH>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left>Location</TH>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left>Description</TH></TR></THEAD>
<TBODY>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>uart_driver</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/serial_core.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="of a"></A>Representation of a low-level UART driver.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>uart_port</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/serial_core.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Representation of a UART port.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>uart_ops</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/serial_core.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Entry points supported by UART drivers.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>platform_device</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/platform_device.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Representation of a platform device.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>platform_driver</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/platform_device.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Representation of a platform driver.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>tty_struct</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/tty.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>State information about a tty.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>tty_bufhead</TT>, <TT>tty_buffer</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/tty.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="a tty"></A>These two structures implement the flip buffer associated with a tty.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>tty_driver</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/tty_driver.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="and higher"></A>Programming interface between tty drivers and higher layers.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>tty_ldisc</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/tty_ldisc.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Entry points supported by a line discipline.</TD></TR></TBODY></TABLE></P><BR>
<P class=docText></P><A name=ch06tab04></A>
<P>
<TABLE cellSpacing=0 cellPadding=4 rules=rows frame=hsides>
<CAPTION>
<H5 class=docTableTitle>Table 6.4. Summary of Kernel Programming Interfaces</H5></CAPTION>
<COLGROUP span=3 align=left>
<COL width=150>
<COL width=200>
<COL width=200></COLGROUP>
<THEAD>
<TR>
<TH class="docTableCell thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left><A name=iddle3574></A><A name=iddle3577></A><A name=iddle3579></A><A name=iddle3581></A><A name=iddle3585></A><A name=iddle3586></A><A name=iddle3965></A><A name=iddle4323></A><A name=iddle4326></A><A name=iddle4333></A><A name=iddle4334></A><A name=iddle4337></A><A name=iddle4346></A><A name=iddle4370></A><A name=iddle4371></A>Kernel Interface</TH>
<TH class="docTableCell thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left>Location</TH>
<TH class="docTableCell thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left>Description</TH></TR></THEAD>
<TBODY>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>uart_register_driver()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>drivers/serial/sderial_core.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Registers a UART driver with the serial core</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>uart_add_one_port()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>drivers/serial/sderial_core.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Registers a UART port supported by the UART driver</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>uart_unregister_driver()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>drivers/serial/sderial_core.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Removes a UART driver from the serial core</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left>
<DIV class=docText><PRE>platform_device register()
platform_device_register_simple()
platform_add_devices()</PRE></DIV><BR></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>drivers/base/platform.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Registers a platform device</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>platform_device_unregister()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>drivers/base/platform.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Unregisters a platform device</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left>
<DIV class=docText><PRE>platform_driver_register()/
platform_driver_unregister()</PRE></DIV><BR></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>drivers/base/platform.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Registers/unregisters a platform driver</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>tty_insert_flip_char()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/tty_flip.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Adds a character to the tty flip buffer</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>tty_flip_buffer_push()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>drivers/char/tty_io.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="the line"></A>Queues a request to push the flip buffer to the line discipline</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>tty_register_driver()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>drivers/char/tty_io.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="serial core"></A>Registers a tty driver with the serial core</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>tty_unregister_driver()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>drivers/char/tty_io.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Removes a tty driver from the serial core</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>tty_register_ldisc()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>drivers/char/tty_io.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Creates a line discipline by registering prescribed entry points</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>tty_unregister_ldisc()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>drivers/char/tty_io.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Removes a line discipline from the serial core</TD></TR></TBODY></TABLE></P><BR>
<P class=docText><A name="need to"></A>Some serial data transfer scenarios are complex. You might need to mix and match different serial layer blocks, as you saw in <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch06lev1sec1.html#ch06fig03">Figure 6.3</A><A name="situations may"></A>. Some situations may necessitate a data path passing through multiple line disciplines. For example, setting up a dialup connection over Bluetooth involves the movement of data through the HCI line discipline as well as the PPP line discipline. If you can, establish such a connection and step through the code flow using a kernel debugger.