#Documentation/w1/w1.generic
<P></P>
<P>The 1-wire (w1) subsystem<BR>------------------------------------------------------------------<BR>The 1-wire bus is a simple master-slave bus that communicates via a single<BR>signal wire (plus ground, so two wires). </P>
<P></P>
<P>Devices communicate on the bus by pulling the signal to ground via an open<BR>drain output and by sampling the logic level of the signal line.</P>
<P>The w1 subsystem provides the framework for managing w1 masters and<BR>communication with slaves.</P>
<P>All w1 slave devices must be connected to a w1 bus master device.</P>
<P>Example w1 master devices:<BR>&nbsp;&nbsp;&nbsp; DS9490 usb device<BR>&nbsp;&nbsp;&nbsp; W1-over-GPIO<BR>&nbsp;&nbsp;&nbsp; DS2482 (i2c to w1 bridge)<BR>&nbsp;&nbsp;&nbsp; Emulated devices, such as a RS232 converter, parallel port adapter, etc</P>
<P><BR>What does the w1 subsystem do?<BR>------------------------------------------------------------------<BR>When a w1 master driver registers with the w1 subsystem, the following occurs:</P>
<P>&nbsp;- sysfs entries for that w1 master are created<BR>&nbsp;- the w1 bus is periodically searched for new slave devices</P>
<P>When a device is found on the bus, w1 core checks if driver for its family is<BR>loaded. If so, the family driver is attached to the slave.<BR>If there is no driver for the family, default one is assigned, which allows to perform<BR>almost any kind of operations. Each logical operation is a transaction<BR>in nature, which can contain several (two or one) low-level operations.<BR>Let's see how one can read EEPROM context:<BR>1. one must write control buffer, i.e. buffer containing command byte<BR>and two byte address. At this step bus is reset and appropriate device<BR>is selected using either W1_SKIP_ROM or W1_MATCH_ROM command.<BR>Then provided control buffer is being written to the wire.<BR>2. reading. This will issue reading eeprom response.</P>
<P>It is possible that between 1. and 2. w1 master thread will reset bus for searching<BR>and slave device will be even removed, but in this case 0xff will<BR>be read, since no device was selected.</P>
<P><BR>W1 device families<BR>------------------------------------------------------------------<BR>Slave devices are handled by a driver written for a family of w1 devices.</P>
<P>A family driver populates a struct w1_family_ops (see w1_family.h) and<BR>registers with the w1 subsystem.</P>
<P>Current family drivers:<BR>w1_therm - (ds18?20 thermal sensor family driver)<BR>&nbsp;&nbsp;&nbsp; provides temperature reading function which is bound to -&gt;rbin() method<BR>&nbsp;&nbsp;&nbsp; of the above w1_family_ops structure.</P>
<P>w1_smem - driver for simple 64bit memory cell provides ID reading method.</P>
<P>You can call above methods by reading appropriate sysfs files.</P>
<P><BR>What does a w1 master driver need to implement?<BR>------------------------------------------------------------------</P>
<P>The driver for w1 bus master must provide at minimum two functions.</P>
<P>Emulated devices must provide the ability to set the output signal level<BR>(write_bit) and sample the signal level (read_bit).</P>
<P>Devices that support the 1-wire natively must provide the ability to write and<BR>sample a bit (touch_bit) and reset the bus (reset_bus).</P>
<P>Most hardware provides higher-level functions that offload w1 handling.<BR>See struct w1_bus_master definition in w1.h for details.</P>
<P><BR>w1 master sysfs interface<BR>------------------------------------------------------------------<BR>&lt;xx-xxxxxxxxxxxxx&gt; - a directory for a found device. The format is family-serial<BR>bus&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - (standard) symlink to the w1 bus<BR>driver&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - (standard) symlink to the w1 driver<BR>w1_master_add&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Manually register a slave device<BR>w1_master_attempts - the number of times a search was attempted<BR>w1_master_max_slave_count<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - the maximum slaves that may be attached to a master<BR>w1_master_name&nbsp;&nbsp;&nbsp;&nbsp; - the name of the device (w1_bus_masterX)<BR>w1_master_pullup&nbsp;&nbsp; - 5V strong pullup 0 enabled, 1 disabled<BR>w1_master_remove&nbsp;&nbsp; - Manually remove a slave device<BR>w1_master_search&nbsp;&nbsp; - the number of searches left to do, -1=continual (default)<BR>w1_master_slave_count<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - the number of slaves found<BR>w1_master_slaves&nbsp;&nbsp; - the names of the slaves, one per line<BR>w1_master_timeout&nbsp; - the delay in seconds between searches</P>
<P>If you have a w1 bus that never changes (you don't add or remove devices),<BR>you can set the module parameter search_count to a small positive number<BR>for an initially small number of bus searches.&nbsp; Alternatively it could be<BR>set to zero, then manually add the slave device serial numbers by<BR>w1_master_add device file.&nbsp; The w1_master_add and w1_master_remove files<BR>generally only make sense when searching is disabled, as a search will<BR>redetect manually removed devices that are present and timeout manually<BR>added devices that aren't on the bus.</P>
<P><BR>w1 slave sysfs interface<BR>------------------------------------------------------------------<BR>bus&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - (standard) symlink to the w1 bus<BR>driver&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - (standard) symlink to the w1 driver<BR>name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - the device name, usually the same as the directory name<BR>w1_slave&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - (optional) a binary file whose meaning depends on the<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; family driver<BR>rw&nbsp;&nbsp;&nbsp;&nbsp; - (optional) created for slave devices which do not have<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; appropriate family driver. Allows to read/write binary data.