<H3 id=-100000 class=docSection1Title>Linux-PCMCIA Subsystem</H3>
<P class=docText><A name=iddle1370></A><A name=iddle1371></A><A name=iddle1649></A><A name=iddle3365></A><A name=iddle3366></A><A name=iddle3525></A><A name=iddle3529></A><A name=iddle3533></A><A name=iddle3534></A><A name=iddle3549></A><A name=iddle4073></A><A name=iddle4381></A><A name="support is"></A>Linux-PCMCIA support is available on Intel-based laptops as well as on architectures such as ARM, MIPS, and PowerPC. The PCMCIA subsystem consists of device drivers for PCMCIA host controllers, client drivers for different cards, a daemon that aids hotplugging, user mode utilities, and a <SPAN class=docEmphasis>Card Services</SPAN><A name="interacts with"></A> module that interacts with all of these.</P>
<P class=docText><A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch09lev1sec2.html#ch09fig03">Figure 9.3</A><A name="the interaction"></A> illustrates the interaction between the modules that constitute the Linux-PCMCIA subsystem.</P><A name=ch09fig03></A>
<P>
<CENTER>
<H5 class=docFigureTitle>Figure 9.3. The Linux-PCMCIA subsystem.</H5>
<P class=docText>
<DIV class=st1><A href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/images/ZTVyMWQ5OHB0Z2lzMC8vbWMzNWE5NC9yMzZnMjdhZy5wX2xjc2kwMHQvMzloZmlnaWFm.jpg" target=_blank>[View full size image]</A></DIV><IMG border=0 alt="" src="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/images/ZTVyMWQ5OHB0Z2lzMC8vbWMzNWE5NC9yMzZnMjdhZ3AuaWNzaTAwLzNmOWhpZ2Y-.jpg" width=500 height=506>
<P></P></CENTER>
<P></P><BR><A name=ch09sb02></A>
<P>
<TABLE cellSpacing=0 cellPadding=5 width="90%" border=1>
<TBODY>
<TR>
<TD>
<H2 class=docSidebarTitle>The Old Linux-PCMCIA Subsystem</H2>
<P class=docText><A name="working with"></A>The Linux-PCMCIA subsystem has recently undergone an overhaul. To get PCMCIA working with 2.6.13 and newer kernels, you need the <SPAN class=docEmphasis>pcmciautils</SPAN> package (<A class=docLink href="http://kernel.org/pub/linux/utils/kernel/pcmcia/howto.html" target=_blank>http://kernel.org/pub/linux/utils/kernel/pcmcia/howto.html</A>), which obsoletes the <SPAN class=docEmphasis>pcmcia-cs</SPAN> package (<A class=docLink href="http://pcmcia-cs.sourceforge.net/" target=_blank>http://pcmcia-cs.sourceforge.net</A><A name="programming interfaces"></A>) used with earlier kernels. Internal kernel programming interfaces and data structures have also changed. Earlier kernels relied on a user space daemon called <SPAN class=docEmphasis>cardmgr</SPAN><A name=using></A> to support hotplugging, but the new PCMCIA implementation handles hotplug using <SPAN class=docEmphasis>udev</SPAN><A name="new setups"></A>, just as other bus subsystems do. So with new setups, you don't need <SPAN class=docEmphasis>cardmgr</SPAN><A name="a migration"></A> and should make sure that it is not started. There is a migration guide at <A class=docLink href="http://kernel.org/pub/linux/utils/kernel/pcmcia/cardmgr-to-pcmciautils.html" target=_blank>http://kernel.org/pub/linux/utils/kernel/pcmcia/cardmgr-to-pcmciautils.html</A>.</P></TD></TR></TBODY></TABLE></P><BR>
<P class=docText><A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch09lev1sec2.html#ch09fig03">Figure 9.3</A> contains the following components:</P>
<UL>
<LI>
<P class=docList><A name="drivers that"></A>Host controller device drivers that implement low-level routines for communicating with the PCMCIA host controller. Your handheld and laptop have different host controllers and, hence, use different host controller drivers. Each PCMCIA slot that the host controller supports is called a <SPAN class=docEmphasis>socket</SPAN>.</P></LI>
<LI>
<P class=docList><A name="drivers "></A>PCMCIA client drivers (XX_cs in <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch09lev1sec2.html#ch09fig03">Figure 9.3</A><A name="that respond"></A>) that respond to socket events such as card insertion and ejection. This is the driver that you are most likely to implement when you attempt to Linux-enable a PCMCIA card. The XX_cs driver usually works in tandem with a generic driver (XX in <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch09lev1sec2.html#ch09fig03">Figure 9.3</A><A name="not PCMCIA"></A>) that is not PCMCIA-specific. In relation to <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch09lev1sec2.html#ch09fig03">Figure 9.3</A><A name="your device"></A>, if your device is a PCMCIA IDE disk, XX is the IDE disk driver, XX_cs is the ide_cs driver, XX-dependent layers are filesystem layers, and XX-applications are programs that access data files. XX_cs configures the generic driver (XX) with resources such as IRQs, I/O base addresses, and memory windows.</P></LI>
<LI>
<P class=docList><A name=iddle1857></A><A name=iddle3400></A><A name=iddle3521></A><A name="drivers and"></A>The PCMCIA core that provides services to host controller drivers and client drivers. The core provides an infrastructure that makes driver implementations simpler and adds a level of indirection that renders client drivers independent of host controllers. Irrespective of whether you are using your Bluetooth CF card on an XScale-based handheld or an x86-based laptop, the same client drivers can be pressed into service.</P></LI>
<LI>
<P class=docList>A <SPAN class=docEmphasis>driver services</SPAN> module (<SPAN class=docEmphasis>ds</SPAN><A name="bus services"></A>) that offers registration interfaces and bus services to client drivers.</P></LI>
<LI>
<P class=docList>The <SPAN class=docEmphasis>pcmciautils</SPAN> package, which contains tools such as <SPAN class=docEmphasis>pccardctl</SPAN><A name="between different"></A> that control the state of PCMCIA sockets and select between different card-configuration schemes.</P></LI></UL>
<P class=docText><A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch09lev1sec2.html#ch09fig04">Figure 9.4</A> glues kernel modules on top of <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch09lev1sec1.html#ch09fig01">Figure 9.1</A><A name="hardware on"></A> to illustrate how the Linux-PCMCIA subsystem interacts with hardware on a PC-compatible system.</P><A name=ch09fig04></A>
<P>
<CENTER>
<H5 class=docFigureTitle>Figure 9.4. Relating PCMCIA driver components with PC hardware.</H5>
<P class=docText>
<DIV class=st1><A href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/images/ZTVyMWQ5OHB0Z2lzMC8vbWMzNWE5NC9yMzZnMjdhZy5wX2xjc2kwMHQvNDloZmlnaWFm.jpg" target=_blank>[View full size image]</A></DIV><IMG border=0 alt="" src="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/images/ZTVyMWQ5OHB0Z2lzMC8vbWMzNWE5NC9yMzZnMjdhZ3AuaWNzaTAwLzRmOWhpZ2Y-.jpg" width=500 height=343>
<P></P></CENTER>
<P></P><BR>
<P class=docText><A name="constituting the"></A>In the following sections, let's take a closer look at the components constituting the Linux-PCMCIA subsystem. To better understand the role of these components and their interaction, we will insert a PCMCIA WiFi card into a laptop and trace the code flow in the section "<A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch09lev1sec7.html#ch09lev1sec7">Tying the Pieces Together</A>."