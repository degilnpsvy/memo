<H3 id=-100000 class=docSection1Title>Looking at the Sources</H3>
<P class=docText><A name=iddle2272></A><A name=iddle2274></A><A name=iddle2286></A><A name=iddle2287></A><A name=iddle2292></A><A name=iddle2295></A><A name=iddle4090></A><A name=iddle4118></A><A name=iddle4119></A><A name=iddle4122></A><A name=iddle4127></A><A name="In the"></A>In the 2.4 kernel source tree, a single directory (<SPAN class=docEmphasis>drivers/i2c/</SPAN><A name="the I"></A>) contained all the I<SUP>2</SUP>C/SMBus-related sources. The I<SUP>2</SUP><A name="code in"></A>C code in 2.6 kernels is organized hierarchically: The <SPAN class=docEmphasis>drivers/i2c/busses/</SPAN> directory contains adapter drivers, the <SPAN class=docEmphasis>drivers/i2c/algos/</SPAN> directory has algorithm drivers, and the <SPAN class=docEmphasis>drivers/i2c/chips/</SPAN><A name="other regions"></A> directory contains client drivers. You can find client drivers in other regions of the source tree, too. The <SPAN class=docEmphasis>drivers/sound/</SPAN><A name="chipsets that"></A> directory, for example, includes drivers for audio chipsets that use an I<SUP>2</SUP>C control interface. Take a look inside the <SPAN class=docEmphasis>Documentation/i2c/</SPAN> directory for tips and more examples.</P>
<P class=docText>Kernel SPI service functions live in <SPAN class=docEmphasis>drivers/spi/spi.c.</SPAN><A name=in></A> The SPI driver for the ADS7846 touch controller is implemented in <SPAN class=docEmphasis>drivers/input/touchscreen/ads7846.c.</SPAN> The MTD subsystem discussed in <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch17.html#ch17">Chapter 17</A><A name="An example"></A>, "Memory Technology Devices," implements drivers for SPI flash chips. An example is <SPAN class=docEmphasis>drivers/mtd/devices/mtd_dataflash.c</SPAN>, the driver to access Atmel DataFlash SPI chips.</P>
<P class=docText>The <SPAN class=docEmphasis>drivers/w1/</SPAN><A name="the host"></A> directory contains kernel support for the w1 protocol. Drivers for the host controller side of the w1 interface live in <SPAN class=docEmphasis>drivers/w1/masters/</SPAN><A name="drivers for"></A>, and drivers for w1 slaves reside in <SPAN class=docEmphasis>drivers/w1/slaves/</SPAN>.</P>
<P class=docText><A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch08lev1sec11.html#ch08tab03">Table 8.3</A><A name="their location"></A> summarizes the main data structures used in this chapter and their location in the kernel tree. <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch08lev1sec11.html#ch08tab04">Table 8.4</A><A name="lists the"></A> lists the main kernel programming interfaces that you used in this chapter along with the location of their definitions.</P><A name=ch08tab03></A>
<P>
<TABLE cellSpacing=0 cellPadding=5 rules=groups frame=hsides>
<CAPTION>
<H5 class=docTableTitle><A name="of Data"></A>Table 8.3. Summary of Data Structures</H5></CAPTION>
<COLGROUP span=3 align=left>
<COL width=200>
<COL width=150>
<COL width=200></COLGROUP>
<THEAD>
<TR>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left>Data Structure</TH>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left>Location</TH>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left>Description</TH></TR></THEAD>
<TBODY>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>i2c_driver</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/i2c.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="of an"></A>Representation of an I<SUP>2</SUP>C driver</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>i2c_client_address_data</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/i2c.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Slave addresses that an I<SUP>2</SUP>C client driver is responsible for</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>i2c_client</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/i2c.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Identifies a chip connected to an I<SUP>2</SUP>C bus</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>i2c_msg</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/i2c.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="generate on"></A>Information pertaining to a transaction that you want to generate on the I<SUP>2</SUP>C bus</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>spi_driver</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/spi/spi.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Representation of an SPI driver</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>spi_device</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/spi/spi.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Representation of an SPI device</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>spi_transfer</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/spi/spi.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Details of an SPI transfer buffer</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>spi_message</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/spi/spi.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Sequence of <TT>spi_transfer</TT> segments</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>w1_family</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>drivers/w1/w1_family.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Representation of a w1 slave driver</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>w1_family_ops</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>drivers/w1/w1_family.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>A w1 slave driver's entry points</TD></TR></TBODY></TABLE></P><BR>
<P class=docText></P><A name=ch08tab04></A>
<P>
<TABLE cellSpacing=0 cellPadding=5 rules=groups frame=hsides>
<CAPTION>
<H5 class=docTableTitle>Table 8.4. Summary of Kernel Programming Interfaces</H5></CAPTION>
<COLGROUP span=3 align=left>
<COL width=200>
<COL width=150>
<COL width=200></COLGROUP>
<THEAD>
<TR>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left><A name=iddle2275></A><A name=iddle2279></A><A name=iddle2281></A><A name=iddle2282></A><A name=iddle2284></A><A name=iddle2288></A><A name=iddle2290></A><A name=iddle2291></A><A name=iddle2294></A><A name=iddle2296></A><A name=iddle2309></A><A name=iddle4115></A><A name=iddle4120></A><A name=iddle4121></A><A name=iddle4124></A><A name=iddle4126></A><A name=iddle4128></A>Kernel Interface</TH>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left>Location</TH>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left>Description</TH></TR></THEAD>
<TBODY>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>i2c_add_driver()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/i2c.h</SPAN> <SPAN class=docEmphasis>drivers/i2c/i2c-core.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="the I"></A>Registers driver entry points with the I<SUP>2</SUP>C core.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>i2c_del_driver()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>drivers/i2c/i2c-core.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Removes a driver from the I<SUP>2</SUP>C core.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>i2c_probe()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>drivers/i2c/i2c-core.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="is responsible"></A>Specifies the addresses of slave devices that the driver is responsible for and an associated <TT>attach()</TT><A name="of the"></A> routine to be invoked if one of the specified addresses is detected by the I<SUP>2</SUP>C core.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>i2c_attach_client()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>drivers/i2c/i2c-core.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="clients serviced"></A>Adds a new client to the list of clients serviced by the associated I<SUP>2</SUP><A name="host adapter"></A>C host adapter.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>i2c_detach_client()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>drivers/i2c/i2c-core.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="the associated"></A>Detaches an active client. Usually done when the client driver or the associated host adapter unregisters.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>i2c_check_functionality()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/i2c.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="Verifies whether"></A>Verifies whether a particular function is supported by the host adapter.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>i2c_get_functionality()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/i2c.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="mask containing"></A>Obtains a mask containing all functions supported by the host adapter.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>i2c_add_adapter()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>drivers/i2c/i2c-core.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="a host"></A>Registers a host adapter.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>i2c_del_adapter()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>drivers/i2c/i2c-core.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Unregisters a host adapter.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left>SMBus-compatible I<SUP>2</SUP>C data access routines</TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>drivers/i2c/i2c-core.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>See <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch08lev1sec2.html#ch08tab01">Table 8.1</A>.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>i2c_transfer()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>drivers/i2c/i2c-core.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Sends an <TT>i2c_msg</TT> over the I<SUP>2</SUP>C bus. This function is not SMBus-compatible.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>spi_register_driver()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>drivers/spi/spi.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Registers driver entry points with the SPI core.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>spi_unregister_driver()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/spi/spi.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Unregisters an SPI driver.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>spi_message_init()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/spi/spi.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Initializes an SPI message.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>spi_message_add_tail()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/spi/spi.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Adds an SPI message to a transfer list.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>spi_sync()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>drivers/spi/spi.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="until completion"></A>Synchronously transfers data over the SPI bus. This function blocks until completion.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>spi_async()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/spi/spi.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="SPI bus"></A>Asynchronously transfers data over the SPI bus using a completion callback mechanism.</TD></TR></TBODY></TABLE>