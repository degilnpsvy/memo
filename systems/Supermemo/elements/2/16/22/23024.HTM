<H3 id=-100000 class=docSection1Title>Looking at the Sources</H3>
<P class=docText><A name="The core"></A>The core interrupt handling code is generic and is in the <SPAN class=docEmphasis>kernel/irq/</SPAN><A name="can be"></A> directory. The architecture-specific portions can be found in <SPAN class=docEmphasis>arch/your-arch/kernel/irq.c.</SPAN><A name=function></A> The function <TT>do_IRQ()</TT><A name="start your"></A> defined in this file is a good place to start your journey into the kernel interrupt handling mechanism.</P>
<P class=docText><A name="implementations live"></A>The kernel softirq and tasklet implementations live in <SPAN class=docEmphasis>kernel/softirq.c.</SPAN><A name="control over"></A> This file also contains additional functions that offer more fine-grained control over softirqs and tasklets. Look at <SPAN class=docEmphasis>include/linux/interrupt.h</SPAN><A name="required to"></A> for softirq vector enumerations and prototypes required to implement your interrupt handler. For a real-life example of writing interrupt handlers and bottom halves, start from the handler that is part of <SPAN class=docEmphasis>drivers/net/lib8390.c</SPAN> and follow the trail into the networking stack.</P>
<P class=docText><A name=in></A>The kobject implementation and related programming interfaces live in <SPAN class=docEmphasis>lib/kobject.c</SPAN> and <SPAN class=docEmphasis>include/linux/kobject.h.</SPAN><A name=at></A> Look at <SPAN class=docEmphasis>drivers/base/sys.c</SPAN> for the sysfs implementation. You will find device class APIs in <SPAN class=docEmphasis>drivers/base/class.c.</SPAN> Dispatching hotplug uevents via netlink sockets is done by <SPAN class=docEmphasis>lib/kobject_uevent.c.</SPAN> You may download udev sources and documentation from <A class=docLink href="http://www.kernel.org/pub/linux/utils/kernel/hotplug/udev.html" target=_blank>www.kernel.org/pub/linux/utils/kernel/hotplug/udev.html</A>.</P>
<P class=docText><A name="look at"></A>For a fuller understanding of how APM is implemented on x86 Linux, look at <SPAN class=docEmphasis>arch/x86/kernel/apm_32.c, include/linux/apm_bios.h</SPAN><A name=and></A>, and <SPAN class=docEmphasis>include/asm-x86/mach-default/apm.h</SPAN><A name="kernel tree"></A> in the kernel tree. If you are curious to know how APM is implemented on BIOS-less architectures such as ARM, look at <SPAN class=docEmphasis>include/linux/apm-emulation.h</SPAN><A name="its users"></A> and its users. The kernel's ACPI implementation lives in <SPAN class=docEmphasis>drivers/acpi/</SPAN>.</P>
<P class=docText><A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch04lev1sec6.html#ch04tab03">Table 4.2</A><A name="in this"></A> contains a summary of the main data structures used in this chapter and the location of their definitions in the source tree. <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch04lev1sec6.html#ch04tab04">Table 4.3</A><A name="interfaces that"></A> lists the main kernel programming interfaces that you used in this chapter along with the location of their definitions.</P><A name=ch04tab03></A>
<P>
<TABLE cellSpacing=0 cellPadding=5 rules=groups frame=hsides>
<CAPTION>
<H5 class=docTableTitle>Table 4.2. Summary of Data Structures</H5></CAPTION>
<COLGROUP span=3 align=left>
<COL width=100>
<COL width=200>
<COL width=250></COLGROUP>
<THEAD>
<TR>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left>Data Structure</TH>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left>Location</TH>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left>Description</TH></TR></THEAD>
<TBODY>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>tasklet_struct</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/interrupt.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Manages a tasklet, which is a method to implement bottom halves</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>kobject</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/kobject.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Encapsulates common properties of a kernel object</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>kset</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/kobject.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>An object set to which a kobject belongs</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>kobj_type</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/kobject.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>An object type that describes a kobject</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>class</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/device.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="broader category"></A>Abstracts the idea that a driver falls under a broader category</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>bus device device_driver</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/device.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="the Linux"></A>Structures that form the pillars under the Linux device model</TD></TR></TBODY></TABLE></P><BR>
<P class=docText></P><A name=ch04tab04></A>
<P>
<TABLE cellSpacing=0 cellPadding=5 rules=groups frame=hsides>
<CAPTION>
<H5 class=docTableTitle>Table 4.3. Summary of Kernel Programming Interfaces</H5></CAPTION>
<COLGROUP span=3 align=left>
<COL width=150>
<COL width=150>
<COL width=250></COLGROUP>
<THEAD>
<TR>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left><A name=iddle1480></A><A name=iddle1775></A><A name=iddle1803></A><A name=iddle1805></A><A name=iddle1985></A><A name=iddle2103></A><A name=iddle2670></A><A name=iddle2698></A><A name=iddle3327></A><A name=iddle3712></A><A name=iddle3801></A><A name=iddle4218></A><A name=iddle4220></A><A name=iddle4222></A><A name=iddle4224></A><A name=iddle4226></A>Kernel Interface</TH>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left>Location</TH>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left>Description</TH></TR></THEAD>
<TBODY>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>request_irq()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>kernel/irq/manage.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="with it"></A>Requests an IRQ and associates an interrupt handler with it</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>free_irq()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>kernel/irq/manage.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="an IRQ"></A>Frees an IRQ</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>disable_irq()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>kernel/irq/manage.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Disables the interrupt associated with a supplied IRQ</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>disable_irq_nosync()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>kernel/irq/manage.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="for any"></A>Disables the interrupt associated with a supplied IRQ without waiting for any currently executing instances of the interrupt handler to return</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>enable_irq()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>kernel/irq/manage.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="the interrupt"></A>Re-enables the interrupt that has been disabled using <TT>disable_irq()</TT> or <TT>disable_irq_nosync()</TT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>open_softirq()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>kernel/softirq.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Opens a softirq</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>raise_softirq()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>kernel/softirq.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="softirq as"></A>Marks the softirq as pending execution</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>tasklet_init()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>kernel/softirq.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="initializes a"></A>Dynamically initializes a tasklet</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>tasklet_schedule()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/interrupt.hkernel/softirq.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Marks a tasklet as pending execution</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>tasklet_enable()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/interrupt.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Enables a tasklet</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>tasklet_disable()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/interrupt.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Disables a tasklet</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>tasklet_disable_nosync()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/interrupt.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="finish execution"></A>Disables a tasklet without waiting for active instances to finish execution</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>class_device_register()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>drivers/base/class.c</SPAN></TD>
<TD class=docTableCell vAlign=top rowSpan=5 align=left><A name="Linux device"></A>Family of functions in the Linux device model that create/destroy a class, device class, and associated kobjects and sysfs files</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>kobject_add()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>lib/kobject.c</SPAN></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>sysfs_create_dir()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>lib/kobject_uevent.c</SPAN></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>class_device_create()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>fs/sysfs/dir.c</SPAN></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left>
<DIV class=docText><PRE>class_device_destroy()
class_create()
class_destroy()
class_device_create_file()
sysfs_create_file()
class_device_add_attrs()
kobject_uevent()</PRE></DIV><BR></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>fs/sysfs/file.c</SPAN></TD></TR></TBODY></TABLE></P><BR>
<P class=docText><A name=iddle1462></A><A name=iddle1464></A><A name=iddle1466></A><A name=iddle1467></A><A name=iddle1469></A><A name=iddle1470></A><A name=iddle1472></A><A name=iddle2671></A><A name=iddle2674></A><A name=iddle4196></A><A name=iddle4197></A><A name="want to"></A>This finishes our exploration of device driver concepts. You might want to dip back into this chapter while developing your driver.