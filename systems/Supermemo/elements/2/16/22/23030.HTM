<H3 id=-100000 class=docSection1Title>RTC Subsystem</H3>
<P class=docText><A name="RTC support"></A>RTC support in the kernel is architected into two layers: a hardware-independent top-layer char driver that implements the kernel RTC API, and a hardware-dependent bottom-layer driver that communicates with the underlying bus. The RTC API, specified <A name=iddle1440></A><A name=iddle1575></A><A name=iddle2731></A><A name=iddle3677></A><A name=iddle3855></A><A name=iddle3856></A><A name=iddle3858></A><A name=iddle3860></A>in <SPAN class=docEmphasis>Documentation/rtc.txt</SPAN><A name="set of"></A>, is a set of standard ioctls that conforming applications such as hwclock leverage by operating on <SPAN class=docEmphasis>/dev/rtc</SPAN><A name="API also"></A>. The API also specifies attributes in sysfs (<SPAN class=docEmphasis>/sys/class/rtc/</SPAN>) and procfs (<SPAN class=docEmphasis>/proc/driver/rtc</SPAN><A name="independent of"></A>). The RTC API guarantees that user space tools are independent of the underlying platform and the RTC chip. The bottom-layer RTC driver is bus-specific. The embedded device discussed in the section "<A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch08lev1sec5.html#ch08lev1sec5">Device Example: Real Time Clock</A>" in <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch08.html#ch08">Chapter 8</A><A name="connected to"></A>, "The Inter-Integrated Circuit Protocol," has an RTC chip connected to the I<SUP>2</SUP>C bus, which is driven by an I<SUP>2</SUP>C client driver.</P>
<P class=docText><A name="the top"></A>The kernel has a dedicated RTC subsystem that provides the top-layer char driver and a core infrastructure that bottom-layer RTC drivers can use to tie in with the top layer. The main components of this infrastructure are the <TT>rtc_class_ops</TT> structure and the registration functions, <TT>rtc_device_[register|unregister]()</TT><A name="are being"></A>. Bottom-layer RTC drivers scattered under different bus-specific directories are being unified with this subsystem under <SPAN class=docEmphasis>drivers/rtc/</SPAN>.</P>
<P class=docText><A name="system can"></A>The RTC subsystem allows the possibility that a system can have more than one RTC. It does this by exporting multiple interfaces, <SPAN class=docEmphasis>/dev/rtcN</SPAN> and <SPAN class=docEmphasis>/sys/class/rtc/rtcN</SPAN>, where <SPAN class=docEmphasis>N</SPAN><A name="the number"></A> is the number of RTCs on your system. Some embedded systems, for example, have two RTCs: one built in to the microcontroller to support sophisticated operations such as periodic interrupt generation, and another no-frills low-power battery-backed external RTC for timekeeping. Because RTC-aware applications operate over <SPAN class=docEmphasis>/dev/rtc</SPAN><A name=created></A>, set up a symbolic link so that one of the created <SPAN class=docEmphasis>/dev/rtcX</SPAN><A name="nodes can"></A> nodes can be accessed as <SPAN class=docEmphasis>/dev/rtc</SPAN>.</P>
<P class=docText><A name="the RTC"></A>To enable the RTC subsystem, turn on <TT>CONFIG_RTC_CLASS</TT><A name="kernel configuration"></A> during kernel configuration.</P><A name=ch05sb02></A>
<P>
<TABLE cellSpacing=0 cellPadding=5 width="90%" border=1>
<TBODY>
<TR>
<TD>
<H2 class=docSidebarTitle>The Legacy PC RTC Driver</H2>
<P class=docText><A name="RTC subsystem"></A>On PC systems, you have the option of bypassing the RTC subsystem by using the legacy RTC driver, <SPAN class=docEmphasis>drivers/char/</SPAN><SPAN class=docEmphasis>rtc.c.</SPAN><A name="bottom layers"></A> This driver provides top and bottom layers for the RTC on PC-compatible systems and exports <SPAN class=docEmphasis>/dev/rtc</SPAN> and <SPAN class=docEmphasis>/proc/driver/rtc</SPAN> to user applications. To enable this driver, turn on <TT>CONFIG_RTC</TT> during kernel configuration.</P></TD></TR></TBODY></TABLE>