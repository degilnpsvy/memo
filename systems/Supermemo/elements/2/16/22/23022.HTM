<H3 id=-100000 class=docSection1Title>Memory Barriers</H3>
<P class=docText><A name=iddle1025></A><A name=iddle1064></A><A name=iddle1067></A><A name=iddle1112></A><A name=iddle1203></A><A name=iddle1789></A><A name=iddle1790></A><A name=iddle2913></A><A name=iddle2952></A><A name=iddle3621></A><A name=iddle3823></A><A name=iddle4640></A><A name="Many processors"></A>Many processors and compilers reorder instructions to achieve optimal execution speeds. The reordering is done such that the new instruction stream is semantically equivalent to the original one. However, if you are, for example, writing to memory mapped registers on an I/O device, instruction reordering can generate unexpected side effects. To prevent the processor from reordering instructions, you can insert a barrier in your code. The <TT>wmb()</TT><A name="a road"></A> function inserts a road block that prevents writes from moving through it, <TT>rmb()</TT><A name="a read"></A> provides a read barricade that disallows reads from crossing it, and <TT>mb()</TT> results in a read-write barrier.</P>
<P class=docText><A name="are also"></A>In addition to the CPU-to-hardware interactions referred to previously, memory barriers are also relevant for CPU-to-CPU interactions on SMP systems. If your CPU's data cache is operating in write-back mode (in which data is not copied from cache to memory until it's absolutely necessary), you might want to stall the instruction stream until the cache-to-memory queue is drained. This is relevant, for example, when you encounter instructions that acquire or release locks. Barriers are used in this scenario to obtain a consistent perception across CPUs.</P>
<P class=docText><A name="we discuss"></A>We revisit memory barriers when we discuss PCI drivers in <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch10.html#ch10">Chapter 10</A> and flash map drivers in <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch17.html#ch17">Chapter 17</A>. In the meanwhile, stop by <SPAN class=docEmphasis>Documentation/memory-barriers.txt</SPAN> for an explanation of different kinds of memory barriers.</P>
<TABLE cellSpacing=0 cellPadding=0 width="100%" border=0>
<TBODY>
<TR>
<TD align=right>
<DIV style="MARGIN-LEFT: 0.15in"><A href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch04lev1sec3.html"></A></DIV></TD></TR></TBODY></TABLE>