# Documentation/sysfs-rules.txt
<P></P>
<P>Rules on how to access information in the Linux kernel sysfs</P>
<P></P>
<P>The kernel-exported sysfs exports internal kernel implementation details<BR>and depends on internal kernel structures and layout. It is agreed upon<BR>by the kernel developers that the Linux kernel does not provide a stable<BR>internal API. Therefore, there are aspects of the sysfs interface that<BR>may not be stable across kernel releases.</P>
<P>To minimize the risk of breaking users of sysfs, which are in most cases<BR>low-level userspace applications, with a new kernel release, the users<BR>of sysfs must follow some rules to use an as-abstract-as-possible way to<BR>access this filesystem. The current udev and HAL programs already<BR>implement this and users are encouraged to plug, if possible, into the<BR>abstractions these programs provide instead of accessing sysfs directly.</P>
<P>But if you really do want or need to access sysfs directly, please follow<BR>the following rules and then your programs should work with future<BR>versions of the sysfs interface.</P>
<P>- Do not use libsysfs<BR>&nbsp; It makes assumptions about sysfs which are not true. Its API does not<BR>&nbsp; offer any abstraction, it exposes all the kernel driver-core<BR>&nbsp; implementation details in its own API. Therefore it is not better than<BR>&nbsp; reading directories and opening the files yourself.<BR>&nbsp; Also, it is not actively maintained, in the sense of reflecting the<BR>&nbsp; current kernel development. The goal of providing a stable interface<BR>&nbsp; to sysfs has failed; it causes more problems than it solves. It<BR>&nbsp; violates many of the rules in this document.</P>
<P>- sysfs is always at /sys<BR>&nbsp; Parsing /proc/mounts is a waste of time. Other mount points are a<BR>&nbsp; system configuration bug you should not try to solve. For test cases,<BR>&nbsp; possibly support a SYSFS_PATH environment variable to overwrite the<BR>&nbsp; application's behavior, but never try to search for sysfs. Never try<BR>&nbsp; to mount it, if you are not an early boot script.</P>
<P>- devices are only "devices"<BR>&nbsp; There is no such thing like class-, bus-, physical devices,<BR>&nbsp; interfaces, and such that you can rely on in userspace. Everything is<BR>&nbsp; just simply a "device". Class-, bus-, physical, ... types are just<BR>&nbsp; kernel implementation details which should not be expected by<BR>&nbsp; applications that look for devices in sysfs.</P>
<P>&nbsp; The properties of a device are:<BR>&nbsp;&nbsp;&nbsp; o devpath (/devices/pci0000:00/0000:00:1d.1/usb2/2-2/2-2:1.0)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - identical to the DEVPATH value in the event sent from the kernel<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at device creation and removal<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - the unique key to the device at that point in time<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - the kernel's path to the device directory without the leading<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /sys, and always starting with with a slash<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - all elements of a devpath must be real directories. Symlinks<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pointing to /sys/devices must always be resolved to their real<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; target and the target path must be used to access the device.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; That way the devpath to the device matches the devpath of the<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; kernel used at event time.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - using or exposing symlink values as elements in a devpath string<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; is a bug in the application</P>
<P>&nbsp;&nbsp;&nbsp; o kernel name (sda, tty, 0000:00:1f.2, ...)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - a directory name, identical to the last element of the devpath<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - applications need to handle spaces and characters like '!' in<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; the name</P>
<P>&nbsp;&nbsp;&nbsp; o subsystem (block, tty, pci, ...)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - simple string, never a path or a link<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - retrieved by reading the "subsystem"-link and using only the<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; last element of the target path</P>
<P>&nbsp;&nbsp;&nbsp; o driver (tg3, ata_piix, uhci_hcd)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - a simple string, which may contain spaces, never a path or a<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; link<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - it is retrieved by reading the "driver"-link and using only the<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; last element of the target path<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - devices which do not have "driver"-link just do not have a<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; driver; copying the driver value in a child device context is a<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bug in the application</P>
<P>&nbsp;&nbsp;&nbsp; o attributes<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - the files in the device directory or files below subdirectories<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; of the same device directory<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - accessing attributes reached by a symlink pointing to another device,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; like the "device"-link, is a bug in the application</P>
<P>&nbsp; Everything else is just a kernel driver-core implementation detail<BR>&nbsp; that should not be assumed to be stable across kernel releases.</P>
<P>- Properties of parent devices never belong into a child device.<BR>&nbsp; Always look at the parent devices themselves for determining device<BR>&nbsp; context properties. If the device 'eth0' or 'sda' does not have a<BR>&nbsp; "driver"-link, then this device does not have a driver. Its value is empty.<BR>&nbsp; Never copy any property of the parent-device into a child-device. Parent<BR>&nbsp; device properties may change dynamically without any notice to the<BR>&nbsp; child device.</P>
<P>- Hierarchy in a single device tree<BR>&nbsp; There is only one valid place in sysfs where hierarchy can be examined<BR>&nbsp; and this is below: /sys/devices.<BR>&nbsp; It is planned that all device directories will end up in the tree<BR>&nbsp; below this directory.</P>
<P>- Classification by subsystem<BR>&nbsp; There are currently three places for classification of devices:<BR>&nbsp; /sys/block, /sys/class and /sys/bus. It is planned that these will<BR>&nbsp; not contain any device directories themselves, but only flat lists of<BR>&nbsp; symlinks pointing to the unified /sys/devices tree.<BR>&nbsp; All three places have completely different rules on how to access<BR>&nbsp; device information. It is planned to merge all three<BR>&nbsp; classification directories into one place at /sys/subsystem,<BR>&nbsp; following the layout of the bus directories. All buses and<BR>&nbsp; classes, including the converted block subsystem, will show up<BR>&nbsp; there.<BR>&nbsp; The devices belonging to a subsystem will create a symlink in the<BR>&nbsp; "devices" directory at /sys/subsystem/&lt;name&gt;/devices.</P>
<P>&nbsp; If /sys/subsystem exists, /sys/bus, /sys/class and /sys/block can be<BR>&nbsp; ignored. If it does not exist, you always have to scan all three<BR>&nbsp; places, as the kernel is free to move a subsystem from one place to<BR>&nbsp; the other, as long as the devices are still reachable by the same<BR>&nbsp; subsystem name.</P>
<P>&nbsp; Assuming /sys/class/&lt;subsystem&gt; and /sys/bus/&lt;subsystem&gt;, or<BR>&nbsp; /sys/block and /sys/class/block are not interchangeable is a bug in<BR>&nbsp; the application.</P>
<P>- Block<BR>&nbsp; The converted block subsystem at /sys/class/block or<BR>&nbsp; /sys/subsystem/block will contain the links for disks and partitions<BR>&nbsp; at the same level, never in a hierarchy. Assuming the block subsystem to<BR>&nbsp; contain only disks and not partition devices in the same flat list is<BR>&nbsp; a bug in the application.</P>
<P>- "device"-link and &lt;subsystem&gt;:&lt;kernel name&gt;-links<BR>&nbsp; Never depend on the "device"-link. The "device"-link is a workaround<BR>&nbsp; for the old layout, where class devices are not created in<BR>&nbsp; /sys/devices/ like the bus devices. If the link-resolving of a<BR>&nbsp; device directory does not end in /sys/devices/, you can use the<BR>&nbsp; "device"-link to find the parent devices in /sys/devices/. That is the<BR>&nbsp; single valid use of the "device"-link; it must never appear in any<BR>&nbsp; path as an element. Assuming the existence of the "device"-link for<BR>&nbsp; a device in /sys/devices/ is a bug in the application.<BR>&nbsp; Accessing /sys/class/net/eth0/device is a bug in the application.</P>
<P>&nbsp; Never depend on the class-specific links back to the /sys/class<BR>&nbsp; directory.&nbsp; These links are also a workaround for the design mistake<BR>&nbsp; that class devices are not created in /sys/devices. If a device<BR>&nbsp; directory does not contain directories for child devices, these links<BR>&nbsp; may be used to find the child devices in /sys/class. That is the single<BR>&nbsp; valid use of these links; they must never appear in any path as an<BR>&nbsp; element. Assuming the existence of these links for devices which are<BR>&nbsp; real child device directories in the /sys/devices tree is a bug in<BR>&nbsp; the application.</P>
<P>&nbsp; It is planned to remove all these links when all class device<BR>&nbsp; directories live in /sys/devices.</P>
<P>- Position of devices along device chain can change.<BR>&nbsp; Never depend on a specific parent device position in the devpath,<BR>&nbsp; or the chain of parent devices. The kernel is free to insert devices into<BR>&nbsp; the chain. You must always request the parent device you are looking for<BR>&nbsp; by its subsystem value. You need to walk up the chain until you find<BR>&nbsp; the device that matches the expected subsystem. Depending on a specific<BR>&nbsp; position of a parent device or exposing relative paths using "../" to<BR>&nbsp; access the chain of parents is a bug in the application.