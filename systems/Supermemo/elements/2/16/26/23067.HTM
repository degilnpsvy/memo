<H3 id=-100000 class=docSection1Title>Serial PCMCIA</H3>
<P class=docText><A name="Many networking"></A>Many networking technologies such as <SPAN class=docEmphasis><A name="Radio Service"></A>General Packet Radio Service</SPAN> (GPRS), <SPAN class=docEmphasis><A name="System for"></A>Global System for Mobile Communications</SPAN> (GSM), <SPAN class=docEmphasis>Global Positioning System</SPAN><A name="with host"></A> (GPS), and Bluetooth use a serial transport mechanism to communicate with host systems. In this <A name=iddle1403></A><A name=iddle1570></A><A name=iddle1653></A><A name=iddle1726></A><A name=iddle2182></A><A name=iddle2229></A><A name=iddle3517></A><A name=iddle3596></A><A name=iddle3629></A><A name=iddle3630></A><A name=iddle3933></A><A name="layer handles"></A>section, let's find out how the PCMCIA layer handles cards that feature such technologies. Note that this section is only to help you understand the bus interface part of GPRS, GSM, and Bluetooth cards having a PCMCIA/CF form factor. The technologies themselves are discussed in detail in <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch16.html#ch16">Chapter 16</A>, "Linux Without Wires."</P>
<P class=docText>The generic serial Card Services driver, <SPAN class=docEmphasis>serial_cs</SPAN><A name="the PCMCIA"></A>, allows the rest of the operating system to see the PCMCIA/CF card as a serial device. The first unused serial device, <SPAN class=docEmphasis>/dev/ttySX</SPAN><A name="serial port"></A>, gets allotted to the card. serial_cs thus emulates a serial port over GPRS, GSM, and GPS cards. It also allows Bluetooth PCMCIA/CF cards that use a serial transport to transfer <SPAN class=docEmphasis>Host Control Interface</SPAN> (HCI) packets to Bluetooth protocol layers.</P>
<P class=docText><A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch09lev1sec9.html#ch09fig05">Figure 9.5</A><A name="to communicate"></A> illustrates how kernel modules implementing different networking technologies interact with serial_cs to communicate with their respective cards.</P><A name=ch09fig05></A>
<P>
<CENTER>
<H5 class=docFigureTitle><A name="cards that"></A>Figure 9.5. Networking with PCMCIA/CF cards that use serial transport.</H5>
<P class=docText>
<DIV class=st1><A href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/images/ZTVyMWQ5OHB0Z2lzMC8vbWMzNWE5NC9yMzZnMjdhZy5wX2xjc2kwMHQvNTloZmlnaWFm.jpg" target=_blank>[View full size image]</A></DIV><IMG border=0 alt="" src="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/images/ZTVyMWQ5OHB0Z2lzMC8vbWMzNWE5NC9yMzZnMjdhZ3AuaWNzaTAwLzVmOWhpZ2Y-.jpg" width=500 height=523>
<P></P></CENTER>
<P></P><BR>
<P class=docText>The <SPAN class=docEmphasis>Point-to-Point Protocol</SPAN><A name="protocols such"></A> (PPP) allows networking protocols such as TCP/IP to run over a serial link. In the context of <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch09lev1sec9.html#ch09fig05">Figure 9.5</A><A name="PPP gets"></A>, PPP gets TCP/IP applications running over GPRS and GSM dialup. The PPP daemon, <SPAN class=docEmphasis>pppd</SPAN><A name="virtual serial"></A>, attaches over virtual serial ports emulated by serial_cs. The PPP kernel modules&#37413;?<SPAN class=docEmphasis>ppp_generic, ppp_async</SPAN>, and <SPAN class=docEmphasis>slhc</SPAN><A name="be loaded"></A>&#37413;&#25864;ave to be loaded for pppd to work. Invoke pppd as follows:</P>
<DIV class=docText><PRE><SPAN class=docEmphStrong>bash&gt; pppd ttySX call connection-script</SPAN></PRE></DIV><BR>
<P class=docText>where <SPAN class=docEmphasis>connection-script</SPAN><A name="with the"></A> is a file containing command sequences that pppd exchanges with the service provider to establish a link. The connection script depends on the particular card that is being used. A GPRS card would need a context string to be sent as part of the connection script, whereas a GSM card might need an exchange of passwords. An example connection script is described in the section "<A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch16lev1sec4.html#ch16lev2sec21">GPRS</A>" in <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch16.html#ch16">Chapter 16</A>.