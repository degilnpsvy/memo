<H3 id=-100000 class=docSection1Title>Process Context and Interrupt Context</H3>
<P class=docText><A name="The kernel"></A>The kernel accomplishes useful work using a combination of process contexts and interrupt contexts. <FONT class=extract>Kernel code that services system calls issued by user applications runs on behalf of the corresponding application processes and is said to execute in process context.</FONT> Interrupt handlers, on the other hand, run asynchronously in interrupt context. Processes contexts are not tied to any interrupt context and vice versa.</P>
<P class=docText><A name=iddle2239></A><A name=iddle2504></A><A name=iddle2610></A><A name=iddle2611></A><A name=iddle2613></A><A name=iddle2638></A><A name=iddle2639></A><A name=iddle2641></A><A name=iddle4266></A><A name=iddle4267></A><A name=iddle4269></A><A name="running in"></A><FONT class=extract>Kernel code running in process context is preemptible. An interrupt context, however, always runs to completion and is not preemptible. Because of this, there are restrictions on what can be done from interrupt context. Code executing from interrupt context cannot do the following:</FONT></P>
<UL>
<LI>
<P class=docList><A name="to sleep"></A><FONT class=extract>Go to sleep or relinquish the processor</FONT></P>
<LI>
<P class=docList><FONT class=extract>Acquire a mutex</FONT></P>
<LI>
<P class=docList><FONT class=extract>Perform time-consuming tasks</FONT></P>
<LI>
<P class=docList><FONT class=extract>Access user space virtual memory</FONT></P></LI></UL>
<P class=docText>Look at section "<A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch04lev1sec2.html#ch04lev1sec2">Interrupt Handing</A>" in <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch04.html#ch04">Chapter 4</A> for a full discussion of the interrupt context.