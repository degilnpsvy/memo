<H3 id=-100000 class=docSection1Title>Looking at the Sources</H3>
<P class=docText><A name="Before we"></A>Before we start wetting our toes in the kernel, let's download the sources, learn to apply a patch, and look at the layout of the code tree.</P>
<P class=docText>First, go to <A class=docLink href="http://www.kernel.org/" target=_blank>www.kernel.org</A><A name="the latest"></A> and get the latest stable tree. The sources are archived as <SPAN class=docEmphasis>tar</SPAN><A name="compressed in"></A> files compressed in both <SPAN class=docEmphasis>gzip</SPAN> (.gz) and <SPAN class=docEmphasis>bzip2</SPAN><A name="zipped tar"></A> (.bz2) formats. Obtain the source files by uncompressing and untarring the zipped tar ball. In the following commands, replace X.Y.Z with the latest kernel version, such as 2.6.23:</P>
<DIV class=docText><PRE><SPAN class=docEmphStrong>bash&gt; cd /usr/src</SPAN>
<SPAN class=docEmphStrong>bash&gt; wget www.kernel.org/pub/linux/kernel/vX.Y/linux-X.Y.Z.tar.bz2</SPAN>
...
<SPAN class=docEmphStrong>bash&gt; tar xvfj linux-X.Y.Z.tar.bz2</SPAN></PRE></DIV><BR>
<P class=docText><A name=iddle1119></A><A name=iddle1796></A><A name=iddle2136></A><A name=iddle3392></A><A name=iddle3394></A><A name=iddle3397></A><A name="unpacked source"></A>Now that you have the unpacked source tree in <SPAN class=docEmphasis>/usr/src/linux-X.Y.Z/</SPAN><A name="tree by"></A> on your system, let's enable some experimental test features into the tree by getting a corresponding <TT>-mm</TT> (Andrew Morton) patch:</P>
<DIV class=docText>
<DIV class=codeSegmentsExpansionLinks>Code View:</DIV><PRE><SPAN class=docEmphStrong>bash&gt; cd /usr/src</SPAN>
<SPAN class=docEmphStrong>bash&gt; wget www.kernel.org/pub/linux/kernel/people/akpm/patches/X.Y/X.Y.Z/X.Y.Z-</SPAN>
<SPAN class=docEmphStrong>mm2/X.Y.Z-mm2.bz2</SPAN>

					  </PRE></DIV><BR>
<P class=docText><FONT class=extract>Apply the patch:</FONT></P>
<DIV class=docText><PRE><FONT class=extract><SPAN class=docEmphStrong>bash&gt; cd /usr/src/linux-X.Y.Z/</SPAN>
<SPAN class=docEmphStrong>bash&gt; bzip2 -dc ../X.Y.Z-mm2.bz2 | patch -p1</SPAN></FONT></PRE></DIV><BR>
<P class=docText><FONT class=extract>The <TT>-dc</TT></FONT><A name="files to"></A><FONT class=extract> option asks bzip2 to uncompress the specified files to standard output. This is piped to the <SPAN class=docEmphasis>patch</SPAN></FONT><A name="the code"></A><FONT class=extract> utility, which applies changes to each modified file in the code tree.</FONT></P>
<P class=docText><A name="you need"></A>If you need to apply multiple patches, do so in the right sequence. To generate a kernel enabled with the <TT>X.Y.Z-aa-bb</TT> patch, first download the full <TT>X.Y.Z</TT> kernel sources, apply the <TT>X.Y.Z-aa</TT> patch, and then apply the <TT>X.Y.Z-aa-bb</TT> patch.</P><A name=ch01sb02></A>
<P>
<TABLE cellSpacing=0 cellPadding=5 width="90%" border=1>
<TBODY>
<TR>
<TD>
<H2 class=docSidebarTitle>Patch Submission</H2>
<P class=docText>To generate a kernel patch out of your changes, use the <TT>diff</TT> command:</P>
<DIV class=docText>
<DIV class=codeSegmentsExpansionLinks>Code View:</DIV><PRE><SPAN class=docEmphStrong>bash&gt; diff &#37413;&#25560;ur /path/to/original/kernel /path/to/your/kernel &gt; changes.patch</SPAN>

					  </PRE></DIV><BR>
<P class=docText><A name=the></A>Note that the original kernel precedes the changed version in the <TT>diff</TT><A name="As per"></A>-ing order. As per 2.6 kernel patch submission conventions, you also need to add a line at the end of the patch that says this:</P>
<DIV class=docText><PRE>Signed-off-by: Name <EMAIL></EMAIL></PRE></DIV><BR>
<P class=docText><A name="certify that"></A>With this, you certify that you wrote the code yourself and that you have the right to contribute it.</P>
<P class=docText><A name="are now"></A>You are now all set to post your patch to the relevant mailing list, such as LKML.</P>
<P class=docText><FONT class=extract>Look at <SPAN class=docEmphasis>Documentation/SubmittingPatches</SPAN></FONT><A name=at></A><FONT class=extract> for a guide on creating patches for submission and at <SPAN class=docEmphasis>Documentation/applying-patches.txt</SPAN> for a tutorial on applying patches.</FONT></P></TD></TR></TBODY></TABLE></P><BR>
<P class=docText><A name=iddle1120></A><A name=iddle1239></A><A name=iddle1634></A><A name=iddle1801></A><A name=iddle1840></A><A name=iddle1855></A><A name=iddle2112></A><A name=iddle2328></A><A name=iddle2350></A><A name=iddle2466></A><A name=iddle2533></A><A name=iddle2589></A><A name=iddle4104></A><FONT class=extract>Now that your patched <SPAN class=docEmphasis>/usr/src/linux-X.Y.Z/</SPAN></FONT><A name="a moment"></A><FONT class=extract> tree is ready for use, let's take a moment to observe how the source layout is organized. Go to the root of the source tree and list its contents. The directories branching out from the root of the code tree are as follows:</FONT></P>
<DIV style="FONT-WEIGHT: bold">
<OL class=docList type=1>
<LI>
<DIV style="FONT-WEIGHT: normal">
<P class=docText><FONT class=extract><SPAN class=docEmphBoldItalic>arch.</SPAN> This directory contains architecture-specific files. You will see separate subdirectories under <SPAN class=docEmphasis>arch/</SPAN> for processors such as ARM, Motorola 68K, s390, MIPS, Alpha, SPARC, and IA64.</FONT></P></DIV>
<LI>
<DIV style="FONT-WEIGHT: normal">
<P class=docText><SPAN class=docEmphBoldItalic><FONT class=extract>block.</FONT></SPAN><A name="block storage"></A><FONT class=extract> This primarily contains the implementation of I/O scheduling algorithms for block storage devices.</FONT></P></DIV>
<LI>
<DIV style="FONT-WEIGHT: normal">
<P class=docText><SPAN class=docEmphBoldItalic><FONT class=extract>crypto.</FONT></SPAN><A name="the cryptographic"></A><FONT class=extract> This directory implements cipher operations and the cryptographic API, used, for example, by some WiFi device drivers for implementing encryption algorithms.</FONT></P></DIV>
<LI>
<DIV style="FONT-WEIGHT: normal">
<P class=docText><SPAN class=docEmphBoldItalic><FONT class=extract>Documentation.</FONT></SPAN><A name="This can"></A><FONT class=extract> This directory has brief descriptions of various kernel subsystems. This can be your first stop to dig for answers to kernel-related queries.</FONT></P></DIV>
<LI>
<DIV style="FONT-WEIGHT: normal">
<P class=docText><SPAN class=docEmphBoldItalic><FONT class=extract>drivers.</FONT></SPAN><A name="drivers for"></A><FONT class=extract> Device drivers for numerous device classes and peripheral controllers reside in this directory. The device classes include character, serial, <SPAN class=docEmphasis>Inter-Integrated Circuit</SPAN> (I<SUP>2</SUP>C), <SPAN class=docEmphasis>Personal Computer Memory Card International Association</SPAN> (PCMCIA), <SPAN class=docEmphasis>Peripheral Component Interconnect</SPAN> (PCI), <SPAN class=docEmphasis>Universal Serial Bus</SPAN> (USB), video, audio, block, <SPAN class=docEmphasis>Integrated Drive Electronics</SPAN> (IDE), <SPAN class=docEmphasis>Small Computer System Interface</SPAN> (SCSI), CD-ROM, network adapters, <SPAN class=docEmphasis>Asynchronous Transfer Mode</SPAN> (ATM), Bluetooth, and <SPAN class=docEmphasis>Memory Technology Devices</SPAN> (MTD). Each of these classes live in a separate subdirectory under <SPAN class=docEmphasis>drivers/</SPAN>. You will, for instance, find PCMCIA driver sources inside the <SPAN class=docEmphasis>drivers/pcmcia/</SPAN> directory and MTD drivers inside the <SPAN class=docEmphasis>drivers/mtd/</SPAN> directory. The subdirectories present under <SPAN class=docEmphasis>drivers/</SPAN> constitute the primary subjects for this book.</FONT></P></DIV>
<LI>
<DIV style="FONT-WEIGHT: normal">
<P class=docText><FONT class=extract><SPAN class=docEmphBoldItalic>fs.</SPAN> This directory contains the implementation of filesystems such as EXT3, EXT4, reiserfs, FAT, VFAT, sysfs, procfs, isofs, JFFS2, XFS, NTFS, and NFS.</FONT></P></DIV>
<LI>
<DIV style="FONT-WEIGHT: normal">
<P class=docText><FONT class=extract><SPAN class=docEmphBoldItalic>include.</SPAN> Kernel header files live here. Subdirectories prefixed with <SPAN class=docEmphasis>asm</SPAN> contain headers specific to the particular architecture. So the directory <SPAN class=docEmphasis>include/asm-x86/</SPAN> contains header files pertaining to the x86 architecture, whereas <SPAN class=docEmphasis>include/asm-arm/</SPAN> holds headers for the ARM architecture.</FONT></P></DIV>
<LI>
<DIV style="FONT-WEIGHT: normal">
<P class=docText><FONT class=extract><SPAN class=docEmphBoldItalic>init.</SPAN> This directory contains high-level initialization and startup code.</FONT></P></DIV>
<LI>
<DIV style="FONT-WEIGHT: normal">
<P class=docText><FONT class=extract><SPAN class=docEmphBoldItalic>ipc.</SPAN> This contains support for <SPAN class=docEmphasis>Inter-Process Communication</SPAN> (IPC) mechanisms such as message queues, semaphores, and shared memory.</FONT></P></DIV>
<LI>
<DIV style="FONT-WEIGHT: normal">
<P class=docText><FONT class=extract><SPAN class=docEmphBoldItalic>kernel.</SPAN> The architecture-independent portions of the base kernel can be found here.</FONT></P></DIV>
<LI>
<DIV style="FONT-WEIGHT: normal">
<P class=docText><FONT class=extract><SPAN class=docEmphBoldItalic>lib.</SPAN> </FONT><A name=iddle1195></A><A name=iddle1638></A><A name=iddle2590></A><A name=iddle2591></A><A name=iddle2736></A><A name=iddle2878></A><A name=iddle3020></A><A name=iddle3206></A><A name=iddle3221></A><A name=iddle3897></A><A name=iddle3912></A><A name=iddle4105></A><A name=iddle4564></A><FONT class=extract>Library routines such as generic <SPAN class=docEmphasis>kernel object</SPAN> (kobject) handlers and <SPAN class=docEmphasis>Cyclic Redundancy Code</SPAN> (CRC) computation functions stay here.</FONT></P></DIV>
<LI>
<DIV style="FONT-WEIGHT: normal">
<P class=docText><FONT class=extract><SPAN class=docEmphBoldItalic>mm.</SPAN> The memory management implementation lives here.</FONT></P></DIV>
<LI>
<DIV style="FONT-WEIGHT: normal">
<P class=docText><FONT class=extract><SPAN class=docEmphBoldItalic>net.</SPAN> Networking protocols reside under this directory. Protocols implemented include <SPAN class=docEmphasis>Internet Protocol version 4</SPAN> (IPv4), IPv6, <SPAN class=docEmphasis>Internetwork Protocol eXchange</SPAN> (IPX), Bluetooth, ATM, Infrared, <SPAN class=docEmphasis>Link Access Procedure Balanced</SPAN> (LAPB), and <SPAN class=docEmphasis>Logical Link Control</SPAN> (LLC).</FONT></P></DIV>
<LI>
<DIV style="FONT-WEIGHT: normal">
<P class=docText><FONT class=extract><SPAN class=docEmphBoldItalic>scripts.</SPAN> Scripts used during kernel build reside here.</FONT></P></DIV>
<LI>
<DIV style="FONT-WEIGHT: normal">
<P class=docText><FONT class=extract><SPAN class=docEmphBoldItalic>security.</SPAN> This directory contains the framework for security.</FONT></P></DIV>
<LI>
<DIV style="FONT-WEIGHT: normal">
<P class=docText><FONT class=extract><SPAN class=docEmphBoldItalic>sound.</SPAN> The Linux audio subsystem is based in this directory.</FONT></P></DIV>
<LI>
<DIV style="FONT-WEIGHT: normal">
<P class=docText><FONT class=extract><SPAN class=docEmphBoldItalic>usr.</SPAN> This currently contains the <SPAN class=docEmphasis>initramfs</SPAN> implementation.</FONT></P></DIV></LI></OL></DIV><A name=ch01sb03></A>
<P>
<TABLE cellSpacing=0 cellPadding=5 width="90%" border=1>
<TBODY>
<TR>
<TD>
<H2 class=docSidebarTitle><FONT class=extract>Unified x86 Architecture Tree</FONT></H2>
<P class=docText><A name="trees have"></A><FONT class=extract>Starting with the 2.6.24 kernel release, the i386 and the x86_64 (the 64-bit cousin of the 32-bit i386) architecture-specific trees have been unified into a common <SPAN class=docEmphasis>arch/x86/</SPAN></FONT><A name="If you"></A><FONT class=extract> directory. If you are using a pre-2.6.24 kernel, replace references to <SPAN class=docEmphasis>arch/x86/</SPAN></FONT><A name="book with"></A><FONT class=extract> in this book with <SPAN class=docEmphasis>arch/i386/</SPAN></FONT><A name="any occurrence"></A><FONT class=extract>. Similarly, change any occurrence of <SPAN class=docEmphasis>include/asm-x86/</SPAN> to <SPAN class=docEmphasis>include/asm-i386/</SPAN>. Some filenames within these directories have also changed.</FONT></P></TD></TR></TBODY></TABLE></P><BR>
<P class=docText><A name="and other"></A>Wading through these large directories in search of symbols and other code elements can be a tough task. The tools in <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch01lev1sec6.html#ch01tab01">Table 1.1</A><A name="navigate the"></A> are worthy aids as you navigate the kernel source tree.</P><A name=ch01tab01></A>
<P>
<TABLE cellSpacing=0 cellPadding=5 rules=groups frame=hsides>
<CAPTION>
<H5 class=docTableTitle>Table 1.1. Tools That Aid Source Tree Navigation</H5></CAPTION>
<COLGROUP span=2 align=left>
<COL width=150>
<COL width=400></COLGROUP>
<THEAD>
<TR>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left>Tool</TH>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left>Description</TH></TR></THEAD>
<TBODY>
<TR>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>lxr</FONT></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>The Linux cross-referencer, lxr, downloadable from </FONT><A class=docLink href="http://lxr.sourceforge.net/" target=_blank><FONT class=extract>http://lxr.sourceforge.net/</FONT></A><A name="browser by"></A><FONT class=extract>, lets you traverse the kernel tree using a web browser by providing hyperlinks to connect kernel symbols with their definitions and uses.</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left>cscope</TD>
<TD class=docTableCell vAlign=top align=left>cscope, hosted at <A class=docLink href="http://cscope.sourceforge.net/" target=_blank>http://cscope.sourceforge.net/</A><A name="files in"></A>, builds a symbolic database from all files in a source tree, so you can quickly locate declarations, definitions, regular expressions, and more. Cscope might not be as versatile as lxr, but it gives you the flexibility of using the search features of your favorite text editor rather than a browser. From the root of your kernel tree, issue the <TT>cscope -qkRv</TT> command to build the cross-reference database. The <TT>-q</TT><A name="faster at"></A> option generates more indexing information, so searches become noticeably faster at the expense of extra initial startup time. The <TT>&#37413;&#25606;</TT><A name="requests cscope"></A> option requests cscope to tune its behavior to suit kernel sources, <TT>-R</TT> asks for recursive subdirectory traversal, and <TT>&#37413;&#25623;</TT><A name="from the"></A> appeals for verbose messages. You can obtain the detailed invocation syntax from the man page.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left>ctags/etags</TD>
<TD class=docTableCell vAlign=top align=left><A name="The ctags"></A>The ctags utility, downloadable from <A class=docLink href="http://ctags.sourceforge.net/" target=_blank>http://ctags.sourceforge.net/</A><A name="for many"></A>, generates cross-reference tags for many languages, so you can locate symbol and function definitions in a source tree from within an editor such as vi. Do <TT>make tags</TT><A name="the root"></A> from the root of your kernel tree to ctag all source files. The etags utility generates similar indexing information understood by the emacs editor. Issue <TT>make TAGS</TT> to etag your kernel source files.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left>Utilities</TD>
<TD class=docTableCell vAlign=top align=left>Tools such as grep, find, sdiff, strace, od, dd, make, tar, file, and objdump.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>GCC options</FONT></TD>
<TD class=docTableCell vAlign=top align=left><A name="using the"></A><FONT class=extract>You may ask GCC to generate preprocessed source code using the <TT>-E</TT></FONT><A name="expansions and"></A><FONT class=extract> option. Preprocessed code contains header file expansions and reduces the need to hop-skip through nested include files to expand multiple levels of macros. Here is a usage example to preprocess <SPAN class=docEmphasis>drivers/char/mydrv.c</SPAN> and produce expanded output in <SPAN class=docEmphasis>mydrv.i:</SPAN> </FONT>
<DIV class=docText><PRE><FONT class=extract><SPAN class=docEmphStrong>bash&gt; gcc -E drivers/char/mydrv.c -D__KERNEL__ -Iinclude</SPAN>
<SPAN class=docEmphStrong>-Iinclude/asm-x86/mach-default &gt; mydrv.i</SPAN></FONT></PRE></DIV><BR>
<P class=docText><FONT class=extract>The include paths specified using the <TT>-I</TT> option depend on the header files included by your code.</FONT></P><FONT class=extract>GCC generates assembly listings if you use the <TT>-S</TT> option. To generate an assembly listing in <SPAN class=docEmphasis>mydrv.s</SPAN> for <SPAN class=docEmphasis>drivers/char/mydrv.c</SPAN>, do this: </FONT>
<DIV class=docText><PRE><FONT class=extract><SPAN class=docEmphStrong>bash&gt; gcc -S drivers/char/mydrv.c -D__KERNEL__ -Iinclude</SPAN>
<SPAN class=docEmphStrong>-Ianother/include/path</SPAN></FONT></PRE></DIV></TD></TR></TBODY></TABLE>