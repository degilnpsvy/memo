<H3 id=-100000 class=docSection1Title>Kernel Mode and User Mode</H3>
<P class=docText><A name="Some operating"></A>Some operating systems, such as MS-DOS, always execute in a single CPU mode, but UNIX-like operating systems use dual modes to effectively implement time-sharing. On a Linux machine, the CPU is either in a trusted <SPAN class=docEmphasis>kernel mode</SPAN><A name="a restricted"></A> or in a restricted <SPAN class=docEmphasis>user mode.</SPAN><A name="user processes"></A> All user processes execute in user mode, whereas the kernel itself executes in kernel mode.</P>
<P class=docText><A name="processor instruction"></A>Kernel mode code has unrestricted access to the entire processor instruction set and to the full memory and I/O space. If a user mode process needs these privileges, it has to channel requests through device drivers or other kernel mode code via system calls. <FONT class=extract>User mode code is allowed to page fault, however, whereas kernel mode code isn't.</FONT></P>
<P class=docText><A name="mode processes"></A><FONT class=extract>In 2.4 and earlier kernels, only user mode processes could be context switched out and replaced by other processes. Kernel mode code could monopolize the processor until either</FONT></P>
<UL>
<LI>
<P class=docList><FONT class=extract>It voluntarily relinquished the CPU.</FONT></P></LI></UL>
<P class=docText><FONT class=extract>or</FONT></P>
<UL>
<LI>
<P class=docList><FONT class=extract>An interrupt or an exception occurred.</FONT></P></LI></UL>
<P class=docText><A name="kernel mode"></A><FONT class=extract>With the introduction of kernel preemption in the 2.6 release, most kernel mode code can also be context switched.</FONT>