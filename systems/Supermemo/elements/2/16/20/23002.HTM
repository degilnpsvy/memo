<H3 id=-100000 class=docSection1Title>Building the Kernel</H3>
<P class=docText><A name=iddle1341></A><A name=iddle1640></A><A name=iddle2002></A><A name=iddle2137></A><A name=iddle2554></A><A name=iddle3635></A><A name=iddle4145></A><A name="Now that"></A>Now that you have an idea of the source tree layout, let's make a trivial code change, compile, and get it running. Go to the top-level <SPAN class=docEmphasis>init/</SPAN><A name="venture to"></A> directory and venture to make a small code change to the initialization file <SPAN class=docEmphasis>main.c</SPAN><A name="a print"></A>. Add a print statement to the beginning of the function, <TT>start_kernel()</TT>, declaring your love for polar bears:</P>
<DIV class=docText><PRE>asmlinkage void __init start_kernel(void)
{
    char *command_line;
    extern struct kernel_param __start___param[],
           __stop___param[];

<SPAN class=docEmphStrong>+   printk("Penguins are cute, but so are polar bears\n");</SPAN>

    /* ... */

    rest_init();
}</PRE></DIV><BR>
<P class=docText><A name=iddle2893></A><A name="the root"></A>You're now ready to kick off the build process. Go to the root of the source tree and start with a clean slate:</P>
<DIV class=docText><PRE><SPAN class=docEmphStrong>bash&gt; cd /usr/src/linux-X.Y.Z/</SPAN>
<SPAN class=docEmphStrong>bash&gt; make clean</SPAN></PRE></DIV><BR>
<P class=docText><A name="you pick"></A>Configure the kernel. This is when you pick and choose the pieces that form part of the operating system. You may specify whether each desired component is to be statically or dynamically linked to the kernel:</P>
<DIV class=docText><PRE><SPAN class=docEmphStrong>bash&gt; make menuconfig</SPAN></PRE></DIV><BR>
<P class=docText><TT>menuconfig</TT> is a text interface to the kernel configuration menu. Use <TT>make xconfig</TT><A name="choose is"></A> to get a graphical interface. The configuration information that you choose is saved in a file named <SPAN class=docEmphasis>.config</SPAN><A name="If you"></A> in the root of your source tree. If you don't want to weave the configuration from scratch, use the file <SPAN class=docEmphasis>arch/your-arch/defconfig</SPAN> (or <SPAN class=docEmphasis>arch/your-arch/configs/your-machine_defconfig</SPAN><A name="as the"></A> if there are several supported platforms for your architecture) as the starting point. So, if you are compiling the kernel for the 32-bit x86 architecture, do this:</P>
<DIV class=docText><PRE><SPAN class=docEmphStrong>bash&gt; cp arch/x86/configs/i386_defconfig .config</SPAN></PRE></DIV><BR>
<P class=docText><A name="the kernel"></A>Compile the kernel and generate a compressed boot image:</P>
<DIV class=docText><PRE><SPAN class=docEmphStrong>bash&gt; make bzImage</SPAN></PRE></DIV><BR>
<P class=docText>The kernel image is produced in <SPAN class=docEmphasis>arch/x86/boot/bzImage.</SPAN> Update your boot partition:</P>
<DIV class=docText><PRE><SPAN class=docEmphStrong>bash&gt; cp arch/x86/boot/bzImage /boot/vmlinuz</SPAN></PRE></DIV><BR>
<P class=docText><A name="of the"></A>You might need to alert your bootloader about the arrival of the new boot image. If you are using the GRUB bootloader, it figures this out automatically; but if you are using LILO, raise a flag:</P>
<DIV class=docText><PRE><SPAN class=docEmphStrong>bash&gt; /sbin/lilo</SPAN>
Added linux *</PRE></DIV><BR>
<P class=docText><A name="restart the"></A>Finally, restart the machine and boot in to your new kernel:</P>
<DIV class=docText><PRE><SPAN class=docEmphStrong>bash&gt; reboot</SPAN></PRE></DIV><BR>
<P class=docText><A name="message in"></A>The first message in the boot sequence launches your campaign for polar bears.