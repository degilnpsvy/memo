1. User's View of /dev/fb*<BR>-------------------------- 
<P></P>
<P><FONT class=extract>From the user's point of view, the frame buffer device looks just like any<BR>other device in /dev. It's a character device using major 29; the minor<BR>specifies the frame buffer number.</FONT></P>
<P>By convention, the following device nodes are used (numbers indicate the device<BR>minor numbers):</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0 = /dev/fb0&nbsp;First frame buffer<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1 = /dev/fb1&nbsp;Second frame buffer<BR>&nbsp;&nbsp; ...<BR>&nbsp;&nbsp;&nbsp;&nbsp; 31 = /dev/fb31&nbsp;32nd frame buffer</P>
<P>For backwards compatibility, you may want to create the following symbolic<BR>links:</P>
<P>&nbsp;&nbsp;&nbsp; /dev/fb0current -&gt; fb0<BR>&nbsp;&nbsp;&nbsp; /dev/fb1current -&gt; fb1</P>
<P>and so on...</P>
<P>The frame buffer devices are also `normal' memory devices, this means, you can<BR>read and write their contents. You can, for example, make a screen snapshot by</P>
<P>&nbsp; cp /dev/fb0 myfile</P>
<P>There also can be more than one frame buffer at a time, e.g. if you have a<BR>graphics card in addition to the built-in hardware. The corresponding frame<BR>buffer devices (/dev/fb0 and /dev/fb1 etc.) work independently.</P>
<P><FONT class=extract>Application software that uses the frame buffer device (e.g. the X server) will<BR>use /dev/fb0 by default (older software uses /dev/fb0current). You can specify<BR>an alternative frame buffer device by setting the environment variable<BR>$FRAMEBUFFER to the path name of a frame buffer device, e.g. (for sh/bash<BR>users):</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; export FRAMEBUFFER=/dev/fb1</FONT></P>
<P><FONT class=extract>or (for csh users):</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; setenv FRAMEBUFFER /dev/fb1</FONT></P>
<P><FONT class=extract>After this the X server will use the second frame buffer.</FONT>