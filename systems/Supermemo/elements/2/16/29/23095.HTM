<H3 id=-100000 class=docSection1Title>Debugging</H3>
<P class=docText><A name="The virtual"></A>The virtual frame buffer driver, enabled by setting <TT>CONFIG_FB_VIRTUAL</TT><A name="configuration menu"></A> in the configuration menu, operates over a pseudo graphics adapter. You can use this driver's assistance to debug the frame buffer subsystem.</P>
<P class=docText><A name="frame buffer"></A>Some frame buffer drivers, such as <SPAN class=docEmphasis>intelfb</SPAN><A name="to generate"></A>, offer an additional configuration option that you may enable to generate driver-specific debug information.</P>
<P class=docText><A name="frame buffer"></A>To discuss issues related to frame buffer drivers, subscribe to the linux-fbdev-devel mailing list, <A class=docLink href="https://lists.sourceforge.net/lists/listinfo/linux-fbdev-devel/" target=_blank>https://lists.sourceforge.net/lists/listinfo/linux-fbdev-devel/</A>.</P>
<P class=docText><A name="you can"></A>Debugging console drivers is not an easy job because you can't call <TT>printk()</TT><A name="spare console"></A> from inside the driver. If you have a spare console device such as a serial port, you can implement a UART/tty form factor of your console driver first (as we did in <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch06.html#ch06">Chapter 6</A><A name="by operating"></A> for the USB_UART device used in this chapter) and debug that driver by operating on <SPAN class=docEmphasis>/dev/tty</SPAN><A name="to the"></A> and printing messages to the spare console. You can then repackage the debugged code regions in the form of a console driver.