<H3 id=-100000 class=docSection1Title>Looking at the Sources</H3>
<P class=docText><A name="Most input"></A>Most input event drivers are present in the <SPAN class=docEmphasis>drivers/input/</SPAN><A name="event driver"></A> directory. The keyboard event driver, however, lives in <SPAN class=docEmphasis>drivers/char/keyboard.c</SPAN><A name="connected to"></A>, because it's connected to virtual terminals and not to device nodes under <SPAN class=docEmphasis>/dev/input/</SPAN>.</P>
<P class=docText><A name="for legacy"></A>You can find input device drivers in several places. Drivers for legacy keyboards, mice, and joysticks, reside in separate subdirectories under <SPAN class=docEmphasis>drivers/input/.</SPAN> Bluetooth input drivers live in <SPAN class=docEmphasis>net/bluetooth/hidp/.</SPAN><A name="drivers in"></A> You can also find input drivers in regions such as <SPAN class=docEmphasis>drivers/hwmon/</SPAN> and <SPAN class=docEmphasis>drivers/media/video/.</SPAN> Event types, codes, and values, are defined in <SPAN class=docEmphasis>include/linux/input.h</SPAN>.</P>
<P class=docText>The serio subsystem stays in <SPAN class=docEmphasis>drivers/input/serio/.</SPAN> Sources for the serport line discipline is in <SPAN class=docEmphasis>drivers/input/serio/serport.c. Documentation/input/</SPAN> contains more details on different input interfaces.</P>
<P class=docText><A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch07lev1sec4.html#ch07tab02">Table 7.1</A><A name="and their"></A> summarizes the main data structures used in this chapter and their location inside the source tree. <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch07lev1sec4.html#ch07tab03">Table 7.2</A><A name="that you"></A> lists the main kernel programming interfaces that you used in this chapter along with the location of their definitions.</P><A name=ch07tab02></A>
<P>
<TABLE cellSpacing=0 cellPadding=5 rules=groups frame=hsides>
<CAPTION>
<H5 class=docTableTitle>Table 7.1. Summary of Data Structures</H5></CAPTION>
<COLGROUP span=3 align=left>
<COL width=100>
<COL width=250>
<COL width=200></COLGROUP>
<THEAD>
<TR>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left>Data Structure</TH>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left>Location</TH>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left>Description</TH></TR></THEAD>
<TBODY>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>input_event</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/input.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Each event packet produced by evdev has this format.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>input_dev</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/input.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Representation of an input device.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>input_handler</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/serial_core.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Contains the entry points supported by an event driver.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>psmouse_protocol</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>drivers/input/mouse/psmouse-base.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Information about a supported PS/2 mouse protocol driver.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>psmouse</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>drivers/input/mouse/psmouse.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Methods supported by a PS/2 mouse driver.</TD></TR></TBODY></TABLE></P><BR>
<P class=docText></P><A name=ch07tab03></A>
<P>
<TABLE cellSpacing=0 cellPadding=5 rules=groups frame=hsides>
<CAPTION>
<H5 class=docTableTitle>Table 7.2. Summary of Kernel Programming Interfaces</H5></CAPTION>
<COLGROUP span=3 align=left>
<COL width=175>
<COL width=175>
<COL width=200></COLGROUP>
<THEAD>
<TR>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left><A name=iddle2376></A><A name=iddle2378></A><A name=iddle2379></A><A name=iddle2381></A><A name=iddle2382></A><A name=iddle2384></A><A name=iddle2385></A><A name=iddle3578></A><A name=iddle3580></A><A name=iddle4198></A><A name=iddle4199></A><A name=iddle4327></A>Kernel Interface</TH>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left>Location</TH>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left>Description</TH></TR></THEAD>
<TBODY>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>input_register_device()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>drivers/input/input.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Registers a device with the input core</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>input_unregister_device()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>drivers/input/input.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Removes a device from the input core</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>input_report_rel()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/input.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Generates a relative movement in a specified direction</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>input_report_abs()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/input.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Generates an absolute movement in a specified direction</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>input_report_key()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/input.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Generates a key or a button press</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>input_sync()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/input.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="generated events"></A>Indicates that the input subsystem can collect previously generated events into an evdev packet and send it to user space via <SPAN class=docEmphasis>/dev/input/inputX</SPAN></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>input_register_handler()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>drivers/input/input.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="a custom"></A>Registers a custom event driver</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>sysfs_create_group()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>fs/sysfs/group.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Creates a sysfs node group with specified attributes</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>sysfs_remove_group()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>fs/sysfs/group.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Removes a sysfs group created using <TT>sysfs_create_group()</TT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>tty_insert_flip_char()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/tty_flip.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Sends a character to the line discipline layer</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>platform_device_register_simple()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>drivers/base/platform.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Creates a simple platform device</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>platform_device_unregister()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>drivers/base/platform.c</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Unregisters a platform device</TD></TR></TBODY></TABLE>