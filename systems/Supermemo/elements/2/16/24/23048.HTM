<H3 id=-100000 class=docSection1Title>I<SUP>2</SUP>C Core</H3>
<P class=docText><A name="The I"></A>The I<SUP>2</SUP><A name="is a"></A>C core is a code base consisting of routines and data structures available to host adapter drivers and client drivers. Common code in the core makes the driver developer's job easier. The core also provides a level of indirection that renders client drivers independent of the host adapter, allowing them to work unchanged even if the client device is used on a board that has a different I<SUP>2</SUP><A name="host adapter"></A>C host adapter. This philosophy of a core layer and its attendant benefits is also relevant for many other device driver classes in the kernel, such as PCMCIA, PCI, and USB.</P>
<P class=docText>In addition to the core, the kernel I<SUP>2</SUP>C infrastructure consists of the following:</P>
<UL>
<LI>
<P class=docList>Device drivers for I<SUP>2</SUP><A name="drivers and"></A>C host adapters. They fall in the realm of bus drivers and usually consist of an <SPAN class=docEmphasis>adapter</SPAN> driver and an <SPAN class=docEmphasis>algorithm</SPAN><A name="to talk"></A> driver. The former uses the latter to talk to the I<SUP>2</SUP>C bus.</P></LI>
<LI>
<P class=docList>Device drivers for I<SUP>2</SUP>C client devices.</P></LI>
<LI>
<P class=docList>i2c-dev, which allows the implementation of user mode I<SUP>2</SUP>C client drivers.</P></LI></UL>
<P class=docText><A name="adapter or"></A>You are more likely to implement client drivers than adapter or algorithm drivers because there are a lot more I<SUP>2</SUP>C devices than there are I<SUP>2</SUP><A name="to client"></A>C host adapters. So, we will confine ourselves to client drivers in this chapter.</P>
<P class=docText><A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch08lev1sec2.html#ch08fig02">Figure 8.2</A> illustrates the Linux I<SUP>2</SUP>C subsystem. It shows I<SUP>2</SUP><A name="and a"></A>C kernel modules talking to a host adapter and a client device on an I<SUP>2</SUP>C bus.</P><A name=ch08fig02></A>
<P>
<CENTER>
<H5 class=docFigureTitle><A name="The Linux"></A>Figure 8.2. The Linux I<SUP>2</SUP>C subsystem.</H5>
<P class=docText>
<DIV class=st1><A href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/images/YTNyaWQ3ODBzOS9jL2VnbXRwNjQ5NWEzMi9yZzE1ZmZpMHBhdGxfMC8yaGlnOGNzZ2ku.jpg" target=_blank>[View full size image]</A></DIV><IMG border=0 alt="" src="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/images/YTNyaWQ3ODBzOS9jL2VnbXRwNjQ5NWEzMi9yZzE1ZmkwcGdmaS4wLzJoaWc4c2M-.jpg" width=500 height=401>
<P></P></CENTER>
<P></P><BR>
<P class=docText><A name=iddle1349></A><A name=iddle2251></A><A name=iddle4303></A>Because SMBus is a subset of I<SUP>2</SUP><A name="a driver"></A>C, using only SMBus commands to talk to your device yields a driver that works with both SMBus and I<SUP>2</SUP><A name="C adapters"></A>C adapters. <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch08lev1sec2.html#ch08tab01">Table 8.1</A><A name="data transfer"></A> lists the SMBus-compatible data transfer routines provided by the I<SUP>2</SUP>C core.</P><A name=ch08tab01></A>
<P>
<TABLE cellSpacing=0 cellPadding=5 rules=groups frame=hsides>
<CAPTION>
<H5 class=docTableTitle><A name="Data Access"></A>Table 8.1. SMBus-Compatible Data Access Functions Provided by the I<SUP>2</SUP>C Core</H5></CAPTION>
<COLGROUP span=2 align=left>
<COL width=250>
<COL width=300></COLGROUP>
<THEAD>
<TR>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left>Function</TH>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left>Purpose</TH></TR></THEAD>
<TBODY>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>i2c_smbus_read_byte()</TT></TD>
<TD class=docTableCell vAlign=top align=left><A name="a location"></A>Reads a single byte from the device without specifying a location offset. Uses the same offset as the previously issued command.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>i2c_smbus_write_byte()</TT></TD>
<TD class=docTableCell vAlign=top align=left><A name="the device"></A>Sends a single byte to the device at the same memory offset as the previously issued command.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>i2c_smbus_write_quick()</TT></TD>
<TD class=docTableCell vAlign=top align=left><A name="the Rd"></A>Sends a single bit to the device (in place of the Rd/Wr bit shown in <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch08lev1sec3.html#ch08ex01">Listing 8.1</A>).</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>i2c_smbus_read_byte_data()</TT></TD>
<TD class=docTableCell vAlign=top align=left><A name="device at"></A>Reads a single byte from the device at a specified offset.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>i2c_smbus_write_byte_data()</TT></TD>
<TD class=docTableCell vAlign=top align=left><A name="a specified"></A>Sends a single byte to the device at a specified offset.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>i2c_smbus_read_word_data()</TT></TD>
<TD class=docTableCell vAlign=top align=left><A name="bytes from"></A>Reads 2 bytes from the specified offset.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>i2c_smbus_write_word_data()</TT></TD>
<TD class=docTableCell vAlign=top align=left>Sends 2 bytes to the specified offset.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>i2c_smbus_read_block_data()</TT></TD>
<TD class=docTableCell vAlign=top align=left>Reads a block of data from the specified offset.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>i2c_smbus_write_block_data()</TT></TD>
<TD class=docTableCell vAlign=top align=left>Sends a block of data (&lt;= 32 bytes) to the specified offset.</TD></TR></TBODY></TABLE>