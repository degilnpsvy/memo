<H3 id=-100000 class=docSection1Title>Debugging</H3>
<P class=docText><A name="You can"></A>You can use the <SPAN class=docEmphasis>evbug</SPAN><A name="a debugging"></A> module as a debugging aid if you're developing an input driver. It dumps the (<SPAN class=docEmphasis>type</SPAN>, <SPAN class=docEmphasis>code</SPAN>, <SPAN class=docEmphasis>value</SPAN>) tuple (see <TT>struct input_event</TT><A name="corresponding to"></A> defined previously) corresponding to events generated by the input subsystem. <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch07lev1sec3.html#ch07tab01">Figure 7.4</A> contains data captured by evbug while operating some input devices:</P><A name=ch07tab01></A>
<H5 id=title-ID0EU6OM class=docExampleTitle>Figure 7.4. Evbug output.</H5>
<P>
<TABLE cellSpacing=0 cellPadding=5 border=1>
<TBODY>
<TR>
<TD>
<DIV class=codeSegmentsExpansionLinks>Code View:</DIV><PRE><SPAN class=docEmphStrong>/* Touchpad Movement */</SPAN>
evbug.c Event. Dev: isa0060/serio1/input0: Type: 3, Code: 28, Value: 0
evbug.c Event. Dev: isa0060/serio1/input0: Type: 1, Code: 325, Value: 0
evbug.c Event. Dev: isa0060/serio1/input0: Type: 0, Code: 0, Value: 0

<SPAN class=docEmphStrong>/* Trackpoint Movement */</SPAN>
evbug.c Event. Dev: synaptics-pt/serio0/input0: Type: 2, Code: 0, Value: -1
evbug.c Event. Dev: synaptics-pt/serio0/input0: Type: 2, Code: 1, Value: -2
evbug.c Event. Dev: synaptics-pt/serio0/input0: Type: 0, Code: 0, Value: 0

<SPAN class=docEmphStrong>/* USB Mouse Movement */</SPAN>
evbug.c Event. Dev: usb-0000:00:1d.1-2/input0: Type: 2, Code: 1, Value: -1
evbug.c Event. Dev: usb-0000:00:1d.1-2/input0: Type: 0, Code: 0, Value: 0
evbug.c Event. Dev: usb-0000:00:1d.1-2/input0: Type: 2, Code: 0, Value: 1
evbug.c Event. Dev: usb-0000:00:1d.1-2/input0: Type: 0, Code: 0, Value: 0

<SPAN class=docEmphStrong>/* PS/2 Keyboard keypress 'a' */</SPAN>
evbug.c Event. Dev: isa0060/serio0/input0: Type: 4, Code: 4, Value: 30
evbug.c Event. Dev: isa0060/serio0/input0: Type: 1, Code: 30, Value: 0
evbug.c Event. Dev: isa0060/serio0/input0: Type: 0, Code: 0, Value: 0

<SPAN class=docEmphStrong>/* USB keyboard keypress 'a' */</SPAN>
evbug.c Event. Dev: usb-0000:00:1d.1-1/input0: Type: 1, Code: 30, Value: 1
evbug.c Event. Dev: usb-0000:00:1d.1-1/input0: Type: 0, Code: 0, Value: 0
evbug.c Event. Dev: usb-0000:00:1d.1-2/input0: Type: 1, Code: 30, Value: 0
evbug.c Event. Dev: usb-0000:00:1d.1-2/input0: Type: 0, Code: 0, Value: 0

					  </PRE><BR></TD></TR></TBODY></TABLE></P>
<P class=docText>To make sense of the dump in <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch07lev1sec3.html#ch07tab01">Figure 7.4</A>, remember that touchpads generate absolute coordinates (<TT>EV_ABS</TT>) or event type <TT>0x03</TT>, trackpoints produce relative coordinates (<TT>EV_REL</TT>) or event type <TT>0x02</TT>, and keyboards emit key events (<TT>EV_KEY</TT>) or event type <A name=iddle2369></A><A name=iddle2371></A><A name=iddle2373></A><A name=iddle2406></A><A name=iddle2407></A><A name=iddle3680></A><A name=iddle3681></A><A name=iddle4089></A><TT>0x01</TT>. Event type <TT>0x0</TT> corresponds to an invocation of <TT>input_sync()</TT>, which does the following:</P>
<DIV class=docText><PRE>input_event(dev, EV_SYN, SYN_REPORT, 0);</PRE></DIV><BR>
<P class=docText>This translates to a (<SPAN class=docEmphasis>type, code, value</SPAN>) tuple of (<TT>0x0</TT>, <TT>0x0</TT>, <TT>0x0</TT>) and completes each input event.