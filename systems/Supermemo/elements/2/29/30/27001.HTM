/**<BR>&nbsp;* <SPAN class=cloze>[...]</SPAN> - create a struct kset dynamically and add it to sysfs<BR>&nbsp;*<BR>&nbsp;* @name: the name for the kset<BR>&nbsp;* @uevent_ops: a struct kset_uevent_ops for the kset<BR>&nbsp;* @parent_kobj: the parent kobject of this kset, if any.<BR>&nbsp;*<BR>&nbsp;* This function creates a kset structure dynamically and registers it<BR>&nbsp;* with sysfs.&nbsp; When you are finished with this structure, call<BR>&nbsp;* kset_unregister() and the structure will be dynamically freed when it<BR>&nbsp;* is no longer being used.<BR>&nbsp;*<BR>&nbsp;* If the kset was not able to be created, NULL will be returned.<BR>&nbsp;*/<BR>struct kset *<SPAN class=cloze><FONT color=#000000>[...]</FONT></SPAN>(const char *name,<BR>&nbsp;&nbsp;&nbsp;&nbsp; const struct kset_uevent_ops *uevent_ops,<BR>&nbsp;&nbsp;&nbsp;&nbsp; struct kobject *parent_kobj)<BR>{<BR>&nbsp;struct kset *kset;<BR>&nbsp;int error; 
<P></P>
<P>&nbsp;kset = kset_create(name, uevent_ops, parent_kobj);<BR>&nbsp;if (!kset)<BR>&nbsp;&nbsp;return NULL;<BR>&nbsp;error = kset_register(kset);<BR>&nbsp;if (error) {<BR>&nbsp;&nbsp;kfree(kset);<BR>&nbsp;&nbsp;return NULL;<BR>&nbsp;}<BR>&nbsp;return kset;<BR>}<BR>EXPORT_SYMBOL_GPL(<SPAN class=cloze><FONT color=#000000>[...]</FONT></SPAN>);