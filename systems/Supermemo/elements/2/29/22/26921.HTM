# qemu:include/qemu/compiler.h
<P></P>
<P>/* public domain */</P>
<P>#ifndef COMPILER_H<BR>#define COMPILER_H</P>
<P>#include "config-host.h"</P>
<P>/*----------------------------------------------------------------------------<BR>| The macro QEMU_GNUC_PREREQ tests for minimum version of the GNU C compiler.<BR>| The code is a copy of SOFTFLOAT_GNUC_PREREQ, see softfloat-macros.h.<BR>*----------------------------------------------------------------------------*/<BR>#if defined(__GNUC__) &amp;&amp; defined(__GNUC_MINOR__)<BR># define QEMU_GNUC_PREREQ(maj, min) \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ((__GNUC__ &lt;&lt; 16) + __GNUC_MINOR__ &gt;= ((maj) &lt;&lt; 16) + (min))<BR>#else<BR># define QEMU_GNUC_PREREQ(maj, min) 0<BR>#endif</P>
<P>#define QEMU_NORETURN __attribute__ ((__noreturn__))</P>
<P>#if QEMU_GNUC_PREREQ(3, 4)<BR>#define QEMU_WARN_UNUSED_RESULT __attribute__((warn_unused_result))<BR>#else<BR>#define QEMU_WARN_UNUSED_RESULT<BR>#endif</P>
<P>#if QEMU_GNUC_PREREQ(4, 0)<BR>#define QEMU_SENTINEL __attribute__((sentinel))<BR>#else<BR>#define QEMU_SENTINEL<BR>#endif</P>
<P>#if QEMU_GNUC_PREREQ(4, 3)<BR>#define QEMU_ARTIFICIAL __attribute__((always_inline, artificial))<BR>#else<BR>#define QEMU_ARTIFICIAL<BR>#endif</P>
<P>#if defined(_WIN32)<BR># define QEMU_PACKED __attribute__((gcc_struct, packed))<BR>#else<BR># define QEMU_PACKED __attribute__((packed))<BR>#endif</P>
<P>#ifndef glue<BR>#define xglue(x, y) x ## y<BR>#define glue(x, y) xglue(x, y)<BR>#define stringify(s)&nbsp;tostring(s)<BR>#define tostring(s)&nbsp;#s<BR>#endif</P>
<P>#ifndef likely<BR>#if __GNUC__ &lt; 3<BR>#define __builtin_expect(x, n) (x)<BR>#endif</P>
<P>#define likely(x)&nbsp;&nbsp; __builtin_expect(!!(x), 1)<BR>#define unlikely(x)&nbsp;&nbsp; __builtin_expect(!!(x), 0)<BR>#endif</P>
<P>#ifndef container_of<BR>#define container_of(ptr, type, member) ({&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const typeof(((type *) 0)-&gt;member) *__mptr = (ptr);&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (type *) ((char *) __mptr - offsetof(type, member));})<BR>#endif</P>
<P>/* Convert from a base type to a parent type, with compile time checking.&nbsp; */<BR>#ifdef __GNUC__<BR>#define DO_UPCAST(type, field, dev) ( __extension__ ( { \<BR>&nbsp;&nbsp;&nbsp; char __attribute__((unused)) offset_must_be_zero[ \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -offsetof(type, field)]; \<BR>&nbsp;&nbsp;&nbsp; container_of(dev, type, field);}))<BR>#else<BR>#define DO_UPCAST(type, field, dev) container_of(dev, type, field)<BR>#endif</P>
<P>#define typeof_field(type, field) typeof(((type *)0)-&gt;field)<BR>#define type_check(t1,t2) ((t1*)0 - (t2*)0)</P>
<P>#ifndef always_inline<BR>#if !((__GNUC__ &lt; 3) || defined(__APPLE__))<BR>#ifdef __OPTIMIZE__<BR>#undef inline<BR>#define inline __attribute__ (( always_inline )) __inline__<BR>#endif<BR>#endif<BR>#else<BR>#undef inline<BR>#define inline always_inline<BR>#endif</P>
<P>#define QEMU_BUILD_BUG_ON(x) \<BR>&nbsp;&nbsp;&nbsp; typedef char glue(qemu_build_bug_on__,__LINE__)[(x)?-1:1] __attribute__((unused));</P>
<P>#if defined __GNUC__<BR># if !QEMU_GNUC_PREREQ(4, 4)<BR>&nbsp;&nbsp; /* gcc versions before 4.4.x don't support gnu_printf, so use printf. */<BR>#&nbsp; define GCC_FMT_ATTR(n, m) __attribute__((format(printf, n, m)))<BR># else<BR>&nbsp;&nbsp; /* Use gnu_printf when supported (qemu uses standard format strings). */<BR>#&nbsp; define GCC_FMT_ATTR(n, m) __attribute__((format(gnu_printf, n, m)))<BR>#&nbsp; if defined(_WIN32)<BR>&nbsp;&nbsp;&nbsp; /* Map __printf__ to __gnu_printf__ because we want standard format strings<BR>&nbsp;&nbsp;&nbsp;&nbsp; * even when MinGW or GLib include files use __printf__. */<BR>#&nbsp;&nbsp; define __printf__ __gnu_printf__<BR>#&nbsp; endif<BR># endif<BR>#else<BR>#define GCC_FMT_ATTR(n, m)<BR>#endif</P>
<P>#ifndef __maybe_unused<BR># define __maybe_unused __attribute__((unused))<BR>#endif</P>
<P>#endif /* COMPILER_H */