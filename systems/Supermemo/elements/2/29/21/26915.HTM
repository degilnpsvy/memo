# qemu:tcg/i386/tcg_target.h 
<P></P>
<P>/*<BR>&nbsp;* Tiny Code Generator for QEMU<BR>&nbsp;*<BR>&nbsp;* Copyright (c) 2008 Fabrice Bellard<BR>&nbsp;*<BR>&nbsp;* Permission is hereby granted, free of charge, to any person obtaining a copy<BR>&nbsp;* of this software and associated documentation files (the "Software"), to deal<BR>&nbsp;* in the Software without restriction, including without limitation the rights<BR>&nbsp;* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell<BR>&nbsp;* copies of the Software, and to permit persons to whom the Software is<BR>&nbsp;* furnished to do so, subject to the following conditions:<BR>&nbsp;*<BR>&nbsp;* The above copyright notice and this permission notice shall be included in<BR>&nbsp;* all copies or substantial portions of the Software.<BR>&nbsp;*<BR>&nbsp;* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR<BR>&nbsp;* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,<BR>&nbsp;* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL<BR>&nbsp;* THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER<BR>&nbsp;* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,<BR>&nbsp;* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN<BR>&nbsp;* THE SOFTWARE.<BR>&nbsp;*/<BR>#ifndef TCG_TARGET_I386 <BR>#define TCG_TARGET_I386 1</P>
<P></P>
<P>#define TCG_TARGET_INSN_UNIT_SIZE&nbsp; 1<BR>#define TCG_TARGET_TLB_DISPLACEMENT_BITS 31</P>
<P>#ifdef __x86_64__<BR># define TCG_TARGET_REG_BITS&nbsp; 64<BR># define TCG_TARGET_NB_REGS&nbsp;&nbsp; 16<BR>#else<BR># define TCG_TARGET_REG_BITS&nbsp; 32<BR># define TCG_TARGET_NB_REGS&nbsp;&nbsp;&nbsp; 8<BR>#endif</P>
<P>typedef enum {<BR>&nbsp;&nbsp;&nbsp; TCG_REG_EAX = 0,<BR>&nbsp;&nbsp;&nbsp; TCG_REG_ECX,<BR>&nbsp;&nbsp;&nbsp; TCG_REG_EDX,<BR>&nbsp;&nbsp;&nbsp; TCG_REG_EBX,<BR>&nbsp;&nbsp;&nbsp; TCG_REG_ESP,<BR>&nbsp;&nbsp;&nbsp; TCG_REG_EBP,<BR>&nbsp;&nbsp;&nbsp; TCG_REG_ESI,<BR>&nbsp;&nbsp;&nbsp; TCG_REG_EDI,</P>
<P>&nbsp;&nbsp;&nbsp; /* 64-bit registers; always define the symbols to avoid<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; too much if-deffing.&nbsp; */<BR>&nbsp;&nbsp;&nbsp; TCG_REG_R8,<BR>&nbsp;&nbsp;&nbsp; TCG_REG_R9,<BR>&nbsp;&nbsp;&nbsp; TCG_REG_R10,<BR>&nbsp;&nbsp;&nbsp; TCG_REG_R11,<BR>&nbsp;&nbsp;&nbsp; TCG_REG_R12,<BR>&nbsp;&nbsp;&nbsp; TCG_REG_R13,<BR>&nbsp;&nbsp;&nbsp; TCG_REG_R14,<BR>&nbsp;&nbsp;&nbsp; TCG_REG_R15,<BR>&nbsp;&nbsp;&nbsp; TCG_REG_RAX = TCG_REG_EAX,<BR>&nbsp;&nbsp;&nbsp; TCG_REG_RCX = TCG_REG_ECX,<BR>&nbsp;&nbsp;&nbsp; TCG_REG_RDX = TCG_REG_EDX,<BR>&nbsp;&nbsp;&nbsp; TCG_REG_RBX = TCG_REG_EBX,<BR>&nbsp;&nbsp;&nbsp; TCG_REG_RSP = TCG_REG_ESP,<BR>&nbsp;&nbsp;&nbsp; TCG_REG_RBP = TCG_REG_EBP,<BR>&nbsp;&nbsp;&nbsp; TCG_REG_RSI = TCG_REG_ESI,<BR>&nbsp;&nbsp;&nbsp; TCG_REG_RDI = TCG_REG_EDI,<BR>} TCGReg;</P>
<P>/* used for function call generation */<BR>#define TCG_REG_CALL_STACK TCG_REG_ESP <BR>#define TCG_TARGET_STACK_ALIGN 16<BR>#if defined(_WIN64)<BR>#define TCG_TARGET_CALL_STACK_OFFSET 32<BR>#else<BR>#define TCG_TARGET_CALL_STACK_OFFSET 0<BR>#endif</P>
<P>extern bool have_bmi1;</P>
<P>/* optional instructions */<BR>#define TCG_TARGET_HAS_div2_i32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<BR>#define TCG_TARGET_HAS_rot_i32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<BR>#define TCG_TARGET_HAS_ext8s_i32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<BR>#define TCG_TARGET_HAS_ext16s_i32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<BR>#define TCG_TARGET_HAS_ext8u_i32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<BR>#define TCG_TARGET_HAS_ext16u_i32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<BR>#define TCG_TARGET_HAS_bswap16_i32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<BR>#define TCG_TARGET_HAS_bswap32_i32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<BR>#define TCG_TARGET_HAS_neg_i32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<BR>#define TCG_TARGET_HAS_not_i32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<BR>#define TCG_TARGET_HAS_andc_i32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; have_bmi1<BR>#define TCG_TARGET_HAS_orc_i32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0<BR>#define TCG_TARGET_HAS_eqv_i32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0<BR>#define TCG_TARGET_HAS_nand_i32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0<BR>#define TCG_TARGET_HAS_nor_i32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0<BR>#define TCG_TARGET_HAS_deposit_i32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<BR>#define TCG_TARGET_HAS_movcond_i32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<BR>#define TCG_TARGET_HAS_add2_i32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<BR>#define TCG_TARGET_HAS_sub2_i32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<BR>#define TCG_TARGET_HAS_mulu2_i32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<BR>#define TCG_TARGET_HAS_muls2_i32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<BR>#define TCG_TARGET_HAS_muluh_i32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0<BR>#define TCG_TARGET_HAS_mulsh_i32&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0</P>
<P>#if TCG_TARGET_REG_BITS == 64<BR>#define TCG_TARGET_HAS_extrl_i64_i32&nbsp;&nbsp;&nbsp; 0<BR>#define TCG_TARGET_HAS_extrh_i64_i32&nbsp;&nbsp;&nbsp; 0<BR>#define TCG_TARGET_HAS_div2_i64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<BR>#define TCG_TARGET_HAS_rot_i64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<BR>#define TCG_TARGET_HAS_ext8s_i64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<BR>#define TCG_TARGET_HAS_ext16s_i64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<BR>#define TCG_TARGET_HAS_ext32s_i64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<BR>#define TCG_TARGET_HAS_ext8u_i64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<BR>#define TCG_TARGET_HAS_ext16u_i64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<BR>#define TCG_TARGET_HAS_ext32u_i64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<BR>#define TCG_TARGET_HAS_bswap16_i64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<BR>#define TCG_TARGET_HAS_bswap32_i64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<BR>#define TCG_TARGET_HAS_bswap64_i64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<BR>#define TCG_TARGET_HAS_neg_i64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<BR>#define TCG_TARGET_HAS_not_i64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<BR>#define TCG_TARGET_HAS_andc_i64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; have_bmi1<BR>#define TCG_TARGET_HAS_orc_i64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0<BR>#define TCG_TARGET_HAS_eqv_i64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0<BR>#define TCG_TARGET_HAS_nand_i64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0<BR>#define TCG_TARGET_HAS_nor_i64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0<BR>#define TCG_TARGET_HAS_deposit_i64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<BR>#define TCG_TARGET_HAS_movcond_i64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<BR>#define TCG_TARGET_HAS_add2_i64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<BR>#define TCG_TARGET_HAS_sub2_i64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<BR>#define TCG_TARGET_HAS_mulu2_i64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<BR>#define TCG_TARGET_HAS_muls2_i64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1<BR>#define TCG_TARGET_HAS_muluh_i64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0<BR>#define TCG_TARGET_HAS_mulsh_i64&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0<BR>#endif</P>
<P>#define TCG_TARGET_deposit_i32_valid(ofs, len) \<BR>&nbsp;&nbsp;&nbsp; (((ofs) == 0 &amp;&amp; (len) == 8) || ((ofs) == 8 &amp;&amp; (len) == 8) || \<BR>&nbsp;&nbsp;&nbsp;&nbsp; ((ofs) == 0 &amp;&amp; (len) == 16))<BR>#define TCG_TARGET_deposit_i64_valid&nbsp;&nbsp;&nbsp; TCG_TARGET_deposit_i32_valid</P>
<P>#if TCG_TARGET_REG_BITS == 64<BR># define TCG_AREG0 TCG_REG_R14<BR>#else<BR># define TCG_AREG0 TCG_REG_EBP<BR>#endif</P>
<P>static inline void flush_icache_range(uintptr_t start, uintptr_t stop)<BR>{<BR>}</P>
<P>#endif