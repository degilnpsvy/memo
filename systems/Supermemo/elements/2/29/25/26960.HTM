#if defined(HOST_WORDS_BIGENDIAN) != defined(TARGET_WORDS_BIGENDIAN)<BR>#define BSWAP_NEEDED<BR>#endif
<P></P>
<P>#ifdef BSWAP_NEEDED</P>
<P>static inline uint16_t tswap16(uint16_t s)<BR>{<BR>&nbsp;&nbsp;&nbsp; return bswap16(s);<BR>}</P>
<P>static inline uint32_t tswap32(uint32_t s)<BR>{<BR>&nbsp;&nbsp;&nbsp; return bswap32(s);<BR>}</P>
<P>static inline uint64_t tswap64(uint64_t s)<BR>{<BR>&nbsp;&nbsp;&nbsp; return bswap64(s);<BR>}</P>
<P>static inline void tswap16s(uint16_t *s)<BR>{<BR>&nbsp;&nbsp;&nbsp; *s = bswap16(*s);<BR>}</P>
<P>static inline void tswap32s(uint32_t *s)<BR>{<BR>&nbsp;&nbsp;&nbsp; *s = bswap32(*s);<BR>}</P>
<P>static inline void tswap64s(uint64_t *s)<BR>{<BR>&nbsp;&nbsp;&nbsp; *s = bswap64(*s);<BR>}</P>
<P>#else</P>
<P>static inline uint16_t tswap16(uint16_t s)<BR>{<BR>&nbsp;&nbsp;&nbsp; return s;<BR>}</P>
<P>static inline uint32_t tswap32(uint32_t s)<BR>{<BR>&nbsp;&nbsp;&nbsp; return s;<BR>}</P>
<P>static inline uint64_t tswap64(uint64_t s)<BR>{<BR>&nbsp;&nbsp;&nbsp; return s;<BR>}</P>
<P>static inline void tswap16s(uint16_t *s)<BR>{<BR>}</P>
<P>static inline void tswap32s(uint32_t *s)<BR>{<BR>}</P>
<P>static inline void tswap64s(uint64_t *s)<BR>{<BR>}</P>
<P>#endif</P>
<P>#if TARGET_LONG_SIZE == 4<BR>#define tswapl(s) tswap32(s)<BR>#define tswapls(s) tswap32s((uint32_t *)(s))<BR>#define bswaptls(s) bswap32s(s)<BR>#else<BR>#define tswapl(s) tswap64(s)<BR>#define tswapls(s) tswap64s((uint64_t *)(s))<BR>#define bswaptls(s) bswap64s(s)<BR>#endif