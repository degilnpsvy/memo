These are for moving data between registers and arbitrary target memory. The address to load/store via is always the second argument while the first argument is always the value to be loaded/stored. The third argument (memory index) only makes sense for system targets; user targets will simply specify 0 all the time. 
<P></P>
<TABLE border=1>
<TBODY>
<TR>
<TD><TT>tcg_gen_qemu_ld8s(ret, addr, mem_idx);</TT> </TD>
<TD>Load an 8bit quantity from target memory and sign extend </TD>
<TD>ret = *(int8_t *)addr </TD></TR>
<TR>
<TD><TT>tcg_gen_qemu_ld8u(ret, addr, mem_idx);</TT> </TD>
<TD>Load an 8bit quantity from target memory and zero extend </TD>
<TD>ret = *(uint8_t *)addr </TD></TR>
<TR>
<TD><TT>tcg_gen_qemu_ld16s(ret, addr, mem_idx);</TT> </TD>
<TD>Load a 16bit quantity from target memory and sign extend </TD>
<TD>ret = *(int8_t *)addr </TD></TR>
<TR>
<TD><TT>tcg_gen_qemu_ld16u(ret, addr, mem_idx);</TT> </TD>
<TD>Load a 16bit quantity from target memory and zero extend </TD>
<TD>ret = *(uint8_t *)addr </TD></TR>
<TR>
<TD><TT>tcg_gen_qemu_ld32s(ret, addr, mem_idx);</TT> </TD>
<TD>Load a 32bit quantity from target memory and sign extend </TD>
<TD>ret = *(int8_t *)addr </TD></TR>
<TR>
<TD><TT>tcg_gen_qemu_ld32u(ret, addr, mem_idx);</TT> </TD>
<TD>Load a 32bit quantity from target memory and zero extend </TD>
<TD>ret = *(uint8_t *)addr </TD></TR>
<TR>
<TD><TT>tcg_gen_qemu_ld64(ret, addr, mem_idx);</TT> </TD>
<TD>Load a 64bit quantity from target memory </TD>
<TD>ret = *(uint64_t *)addr </TD></TR>
<TR>
<TD><TT>tcg_gen_qemu_st8(arg, addr, mem_idx);</TT> </TD>
<TD>Store an 8bit quantity to target memory </TD>
<TD>*(uint8_t *)addr = arg </TD></TR>
<TR>
<TD><TT>tcg_gen_qemu_st16(arg, addr, mem_idx);</TT> </TD>
<TD>Store a 16bit quantity to target memory </TD>
<TD>*(uint16_t *)addr = arg </TD></TR>
<TR>
<TD><TT>tcg_gen_qemu_st32(arg, addr, mem_idx);</TT> </TD>
<TD>Store a 32bit quantity to target memory </TD>
<TD>*(uint32_t *)addr = arg </TD></TR>
<TR>
<TD><TT>tcg_gen_qemu_st64(arg, addr, mem_idx);</TT> </TD>
<TD>Store a 64bit quantity to target memory </TD>
<TD>*(uint64_t *)addr = arg </TD></TR></TBODY></TABLE>