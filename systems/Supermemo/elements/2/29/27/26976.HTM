<H3><SPAN class=mw-headline>Bit </SPAN></H3>
<TABLE border=1>
<TBODY>
<TR>
<TD><TT>tcg_gen_and_tl(ret, arg1, arg2);</TT> </TD>
<TD><A title=http://en.wikipedia.org/wiki/Logical_conjunction class="external text" href="http://en.wikipedia.org/wiki/Logical_conjunction" rel=nofollow>Logical AND two registers</A> </TD>
<TD>ret = arg1 &amp; arg2 </TD></TR>
<TR>
<TD><TT>tcg_gen_andc_tl(ret, arg1, arg2);</TT> </TD>
<TD>Logical AND one register with the complement of another </TD>
<TD>ret = arg1 &amp; ~arg2 </TD></TR>
<TR>
<TD><TT>tcg_gen_eqv_tl(ret, arg1, arg2);</TT> </TD>
<TD><A title=http://en.wikipedia.org/wiki/Logical_equivalence class="external text" href="http://en.wikipedia.org/wiki/Logical_equivalence" rel=nofollow>Compute logical equivalent of two registers</A> </TD>
<TD>ret =&nbsp;!(arg1 ^ arg2) </TD></TR>
<TR>
<TD><TT>tcg_gen_nand_tl(ret, arg1, arg2);</TT> </TD>
<TD><A title=http://en.wikipedia.org/wiki/Logical_NAND class="external text" href="http://en.wikipedia.org/wiki/Logical_NAND" rel=nofollow>Logical NAND two registers</A> </TD>
<TD>ret = arg1 &#8593; arg2 </TD></TR>
<TR>
<TD><TT>tcg_gen_nor_tl(ret, arg1, arg2);</TT> </TD>
<TD><A title=http://en.wikipedia.org/wiki/Logical_NOR class="external text" href="http://en.wikipedia.org/wiki/Logical_NOR" rel=nofollow>Logical NOR two registers</A> </TD>
<TD>ret = arg1 &#8595; arg2 </TD></TR>
<TR>
<TD><TT>tcg_gen_not_tl(ret, arg1);</TT> </TD>
<TD><A title=http://en.wikipedia.org/wiki/Negation class="external text" href="http://en.wikipedia.org/wiki/Negation" rel=nofollow>Logical NOT an register</A> </TD>
<TD>ret =&nbsp;!arg1 </TD></TR>
<TR>
<TD><TT>tcg_gen_or_tl(ret, arg1, arg2);</TT> </TD>
<TD><A title=http://en.wikipedia.org/wiki/Logical_disjunction class="external text" href="http://en.wikipedia.org/wiki/Logical_disjunction" rel=nofollow>Logical OR two registers</A> </TD>
<TD>ret = arg1 | arg2 </TD></TR>
<TR>
<TD><TT>tcg_gen_orc_tl(ret, arg1, arg2);</TT> </TD>
<TD>Logical OR one register with the complement of another </TD>
<TD>ret = arg1 | ~arg2 </TD></TR>
<TR>
<TD><TT>tcg_gen_rotl_tl(ret, arg1, arg2);</TT> </TD>
<TD><A title=http://en.wikipedia.org/wiki/Circular_shift class="external text" href="http://en.wikipedia.org/wiki/Circular_shift" rel=nofollow>Rotate left one register by magnitude of another</A> </TD>
<TD>ret = arg1 rotl arg2 </TD></TR>
<TR>
<TD><TT>tcg_gen_rotr_tl(ret, arg1, arg2);</TT> </TD>
<TD><A title=http://en.wikipedia.org/wiki/Circular_shift class="external text" href="http://en.wikipedia.org/wiki/Circular_shift" rel=nofollow>Rotate right one register by magnitude of another</A> </TD>
<TD>ret = arg1 rotr arg2 </TD></TR>
<TR>
<TD><TT>tcg_gen_sar_tl(ret, arg1, arg2);</TT> </TD>
<TD><A title=http://en.wikipedia.org/wiki/Arithmetic_shift class="external text" href="http://en.wikipedia.org/wiki/Arithmetic_shift" rel=nofollow>Arithmetic shift right one operand by magnitude of another</A> </TD>
<TD>ret = arg1 &gt;&gt; arg2 /* Sign fills vacant bits */ </TD></TR>
<TR>
<TD><TT>tcg_gen_shl_tl(ret, arg1, arg2);</TT> </TD>
<TD><A title=http://en.wikipedia.org/wiki/Logical_shift class="external text" href="http://en.wikipedia.org/wiki/Logical_shift" rel=nofollow>Logical shift left one registerby magnitude of another</A> </TD>
<TD>ret = arg1 &lt;&lt; arg2 </TD></TR>
<TR>
<TD><TT>tcg_gen_shr_tl(ret, arg1, arg2);</TT> </TD>
<TD><A title=http://en.wikipedia.org/wiki/Logical_shift class="external text" href="http://en.wikipedia.org/wiki/Logical_shift" rel=nofollow>Logical shift right one register by magnitude of another</A> </TD>
<TD>ret = arg1 &gt;&gt; arg2 </TD></TR>
<TR>
<TD><TT>tcg_gen_xor_tl(ret, arg1, arg2);</TT> </TD>
<TD><A title=http://en.wikipedia.org/wiki/Exclusive_or class="external text" href="http://en.wikipedia.org/wiki/Exclusive_or" rel=nofollow>Logical XOR two registers</A> </TD>
<TD>ret = arg1 ^ arg2 </TD></TR></TBODY></TABLE>