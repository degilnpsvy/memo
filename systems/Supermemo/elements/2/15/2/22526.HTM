<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 24pt; mso-bidi-font-size: 16.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt" lang=EN-US>CHAPTER 13 </SPAN><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 48pt; mso-bidi-font-size: 24.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt" lang=EN-US>USB Drivers</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The universal serial bus (USB) is a connection between a host computer and a number of peripheral devices. It was originally created to replace a wide range of slow and different buses</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8212;<SPAN lang=EN-US>the parallel, serial, and keyboard connections</SPAN>&#8212;<SPAN lang=EN-US>with a single bus type that all devices could connect to.</SPAN></SPAN><SPAN style="FONT-FAMILY: Birka; mso-bidi-font-size: 7.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT size=3>*(</FONT></SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US> Portions of this chapter are based on the in-kernel documentation for the Linux kernel USB code, which were written by the kernel USB developers and released under the GPL.</SPAN><SPAN style="FONT-FAMILY: Birka; mso-bidi-font-size: 7.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT size=3>) </FONT></SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>USB has grown beyond these slow connections and now supports almost every type of device that can be connected to a PC. The latest revision of the USB specification added high-speed connections with a theoretical speed limit of 480 MBps.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Topologically, a USB subsystem is not laid out as a bus; it is rather a tree built out of several point-to-point links. The links are four-wire cables (ground, power, and two signal wires) that connect a device and a hub, just like twisted-pair Ethernet. The USB host controller is in charge of asking every USB device if it has any data to send. Because of this topology, a USB device can never start sending data without first being asked to by the host controller. This configuration allows for a very easy plug-and-play type of system, whereby devices can be automatically configured by the host computer.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The bus is very simple at the technological level, as it</SPAN><SPAN style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>s a single-master implementation in which the host computer polls the various peripheral devices. Despite this intrinsic limitation, the bus has some interesting features, such as the ability for a device to request a fixed bandwidth for its data transfers in order to reliably support video and audio I/O. Another important feature of USB is that it acts merely as a communication channel between the device and the host, without requiring specific meaning or structure to the data it delivers.</SPAN></FONT><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 11.5pt; mso-bidi-font-size: 7.5pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8224;<SPAN lang=EN-US>(</SPAN></SPAN><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Actually, some structure is there, but it mostly reduces to a requirement for the communication to fit into one of a few predefined classes: a keyboard won</SPAN><SPAN style="FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>t allocate bandwidth, for example, while some video cameras will.</SPAN></FONT><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 11.5pt; mso-bidi-font-size: 7.5pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt" lang=EN-US>)</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>The USB protocol specifications define a set of standards that any device of a specific type can follow. If a device follows that standard, then a special driver for that device is not necessary. These different types are called classes and consist of things like storage devices, keyboards, mice, joysticks, network devices, and modems. Other types of devices that do not fit into these classes require a special vendor-specific driver to be written for that specific device. Video devices and USB-to-serial devices are a good example where there is no defined standard, and a driver is needed for every different device from different manufacturers.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>These features, together with the inherent hotplug capability of the design, make USB a handy, low-cost mechanism to connect (and disconnect) several devices to the computer without the need to shut the system down, open the cover, and swear over screws and wires.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The Linux kernel supports two main types of USB drivers: drivers on a host system and drivers on a device. The USB drivers for a host system control the USB devices that are plugged into it, from the host</SPAN><SPAN style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>s point of view (a common USB host is a desktop computer.) The USB drivers in a device, control how that single device looks to the host computer as a USB device. As the term </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>USB device drivers</SPAN>&#8221;<SPAN lang=EN-US> is very confusing, the USB developers have created the term </SPAN>&#8220;<SPAN lang=EN-US>USB gadget drivers</SPAN>&#8221;<SPAN lang=EN-US> to describe the drivers that control a USB device that connects to a computer (remember that Linux also runs in those tiny embedded devices, too.) This chapter details how the USB system that runs on a desktop computer works. USB gadget drivers are outside the realm of this book at this point in time.</SPAN></SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>As Figure 13-1 shows, USB drivers live between the different kernel subsytems (block, net, char, etc.) and the USB hardware controllers. The USB core provides an interface for USB drivers to use to access and control the USB hardware, without having to worry about the different types of USB hardware controllers that are</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>present on the system.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 26pt; mso-bidi-font-size: 18.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>USB Device Basics</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>A USB device is a very complex thing, as described in the official USB documentation (available at </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>http://www.usb.org</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>). Fortunately, the Linux kernel provides a subsystem called the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>USB core </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>to handle most of the complexity. This chapter describes the interaction between a driver and the USB core. Figure 13-2 shows how USB devices consist of configurations, interfaces, and endpoints and how USB drivers bind to USB interfaces, not the entire USB device.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 22pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Endpoints</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The most basic form of USB communication is through something called an </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>endpoint</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>. A USB endpoint can carry data in only one direction, either from the host</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-SIZE: 14.5pt; mso-bidi-font-size: 11.0pt; mso-no-proof: yes" lang=EN-US><v:shapetype id=_x0000_t75 stroked="f" filled="f" path="m@4@5l@4@11@9@11@9@5xe" o:preferrelative="t" o:spt="75" coordsize="21600,21600"><v:stroke joinstyle="miter"></v:stroke><v:formulas><v:f eqn="if lineDrawn pixelLineWidth 0"></v:f><v:f eqn="sum @0 1 0"></v:f><v:f eqn="sum 0 0 @1"></v:f><v:f eqn="prod @2 1 2"></v:f><v:f eqn="prod @3 21600 pixelWidth"></v:f><v:f eqn="prod @3 21600 pixelHeight"></v:f><v:f eqn="sum @0 0 1"></v:f><v:f eqn="prod @6 1 2"></v:f><v:f eqn="prod @7 21600 pixelWidth"></v:f><v:f eqn="sum @8 21600 0"></v:f><v:f eqn="prod @7 21600 pixelHeight"></v:f><v:f eqn="sum @10 21600 0"></v:f></v:formulas><v:path o:connecttype="rect" gradientshapeok="t" o:extrusionok="f"></v:path><o:lock aspectratio="t" v:ext="edit"></o:lock></v:shapetype><v:shape style="WIDTH: 488.25pt; HEIGHT: 289.5pt; VISIBILITY: visible; mso-wrap-style: square" id=&#22270;&#29255;_x0020_1 type="#_x0000_t75" o:spid="_x0000_i1026"><v:imagedata o:title="" src="file:///C:\Users\DONPOP~1\AppData\Local\Temp\msohtmlclip1\01\clip_image001.emz"><FONT face=Calibri></FONT></v:imagedata></v:shape></SPAN><SPAN style="FONT-SIZE: 14.5pt; mso-bidi-font-size: 11.0pt" lang=EN-US></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>Figure 13-1. USB driver overview</SPAN></I><SPAN style="FONT-SIZE: 14.5pt; mso-bidi-font-size: 11.0pt" lang=EN-US></SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-SIZE: 14.5pt; mso-bidi-font-size: 11.0pt; mso-no-proof: yes" lang=EN-US><v:shape style="WIDTH: 489.75pt; HEIGHT: 240.75pt; VISIBILITY: visible; mso-wrap-style: square" id=&#22270;&#29255;_x0020_2 type="#_x0000_t75" o:spid="_x0000_i1025"><v:imagedata o:title="" src="file:///C:\Users\DONPOP~1\AppData\Local\Temp\msohtmlclip1\01\clip_image003.emz"><FONT face=Calibri></FONT></v:imagedata></v:shape></SPAN><SPAN style="FONT-SIZE: 14.5pt; mso-bidi-font-size: 11.0pt" lang=EN-US></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Figure 13-2. USB device overview</FONT></SPAN></I></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></I></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>computer to the device (called an </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>OUT </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>endpoint) or from the device to the host computer (called an </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>IN </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>endpoint). Endpoints can be thought of as unidirectional pipes.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>A USB endpoint can be one of four different types that describe how the data is transmitted:</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>CONTROL</FONT></SPAN></I></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Control endpoints are used to allow access to different parts of the USB device. They are commonly used for configuring the device, retrieving information about the device, sending commands to the device, or retrieving status reports about the device. These endpoints are usually small in size. Every USB device has a control endpoint called </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>endpoint 0</SPAN>&#8221;<SPAN lang=EN-US> that is used by the USB core to configure the device at insertion time. These transfers are guaranteed by the USB protocol to always have enough reserved bandwidth to make it through to the device.</SPAN></SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>INTERRUPT</FONT></SPAN></I></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Interrupt endpoints transfer small amounts of data at a fixed rate every time the USB host asks the device for data. These endpoints are the primary transport method for USB keyboards and mice. They are also commonly used to send data to USB devices to control the device, but are not generally used to transfer large amounts of data. These transfers are guaranteed by the USB protocol to always have enough reserved bandwidth to make it through.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>BULK</FONT></SPAN></I></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Bulk endpoints transfer large amounts of data. These endpoints are usually much larger (they can hold more characters at once) than interrupt endpoints. They are common for devices that need to transfer any data that must get through with no data loss. These transfers are not guaranteed by the USB protocol to always make it through in a specific amount of time. If there is not enough room on the bus to send the whole BULK packet, it is split up across multiple transfers to or from the device. These endpoints are common on printers, storage, and network devices.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ISOCHRONOUS</FONT></SPAN></I></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Isochronous endpoints also transfer large amounts of data, but the data is not always guaranteed to make it through. These endpoints are used in devices that can handle loss of data, and rely more on keeping a constant stream of data flowing. Real-time data collections, such as audio and video devices, almost always use these endpoints.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Control and bulk endpoints are used for asynchronous data transfers, whenever the driver decides to use them. Interrupt and isochronous endpoints are periodic. This means that these endpoints are set up to transfer data at fixed times continuously, which causes their bandwidth to be reserved by the USB core.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>USB endpoints are described in the kernel with the structure </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_host_endpoint</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>. This structure contains the real endpoint information in another structure called </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_endpoint_descriptor</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>. The latter structure contains all of the USB-specific data in the exact format that the device itself specified. The fields of this structure that drivers care about are:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>bEndpointAddress</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>This is the USB address of this specific endpoint. Also included in this 8-bit value is the direction of the endpoint. The bitmasks </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>USB_DIR_OUT </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>and </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>USB_DIR_IN </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>can be placed against this field to determine if the data for this endpoint is directed to the device or to the host.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>bmAttributes</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>This is the type of endpoint. The bitmask </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>USB_ENDPOINT_XFERTYPE_MASK </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>should be placed against this value in order to determine if the endpoint is of type </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>USB_ENDPOINT_XFER_ISOC</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>USB_ENDPOINT_XFER_BULK</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, or of type </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>USB_ENDPOINT_XFER_INT</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>. These macros define a isochronous, bulk, and interrupt endpoint, respectively.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>wMaxPacketSize</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>This is the maximum size in bytes that this endpoint can handle at once. Note that it is possible for a driver to send amounts of data to an endpoint that is bigger than this value, but the data will be divided up into </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>wMaxPacketSize </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>chunks when actually transmitted to the device. For high-speed devices, this field can be used to support a high-bandwidth mode for the endpoint by using a few extra bits in the upper part of the value. See the USB specification for more details about how this is done.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>bInterval</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>If this endpoint is of type interrupt, this value is the interval settingfor the endpoint</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8212; <SPAN lang=EN-US>that is, the time between interrupt requests for the endpoint. The value is represented in milliseconds.</SPAN></SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The fields of this structure do not have a </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>traditional</SPAN>&#8221;<SPAN lang=EN-US> Linux kernel naming scheme. This is because these fields directly correspond to the field names in the USB specification. The USB kernel programmers felt that it was more important to use the specified names, so as to reduce confusion when reading the specification, than it was to have variable names that look familiar to Linux programmers.</SPAN></SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 22pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-SemiLight" lang=EN-US>Interfaces</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>USB endpoints are bundled up into </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>interfaces</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>. USB interfaces handle only one type of a USB logical connection, such as a mouse, a keyboard, or a audio stream. Some USB devices have multiple interfaces, such as a USB speaker that might consist of two interfaces: a USB keyboard for the buttons and a USB audio stream. Because a USB interface represents basic functionality, each USB driver controls an interface; so, for the speaker example, Linux needs two different drivers for one hardware device.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>USB interfaces may have alternate settings, which are different choices for parameters of the interface. The initial state of a interface is in the first setting, numbered </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>0</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>. Alternate settings can be used to control individual endpoints in different ways, such as to reserve different amounts of USB bandwidth for the device. Each device with an isochronous endpoint uses alternate settings for the same interface.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>USB interfaces are described in the kernel with the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_interface </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>structure. This structure is what the USB core passes to USB drivers and is what the USB driver then is in charge of controlling. The important fields in this structure are:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>struct usb_host_interface *altsetting</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>An array of interface structures containingall of the alternate settings that may be selected for this interface. Each </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_host_interface </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>consists of a set of endpoint configurations as defined by the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_host_endpoint </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>structure described above. Note that these interface structures are in no particular order.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>unsigned num_altsetting</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The number of alternate settings pointed to by the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>altsetting </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>pointer.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>struct usb_host_interface *cur_altsetting</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>A pointer into the array </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>altsetting</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, denotingthe currently active settingfor this interface.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int minor</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>If the USB driver bound to this interface uses the USB major number, this variable contains the minor number assigned by the USB core to the interface. This is valid only after a successful call to </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>usb_register_dev </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>(described later in this chapter).</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>There are other fields in the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_interface </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>structure, but USB drivers do not need to be aware of them.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 22pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Configurations</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>USB interfaces are themselves bundled up into </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>configurations</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>. A USB device can have multiple configurations and might switch between them in order to change the state of the device. For example, some devices that allow firmware to be downloaded to them contain multiple configurations to accomplish this. A single configuration can be enabled only at one point in time. Linux does not handle multiple configuration USB devices very well, but, thankfully, they are rare.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Linux describes USB configurations with the structure </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_host_config </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>and entire USB devices with the structure </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_device</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>. USB device drivers do not generally ever need to read or write to any values in these structures, so they are not defined in detail here. The curious reader can find descriptions of them in the file </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>include/linux/usb.h </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>in the kernel source tree.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>A USB device driver commonly has to convert data from a given </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_interface </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>structure into a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_device </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>structure that the USB core needs for a wide range of function calls. To do this, the function </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>interface_to_usbdev </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>is provided. Hopefully, in the future, all USB calls that currently need a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_device </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>will be converted to take a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_interface </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>parameter and will not require the drivers to do the conversion.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>So to summarize, USB devices are quite complex and are made up of lots of different logical units. The relationships among these units can be simply described as follows:</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri> Devices usually have one or more configurations.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri> Configurations often have one or more interfaces.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri> Interfaces usually have one or more settings.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri> Interfaces have zero or more endpoints.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 26pt; mso-bidi-font-size: 18.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt" lang=EN-US>USB and Sysfs</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>Due to the complexity of a single USB physical device, the representation of that device in sysfs is also quite complex. Both the physical USB device (as represented by a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>struct usb_device</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>) and the individual USB interfaces (as represented by a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>struct usb_interface</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>) are shown in sysfs as individual devices. (This is because both of those structures contain a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>struct device </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>structure.) As an example, for a simple USB mouse that contains only one USB interface, the following would be the sysfs directory tree for that device:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>/sys/devices/pci0000:00/0000:00:09.0/usb2/2-1</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>|-- 2-1:1.0</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>| |-- bAlternateSetting</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>| |-- bInterfaceClass</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>| |-- bInterfaceNumber</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>| |-- bInterfaceProtocol</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>| |-- bInterfaceSubClass</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>| |-- bNumEndpoints</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>| |-- detach_state</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>| |-- iInterface</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>| `-- power</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>| `-- state</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>|-- bConfigurationValue</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>|-- bDeviceClass</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>|-- bDeviceProtocol</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>|-- bDeviceSubClass</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>|-- bMaxPower</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>|-- bNumConfigurations</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>|-- bNumInterfaces</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>|-- bcdDevice</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>|-- bmAttributes</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>|-- detach_state</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>|-- devnum</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>|-- idProduct</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>|-- idVendor</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>|-- maxchild</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>|-- power</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>| `-- state</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>|-- speed</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>`-- version</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>The </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>struct usb_device </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>is represented in the tree at:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>/sys/devices/pci0000:00/0000:00:09.0/usb2/2-1</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>while the USB interface for the mouse</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold">&#8212;<SPAN lang=EN-US>the interface that the USB mouse driver is bound to</SPAN>&#8212;<SPAN lang=EN-US>is located at the directory:</SPAN></SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>/sys/devices/pci0000:00/0000:00:09.0/usb2/2-1/2-1:1.0</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>To help understand what this long device path means, we describe how the kernel labels the USB devices.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>The first USB device is a root hub. This is the USB controller, usually contained in a PCI device. The controller is so named because it controls the whole USB bus connected to it. The controller is a bridge between the PCI bus and the USB bus, as well as being the first USB device on that bus.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>All root hubs are assigned a unique number by the USB core. In our example, the root hub is called </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>usb2</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, as it is the second root hub that was registered with the USB core. There is no limit on the number of root hubs that can be contained in a single system at any time.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Every device that is on a USB bus takes the number of the root hub as the first number in its name. That is followed by a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>- </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>character and then the number of the port that the device is plugged into. As the device in our example is plugged into the first port, a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>1 </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>is added to the name. So the device name for the main USB mouse device is </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>2-1</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>. Because this USB device contains one interface, that causes another device in the tree to be added to the sysfs path. The naming scheme for USB interfaces is the device name up to this point: in our example, it</SPAN><SPAN style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>s </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>2-1 </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>followed by a colon and the USB configuration number, then a period and the interface number. So for this example, the device name is </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>2-1:1.0 </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>because it is the first configuration and has interface number zero.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>So to summarize, the USB sysfs device naming scheme is:</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><I><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLightI; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLightI; mso-font-kerning: 0pt" lang=EN-US>root_hub</SPAN></I><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>-</SPAN><I><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLightI; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLightI; mso-font-kerning: 0pt" lang=EN-US>hub_port</SPAN></I><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>:</SPAN><I><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLightI; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLightI; mso-font-kerning: 0pt" lang=EN-US>config</SPAN></I><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>.</SPAN><I><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLightI; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLightI; mso-font-kerning: 0pt" lang=EN-US>interface</SPAN></I></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>As the devices go further down in the USB tree, and as more and more USB hubs are used, the hub port number is added to the string following the previous hub port number in the chain. For a two-deep tree, the device name looks like:</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><I><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLightI; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLightI; mso-font-kerning: 0pt" lang=EN-US>root_hub</SPAN></I><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>-</SPAN><I><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLightI; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLightI; mso-font-kerning: 0pt" lang=EN-US>hub_port</SPAN></I><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>-</SPAN><I><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLightI; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLightI; mso-font-kerning: 0pt" lang=EN-US>hub_port</SPAN></I><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>:</SPAN><I><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLightI; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLightI; mso-font-kerning: 0pt" lang=EN-US>config</SPAN></I><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>.</SPAN><I><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLightI; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLightI; mso-font-kerning: 0pt" lang=EN-US>interface</SPAN></I></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>As can be seen in the previous directory listing of the USB device and interface, all of the USB specific information is available directly through sysfs (for example, the idVendor, idProduct, and bMaxPower information). One of these files, </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>bConfigurationValue</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, can be written to in order to change the active USB configuration that is being used. This is useful for devices that have multiple configurations, when the kernel is unable to determine what configuration to select in order to properly operate the device. A number of USB modems need to have the proper configuration value written to this file in order to have the correct USB driver bind to the device.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Sysfs does not expose all of the different parts of a USB device, as it stops at the interface level. Any alternate configurations that the device may contain are not shown, as well as the details of the endpoints associated with the interfaces. This information can be found in the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usbfs </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>filesystem, which is mounted in the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>/proc/bus/usb/ </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>directory on the system. The file </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>/proc/bus/usb/devices </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>does show all of the same information exposed in sysfs, as well as the alternate configuration and endpoint information for all USB devices that are present in the system. </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usbfs </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>also allows user-space programs to directly talk to USB devices, which has enabled a lot of kernel drivers to be moved out to user space, where it is easier to maintain and debug. The USB scanner driver is a good example of this, as it is no longer present in the kernel because its functionality is now contained in the user-space SANE library programs.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 26pt; mso-bidi-font-size: 18.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>USB Urbs</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The USB code in the Linux kernel communicates with all USB devices using something called a </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>urb </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>(USB request block). This request block is described with the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct urb </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>structure and can be found in the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>include/linux/usb.h </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>file.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>A urb is used to send or receive data to or from a specific USB endpoint on a specific USB device in an asynchronous manner. It is used much like a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>kiocb </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>structure is used in the filesystem async I/O code or as a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct skbuff </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>is used in the networking code. A USB device driver may allocate many urbs for a single endpoint or may reuse a single urb for many different endpoints, depending on the need of the driver. Every endpoint in a device can handle a queue of urbs, so that multiple urbs can be sent to the same endpoint before the queue is empty. The typical lifecycle of a urb is as follows:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri> Created by a USB device driver.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri> Assigned to a specific endpoint of a specific USB device.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri> Submitted to the USB core, by the USB device driver.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri> Submitted to the specific USB host controller driver for the specified device by the USB core.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri> Processed by the USB host controller driver that makes a USB transfer to the device.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri> When the urb is completed, the USB host controller driver notifies the USB device driver.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Urbs can also be canceled any time by the driver that submitted the urb, or by the USB core if the device is removed from the system. urbs are dynamically created and contain an internal reference count that enables them to be automatically freed when the last user of the urb releases it.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The procedure described in this chapter for handling urbs is useful, because it permits streaming and other complex, overlapping communications that allow drivers to achieve the highest possible data transfer speeds. But less cumbersome procedures are available if you just want to send individual bulk or control messages and do not care about data throughput rates. (See the section </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>USB Transfers Without Urbs.</SPAN>&#8221;<SPAN lang=EN-US>)</SPAN></SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 22pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt" lang=EN-US>struct urb</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>The fields of the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>struct urb </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>structure that matter to a USB device driver are:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>struct usb_device *dev</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>Pointer to the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>struct usb_device </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>to which this urb is sent. This variable must be initialized by the USB driver before the urb can be sent to the USB core.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>unsigned int pipe</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>Endpoint information for the specific </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>struct usb_device </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>that this urb is to be sent to. This variable must be initialized by the USB driver before the urb can be sent to the USB core.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>To set fields of this structure, the driver uses the following functions as appropriate, depending on the direction of traffic. Note that every endpoint can be of only one type.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>unsigned int usb_sndctrlpipe(struct usb_device *dev, unsigned int</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>endpoint)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>Specifies a control OUT endpoint for the specified USB device with the specified endpoint number.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>unsigned int usb_rcvctrlpipe(struct usb_device *dev, unsigned int</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>endpoint)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>Specifies a control IN endpoint for the specified USB device with the specified endpoint number.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>unsigned int usb_sndbulkpipe(struct usb_device *dev, unsigned int</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>endpoint)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>Specifies a bulk OUT endpoint for the specified USB device with the specified endpoint number.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>unsigned int usb_rcvbulkpipe(struct usb_device *dev, unsigned int</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>endpoint)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>Specifies a bulk IN endpoint for the specified USB device with the specified endpoint number.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>unsigned int usb_sndintpipe(struct usb_device *dev, unsigned int endpoint)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>Specifies an interrupt OUT endpoint for the specified USB device with the specified endpoint number.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>unsigned int usb_rcvintpipe(struct usb_device *dev, unsigned int endpoint)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>Specifies an interrupt IN endpoint for the specified USB device with the specified endpoint number.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>unsigned int usb_sndisocpipe(struct usb_device *dev, unsigned int</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>endpoint)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Specifies an isochronous OUT endpoint for the specified USB device with the specified endpoint number.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>unsigned int usb_rcvisocpipe(struct usb_device *dev, unsigned int</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>endpoint)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Specifies an isochronous IN endpoint for the specified USB device with the specified endpoint number.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>unsigned int transfer_flags</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>This variable can be set to a number of different bit values, depending on what the USB driver wants to happen to the urb. The available values are:</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>URB_SHORT_NOT_OK</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>When set, it specifies that any short read on an IN endpoint that might occur should be treated as an error by the USB core. This value is useful only for urbs that are to be read from the USB device, not for write urbs.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>URB_ISO_ASAP</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>If the urb is isochronous, this bit can be set if the driver wants the urb to be scheduled, as soon as the bandwidth utilization allows it to be, and to set the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>start_frame </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>variable in the urb at that point. If this bit is not set for an isochronous urb, the driver must specify the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>start_frame </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>value and must be able to recover properly if the transfer cannot start at that moment. See the upcoming section about isochronous urbs for more information.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>URB_NO_TRANSFER_DMA_MAP</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Should be set when the urb contains a DMA buffer to be transferred. The USB core uses the buffer pointed to by the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>transfer_dma </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>variable and not the buffer pointed to by the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>transfer_buffer </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>variable.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>URB_NO_SETUP_DMA_MAP</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Like the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>URB_NO_TRANSFER_DMA_MAP </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>bit, this bit is used for control urbs that have a DMA buffer already set up. If it is set, the USB core uses the buffer pointed to by the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>setup_dma </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>variable instead of the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>setup_packet </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>variable.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>URB_ASYNC_UNLINK</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>If set, the call to </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_unlink_urb </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>for this urb returns almost immediately, and the urb is unlinked in the background. Otherwise, the function waits until the urb is completely unlinked and finished before returning. Use this bit with care, because it can make synchronization issues very difficult to debug.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>URB_NO_FSBR</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Used by only the UHCI USB Host controller driver and tells it to not try to do Front Side Bus Reclamation logic. This bit should generally not be set, because machines with a UHCI host controller create a lot of CPU overhead, and the PCI bus is saturated waiting on a urb that sets this bit.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>URB_ZERO_PACKET</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>If set, a bulk out urb finishes by sending a short packet containing no data when the data is aligned to an endpoint packet boundary. This is needed by some broken USB devices (such as a number of USB to IR devices) in order to work properly.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>URB_NO_INTERRUPT</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>If set, the hardware may not generate an interrupt when the urb is finished. This bit should be used with care and only when queuing multiple urbs to the same endpoint. The USB core functions use this in order to do DMA buffer transfers.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void *transfer_buffer</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Pointer to the buffer to be used when sending data to the device (for an OUT urb) or when receiving data from the device (for an IN urb). In order for the host controller to properly access this buffer, it must be created with a call to </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>kmalloc</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, not on the stack or statically. For control endpoints, this buffer is for the data stage of the transfer.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>dma_addr_t transfer_dma</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Buffer to be used to transfer data to the USB device using DMA.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int transfer_buffer_length</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The length of the buffer pointed to by the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>transfer_buffer </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>or the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>transfer_dma </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>variable (as only one can be used for a urb). If this is </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>0</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, neither transfer buffers are used by the USB core.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>For an OUT endpoint, if the endpoint maximum size is smaller than the value specified in this variable, the transfer to the USB device is broken up into smaller chunks in order to properly transfer the data. This large transfer occurs in consecutive USB frames. It is much faster to submit a large block of data in one urb, and have the USB host controller split it up into smaller pieces, than it is to send smaller buffers in consecutive order.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>unsigned char *setup_packet</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Pointer to the setup packet for a control urb. It is transferred before the data in the transfer buffer. This variable is valid only for control urbs.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>dma_addr_t setup_dma</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>DMA buffer for the setup packet for a control urb. It is transferred before the data in the normal transfer buffer. This variable is valid only for control urbs.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>usb_complete_t complete</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Pointer to the completion handler function that is called by the USB core when the urb is completely transferred or when an error occurs to the urb. Within this function, the USB driver may inspect the urb, free it, or resubmit it for another transfer. (See the section </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>Completing Urbs: The Completion Callback Handler</SPAN>&#8221; <SPAN lang=EN-US>for more details about the completion handler.)</SPAN></SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>usb_complete_t </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>typedef is defined as:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>typedef void (*usb_complete_t)(struct urb *, struct pt_regs *);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void *context</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Pointer to a data blob that can be set by the USB driver. It can be used in the completion handler when the urb is returned to the driver. See the following section for more details about this variable.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int actual_length</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>When the urb is finished, this variable is set to the actual length of the data either sent by the urb (for OUT urbs) or received by the urb (for IN urbs.) For IN urbs, this must be used instead of the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>transfer_buffer_length </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>variable, because the data received could be smaller than the whole buffer size.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int status</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>When the urb is finished, or being processed by the USB core, this variable is set to the current status of the urb. The only time a USB driver can safely access this variable is in the urb completion handler function (described in the section </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>Completing Urbs: The Completion Callback Handler</SPAN>&#8221;<SPAN lang=EN-US>). This restriction is to prevent race conditions that occur while the urb is being processed by the USB core. For isochronous urbs, a successful value (</SPAN></SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>0</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>) in this variable merely indicates whether the urb has been unlinked. To obtain a detailed status on isochronous urbs, the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>iso_frame_desc </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>variables should be checked.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Valid values for this variable include:</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>0</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>The urb transfer was successful.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>-ENOENT</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The urb was stopped by a call to </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_kill_urb</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>-ECONNRESET</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The urb was unlinked by a call to </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_unlink_urb</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, and the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>transfer_flags </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>variable of the urb was set to </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>URB_ASYNC_UNLINK</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>-EINPROGRESS</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>The urb is still beingprocessed by the USB host controllers. If your driver ever sees this value, it is a bug in your driver.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>-EPROTO</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>One of the following errors occurred with this urb:</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri> A bitstuff error happened during the transfer.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri> No response packet was received in time by the hardware.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>-EILSEQ</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>There was a CRC mismatch in the urb transfer.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>-EPIPE</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The endpoint is now stalled. If the endpoint involved is not a control endpoint, this error can be cleared through a call to the function </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_clear_halt</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>-ECOMM</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Data was received faster during the transfer than it could be written to system memory. This error value happens only for an IN urb.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>-ENOSR</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Data could not be retrieved from the system memory during the transfer fast enough to keep up with the requested USB data rate. This error value happens</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>only for an OUT urb.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>-EOVERFLOW</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>A </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>babble</SPAN>&#8221;<SPAN lang=EN-US> error happened to the urb. A </SPAN>&#8220;<SPAN lang=EN-US>babble</SPAN>&#8221;<SPAN lang=EN-US> error occurs when the endpoint receives more data than the endpoint</SPAN></SPAN><SPAN style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>s specified maximum packet size.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>-EREMOTEIO</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Occurs only if the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>URB_SHORT_NOT_OK </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>flagis set in the urb</SPAN><SPAN style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>s </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>transfer_flags </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>variable and means that the full amount of data requested by the urb was not received.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>-ENODEV</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>The USB device is now gone from the system.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>-EXDEV</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Occurs only for a isochronous urb and means that the transfer was only partially completed. In order to determine what was transferred, the driver must look at the individual frame status.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>-EINVAL</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Something very bad happened with the urb. The USB kernel documentation describes what this value means:</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ISO madness, if this happens: Log off and go home</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>It also can happen if a parameter is incorrectly set in the urb stucture or if an incorrect function parameter in the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_submit_urb </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>call submitted the urb to the USB core.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>-ESHUTDOWN</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>There was a severe error with the USB host controller driver; it has now been disabled, or the device was disconnected from the system, and the urb was submitted after the device was removed. It can also occur if the configuration was changed for the device, while the urb was submitted to the device.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Generally, the error values </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>-EPROTO</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>-EILSEQ</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, and </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>-EOVERFLOW </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>indicate hardware problems with the device, the device firmware, or the cable connecting the device to the computer.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int start_frame</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Sets or returns the initial frame number for isochronous transfers to use.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int interval</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The interval at which the urb is polled. This is valid only for interrupt or isochronous urbs. The value</SPAN><SPAN style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>s units differ depending on the speed of the device. For low-speed and full-speed devices, the units are frames, which are equivalent to milliseconds. For devices, the units are in micro frames, which is equivalent to units of 1/8 milliseconds. This value must be set by the USB driver for isochronous or interrupt urbs before the urb is sent to the USB core.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int number_of_packets</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Valid only for isochronous urbs and specifies the number of isochronous transfer buffers to be handled by this urb. This value must be set by the USB driver for isochronous urbs before the urb is sent to the USB core.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int error_count</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Set by the USB core only for isochronous urbs after their completion. It specifies the number of isochronous transfers that reported any type of error.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>struct usb_iso_packet_descriptor iso_frame_desc[0]</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Valid only for isochronous urbs. This variable is an array of the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_iso_packet_descriptor </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>structures that make up this urb. This structure allows a single urb to define a number of isochronous transfers at once. It is also used to collect the transfer status of each individual transfer.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_iso_packet_descriptor </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>is made up of the following fields:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>unsigned int offset</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The offset into the transfer buffer (startingat </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>0 </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>for the first byte) where this packet</SPAN><SPAN style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>s data is located.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>unsigned int length</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>The length of the transfer buffer for this packet.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>unsigned int actual_length</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>The length of the data received into the transfer buffer for this isochronous packet.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>unsigned int status</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The status of the individual isochronous transfer of this packet. It can take the same return values as the main </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct urb </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>structure</SPAN><SPAN style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>s </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>status </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>variable.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 22pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Creating and Destroying Urbs</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct urb </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>structure must never be created statically in a driver or within another structure, because that would break the reference counting scheme used by the USB core for urbs. It must be created with a call to the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_alloc_urb </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>function. This function has the prototype:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>struct urb *usb_alloc_urb(int iso_packets, int mem_flags);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The first parameter, </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>iso_packets</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, is the number of isochronous packets this urb should contain. If you do not want to create an isochronous urb, this variable should be set to </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>0</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>. The second parameter, </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>mem_flags</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, is the same type of flag that is passed to the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>kmalloc </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>function call to allocate memory from the kernel (see the section </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>The Flags Argument</SPAN>&#8221;<SPAN lang=EN-US> in Chapter 8 for the details on these flags). If the function is successful in allocating enough space for the urb, a pointer to the urb is returned to the caller. If the return value is </SPAN></SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>NULL</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, some error occurred within the USB core, and the driver needs to clean up properly.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>After a urb has been created, it must be properly initialized before it can be used by the USB core. See the next sections for how to initialize different types of urbs. In order to tell the USB core that the driver is finished with the urb, the driver must call the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_free_urb </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>function. This function only has one argument:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void usb_free_urb(struct urb *urb);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The argument is a pointer to the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct urb </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>you want to release. After this function is called, the urb structure is gone, and the driver cannot access it any more.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 18pt; mso-bidi-font-size: 11.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Interrupt urbs</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The function </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_fill_int_urb </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>is a helper function to properly initialize a urb to be sent to a interrupt endpoint of a USB device:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void usb_fill_int_urb(struct urb *urb, struct usb_device *dev,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>unsigned int pipe, void *transfer_buffer,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int buffer_length, usb_complete_t complete,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void *context, int interval);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>This function contains a lot of parameters:</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>struct urb *urb</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>A pointer to the urb to be initialized.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>struct usb_device *dev</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>The USB device to which this urb is to be sent.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>unsigned int pipe</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The specific endpoint of the USB device to which this urb is to be sent. This value is created with the previously mentioned </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_sndintpipe </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>or </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_rcvintpipe </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>functions.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void *transfer_buffer</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>A pointer to the buffer from which outgoing data is taken or into which incoming data is received. Note that this can not be a static buffer and must be created with a call to </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>kmalloc</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int buffer_length</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The length of the buffer pointed to by the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>transfer_buffer </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>pointer.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>usb_complete_t complete</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Pointer to the completion handler that is called when this urb is completed.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void *context</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Pointer to the blob that is added to the urb structure for later retrieval by the completion handler function.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int interval</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The interval at which that this urb should be scheduled. See the previous description of the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct urb </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>structure to find the proper units for this value.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 18pt; mso-bidi-font-size: 11.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-SemiLight" lang=EN-US>Bulk urbs</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Bulk urbs are initialized much like interrupt urbs. The function that does this is </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_fill_bulk_urb</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, and it looks like:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void usb_fill_bulk_urb(struct urb *urb, struct usb_device *dev,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>unsigned int pipe, void *transfer_buffer,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int buffer_length, usb_complete_t complete,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void *context);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The function parameters are all the same as in the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_fill_int_urb </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>function. However, there is no </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>interval </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>parameter because bulk urbs have no interval value. Please note that the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>unsigned int pipe </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>variable must be initialized with a call to the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_sndbulkpipe </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>or </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_rcvbulkpipe </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>function.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_fill_int_urb </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>function does not set the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>transfer_flags </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>variable in the urb, so any modification to this field has to be done by the driver itself.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 18pt; mso-bidi-font-size: 11.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-SemiLight" lang=EN-US>Control urbs</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Control urbs are initialized almost the same way as bulk urbs, with a call to the function </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_fill_control_urb</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void usb_fill_control_urb(struct urb *urb, struct usb_device *dev,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>unsigned int pipe, unsigned char *setup_packet,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void *transfer_buffer, int buffer_length,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>usb_complete_t complete, void *context);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The function parameters are all the same as in the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_fill_bulk_urb </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>function, except that there is a new parameter, </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>unsigned char *setup_packet</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, which must point to the setup packet data that is to be sent to the endpoint. Also, the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>unsigned int pipe </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>variable must be initialized with a call to the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_sndctrlpipe </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>or </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_rcvictrlpipe </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>function.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_fill_control_urb </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>function does not set the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>transfer_flags </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>variable in the urb, so any modification to this field has to be done by the driver itself. Most drivers do not use this function, as it is much simpler to use the synchronous API calls as described in the section </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>USB Transfers Without Urbs.</SPAN>&#8221;<SPAN lang=EN-US></SPAN></SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 18pt; mso-bidi-font-size: 11.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt" lang=EN-US>Isochronous urbs</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>Isochronous urbs unfortunately do not have an initializer function like the interrupt, control, and bulk urbs do. So they must be initialized </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold">&#8220;<SPAN lang=EN-US>by hand</SPAN>&#8221;<SPAN lang=EN-US> in the driver before they can be submitted to the USB core. The following is an example of how to properly initialize this type of urb. It was taken from the </SPAN></SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>konicawc.c </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>kernel driver located in the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>drivers/usb/media </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>directory in the main kernel source tree.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>urb-&gt;dev = dev;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>urb-&gt;context = uvd;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>urb-&gt;pipe = usb_rcvisocpipe(dev, uvd-&gt;video_endp-1);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>urb-&gt;interval = 1;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>urb-&gt;transfer_flags = URB_ISO_ASAP;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>urb-&gt;transfer_buffer = cam-&gt;sts_buf[i];</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>urb-&gt;complete = konicawc_isoc_irq;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>urb-&gt;number_of_packets = FRAMES_PER_DESC;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>urb-&gt;transfer_buffer_length = FRAMES_PER_DESC;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>for (j=0; j &lt; FRAMES_PER_DESC; j++) {</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>urb-&gt;iso_frame_desc[j].offset = j;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>urb-&gt;iso_frame_desc[j].length = 1;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 22pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt" lang=EN-US>Submitting Urbs</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>Once the urb has been properly created and initialized by the USB driver, it is ready to be submitted to the USB core to be sent out to the USB device. This is done with a call to the function </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>usb_submit_urb</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>int usb_submit_urb(struct urb *urb, int mem_flags);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>The </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>urb </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>parameter is a pointer to the urb that is to be sent to the device. The </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>mem_flags </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>parameter is equivalent to the same parameter that is passed to the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>kmalloc </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>call and is used to tell the USB core how to allocate any memory buffers at this moment in time. </SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>After a urb has been submitted to the USB core successfully, it should never try to access any fields of the urb structure until the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>complete </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>function is called. Because the function </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>usb_submit_urb </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>can be called at any time (including from within an interrupt context), the specification of the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>mem_flags </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>variable must be correct. There are really only three valid values that should be used, depending on when </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>usb_submit_urb </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>is being called:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>GFP_ATOMIC</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>This value should be used whenever the following are true:</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri> The caller is within a urb completion handler, an interrupt, a bottom half, a tasklet, or a timer callback.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri> The caller is holdinga spinlock or rwlock. Note that if a semaphore is being held, this value is not necessary.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US> The </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>current-&gt;state </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>is not </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>TASK_RUNNING</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>. The state is always </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>TASK_RUNNING </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>unless the driver has changed the current state itself.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>GFP_NOIO</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>This value should be used if the driver is in the block I/O patch. It should also be used in the error handling path of all storage-type devices.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>GFP_KERNEL</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>This should be used for all other situations that do not fall into one of the previously mentioned categories.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 22pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-SemiLight" lang=EN-US>Completing Urbs: The Completion Callback Handler</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>If the call to </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_submit_urb </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>was successful, transferring control of the urb to the USB core, the function returns </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>0</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>; otherwise, a negative error number is returned. If the function succeeds, the completion handler of the urb (as specified by the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>complete </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>function pointer) is called exactly once when the urb is completed. When this function is called, the USB core is finished with the URB, and control of it is now returned to the device driver.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>There are only three ways a urb can be finished and have the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>complete </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>function called:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US> The urb is successfully sent to the device, and the device returns the proper acknowledgment. For an OUT urb, the data was successfully sent, and for an IN urb, the requested data was successfully received. If this has happened, the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>status </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>variable in the urb is set to </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>0</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US> Some kind of error happened when sending or receiving data from the device. This is noted by the error value in the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>status </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>variable in the urb structure.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US> The urb was </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>unlinked</SPAN>&#8221;<SPAN lang=EN-US> from the USB core. This happens either when the driver tells the USB core to cancel a submitted urb with a call to </SPAN></SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_unlink_urb </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>or </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_kill_urb</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, or when a device is removed from the system and a urb had been submitted to it.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>An example of how to test for the different return values within a urb completion call is shown later in this chapter.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 22pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-SemiLight" lang=EN-US>Canceling Urbs</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>To stop a urb that has been submitted to the USB core, the functions </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_kill_urb </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>or </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_unlink_urb </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>should be called:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int usb_kill_urb(struct urb *urb);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int usb_unlink_urb(struct urb *urb);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>urb </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>parameter for both of these functions is a pointer to the urb that is to be canceled.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>When the function is </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_kill_urb</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, the urb lifecycle is stopped. This function is usually used when the device is disconnected from the system, in the disconnect callback.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>For some drivers, the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_unlink_urb </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>function should be used to tell the USB core to stop an urb. This function does not wait for the urb to be fully stopped before returning to the caller. This is useful for stopping the urb while in an interrupt handler or when a spinlock is held, as waiting for a urb to fully stop requires the ability for the USB core to put the calling process to sleep. This function requires that the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>URB_ASYNC_UNLINK </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>flag value be set in the urb that is being asked to be stopped in order to work properly.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 26pt; mso-bidi-font-size: 18.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Writing a USB Driver</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The approach to writing a USB device driver is similar to a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>pci_driver</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>: the driver registers its driver object with the USB subsystem and later uses vendor and device identifiers to tell if its hardware has been installed.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 22pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>What Devices Does the Driver Support?</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_device_id </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>structure provides a list of different types of USB devices that this driver supports. This list is used by the USB core to decide which driver to give a device to, and by the hotplug scripts to decide which driver to automatically load when a specific device is plugged into the system.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_device_id </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>structure is defined with the following fields:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>__u16 match_flags</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Determines which of the followingfields in the structure the device should be matched against. This is a bit field defined by the different </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>USB_DEVICE_ID_MATCH_* </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>values specified in the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>include/linux/mod_devicetable.h </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>file. This field is usually never set directly but is initialized by the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>USB_DEVICE </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>type macros described later.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>__u16 idVendor</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>The USB vendor ID for the device. This number is assigned by the USB forum to its members and cannot be made up by anyone else.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>__u16 idProduct</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>The USB product ID for the device. All vendors that have a vendor ID assigned to them can manage their product IDs however they choose to.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>__u16 bcdDevice_lo</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>__u16 bcdDevice_hi</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Define the low and high ends of the range of the vendor-assigned product version number. The </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>bcdDevice_hi </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>value is inclusive; its value is the number of the highest-numbered device. Both of these values are expressed in binary-coded decimal (BCD) form. These variables, combined with the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>idVendor </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>and </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>idProduct</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, are used to define a specific version of a device.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>__u8 bDeviceClass</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>__u8 bDeviceSubClass</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>__u8 bDeviceProtocol</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Define the class, subclass, and protocol of the device, respectively. These numbers are assigned by the USB forum and are defined in the USB specification. These values specify the behavior for the whole device, including all interfaces on this device.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>__u8 bInterfaceClass</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>__u8 bInterfaceSubClass</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>__u8 bInterfaceProtocol</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Much like the device-specific values above, these define the class, subclass, and protocol of the individual interface, respectively. These numbers are assigned by the USB forum and are defined in the USB specification.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>kernel_ulong_t driver_info</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>This value is not used to match against, but it holds information that the driver can use to differentiate the different devices from each other in the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>probe </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>callback function to the USB driver.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>As with PCI devices, there are a number of macros that are used to initialize this structure:</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>USB_DEVICE(vendor, product)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Creates a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_device_id </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>that can be used to match only the specified vendor and product ID values. This is very commonly used for USB devices that need a specific driver.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>USB_DEVICE_VER(vendor, product, lo, hi)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Creates a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_device_id </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>that can be used to match only the specified vendor and product ID values within a version range.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>USB_DEVICE_INFO(class, subclass, protocol)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Creates a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_device_id </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>that can be used to match a specific class of USB devices.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>USB_INTERFACE_INFO(class, subclass, protocol)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Creates a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_device_id </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>that can be used to match a specific class of USB interfaces.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>So, for a simple USB device driver that controls only a single USB device from a single vendor, the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_device_id </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>table would be defined as:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/* table of devices that work with this driver */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>static struct usb_device_id skel_table [ ] = {</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>{ USB_DEVICE(USB_SKEL_VENDOR_ID, USB_SKEL_PRODUCT_ID) },</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>{ } /* Terminating entry */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>};</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>MODULE_DEVICE_TABLE (usb, skel_table);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>As with a PCI driver, the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>MODULE_DEVICE_TABLE </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>macro is necessary to allow user-space tools to figure out what devices this driver can control. But for USB drivers, the string </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>usb </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>must be the first value in the macro.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 22pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Registering a USB Driver</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The main structure that all USB drivers must create is a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_driver</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>. This structure must be filled out by the USB driver and consists of a number of function callbacks and variables that describe the USB driver to the USB core code:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>struct module *owner</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Pointer to the module owner of this driver. The USB core uses it to properly reference count this USB driver so that it is not unloaded at inopportune moments. The variable should be set to the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>THIS_MODULE </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>macro.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>const char *name</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Pointer to the name of the driver. It must be unique among all USB drivers in the kernel and is normally set to the same name as the module name of the driver. It shows up in sysfs under </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>/sys/bus/usb/drivers/ </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>when the driver is in the kernel.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>const struct usb_device_id *id_table</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Pointer to the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_device_id </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>table that contains a list of all of the different kinds of USB devices this driver can accept. If this variable is not set, the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>probe </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>function callback in the USB driver is never called. If you want your driver always to be called for every USB device in the system, create a entry that sets only the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>driver_info </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>field:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>static struct usb_device_id usb_ids[ ] = {</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>{.driver_info = 42},</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>{ }</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>};</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int (*probe) (struct usb_interface *intf, const struct usb_device_id *id)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Pointer to the probe function in the USB driver. This function (described in the section </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>probe and disconnect in Detail</SPAN>&#8221;<SPAN lang=EN-US>) is called by the USB core when it thinks it has a </SPAN></SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_interface </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>that this driver can handle. A pointer to the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_device_id </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>that the USB core used to make this decision is also passed to this function. If the USB driver claims the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_interface </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>that is passed to it, it should initialize the device properly and return </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>0</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>. If the driver does not want to claim the device, or an error occurs, it should return a negative error value.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void (*disconnect) (struct usb_interface *intf)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Pointer to the disconnect function in the USB driver. This function (described in the section </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>probe and disconnect in Detail</SPAN>&#8221;<SPAN lang=EN-US>) is called by the USB core when the </SPAN></SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_interface </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>has been removed from the system or when the driver is being unloaded from the USB core.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>So, to create a value </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_driver </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>structure, only five fields need to be initialized:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>static struct usb_driver skel_driver = {</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>.owner = THIS_MODULE,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>.name = "skeleton",</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>.id_table = skel_table,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>.probe = skel_probe,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>.disconnect = skel_disconnect,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>};</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_driver </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>does contain a few more callbacks, which are generally not used very often, and are not required in order for a USB driver to work properly:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int (*ioctl) (struct usb_interface *intf, unsigned int code, void *buf)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Pointer to an </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>ioctl </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>function in the USB driver. If it is present, it is called when a user-space program makes a </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>ioctl </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>call on the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usbfs </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>filesystem device entry associated with a USB device attached to this USB driver. In pratice, only the USB hub driver uses this ioctl, as there is no other real need for any other USB driver to use it.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int (*suspend) (struct usb_interface *intf, u32 state)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Pointer to a suspend function in the USB driver. It is called when the device is to be suspended by the USB core.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int (*resume) (struct usb_interface *intf)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Pointer to a resume function in the USB driver. It is called when the device is being resumed by the USB core.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>To register the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_driver </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>with the USB core, a call to </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_register_driver </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>is made with a pointer to the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_driver</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>. This is traditionally done in the module initialization code for the USB driver:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>static int __init usb_skel_init(void)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>{</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int result;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/* register this driver with the USB subsystem */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>result = usb_register(&amp;skel_driver);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (result)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>err("usb_register failed. Error number %d", result);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return result;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>When the USB driver is to be unloaded, the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_driver </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>needs to be unregistered from the kernel. This is done with a call to </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_deregister_driver</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>. When this call happens, any USB interfaces that were currently bound to this driver are disconnected, and the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>disconnect </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>function is called for them.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>static void __exit usb_skel_exit(void)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>{</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/* deregister this driver with the USB subsystem */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>usb_deregister(&amp;skel_driver);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 22pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt" lang=EN-US>probe and disconnect in Detail</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>In the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>struct usb_driver </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>structure described in the previous section, the driver specified two functions that the USB core calls at appropriate times. The </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>probe </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>function is called when a device is installed that the USB core thinks this driver should handle; the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>probe </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>function should perform checks on the information passed to it about the device and decide whether the driver is really appropriate for that device. The </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>disconnect </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>function is called when the driver should no longer control the device for some reason and can do clean-up.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>Both the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>probe </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>disconnect </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>function callbacks are called in the context of the USB hub kernel thread, so it is legal to sleep within them. However, it is recommended that the majority of work be done when the device is opened by a user if possible, in order to keep the USB probing time to a minimum. This is because the USB core handles the addition and removal of USB devices within a single thread, so any slow device driver can cause the USB device detection time to slow down and become noticeable by the user.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>In the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>probe </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>function callback, the USB driver should initialize any local structures that it might use to manage the USB device. It should also save any information that it needs about the device to the local structure, as it is usually easier to do so at this time. As an example, USB drivers usually want to detect what the endpoint address and buffer sizes are for the device, as they are needed in order to communicate with the device. Here is some example code that detects both IN and OUT endpoints of BULK type and saves some information about them in a local device structure: </SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>/* set up the endpoint information */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>/* use only the first bulk-in and bulk-out endpoints */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>iface_desc = interface-&gt;cur_altsetting;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>for (i = 0; i &lt; iface_desc-&gt;desc.bNumEndpoints; ++i) {</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>endpoint = &amp;iface_desc-&gt;endpoint[i].desc;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>if (!dev-&gt;bulk_in_endpointAddr &amp;&amp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>(endpoint-&gt;bEndpointAddress &amp; USB_DIR_IN) &amp;&amp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>((endpoint-&gt;bmAttributes &amp; USB_ENDPOINT_XFERTYPE_MASK)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>= = USB_ENDPOINT_XFER_BULK)) {</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>/* we found a bulk in endpoint */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>buffer_size = endpoint-&gt;wMaxPacketSize;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>dev-&gt;bulk_in_size = buffer_size;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>dev-&gt;bulk_in_endpointAddr = endpoint-&gt;bEndpointAddress;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>dev-&gt;bulk_in_buffer = kmalloc(buffer_size, GFP_KERNEL);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>if (!dev-&gt;bulk_in_buffer) {</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>err("Could not allocate bulk_in_buffer");</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>goto error;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>if (!dev-&gt;bulk_out_endpointAddr &amp;&amp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>!(endpoint-&gt;bEndpointAddress &amp; USB_DIR_IN) &amp;&amp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>((endpoint-&gt;bmAttributes &amp; USB_ENDPOINT_XFERTYPE_MASK)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>= = USB_ENDPOINT_XFER_BULK)) {</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/* we found a bulk out endpoint */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>dev-&gt;bulk_out_endpointAddr = endpoint-&gt;bEndpointAddress;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (!(dev-&gt;bulk_in_endpointAddr &amp;&amp; dev-&gt;bulk_out_endpointAddr)) {</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>err("Could not find both bulk-in and bulk-out endpoints");</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>goto error;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>This block of code first loops over every endpoint that is present in this interface and assigns a local pointer to the endpoint structure to make it easier to access later:</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>for (i = 0; i &lt; iface_desc-&gt;desc.bNumEndpoints; ++i) {</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>endpoint = &amp;iface_desc-&gt;endpoint[i].desc;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Then, after we have an endpoint, and we have not found a bulk IN type endpoint already, we look to see if this endpoint</SPAN><SPAN style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>s direction is IN. That can be tested by seeing whether the bitmask </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>USB_DIR_IN </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>is contained in the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>bEndpointAddress </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>endpoint variable. If this is true, we determine whether the endpoint type is bulk or not, by first masking off the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>bmAttributes </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>variable with the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>USB_ENDPOINT_XFERTYPE_MASK </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>bitmask, and then checking if it matches the value </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>USB_ENDPOINT_XFER_BULK</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (!dev-&gt;bulk_in_endpointAddr &amp;&amp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>(endpoint-&gt;bEndpointAddress &amp; USB_DIR_IN) &amp;&amp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>((endpoint-&gt;bmAttributes &amp; USB_ENDPOINT_XFERTYPE_MASK)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>= = USB_ENDPOINT_XFER_BULK)) {</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>If all of these tests are true, the driver knows it found the proper type of endpoint and can save the information about the endpoint that it will later need to communicate over it in a local structure:</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/* we found a bulk in endpoint */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>buffer_size = endpoint-&gt;wMaxPacketSize;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>dev-&gt;bulk_in_size = buffer_size;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>dev-&gt;bulk_in_endpointAddr = endpoint-&gt;bEndpointAddress;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>dev-&gt;bulk_in_buffer = kmalloc(buffer_size, GFP_KERNEL);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (!dev-&gt;bulk_in_buffer) {</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>err("Could not allocate bulk_in_buffer");</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>goto error;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Because the USB driver needs to retrieve the local data structure that is associated with this </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_interface </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>later in the lifecycle of the device, the function </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_set_intfdata </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>can be called:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/* save our data pointer in this interface device */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>usb_set_intfdata(interface, dev);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>This function accepts a pointer to any data type and saves it in the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_interface </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>structure for later access. To retrieve the data, the function </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_get_intfdata </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>should be called:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>struct usb_skel *dev;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>struct usb_interface *interface;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int subminor;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int retval = 0;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>subminor = iminor(inode);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>interface = usb_find_interface(&amp;skel_driver, subminor);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (!interface) {</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>err ("%s - error, can't find device for minor %d",</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>__FUNCTION__, subminor);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>retval = -ENODEV;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>goto exit;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>dev = usb_get_intfdata(interface);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (!dev) {</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>retval = -ENODEV;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>goto exit;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_get_intfdata </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>is usually called in the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>open </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>function of the USB driver and again in the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>disconnect </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>function. Thanks to these two functions, USB drivers do not need to keep a static array of pointers that store the individual device structures for all current devices in the system. The indirect reference to device information allows an unlimited number of devices to be supported by any USB driver.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>If the USB driver is not associated with another type of subsystem that handles the user interaction with the device (such as input, tty, video, etc.), the driver can use the<SPAN style="mso-spacerun: yes">&nbsp; </SPAN>USB major number in order to use the traditional char driver interface with user space. To do this, the USB driver must call the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_register_dev </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>function in the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>probe </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>function when it wants to register a device with the USB core. Make sure that the device and driver are in a proper state to handle a user wanting to access the device as soon as this function is called.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/* we can register the device now, as it is ready */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>retval = usb_register_dev(interface, &amp;skel_class);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (retval) {</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/* something prevented us from registering this driver */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>err("Not able to get a minor for this device.");</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>usb_set_intfdata(interface, NULL);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>goto error;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_register_dev </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>function requires a pointer to a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_interface </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>and a pointer to a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_class_driver</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>. This </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_class_driver </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>is used to define a number of different parameters that the USB driver wants the USB core to know when registering for a minor number. This structure consists of the following variables: </SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>char *name</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The name that sysfs uses to describe the device. A leading pathname, if present, is used only in devfs and is not covered in this book. If the number of the device needs to be in the name, the characters </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>%d </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>should be in the name string. For example, to create the devfs name </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>usb/foo1 </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>and the sysfs class name </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>foo1</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, the name string should be set to </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>usb/foo%d</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>. </SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>struct file_operations *fops;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Pointer to the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct file_operations </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>that this driver has defined to use to register as the character device. See Chapter 3 for more information about this structure.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>mode_t mode;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The mode for the devfs file to be created for this driver; unused otherwise. A typical setting for this variable would be the value </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>S_IRUSR </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>combined with the value </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>S_IWUSR</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, which would provide only read and write access by the owner of the device file.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int minor_base;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>This is the start of the assigned minor range for this driver. All devices associated with this driver are created with unique, increasing minor numbers beginning with this value. Only 16 devices are allowed to be associated with this driver at any one time unless the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>CONFIG_USB_DYNAMIC_MINORS </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>configuration option has been enabled for the kernel. If so, this variable is ignored, and all minor numbers for the device are allocated on a first-come, first-served manner. It is recommended that systems that have enabled this option use a program such as </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>udev </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>to manage the device nodes in the system, as a static </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>/dev </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>tree will not work properly.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>When the USB device is disconnected, all resources associated with the device should be cleaned up, if possible. At this time, if </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_register_dev </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>has been called to allocate a minor number for this USB device duringthe </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>probe </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>function, the function </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_deregister_dev </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>must be called to give the minor number back to the USB core.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>In the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>disconnect </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>function, it is also important to retrieve from the interface any data that was previously set with a call to </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_set_intfdata</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>. Then set the data pointer in the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_interface </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>structure to </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>NULL </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>to prevent any further mistakes in accessing the data improperly:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>static void skel_disconnect(struct usb_interface *interface)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>{</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>struct usb_skel *dev;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int minor = interface-&gt;minor;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/* prevent skel_open( ) from racing skel_disconnect( ) */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>lock_kernel( );</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>dev = usb_get_intfdata(interface);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>usb_set_intfdata(interface, NULL);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/* give back our minor */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>usb_deregister_dev(interface, &amp;skel_class);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>unlock_kernel( );</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/* decrement our usage count */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>kref_put(&amp;dev-&gt;kref, skel_delete);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>info("USB Skeleton #%d now disconnected", minor);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Note the call to </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>lock_kernel </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>in the previous code snippet. This takes the big kernel lock, so that the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>disconnect </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>callback does not encounter a race condition with the open call when trying to get a pointer to the correct interface data structure. Because the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>open </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>is called with the big kernel lock taken, if the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>disconnect </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>also takes that same lock, only one portion of the driver can access and then set the interface data pointer.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Just before the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>disconnect </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>function is called for a USB device, all urbs that are currently in transmission for the device are canceled by the USB core, so the driver does not have to explicitly call </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_kill_urb </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>for these urbs. If a driver tries to submit a urb to a USB device after it has been disconnected with a call to </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_submit_urb</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, the submission will fail with an error value of </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>-EPIPE</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 22pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-SemiLight" lang=EN-US>Submitting and Controlling a Urb</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>When the driver has data to send to the USB device (as typically happens in a driver</SPAN><SPAN style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>s </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>write </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>function), a urb must be allocated for transmitting the data to the device:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>urb = usb_alloc_urb(0, GFP_KERNEL);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (!urb) {</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>retval = -ENOMEM;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>goto error;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>After the urb is allocated successfully, a DMA buffer should also be created to send the data to the device in the most efficient manner, and the data that is passed to the driver should be copied into that buffer:</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>buf = usb_buffer_alloc(dev-&gt;udev, count, GFP_KERNEL, &amp;urb-&gt;transfer_dma);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (!buf) {</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>retval = -ENOMEM;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>goto error;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (copy_from_user(buf, user_buffer, count)) {</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>retval = -EFAULT;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>goto error;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Once the data is properly copied from the user space into the local buffer, the urb must be initialized correctly before it can be submitted to the USB core:</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/* initialize the urb properly */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>usb_fill_bulk_urb(urb, dev-&gt;udev,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>usb_sndbulkpipe(dev-&gt;udev, dev-&gt;bulk_out_endpointAddr),</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>buf, count, skel_write_bulk_callback, dev);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>urb-&gt;transfer_flags |= URB_NO_TRANSFER_DMA_MAP;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Now that the urb is properly allocated, the data is properly copied, and the urb is properly initialized, it can be submitted to the USB core to be transmitted to the device:</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/* send the data out the bulk port */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>retval = usb_submit_urb(urb, GFP_KERNEL);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (retval) {</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>err("%s - failed submitting write urb, error %d", __FUNCTION__, retval);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>goto error;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>After the urb is successfully transmitted to the USB device (or something happens in transmission), the urb callback is called by the USB core. In our example, we initialized the urb to point to the function </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>skel_write_bulk_callback</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, and that is the function that is called:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>static void skel_write_bulk_callback(struct urb *urb, struct pt_regs *regs)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>{</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/* sync/async unlink faults aren't errors */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (urb-&gt;status &amp;&amp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>!(urb-&gt;status = = -ENOENT ||</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>urb-&gt;status = = -ECONNRESET ||</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>urb-&gt;status = = -ESHUTDOWN)) {</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>dbg("%s - nonzero write bulk status received: %d",</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>__FUNCTION__, urb-&gt;status);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/* free up our allocated buffer */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>usb_buffer_free(urb-&gt;dev, urb-&gt;transfer_buffer_length,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>urb-&gt;transfer_buffer, urb-&gt;transfer_dma);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The first thing the callback function does is check the status of the urb to determine if this urb completed successfully or not. The error values, </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>-ENOENT</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>-ECONNRESET</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, and </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>-ESHUTDOWN </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>are not real transmission errors, just reports about conditions accompanying a successful transmission. (See the list of possible errors for urbs detailed in the section </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>struct urb.</SPAN>&#8221;<SPAN lang=EN-US>) Then the callback frees up the allocated buffer that was assigned to this urb to transmit.</SPAN></SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>It</SPAN><SPAN style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>s common for another urb to be submitted to the device while the urb callback function is running. This is useful when streaming data to a device. Remember that the urb callback is running in interrupt context, so it should do any memory allocation, hold any semaphores, or do anything else that could cause the process to sleep. When submitting a urb from within a callback, use the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>GFP_ATOMIC </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>flag to tell the USB core to not sleep if it needs to allocate new memory chunks during the submission process.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 26pt; mso-bidi-font-size: 18.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt" lang=EN-US>USB Transfers Without Urbs</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>Sometimes a USB driver does not want to go through all of the hassle of creating a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>struct urb</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>, initializing it, and then waiting for the urb completion function to run, just to send or receive some simple USB data. Two functions are available to provide a simpler interface.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 22pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt" lang=EN-US>usb_bulk_msg</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>usb_bulk_msg </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>creates a USB bulk urb and sends it to the specified device, then waits for it to complete before returning to the caller. It is defined as:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>int usb_bulk_msg(struct usb_device *usb_dev, unsigned int pipe,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>void *data, int len, int *actual_length,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>int timeout);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>The parameters of this function are:</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>struct usb_device *usb_dev</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>A pointer to the USB device to send the bulk message to.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>unsigned int pipe</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>The specific endpoint of the USB device to which this bulk message is to be sent. This value is created with a call to either </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>usb_sndbulkpipe </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>or </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>usb_rcvbulkpipe</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>void *data</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>A pointer to the data to send to the device if this is an OUT endpoint. If this is an IN endpoint, this is a pointer to where the data should be placed after being read from the device.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>int len</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>The length of the buffer that is pointed to by the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>data </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>parameter.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>int *actual_length</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>A pointer to where the function places the actual number of bytes that have either been transferred to the device or received from the device, depending on the direction of the endpoint.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>int timeout</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>The amount of time, in jiffies, that should be waited before timingout. If this value is </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>0</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>, the function waits forever for the message to complete.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>If the function is successful, the return value is </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>0</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>; otherwise, a negative error number is returned. This error number matches up with the error numbers previously described for urbs in the section </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold">&#8220;<SPAN lang=EN-US>struct urb.</SPAN>&#8221;<SPAN lang=EN-US> If successful, the </SPAN></SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>actual_length </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>parameter contains the number of bytes that were transferred or received from this message.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>The following is an example of using this function call:</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>/* do a blocking bulk read to get data from the device */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>retval = usb_bulk_msg(dev-&gt;udev,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>usb_rcvbulkpipe(dev-&gt;udev, dev-&gt;bulk_in_endpointAddr),</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>dev-&gt;bulk_in_buffer,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>min(dev-&gt;bulk_in_size, count),</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&amp;count, HZ*10);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/* if the read was successful, copy the data to user space */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (!retval) {</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (copy_to_user(buffer, dev-&gt;bulk_in_buffer, count))</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>retval = -EFAULT;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>else</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>retval = count;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>This example shows a simple bulk read from an IN endpoint. If the read is successful, the data is then copied to user space. This is typically done in a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>read </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>function for a USB driver.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_bulk_msg </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>function cannot be called from within interrupt context or with a spinlock held. Also, this function cannot be canceled by any other function, so be careful when using it; make sure that your driver</SPAN><SPAN style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>s </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>disconnect </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>knows enough to wait for the call to complete before allowing itself to be unloaded from memory.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 22pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-SemiLight" lang=EN-US>usb_control_msg</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_control_msg </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>function works just like the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_bulk_msg </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>function, except it allows a driver to send and receive USB control messages:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int usb_control_msg(struct usb_device *dev, unsigned int pipe,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>__u8 request, __u8 requesttype,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>__u16 value, __u16 index,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void *data, __u16 size, int timeout);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The parameters of this function are almost the same as </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_bulk_msg</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, with a few important differences:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>struct usb_device *dev</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>A pointer to the USB device to send the control message to.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>unsigned int pipe</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The specific endpoint of the USB device that this control message is to be sent to. This value is created with a call to either </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_sndctrlpipe </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>or </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_rcvctrlpipe</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>__u8 request</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>The USB request value for the control message.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>__u8 requesttype</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>The USB request type value for the control message</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>__u16 value</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>The USB message value for the control message.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>__u16 index</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>The USB message index value for the control message.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void *data</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>A pointer to the data to send to the device if this is an OUT endpoint. If this is an IN endpoint, this is a pointer to where the data should be placed after being read from the device.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>__u16 size</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The size of the buffer that is pointed to by the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>data </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>parameter.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int timeout</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The amount of time, in jiffies, that should be waited before timing out. If this value is </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>0</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, the function will wait forever for the message to complete.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>If the function is successful, it returns the number of bytes that were transferred to or from the device. If it is not successful, it returns a negative error number.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The parameters </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>request</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>requesttype</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>value</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, and </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>index </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>all directly map to the USB specification for how a USB control message is defined. For more information on the valid values for these parameters and how they are used, see Chapter 9 of the USB specification.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Like the function </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_bulk_msg</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, the function </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_control_msg </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>cannot be called from within interrupt context or with a spinlock held. Also, this function cannot be canceled by any other function, so be careful when using it; make sure that your driver </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>disconnect </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>function knows enough to wait for the call to complete before allowing itself to be unloaded from memory.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 22pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-SemiLight" lang=EN-US>Other USB Data Functions</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>A number of helper functions in the USB core can be used to retrieve standard information from all USB devices. These functions cannot be called from within interrupt context or with a spinlock held.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The function </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_get_descriptor </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>retrieves the specified USB descriptor from the specified device. The function is defined as:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int usb_get_descriptor(struct usb_device *dev, unsigned char type,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>unsigned char index, void *buf, int size);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>This function can be used by a USB driver to retrieve from the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_device </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>structure any of the device descriptors that are not already present in the existing </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_device </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>and </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct usb_interface </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>structures, such as audio descriptors or other class specific information. The parameters of the function are:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>struct usb_device *usb_dev</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>A pointer to the USB device that the descriptor should be retrieved from.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>unsigned char type</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>The descriptor type. This type is described in the USB specification and can be one of the following types:</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>USB_DT_DEVICE</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>USB_DT_CONFIG</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>USB_DT_STRING</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>USB_DT_INTERFACE</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>USB_DT_ENDPOINT</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>USB_DT_DEVICE_QUALIFIER</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>USB_DT_OTHER_SPEED_CONFIG</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>USB_DT_INTERFACE_POWER</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>USB_DT_OTG</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>USB_DT_DEBUG</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>USB_DT_INTERFACE_ASSOCIATION</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>USB_DT_CS_DEVICE</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>USB_DT_CS_CONFIG</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>USB_DT_CS_STRING</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>USB_DT_CS_INTERFACE</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>USB_DT_CS_ENDPOINT</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>unsigned char index</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>The number of the descriptor that should be retrieved from the device.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void *buf</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>A pointer to the buffer to which you copy the descriptor.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int size</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The size of the memory pointed to by the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>buf </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>variable.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>If this function is successful, it returns the number of bytes read from the device. Otherwise, it returns a negative error number returned by the underlying call to </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_control_msg </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>that this function makes.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>One of the more common uses for the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_get_descriptor </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>call is to retrieve a string from the USB device. Because this is quite common, there is a helper function for it called </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_get_string</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int usb_get_string(struct usb_device *dev, unsigned short langid,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>unsigned char index, void *buf, int size);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>If successful, this function returns the number of bytes received by the device for the string. Otherwise, it returns a negative error number returned by the underlying call to </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_control_msg </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>that this function makes.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>If this function is successful, it returns a string encoded in the UTF-16LE format (Unicode, 16 bits per character, in little-endian byte order) in the buffer pointed to by the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>buf </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>parameter. As this format is usually not very useful, there is another function, called </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_string</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, that returns a string that is read from a USB device and is already converted into an ISO 8859-1 format string. This character set is a 8-bit subset of Unicode and is the most common format for strings in English and other Western European languages. As this is typically the format that the USB device</SPAN><SPAN style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>s strings are in, it is recommended that the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_string </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>function be used instead of the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>usb_get_string </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>function.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 26pt; mso-bidi-font-size: 18.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt" lang=EN-US>Quick Reference</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>This section summarizes the symbols introduced in the chapter:</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>#include &lt;linux/usb.h&gt;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>Header file where everythingrelated to USB resides. It must be included by all USB device drivers.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>struct usb_driver;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>Structure that describes a USB driver.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>struct usb_device_id;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>Structure that describes the types of USB devices this driver supports.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>int usb_register(struct usb_driver *d);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>void usb_deregister(struct usb_driver *d);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>Functions used to register and unregister a USB driver from the USB core.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>struct usb_device *interface_to_usbdev(struct usb_interface *intf);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>Retrieves the controlling </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>struct usb_device * </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>out of a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>struct usb_interface *</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>struct usb_device;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>Structure that controls an entire USB device.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>struct usb_interface;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>Main USB device structure that all USB drivers use to communicate with the USB core.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>void usb_set_intfdata(struct usb_interface *intf, void *data);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>void *usb_get_intfdata(struct usb_interface *intf);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>Functions to set and get access to the private data pointer section within the</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>struct usb_interface</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>struct usb_class_driver;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>A structure that describes a USB driver that wants to use the USB major number to communicate with user-space programs.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>int usb_register_dev(struct usb_interface *intf, struct usb_class_driver</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>*class_driver);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>void usb_deregister_dev(struct usb_interface *intf, struct usb_class_driver</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>*class_driver);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>Functions used to register and unregister a specific </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>struct usb_interface * </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>structure</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>with a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>struct usb_class_driver * </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>structure.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>struct urb;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>Structure that describes a USB data transmission.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>struct urb *usb_alloc_urb(int iso_packets, int mem_flags);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>void usb_free_urb(struct urb *urb);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>Functions used to create and destroy a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>struct usb urb *</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int usb_submit_urb(struct urb *urb, int mem_flags);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int usb_kill_urb(struct urb *urb);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int usb_unlink_urb(struct urb *urb);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Functions used to start and stop a USB data transmission.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void usb_fill_int_urb(struct urb *urb, struct usb_device *dev, unsigned int</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>pipe, void *transfer_buffer, int buffer_length, usb_complete_t complete,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void *context, int interval);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void usb_fill_bulk_urb(struct urb *urb, struct usb_device *dev, unsigned int</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>pipe, void *transfer_buffer, int buffer_length, usb_complete_t complete,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void *context);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void usb_fill_control_urb(struct urb *urb, struct usb_device *dev, unsigned</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int pipe, unsigned char *setup_packet, void *transfer_buffer, int</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>buffer_ length, usb_complete_t complete, void *context);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Functions used to initialize a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct urb </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>before it is submitted to the USB core.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int usb_bulk_msg(struct usb_device *usb_dev, unsigned int pipe, void *data,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int len, int *actual_length, int timeout);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int usb_control_msg(struct usb_device *dev, unsigned int pipe, __u8 request,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>__u8 requesttype, __u16 value, __u16 index, void *data, __u16 size,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int timeout);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Functions used to send or receive USB data without having to use a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct urb</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>.</SPAN></FONT><SPAN style="FONT-SIZE: 14.5pt; mso-bidi-font-size: 11.0pt" lang=EN-US></SPAN>