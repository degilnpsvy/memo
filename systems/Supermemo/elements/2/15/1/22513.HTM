<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; COLOR: black; FONT-SIZE: 24pt; mso-bidi-font-size: 16.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt" lang=EN-US>CHAPTER 11 </SPAN><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; COLOR: black; FONT-SIZE: 48pt; mso-bidi-font-size: 24.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt" lang=EN-US>Data Types in the Kernel</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Before we go on to more advanced topics, we need to stop for a quick note on portability issues. Modern versions of the Linux kernel are highly portable, running on numerous different architectures. Given the multiplatform nature of Linux, drivers intended for serious use should be portable as well.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>But a core issue with kernel code is being able both to access data items of known length (for example, filesystem data structures or registers on device boards) and to exploit the capabilities of different processors (32-bit and 64-bit architectures, and possibly 16 bit as well).</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Several of the problems encountered by kernel developers while porting x86 code to new architectures have been related to incorrect data typing. Adherence to strict data typing and compiling with the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>-Wall -Wstrict-prototypes </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>flags can prevent most bugs. Data types used by kernel data are divided into three main classes: standard C types such as </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>int</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, explicitly sized types such as </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>u32</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, and types used for specific kernel objects, such as </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>pid_t</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>. We are going to see when and how each of the three typing classes should be used. The final sections of the chapter talk about some other typical problems you might run into when porting driver code from the x86 to other platforms, and introduce the generalized support for linked lists exported by recent kernel headers.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>If you follow the guidelines we provide, your driver should compile and run even on platforms on which you are unable to test it.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 26pt; mso-bidi-font-size: 18.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Use of Standard C Types</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Although most programmers are accustomed to freely using standard types like </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>int </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>and </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>long</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, writing device drivers requires some care to avoid typing conflicts and obscure bugs.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The problem is that you can</SPAN><SPAN style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>t use the standard types when you need </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>a 2-byte filler</SPAN>&#8221;<SPAN lang=EN-US>or </SPAN>&#8220;<SPAN lang=EN-US>something representing a 4-byte string,</SPAN>&#8221;<SPAN lang=EN-US> because the normal C data types are not the same size on all architectures. To show the data size of the various C types, the </SPAN></SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>datasize </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>program has been included in the sample files provided on O</SPAN><SPAN style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Reilly</SPAN><SPAN style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>s FTP site in the directory </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>misc-progs</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>. This is a sample run of the program on an i386 system (the last four types shown are introduced in the next section):</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>morgana% misc-progs/datasize</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>arch Size: char short int long ptr long-long u8 u16 u32 u64</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>i686 1 2 4 4 4 8 1 2 4 8</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The program can be used to show that </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>long </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>integers and pointers feature a different size on 64-bit platforms, as demonstrated by running the program on different Linux computers:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>arch Size: char short int long ptr long-long u8 u16 u32 u64</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>i386 1 2 4 4 4 8 1 2 4 8</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>alpha 1 2 4 8 8 8 1 2 4 8</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>armv4l 1 2 4 4 4 8 1 2 4 8</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ia64 1 2 4 8 8 8 1 2 4 8</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>m68k 1 2 4 4 4 8 1 2 4 8</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>mips 1 2 4 4 4 8 1 2 4 8</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ppc 1 2 4 4 4 8 1 2 4 8</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>sparc 1 2 4 4 4 8 1 2 4 8</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>sparc64 1 2 4 4 4 8 1 2 4 8</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>x86_64 1 2 4 8 8 8 1 2 4 8</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>It</SPAN><SPAN style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>s interesting to note that the SPARC 64 architecture runs with a 32-bit user space, so pointers are 32 bits wide there, even though they are 64 bits wide in kernel space. This can be verified by loading the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>kdatasize </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>module (available in the directory </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>miscmodules </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>within the sample files). The module reports size information at load time using </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>printk </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>and returns an error (so there</SPAN><SPAN style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>s no need to unload it):</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>kernel: arch Size: char short int long ptr long-long u8 u16 u32 u64</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>kernel: sparc64 1 2 4 8 8 8 1 2 4 8</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Although you must be careful when mixing different data types, sometimes there are good reasons to do so. One such situation is for memory addresses, which are special as far as the kernel is concerned. Although, conceptually, addresses are pointers, memory administration is often better accomplished by using an unsigned integer type; the kernel treats physical memory like a huge array, and a memory address is just an index into the array. Furthermore, a pointer is easily dereferenced; when dealing</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>directly with memory addresses, you almost never want to dereference them in this manner. Using an integer type prevents this dereferencing, thus avoiding bugs. Therefore, generic memory addresses in the kernel are usually </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>unsigned long</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, exploiting the fact that pointers and </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>long </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>integers are always the same size, at least on all the platforms currently supported by Linux.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>For what it</SPAN><SPAN style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>s worth, the C99 standard defines the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>intptr_t </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>and </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>uintptr_t </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>types for an integer variable that can hold a pointer value. These types are almost unused in the 2.6 kernel, however.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 26pt; mso-bidi-font-size: 18.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt" lang=EN-US>Assigning an Explicit Size to Data Items</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>Sometimes kernel code requires data items of a specific size, perhaps to match predefined binary structures,</SPAN><SPAN style="FONT-FAMILY: Birka; mso-bidi-font-size: 7.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT size=3>*(</FONT></SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US> This happens when reading partition tables, when executing a binary file, or when decoding a network packet.</SPAN><SPAN style="FONT-FAMILY: Birka; mso-bidi-font-size: 7.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT size=3>) </FONT></SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>to communicate with user space, or to align data within structures by inserting </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold">&#8220;<SPAN lang=EN-US>padding</SPAN>&#8221;<SPAN lang=EN-US> fields (but refer to the section </SPAN>&#8220;<SPAN lang=EN-US>Data Alignment</SPAN>&#8221; <SPAN lang=EN-US>for information about alignment issues).</SPAN></SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>The kernel offers the following data types to use whenever you need to know the size of your data. All the types are declared in </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>&lt;asm/types.h&gt;</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>, which, in turn, is included by </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>&lt;linux/types.h&gt;</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>u8; /* unsigned byte (8 bits) */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>u16; /* unsigned word (16 bits) */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>u32; /* unsigned 32-bit value */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>u64; /* unsigned 64-bit value */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>The corresponding signed types exist, but are rarely needed; just replace </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>u </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>with </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>s </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>in the name if you need them.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>If a user-space program needs to use these types, it can prefixthe names with a double underscore: </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>__u8 </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>and the other types are defined independent of </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>__KERNEL__</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>. If, for example, a driver needs to exchange binary structures with a program running in user space by means of </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>ioctl</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>, the header files should declare 32-bit fields in the structures as </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>__u32</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>It</FONT></SPAN><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>s important to remember that these types are Linuxspecific, and using them hinders porting software to other Unixflavors. Systems with recent compilers support the C99-standard types, such as </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>uint8_t </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>and </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>uint32_t</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>; if portability is a concern, those types can be used in favor of the Linux-specific variety.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>You might also note that sometimes the kernel uses conventional types, such as </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>unsigned int</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>, for items whose dimension is architecture independent. This is usually done for backward compatibility. When </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>u32 </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>and friends were introduced in Version 1.1.67, the developers couldn</SPAN></FONT><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>t change existing data structures to the new types because the compiler issues a warning when there is a type mismatch between the structure field and the value being assigned to it.</FONT></SPAN><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 11.5pt; mso-bidi-font-size: 7.5pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8224;<SPAN lang=EN-US>(</SPAN></SPAN><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>As a matter of fact, the compiler signals type inconsistencies even if the two types are just different names for the same object, such as </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 10pt; mso-bidi-font-size: 7.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>unsigned long </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>and </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 10pt; mso-bidi-font-size: 7.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>u32 </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>on the PC.</SPAN></FONT><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 11.5pt; mso-bidi-font-size: 7.5pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt" lang=EN-US>)</SPAN><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; mso-bidi-font-size: 7.5pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT size=3> </FONT></SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>Linus didn</SPAN></FONT><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>t expect the operating system (OS) he wrote for his own use to become multiplatform; as a result, old structures are sometimes loosely typed.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 26pt; mso-bidi-font-size: 18.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt" lang=EN-US>Interface-Specific Types</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>Some of the commonly used data types in the kernel have their own </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>typedef </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>statements, thus preventing any portability problems. For example, a process identifier (pid) is usually </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>pid_t </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>instead of </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>int</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>. Using </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>pid_t </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>masks any possible difference in the actual data typing. We use the expression </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>interface-specific </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>to refer to a type defined by a library in order to provide an interface to a specific data structure. </SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>Note that, in recent times, relatively few new interface-specific types have been defined. Use of the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>typedef </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>statement has gone out of favor among many kernel developers, who would rather see the real type information used directly in the code, rather than hidden behind a user-defined type. Many older interface-specific types remain in the kernel, however, and they will not be going away anytime soon. </SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>Even when no interface-specific type is defined, it</FONT></SPAN><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>s always important to use the proper data type in a way consistent with the rest of the kernel. A jiffy count, for instance, is always </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>unsigned long</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>, independent of its actual size, so the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>unsigned long </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>type should always be used when working with jiffies. In this section we concentrate on use of </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>_t </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>types.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>Many </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>_t </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>types are defined in </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>&lt;linux/types.h&gt;</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>, but the list is rarely useful. When you need a specific type, you</SPAN></FONT><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>ll find it in the prototype of the functions you need to call or in the data structures you use.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>Whenever your driver uses functions that require such </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold">&#8220;<SPAN lang=EN-US>custom</SPAN>&#8221;<SPAN lang=EN-US> types and you don</SPAN></SPAN></FONT><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>t follow the convention, the compiler issues a warning; if you use the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>-Wall </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>compiler flag and are careful to remove all the warnings, you can feel confident that your code is portable.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>The main problem with </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>_t </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>data items is that when you need to print them, it</SPAN></FONT><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>s not always easy to choose the right </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>printk </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>or </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>printf </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>format, and warnings you resolve on one architecture reappear on another. For example, how would you print a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>size_t</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>, that is </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>unsigned long </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>on some platforms and </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>unsigned int </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>on some others?</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>Whenever you need to print some interface-specific data, the best way to do it is by casting the value to the biggest possible type (usually </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>long </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>or </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>unsigned long</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>) and then printing it through the corresponding format. This kind of tweaking won</SPAN></FONT><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>t generate errors or warnings because the format matches the type, and you won</FONT></SPAN><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>t lose data bits because the cast is either a null operation or an extension of the item to a bigger data type.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>In practice, the data items we</FONT></SPAN><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>re talking about aren</FONT></SPAN><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>t usually meant to be printed, so the issue applies only to debugging messages. Most often, the code needs only to store and compare the interface-specific types, in addition to passing them as arguments to library or kernel functions.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>Although </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>_t </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>types are the correct solution for most situations, sometimes the right type doesn</SPAN></FONT><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>t exist. This happens for some old interfaces that haven</FONT></SPAN><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US><FONT face=Calibri>t yet been cleaned up.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The one ambiguous point we</SPAN><SPAN style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>ve found in the kernel headers is data typing for I/O functions, which is loosely defined (see the section </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>Platform Dependencies</SPAN>&#8221;<SPAN lang=EN-US> in Chapter 9). The loose typing is mainly there for historical reasons, but it can create problems when writing code. For example, one can get into trouble by swapping the arguments to functions like </SPAN></SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>outb</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>; if there were a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>port_t </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>type, the compiler would find this type of error.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 26pt; mso-bidi-font-size: 18.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Other Portability Issues</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>In addition to data typing, there are a few other software issues to keep in mind when writing a driver if you want it to be portable across Linux platforms.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>A general rule is to be suspicious of explicit constant values. Usually the code has been parameterized using preprocessor macros. This section lists the most important portability problems. Whenever you encounter other values that have been parameterized, you can find hints in the header files and in the device drivers distributed with the official kernel.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 22pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Time Intervals</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>When dealing with time intervals, don</SPAN><SPAN style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>t assume that there are 1000 jiffies per second. Although this is currently true for the i386 architecture, not every Linuxplatform runs at this speed. The assumption can be false even for the x86 if you play with the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>HZ </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>value (as some people do), and nobody knows what will happen in future kernels. Whenever you calculate time intervals using jiffies, scale your times using </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>HZ </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>(the number of timer interrupts per second). For example, to check against a timeout of half a second, compare the elapsed time against </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>HZ/2</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>. More generally, the number of jiffies corresponding to </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>msec </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>milliseconds is always </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>msec*HZ/1000</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 22pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Page Size</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>When playing games with memory, remember that a memory page is </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>PAGE_SIZE </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>bytes, not 4 KB. Assuming that the page size is 4 KB and hardcoding the value is a common error among PC programmers, instead, supported platforms show page sizes from 4 KB to 64 KB, and sometimes they differ between different implementations of the same platform. The relevant macros are </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>PAGE_SIZE </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>and </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>PAGE_SHIFT</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>. The latter contains the number of bits to shift an address to get its page number. The number currently is 12 or greater for pages that are 4 KB and larger. The macros are defined in </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>&lt;asm/page.h&gt;</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>; user-space programs can use the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>getpagesize </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>library function if they ever need the information.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Let</SPAN><SPAN style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>s look at a nontrivial situation. If a driver needs 16 KB for temporary data, it shouldn</SPAN><SPAN style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>t specify an </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>order </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>of </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>2 </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>to </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>get_free_pages</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>. You need a portable solution. Such a solution, fortunately, has been written by the kernel developers and is called </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>get_order</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>#include &lt;asm/page.h&gt;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int order = get_order(16*1024);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>buf = get_free_pages(GFP_KERNEL, order);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Remember that the argument to </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>get_order </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>must be a power of two.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 22pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Byte Order</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Be careful not to make assumptions about byte ordering. Whereas the PC stores multibyte values low-byte first (little end first, thus little-endian), some high-level platforms work the other way (big-endian). Whenever possible, your code should be written such that it does not care about byte ordering in the data it manipulates. However, sometimes a driver needs to build an integer number out of single bytes or do the opposite, or it must communicate with a device that expects a specific order.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The include file </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>&lt;asm/byteorder.h&gt; </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>defines either </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>__BIG_ENDIAN </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>or </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>__LITTLE_ENDIAN</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, depending on the processor</SPAN><SPAN style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>s byte ordering. When dealing with byte ordering issues, you could code a bunch of </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>#ifdef __LITTLE_ENDIAN </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>conditionals, but there is a better way. The Linuxkernel defines a set of macros that handle conversions between the processor</SPAN><SPAN style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>s byte ordering and that of the data you need to store or load in a specific byte order. For example:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>u32 cpu_to_le32 (u32);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>u32 le32_to_cpu (u32);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>These two macros convert a value from whatever the CPU uses to an unsigned, littleendian, 32-bit quantity and back. They work whether your CPU is big-endian or little-endian and, for that matter, whether it is a 32-bit processor or not. They return their argument unchanged in cases where there is no work to be done. Use of these macros makes it easy to write portable code without having to use a lot of conditional compilation constructs.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>There are dozens of similar routines; you can see the full list in </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>&lt;linux/byteorder/big_endian.h&gt; </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>&lt;linux/byteorder/little_endian.h&gt;</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>. After a while, the pattern is not hard to follow. </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>be64_to_cpu </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>converts an unsigned, big-endian, 64-bit value to the internal CPU representation. </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>le16_to_cpus</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, instead, handles signed, littleendian, 16-bit quantities. When dealing with pointers, you can also use functions like </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>cpu_to_le32p</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, which take a pointer to the value to be converted rather than the value itself. See the include file for the rest.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 22pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Data Alignment</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The last problem worth considering when writing portable code is how to access unaligned data</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8212;<SPAN lang=EN-US>for example, how to read a 4-byte value stored at an address that isn</SPAN></SPAN><SPAN style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>t a multiple of 4 bytes. i386 users often access unaligned data items, but not all architectures permit it. Many modern architectures generate an exception every time the program tries unaligned data transfers; data transfer is handled by the exception handler, with a great performance penalty. If you need to access unaligned data, you should use the following macros:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>#include &lt;asm/unaligned.h&gt;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>get_unaligned(ptr);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>put_unaligned(val, ptr);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>These macros are typeless and work for every data item, whether it</SPAN><SPAN style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>s one, two, four, or eight bytes long. They are defined with any kernel version.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Another issue related to alignment is portability of data structures across platforms. The same data structure (as defined in the C-language source file) can be compiled differently on different platforms. The compiler arranges structure fields to be aligned according to conventions that differ from platform to platform.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>In order to write data structures for data items that can be moved across architectures, you should always enforce natural alignment of the data items in addition to standardizing on a specific endianness. </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>Natural alignment </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>means storing data items at an address that is a multiple of their size (for instance, 8-byte items go in an address multiple of 8). To enforce natural alignment while preventing the compiler to arrange the fields in unpredictable ways, you should use filler fields that avoid leaving holes in the data structure.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>To show how alignment is enforced by the compiler, the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>dataalign </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>program is distributed in the </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>misc-progs </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>directory of the sample code, and an equivalent </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>kdataalign </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>module is part of </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>misc-modules</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>. This is the output of the program on several platforms and the output of the module on the SPARC64:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>arch Align: char short int long ptr long-long u8 u16 u32 u64</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>i386 1 2 4 4 4 4 1 2 4 4</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>i686 1 2 4 4 4 4 1 2 4 4</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>alpha 1 2 4 8 8 8 1 2 4 8</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>armv4l 1 2 4 4 4 4 1 2 4 4</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ia64 1 2 4 8 8 8 1 2 4 8</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>mips 1 2 4 4 4 8 1 2 4 8</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>ppc 1 2 4 4 4 8 1 2 4 8</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>sparc 1 2 4 4 4 8 1 2 4 8</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>sparc64 1 2 4 4 4 8 1 2 4 8</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>x86_64 1 2 4 8 8 8 1 2 4 8</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>kernel: arch Align: char short int long ptr long-long u8 u16 u32 u64</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>kernel: sparc64 1 2 4 8 8 8 1 2 4 8</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>It</SPAN><SPAN style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: Birka; mso-fareast-font-family: Birka" lang=EN-US>&#8217;</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>s interesting to note that not all platforms align 64-bit values on 64-bit boundaries, so you need filler fields to enforce alignment and ensure portability.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Finally, be aware that the compiler may quietly insert padding into structures itself to ensure that every field is aligned for good performance on the target processor. If you are defining a structure that is intended to match a structure expected by a device, this automatic padding may thwart your attempt. The way around this problem is to tell the compiler that the structure must be </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>packed,</SPAN>&#8221;<SPAN lang=EN-US> with no fillers added. For example, the kernel header file </SPAN></SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>&lt;linux/edd.h&gt; </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>defines several data structures used in interfacing with the x86 BIOS, and it includes the following definition:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>struct {</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>u16 id;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>u64 lun;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>u16 reserved1;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>u32 reserved2;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>} __attribute__ ((packed)) scsi;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Without the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>__attribute__ ((packed))</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>lun </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>field would be preceded by two filler bytes or six if we compile the structure on a 64-bit platform.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 22pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Pointers and Error Values</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Many internal kernel functions return a pointer value to the caller. Many of those functions can also fail. In most cases, failure is indicated by returning a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>NULL </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>pointer value. This technique works, but it is unable to communicate the exact nature of the problem. Some interfaces really need to return an actual error code so that the caller can make the right decision based on what actually went wrong.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>A number of kernel interfaces return this information by encoding the error code in a pointer value. Such functions must be used with care, since their return value cannot simply be compared against </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>NULL</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>. To help in the creation and use of this sort of interface, a small set of functions has been made available (in </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>&lt;linux/err.h&gt;</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>).</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>A function returning a pointer type can return an error value with:</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void *ERR_PTR(long error);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>where </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>error </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>is the usual negative error code. The caller can use </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>IS_ERR </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>to test whether a returned pointer is an error code or not:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>long IS_ERR(const void *ptr);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>If you need the actual error code, it can be extracted with:</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>long PTR_ERR(const void *ptr);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>You should use </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>PTR_ERR </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>only on a value for which </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>IS_ERR </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>returns a true value; any other value is a valid pointer.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 26pt; mso-bidi-font-size: 18.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Linked Lists</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Operating system kernels, like many other programs, often need to maintain lists of data structures. The Linuxkernel has, at times, been host to several linked list implementations at the same time. To reduce the amount of duplicated code, the kernel developers have created a standard implementation of circular, doubly linked lists; others needing to manipulate lists are encouraged to use this facility.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>When working with the linked list interface, you should always bear in mind that the list functions perform no locking. If there is a possibility that your driver could attempt to perform concurrent operations on the same list, it is your responsibility to implement a locking scheme. The alternatives (corrupted list structures, data loss, kernel panics) tend to be difficult to diagnose.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>To use the list mechanism, your driver must include the file </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>&lt;linux/list.h&gt;</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>. This file defines a simple structure of type </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>list_head</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>struct list_head {</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>struct list_head *next, *prev;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>};</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Linked lists used in real code are almost invariably made up of some type of structure, each one describing one entry in the list. To use the Linuxlist facility in your code, you need only embed a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>list_head </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>inside the structures that make up the list. If your driver maintains a list of things to do, say, its declaration would look something like this:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>struct todo_struct {</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>struct list_head list;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>int priority; /* driver specific */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>/* ... add other driver-specific fields */</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>};</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The head of the list is usually a standalone </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>list_head </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>structure. Figure 11-1 shows how the simple </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct list_head </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>is used to maintain a list of data structures.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-SIZE: 14.5pt; mso-bidi-font-size: 11.0pt; mso-no-proof: yes" lang=EN-US><v:shapetype id=_x0000_t75 stroked="f" filled="f" path="m@4@5l@4@11@9@11@9@5xe" o:preferrelative="t" o:spt="75" coordsize="21600,21600"><v:stroke joinstyle="miter"></v:stroke><v:formulas><v:f eqn="if lineDrawn pixelLineWidth 0"></v:f><v:f eqn="sum @0 1 0"></v:f><v:f eqn="sum 0 0 @1"></v:f><v:f eqn="prod @2 1 2"></v:f><v:f eqn="prod @3 21600 pixelWidth"></v:f><v:f eqn="prod @3 21600 pixelHeight"></v:f><v:f eqn="sum @0 0 1"></v:f><v:f eqn="prod @6 1 2"></v:f><v:f eqn="prod @7 21600 pixelWidth"></v:f><v:f eqn="sum @8 21600 0"></v:f><v:f eqn="prod @7 21600 pixelHeight"></v:f><v:f eqn="sum @10 21600 0"></v:f></v:formulas><v:path o:connecttype="rect" gradientshapeok="t" o:extrusionok="f"></v:path><o:lock aspectratio="t" v:ext="edit"></o:lock></v:shapetype><v:shape style="WIDTH: 407.25pt; HEIGHT: 259.5pt; VISIBILITY: visible; mso-wrap-style: square" id=&#22270;&#29255;_x0020_1 type="#_x0000_t75" o:spid="_x0000_i1025"><v:imagedata o:title="" src="file:///C:\Users\DONPOP~1\AppData\Local\Temp\msohtmlclip1\01\clip_image001.emz"><FONT face=Calibri></FONT></v:imagedata></v:shape></SPAN><SPAN style="FONT-SIZE: 14.5pt; mso-bidi-font-size: 11.0pt" lang=EN-US></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Figure 11-1. The list_head data structure</FONT></SPAN></I></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></I></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>List heads must be initialized prior to use with the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>INIT_LIST_HEAD </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>macro. A </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>things to do</SPAN>&#8221;<SPAN lang=EN-US> list head could be declared and initialized with:</SPAN></SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>struct list_head todo_list;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>INIT_LIST_HEAD(&amp;todo_list);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Alternatively, lists can be initialized at compile time:</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>LIST_HEAD(todo_list);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Several functions are defined in </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>&lt;linux/list.h&gt; </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>that work with lists:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>list_add(struct list_head *new, struct list_head *head);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Adds the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>new </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>entry immediately after the list head</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8212;<SPAN lang=EN-US>normally at the beginning of the list. Therefore, it can be used to build stacks. Note, however, that the </SPAN></SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>head </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>need not be the nominal head of the list; if you pass a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>list_head </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>structure that happens to be in the middle of the list somewhere, the new entry goes immediately after it. Since Linuxlists are circular, the head of the list is not generally different from any other entry.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>list_add_tail(struct list_head *new, struct list_head *head);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Adds a new entry just before the given list head</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8212;<SPAN lang=EN-US>at the end of the list, in other words. </SPAN></SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>list_add_tail </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>can, thus, be used to build first-in first-out queues.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>list_del(struct list_head *entry);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>list_del_init(struct list_head *entry);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The given entry is removed from the list. If the entry might ever be reinserted into another list, you should use </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>list_del_init</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, which reinitializes the linked list pointers.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>list_move(struct list_head *entry, struct list_head *head);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>list_move_tail(struct list_head *entry, struct list_head *head);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The given </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>entry </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>is removed from its current list and added to the beginning of </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>head</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>. To put the entry at the end of the new list, use </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>list_move_tail </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>instead.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>list_empty(struct list_head *head);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Returns a nonzero value if the given list is empty.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>list_splice(struct list_head *list, struct list_head *head);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Joins two lists by inserting </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>list </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>immediately after </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>head</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>list_head </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>structures are good for implementing a list of like structures, but the invoking program is usually more interested in the larger structures that make up the list as a whole. A macro, </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>list_entry</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, is provided that maps a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>list_head </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>structure pointer back into a pointer to the structure that contains it. It is invoked as follows:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>list_entry(struct list_head *ptr, type_of_struct, field_name);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>where </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>ptr </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>is a pointer to the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct list_head </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>being used, </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>type_of_struct </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>is the type of the structure containing the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>ptr</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, and </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>field_name </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>is the name of the list field within the structure. In our </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>todo_struct </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>structure from before, the list field is called simply </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>list</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>. Thus, we would turn a list entry into its containing structure with a line such as:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>struct todo_struct *todo_ptr =</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>list_entry(listptr, struct todo_struct, list);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>list_entry </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>macro takes a little getting used to but is not that hard to use.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The traversal of linked lists is easy: one need only follow the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>prev </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>and </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>next </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>pointers. As an example, suppose we want to keep the list of </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>todo_struct </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>items sorted in descending priority order. A function to add a new entry would look something like this:</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void todo_add_entry(struct todo_struct *new)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>{</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>struct list_head *ptr;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>struct todo_struct *entry;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>for (ptr = todo_list.next; ptr != &amp;todo_list; ptr = ptr-&gt;next) {</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>entry = list_entry(ptr, struct todo_struct, list);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (entry-&gt;priority &lt; new-&gt;priority) {</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>list_add_tail(&amp;new-&gt;list, ptr);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>list_add_tail(&amp;new-&gt;list, &amp;todo_struct)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>However, as a general rule, it is better to use one of a set of predefined macros for creating loops that iterate through lists. The previous loop, for example, could be coded as:</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void todo_add_entry(struct todo_struct *new)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>{</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>struct list_head *ptr;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>struct todo_struct *entry;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>list_for_each(ptr, &amp;todo_list) {</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>entry = list_entry(ptr, struct todo_struct, list);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>if (entry-&gt;priority &lt; new-&gt;priority) {</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>list_add_tail(&amp;new-&gt;list, ptr);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>return;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>list_add_tail(&amp;new-&gt;list, &amp;todo_struct)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 11pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>}</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Using the provided macros helps avoid simple programming errors; the developers of these macros have also put some effort into ensuring that they perform well. A few variants exist:</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>list_for_each(struct list_head *cursor, struct list_head *list)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>This macro creates a </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>for </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>loop that executes once with </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>cursor </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>pointing at each successive entry in the list. Be careful about changing the list while iterating through it.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>list_for_each_prev(struct list_head *cursor, struct list_head *list)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>This version iterates backward through the list.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>list_for_each_safe(struct list_head *cursor, struct list_head *next, struct</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>list_head *list)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>If your loop may delete entries in the list, use this version. It simply stores the next entry in the list in </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>next </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>at the beginning of the loop, so it does not get confused if the entry pointed to by </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>cursor </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>is deleted.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>list_for_each_entry(type *cursor, struct list_head *list, member)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>list_for_each_entry_safe(type *cursor, type *next, struct list_head *list,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>member)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>These macros ease the process of dealing with a list containing a given </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>type </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>of structure. Here, </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>cursor </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>is a pointer to the containing structure type, and </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>member </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>is the name of the </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>list_head </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>structure within the containing structure. With these macros, there is no need to put </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>list_entry </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>calls inside the loop.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>If you look inside </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>&lt;linux/list.h&gt;</SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, you see some additional declarations. The </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>hlist </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>type is a doubly linked list with a separate, single-pointer list head type; it is often used for creation of hash tables and similar structures. There are also macros for iterating through both types of lists that are intended to work with the read-copy-update mechanism (described in the section </SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>Read-Copy-Update</SPAN>&#8221;<SPAN lang=EN-US> in Chapter 5). These primitives are unlikely to be useful in device drivers; see the header file if you would like more information on how they work.</SPAN></SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 26pt; mso-bidi-font-size: 18.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Quick Reference</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>The following symbols were introduced in this chapter:</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>#include &lt;linux/types.h&gt;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>typedef u8;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>typedef u16;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>typedef u32;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>typedef u64;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Types guaranteed to be 8-, 16-, 32-, and 64-bit unsigned integer values. The equivalent signed types exist as well. In user space, you can refer to the types as </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>__u8</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, </SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>__u16</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, and so forth.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>#include &lt;asm/page.h&gt;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>PAGE_SIZE</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>PAGE_SHIFT</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Symbols that define the number of bytes per page for the current architecture and the number of bits in the page offset (12 for 4-KB pages and 13 for 8-KB pages).</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>#include &lt;asm/byteorder.h&gt;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>__LITTLE_ENDIAN</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>__BIG_ENDIAN</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Only one of the two symbols is defined, depending on the architecture.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>#include &lt;asm/byteorder.h&gt;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>u32 __cpu_to_le32 (u32);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>u32 __le32_to_cpu (u32);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><FONT face=Calibri><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Functions that convert between known byte orders and that of the processor. There are more than 60 such functions; see the various files in </SPAN><I><SPAN style="FONT-FAMILY: Birka-Italic; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>include/linux/byteorder/ </SPAN></I><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>for a full list and the ways in which they are defined.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>#include &lt;asm/unaligned.h&gt;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>get_unaligned(ptr);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>put_unaligned(val, ptr);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Some architectures need to protect unaligned data access using these macros. The macros expand to normal pointer dereferencing for architectures that permit you to access unaligned data.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>#include &lt;linux/err.h&gt;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>void *ERR_PTR(long error);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>long PTR_ERR(const void *ptr);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>long IS_ERR(const void *ptr);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Functions allow error codes to be returned by functions that return a pointer value.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>#include &lt;linux/list.h&gt;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>list_add(struct list_head *new, struct list_head *head);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>list_add_tail(struct list_head *new, struct list_head *head);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>list_del(struct list_head *entry);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>list_del_init(struct list_head *entry);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>list_empty(struct list_head *head);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>list_entry(entry, type, member);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>list_move(struct list_head *entry, struct list_head *head);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>list_move_tail(struct list_head *entry, struct list_head *head);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>list_splice(struct list_head *list, struct list_head *head);</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Functions that manipulate circular, doubly linked lists.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>list_for_each(struct list_head *cursor, struct list_head *list)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>list_for_each_prev(struct list_head *cursor, struct list_head *list)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>list_for_each_safe(struct list_head *cursor, struct list_head *next, struct</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>list_head *list)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>list_for_each_entry(type *cursor, struct list_head *list, member)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>list_for_each_entry_safe(type *cursor, type *next struct list_head *list,</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>member)</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>Convenience macros for iterating through linked lists.</FONT></SPAN><SPAN style="FONT-SIZE: 14.5pt; mso-bidi-font-size: 11.0pt" lang=EN-US></SPAN>