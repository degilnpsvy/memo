<FONT class=extract>1.0 The simplest example<BR>~~~~~~~~~~~~~~~~~~~~~~~~</FONT> 
<P></P>
<P><FONT class=extract>Here comes a very simple example of an input device driver. The device has<BR>just one button and the button is accessible at i/o port BUTTON_PORT. When<BR>pressed or released a BUTTON_IRQ happens. The driver could look like:</FONT></P>
<P><FONT class=extract>#include &lt;linux/input.h&gt;<BR>#include &lt;linux/module.h&gt;<BR>#include &lt;linux/init.h&gt;</FONT></P>
<P><FONT class=extract>#include &lt;asm/irq.h&gt;<BR>#include &lt;asm/io.h&gt;</FONT></P>
<P><FONT class=extract>static struct input_dev *button_dev;</FONT></P>
<P><FONT class=extract>static irqreturn_t button_interrupt(int irq, void *dummy)<BR>{<BR>&nbsp;input_report_key(button_dev, BTN_0, inb(BUTTON_PORT) &amp; 1);<BR>&nbsp;input_sync(button_dev);<BR>&nbsp;return IRQ_HANDLED;<BR>}</FONT></P>
<P><FONT class=extract>static int __init button_init(void)<BR>{<BR>&nbsp;int error;</FONT></P>
<P><FONT class=extract>&nbsp;if (request_irq(BUTTON_IRQ, button_interrupt, 0, "button", NULL)) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printk(KERN_ERR "button.c: Can't allocate irq %d\n", button_irq);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return -EBUSY;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</FONT></P>
<P><FONT class=extract>&nbsp;button_dev = input_allocate_device();<BR>&nbsp;if (!button_dev) {<BR>&nbsp;&nbsp;printk(KERN_ERR "button.c: Not enough memory\n");<BR>&nbsp;&nbsp;error = -ENOMEM;<BR>&nbsp;&nbsp;goto err_free_irq;<BR>&nbsp;}</FONT></P>
<P><FONT class=extract>&nbsp;button_dev-&gt;evbit[0] = BIT_MASK(EV_KEY);<BR>&nbsp;button_dev-&gt;keybit[BIT_WORD(BTN_0)] = BIT_MASK(BTN_0);</FONT></P>
<P><FONT class=extract>&nbsp;error = input_register_device(button_dev);<BR>&nbsp;if (error) {<BR>&nbsp;&nbsp;printk(KERN_ERR "button.c: Failed to register device\n");<BR>&nbsp;&nbsp;goto err_free_dev;<BR>&nbsp;}</FONT></P>
<P><FONT class=extract>&nbsp;return 0;</FONT></P>
<P><FONT class=extract>&nbsp;err_free_dev:<BR>&nbsp;input_free_device(button_dev);<BR>&nbsp;err_free_irq:<BR>&nbsp;free_irq(BUTTON_IRQ, button_interrupt);<BR>&nbsp;return error;<BR>}</FONT></P>
<P><FONT class=extract>static void __exit button_exit(void)<BR>{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; input_unregister_device(button_dev);<BR>&nbsp;free_irq(BUTTON_IRQ, button_interrupt);<BR>}</FONT></P>
<P><FONT class=extract>module_init(button_init);<BR>module_exit(button_exit);</FONT></P>
<P>1.1 What the example does<BR>~~~~~~~~~~~~~~~~~~~~~~~~~</P>
<P><FONT class=extract>First it has to include the &lt;linux/input.h&gt; file, which interfaces to the<BR>input subsystem. This provides all the definitions needed.</FONT></P>
<P><FONT class=extract>In the _init function, which is called either upon module load or when<BR>booting the kernel, it grabs the required resources (it should also check<BR>for the presence of the device).</FONT></P>
<P><FONT class=extract>Then it allocates a new input device structure with input_allocate_device()<BR>and sets up input bitfields. This way the device driver tells the other<BR>parts of the input systems what it is - what events can be generated or<BR>accepted by this input device. Our example device can only generate EV_KEY<BR>type events, and from those only BTN_0 event code. Thus we only set these<BR>two bits. We could have used</FONT></P>
<P><FONT class=extract>&nbsp;set_bit(EV_KEY, button_dev.evbit);<BR>&nbsp;set_bit(BTN_0, button_dev.keybit);</FONT></P>
<P><FONT class=extract>as well, but with more than single bits the first approach tends to be<BR>shorter.</FONT></P>
<P><FONT class=extract>Then the example driver registers the input device structure by calling</FONT></P>
<P><FONT class=extract>&nbsp;input_register_device(&amp;button_dev);</FONT></P>
<P><FONT class=extract>This adds the button_dev structure to linked lists of the input driver and<BR>calls device handler modules _connect functions to tell them a new input<BR>device has appeared. input_register_device() may sleep and therefore must<BR>not be called from an interrupt or with a spinlock held.</FONT></P>
<P><FONT class=extract>While in use, the only used function of the driver is</FONT></P>
<P><FONT class=extract>&nbsp;button_interrupt()</FONT></P>
<P><FONT class=extract>which upon every interrupt from the button checks its state and reports it<BR>via the</FONT></P>
<P><FONT class=extract>&nbsp;input_report_key()</FONT></P>
<P><FONT class=extract>call to the input system. There is no need to check whether the interrupt<BR>routine isn't reporting two same value events (press, press for example) to<BR>the input system, because the input_report_* functions check that<BR>themselves.</FONT></P>
<P><FONT class=extract>Then there is the</FONT></P>
<P><FONT class=extract>&nbsp;input_sync()</FONT></P>
<P><FONT class=extract>call to tell those who receive the events that we've sent a complete report.<BR>This doesn't seem important in the one button case, but is quite important<BR>for for example mouse movement, where you don't want the X and Y values<BR>to be interpreted separately, because that'd result in a different movement.</FONT>