# Documentation/input/input-programming.txt 
<P></P>
<P><BR>Programming input drivers<BR>~~~~~~~~~~~~~~~~~~~~~~~~~</P>
<P></P>
<P>1. Creating an input device driver<BR>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</P>
<P><FONT class=extract>1.0 The simplest example<BR>~~~~~~~~~~~~~~~~~~~~~~~~</FONT></P>
<P><FONT class=extract>Here comes a very simple example of an input device driver. The device has<BR>just one button and the button is accessible at i/o port BUTTON_PORT. When<BR>pressed or released a BUTTON_IRQ happens. The driver could look like:</FONT></P>
<P><FONT class=extract>#include &lt;linux/input.h&gt;<BR>#include &lt;linux/module.h&gt;<BR>#include &lt;linux/init.h&gt;</FONT></P>
<P><FONT class=extract>#include &lt;asm/irq.h&gt;<BR>#include &lt;asm/io.h&gt;</FONT></P>
<P><FONT class=extract>static struct input_dev *button_dev;</FONT></P>
<P><FONT class=extract>static irqreturn_t button_interrupt(int irq, void *dummy)<BR>{<BR>&nbsp;input_report_key(button_dev, BTN_0, inb(BUTTON_PORT) &amp; 1);<BR>&nbsp;input_sync(button_dev);<BR>&nbsp;return IRQ_HANDLED;<BR>}</FONT></P>
<P><FONT class=extract>static int __init button_init(void)<BR>{<BR>&nbsp;int error;</FONT></P>
<P><FONT class=extract>&nbsp;if (request_irq(BUTTON_IRQ, button_interrupt, 0, "button", NULL)) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printk(KERN_ERR "button.c: Can't allocate irq %d\n", button_irq);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return -EBUSY;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</FONT></P>
<P><FONT class=extract>&nbsp;button_dev = input_allocate_device();<BR>&nbsp;if (!button_dev) {<BR>&nbsp;&nbsp;printk(KERN_ERR "button.c: Not enough memory\n");<BR>&nbsp;&nbsp;error = -ENOMEM;<BR>&nbsp;&nbsp;goto err_free_irq;<BR>&nbsp;}</FONT></P>
<P><FONT class=extract>&nbsp;button_dev-&gt;evbit[0] = BIT_MASK(EV_KEY);<BR>&nbsp;button_dev-&gt;keybit[BIT_WORD(BTN_0)] = BIT_MASK(BTN_0);</FONT></P>
<P><FONT class=extract>&nbsp;error = input_register_device(button_dev);<BR>&nbsp;if (error) {<BR>&nbsp;&nbsp;printk(KERN_ERR "button.c: Failed to register device\n");<BR>&nbsp;&nbsp;goto err_free_dev;<BR>&nbsp;}</FONT></P>
<P><FONT class=extract>&nbsp;return 0;</FONT></P>
<P><FONT class=extract>&nbsp;err_free_dev:<BR>&nbsp;input_free_device(button_dev);<BR>&nbsp;err_free_irq:<BR>&nbsp;free_irq(BUTTON_IRQ, button_interrupt);<BR>&nbsp;return error;<BR>}</FONT></P>
<P><FONT class=extract>static void __exit button_exit(void)<BR>{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; input_unregister_device(button_dev);<BR>&nbsp;free_irq(BUTTON_IRQ, button_interrupt);<BR>}</FONT></P>
<P><FONT class=extract>module_init(button_init);<BR>module_exit(button_exit);</FONT></P>
<P><FONT class=extract>1.1 What the example does<BR>~~~~~~~~~~~~~~~~~~~~~~~~~</FONT></P>
<P><FONT class=extract>First it has to include the &lt;linux/input.h&gt; file, which interfaces to the<BR>input subsystem. This provides all the definitions needed.</FONT></P>
<P><FONT class=extract>In the _init function, which is called either upon module load or when<BR>booting the kernel, it grabs the required resources (it should also check<BR>for the presence of the device).</FONT></P>
<P><FONT class=extract>Then it allocates a new input device structure with input_allocate_device()<BR>and sets up input bitfields. This way the device driver tells the other<BR>parts of the input systems what it is - what events can be generated or<BR>accepted by this input device. Our example device can only generate EV_KEY<BR>type events, and from those only BTN_0 event code. Thus we only set these<BR>two bits. We could have used</FONT></P>
<P><FONT class=extract>&nbsp;set_bit(EV_KEY, button_dev.evbit);<BR>&nbsp;set_bit(BTN_0, button_dev.keybit);</FONT></P>
<P><FONT class=extract>as well, but with more than single bits the first approach tends to be<BR>shorter.</FONT></P>
<P><FONT class=extract>Then the example driver registers the input device structure by calling</FONT></P>
<P><FONT class=extract>&nbsp;input_register_device(&amp;button_dev);</FONT></P>
<P><FONT class=extract>This adds the button_dev structure to linked lists of the input driver and<BR>calls device handler modules _connect functions to tell them a new input<BR>device has appeared. input_register_device() may sleep and therefore must<BR>not be called from an interrupt or with a spinlock held.</FONT></P>
<P><FONT class=extract>While in use, the only used function of the driver is</FONT></P>
<P><FONT class=extract>&nbsp;button_interrupt()</FONT></P>
<P><FONT class=extract>which upon every interrupt from the button checks its state and reports it<BR>via the</FONT></P>
<P><FONT class=extract>&nbsp;input_report_key()</FONT></P>
<P><FONT class=extract>call to the input system. There is no need to check whether the interrupt<BR>routine isn't reporting two same value events (press, press for example) to<BR>the input system, because the input_report_* functions check that<BR>themselves.</FONT></P>
<P><FONT class=extract>Then there is the</FONT></P>
<P><FONT class=extract>&nbsp;input_sync()</FONT></P>
<P><FONT class=extract>call to tell those who receive the events that we've sent a complete report.<BR>This doesn't seem important in the one button case, but is quite important<BR>for for example mouse movement, where you don't want the X and Y values<BR>to be interpreted separately, because that'd result in a different movement.</FONT></P>
<P><FONT class=extract>1.2 dev-&gt;open() and dev-&gt;close()<BR>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</FONT></P>
<P><FONT class=extract>In case the driver has to repeatedly poll the device, because it doesn't<BR>have an interrupt coming from it and the polling is too expensive to be done<BR>all the time, or if the device uses a valuable resource (eg. interrupt), it<BR>can use the open and close callback to know when it can stop polling or<BR>release the interrupt and when it must resume polling or grab the interrupt<BR>again. To do that, we would add this to our example driver:</FONT></P>
<P><FONT class=extract>static int button_open(struct input_dev *dev)<BR>{<BR>&nbsp;if (request_irq(BUTTON_IRQ, button_interrupt, 0, "button", NULL)) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; printk(KERN_ERR "button.c: Can't allocate irq %d\n", button_irq);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return -EBUSY;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; }</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 0;<BR>}</FONT></P>
<P><FONT class=extract>static void button_close(struct input_dev *dev)<BR>{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; free_irq(IRQ_AMIGA_VERTB, button_interrupt);<BR>}</FONT></P>
<P><FONT class=extract>static int __init button_init(void)<BR>{<BR>&nbsp;...<BR>&nbsp;button_dev-&gt;open = button_open;<BR>&nbsp;button_dev-&gt;close = button_close;<BR>&nbsp;...<BR>}</FONT></P>
<P><FONT class=extract>Note that input core keeps track of number of users for the device and<BR>makes sure that dev-&gt;open() is called only when the first user connects<BR>to the device and that dev-&gt;close() is called when the very last user<BR>disconnects. Calls to both callbacks are serialized.</FONT></P>
<P><FONT class=extract>The open() callback should return a 0 in case of success or any nonzero value<BR>in case of failure. The close() callback (which is void) must always succeed.</FONT></P>
<P><FONT class=extract>1.3 Basic event types<BR>~~~~~~~~~~~~~~~~~~~~~</FONT></P>
<P><FONT class=extract>The most simple event type is EV_KEY, which is used for keys and buttons.<BR>It's reported to the input system via:</FONT></P>
<P><FONT class=extract>&nbsp;input_report_key(struct input_dev *dev, int code, int value)</FONT></P>
<P><FONT class=extract>See linux/input.h for the allowable values of code (from 0 to KEY_MAX).<BR>Value is interpreted as a truth value, ie any nonzero value means key<BR>pressed, zero value means key released. The input code generates events only<BR>in case the value is different from before.</FONT></P>
<P><FONT class=extract>In addition to EV_KEY, there are two more basic event types: EV_REL and<BR>EV_ABS. They are used for relative and absolute values supplied by the<BR>device. A relative value may be for example a mouse movement in the X axis.<BR>The mouse reports it as a relative difference from the last position,<BR>because it doesn't have any absolute coordinate system to work in. Absolute<BR>events are namely for joysticks and digitizers - devices that do work in an<BR>absolute coordinate systems.</FONT></P>
<P><FONT class=extract>Having the device report EV_REL buttons is as simple as with EV_KEY, simply<BR>set the corresponding bits and call the</FONT></P>
<P><FONT class=extract>&nbsp;input_report_rel(struct input_dev *dev, int code, int value)</FONT></P>
<P><FONT class=extract>function. Events are generated only for nonzero value.</FONT></P>
<P><FONT class=extract>However EV_ABS requires a little special care. Before calling<BR>input_register_device, you have to fill additional fields in the input_dev<BR>struct for each absolute axis your device has. If our button device had also<BR>the ABS_X axis:</FONT></P>
<P><FONT class=extract>&nbsp;button_dev.absmin[ABS_X] = 0;<BR>&nbsp;button_dev.absmax[ABS_X] = 255;<BR>&nbsp;button_dev.absfuzz[ABS_X] = 4;<BR>&nbsp;button_dev.absflat[ABS_X] = 8;</FONT></P>
<P><FONT class=extract>Or, you can just say:</FONT></P>
<P><FONT class=extract>&nbsp;input_set_abs_params(button_dev, ABS_X, 0, 255, 4, 8);</FONT></P>
<P><FONT class=extract>This setting would be appropriate for a joystick X axis, with the minimum of<BR>0, maximum of 255 (which the joystick *must* be able to reach, no problem if<BR>it sometimes reports more, but it must be able to always reach the min and<BR>max values), with noise in the data up to +- 4, and with a center flat<BR>position of size 8.</FONT></P>
<P><FONT class=extract>If you don't need absfuzz and absflat, you can set them to zero, which mean<BR>that the thing is precise and always returns to exactly the center position<BR>(if it has any).</FONT></P>
<P><FONT class=extract>1.4 BITS_TO_LONGS(), BIT_WORD(), BIT_MASK()<BR>~~~~~~~~~~~~~~~~~~~~~~~~~~</FONT></P>
<P><FONT class=extract>These three macros from bitops.h help some bitfield computations:</FONT></P>
<P><FONT class=extract>&nbsp;BITS_TO_LONGS(x) - returns the length of a bitfield array in longs for<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; x bits<BR>&nbsp;BIT_WORD(x)&nbsp; - returns the index in the array in longs for bit x<BR>&nbsp;BIT_MASK(x)&nbsp; - returns the index in a long for bit x</FONT></P>
<P><FONT class=extract>1.5 The id* and name fields<BR>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</FONT></P>
<P><FONT class=extract>The dev-&gt;name should be set before registering the input device by the input<BR>device driver. It's a string like 'Generic button device' containing a<BR>user friendly name of the device.</FONT></P>
<P><FONT class=extract>The id* fields contain the bus ID (PCI, USB, ...), vendor ID and device ID<BR>of the device. The bus IDs are defined in input.h. The vendor and device ids<BR>are defined in pci_ids.h, usb_ids.h and similar include files. These fields<BR>should be set by the input device driver before registering it.</FONT></P>
<P><FONT class=extract>The idtype field can be used for specific information for the input device<BR>driver.</FONT></P>
<P><FONT class=extract>The id and name fields can be passed to userland via the evdev interface.</FONT></P>
<P><FONT class=extract>1.6 The keycode, keycodemax, keycodesize fields<BR>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</FONT></P>
<P><FONT class=extract>These three fields should be used by input devices that have dense keymaps.<BR>The keycode is an array used to map from scancodes to input system keycodes.<BR>The keycode max should contain the size of the array and keycodesize the<BR>size of each entry in it (in bytes).</FONT></P>
<P><FONT class=extract>Userspace can query and alter current scancode to keycode mappings using<BR>EVIOCGKEYCODE and EVIOCSKEYCODE ioctls on corresponding evdev interface.<BR>When a device has all 3 aforementioned fields filled in, the driver may<BR>rely on kernel's default implementation of setting and querying keycode<BR>mappings.</FONT></P>
<P><FONT class=extract>1.7 dev-&gt;getkeycode() and dev-&gt;setkeycode()<BR>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<BR>getkeycode() and setkeycode() callbacks allow drivers to override default<BR>keycode/keycodesize/keycodemax mapping mechanism provided by input core<BR>and implement sparse keycode maps.</FONT></P>
<P><FONT class=extract>1.8 Key autorepeat<BR>~~~~~~~~~~~~~~~~~~</FONT></P>
<P><FONT class=extract>... is simple. It is handled by the input.c module. Hardware autorepeat is<BR>not used, because it's not present in many devices and even where it is<BR>present, it is broken sometimes (at keyboards: Toshiba notebooks). To enable<BR>autorepeat for your device, just set EV_REP in dev-&gt;evbit. All will be<BR>handled by the input system.</FONT></P>
<P><FONT class=extract>1.9 Other event types, handling output events<BR>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~</FONT></P>
<P><FONT class=extract>The other event types up to now are:</FONT></P>
<P><FONT class=extract>EV_LED - used for the keyboard LEDs.<BR>EV_SND - used for keyboard beeps.</FONT></P>
<P><FONT class=extract>They are very similar to for example key events, but they go in the other<BR>direction - from the system to the input device driver. If your input device<BR>driver can handle these events, it has to set the respective bits in evbit,<BR>*and* also the callback routine:</FONT></P>
<P><FONT class=extract>&nbsp;button_dev-&gt;event = button_event;</FONT></P>
<P><FONT class=extract>int button_event(struct input_dev *dev, unsigned int type, unsigned int code, int value);<BR>{<BR>&nbsp;if (type == EV_SND &amp;&amp; code == SND_BELL) {<BR>&nbsp;&nbsp;outb(value, BUTTON_BELL);<BR>&nbsp;&nbsp;return 0;<BR>&nbsp;}<BR>&nbsp;return -1;<BR>}</FONT></P>
<P><FONT class=extract>This callback routine can be called from an interrupt or a BH (although that<BR>isn't a rule), and thus must not sleep, and must not take too long to finish.</FONT>