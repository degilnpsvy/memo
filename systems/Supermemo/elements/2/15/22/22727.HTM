<H1 lang=en id=firstHeading class=firstHeading style="OVERFLOW: visible; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: rgb(170,170,170) 1px solid; TEXT-TRANSFORM: none; COLOR: black; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 1.8em/1.3 'Linux Libertine', Georgia, Times, serif; PADDING-LEFT: 0px; MARGIN: 0px 0px 0.25em; LETTER-SPACING: normal; PADDING-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Fault injection</H1>
<DIV id=bodyContent class=mw-body-content style="WHITE-SPACE: normal; WORD-SPACING: 0px; POSITION: relative; TEXT-TRANSFORM: none; COLOR: rgb(37,37,37); FONT: 0.87em/1.6 sans-serif; Z-INDEX: 0; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">
<DIV id=siteSub style="FONT-SIZE: 12px; DISPLAY: block">From Wikipedia, the free encyclopedia</DIV>
<DIV id=contentSub style="FONT-SIZE: 11px; WIDTH: auto; COLOR: rgb(84,84,84); MARGIN: 0px 0px 1.4em 1em; LINE-HEIGHT: 1.2em"></DIV>
<DIV id=jump-to-nav class=mw-jump style="OVERFLOW: hidden; MARGIN-BOTTOM: 1.4em; HEIGHT: 0px; ZOOM: 1; MARGIN-TOP: -1.4em; -webkit-user-select: none"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fault_injection#mw-head"></A><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fault_injection#p-search"></A></DIV>
<DIV lang=en id=mw-content-text class=mw-content-ltr style="DIRECTION: ltr" dir=ltr>
<P style="MARGIN: 0.5em 0px">In<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Software testing" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Software_testing">software testing</A>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>fault injection</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a technique for improving the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Code coverage" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Code_coverage">coverage</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>of a test by introducing faults to test code paths, in particular<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Error handling" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Error_handling">error handling</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>code paths, that might otherwise rarely be followed. It is often used with<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Stress testing" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Stress_testing">stress testing</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and is widely considered to be an important part of developing<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Robustness (computer science)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Robustness_(computer_science)">robust</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>software.<SUP id=cite_ref-1 class=reference style="FONT-SIZE: 11px; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fault_injection#cite_note-1"><SPAN>[</SPAN>1<SPAN>]</SPAN></A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Robustness testing" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Robustness_testing">Robustness testing</A><SUP id=cite_ref-2 class=reference style="FONT-SIZE: 11px; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fault_injection#cite_note-2"><SPAN>[</SPAN>2<SPAN>]</SPAN></A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>(also known as Syntax Testing,<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=Fuzzing class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fuzzing">Fuzzing</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Fuzz testing" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fuzz_testing">Fuzz testing</A>) is a type of fault injection commonly used to test for vulnerabilities in communication interfaces such as protocols, command line parameters, or APIs.</P>
<P style="MARGIN: 0.5em 0px">The propagation of a fault through to an observable failure follows a well defined cycle. When executed, a fault may cause an error, which is an invalid state within a system boundary. An error may cause further errors within the system boundary, therefore each new error acts as a fault, or it may propagate to the system boundary and be observable. When error states are observed at the system boundary they are termed failures. This mechanism is termed the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Fault-error-failure cycle (page does not exist)" class=new style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(165,88,88)" href="http://en.wikipedia.org/w/index.php?title=Fault-error-failure_cycle&amp;action=edit&amp;redlink=1">fault-error-failure cycle</A><SPAN class=Apple-converted-space>&nbsp;</SPAN><SUP id=cite_ref-3 class=reference style="FONT-SIZE: 11px; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fault_injection#cite_note-3"><SPAN>[</SPAN>3<SPAN>]</SPAN></A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and is a key mechanism in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=Dependability style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Dependability">dependability</A>.</P>
<P style="MARGIN: 0.5em 0px"></P>
<DIV id=toc class=toc style="FONT-SIZE: 13px; BORDER-TOP: rgb(170,170,170) 1px solid; BORDER-RIGHT: rgb(170,170,170) 1px solid; BORDER-BOTTOM: rgb(170,170,170) 1px solid; ZOOM: 1; PADDING-BOTTOM: 7px; PADDING-TOP: 7px; PADDING-LEFT: 7px; BORDER-LEFT: rgb(170,170,170) 1px solid; DISPLAY: table; PADDING-RIGHT: 7px; BACKGROUND-COLOR: rgb(249,249,249)">
<DIV id=toctitle style="DIRECTION: ltr; TEXT-ALIGN: center">
<H2 style="OVERFLOW: hidden; FONT-SIZE: 13px; BORDER-TOP: medium none; FONT-FAMILY: sans-serif; BORDER-RIGHT: medium none; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: medium none; FONT-WEIGHT: bold; COLOR: black; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 1em 0px 0.25em; BORDER-LEFT: medium none; DISPLAY: inline; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px">Contents</H2><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=toctoggle style="FONT-SIZE: 12px; -webkit-user-select: none">&nbsp;[<A id=togglelink style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fault_injection#">hide</A>]&nbsp;</SPAN></DIV>
<UL style="LIST-STYLE-TYPE: none; PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.3em 0px; LIST-STYLE-IMAGE: none; PADDING-RIGHT: 0px">
<LI class="toclevel-1 tocsection-1" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fault_injection#History"><SPAN class=tocnumber>1</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=toctext>History</SPAN></A></LI>
<LI class="toclevel-1 tocsection-2" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fault_injection#Software_Implemented_fault_injection"><SPAN class=tocnumber>2</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=toctext>Software Implemented fault injection</SPAN></A>
<UL style="LIST-STYLE-TYPE: none; PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 0px 2em; LIST-STYLE-IMAGE: none; PADDING-RIGHT: 0px">
<LI class="toclevel-2 tocsection-3" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fault_injection#Protocol_software_fault_injection"><SPAN class=tocnumber>2.1</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=toctext>Protocol software fault injection</SPAN></A></LI></UL></LI>
<LI class="toclevel-1 tocsection-4" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fault_injection#Fault_injection_tools"><SPAN class=tocnumber>3</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=toctext>Fault injection tools</SPAN></A>
<UL style="LIST-STYLE-TYPE: none; PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 0px 2em; LIST-STYLE-IMAGE: none; PADDING-RIGHT: 0px">
<LI class="toclevel-2 tocsection-5" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fault_injection#Research_tools"><SPAN class=tocnumber>3.1</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=toctext>Research tools</SPAN></A></LI>
<LI class="toclevel-2 tocsection-6" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fault_injection#Commercial_tools"><SPAN class=tocnumber>3.2</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=toctext>Commercial tools</SPAN></A></LI>
<LI class="toclevel-2 tocsection-7" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fault_injection#Libraries"><SPAN class=tocnumber>3.3</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=toctext>Libraries</SPAN></A></LI></UL></LI>
<LI class="toclevel-1 tocsection-8" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fault_injection#Fault_Injection_in_Functional_Properties_or_Test_Cases"><SPAN class=tocnumber>4</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=toctext>Fault Injection in Functional Properties or Test Cases</SPAN></A></LI>
<LI class="toclevel-1 tocsection-9" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fault_injection#Application_of_fault_injection"><SPAN class=tocnumber>5</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=toctext>Application of fault injection</SPAN></A></LI>
<LI class="toclevel-1 tocsection-10" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fault_injection#See_also"><SPAN class=tocnumber>6</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=toctext>See also</SPAN></A></LI>
<LI class="toclevel-1 tocsection-11" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fault_injection#References"><SPAN class=tocnumber>7</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=toctext>References</SPAN></A></LI>
<LI class="toclevel-1 tocsection-12" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fault_injection#External_links"><SPAN class=tocnumber>8</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=toctext>External links</SPAN></A></LI></UL></DIV>
<P style="MARGIN: 0.5em 0px"></P>
<H2 style="OVERFLOW: hidden; FONT-SIZE: 1.5em; FONT-FAMILY: 'Linux Libertine', Georgia, Times, serif; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: rgb(170,170,170) 1px solid; FONT-WEIGHT: normal; COLOR: black; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 1em 0px 0.25em; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px"><SPAN id=History class=mw-headline>History</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; -webkit-user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0px; MARGIN-RIGHT: 0px">[</SPAN><A title="Edit section: History" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/w/index.php?title=Fault_injection&amp;action=edit&amp;section=1">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0px; MARGIN-RIGHT: 0px">]</SPAN></SPAN></H2>
<P style="MARGIN: 0.5em 0px">The technique of fault injection dates back to the 1970s<SPAN class=Apple-converted-space>&nbsp;</SPAN><SUP id=cite_ref-4 class=reference style="FONT-SIZE: 11px; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fault_injection#cite_note-4"><SPAN>[</SPAN>4<SPAN>]</SPAN></A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>when it was first used to induce faults at a hardware level. This type of fault injection is called Hardware Implemented Fault Injection (HWIFI) and attempts to simulate hardware failures within a system. The first experiments in hardware fault injection involved nothing more than shorting connections on circuit boards and observing the effect on the system (bridging faults). It was used primarily as a test of the dependability of the hardware system. Later specialised hardware was developed to extend this technique, such as devices to bombard specific areas of a circuit board with heavy radiation. It was soon found that faults could be induced by software techniques and that aspects of this technique could be useful for assessing software systems. Collectively these techniques are known as Software Implemented Fault Injection (SWIFI).</P>
<H2 style="OVERFLOW: hidden; FONT-SIZE: 1.5em; FONT-FAMILY: 'Linux Libertine', Georgia, Times, serif; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: rgb(170,170,170) 1px solid; FONT-WEIGHT: normal; COLOR: black; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 1em 0px 0.25em; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px"><SPAN id=Software_Implemented_fault_injection class=mw-headline>Software Implemented fault injection</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; -webkit-user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0px; MARGIN-RIGHT: 0px">[</SPAN><A title="Edit section: Software Implemented fault injection" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/w/index.php?title=Fault_injection&amp;action=edit&amp;section=2">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0px; MARGIN-RIGHT: 0px">]</SPAN></SPAN></H2>
<P style="MARGIN: 0.5em 0px">SWIFI techniques for software fault injection can be categorized into two types: compile-time injection and runtime injection.</P>
<P style="MARGIN: 0.5em 0px"><B>Compile-time injection</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an injection technique where source code is modified to inject simulated faults into a system. One method is called<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Mutation testing" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Mutation_testing">mutation testing</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>which changes existing lines of code so that they contain faults. A simple example of this technique could be changing</P><PRE style="BORDER-TOP: rgb(221,221,221) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(221,221,221) 1px solid; BORDER-BOTTOM: rgb(221,221,221) 1px solid; COLOR: black; PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(249,249,249)"><CODE style="BORDER-TOP: rgb(221,221,221) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(221,221,221) 1px solid; BORDER-BOTTOM: rgb(221,221,221) 1px solid; COLOR: black; PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(221,221,221) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(249,249,249); border-radius: 2px"> a = a + 1
   to
 a = a &#8211; 1
</CODE>
</PRE>
<P style="MARGIN: 0.5em 0px">Code mutation produces faults which are very similar to those unintentionally added by programmers.</P>
<P style="MARGIN: 0.5em 0px">A refinement of code mutation is<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>Code Insertion Fault Injection</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>which adds code, rather than modifying existing code. This is usually done through the use of perturbation functions which are simple functions which take an existing value and perturb it via some logic into another value, for example</P>
<DIV class="mw-geshi mw-code mw-content-ltr" style="BORDER-TOP: rgb(221,221,221) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(221,221,221) 1px solid; BORDER-BOTTOM: rgb(221,221,221) 1px solid; COLOR: black; PADDING-BOTTOM: 1em; DIRECTION: ltr; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(249,249,249)" dir=ltr>
<DIV class="c source-c" style="FONT-FAMILY: monospace, monospace; LINE-HEIGHT: normal; tab-size: 4"><PRE class=de1 style="BORDER-TOP: white 0px; BORDER-RIGHT: white 0px; VERTICAL-ALIGN: top; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: white 0px; COLOR: black; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; FONT: 1em/1.2em monospace, monospace; PADDING-LEFT: 0px; MARGIN: 0px; BORDER-LEFT: white 0px; PADDING-RIGHT: 0px; tab-size: 4; font-stretch: normal">  <SPAN class=kw4 style="COLOR: rgb(153,51,51)">int</SPAN> pFunc<SPAN class=br0 style="COLOR: rgb(0,153,0)">(</SPAN><SPAN class=kw4 style="COLOR: rgb(153,51,51)">int</SPAN> value<SPAN class=br0 style="COLOR: rgb(0,153,0)">)</SPAN> <SPAN class=br0 style="COLOR: rgb(0,153,0)">{</SPAN>
    <SPAN class=kw1 style="COLOR: rgb(177,177,0)">return</SPAN> value <SPAN class=sy0 style="COLOR: rgb(51,153,51)">+</SPAN> <SPAN class=nu0 style="COLOR: rgb(0,0,221)">20</SPAN><SPAN class=sy0 style="COLOR: rgb(51,153,51)">;</SPAN>
  <SPAN class=br0 style="COLOR: rgb(0,153,0)">}</SPAN>
  <SPAN class=kw4 style="COLOR: rgb(153,51,51)">int</SPAN> main<SPAN class=br0 style="COLOR: rgb(0,153,0)">(</SPAN><SPAN class=kw4 style="COLOR: rgb(153,51,51)">int</SPAN> argc<SPAN class=sy0 style="COLOR: rgb(51,153,51)">,</SPAN> <SPAN class=kw4 style="COLOR: rgb(153,51,51)">char</SPAN> <SPAN class=sy0 style="COLOR: rgb(51,153,51)">*</SPAN> argv<SPAN class=br0 style="COLOR: rgb(0,153,0)">[</SPAN><SPAN class=br0 style="COLOR: rgb(0,153,0)">]</SPAN><SPAN class=br0 style="COLOR: rgb(0,153,0)">)</SPAN> <SPAN class=br0 style="COLOR: rgb(0,153,0)">{</SPAN>
    <SPAN class=kw4 style="COLOR: rgb(153,51,51)">int</SPAN> a <SPAN class=sy0 style="COLOR: rgb(51,153,51)">=</SPAN> pFunc<SPAN class=br0 style="COLOR: rgb(0,153,0)">(</SPAN>aFunction<SPAN class=br0 style="COLOR: rgb(0,153,0)">(</SPAN><SPAN class=kw3 style="COLOR: rgb(0,0,102)">atoi</SPAN><SPAN class=br0 style="COLOR: rgb(0,153,0)">(</SPAN>argv<SPAN class=br0 style="COLOR: rgb(0,153,0)">[</SPAN><SPAN class=nu0 style="COLOR: rgb(0,0,221)">1</SPAN><SPAN class=br0 style="COLOR: rgb(0,153,0)">]</SPAN><SPAN class=br0 style="COLOR: rgb(0,153,0)">)</SPAN><SPAN class=br0 style="COLOR: rgb(0,153,0)">)</SPAN><SPAN class=br0 style="COLOR: rgb(0,153,0)">)</SPAN><SPAN class=sy0 style="COLOR: rgb(51,153,51)">;</SPAN>
    <SPAN class=kw1 style="COLOR: rgb(177,177,0)">if</SPAN> <SPAN class=br0 style="COLOR: rgb(0,153,0)">(</SPAN>a <SPAN class=sy0 style="COLOR: rgb(51,153,51)">&gt;</SPAN> <SPAN class=nu0 style="COLOR: rgb(0,0,221)">20</SPAN><SPAN class=br0 style="COLOR: rgb(0,153,0)">)</SPAN> <SPAN class=br0 style="COLOR: rgb(0,153,0)">{</SPAN>
      <SPAN class=coMULTI style="COLOR: rgb(128,128,128); FONT-STYLE: italic">/* do something */</SPAN>
    <SPAN class=br0 style="COLOR: rgb(0,153,0)">}</SPAN> <SPAN class=kw1 style="COLOR: rgb(177,177,0)">else</SPAN> <SPAN class=br0 style="COLOR: rgb(0,153,0)">{</SPAN>
      <SPAN class=coMULTI style="COLOR: rgb(128,128,128); FONT-STYLE: italic">/* do something else */</SPAN>
    <SPAN class=br0 style="COLOR: rgb(0,153,0)">}</SPAN>
  <SPAN class=br0 style="COLOR: rgb(0,153,0)">}</SPAN>
</PRE></DIV></DIV>
<P style="MARGIN: 0.5em 0px">In this case pFunc is the perturbation function and it is applied to the return value of the function that has been called introducing a fault into the system.</P>
<P style="MARGIN: 0.5em 0px"><B>Runtime Injection</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>techniques use a software trigger to inject a fault into a running software system. Faults can be injected via a number of physical methods and triggers can be implemented in a number of ways, such as: Time Based triggers (When the timer reaches a specified time an interrupt is generated and the interrupt handler associated with the timer can inject the fault. ); Interrupt Based Triggers (Hardware exceptions and software trap mechanisms are used to generate an interrupt at a specific place in the system code or on a particular event within the system, for instance access to a specific memory location).</P>
<P style="MARGIN: 0.5em 0px">Runtime injection techniques can use a number of different techniques to insert faults into a system via a trigger.</P>
<UL style="LIST-STYLE-TYPE: disc; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.3em 0px 0px 1.6em; LIST-STYLE-IMAGE: url(data:image/svg+xml,%3C%3Fxml%20version%3D%221.0%22%20encoding%3D%22UTF-8%22%3F%3E%0A%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20version%3D%221.1%22%20width%3D%225%22%20height%3D%2213%22%3E%0A%3Ccircle%20cx%3D%222.5%22%20cy%3D%229.5%22%20r%3D%222.5%22%20fill%3D%22%2300528c%22%2F%3E%0A%3C%2Fsvg%3E%0A); PADDING-RIGHT: 0px">
<LI style="MARGIN-BOTTOM: 0.1em">Corruption of memory space: This technique consists of corrupting RAM, processor registers, and I/O map.</LI>
<LI style="MARGIN-BOTTOM: 0.1em">Syscall interposition techniques: This is concerned with the fault propagation from operating system kernel interfaces to executing systems software. This is done by intercepting operating system calls made by user-level software and injecting faults into them.</LI>
<LI style="MARGIN-BOTTOM: 0.1em">Network Level fault injection: This technique is concerned with the corruption, loss or reordering of network packets at the network interface.</LI></UL>
<P style="MARGIN: 0.5em 0px">These techniques are often based around the debugging facilities provided by computer processor architectures.</P>
<H3 style="OVERFLOW: hidden; FONT-SIZE: 1.17em; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM-STYLE: none; FONT-WEIGHT: bold; COLOR: black; PADDING-BOTTOM: 0px; PADDING-TOP: 0.5em; MARGIN: 0.3em 0px 0px; LINE-HEIGHT: 1.6"><SPAN id=Protocol_software_fault_injection class=mw-headline>Protocol software fault injection</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; -webkit-user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0px; MARGIN-RIGHT: 0px">[</SPAN><A title="Edit section: Protocol software fault injection" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/w/index.php?title=Fault_injection&amp;action=edit&amp;section=3">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0px; MARGIN-RIGHT: 0px">]</SPAN></SPAN></H3>
<P style="MARGIN: 0.5em 0px">Complex software systems, especially multi-vendor distributed systems based on open standards, perform input/output operations to exchange data via stateful, structured exchanges known as "<A title="Communications protocol" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Communications_protocol">protocols</A>." One kind of fault injection that is particularly useful to test protocol implementations (a type of software code that has the unusual characteristic in that it cannot predict or control its input) is<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Fuzz testing" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fuzz_testing">fuzzing</A>. Fuzzing is an especially useful form of<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Black-box testing" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Black-box_testing">Black-box testing</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>since the various invalid inputs that are submitted to the software system do not depend on, and are not created based on knowledge of, the details of the code running inside the system.</P>
<H2 style="OVERFLOW: hidden; FONT-SIZE: 1.5em; FONT-FAMILY: 'Linux Libertine', Georgia, Times, serif; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: rgb(170,170,170) 1px solid; FONT-WEIGHT: normal; COLOR: black; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 1em 0px 0.25em; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px"><SPAN id=Fault_injection_tools class=mw-headline>Fault injection tools</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; -webkit-user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0px; MARGIN-RIGHT: 0px">[</SPAN><A title="Edit section: Fault injection tools" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/w/index.php?title=Fault_injection&amp;action=edit&amp;section=4">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0px; MARGIN-RIGHT: 0px">]</SPAN></SPAN></H2>
<P style="MARGIN: 0.5em 0px">Although these types of faults can be injected by hand the possibility of introducing an unintended fault is high, so tools exist to parse a program automatically and insert faults.</P>
<H3 style="OVERFLOW: hidden; FONT-SIZE: 1.17em; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM-STYLE: none; FONT-WEIGHT: bold; COLOR: black; PADDING-BOTTOM: 0px; PADDING-TOP: 0.5em; MARGIN: 0.3em 0px 0px; LINE-HEIGHT: 1.6"><SPAN id=Research_tools class=mw-headline>Research tools</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; -webkit-user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0px; MARGIN-RIGHT: 0px">[</SPAN><A title="Edit section: Research tools" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/w/index.php?title=Fault_injection&amp;action=edit&amp;section=5">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0px; MARGIN-RIGHT: 0px">]</SPAN></SPAN></H3>
<P style="MARGIN: 0.5em 0px">A number of SWIFI Tools have been developed and a selection of these tools is given here. Six commonly used fault injection tools are Ferrari, FTAPE, Doctor, Orchestra, Xception and Grid-FIT.</P>
<UL style="LIST-STYLE-TYPE: disc; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.3em 0px 0px 1.6em; LIST-STYLE-IMAGE: url(data:image/svg+xml,%3C%3Fxml%20version%3D%221.0%22%20encoding%3D%22UTF-8%22%3F%3E%0A%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20version%3D%221.1%22%20width%3D%225%22%20height%3D%2213%22%3E%0A%3Ccircle%20cx%3D%222.5%22%20cy%3D%229.5%22%20r%3D%222.5%22%20fill%3D%22%2300528c%22%2F%3E%0A%3C%2Fsvg%3E%0A); PADDING-RIGHT: 0px">
<LI style="MARGIN-BOTTOM: 0.1em">MODIFI (MODel-Implemented Fault Injection) is a fault injection tool for robustness evaluation of Simulink behavior models. It supports fault modelling in XML for implementation of domain-specific fault models.<SUP id=cite_ref-5 class=reference style="FONT-SIZE: 11px; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fault_injection#cite_note-5"><SPAN>[</SPAN>5<SPAN>]</SPAN></A></SUP></LI>
<LI style="MARGIN-BOTTOM: 0.1em">Ferrari (Fault and ERRor Automatic Real-time Injection) is based around software traps that inject errors into a system. The traps are activated by either a call to a specific memory location or a timeout. When a trap is called the handler injects a fault into the system. The faults can either be transient or permanent. Research conducted with Ferrari shows that error detection is dependent on the fault type and where the fault is inserted.<SUP id=cite_ref-6 class=reference style="FONT-SIZE: 11px; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fault_injection#cite_note-6"><SPAN>[</SPAN>6<SPAN>]</SPAN></A></SUP></LI>
<LI style="MARGIN-BOTTOM: 0.1em">FTAPE (Fault Tolerance and Performance Evaluator) can inject faults, not only into memory and registers, but into disk accesses as well. This is achieved by inserting a special disk driver into the system that can inject faults into data sent and received from the disk unit. FTAPE also has a synthetic load unit that can simulate specific amounts of load for robustness testing purposes.<SUP id=cite_ref-7 class=reference style="FONT-SIZE: 11px; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fault_injection#cite_note-7"><SPAN>[</SPAN>7<SPAN>]</SPAN></A></SUP></LI>
<LI style="MARGIN-BOTTOM: 0.1em">DOCTOR (IntegrateD SOftware Fault InjeCTiOn EnviRonment) allows injection of memory and register faults, as well as network communication faults. It uses a combination of time-out, trap and code modification. Time-out triggers inject transient memory faults and traps inject transient emulated hardware failures, such as register corruption. Code modification is used to inject permanent faults.<SUP id=cite_ref-8 class=reference style="FONT-SIZE: 11px; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fault_injection#cite_note-8"><SPAN>[</SPAN>8<SPAN>]</SPAN></A></SUP></LI>
<LI style="MARGIN-BOTTOM: 0.1em">Orchestra is a script driven fault injector which is based around Network Level Fault Injection. Its primary use is the evaluation and validation of the fault-tolerance and timing characteristics of distributed protocols. Orchestra was initially developed for the Mach Operating System and uses certain features of this platform to compensate for latencies introduced by the fault injector. It has also been successfully ported to other operating systems.<SUP id=cite_ref-9 class=reference style="FONT-SIZE: 11px; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fault_injection#cite_note-9"><SPAN>[</SPAN>9<SPAN>]</SPAN></A></SUP></LI>
<LI style="MARGIN-BOTTOM: 0.1em">Xception is designed to take advantage of the advanced debugging features available on many modern processors. It is written to require no modification of system source and no insertion of software traps, since the processor's exception handling capabilities trigger fault injection. These triggers are based around accesses to specific memory locations. Such accesses could be either for data or fetching instructions. It is therefore possible to accurately reproduce test runs because triggers can be tied to specific events, instead of timeouts.<SUP id=cite_ref-10 class=reference style="FONT-SIZE: 11px; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fault_injection#cite_note-10"><SPAN>[</SPAN>10<SPAN>]</SPAN></A></SUP></LI>
<LI style="MARGIN-BOTTOM: 0.1em">Grid-FIT (Grid &#8211; Fault Injection Technology)<SPAN class=Apple-converted-space>&nbsp;</SPAN><SUP id=cite_ref-11 class=reference style="FONT-SIZE: 11px; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fault_injection#cite_note-11"><SPAN>[</SPAN>11<SPAN>]</SPAN></A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a dependability assessment method and tool for assessing Grid services by fault injection. Grid-FIT is derived from an earlier fault injector WS-FIT<SPAN class=Apple-converted-space>&nbsp;</SPAN><SUP id=cite_ref-12 class=reference style="FONT-SIZE: 11px; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fault_injection#cite_note-12"><SPAN>[</SPAN>12<SPAN>]</SPAN></A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>which was targeted towards Java Web Services implemented using Apache Axis transport. Grid-FIT utilises a novel fault injection mechanism that allows network level fault injection to be used to give a level of control similar to Code Insertion fault injection whilst being less invasive.<SUP id=cite_ref-13 class=reference style="FONT-SIZE: 11px; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fault_injection#cite_note-13"><SPAN>[</SPAN>13<SPAN>]</SPAN></A></SUP></LI>
<LI style="MARGIN-BOTTOM: 0.1em">LFI (Library-level Fault Injector)<SPAN class=Apple-converted-space>&nbsp;</SPAN><SUP id=cite_ref-14 class=reference style="FONT-SIZE: 11px; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fault_injection#cite_note-14"><SPAN>[</SPAN>14<SPAN>]</SPAN></A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an automatic testing tool suite, used to simulate in a controlled testing environment, exceptional situations that programs need to handle at runtime but that are not easy to check via input testing alone. LFI automatically identifies the errors exposed by shared libraries, finds potentially buggy error recovery code in program binaries and injects the desired faults at the boundary between shared libraries and applications.</LI></UL>
<H3 style="OVERFLOW: hidden; FONT-SIZE: 1.17em; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM-STYLE: none; FONT-WEIGHT: bold; COLOR: black; PADDING-BOTTOM: 0px; PADDING-TOP: 0.5em; MARGIN: 0.3em 0px 0px; LINE-HEIGHT: 1.6"><SPAN id=Commercial_tools class=mw-headline>Commercial tools</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; -webkit-user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0px; MARGIN-RIGHT: 0px">[</SPAN><A title="Edit section: Commercial tools" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/w/index.php?title=Fault_injection&amp;action=edit&amp;section=6">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0px; MARGIN-RIGHT: 0px">]</SPAN></SPAN></H3>
<UL style="LIST-STYLE-TYPE: disc; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.3em 0px 0px 1.6em; LIST-STYLE-IMAGE: url(data:image/svg+xml,%3C%3Fxml%20version%3D%221.0%22%20encoding%3D%22UTF-8%22%3F%3E%0A%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20version%3D%221.1%22%20width%3D%225%22%20height%3D%2213%22%3E%0A%3Ccircle%20cx%3D%222.5%22%20cy%3D%229.5%22%20r%3D%222.5%22%20fill%3D%22%2300528c%22%2F%3E%0A%3C%2Fsvg%3E%0A); PADDING-RIGHT: 0px">
<LI style="MARGIN-BOTTOM: 0.1em"><A title="Beyond Security" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Beyond_Security">Beyond Security</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>beSTORM<SPAN class=Apple-converted-space>&nbsp;</SPAN><SUP id=cite_ref-15 class=reference style="FONT-SIZE: 11px; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fault_injection#cite_note-15"><SPAN>[</SPAN>15<SPAN>]</SPAN></A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a commercial<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Software testing" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Software_testing#Testing_methods">black box</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>software security analysis tool. It is often used during development by original equipment manufacturers but is also used for testing products prior to implementation, notably in aerospace, banking and defense. beSTORM's test process starts with the most likely attack scenarios, then resorts to exhaustive generation based<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Fuzz testing" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fuzz_testing">fuzzing</A>. beSTORM provides modules for common protocols and 'auto learns' new or proprietary protocols, including mutation-based attacks. Highlights: binary and textual analysis, custom protocol testing, debugging and stack tracing, development language independent, CVE compliant.</LI></UL>
<UL style="LIST-STYLE-TYPE: disc; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.3em 0px 0px 1.6em; LIST-STYLE-IMAGE: url(data:image/svg+xml,%3C%3Fxml%20version%3D%221.0%22%20encoding%3D%22UTF-8%22%3F%3E%0A%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20version%3D%221.1%22%20width%3D%225%22%20height%3D%2213%22%3E%0A%3Ccircle%20cx%3D%222.5%22%20cy%3D%229.5%22%20r%3D%222.5%22%20fill%3D%22%2300528c%22%2F%3E%0A%3C%2Fsvg%3E%0A); PADDING-RIGHT: 0px">
<LI style="MARGIN-BOTTOM: 0.1em">ExhaustiF is a commercial software tool used for<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Grey box testing" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Grey_box_testing">grey box testing</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>based on software fault injection (SWIFI) to improve reliability of software intensive systems. The tool can be used during system integration and system testing phases of any software development lifecycle, complementing other testing tools as well. ExhaustiF is able to inject faults into both software and hardware. When injecting simulated faults in software, ExhaustiF offers the following fault types: Variable Corruption and Procedure Corruption. The catalogue for hardware fault injections includes faults in Memory (I/O, RAM) and CPU (Integer Unit, Floating Unit). There are different versions available for RTEMS/ERC32, RTEMS/Pentium, Linux/Pentium and MS-Windows/Pentium.<SUP id=cite_ref-16 class=reference style="FONT-SIZE: 11px; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fault_injection#cite_note-16"><SPAN>[</SPAN>16<SPAN>]</SPAN></A></SUP></LI></UL>
<UL style="LIST-STYLE-TYPE: disc; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.3em 0px 0px 1.6em; LIST-STYLE-IMAGE: url(data:image/svg+xml,%3C%3Fxml%20version%3D%221.0%22%20encoding%3D%22UTF-8%22%3F%3E%0A%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20version%3D%221.1%22%20width%3D%225%22%20height%3D%2213%22%3E%0A%3Ccircle%20cx%3D%222.5%22%20cy%3D%229.5%22%20r%3D%222.5%22%20fill%3D%22%2300528c%22%2F%3E%0A%3C%2Fsvg%3E%0A); PADDING-RIGHT: 0px">
<LI style="MARGIN-BOTTOM: 0.1em">Holodeck<SUP id=cite_ref-17 class=reference style="FONT-SIZE: 11px; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fault_injection#cite_note-17"><SPAN>[</SPAN>17<SPAN>]</SPAN></A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a test tool developed by Security Innovation that uses fault injection to simulate real-world application and system errors for Windows applications and services. Holodeck customers include many major commercial software development companies, including Microsoft, Symantec, EMC and Adobe. It provides a controlled, repeatable environment in which to analyze and debug error-handling code and application attack surfaces for fragility and security testing. It simulates file and network fuzzing faults as well as a wide range of other resource, system and custom-defined faults. It analyzes code and recommends test plans and also performs function call logging, API interception, stress testing, code coverage analysis and many other application security assurance functions.</LI></UL>
<UL style="LIST-STYLE-TYPE: disc; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.3em 0px 0px 1.6em; LIST-STYLE-IMAGE: url(data:image/svg+xml,%3C%3Fxml%20version%3D%221.0%22%20encoding%3D%22UTF-8%22%3F%3E%0A%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20version%3D%221.1%22%20width%3D%225%22%20height%3D%2213%22%3E%0A%3Ccircle%20cx%3D%222.5%22%20cy%3D%229.5%22%20r%3D%222.5%22%20fill%3D%22%2300528c%22%2F%3E%0A%3C%2Fsvg%3E%0A); PADDING-RIGHT: 0px">
<LI style="MARGIN-BOTTOM: 0.1em"><A title=Codenomicon style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Codenomicon">Codenomicon</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>Defensics<SPAN class=Apple-converted-space>&nbsp;</SPAN><SUP id=cite_ref-18 class=reference style="FONT-SIZE: 11px; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fault_injection#cite_note-18"><SPAN>[</SPAN>18<SPAN>]</SPAN></A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a blackbox test automation framework that does fault injection to more than 150 different interfaces including network protocols, API interfaces, files, and XML structures. The commercial product was launched in 2001, after five years of research at University of Oulu in the area of software fault injection. A thesis work explaining the used fuzzing principles was published by VTT, one of the PROTOS consortium members.<SUP id=cite_ref-19 class=reference style="FONT-SIZE: 11px; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fault_injection#cite_note-19"><SPAN>[</SPAN>19<SPAN>]</SPAN></A></SUP></LI></UL>
<UL style="LIST-STYLE-TYPE: disc; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.3em 0px 0px 1.6em; LIST-STYLE-IMAGE: url(data:image/svg+xml,%3C%3Fxml%20version%3D%221.0%22%20encoding%3D%22UTF-8%22%3F%3E%0A%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20version%3D%221.1%22%20width%3D%225%22%20height%3D%2213%22%3E%0A%3Ccircle%20cx%3D%222.5%22%20cy%3D%229.5%22%20r%3D%222.5%22%20fill%3D%22%2300528c%22%2F%3E%0A%3C%2Fsvg%3E%0A); PADDING-RIGHT: 0px">
<LI style="MARGIN-BOTTOM: 0.1em">The Mu Service Analyzer<SUP id=cite_ref-20 class=reference style="FONT-SIZE: 11px; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fault_injection#cite_note-20"><SPAN>[</SPAN>20<SPAN>]</SPAN></A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a commercial service testing tool developed by<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Mu Dynamics" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Mu_Dynamics">Mu Dynamics</A>.<SUP id=cite_ref-21 class=reference style="FONT-SIZE: 11px; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fault_injection#cite_note-21"><SPAN>[</SPAN>21<SPAN>]</SPAN></A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>The Mu Service Analyzer performs<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Software testing" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Software_testing#Testing_methods">black box</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Software testing" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Software_testing#Testing_methods">white box</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>testing of services based on their exposed software interfaces, using denial-of-service simulations, service-level traffic variations (to generate invalid inputs) and the replay of known vulnerability triggers. All these techniques exercise input validation and error handling and are used in conjunction with valid protocol monitors and SNMP to characterize the effects of the test traffic on the software system. The Mu Service Analyzer allows users to establish and track system-level reliability, availability and security metrics for any exposed protocol implementation. The tool has been available in the market since 2005 by customers in the North America, Asia and Europe, especially in the critical markets of network operators (and their vendors) and<A title="Industrial control systems" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Industrial_control_systems">Industrial control systems</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>(including<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Critical infrastructure" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Critical_infrastructure">Critical infrastructure</A>).</LI></UL>
<UL style="LIST-STYLE-TYPE: disc; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.3em 0px 0px 1.6em; LIST-STYLE-IMAGE: url(data:image/svg+xml,%3C%3Fxml%20version%3D%221.0%22%20encoding%3D%22UTF-8%22%3F%3E%0A%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20version%3D%221.1%22%20width%3D%225%22%20height%3D%2213%22%3E%0A%3Ccircle%20cx%3D%222.5%22%20cy%3D%229.5%22%20r%3D%222.5%22%20fill%3D%22%2300528c%22%2F%3E%0A%3C%2Fsvg%3E%0A); PADDING-RIGHT: 0px">
<LI style="MARGIN-BOTTOM: 0.1em">Xception<SUP id=cite_ref-22 class=reference style="FONT-SIZE: 11px; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fault_injection#cite_note-22"><SPAN>[</SPAN>22<SPAN>]</SPAN></A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a commercial software tool developed by Critical Software SA<SUP id=cite_ref-23 class=reference style="FONT-SIZE: 11px; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fault_injection#cite_note-23"><SPAN>[</SPAN>23<SPAN>]</SPAN></A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>used for<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Software testing" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Software_testing#Testing_methods">black box</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Software testing" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Software_testing#Testing_methods">white box</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>testing based on software fault injection (SWIFI) and Scan Chain fault injection (SCIFI). Xception allows users to test the robustness of their systems or just part of them, allowing both Software fault injection and Hardware fault injection for a specific set of architectures. The tool has been used in the market since 1999 and has customers in the American, Asian and European markets, especially in the critical market of aerospace and the telecom market. The full Xception product family includes: a) The main Xception tool, a state-of-the-art leader in Software Implemented Fault Injection (SWIFI) technology; b) The Easy Fault Definition (EFD) and Xtract (Xception Analysis Tool) add-on tools; c) The extended Xception tool (eXception), with the fault injection extensions for Scan Chain and pin-level forcing.</LI></UL>
<H3 style="OVERFLOW: hidden; FONT-SIZE: 1.17em; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM-STYLE: none; FONT-WEIGHT: bold; COLOR: black; PADDING-BOTTOM: 0px; PADDING-TOP: 0.5em; MARGIN: 0.3em 0px 0px; LINE-HEIGHT: 1.6"><SPAN id=Libraries class=mw-headline>Libraries</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; -webkit-user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0px; MARGIN-RIGHT: 0px">[</SPAN><A title="Edit section: Libraries" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/w/index.php?title=Fault_injection&amp;action=edit&amp;section=7">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0px; MARGIN-RIGHT: 0px">]</SPAN></SPAN></H3>
<UL style="LIST-STYLE-TYPE: disc; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.3em 0px 0px 1.6em; LIST-STYLE-IMAGE: url(data:image/svg+xml,%3C%3Fxml%20version%3D%221.0%22%20encoding%3D%22UTF-8%22%3F%3E%0A%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20version%3D%221.1%22%20width%3D%225%22%20height%3D%2213%22%3E%0A%3Ccircle%20cx%3D%222.5%22%20cy%3D%229.5%22%20r%3D%222.5%22%20fill%3D%22%2300528c%22%2F%3E%0A%3C%2Fsvg%3E%0A); PADDING-RIGHT: 0px">
<LI style="MARGIN-BOTTOM: 0.1em"><A class="external text" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(102,51,102); PADDING-RIGHT: 13px" href="http://blitiri.com.ar/p/libfiu/" rel=nofollow>libfiu</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>(Fault injection in userspace), C library to simulate faults in POSIX routines without modifying the source code. An API is included to simulate arbitrary faults at run-time at any point of the program.</LI>
<LI style="MARGIN-BOTTOM: 0.1em"><A class="external text" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(102,51,102); PADDING-RIGHT: 13px" href="http://testapi.codeplex.com/" rel=nofollow>TestApi</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a shared-source API library, which provides facilities for fault injection testing as well as other testing types, data-structures and algorithms for .NET applications.</LI>
<LI style="MARGIN-BOTTOM: 0.1em"><A class="external text" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(102,51,102); PADDING-RIGHT: 13px" href="http://github.com/fraunhoferfokus/Fuzzino" rel=nofollow>Fuzzino</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an open source library, which provides a rich set of fuzzing heuristics that are generated from a type specification and/or valid values.</LI></UL>
<H2 style="OVERFLOW: hidden; FONT-SIZE: 1.5em; FONT-FAMILY: 'Linux Libertine', Georgia, Times, serif; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: rgb(170,170,170) 1px solid; FONT-WEIGHT: normal; COLOR: black; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 1em 0px 0.25em; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px"><SPAN id=Fault_Injection_in_Functional_Properties_or_Test_Cases class=mw-headline>Fault Injection in Functional Properties or Test Cases</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; -webkit-user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0px; MARGIN-RIGHT: 0px">[</SPAN><A title="Edit section: Fault Injection in Functional Properties or Test Cases" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/w/index.php?title=Fault_injection&amp;action=edit&amp;section=8">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0px; MARGIN-RIGHT: 0px">]</SPAN></SPAN></H2>
<P style="MARGIN: 0.5em 0px">In contrast to traditional mutation testing where mutant faults are generated and injected into the code description of the model, application of a series of newly defined mutation operators directly to the model properties rather than to the model code has also been investigated.<SUP id=cite_ref-24 class=reference style="FONT-SIZE: 11px; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fault_injection#cite_note-24"><SPAN>[</SPAN>24<SPAN>]</SPAN></A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>Mutant properties that are generated from the initial properties (or test cases) and validated by the model checker should be considered as new properties that have been missed during the initial verification procedure. Therefore, adding these newly identified properties to the existing list of properties improves the coverage metric of the formal verification and consequently lead to a more reliable design.</P>
<H2 style="OVERFLOW: hidden; FONT-SIZE: 1.5em; FONT-FAMILY: 'Linux Libertine', Georgia, Times, serif; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: rgb(170,170,170) 1px solid; FONT-WEIGHT: normal; COLOR: black; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 1em 0px 0.25em; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px"><SPAN id=Application_of_fault_injection class=mw-headline>Application of fault injection</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; -webkit-user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0px; MARGIN-RIGHT: 0px">[</SPAN><A title="Edit section: Application of fault injection" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/w/index.php?title=Fault_injection&amp;action=edit&amp;section=9">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0px; MARGIN-RIGHT: 0px">]</SPAN></SPAN></H2>
<P style="MARGIN: 0.5em 0px">Fault injection can take many forms. In the testing of<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Operating system" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Operating_system">operating systems</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>for example, fault injection is often performed by a<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>driver</I>(<A title="Kernel (computer science)" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Kernel_(computer_science)">kernel</A>-mode software) that intercepts<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>system calls</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>(calls into the kernel) and randomly returning a failure for some of the calls. This type of fault injection is useful for testing low level user mode software. For higher level software, various methods inject faults. In<A title="Managed code" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Managed_code">managed code</A>, it is common to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Instrumentation (computer programming)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Instrumentation_(computer_programming)">instrumentation</A>. Although fault injection can be undertaken by hand a number of fault injection tools exist to automate the process of fault injection.<SUP id=cite_ref-25 class=reference style="FONT-SIZE: 11px; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Fault_injection#cite_note-25"><SPAN>[</SPAN>25<SPAN>]</SPAN></A></SUP></P>
<P style="MARGIN: 0.5em 0px">Depending on the complexity of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=API class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/API">API</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>for the level where faults are injected, fault injection tests often must be carefully designed to minimise the number of false positives. Even a well designed fault injection test can sometimes produce situations that are impossible in the normal operation of the software. For example, imagine there are two API<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Function (computer science)" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Function_(computer_science)">functions</A>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(221,221,221) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(221,221,221) 1px solid; BORDER-BOTTOM: rgb(221,221,221) 1px solid; COLOR: black; PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(221,221,221) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(249,249,249); border-radius: 2px">Commit</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(221,221,221) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(221,221,221) 1px solid; BORDER-BOTTOM: rgb(221,221,221) 1px solid; COLOR: black; PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(221,221,221) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(249,249,249); border-radius: 2px">PrepareForCommit</CODE>, such that alone, each of these functions can possibly fail, but if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(221,221,221) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(221,221,221) 1px solid; BORDER-BOTTOM: rgb(221,221,221) 1px solid; COLOR: black; PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(221,221,221) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(249,249,249); border-radius: 2px">PrepareForCommit</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called and succeeds, a subsequent call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(221,221,221) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(221,221,221) 1px solid; BORDER-BOTTOM: rgb(221,221,221) 1px solid; COLOR: black; PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(221,221,221) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(249,249,249); border-radius: 2px">Commit</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is guaranteed to succeed. Now consider the following code:</P><PRE style="BORDER-TOP: rgb(221,221,221) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(221,221,221) 1px solid; BORDER-BOTTOM: rgb(221,221,221) 1px solid; COLOR: black; PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(221,221,221) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(249,249,249)"><CODE style="BORDER-TOP: rgb(221,221,221) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(221,221,221) 1px solid; BORDER-BOTTOM: rgb(221,221,221) 1px solid; COLOR: black; PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(221,221,221) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(249,249,249); border-radius: 2px"> error = PrepareForCommit();
 if (error == SUCCESS) {
   error = Commit();
   assert(error == SUCCESS);
 }
</CODE>
</PRE>
<P style="MARGIN: 0.5em 0px">Often, it will be infeasible for the fault injection implementation to keep track of enough state to make the guarantee that the API functions make. In this example, a fault injection test of the above code might hit the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Assertion (computing)" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="http://en.wikipedia.org/wiki/Assertion_(computing)">assert</A>, whereas this would never happen in normal operation.</P></DIV></DIV>