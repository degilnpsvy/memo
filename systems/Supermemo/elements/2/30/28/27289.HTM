/*<BR>&nbsp;* The per-pool workqueue.&nbsp; While queued, the lower WORK_STRUCT_FLAG_BITS<BR>&nbsp;* of work_struct-&gt;data are used for flags and the remaining high bits<BR>&nbsp;* point to the pwq; thus, pwqs need to be aligned at two's power of the<BR>&nbsp;* number of flag bits.<BR>&nbsp;*/<BR>struct pool_workqueue {<BR>&nbsp;struct worker_pool&nbsp;*pool;&nbsp;&nbsp;/* I: the associated pool */<BR>&nbsp;struct workqueue_struct *wq;&nbsp;&nbsp;/* I: the owning workqueue */<BR>&nbsp;int&nbsp;&nbsp;&nbsp;work_color;&nbsp;/* L: current color */<BR>&nbsp;int&nbsp;&nbsp;&nbsp;flush_color;&nbsp;/* L: flushing color */<BR>&nbsp;int&nbsp;&nbsp;&nbsp;refcnt;&nbsp;&nbsp;/* L: reference count */<BR>&nbsp;int&nbsp;&nbsp;&nbsp;nr_in_flight[WORK_NR_COLORS];<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;/* L: nr of in_flight works */<BR>&nbsp;int&nbsp;&nbsp;&nbsp;nr_active;&nbsp;/* L: nr of active works */<BR>&nbsp;int&nbsp;&nbsp;&nbsp;max_active;&nbsp;/* L: max active works */<BR>&nbsp;struct list_head&nbsp;delayed_works;&nbsp;/* L: delayed works */<BR>&nbsp;struct list_head&nbsp;pwqs_node;&nbsp;/* WR: node on wq-&gt;pwqs */<BR>&nbsp;struct list_head&nbsp;mayday_node;&nbsp;/* MD: node on wq-&gt;maydays */</P>
<P>&nbsp;/*<BR>&nbsp; * Release of unbound pwq is punted to system_wq.&nbsp; See put_pwq()<BR>&nbsp; * and pwq_unbound_release_workfn() for details.&nbsp; pool_workqueue<BR>&nbsp; * itself is also sched-RCU protected so that the first pwq can be<BR>&nbsp; * determined without grabbing wq-&gt;mutex.<BR>&nbsp; */<BR>&nbsp;struct work_struct&nbsp;unbound_release_work;<BR>&nbsp;struct rcu_head&nbsp;&nbsp;rcu;<BR>} __aligned(1 &lt;&lt; WORK_STRUCT_FLAG_BITS);