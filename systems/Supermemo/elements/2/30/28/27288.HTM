/*<BR>&nbsp;* The externally visible workqueue.&nbsp; It relays the issued work items to<BR>&nbsp;* the appropriate worker_pool through its pool_workqueues.<BR>&nbsp;*/<BR>struct workqueue_struct {<BR>&nbsp;struct list_head&nbsp;pwqs;&nbsp;&nbsp;/* WR: all pwqs of this wq */<BR>&nbsp;struct list_head&nbsp;list;&nbsp;&nbsp;/* PR: list of all workqueues */ 
<P></P>
<P>&nbsp;struct mutex&nbsp;&nbsp;mutex;&nbsp;&nbsp;/* protects this wq */<BR>&nbsp;int&nbsp;&nbsp;&nbsp;work_color;&nbsp;/* WQ: current work color */<BR>&nbsp;int&nbsp;&nbsp;&nbsp;flush_color;&nbsp;/* WQ: current flush color */<BR>&nbsp;atomic_t&nbsp;&nbsp;nr_pwqs_to_flush; /* flush in progress */<BR>&nbsp;struct wq_flusher&nbsp;*first_flusher;&nbsp;/* WQ: first flusher */<BR>&nbsp;struct list_head&nbsp;flusher_queue;&nbsp;/* WQ: flush waiters */<BR>&nbsp;struct list_head&nbsp;flusher_overflow; /* WQ: flush overflow list */</P>
<P>&nbsp;struct list_head&nbsp;maydays;&nbsp;/* MD: pwqs requesting rescue */<BR>&nbsp;struct worker&nbsp;&nbsp;*rescuer;&nbsp;/* I: rescue worker */</P>
<P>&nbsp;int&nbsp;&nbsp;&nbsp;nr_drainers;&nbsp;/* WQ: drain in progress */<BR>&nbsp;int&nbsp;&nbsp;&nbsp;saved_max_active; /* WQ: saved pwq max_active */</P>
<P>&nbsp;struct workqueue_attrs&nbsp;*unbound_attrs;&nbsp;/* PW: only for unbound wqs */<BR>&nbsp;struct pool_workqueue&nbsp;*dfl_pwq;&nbsp;/* PW: only for unbound wqs */</P>
<P>#ifdef CONFIG_SYSFS<BR>&nbsp;struct wq_device&nbsp;*wq_dev;&nbsp;/* I: for sysfs interface */<BR>#endif<BR>#ifdef CONFIG_LOCKDEP<BR>&nbsp;struct lockdep_map&nbsp;lockdep_map;<BR>#endif<BR>&nbsp;char&nbsp;&nbsp;&nbsp;name[WQ_NAME_LEN]; /* I: workqueue name */</P>
<P>&nbsp;/*<BR>&nbsp; * Destruction of workqueue_struct is sched-RCU protected to allow<BR>&nbsp; * walking the workqueues list without grabbing wq_pool_mutex.<BR>&nbsp; * This is used to dump all workqueues from sysrq.<BR>&nbsp; */<BR>&nbsp;struct rcu_head&nbsp;&nbsp;rcu;</P>
<P>&nbsp;/* hot fields used during command issue, aligned to cacheline */<BR>&nbsp;unsigned int&nbsp;&nbsp;flags ____cacheline_aligned; /* WQ: WQ_* flags */<BR>&nbsp;struct pool_workqueue __percpu *cpu_pwqs; /* I: per-cpu pwqs */<BR>&nbsp;struct pool_workqueue __rcu *numa_pwq_tbl[]; /* PWR: unbound pwqs indexed by node */<BR>};