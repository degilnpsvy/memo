/**<BR>&nbsp;*&nbsp;<SPAN class=cloze>[...]</SPAN> - disable an irq and wait for completion<BR>&nbsp;*&nbsp;@irq: Interrupt to disable<BR>&nbsp;*<BR>&nbsp;*&nbsp;Disable the selected interrupt line.&nbsp; Enables and Disables are<BR>&nbsp;*&nbsp;nested.<BR>&nbsp;*&nbsp;This function waits for any pending IRQ handlers for this interrupt<BR>&nbsp;*&nbsp;to complete before returning. If you use this function while<BR>&nbsp;*&nbsp;holding a resource the IRQ handler may need you will deadlock.<BR>&nbsp;*<BR>&nbsp;*&nbsp;This function may be called - with care - from IRQ context.<BR>&nbsp;*/<BR>void <SPAN class=cloze><FONT color=#000000>[...]</FONT></SPAN>(unsigned int irq)<BR>{<BR>&nbsp;if (!__disable_irq_nosync(irq))<BR>&nbsp;&nbsp;synchronize_irq(irq);<BR>}<BR>EXPORT_SYMBOL(<SPAN class=cloze><FONT color=#000000>[...]</FONT></SPAN>);