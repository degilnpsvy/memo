/*<BR>&nbsp;* strndup_user - duplicate an existing string from user space<BR>&nbsp;* @s: The string to duplicate<BR>&nbsp;* @n: Maximum number of bytes to copy, including the trailing NUL.<BR>&nbsp;*/<BR>char *strndup_user(const char __user *s, long n)<BR>{<BR>&nbsp;char *p;<BR>&nbsp;long length;</P>
<P>&nbsp;length = strnlen_user(s, n);</P>
<P>&nbsp;if (!length)<BR>&nbsp;&nbsp;return ERR_PTR(-EFAULT);</P>
<P>&nbsp;if (length &gt; n)<BR>&nbsp;&nbsp;return ERR_PTR(-EINVAL);</P>
<P>&nbsp;p = memdup_user(s, length);</P>
<P>&nbsp;if (IS_ERR(p))<BR>&nbsp;&nbsp;return p;</P>
<P>&nbsp;p[length - 1] = '\0';</P>
<P>&nbsp;return p;<BR>}<BR>EXPORT_SYMBOL(strndup_user);