/*<BR>&nbsp;* min()/max()/clamp() macros that also do<BR>&nbsp;* strict type-checking.. See the<BR>&nbsp;* "unnecessary" pointer comparison.<BR>&nbsp;*/<BR>#define min(x, y) ({&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;typeof(x) _min1 = (x);&nbsp;&nbsp;&nbsp;\<BR>&nbsp;typeof(y) _min2 = (y);&nbsp;&nbsp;&nbsp;\<BR>&nbsp;(void) (&amp;_min1 == &amp;_min2);&nbsp;&nbsp;\<BR>&nbsp;_min1 &lt; _min2 ? _min1 : _min2; }) 
<P></P>
<P>#define max(x, y) ({&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;typeof(x) _max1 = (x);&nbsp;&nbsp;&nbsp;\<BR>&nbsp;typeof(y) _max2 = (y);&nbsp;&nbsp;&nbsp;\<BR>&nbsp;(void) (&amp;_max1 == &amp;_max2);&nbsp;&nbsp;\<BR>&nbsp;_max1 &gt; _max2 ? _max1 : _max2; })</P>
<P><FONT class=extract>#define min3(x, y, z) min((typeof(x))min(x, y), z)<BR>#define max3(x, y, z) max((typeof(x))max(x, y), z)</FONT></P>
<P><FONT class=extract>/**<BR>&nbsp;* min_not_zero - return the minimum that is _not_ zero, unless both are zero<BR>&nbsp;* @x: value1<BR>&nbsp;* @y: value2<BR>&nbsp;*/<BR>#define min_not_zero(x, y) ({&nbsp;&nbsp;&nbsp;\<BR>&nbsp;typeof(x) __x = (x);&nbsp;&nbsp;&nbsp;\<BR>&nbsp;typeof(y) __y = (y);&nbsp;&nbsp;&nbsp;\<BR>&nbsp;__x == 0 ? __y : ((__y == 0) ? __x : min(__x, __y)); })</FONT>