<FONT class=extract>/**<BR>&nbsp;* clamp - return a value clamped to a given range with strict typechecking<BR>&nbsp;* @val: current value<BR>&nbsp;* @lo: lowest allowable value<BR>&nbsp;* @hi: highest allowable value<BR>&nbsp;*<BR>&nbsp;* This macro does strict typechecking of lo/hi to make sure they are of the<BR>&nbsp;* same type as val.&nbsp; See the unnecessary pointer comparisons.<BR>&nbsp;*/<BR>#define clamp(val, lo, hi) min((typeof(val))max(val, lo), hi)</FONT> 
<P></P>
<P><FONT class=extract>/*<BR>&nbsp;* ..and if you can't take the strict<BR>&nbsp;* types, you can specify one yourself.<BR>&nbsp;*<BR>&nbsp;* Or not use min/max/clamp at all, of course.<BR>&nbsp;*/<BR>#define min_t(type, x, y) ({&nbsp;&nbsp;&nbsp;\<BR>&nbsp;type __min1 = (x);&nbsp;&nbsp;&nbsp;\<BR>&nbsp;type __min2 = (y);&nbsp;&nbsp;&nbsp;\<BR>&nbsp;__min1 &lt; __min2 ? __min1: __min2; })</FONT></P>
<P><FONT class=extract>#define max_t(type, x, y) ({&nbsp;&nbsp;&nbsp;\<BR>&nbsp;type __max1 = (x);&nbsp;&nbsp;&nbsp;\<BR>&nbsp;type __max2 = (y);&nbsp;&nbsp;&nbsp;\<BR>&nbsp;__max1 &gt; __max2 ? __max1: __max2; })</FONT></P>
<P><FONT class=extract>/**<BR>&nbsp;* clamp_t - return a value clamped to a given range using a given type<BR>&nbsp;* @type: the type of variable to use<BR>&nbsp;* @val: current value<BR>&nbsp;* @lo: minimum allowable value<BR>&nbsp;* @hi: maximum allowable value<BR>&nbsp;*<BR>&nbsp;* This macro does no typechecking and uses temporary variables of type<BR>&nbsp;* 'type' to make all the comparisons.<BR>&nbsp;*/<BR>#define clamp_t(type, val, lo, hi) min_t(type, max_t(type, val, lo), hi)</FONT></P>
<P><FONT class=extract>/**<BR>&nbsp;* clamp_val - return a value clamped to a given range using val's type<BR>&nbsp;* @val: current value<BR>&nbsp;* @lo: minimum allowable value<BR>&nbsp;* @hi: maximum allowable value<BR>&nbsp;*<BR>&nbsp;* This macro does no typechecking and uses temporary variables of whatever<BR>&nbsp;* type the input argument 'val' is.&nbsp; This is useful when val is an unsigned<BR>&nbsp;* type and min and max are literals that will otherwise be assigned a signed<BR>&nbsp;* integer type.<BR>&nbsp;*/<BR>#define clamp_val(val, lo, hi) clamp_t(typeof(val), val, lo, hi)</FONT>