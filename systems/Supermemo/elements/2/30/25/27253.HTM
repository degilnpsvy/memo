/**<BR>&nbsp;* abs - return absolute value of an argument<BR>&nbsp;* @x: the value.&nbsp; If it is unsigned type, it is converted to signed type first.<BR>&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp; char is treated as if it was signed (regardless of whether it really is)<BR>&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp; but the macro's return type is preserved as char.<BR>&nbsp;*<BR>&nbsp;* Return: an absolute value of x.<BR>&nbsp;*/<BR>#define abs(x)&nbsp;__abs_choose_expr(x, long long,&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;__abs_choose_expr(x, long,&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;__abs_choose_expr(x, int,&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;__abs_choose_expr(x, short,&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;__abs_choose_expr(x, char,&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;__builtin_choose_expr(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;__builtin_types_compatible_p(typeof(x), char),&nbsp;\<BR>&nbsp;&nbsp;&nbsp;(char)({ signed char __x = (x); __x&lt;0?-__x:__x; }), \<BR>&nbsp;&nbsp;&nbsp;((void)0))))))) 
<P></P>
<P>#define __abs_choose_expr(x, type, other) __builtin_choose_expr(&nbsp;\<BR>&nbsp;__builtin_types_compatible_p(typeof(x),&nbsp;&nbsp; signed type) ||&nbsp;\<BR>&nbsp;__builtin_types_compatible_p(typeof(x), unsigned type),&nbsp;&nbsp;\<BR>&nbsp;({ signed type __x = (x); __x &lt; 0 ? -__x : __x; }), other)