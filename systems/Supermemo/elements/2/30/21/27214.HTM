2) Definitions The TCG "target" is the architecture for which we generate the code. It is of course not the same as the "target" of QEMU which is the emulated architecture. As TCG started as a generic C backend used for cross compiling, it is assumed that the TCG target is different from the host, although it is never the case for QEMU. <FONT class=extract>In this document, we use "guest" to specify what architecture we are emulating; "target" always means the TCG target, the machine on which we are running QEMU.</FONT> <FONT class=extract>A TCG "function" corresponds to a QEMU Translated Block (TB).</FONT> <FONT class=extract>A TCG "temporary" is a variable only live in a basic block. Temporaries are allocated explicitly in each function.</FONT> <FONT class=extract>A TCG "local temporary" is a variable only live in a function. Local temporaries are allocated explicitly in each function.</FONT> <FONT class=extract>A TCG "global" is a variable which is live in all the functions (equivalent of a C global variable). They are defined before the functions defined. A TCG global can be a memory location (e.g. a QEMU CPU register), a fixed host register (e.g. the QEMU CPU state pointer) or a memory location which is stored in a register outside QEMU TBs (not implemented yet).</FONT> <FONT class=extract>A TCG "basic block" corresponds to a list of instructions terminated by a branch instruction.</FONT> <FONT class=extract>An operation with "undefined behavior" may result in a crash.</FONT> <FONT class=extract>An operation with "unspecified behavior" shall not crash. However, the result may be one of several possibilities so may be considered an "undefined result".</FONT>