<P class=docText><TT>input_handler</TT> and register it with the input core as follows:</P>
<DIV class=docText>
<DIV class=codeSegmentsExpansionLinks>Code View:</DIV><PRE>static struct input_handler my_event_handler = {
  .event      = mydev_event,      /* Handle event reports sent by
                                     input device drivers that use
                                     this event driver's services */</PRE><PRE>  // .fops no longer exists
  .fops       = &amp;mydev_fops,      /* Methods to manage
                                     <SPAN class=docEmphasis>/dev/input/mydev</SPAN> */
  .minor      = MYDEV_MINOR_BASE, /* Minor number of
                                     <SPAN class=docEmphasis>/dev/input/mydev</SPAN> */
  .name       = "mydev",          /* Event driver name */
  .id_table   = mydev_ids,        /* This event driver can handle
                                     requests from these IDs */
  .connect    = mydev_connect,    /* Invoked if there is an
                                     ID match */
  .disconnect = mydev_disconnect, /* Called when the driver unregisters
                                   */
};

/* Driver Initialization */
static int __init
mydev_init(void)
{
  /* ... */

  input_register_handler(&amp;my_event_handler);

  /* ... */
  return 0;
}

					  </PRE></DIV><BR>
<P class=docText>Look at the implementation of mousedev (<SPAN class=docEmphasis>drivers/input/mousedev.c</SPAN>) for a complete example.