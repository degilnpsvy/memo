&nbsp;- <FONT class=extract>A kobject is an object of type struct kobject.&nbsp; Kobjects have a name<BR>&nbsp;&nbsp; and a reference count.&nbsp; A kobject also has a parent pointer (allowing<BR>&nbsp;&nbsp; objects to be arranged into hierarchies), a specific type, and,<BR>&nbsp;&nbsp; usually, a representation in the sysfs virtual filesystem.</FONT> 
<P></P>
<P>&nbsp;&nbsp; <FONT class=extract>Kobjects are generally not interesting on their own; instead, they are<BR>&nbsp;&nbsp; usually embedded within some other structure which contains the stuff<BR>&nbsp;&nbsp; the code is really interested in.</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp; No structure should EVER have more than one kobject embedded within it.<BR>&nbsp;&nbsp; If it does, the reference counting for the object is sure to be messed<BR>&nbsp;&nbsp; up and incorrect, and your code will be buggy.&nbsp; So do not do this.</FONT></P>
<P>&nbsp;- <FONT class=extract>A ktype is the type of object that embeds a kobject.&nbsp; Every structure<BR>&nbsp;&nbsp; that embeds a kobject needs a corresponding ktype.&nbsp; The ktype controls<BR>&nbsp;&nbsp; what happens to the kobject when it is created and destroyed.</FONT></P>
<P>&nbsp;- <FONT class=extract>A kset is a group of kobjects.&nbsp; These kobjects can be of the same ktype<BR>&nbsp;&nbsp; or belong to different ktypes.&nbsp; The kset is the basic container type for<BR>&nbsp;&nbsp; collections of kobjects. Ksets contain their own kobjects, but you can<BR>&nbsp;&nbsp; safely ignore that implementation detail as the kset core code handles<BR>&nbsp;&nbsp; this kobject automatically.</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp; When you see a sysfs directory full of other directories, generally each<BR>&nbsp;&nbsp; of those directories corresponds to a kobject in the same kset.</FONT>