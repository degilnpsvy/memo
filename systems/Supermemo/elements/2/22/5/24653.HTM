Initialization of kobjects 
<P></P>
<P><FONT class=extract>Code which creates a kobject must, of course, initialize that object. Some<BR>of the internal fields are setup with a (mandatory) call to kobject_init():</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; void kobject_init(struct kobject *kobj, struct kobj_type *ktype);</FONT></P>
<P><FONT class=extract>The ktype is required for a kobject to be created properly, as every kobject<BR>must have an associated kobj_type.</FONT>&nbsp; <FONT class=extract>After calling kobject_init(), to<BR>register the kobject with sysfs, the function kobject_add() must be called:</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; int kobject_add(struct kobject *kobj, struct kobject *parent, const char *fmt, ...);</FONT></P>
<P><FONT class=extract>This sets up the parent of the kobject and the name for the kobject<BR>properly.&nbsp; If the kobject is to be associated with a specific kset,<BR>kobj-&gt;kset must be assigned before calling kobject_add().&nbsp; If a kset is<BR>associated with a kobject, then the parent for the kobject can be set to<BR>NULL in the call to kobject_add() and then the kobject's parent will be the<BR>kset itself.</FONT></P>
<P><FONT class=extract>As the name of the kobject is set when it is added to the kernel, the name<BR>of the kobject should never be manipulated directly.&nbsp; If you must change<BR>the name of the kobject, call kobject_rename():</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; int kobject_rename(struct kobject *kobj, const char *new_name);</FONT></P>
<P><FONT class=extract>kobject_rename does not perform any locking or have a solid notion of<BR>what names are valid so the caller must provide their own sanity checking<BR>and serialization.</FONT></P>
<P>There is a function called kobject_set_name() but that is legacy cruft and<BR>is being removed.&nbsp; If your code needs to call this function, it is<BR>incorrect and needs to be fixed.</P>
<P><FONT class=extract>To properly access the name of the kobject, use the function<BR>kobject_name():</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; const char *kobject_name(const struct kobject * kobj);</FONT></P>
<P><FONT class=extract>There is a helper function to both initialize and add the kobject to the<BR>kernel at the same time, called surprisingly enough kobject_init_and_add():</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; int kobject_init_and_add(struct kobject *kobj, struct kobj_type *ktype,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct kobject *parent, const char *fmt, ...);</FONT></P>
<P><FONT class=extract>The arguments are the same as the individual kobject_init() and<BR>kobject_add() functions described above.</FONT>