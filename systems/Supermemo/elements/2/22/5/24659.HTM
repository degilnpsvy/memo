Kobject removal 
<P></P>
<P><FONT class=extract>After a kobject has been registered with the kobject core successfully, it<BR>must be cleaned up when the code is finished with it.&nbsp; To do that, call<BR>kobject_put().&nbsp; By doing this, the kobject core will automatically clean up<BR>all of the memory allocated by this kobject.&nbsp; If a KOBJ_ADD uevent has been<BR>sent for the object, a corresponding KOBJ_REMOVE uevent will be sent, and<BR>any other sysfs housekeeping will be handled for the caller properly.</FONT></P>
<P><FONT class=extract>If you need to do a two-stage delete of the kobject (say you are not<BR>allowed to sleep when you need to destroy the object), then call<BR>kobject_del() which will unregister the kobject from sysfs.&nbsp; This makes the<BR>kobject "invisible", but it is not cleaned up, and the reference count of<BR>the object is still the same.&nbsp; At a later time call kobject_put() to finish<BR>the cleanup of the memory associated with the kobject.</FONT></P>
<P><FONT class=extract>kobject_del() can be used to drop the reference to the parent object, if<BR>circular references are constructed.&nbsp; It is valid in some cases, that a<BR>parent objects references a child.&nbsp; Circular references _must_ be broken<BR>with an explicit call to kobject_del(), so that a release functions will be<BR>called, and the objects in the former circle release each other.</FONT>