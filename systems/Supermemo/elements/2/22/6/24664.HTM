<H5 id=title-ID0EFLPM class=docSection3Title>Device Example: Virtual Mouse</H5>
<P class=docText><A name="is how"></A>This is how our virtual mouse works: An application (<SPAN class=docEmphasis>coord.c</SPAN><A name="mouse driver"></A>) emulates mouse movements and dispatches coordinate information to the virtual mouse driver (<SPAN class=docEmphasis>vms.c</SPAN><A name="via a"></A>) via a sysfs node, <SPAN class=docEmphasis>/sys/devices/platform/vms/coordinates.</SPAN><A name="mouse driver"></A> The virtual mouse driver (<SPAN class=docEmphasis>vms</SPAN><A name="for short"></A> driver for short) channels these movements upstream via evdev. <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch07.html#ch07fig02">Figure 7.2</A> shows the details.</P><A name=ch07fig02></A>
<P>
<CENTER>
<H5 class=docFigureTitle>Figure 7.2. An input driver for a virtual mouse.</H5>
<P class=docText>
<DIV class=st1><A href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/images/YTNyaWQ3ODBzOS9jL2VnbXRwNjQ5NWEzMi9yZzE1ZmZpMHBhdGxfMC8yaGlnN2NzZ2ku.jpg" target=_blank>[View full size image]</A></DIV><IMG border=0 alt="" src="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/images/YTNyaWQ3ODBzOS9jL2VnbXRwNjQ5NWEzMi9yZzE1ZmkwcGdmaS4wLzJoaWc3c2M-.jpg" width=500 height=429> 
<P></P></CENTER>
<P></P><BR>
<P class=docText><SPAN class=docEmphasis>General-purpose mouse</SPAN> (<SPAN class=docEmphasis>gpm</SPAN><A name="in text"></A>) is a server that lets you use a mouse in text mode without assistance from an X server. Gpm understands evdev messages, so the vms driver can directly communicate with it. After you have everything in place, you can see the cursor dancing over your screen to the tune of the virtual mouse movements streamed by <SPAN class=docEmphasis>coord.c</SPAN>.</P>
<P class=docText><A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch07.html#ch07ex01">Listing 7.1</A> contains <SPAN class=docEmphasis>coord.c</SPAN><A name="and Y"></A>, which continuously generates random X and Y coordinates. Mice, unlike joysticks or touch screens, produce relative coordinates, so that is what <SPAN class=docEmphasis>coord.c</SPAN> does. The vms driver is shown in <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch07.html#ch07ex02">Listing 7.2</A>.<A name=iddle1612></A><A name=iddle4006></A><A name=iddle4595></A></P>
<P class=docText></P><A name=ch07ex01></A>
<H5 id=title-ID0EPOPM class=docExampleTitle>Listing 7.1. Application to Simulate Mouse Movements (coord.c)</H5>
<P>
<TABLE cellSpacing=0 cellPadding=5 border=1>
<TBODY>
<TR>
<TD>
<DIV class=codeSegmentsExpansionLinks>Code View:</DIV><PRE>#include <FCNTL.H>

int
main(int argc, char *argv[])
{
  int sim_fd;
  int x, y;
  char buffer[10];

  /* Open the sysfs coordinate node */
  sim_fd = open("/sys/devices/platform/vms/coordinates", O_RDWR);
  if (sim_fd &lt; 0) {
    perror("Couldn't open vms coordinate file\n");
    exit(-1);
  }
  while (1) {
    /* Generate random relative coordinates */
    x = random()%20;
    y = random()%20;
    if (x%2) x = -x; if (y%2) y = -y;

    /* Convey simulated coordinates to the virtual mouse driver */
    sprintf(buffer, "%d %d %d", x, y, 0);
    write(sim_fd, buffer, strlen(buffer));
    fsync(sim_fd);
    sleep(1);
  }

  close(sim_fd);
}

					  </FCNTL.H></PRE><BR></TD></TR></TBODY></TABLE></P>
<P class=docText></P><A name=ch07ex02></A>
<H5 id=title-ID0EGPPM class=docExampleTitle>Listing 7.2. Input Driver for the Virtual Mouse (vms.c)</H5>
<P>
<TABLE cellSpacing=0 cellPadding=5 border=1>
<TBODY>
<TR>
<TD>
<DIV class=codeSegmentsExpansionLinks>Code View:</DIV><PRE>#include <LINUX fs.h="">
#include <ASM uaccess.h="">
#include <LINUX pci.h="">
#include <LINUX input.h="">
#include <LINUX platform_device.h="">

struct input_dev *vms_input_dev;        /* Representation of an input device */
static struct platform_device *vms_dev; /* Device structure */

                                        /* Sysfs method to input simulated
                                           coordinates to the virtual
                                           mouse driver */
static ssize_t
write_vms(struct device *dev,
          struct device_attribute *attr,
          const char *buffer, size_t count)
{
  int x,y;
  sscanf(buffer, "%d%d", &amp;x, &amp;y);
                                        /* Report relative coordinates via the
                                           event interface */
  input_report_rel(vms_input_dev, REL_X, x);
  input_report_rel(vms_input_dev, REL_Y, y);
  input_sync(vms_input_dev);

  return count;
}

/* Attach the sysfs write method */
DEVICE_ATTR(coordinates, 0644, NULL, write_vms);

/* Attribute Descriptor */
static struct attribute *vms_attrs[] = {
  &amp;dev_attr_coordinates.attr,
  NULL
};

/* Attribute group */
static struct attribute_group vms_attr_group = {
  .attrs = vms_attrs,
};

/* Driver Initialization */
int __init
vms_init(void)
{

  /* Register a platform device */
  vms_dev = platform_device_register_simple("vms", -1, NULL, 0);
  if (IS_ERR(vms_dev)) {
    PTR_ERR(vms_dev);
    printk("vms_init: error\n");
  }

  /* Create a sysfs node to read simulated coordinates */
  sysfs_create_group(&amp;vms_dev-&gt;dev.kobj, &amp;vms_attr_group);

  /* Allocate an input device data structure */
  vms_input_dev = input_allocate_device();
  if (!vms_input_dev) {
    printk("Bad input_alloc_device()\n");
  }

  /* Announce that the virtual mouse will generate
     relative coordinates */
  set_bit(EV_REL, vms_input_dev-&gt;evbit);
  set_bit(REL_X, vms_input_dev-&gt;relbit);
  set_bit(REL_Y, vms_input_dev-&gt;relbit);

  /* Register with the input subsystem */
  input_register_device(vms_input_dev);

  printk("Virtual Mouse Driver Initialized.\n");
  return 0;
}

/* Driver Exit */
void
vms_cleanup(void)
{

  /* Unregister from the input subsystem */
  input_unregister_device(vms_input_dev);

  /* Cleanup sysfs node */
  sysfs_remove_group(&amp;vms_dev-&gt;dev.kobj, &amp;vms_attr_group);

  /* Unregister driver */
  platform_device_unregister(vms_dev);

  return;
}

module_init(vms_init);
module_exit(vms_cleanup);

					  </LINUX></LINUX></LINUX></ASM></LINUX></PRE><BR></TD></TR></TBODY></TABLE></P>
<P class=docText><A name=iddle2987></A><A name=iddle4596></A><A name=iddle4604></A><A name=iddle2368></A>Let's take a closer look at <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch07.html#ch07ex02">Listing 7.2</A><A name="device driver"></A>. During initialization, the vms driver registers itself as an input device driver. For this, it first allocates an <TT>input_dev</TT> structure using the core API, <TT>input_allocate_device()</TT>:</P>
<DIV class=docText><PRE>vms_input_dev = input_allocate_device();</PRE></DIV><BR>
<P class=docText><A name="mouse generates"></A>It then announces that the virtual mouse generates relative events:</P>
<DIV class=docText><PRE>set_bit(EV_REL, vms_input_dev-&gt;evbit);  /* Event Type is EV_REL */</PRE></DIV><BR>
<P class=docText><A name="mouse produces"></A>Next, it declares the event codes that the virtual mouse produces:</P>
<DIV class=docText><PRE>set_bit(REL_X, vms_input_dev-&gt;relbit); /* Relative 'X' movement */
set_bit(REL_Y, vms_input_dev-&gt;relbit); /* Relative 'Y' movement */</PRE></DIV><BR>
<P class=docText><A name=iddle2375></A><A name=iddle2383></A><A name=iddle4605></A><A name=iddle4659></A><A name="your virtual"></A>If your virtual mouse is also capable of generating button clicks, you need to add this to <TT>vms_init()</TT>:</P>
<DIV class=docText><PRE>set_bit(EV_KEY, vms_input_dev-&gt;evbit);  /* Event Type is EV_KEY */
set_bit(BTN_0,  vms_input_dev-&gt;keybit); /* Event Code is BTN_0 */</PRE></DIV><BR>
<P class=docText>Finally, the registration:</P>
<DIV class=docText><PRE>input_register_device(vms_input_dev);</PRE></DIV><BR>
<P class=docText><TT>write_vms()</TT> is the sysfs <TT>store()</TT> method that attaches to <SPAN class=docEmphasis>/sys/devices/platform/vms/coordinates.</SPAN> When <SPAN class=docEmphasis>coord.c</SPAN> writes an X/Y pair to this file, <TT>write_vms()</TT> does the following:</P>
<DIV class=docText><PRE>input_report_rel(vms_input_dev, REL_X, x);
input_report_rel(vms_input_dev, REL_Y, y);
input_sync(vms_input_dev);</PRE></DIV><BR>
<P class=docText>The first statement generates a <TT>REL_X</TT><A name="second produces"></A> event or a relative device movement in the X direction. The second produces a <TT>REL_Y</TT><A name="event or"></A> event or a relative movement in the Y direction. <TT>input_sync()</TT><A name="this event"></A> indicates that this event is complete, so the input subsystem collects these two events into a single evdev packet and sends it out of the door through <SPAN class=docEmphasis>/dev/input/eventX</SPAN>, where <SPAN class=docEmphasis>X</SPAN><A name="the interface"></A> is the interface number assigned to the vms driver. An application reading this file will receive event packets in the <TT>input_event</TT><A name="event interface"></A> format described earlier. To request gpm to attach to this event interface and accordingly chase the cursor around your screen, do this:</P>
<DIV class=docText><PRE><SPAN class=docEmphStrong>bash&gt; gpm -m /dev/input/eventX -t evdev</SPAN></PRE></DIV><BR>
<P class=docText><A name="the accelerometer"></A>The ADS7846 touch controller driver and the accelerometer driver, discussed respectively under the sections "<A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch07lev1sec2.html#ch07lev2sec5">Touch Controllers</A>" and "<A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch07lev1sec2.html#ch07lev2sec6">Accelerometers</A>" later, are also evdev users.