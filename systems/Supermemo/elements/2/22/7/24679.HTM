<FONT class=extract>let us introduce struct<BR>kobj_type: </FONT>
<P></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; struct kobj_type {<BR>&nbsp;&nbsp;&nbsp;&nbsp; void (*release)(struct kobject *kobj);<BR>&nbsp;&nbsp;&nbsp;&nbsp; const struct sysfs_ops *sysfs_ops;<BR>&nbsp;&nbsp;&nbsp;&nbsp; struct attribute **default_attrs;<BR>&nbsp;&nbsp;&nbsp;&nbsp; const struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *kobj);<BR>&nbsp;&nbsp;&nbsp;&nbsp; const void *(*namespace)(struct kobject *kobj);<BR>&nbsp;&nbsp;&nbsp; };</FONT></P>
<P><FONT class=extract>This structure is used to describe a particular type of kobject (or, more<BR>correctly, of containing object). Every kobject needs to have an associated<BR>kobj_type structure; a pointer to that structure must be specified when you<BR>call kobject_init() or kobject_init_and_add().</FONT></P>
<P>The release field in struct kobj_type is, of course, a pointer to the<BR>release() method for this type of kobject. The other two fields (sysfs_ops<BR>and default_attrs) control how objects of this type are represented in<BR>sysfs; they are beyond the scope of this document.</P>
<P>The default_attrs pointer is a list of default attributes that will be<BR>automatically created for any kobject that is registered with this ktype.