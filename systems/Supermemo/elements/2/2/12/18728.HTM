<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>12.1 Have You Found a Bug?</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-bug-criteria-3893></A>If you are not sure whether you have found a bug, here are some guidelines:<A name=index-fatal-signal-3894></A><A name=index-core-dump-3895></A></P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>If the compiler gets a fatal signal, for any input whatever, that is a compiler bug. Reliable compilers never crash.
<P><A name=index-invalid-assembly-code-3896></A><A name=index-assembly-code_002c-invalid-3897></A></P></LI>
<LI>If the compiler produces invalid assembly code, for any input whatever (except an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>statement), that is a compiler bug, unless the compiler reports errors (not just warnings) which would ordinarily prevent the assembler from being run.
<P><A name=index-undefined-behavior-3898></A><A name=index-undefined-function-value-3899></A><A name=index-increment-operators-3900></A></P></LI>
<LI>If the compiler produces valid assembly code that does not correctly execute the input source code, that is a compiler bug.
<P>However, you must double-check to make sure, because you may have a program whose behavior is undefined, which happened by chance to give the desired results with another C or C++ compiler.</P>
<P>For example, in many nonoptimizing compilers, you can write &#8216;<SAMP><SPAN class=samp>x;</SPAN></SAMP>&#8217; at the end of a function instead of &#8216;<SAMP><SPAN class=samp>return x;</SPAN></SAMP>&#8217;, with the same results. But the value of the function is undefined if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>return</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is omitted; it is not a bug when GCC produces different results.</P>
<P>Problems often result from expressions with two increment operators, as in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>f (*p++, *p++)</CODE>. Your previous compiler might have interpreted that expression the way you intended; GCC might interpret it another way. Neither compiler is wrong. The bug is in your code.</P>
<P>After you have localized the error to a single source line, it should be easy to check for these things. If your program is correct and well defined, you have found a compiler bug.</P></LI>
<LI>If the compiler produces an error message for valid input, that is a compiler bug.
<P><A name=index-invalid-input-3901></A></P></LI>
<LI>If the compiler does not produce an error message for invalid input, that is a compiler bug. However, you should note that your idea of &#8220;invalid input&#8221; might be someone else's idea of &#8220;an extension&#8221; or &#8220;support for traditional practice&#8221;.</LI>
<LI>If you are an experienced user of one of the languages GCC supports, your suggestions for improvement of GCC are welcome in any case.</LI></UL>