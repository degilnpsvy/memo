<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.59.8 Structure-Packing Pragmas</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For compatibility with Microsoft Windows compilers, GCC supports a set of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#pragma</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>directives that change the maximum alignment of members of structures (other than zero-width bit-fields), unions, and classes subsequently defined. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>value below always is required to be a small power of two and specifies the new alignment in bytes.</P>
<OL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" type=1>
<LI><CODE>#pragma pack(</CODE><VAR>n</VAR><CODE>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>simply sets the new alignment.</LI>
<LI><CODE>#pragma pack()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>sets the alignment to the one that was in effect when compilation started (see also command-line option<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fpack-struct[=</SPAN><VAR>n</VAR><SPAN class=option>]</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Code-Gen-Options.html#Code-Gen-Options">Code Gen Options</A>).</LI>
<LI><CODE>#pragma pack(push[,</CODE><VAR>n</VAR><CODE>])</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>pushes the current alignment setting on an internal stack and then optionally sets the new alignment.</LI>
<LI><CODE>#pragma pack(pop)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>restores the alignment setting to the one saved at the top of the internal stack (and removes that stack entry). Note that<CODE>#pragma pack([</CODE><VAR>n</VAR><CODE>])</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not influence this internal stack; thus it is possible to have<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#pragma pack(push)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>followed by multiple<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#pragma pack(</CODE><VAR>n</VAR><CODE>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instances and finalized by a single<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#pragma pack(pop)</CODE>.</LI></OL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Some targets, e.g. i386 and PowerPC, support the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ms_struct</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#pragma</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>which lays out a structure as the documented<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__attribute__ ((ms_struct))</CODE>.</P>
<OL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" type=1>
<LI><CODE>#pragma ms_struct on</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>turns on the layout for structures declared.</LI>
<LI><CODE>#pragma ms_struct off</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>turns off the layout for structures declared.</LI>
<LI><CODE>#pragma ms_struct reset</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>goes back to the default layout.</LI></OL>