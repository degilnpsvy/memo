<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.59.7 Symbol-Renaming Pragmas</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For compatibility with the Solaris system headers, GCC supports two<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#pragma</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>directives that change the name used in assembly for a given declaration. To get this effect on all platforms supported by GCC, use the asm labels extension (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Asm-Labels.html#Asm-Labels">Asm Labels</A>).</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>redefine_extname<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>oldname</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>newname</VAR></DT>
<DD><A name=index-pragma_002c-redefine_005fextname-3769></A>This pragma gives the C function<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>oldname</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>the assembly symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>newname</VAR>. The preprocessor macro<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__PRAGMA_REDEFINE_EXTNAME</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is defined if this pragma is available (currently on all platforms).</DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This pragma and the asm labels extension interact in a complicated manner. Here are some corner cases you may want to be aware of.</P>
<OL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" type=1>
<LI>Both pragmas silently apply only to declarations with external linkage. Asm labels do not have this restriction.</LI>
<LI>In C++, both pragmas silently apply only to declarations with &#8220;C&#8221; linkage. Again, asm labels do not have this restriction.</LI>
<LI>If any of the three ways of changing the assembly name of a declaration is applied to a declaration whose assembly name has already been determined (either by a previous use of one of these features, or because the compiler needed the assembly name in order to generate code), and the new name is different, a warning issues and the name does not change.</LI>
<LI>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>oldname</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>used by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#pragma redefine_extname</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is always the C-language name.</LI></OL>