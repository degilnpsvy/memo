<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.59.6 Solaris Pragmas</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The Solaris target supports<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#pragma redefine_extname</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Symbol-Renaming-Pragmas.html#Symbol-Renaming-Pragmas">Symbol-Renaming Pragmas</A>). It also supports additional<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#pragma</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>directives for compatibility with the system compiler.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>align<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>alignment</VAR><CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(</CODE><VAR>variable</VAR><CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>[,<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>variable</VAR><CODE>]...)</CODE></DT>
<DD><A name=index-pragma_002c-align-3766></A>Increase the minimum alignment of each<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>variable</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alignment</VAR>. This is the same as GCC's<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>aligned</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Variable-Attributes.html#Variable-Attributes">Variable Attributes</A>). Macro expansion occurs on the arguments to this pragma when compiling C and Objective-C. It does not currently occur when compiling C++, but this is a bug which may be fixed in a future release.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>fini (</CODE><VAR>function</VAR><CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>[,<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>function</VAR><CODE>]...)</CODE></DT>
<DD><A name=index-pragma_002c-fini-3767></A>This pragma causes each listed<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>function</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to be called after main, or during shared module unloading, by adding a call to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.fini</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>section.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>init (</CODE><VAR>function</VAR><CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>[,<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>function</VAR><CODE>]...)</CODE></DT>
<DD><A name=index-pragma_002c-init-3768></A>This pragma causes each listed<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>function</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to be called during initialization (before<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>main</CODE>) or during shared module loading, by adding a call to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.init</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>section.</DD></DL>