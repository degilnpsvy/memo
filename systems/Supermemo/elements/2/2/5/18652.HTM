<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.59.3 MeP Pragmas</H4>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>custom io_volatile (on|off)</CODE></DT>
<DD><A name=index-pragma_002c-custom-io_005fvolatile-3755></A>Overrides the command-line option<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-mio-volatile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for the current file. Note that for compatibility with future GCC releases, this option should only be used once before any<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>io</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>variables in each file.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>GCC coprocessor available<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>registers</VAR></DT>
<DD><A name=index-pragma_002c-coprocessor-available-3756></A>Specifies which coprocessor registers are available to the register allocator.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>registers</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be a single register, register range separated by ellipses, or comma-separated list of those. Example:<PRE style="FONT-SIZE: smaller" class=smallexample>          #pragma GCC coprocessor available $c0...$c10, $c28
</PRE><BR></DD>
<DT><CODE>GCC coprocessor call_saved<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>registers</VAR></DT>
<DD><A name=index-pragma_002c-coprocessor-call_005fsaved-3757></A>Specifies which coprocessor registers are to be saved and restored by any function using them.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>registers</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be a single register, register range separated by ellipses, or comma-separated list of those. Example:<PRE style="FONT-SIZE: smaller" class=smallexample>          #pragma GCC coprocessor call_saved $c4...$c6, $c31
</PRE><BR></DD>
<DT><CODE>GCC coprocessor subclass '(A|B|C|D)' =<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>registers</VAR></DT>
<DD><A name=index-pragma_002c-coprocessor-subclass-3758></A>Creates and defines a register class. These register classes can be used by inline<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>constructs.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>registers</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be a single register, register range separated by ellipses, or comma-separated list of those. Example:<PRE style="FONT-SIZE: smaller" class=smallexample>          #pragma GCC coprocessor subclass 'B' = $c2, $c4, $c6
          
          asm ("cpfoo %0" : "=B" (x));
</PRE><BR></DD>
<DT><CODE>GCC disinterrupt<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>name</VAR><CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>,<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>name</VAR><CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>...</CODE></DT>
<DD><A name=index-pragma_002c-disinterrupt-3759></A>For the named functions, the compiler adds code to disable interrupts for the duration of those functions. If any functions so named are not encountered in the source, a warning is emitted that the pragma is not used. Examples:<PRE style="FONT-SIZE: smaller" class=smallexample>          #pragma disinterrupt foo
          #pragma disinterrupt bar, grill
          int foo () { ... }
</PRE><BR></DD>
<DT><CODE>GCC call<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>name</VAR><CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>,<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>name</VAR><CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>...</CODE></DT>
<DD><A name=index-pragma_002c-call-3760></A>For the named functions, the compiler always uses a register-indirect call model when calling the named functions. Examples:<PRE style="FONT-SIZE: smaller" class=smallexample>          extern int foo ();
          #pragma call foo</PRE></DD></DL>