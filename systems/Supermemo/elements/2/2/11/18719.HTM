<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>11.6 Disappointments and Misunderstandings</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">These problems are perhaps regrettable, but we don't know any practical way around them.</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>Certain local variables aren't recognized by debuggers when you compile with optimization.
<P>This occurs because sometimes GCC optimizes the variable out of existence. There is no way to tell the debugger how to compute the value such a variable &#8220;would have had&#8221;, and it is not clear that would be desirable anyway. So GCC simply does not mention the eliminated variable when it writes debugging information.</P>
<P>You have to expect a certain amount of disagreement between the executable and your source code, when you use optimization.</P>
<P><A name=index-conflicting-types-3862></A><A name=index-scope-of-declaration-3863></A></P></LI>
<LI>Users often think it is a bug when GCC reports an error for code like this:<PRE style="FONT-SIZE: smaller" class=smallexample>          int foo (struct mumble *);
          
          struct mumble { ... };
          
          int foo (struct mumble *x)
          { ... }
</PRE>
<P>This code really is erroneous, because the scope of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct mumble</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the prototype is limited to the argument list containing it. It does not refer to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct mumble</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>defined with file scope immediately below&#8212;they are two unrelated types with similar names in different scopes.</P>
<P>But in the definition of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>foo</CODE>, the file-scope type is used because that is available to be inherited. Thus, the definition and the prototype do not match, and you get an error.</P>
<P>This behavior may seem silly, but it's what the ISO standard specifies. It is easy enough for you to make your code work by moving the definition of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct mumble</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>above the prototype. It's not worth being incompatible with ISO C just to avoid an error for the example shown above.</P></LI>
<LI>Accesses to bit-fields even in volatile objects works by accessing larger objects, such as a byte or a word. You cannot rely on what size of object is accessed in order to read or write the bit-field; it may even vary for a given bit-field according to the precise usage.
<P>If you care about controlling the amount of memory that is accessed, use volatile but do not use bit-fields.</P></LI>
<LI>GCC comes with shell scripts to fix certain known problems in system header files. They install corrected copies of various header files in a special directory where only GCC will normally look for them. The scripts adapt to various systems by searching all the system header files for the problem cases that we know about.
<P>If new system header files are installed, nothing automatically arranges to update the corrected header files. They can be updated using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>mkheaders</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>script installed in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><VAR>libexecdir</VAR><SPAN class=file>/gcc/</SPAN><VAR>target</VAR><SPAN class=file>/</SPAN><VAR>version</VAR><SPAN class=file>/install-tools/</SPAN></SAMP>.</P></LI>
<LI><A name=index-floating-point-precision-3864></A>On 68000 and x86 systems, for instance, you can get paradoxical results if you test the precise values of floating point numbers. For example, you can find that a floating point value which is not a NaN is not equal to itself. This results from the fact that the floating point registers hold a few more bits of precision than fit in a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>double</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in memory. Compiled code moves values between memory and floating point registers at its convenience, and moving them into memory truncates them.
<P><A name=index-ffloat-store-3865></A>You can partially avoid this problem by using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ffloat-store</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Optimize-Options.html#Optimize-Options">Optimize Options</A>).</P></LI>
<LI>On AIX and other platforms without weak symbol support, templates need to be instantiated explicitly and symbols for static members of templates will not be generated.</LI>
<LI>On AIX, GCC scans object files and library archives for static constructors and destructors when linking an application before the linker prunes unreferenced symbols. This is necessary to prevent the AIX linker from mistakenly assuming that static constructor or destructor are unused and removing them before the scanning can occur. All static constructors and destructors found will be referenced even though the modules in which they occur may not be used by the program. This may lead to both increased executable size and unexpected symbol references.</LI></UL>