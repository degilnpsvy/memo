<H5 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.57.15.2 Paired-Single Built-in Functions</H5>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following paired-single functions map directly to a particular MIPS instruction. Please refer to the architecture specification for details on what each instruction does.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>v2sf __builtin_mips_pll_ps (v2sf, v2sf)</CODE></DT>
<DD>Pair lower lower (<CODE>pll.ps</CODE>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>v2sf __builtin_mips_pul_ps (v2sf, v2sf)</CODE></DT>
<DD>Pair upper lower (<CODE>pul.ps</CODE>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>v2sf __builtin_mips_plu_ps (v2sf, v2sf)</CODE></DT>
<DD>Pair lower upper (<CODE>plu.ps</CODE>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>v2sf __builtin_mips_puu_ps (v2sf, v2sf)</CODE></DT>
<DD>Pair upper upper (<CODE>puu.ps</CODE>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>v2sf __builtin_mips_cvt_ps_s (float, float)</CODE></DT>
<DD>Convert pair to paired single (<CODE>cvt.ps.s</CODE>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>float __builtin_mips_cvt_s_pl (v2sf)</CODE></DT>
<DD>Convert pair lower to single (<CODE>cvt.s.pl</CODE>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>float __builtin_mips_cvt_s_pu (v2sf)</CODE></DT>
<DD>Convert pair upper to single (<CODE>cvt.s.pu</CODE>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>v2sf __builtin_mips_abs_ps (v2sf)</CODE></DT>
<DD>Absolute value (<CODE>abs.ps</CODE>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>v2sf __builtin_mips_alnv_ps (v2sf, v2sf, int)</CODE></DT>
<DD>Align variable (<CODE>alnv.ps</CODE>).
<P><EM>Note:</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>The value of the third parameter must be 0 or 4 modulo 8, otherwise the result is unpredictable. Please read the instruction description for details.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following multi-instruction functions are also available. In each case,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cond</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be any of the 16 floating-point conditions:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>f</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>un</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ueq</CODE>,<CODE>olt</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ult</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ole</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ule</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ngle</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>seq</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ngl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lt</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nge</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>le</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ngt</CODE>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>v2sf __builtin_mips_movt_c_</CODE><VAR>cond</VAR><CODE>_ps (v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>a</VAR><CODE>, v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>b</VAR><CODE>, v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>c</VAR><CODE>, v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>d</VAR><CODE>)</CODE></DT>
<DT><CODE>v2sf __builtin_mips_movf_c_</CODE><VAR>cond</VAR><CODE>_ps (v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>a</VAR><CODE>, v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>b</VAR><CODE>, v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>c</VAR><CODE>, v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>d</VAR><CODE>)</CODE></DT>
<DD>Conditional move based on floating-point comparison (<CODE>c.</CODE><VAR>cond</VAR><CODE>.ps</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>movt.ps</CODE>/<CODE>movf.ps</CODE>).
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>movt</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>functions return the value<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>computed by:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          c.<VAR>cond</VAR>.ps <VAR>cc</VAR>,<VAR>a</VAR>,<VAR>b</VAR>
          mov.ps <VAR>x</VAR>,<VAR>c</VAR>
          movt.ps <VAR>x</VAR>,<VAR>d</VAR>,<VAR>cc</VAR>
</PRE>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>movf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>functions are similar but use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>movf.ps</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>movt.ps</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>int __builtin_mips_upper_c_</CODE><VAR>cond</VAR><CODE>_ps (v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>a</VAR><CODE>, v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>b</VAR><CODE>)</CODE></DT>
<DT><CODE>int __builtin_mips_lower_c_</CODE><VAR>cond</VAR><CODE>_ps (v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>a</VAR><CODE>, v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>b</VAR><CODE>)</CODE></DT>
<DD>Comparison of two paired-single values (<CODE>c.</CODE><VAR>cond</VAR><CODE>.ps</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bc1t</CODE>/<CODE>bc1f</CODE>).
<P>These functions compare<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>a</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>b</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>c.</CODE><VAR>cond</VAR><CODE>.ps</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and return either the upper or lower half of the result. For example:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          v2sf a, b;
          if (__builtin_mips_upper_c_eq_ps (a, b))
            upper_halves_are_equal ();
          else
            upper_halves_are_unequal ();
          
          if (__builtin_mips_lower_c_eq_ps (a, b))
            lower_halves_are_equal ();
          else
            lower_halves_are_unequal ();</PRE></DD></DL>