<H5 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.57.15.3 MIPS-3D Built-in Functions</H5>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The MIPS-3D Application-Specific Extension (ASE) includes additional paired-single instructions that are designed to improve the performance of 3D graphics operations. Support for these instructions is controlled by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mips3d</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>command-line option.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The functions listed below map directly to a particular MIPS-3D instruction. Please refer to the architecture specification for more details on what each instruction does.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>v2sf __builtin_mips_addr_ps (v2sf, v2sf)</CODE></DT>
<DD>Reduction add (<CODE>addr.ps</CODE>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>v2sf __builtin_mips_mulr_ps (v2sf, v2sf)</CODE></DT>
<DD>Reduction multiply (<CODE>mulr.ps</CODE>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>v2sf __builtin_mips_cvt_pw_ps (v2sf)</CODE></DT>
<DD>Convert paired single to paired word (<CODE>cvt.pw.ps</CODE>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>v2sf __builtin_mips_cvt_ps_pw (v2sf)</CODE></DT>
<DD>Convert paired word to paired single (<CODE>cvt.ps.pw</CODE>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>float __builtin_mips_recip1_s (float)</CODE></DT>
<DT><CODE>double __builtin_mips_recip1_d (double)</CODE></DT>
<DT><CODE>v2sf __builtin_mips_recip1_ps (v2sf)</CODE></DT>
<DD>Reduced-precision reciprocal (sequence step 1) (<CODE>recip1.</CODE><VAR>fmt</VAR>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>float __builtin_mips_recip2_s (float, float)</CODE></DT>
<DT><CODE>double __builtin_mips_recip2_d (double, double)</CODE></DT>
<DT><CODE>v2sf __builtin_mips_recip2_ps (v2sf, v2sf)</CODE></DT>
<DD>Reduced-precision reciprocal (sequence step 2) (<CODE>recip2.</CODE><VAR>fmt</VAR>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>float __builtin_mips_rsqrt1_s (float)</CODE></DT>
<DT><CODE>double __builtin_mips_rsqrt1_d (double)</CODE></DT>
<DT><CODE>v2sf __builtin_mips_rsqrt1_ps (v2sf)</CODE></DT>
<DD>Reduced-precision reciprocal square root (sequence step 1) (<CODE>rsqrt1.</CODE><VAR>fmt</VAR>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>float __builtin_mips_rsqrt2_s (float, float)</CODE></DT>
<DT><CODE>double __builtin_mips_rsqrt2_d (double, double)</CODE></DT>
<DT><CODE>v2sf __builtin_mips_rsqrt2_ps (v2sf, v2sf)</CODE></DT>
<DD>Reduced-precision reciprocal square root (sequence step 2) (<CODE>rsqrt2.</CODE><VAR>fmt</VAR>).</DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following multi-instruction functions are also available. In each case,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cond</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be any of the 16 floating-point conditions:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>f</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>un</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eq</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ueq</CODE>,<CODE>olt</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ult</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ole</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ule</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ngle</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>seq</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ngl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lt</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nge</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>le</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ngt</CODE>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>int __builtin_mips_cabs_</CODE><VAR>cond</VAR><CODE>_s (float<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>a</VAR><CODE>, float<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>b</VAR><CODE>)</CODE></DT>
<DT><CODE>int __builtin_mips_cabs_</CODE><VAR>cond</VAR><CODE>_d (double<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>a</VAR><CODE>, double<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>b</VAR><CODE>)</CODE></DT>
<DD>Absolute comparison of two scalar values (<CODE>cabs.</CODE><VAR>cond</VAR><CODE>.</CODE><VAR>fmt</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bc1t</CODE>/<CODE>bc1f</CODE>).
<P>These functions compare<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>a</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>b</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cabs.</CODE><VAR>cond</VAR><CODE>.s</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cabs.</CODE><VAR>cond</VAR><CODE>.d</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and return the result as a boolean value. For example:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          float a, b;
          if (__builtin_mips_cabs_eq_s (a, b))
            true ();
          else
            false ();
</PRE><BR></DD>
<DT><CODE>int __builtin_mips_upper_cabs_</CODE><VAR>cond</VAR><CODE>_ps (v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>a</VAR><CODE>, v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>b</VAR><CODE>)</CODE></DT>
<DT><CODE>int __builtin_mips_lower_cabs_</CODE><VAR>cond</VAR><CODE>_ps (v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>a</VAR><CODE>, v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>b</VAR><CODE>)</CODE></DT>
<DD>Absolute comparison of two paired-single values (<CODE>cabs.</CODE><VAR>cond</VAR><CODE>.ps</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bc1t</CODE>/<CODE>bc1f</CODE>).
<P>These functions compare<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>a</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>b</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cabs.</CODE><VAR>cond</VAR><CODE>.ps</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and return either the upper or lower half of the result. For example:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          v2sf a, b;
          if (__builtin_mips_upper_cabs_eq_ps (a, b))
            upper_halves_are_equal ();
          else
            upper_halves_are_unequal ();
          
          if (__builtin_mips_lower_cabs_eq_ps (a, b))
            lower_halves_are_equal ();
          else
            lower_halves_are_unequal ();
</PRE><BR></DD>
<DT><CODE>v2sf __builtin_mips_movt_cabs_</CODE><VAR>cond</VAR><CODE>_ps (v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>a</VAR><CODE>, v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>b</VAR><CODE>, v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>c</VAR><CODE>, v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>d</VAR><CODE>)</CODE></DT>
<DT><CODE>v2sf __builtin_mips_movf_cabs_</CODE><VAR>cond</VAR><CODE>_ps (v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>a</VAR><CODE>, v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>b</VAR><CODE>, v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>c</VAR><CODE>, v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>d</VAR><CODE>)</CODE></DT>
<DD>Conditional move based on absolute comparison (<CODE>cabs.</CODE><VAR>cond</VAR><CODE>.ps</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>movt.ps</CODE>/<CODE>movf.ps</CODE>).
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>movt</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>functions return the value<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>computed by:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          cabs.<VAR>cond</VAR>.ps <VAR>cc</VAR>,<VAR>a</VAR>,<VAR>b</VAR>
          mov.ps <VAR>x</VAR>,<VAR>c</VAR>
          movt.ps <VAR>x</VAR>,<VAR>d</VAR>,<VAR>cc</VAR>
</PRE>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>movf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>functions are similar but use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>movf.ps</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>movt.ps</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>int __builtin_mips_any_c_</CODE><VAR>cond</VAR><CODE>_ps (v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>a</VAR><CODE>, v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>b</VAR><CODE>)</CODE></DT>
<DT><CODE>int __builtin_mips_all_c_</CODE><VAR>cond</VAR><CODE>_ps (v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>a</VAR><CODE>, v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>b</VAR><CODE>)</CODE></DT>
<DT><CODE>int __builtin_mips_any_cabs_</CODE><VAR>cond</VAR><CODE>_ps (v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>a</VAR><CODE>, v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>b</VAR><CODE>)</CODE></DT>
<DT><CODE>int __builtin_mips_all_cabs_</CODE><VAR>cond</VAR><CODE>_ps (v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>a</VAR><CODE>, v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>b</VAR><CODE>)</CODE></DT>
<DD>Comparison of two paired-single values (<CODE>c.</CODE><VAR>cond</VAR><CODE>.ps</CODE>/<CODE>cabs.</CODE><VAR>cond</VAR><CODE>.ps</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bc1any2t</CODE>/<CODE>bc1any2f</CODE>).
<P>These functions compare<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>a</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>b</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>c.</CODE><VAR>cond</VAR><CODE>.ps</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cabs.</CODE><VAR>cond</VAR><CODE>.ps</CODE>. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>any</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>forms return true if either result is true and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>all</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>forms return true if both results are true. For example:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          v2sf a, b;
          if (__builtin_mips_any_c_eq_ps (a, b))
            one_is_true ();
          else
            both_are_false ();
          
          if (__builtin_mips_all_c_eq_ps (a, b))
            both_are_true ();
          else
            one_is_false ();
</PRE><BR></DD>
<DT><CODE>int __builtin_mips_any_c_</CODE><VAR>cond</VAR><CODE>_4s (v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>a</VAR><CODE>, v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>b</VAR><CODE>, v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>c</VAR><CODE>, v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>d</VAR><CODE>)</CODE></DT>
<DT><CODE>int __builtin_mips_all_c_</CODE><VAR>cond</VAR><CODE>_4s (v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>a</VAR><CODE>, v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>b</VAR><CODE>, v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>c</VAR><CODE>, v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>d</VAR><CODE>)</CODE></DT>
<DT><CODE>int __builtin_mips_any_cabs_</CODE><VAR>cond</VAR><CODE>_4s (v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>a</VAR><CODE>, v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>b</VAR><CODE>, v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>c</VAR><CODE>, v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>d</VAR><CODE>)</CODE></DT>
<DT><CODE>int __builtin_mips_all_cabs_</CODE><VAR>cond</VAR><CODE>_4s (v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>a</VAR><CODE>, v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>b</VAR><CODE>, v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>c</VAR><CODE>, v2sf<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>d</VAR><CODE>)</CODE></DT>
<DD>Comparison of four paired-single values (<CODE>c.</CODE><VAR>cond</VAR><CODE>.ps</CODE>/<CODE>cabs.</CODE><VAR>cond</VAR><CODE>.ps</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bc1any4t</CODE>/<CODE>bc1any4f</CODE>).
<P>These functions use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>c.</CODE><VAR>cond</VAR><CODE>.ps</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cabs.</CODE><VAR>cond</VAR><CODE>.ps</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to compare<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>a</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>b</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and to compare<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>c</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>d</VAR>. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>any</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>forms return true if any of the four results are true and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>all</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>forms return true if all four results are true. For example:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          v2sf a, b, c, d;
          if (__builtin_mips_any_c_eq_4s (a, b, c, d))
            some_are_true ();
          else
            all_are_false ();
          
          if (__builtin_mips_all_c_eq_4s (a, b, c, d))
            all_are_true ();
          else
            some_are_false ();</PRE></DD></DL>