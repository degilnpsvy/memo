<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>8.7 Exceptions</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">GNU Objective-C provides exception support built into the language, as in the following example:</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>       @try {
         ...
            @throw expr;
         ...
       }
       @catch (AnObjCClass *exc) {
         ...
           @throw expr;
         ...
           @throw;
         ...
       }
       @catch (AnotherClass *exc) {
         ...
       }
       @catch (id allOthers) {
         ...
       }
       @finally {
         ...
           @throw expr;
         ...
       }
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>@throw</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>statement may appear anywhere in an Objective-C or Objective-C++ program; when used inside of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>@catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>block, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>@throw</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may appear without an argument (as shown above), in which case the object caught by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>@catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be rethrown.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that only (pointers to) Objective-C objects may be thrown and caught using this scheme. When an object is thrown, it will be caught by the nearest<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>@catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>clause capable of handling objects of that type, analogously to how<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>blocks work in C++ and Java. A<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>@catch(id ...)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>clause (as shown above) may also be provided to catch any and all Objective-C exceptions not caught by previous<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>@catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>clauses (if any).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>@finally</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>clause, if present, will be executed upon exit from the immediately preceding<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>@try ... @catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>section. This will happen regardless of whether any exceptions are thrown, caught or rethrown inside the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>@try ... @catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>section, analogously to the behavior of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>finally</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>clause in Java.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">There are several caveats to using the new exception mechanism:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fobjc-exceptions</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>command line option must be used when compiling Objective-C files that use exceptions.</LI>
<LI>With the GNU runtime, exceptions are always implemented as &#8220;native&#8221; exceptions and it is recommended that the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fexceptions</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-shared-libgcc</SPAN></SAMP>options are used when linking.</LI>
<LI>With the NeXT runtime, although currently designed to be binary compatible with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NS_HANDLER</CODE>-style idioms provided by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NSException</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>class, the new exceptions can only be used on Mac OS X 10.3 (Panther) and later systems, due to additional functionality needed in the NeXT Objective-C runtime.</LI>
<LI>As mentioned above, the new exceptions do not support handling types other than Objective-C objects. Furthermore, when used from Objective-C++, the Objective-C exception model does not interoperate with C++ exceptions at this time. This means you cannot<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>@throw</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>an exception from Objective-C and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>it in C++, or vice versa (i.e.,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>throw ... @catch</CODE>).</LI></UL>