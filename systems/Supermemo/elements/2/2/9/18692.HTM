<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>8.3.3 Method signatures</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This section documents the encoding of method types, which is rarely needed to use Objective-C. You should skip it at a first reading; the runtime provides functions that will work on methods and can walk through the list of parameters and interpret them for you. These functions are part of the public &#8220;API&#8221; and are the preferred way to interact with method signatures from user code.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">But if you need to debug a problem with method signatures and need to know how they are implemented (i.e., the &#8220;ABI&#8221;), read on.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Methods have their &#8220;signature&#8221; encoded and made available to the runtime. The &#8220;signature&#8221; encodes all the information required to dynamically build invocations of the method at runtime: return type and arguments.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The &#8220;signature&#8221; is a null-terminated string, composed of the following:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>The return type, including type qualifiers. For example, a method returning<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>would have<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>i</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>here.</LI>
<LI>The total size (in bytes) required to pass all the parameters. This includes the two hidden parameters (the object<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>self</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the method selector<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_cmd</CODE>).</LI>
<LI>Each argument, with the type encoding, followed by the offset (in bytes) of the argument in the list of parameters.</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For example, a method with no arguments and returning<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>would have the signature<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>i8@0:4</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the size of a pointer is 4. The signature is interpreted as follows: the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>i</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the return type (an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int</CODE>), the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>8</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the total size of the parameters in bytes (two pointers each of size 4), the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>@0</CODE>is the first parameter (an object at byte offset<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0</CODE>) and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>:4</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the second parameter (a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SEL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>at byte offset<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>4</CODE>).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">You can easily find more examples by running the &#8220;strings&#8221; program on an Objective-C object file compiled by GCC. You'll see a lot of strings that look very much like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>i8@0:4</CODE>. They are signatures of Objective-C methods.