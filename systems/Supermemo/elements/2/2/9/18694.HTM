<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>8.5 Constant string objects</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">GNU Objective-C provides constant string objects that are generated directly by the compiler. You declare a constant string object by prefixing a C constant string with the character &#8216;<SAMP><SPAN class=samp>@</SPAN></SAMP>&#8217;:</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>       id myString = @"this is a constant string object";
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The constant string objects are by default instances of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NXConstantString</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>class which is provided by the GNU Objective-C runtime. To get the definition of this class you must include the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>objc/NXConstStr.h</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>header file.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">User defined libraries may want to implement their own constant string class. To be able to support them, the GNU Objective-C compiler provides a new command line options<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fconstant-string-class=</SPAN><VAR>class-name</VAR></SAMP>. The provided class should adhere to a strict structure, the same as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NXConstantString</CODE>'s structure:</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     
     @interface MyConstantStringClass
     {
       Class isa;
       char *c_string;
       unsigned int len;
     }
     @end
     
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>NXConstantString</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>inherits from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>Object</CODE>; user class libraries may choose to inherit the customized constant string class from a different class than<CODE>Object</CODE>. There is no requirement in the methods the constant string class has to implement, but the final ivar layout of the class must be the compatible with the given structure.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When the compiler creates the statically allocated constant string object, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>c_string</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>field will be filled by the compiler with the string; the<CODE>length</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>field will be filled by the compiler with the string length; the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>isa</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>pointer will be filled with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>by the compiler, and it will later be fixed up automatically at runtime by the GNU Objective-C runtime library to point to the class which was set by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fconstant-string-class</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option when the object file is loaded (if you wonder how it works behind the scenes, the name of the class to use, and the list of static objects to fixup, are stored by the compiler in the object file in a place where the GNU runtime library will find them at runtime).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">As a result, when a file is compiled with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fconstant-string-class</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option, all the constant string objects will be instances of the class specified as argument to this option. It is possible to have multiple compilation units referring to different constant string classes, neither the compiler nor the linker impose any restrictions in doing this.