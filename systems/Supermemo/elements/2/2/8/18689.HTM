<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>8.3 Type encoding</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This is an advanced section. Type encodings are used extensively by the compiler and by the runtime, but you generally do not need to know about them to use Objective-C.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The Objective-C compiler generates type encodings for all the types. These type encodings are used at runtime to find out information about selectors and methods and about objects and classes.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The types are encoded in the following way:</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<TABLE summary="">
<TBODY>
<TR align=left>
<TD vAlign=top width="25%"><CODE>_Bool</CODE></TD>
<TD vAlign=top width="75%"><CODE>B</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="25%"><CODE>char</CODE></TD>
<TD vAlign=top width="75%"><CODE>c</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="25%"><CODE>unsigned char</CODE></TD>
<TD vAlign=top width="75%"><CODE>C</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="25%"><CODE>short</CODE></TD>
<TD vAlign=top width="75%"><CODE>s</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="25%"><CODE>unsigned short</CODE></TD>
<TD vAlign=top width="75%"><CODE>S</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="25%"><CODE>int</CODE></TD>
<TD vAlign=top width="75%"><CODE>i</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="25%"><CODE>unsigned int</CODE></TD>
<TD vAlign=top width="75%"><CODE>I</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="25%"><CODE>long</CODE></TD>
<TD vAlign=top width="75%"><CODE>l</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="25%"><CODE>unsigned long</CODE></TD>
<TD vAlign=top width="75%"><CODE>L</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="25%"><CODE>long long</CODE></TD>
<TD vAlign=top width="75%"><CODE>q</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="25%"><CODE>unsigned long long</CODE></TD>
<TD vAlign=top width="75%"><CODE>Q</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="25%"><CODE>float</CODE></TD>
<TD vAlign=top width="75%"><CODE>f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="25%"><CODE>double</CODE></TD>
<TD vAlign=top width="75%"><CODE>d</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="25%"><CODE>long double</CODE></TD>
<TD vAlign=top width="75%"><CODE>D</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="25%"><CODE>void</CODE></TD>
<TD vAlign=top width="75%"><CODE>v</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="25%"><CODE>id</CODE></TD>
<TD vAlign=top width="75%"><CODE>@</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="25%"><CODE>Class</CODE></TD>
<TD vAlign=top width="75%"><CODE>#</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="25%"><CODE>SEL</CODE></TD>
<TD vAlign=top width="75%"><CODE>:</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="25%"><CODE>char*</CODE></TD>
<TD vAlign=top width="75%"><CODE>*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="25%"><CODE>enum</CODE></TD>
<TD vAlign=top width="75%">an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>enum</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is encoded exactly as the integer type that the compiler uses for it, which depends on the enumeration values. Often the compiler users<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unsigned int</CODE>, which is then encoded as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>I</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="25%">unknown type</TD>
<TD vAlign=top width="75%"><CODE>?</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="25%">Complex types</TD>
<TD vAlign=top width="75%"><CODE>j</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>followed by the inner type. For example<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_Complex double</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is encoded as "jd".<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="25%">bit-fields</TD>
<TD vAlign=top width="75%"><CODE>b</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>followed by the starting position of the bit-field, the type of the bit-field and the size of the bit-field (the bit-fields encoding was changed from the NeXT's compiler encoding, see below)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR></TBODY></TABLE></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The encoding of bit-fields has changed to allow bit-fields to be properly handled by the runtime functions that compute sizes and alignments of types that contain bit-fields. The previous encoding contained only the size of the bit-field. Using only this information it is not possible to reliably compute the size occupied by the bit-field. This is very important in the presence of the Boehm's garbage collector because the objects are allocated using the typed memory facility available in this collector. The typed memory allocation requires information about where the pointers are located inside the object.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The position in the bit-field is the position, counting in bits, of the bit closest to the beginning of the structure.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The non-atomic types are encoded as follows:</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<TABLE summary="">
<TBODY>
<TR align=left>
<TD vAlign=top width="20%">pointers</TD>
<TD vAlign=top width="80%">&#8216;<SAMP><SPAN class=samp>^</SPAN></SAMP>&#8217; followed by the pointed type.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="20%">arrays</TD>
<TD vAlign=top width="80%">&#8216;<SAMP><SPAN class=samp>[</SPAN></SAMP>&#8217; followed by the number of elements in the array followed by the type of the elements followed by &#8216;<SAMP><SPAN class=samp>]</SPAN></SAMP>&#8217;<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="20%">structures</TD>
<TD vAlign=top width="80%">&#8216;<SAMP><SPAN class=samp>{</SPAN></SAMP>&#8217; followed by the name of the structure (or &#8216;<SAMP><SPAN class=samp>?</SPAN></SAMP>&#8217; if the structure is unnamed), the &#8216;<SAMP><SPAN class=samp>=</SPAN></SAMP>&#8217; sign, the type of the members and by &#8216;<SAMP><SPAN class=samp>}</SPAN></SAMP>&#8217;<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="20%">unions</TD>
<TD vAlign=top width="80%">&#8216;<SAMP><SPAN class=samp>(</SPAN></SAMP>&#8217; followed by the name of the structure (or &#8216;<SAMP><SPAN class=samp>?</SPAN></SAMP>&#8217; if the union is unnamed), the &#8216;<SAMP><SPAN class=samp>=</SPAN></SAMP>&#8217; sign, the type of the members followed by &#8216;<SAMP><SPAN class=samp>)</SPAN></SAMP>&#8217;<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="20%">vectors</TD>
<TD vAlign=top width="80%">&#8216;<SAMP><SPAN class=samp>![</SPAN></SAMP>&#8217; followed by the vector_size (the number of bytes composing the vector) followed by a comma, followed by the alignment (in bytes) of the vector, followed by the type of the elements followed by &#8216;<SAMP><SPAN class=samp>]</SPAN></SAMP>&#8217;<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR></TBODY></TABLE></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here are some types and their encodings, as they are generated by the compiler on an i386 machine:</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=sp></PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<TABLE summary="">
<TBODY>
<TR align=left>
<TD vAlign=top width="25%">Objective-C type</TD>
<TD vAlign=top width="75%">Compiler encoding<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="25%"><PRE style="FONT-SIZE: smaller" class=smallexample>     int a[10];
</PRE>
<P></P></TD>
<TD vAlign=top width="75%"><CODE>[10i]</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="25%"><PRE style="FONT-SIZE: smaller" class=smallexample>     struct {
       int i;
       float f[3];
       int a:3;
       int b:2;
       char c;
     }
</PRE>
<P></P></TD>
<TD vAlign=top width="75%"><CODE>{?=i[3f]b128i3b131i2c}</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="25%"><PRE style="FONT-SIZE: smaller" class=smallexample>     int a __attribute__ ((vector_size (16)));
</PRE>
<P></P></TD>
<TD vAlign=top width="75%"><CODE>![16,16i]</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(alignment would depend on the machine)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR></TBODY></TABLE></P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=sp></PRE><SPAN style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In addition to the types the compiler also encodes the type specifiers. The table below describes the encoding of the current Objective-C type specifiers:</SPAN><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=sp></PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<TABLE summary="">
<TBODY>
<TR align=left>
<TD vAlign=top width="25%">Specifier</TD>
<TD vAlign=top width="75%">Encoding<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="25%"><CODE>const</CODE></TD>
<TD vAlign=top width="75%"><CODE>r</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="25%"><CODE>in</CODE></TD>
<TD vAlign=top width="75%"><CODE>n</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="25%"><CODE>inout</CODE></TD>
<TD vAlign=top width="75%"><CODE>N</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="25%"><CODE>out</CODE></TD>
<TD vAlign=top width="75%"><CODE>o</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="25%"><CODE>bycopy</CODE></TD>
<TD vAlign=top width="75%"><CODE>O</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="25%"><CODE>byref</CODE></TD>
<TD vAlign=top width="75%"><CODE>R</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="25%"><CODE>oneway</CODE></TD>
<TD vAlign=top width="75%"><CODE>V</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR></TBODY></TABLE></P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=sp></PRE><SPAN style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The type specifiers are encoded just before the type. Unlike types however, the type specifiers are only encoded when they appear in method argument types.</SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note how<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>const</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>interacts with pointers:</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=sp></PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<TABLE summary="">
<TBODY>
<TR align=left>
<TD vAlign=top width="25%">Objective-C type</TD>
<TD vAlign=top width="75%">Compiler encoding<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="25%"><PRE style="FONT-SIZE: smaller" class=smallexample>     const int
</PRE>
<P></P></TD>
<TD vAlign=top width="75%"><CODE>ri</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="25%"><PRE style="FONT-SIZE: smaller" class=smallexample>     const int*
</PRE>
<P></P></TD>
<TD vAlign=top width="75%"><CODE>^ri</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR>
<TR align=left>
<TD vAlign=top width="25%"><PRE style="FONT-SIZE: smaller" class=smallexample>     int *const
</PRE>
<P></P></TD>
<TD vAlign=top width="75%"><CODE>r^i</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></TD></TR></TBODY></TABLE></P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=sp></PRE><CODE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">const int*</CODE><SPAN style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a pointer to a<SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN><CODE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">const int</CODE><SPAN style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">, and so is encoded as<SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN><CODE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">^ri</CODE><SPAN style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">.<SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN><CODE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">int* const</CODE><SPAN style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">, instead, is a<SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN><CODE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">const</CODE><SPAN style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><SPAN class=Apple-converted-space>&nbsp;</SPAN>pointer to an<SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN><CODE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">int</CODE><SPAN style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">, and so is encoded as<SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN><CODE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">r^i</CODE><SPAN style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: medium Simsun; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">.</SPAN>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Finally, there is a complication when encoding<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>const char *</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>versus<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char * const</CODE>. Because<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char *</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is encoded as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and not as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>^c</CODE>, there is no way to express the fact that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>r</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>applies to the pointer or to the pointee.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Hence, it is assumed as a convention that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>r*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>means<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>const char *</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(since it is what is most often meant), and there is no way to encode<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char *const</CODE>.<CODE>char *const</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>would simply be encoded as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*</CODE>, and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>const</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is lost.</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu>
<LI><A accessKey=1 href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Legacy-type-encoding.html#Legacy-type-encoding">Legacy type encoding</A></LI>
<LI><A accessKey=2 href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/_0040encode.html#g_t_0040encode">@encode</A></LI>
<LI><A accessKey=3 href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Method-signatures.html#Method-signatures">Method signatures</A></LI></UL>