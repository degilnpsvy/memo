<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>7.13 Backwards Compatibility</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-Backwards-Compatibility-3827></A><A name=index-ARM-_005bAnnotated-C_002b_002b-Reference-Manual_005d-3828></A>Now that there is a definitive ISO standard C++, G++ has a specification to adhere to. The C++ language evolved over time, and features that used to be acceptable in previous drafts of the standard, such as the ARM [Annotated C++ Reference Manual], are no longer accepted. In order to allow compilation of C++ written to such drafts, G++ contains some backwards compatibilities.<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>All such backwards compatibility features are liable to disappear in future versions of G++.</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>They should be considered deprecated. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Deprecated-Features.html#Deprecated-Features">Deprecated Features</A>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>For scope</CODE></DT>
<DD>If a variable is declared at for scope, it used to remain in scope until the end of the scope that contained the for statement (rather than just within the for scope). G++ retains this, but issues a warning, if such a variable is accessed outside the for scope.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Implicit C language</CODE></DT>
<DD>Old C system header files did not contain an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>extern "C" {...}</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>scope to set the language. On such systems, all header files are implicitly scoped inside a C language scope. Also, an empty prototype<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is treated as an unspecified number of arguments, rather than no arguments, as C++ demands.</DD></DL>