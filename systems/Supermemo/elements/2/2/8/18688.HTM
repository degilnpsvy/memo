<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>8.2.1 What you can and what you cannot do in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+load</CODE></H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>+load</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is to be used only as a last resort. Because it is executed very early, most of the Objective-C runtime machinery will not be ready when<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+load</CODE>is executed; hence<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+load</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>works best for executing C code that is independent on the Objective-C runtime.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+load</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>implementation in the GNU runtime guarantees you the following things:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>you can write whatever C code you like;</LI>
<LI>you can allocate and send messages to objects whose class is implemented in the same file;</LI>
<LI>the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+load</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>implementation of all super classes of a class are executed before the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+load</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>of that class is executed;</LI>
<LI>the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+load</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>implementation of a class is executed before the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+load</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>implementation of any category.</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In particular, the following things, even if they can work in a particular case, are not guaranteed:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>allocation of or sending messages to arbitrary objects;</LI>
<LI>allocation of or sending messages to objects whose classes have a category implemented in the same file;</LI>
<LI>sending messages to Objective-C constant strings (<CODE>@"this is a constant string"</CODE>);</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">You should make no assumptions about receiving<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+load</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in sibling classes when you write<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+load</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>of a class. The order in which sibling classes receive<CODE>+load</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not guaranteed.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The order in which<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+load</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+initialize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are called could be problematic if this matters. If you don't allocate objects inside<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+load</CODE>, it is guaranteed that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+load</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called before<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+initialize</CODE>. If you create an object inside<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+load</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+initialize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>method of object's class is invoked even if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+load</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>was not invoked. Note if you explicitly call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+load</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on a class,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+initialize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be called first. To avoid possible problems try to implement only one of these methods.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+load</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>method is also invoked when a bundle is dynamically loaded into your running program. This happens automatically without any intervening operation from you. When you write bundles and you need to write<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+load</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>you can safely create and send messages to objects whose classes already exist in the running program. The same restrictions as above apply to classes defined in bundle.