<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>7.4 #pragma interface and implementation</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-interface-and-implementation-headers_002c-C_002b_002b-3803></A><A name=index-C_002b_002b-interface-and-implementation-headers-3804></A><A name=index-pragmas_002c-interface-and-implementation-3805></A><CODE>#pragma interface</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#pragma implementation</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>provide the user with a way of explicitly directing the compiler to emit entities with vague linkage (and debugging information) in a particular translation unit.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><EM>Note:</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>As of GCC 2.7.2, these<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#pragma</CODE>s are not useful in most cases, because of COMDAT support and the &#8220;key method&#8221; heuristic mentioned in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Vague-Linkage.html#Vague-Linkage">Vague Linkage</A>. Using them can actually cause your program to grow due to unnecessary out-of-line copies of inline functions. Currently (3.4) the only benefit of these<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#pragma</CODE>s is reduced duplication of debugging information, and that should be addressed soon on DWARF 2 targets with the use of COMDAT groups.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>#pragma interface</CODE></DT>
<DT><CODE>#pragma interface "</CODE><VAR>subdir</VAR><CODE>/</CODE><VAR>objects</VAR><CODE>.h"</CODE></DT>
<DD><A name=index-g_t_0023pragma-interface-3806></A>Use this directive in<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>header files</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>that define object classes, to save space in most of the object files that use those classes. Normally, local copies of certain information (backup copies of inline member functions, debugging information, and the internal tables that implement virtual functions) must be kept in each object file that includes class definitions. You can use this pragma to avoid such duplication. When a header file containing &#8216;<SAMP><SPAN class=samp>#pragma interface</SPAN></SAMP>&#8217; is included in a compilation, this auxiliary information is not generated (unless the main input source file itself uses &#8216;<SAMP><SPAN class=samp>#pragma implementation</SPAN></SAMP>&#8217;). Instead, the object files contain references to be resolved at link time.
<P>The second form of this directive is useful for the case where you have multiple headers with the same name in different directories. If you use this form, you must specify the same string to &#8216;<SAMP><SPAN class=samp>#pragma implementation</SPAN></SAMP>&#8217;.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>#pragma implementation</CODE></DT>
<DT><CODE>#pragma implementation "</CODE><VAR>objects</VAR><CODE>.h"</CODE></DT>
<DD><A name=index-g_t_0023pragma-implementation-3807></A>Use this pragma in a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>main input file</EM>, when you want full output from included header files to be generated (and made globally visible). The included header file, in turn, should use &#8216;<SAMP><SPAN class=samp>#pragma interface</SPAN></SAMP>&#8217;. Backup copies of inline member functions, debugging information, and the internal tables used to implement virtual functions are all generated in implementation files.
<P><A name=index-implied-_0040code_007b_0023pragma-implementation_007d-3808></A><A name=index-g_t_0040code_007b_0023pragma-implementation_007d_002c-implied-3809></A><A name=index-naming-convention_002c-implementation-headers-3810></A>If you use &#8216;<SAMP><SPAN class=samp>#pragma implementation</SPAN></SAMP>&#8217; with no argument, it applies to an include file with the same basename<A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/C_002b_002b-Interface.html#fn-1" name=fnd-1 rel=footnote><SUP>1</SUP></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>as your source file. For example, in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>allclass.cc</SPAN></SAMP>, giving just &#8216;<SAMP><SPAN class=samp>#pragma implementation</SPAN></SAMP>&#8217; by itself is equivalent to &#8216;<SAMP><SPAN class=samp>#pragma implementation "allclass.h"</SPAN></SAMP>&#8217;.</P>
<P>In versions of GNU C++ prior to 2.6.0<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>allclass.h</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>was treated as an implementation file whenever you would include it from<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>allclass.cc</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>even if you never specified &#8216;<SAMP><SPAN class=samp>#pragma implementation</SPAN></SAMP>&#8217;. This was deemed to be more trouble than it was worth, however, and disabled.</P>
<P>Use the string argument if you want a single implementation file to include code from multiple header files. (You must also use &#8216;<SAMP><SPAN class=samp>#include</SPAN></SAMP>&#8217; to include the header file; &#8216;<SAMP><SPAN class=samp>#pragma implementation</SPAN></SAMP>&#8217; only specifies how to use the file&#8212;it doesn't actually include it.)</P>
<P>There is no way to split up the contents of a single header file into multiple implementation files.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-inlining-and-C_002b_002b-pragmas-3811></A><A name=index-C_002b_002b-pragmas_002c-effect-on-inlining-3812></A><A name=index-pragmas-in-C_002b_002b_002c-effect-on-inlining-3813></A>&#8216;<SAMP><SPAN class=samp>#pragma implementation</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>#pragma interface</SPAN></SAMP>&#8217; also have an effect on function inlining.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If you define a class in a header file marked with &#8216;<SAMP><SPAN class=samp>#pragma interface</SPAN></SAMP>&#8217;, the effect on an inline function defined in that class is similar to an explicit<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>extern</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>declaration&#8212;the compiler emits no code at all to define an independent version of the function. Its definition is used only for inlining with its callers.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-fno-implement-inlines-3814></A>Conversely, when you include the same header file in a main source file that declares it as &#8216;<SAMP><SPAN class=samp>#pragma implementation</SPAN></SAMP>&#8217;, the compiler emits code for the function itself; this defines a version of the function that can be found via pointers (or by callers compiled without inlining). If all calls to the function can be inlined, you can avoid emitting the function by compiling with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fno-implement-inlines</SPAN></SAMP>. If any calls are not inlined, you will get linker errors.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=footnote>
<HR>

<H4>Footnotes</H4>
<P class=footnote><SMALL>[<A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/C_002b_002b-Interface.html#fnd-1" name=fn-1>1</A>]</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>A file's<SPAN class=Apple-converted-space>&nbsp;</SPAN><DFN>basename</DFN><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the name stripped of all leading path information and of trailing suffixes, such as &#8216;<SAMP><SPAN class=samp>.h</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>.C</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>.cc</SPAN></SAMP>&#8217;.</P></DIV>