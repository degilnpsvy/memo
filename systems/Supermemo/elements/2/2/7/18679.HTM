<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>7.10 Type Traits</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The C++ front end implements syntactic extensions that allow compile-time determination of various characteristics of a type (or of a pair of types).</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>__has_nothrow_assign (type)</CODE></DT>
<DD>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is const qualified or is a reference type then the trait is false. Otherwise if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__has_trivial_assign (type)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true then the trait is true, else if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a cv class or union type with copy assignment operators that are known not to throw an exception then the trait is true, else it is false. Requires:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>shall be a complete type, (possibly cv-qualified)<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>void</CODE>, or an array of unknown bound.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>__has_nothrow_copy (type)</CODE></DT>
<DD>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__has_trivial_copy (type)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true then the trait is true, else if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a cv class or union type with copy constructors that are known not to throw an exception then the trait is true, else it is false. Requires:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>shall be a complete type, (possibly cv-qualified)<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>void</CODE>, or an array of unknown bound.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>__has_nothrow_constructor (type)</CODE></DT>
<DD>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__has_trivial_constructor (type)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true then the trait is true, else if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a cv class or union type (or array thereof) with a default constructor that is known not to throw an exception then the trait is true, else it is false. Requires:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>shall be a complete type, (possibly cv-qualified)<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>void</CODE>, or an array of unknown bound.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>__has_trivial_assign (type)</CODE></DT>
<DD>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is const qualified or is a reference type then the trait is false. Otherwise if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__is_pod (type)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true then the trait is true, else if<CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a cv class or union type with a trivial copy assignment ([class.copy]) then the trait is true, else it is false. Requires:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>shall be a complete type, (possibly cv-qualified)<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>void</CODE>, or an array of unknown bound.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>__has_trivial_copy (type)</CODE></DT>
<DD>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__is_pod (type)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a reference type then the trait is true, else if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a cv class or union type with a trivial copy constructor ([class.copy]) then the trait is true, else it is false. Requires:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>shall be a complete type, (possibly cv-qualified)<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>void</CODE>, or an array of unknown bound.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>__has_trivial_constructor (type)</CODE></DT>
<DD>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__is_pod (type)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true then the trait is true, else if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a cv class or union type (or array thereof) with a trivial default constructor ([class.ctor]) then the trait is true, else it is false. Requires:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>shall be a complete type, (possibly cv-qualified)<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>void</CODE>, or an array of unknown bound.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>__has_trivial_destructor (type)</CODE></DT>
<DD>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__is_pod (type)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is true or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a reference type then the trait is true, else if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a cv class or union type (or array thereof) with a trivial destructor ([class.dtor]) then the trait is true, else it is false. Requires:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>shall be a complete type, (possibly cv-qualified)<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>void</CODE>, or an array of unknown bound.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>__has_virtual_destructor (type)</CODE></DT>
<DD>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a class type with a virtual destructor ([class.dtor]) then the trait is true, else it is false. Requires:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>shall be a complete type, (possibly cv-qualified)<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>void</CODE>, or an array of unknown bound.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>__is_abstract (type)</CODE></DT>
<DD>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an abstract class ([class.abstract]) then the trait is true, else it is false. Requires:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>shall be a complete type, (possibly cv-qualified)<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>void</CODE>, or an array of unknown bound.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>__is_base_of (base_type, derived_type)</CODE></DT>
<DD>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>base_type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a base class of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>derived_type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>([class.derived]) then the trait is true, otherwise it is false. Top-level cv qualifications of<CODE>base_type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>derived_type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are ignored. For the purposes of this trait, a class type is considered is own base. Requires: if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__is_class (base_type)</CODE>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__is_class (derived_type)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are true and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>base_type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>derived_type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are not the same type (disregarding cv-qualifiers),<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>derived_type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>shall be a complete type. Diagnostic is produced if this requirement is not met.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>__is_class (type)</CODE></DT>
<DD>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a cv class type, and not a union type ([basic.compound]) the trait is true, else it is false.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>__is_empty (type)</CODE></DT>
<DD>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__is_class (type)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is false then the trait is false. Otherwise<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is considered empty if and only if:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>has no non-static data members, or all non-static data members, if any, are bit-fields of length 0, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>has no virtual members, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>has no virtual base classes, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>has no base classes<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>base_type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for which<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__is_empty (base_type)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is false. Requires:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>shall be a complete type, (possibly cv-qualified)<CODE>void</CODE>, or an array of unknown bound.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>__is_enum (type)</CODE></DT>
<DD>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a cv enumeration type ([basic.compound]) the trait is true, else it is false.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>__is_literal_type (type)</CODE></DT>
<DD>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a literal type ([basic.types]) the trait is true, else it is false. Requires:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>shall be a complete type, (possibly cv-qualified)<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>void</CODE>, or an array of unknown bound.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>__is_pod (type)</CODE></DT>
<DD>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a cv POD type ([basic.types]) then the trait is true, else it is false. Requires:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>shall be a complete type, (possibly cv-qualified)<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>void</CODE>, or an array of unknown bound.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>__is_polymorphic (type)</CODE></DT>
<DD>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a polymorphic class ([class.virtual]) then the trait is true, else it is false. Requires:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>shall be a complete type, (possibly cv-qualified)<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>void</CODE>, or an array of unknown bound.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>__is_standard_layout (type)</CODE></DT>
<DD>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a standard-layout type ([basic.types]) the trait is true, else it is false. Requires:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>shall be a complete type, (possibly cv-qualified)<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>void</CODE>, or an array of unknown bound.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>__is_trivial (type)</CODE></DT>
<DD>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a trivial type ([basic.types]) the trait is true, else it is false. Requires:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>shall be a complete type, (possibly cv-qualified)<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>void</CODE>, or an array of unknown bound.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>__is_union (type)</CODE></DT>
<DD>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a cv union type ([basic.compound]) the trait is true, else it is false.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>__underlying_type (type)</CODE></DT>
<DD>The underlying type of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE>. Requires:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>shall be an enumeration type ([dcl.enum]).</DD></DL>