<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>7.2 Restricting Pointer Aliasing</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-restricted-pointers-3796></A><A name=index-restricted-references-3797></A><A name=index-restricted-this-pointer-3798></A>As with the C front end, G++ understands the C99 feature of restricted pointers, specified with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__restrict__</CODE>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__restrict</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>type qualifier. Because you cannot compile C++ by specifying the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-std=c99</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>language flag,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>restrict</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not a keyword in C++.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In addition to allowing restricted pointers, you can specify restricted references, which indicate that the reference is not aliased in the local context.</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     void fn (int *__restrict__ rptr, int &amp;__restrict__ rref)
     {
       /* <SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>...</SPAN> */
     }
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=noindent>In the body of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fn</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rptr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>points to an unaliased integer and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rref</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>refers to a (different) unaliased integer.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">You may also specify whether a member function's<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>this</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>pointer is unaliased by using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__restrict__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a member function qualifier.</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     void T::fn () __restrict__
     {
       /* <SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>...</SPAN> */
     }
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=noindent>Within the body of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>T::fn</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>this</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>has the effective definition<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>T *__restrict__ const this</CODE>. Notice that the interpretation of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__restrict__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>member function qualifier is different to that of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>const</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>volatile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>qualifier, in that it is applied to the pointer rather than the object. This is consistent with other compilers that implement restricted pointers.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">As with all outermost parameter qualifiers,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__restrict__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is ignored in function definition matching. This means you only need to specify<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__restrict__</CODE>in a function definition, rather than in a function prototype as well.