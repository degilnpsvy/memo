<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>7.9 Namespace Association</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><STRONG>Caution:</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN>The semantics of this extension are equivalent to C++ 2011 inline namespaces. Users should use inline namespaces instead as this extension will be removed in future versions of G++.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A using-directive with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__attribute ((strong))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is stronger than a normal using-directive in two ways:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>Templates from the used namespace can be specialized and explicitly instantiated as though they were members of the using namespace.</LI>
<LI>The using namespace is considered an associated namespace of all templates in the used namespace for purposes of argument-dependent name lookup.</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The used namespace must be nested within the using namespace so that normal unqualified lookup works properly.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This is useful for composing a namespace transparently from implementation namespaces. For example:</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     namespace std {
       namespace debug {
         template &lt;class T&gt; struct A { };
       }
       using namespace debug __attribute ((__strong__));
       template &lt;&gt; struct A&lt;int&gt; { };   // <SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>OK to specialize</SPAN>
     
       template &lt;class T&gt; void f (A&lt;T&gt;);
     }
     
     int main()
     {
       f (std::A&lt;float&gt;());             // <SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>lookup finds</SPAN> std::f
       f (std::A&lt;int&gt;());
     }</PRE>