<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>8.9.4 Fast enumeration protocol</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If you want your own collection object to be usable with fast enumeration, you need to have it implement the method</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     - (unsigned long) countByEnumeratingWithState: (NSFastEnumerationState *)state
                                           objects: (id *)objects
                                             count: (unsigned long)len;
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">where<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NSFastEnumerationState</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be defined in your code as follows:</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     typedef struct
     {
       unsigned long state;
       id            *itemsPtr;
       unsigned long *mutationsPtr;
       unsigned long extra[5];
     } NSFastEnumerationState;
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If no<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NSFastEnumerationState</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is defined in your code, the compiler will automatically replace<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NSFastEnumerationState *</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct __objcFastEnumerationState *</CODE>, where that type is silently defined by the compiler in an identical way. This can be confusing and we recommend that you define<CODE>NSFastEnumerationState</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(as shown above) instead.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The method is called repeatedly during a fast enumeration to retrieve batches of objects. Each invocation of the method should retrieve the next batch of objects.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The return value of the method is the number of objects in the current batch; this should not exceed<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>len</CODE>, which is the maximum size of a batch as requested by the caller. The batch itself is returned in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>itemsPtr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>field of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NSFastEnumerationState</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>struct.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To help with returning the objects, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>objects</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>array is a C array preallocated by the caller (on the stack) of size<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>len</CODE>. In many cases you can put the objects you want to return in that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>objects</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>array, then do<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>itemsPtr = objects</CODE>. But you don't have to; if your collection already has the objects to return in some form of C array, it could return them from there instead.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>state</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>extra</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>fields of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NSFastEnumerationState</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>structure allows your collection object to keep track of the state of the enumeration. In a simple array implementation,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>state</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may keep track of the index of the last object that was returned, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>extra</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be unused.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mutationsPtr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>field of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NSFastEnumerationState</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used to keep track of mutations. It should point to a number; before working on each object, the fast enumeration loop will check that this number has not changed. If it has, a mutation has happened and the fast enumeration will abort. So,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mutationsPtr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>could be set to point to some sort of version number of your collection, which is increased by one every time there is a change (for example when an object is added or removed). Or, if you are content with less strict mutation checks, it could point to the number of objects in your collection or some other value that can be checked to perform an approximate check that the collection has not been mutated.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Finally, note how we declared the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>len</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument and the return value to be of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unsigned long</CODE>. They could also be declared to be of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unsigned int</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and everything would still work.