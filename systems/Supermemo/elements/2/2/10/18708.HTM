<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>10.1 Introduction to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gcov</SPAN></SAMP></H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><SAMP><SPAN class=command>gcov</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a test coverage program. Use it in concert with GCC to analyze your programs to help create more efficient, faster running code and to discover untested parts of your program. You can use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gcov</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a profiling tool to help discover where your optimization efforts will best affect your code. You can also use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gcov</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>along with the other profiling tool,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gprof</SPAN></SAMP>, to assess which parts of your code use the greatest amount of computing time.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Profiling tools help you analyze your code's performance. Using a profiler such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gcov</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gprof</SPAN></SAMP>, you can find out some basic performance statistics, such as:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>how often each line of code executes</LI>
<LI>what lines of code are actually executed</LI>
<LI>how much computing time each section of code uses</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Once you know these things about how your code works when compiled, you can look at each module to see which modules should be optimized.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gcov</SPAN></SAMP>helps you determine where to work on optimization.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Software developers also use coverage testing in concert with testsuites, to make sure software is actually good enough for a release. Testsuites can verify that a program works as expected; a coverage program tests to see how much of the program is exercised by the testsuite. Developers can then determine what kinds of test cases need to be added to the testsuites to create both better testing and a better final product.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">You should compile your code without optimization if you plan to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gcov</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>because the optimization, by combining some lines of code into one function, may not give you as much information as you need to look for `hot spots' where the code is using a great deal of computer time. Likewise, because<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gcov</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>accumulates statistics by line (at the lowest resolution), it works best with a programming style that places only one statement on each line. If you use complicated macros that expand to loops or to other control structures, the statistics are less helpful&#8212;they only report on the line where the macro call appears. If your complex macros behave like functions, you can replace them with inline functions to solve this problem.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><SAMP><SPAN class=command>gcov</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>creates a logfile called<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><VAR>sourcefile</VAR><SPAN class=file>.gcov</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>which indicates how many times each line of a source file<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><VAR>sourcefile</VAR><SPAN class=file>.c</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>has executed. You can use these logfiles along with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gprof</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to aid in fine-tuning the performance of your programs.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gprof</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>gives timing information you can use along with the information you get from<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gcov</SPAN></SAMP>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><SAMP><SPAN class=command>gcov</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>works only on code compiled with GCC. It is not compatible with any other profiling or test coverage mechanism.