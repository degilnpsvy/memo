<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>10.2 Invoking<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gcov</SPAN></SAMP></H3><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     gcov <SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>[</SPAN><VAR>options</VAR><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>]</SPAN> <VAR>files</VAR>
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><SAMP><SPAN class=command>gcov</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>accepts the following options:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>-h</CODE></DT>
<DT><CODE>--help</CODE></DT>
<DD>Display help about using<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gcov</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>(on the standard output), and exit without doing any further processing.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-v</CODE></DT>
<DT><CODE>--version</CODE></DT>
<DD>Display the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gcov</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>version number (on the standard output), and exit without doing any further processing.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-a</CODE></DT>
<DT><CODE>--all-blocks</CODE></DT>
<DD>Write individual execution counts for every basic block. Normally gcov outputs execution counts only for the main blocks of a line. With this option you can determine if blocks within a single line are not being executed.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-b</CODE></DT>
<DT><CODE>--branch-probabilities</CODE></DT>
<DD>Write branch frequencies to the output file, and write branch summary info to the standard output. This option allows you to see how often each branch in your program was taken. Unconditional branches will not be shown, unless the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-u</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is given.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-c</CODE></DT>
<DT><CODE>--branch-counts</CODE></DT>
<DD>Write branch frequencies as the number of branches taken, rather than the percentage of branches taken.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-n</CODE></DT>
<DT><CODE>--no-output</CODE></DT>
<DD>Do not create the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gcov</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>output file.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-l</CODE></DT>
<DT><CODE>--long-file-names</CODE></DT>
<DD>Create long file names for included source files. For example, if the header file<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>x.h</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>contains code, and was included in the file<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>a.c</SPAN></SAMP>, then running<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gcov</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>on the file<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>a.c</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>will produce an output file called<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>a.c##x.h.gcov</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>x.h.gcov</SPAN></SAMP>. This can be useful if<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>x.h</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is included in multiple source files and you want to see the individual contributions. If you use the &#8216;<SAMP><SPAN class=samp>-p</SPAN></SAMP>&#8217; option, both the including and included file names will be complete path names.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-p</CODE></DT>
<DT><CODE>--preserve-paths</CODE></DT>
<DD>Preserve complete path information in the names of generated<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.gcov</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>files. Without this option, just the filename component is used. With this option, all directories are used, with &#8216;<SAMP><SPAN class=samp>/</SPAN></SAMP>&#8217; characters translated to &#8216;<SAMP><SPAN class=samp>#</SPAN></SAMP>&#8217; characters,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>directory components removed and unremoveable<SAMP><SPAN class=file>..</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>components renamed to &#8216;<SAMP><SPAN class=samp>^</SPAN></SAMP>&#8217;. This is useful if sourcefiles are in several different directories.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-r</CODE></DT>
<DT><CODE>--relative-only</CODE></DT>
<DD>Only output information about source files with a relative pathname (after source prefix elision). Absolute paths are usually system header files and coverage of any inline functions therein is normally uninteresting.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-f</CODE></DT>
<DT><CODE>--function-summaries</CODE></DT>
<DD>Output summaries for each function in addition to the file level summary.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-o<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>directory|file</VAR></DT>
<DT><CODE>--object-directory<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>directory</VAR></DT>
<DT><CODE>--object-file<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>file</VAR></DT>
<DD>Specify either the directory containing the gcov data files, or the object path name. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.gcno</SPAN></SAMP>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.gcda</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>data files are searched for using this option. If a directory is specified, the data files are in that directory and named after the input file name, without its extension. If a file is specified here, the data files are named after that file, without its extension.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-s<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>directory</VAR></DT>
<DT><CODE>--source-prefix<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>directory</VAR></DT>
<DD>A prefix for source file names to remove when generating the output coverage files. This option is useful when building in a separate directory, and the pathname to the source directory is not wanted when determining the output file names. Note that this prefix detection is applied before determining whether the source file is absolute.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-u</CODE></DT>
<DT><CODE>--unconditional-branches</CODE></DT>
<DD>When branch probabilities are given, include those of unconditional branches. Unconditional branches are normally not interesting.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-d</CODE></DT>
<DT><CODE>--display-progress</CODE></DT>
<DD>Display the progress on the standard output.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-i</CODE></DT>
<DT><CODE>--intermediate-format</CODE></DT>
<DD>Output gcov file in an easy-to-parse intermediate text format that can be used by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>lcov</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or other tools. The output is a single<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.gcov</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>file per<SAMP><SPAN class=file>.gcda</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>file. No source code is required.
<P>The format of the intermediate<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.gcov</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>file is plain text with one entry per line</P><PRE style="FONT-SIZE: smaller" class=smallexample>          file:<VAR>source_file_name</VAR>
          function:<VAR>line_number</VAR>,<VAR>execution_count</VAR>,<VAR>function_name</VAR>
          lcount:<VAR>line number</VAR>,<VAR>execution_count</VAR>
          branch:<VAR>line_number</VAR>,<VAR>branch_coverage_type</VAR>
          
          Where the <VAR>branch_coverage_type</VAR> is
             notexec (Branch not executed)
             taken (Branch executed and taken)
             nottaken (Branch executed, but not taken)
          
          There can be multiple <VAR>file</VAR> entries in an intermediate gcov
          file. All entries following a <VAR>file</VAR> pertain to that source file
          until the next <VAR>file</VAR> entry.
</PRE>
<P>Here is a sample when<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-i</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used in conjunction with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-b</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          file:array.cc
          function:11,1,_Z3sumRKSt6vectorIPiSaIS0_EE
          function:22,1,main
          lcount:11,1
          lcount:12,1
          lcount:14,1
          branch:14,taken
          lcount:26,1
          branch:28,nottaken
</PRE><BR></DD>
<DT><CODE>-m</CODE></DT>
<DT><CODE>--demangled-names</CODE></DT>
<DD>Display demangled function names in output. The default is to show mangled function names.</DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><SAMP><SPAN class=command>gcov</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be run with the current directory the same as that when you invoked the compiler. Otherwise it will not be able to locate the source files.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gcov</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>produces files called<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><VAR>mangledname</VAR><SPAN class=file>.gcov</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the current directory. These contain the coverage information of the source file they correspond to. One<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.gcov</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>file is produced for each source (or header) file containing code, which was compiled to produce the data files. The<VAR>mangledname</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>part of the output file name is usually simply the source file name, but can be something more complicated if the &#8216;<SAMP><SPAN class=samp>-l</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>-p</SPAN></SAMP>&#8217; options are given. Refer to those options for details.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If you invoke<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gcov</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>with multiple input files, the contributions from each input file are summed. Typically you would invoke it with the same list of files as the final link of your executable.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.gcov</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>files contain the &#8216;<SAMP><SPAN class=samp>:</SPAN></SAMP>&#8217; separated fields along with program source code. The format is</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     <VAR>execution_count</VAR>:<VAR>line_number</VAR>:<VAR>source line text</VAR>
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Additional block information may succeed each line, when requested by command line option. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>execution_count</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is &#8216;<SAMP><SPAN class=samp>-</SPAN></SAMP>&#8217; for lines containing no code. Unexecuted lines are marked &#8216;<SAMP><SPAN class=samp>#####</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>====</SPAN></SAMP>&#8217;, depending on whether they are reachable by non-exceptional paths or only exceptional paths such as C++ exception handlers, respectively.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Some lines of information at the start have<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>line_number</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>of zero. These preamble lines are of the form</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     -:0:<VAR>tag</VAR>:<VAR>value</VAR>
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The ordering and number of these preamble lines will be augmented as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gcov</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>development progresses &#8212; do not rely on them remaining unchanged. Use<VAR>tag</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to locate a particular preamble line.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The additional block information is of the form</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     <VAR>tag</VAR> <VAR>information</VAR>
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>information</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is human readable, but designed to be simple enough for machine parsing too.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When printing percentages, 0% and 100% are only printed when the values are<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>exactly</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>0% and 100% respectively. Other values which would conventionally be rounded to 0% or 100% are instead printed as the nearest non-boundary value.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When using<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gcov</SPAN></SAMP>, you must first compile your program with two special GCC options: &#8216;<SAMP><SPAN class=samp>-fprofile-arcs -ftest-coverage</SPAN></SAMP>&#8217;. This tells the compiler to generate additional information needed by gcov (basically a flow graph of the program) and also includes additional code in the object files for generating the extra profiling information needed by gcov. These additional files are placed in the directory where the object file is located.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Running the program will cause profile output to be generated. For each source file compiled with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fprofile-arcs</SPAN></SAMP>, an accompanying<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.gcda</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>file will be placed in the object file directory.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Running<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gcov</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>with your program's source file names as arguments will now produce a listing of the code along with frequency of execution for each line. For example, if your program is called<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>tmp.c</SPAN></SAMP>, this is what you see when you use the basic<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gcov</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>facility:</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     $ gcc -fprofile-arcs -ftest-coverage tmp.c
     $ a.out
     $ gcov tmp.c
     90.00% of 10 source lines executed in file tmp.c
     Creating tmp.c.gcov.
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The file<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>tmp.c.gcov</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>contains output from<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gcov</SPAN></SAMP>. Here is a sample:</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>             -:    0:Source:tmp.c
             -:    0:Graph:tmp.gcno
             -:    0:Data:tmp.gcda
             -:    0:Runs:1
             -:    0:Programs:1
             -:    1:#include &lt;stdio.h&gt;
             -:    2:
             -:    3:int main (void)
             1:    4:{
             1:    5:  int i, total;
             -:    6:
             1:    7:  total = 0;
             -:    8:
            11:    9:  for (i = 0; i &lt; 10; i++)
            10:   10:    total += i;
             -:   11:
             1:   12:  if (total != 45)
         #####:   13:    printf ("Failure\n");
             -:   14:  else
             1:   15:    printf ("Success\n");
             1:   16:  return 0;
             -:   17:}
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When you use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-a</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option, you will get individual block counts, and the output looks like this:</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>             -:    0:Source:tmp.c
             -:    0:Graph:tmp.gcno
             -:    0:Data:tmp.gcda
             -:    0:Runs:1
             -:    0:Programs:1
             -:    1:#include &lt;stdio.h&gt;
             -:    2:
             -:    3:int main (void)
             1:    4:{
             1:    4-block  0
             1:    5:  int i, total;
             -:    6:
             1:    7:  total = 0;
             -:    8:
            11:    9:  for (i = 0; i &lt; 10; i++)
            11:    9-block  0
            10:   10:    total += i;
            10:   10-block  0
             -:   11:
             1:   12:  if (total != 45)
             1:   12-block  0
         #####:   13:    printf ("Failure\n");
         $$$$$:   13-block  0
             -:   14:  else
             1:   15:    printf ("Success\n");
             1:   15-block  0
             1:   16:  return 0;
             1:   16-block  0
             -:   17:}
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In this mode, each basic block is only shown on one line &#8211; the last line of the block. A multi-line block will only contribute to the execution count of that last line, and other lines will not be shown to contain code, unless previous blocks end on those lines. The total execution count of a line is shown and subsequent lines show the execution counts for individual blocks that end on that line. After each block, the branch and call counts of the block will be shown, if the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-b</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is given.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Because of the way GCC instruments calls, a call count can be shown after a line with no individual blocks. As you can see, line 13 contains a basic block that was not executed.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When you use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-b</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option, your output looks like this:</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     $ gcov -b tmp.c
     90.00% of 10 source lines executed in file tmp.c
     80.00% of 5 branches executed in file tmp.c
     80.00% of 5 branches taken at least once in file tmp.c
     50.00% of 2 calls executed in file tmp.c
     Creating tmp.c.gcov.
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here is a sample of a resulting<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>tmp.c.gcov</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>file:</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>             -:    0:Source:tmp.c
             -:    0:Graph:tmp.gcno
             -:    0:Data:tmp.gcda
             -:    0:Runs:1
             -:    0:Programs:1
             -:    1:#include &lt;stdio.h&gt;
             -:    2:
             -:    3:int main (void)
     function main called 1 returned 1 blocks executed 75%
             1:    4:{
             1:    5:  int i, total;
             -:    6:
             1:    7:  total = 0;
             -:    8:
            11:    9:  for (i = 0; i &lt; 10; i++)
     branch  0 taken 91% (fallthrough)
     branch  1 taken 9%
            10:   10:    total += i;
             -:   11:
             1:   12:  if (total != 45)
     branch  0 taken 0% (fallthrough)
     branch  1 taken 100%
         #####:   13:    printf ("Failure\n");
     call    0 never executed
             -:   14:  else
             1:   15:    printf ("Success\n");
     call    0 called 1 returned 100%
             1:   16:  return 0;
             -:   17:}
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For each function, a line is printed showing how many times the function is called, how many times it returns and what percentage of the function's blocks were executed.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For each basic block, a line is printed after the last line of the basic block describing the branch or call that ends the basic block. There can be multiple branches and calls listed for a single source line if there are multiple basic blocks that end on that line. In this case, the branches and calls are each given a number. There is no simple way to map these branches and calls back to source constructs. In general, though, the lowest numbered branch or call will correspond to the leftmost construct on the source line.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For a branch, if it was executed at least once, then a percentage indicating the number of times the branch was taken divided by the number of times the branch was executed will be printed. Otherwise, the message &#8220;never executed&#8221; is printed.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For a call, if it was executed at least once, then a percentage indicating the number of times the call returned divided by the number of times the call was executed will be printed. This will usually be 100%, but may be less for functions that call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>exit</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>longjmp</CODE>, and thus may not return every time they are called.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The execution counts are cumulative. If the example program were executed again without removing the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.gcda</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>file, the count for the number of times each line in the source was executed would be added to the results of the previous run(s). This is potentially useful in several ways. For example, it could be used to accumulate data over a number of program runs as part of a test verification suite, or to provide more accurate long-term information over a large number of program runs.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The data in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.gcda</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>files is saved immediately before the program exits. For each source file compiled with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fprofile-arcs</SPAN></SAMP>, the profiling code first attempts to read in an existing<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.gcda</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>file; if the file doesn't match the executable (differing number of basic block counts) it will ignore the contents of the file. It then adds in the new execution counts and finally writes the data to the file.