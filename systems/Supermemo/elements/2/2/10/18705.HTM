<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>8.10.2 Forwarding hook</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The GNU Objective-C runtime provides a hook, called<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__objc_msg_forward2</CODE>, which is called by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>objc_msg_lookup()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>when it can't find a method implementation in the runtime tables and after calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+resolveInstanceMethod:</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+resolveClassMethod:</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>has been attempted and did not succeed in dynamically registering the method.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To configure the hook, you set the global variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__objc_msg_forward2</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to a function with the same argument and return types of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>objc_msg_lookup()</CODE>. When<CODE>objc_msg_lookup()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can not find a method implementation, it invokes the hook function you provided to get a method implementation to return. So, in practice<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__objc_msg_forward2</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>allows you to extend<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>objc_msg_lookup()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>by adding some custom code that is called to do a further lookup when no standard method implementation can be found using the normal lookup.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This hook is generally reserved for &#8220;Foundation&#8221; libraries such as GNUstep Base, which use it to implement their high-level method forwarding API, typically based around the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>forwardInvocation:</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>method. So, unless you are implementing your own &#8220;Foundation&#8221; library, you should not set this hook.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In a typical forwarding implementation, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__objc_msg_forward2</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>hook function determines the argument and return type of the method that is being looked up, and then creates a function that takes these arguments and has that return type, and returns it to the caller. Creating this function is non-trivial and is typically performed using a dedicated library such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>libffi</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The forwarding method implementation thus created is returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>objc_msg_lookup()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and is executed as if it was a normal method implementation. When the forwarding method implementation is called, it is usually expected to pack all arguments into some sort of object (typically, an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NSInvocation</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in a &#8220;Foundation&#8221; library), and hand it over to the programmer (<CODE>forwardInvocation:</CODE>) who is then allowed to manipulate the method invocation using a high-level API provided by the &#8220;Foundation&#8221; library. For example, the programmer may want to examine the method invocation arguments and name and potentially change them before forwarding the method invocation to one or more local objects (<CODE>performInvocation:</CODE>) or even to remote objects (by using Distributed Objects or some other mechanism). When all this completes, the return value is passed back and must be returned correctly to the original caller.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that the GNU Objective-C runtime currently provides no support for method forwarding or method invocations other than the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__objc_msg_forward2</CODE>hook.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If the forwarding hook does not exist or returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE>, the runtime currently attempts forwarding using an older, deprecated API, and if that fails, it aborts the program. In future versions of the GNU Objective-C runtime, the runtime will immediately abort.