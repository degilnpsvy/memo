<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>10.3 Using<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gcov</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>with GCC Optimization</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If you plan to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gcov</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to help optimize your code, you must first compile your program with two special GCC options: &#8216;<SAMP><SPAN class=samp>-fprofile-arcs -ftest-coverage</SPAN></SAMP>&#8217;. Aside from that, you can use any other GCC options; but if you want to prove that every single line in your program was executed, you should not compile with optimization at the same time. On some machines the optimizer can eliminate some simple code lines by combining them with other lines. For example, code like this:</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     if (a != b)
       c = 1;
     else
       c = 0;
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=noindent>can be compiled into one instruction on some machines. In this case, there is no way for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gcov</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to calculate separate execution counts for each line because there isn't separate code for each line. Hence the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gcov</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>output looks like this if you compiled the program with optimization:</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>           100:   12:if (a != b)
           100:   13:  c = 1;
           100:   14:else
           100:   15:  c = 0;
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The output shows that this block of code, combined by optimization, executed 100 times. In one sense this result is correct, because there was only one instruction representing all four of these lines. However, the output does not indicate how many times the result was 0 and how many times the result was 1.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Inlineable functions can create unexpected line counts. Line counts are shown for the source code of the inlineable function, but what is shown depends on where the function is inlined, or if it is not inlined at all.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If the function is not inlined, the compiler must emit an out of line copy of the function, in any object file that needs it. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>fileA.o</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SAMP><SPAN class=file>fileB.o</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>both contain out of line bodies of a particular inlineable function, they will also both contain coverage counts for that function. When<SAMP><SPAN class=file>fileA.o</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>fileB.o</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>are linked together, the linker will, on many systems, select one of those out of line bodies for all calls to that function, and remove or ignore the other. Unfortunately, it will not remove the coverage counters for the unused function body. Hence when instrumented, all but one use of that function will show zero counts.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If the function is inlined in several places, the block structure in each location might not be the same. For instance, a condition might now be calculable at compile time in some instances. Because the coverage of all the uses of the inline function will be shown for the same source lines, the line counts themselves might seem inconsistent.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Long-running applications can use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_gcov_reset</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_gcov_dump</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>facilities to restrict profile collection to the program region of interest. Calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_gcov_reset(void)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will clear all profile counters to zero, and calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_gcov_dump(void)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will cause the profile information collected at that point to be dumped to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.gcda</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>output files.