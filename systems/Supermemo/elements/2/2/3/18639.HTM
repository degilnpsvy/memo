<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.57.24 S/390 System z Built-in Functions</H4>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=defun>&#8212; Built-in Function: int<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_tbegin</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>void*</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005ftbegin-3734></A></VAR><BR>
<BLOCKQUOTE>
<P>Generates the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tbegin</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>machine instruction starting a non-constraint hardware transaction. If the parameter is non-NULL the memory area is used to store the transaction diagnostic buffer and will be passed as first operand to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tbegin</CODE>. This buffer can be defined using the<CODE>struct __htm_tdb</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>C struct defined in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>htmintrin.h</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and must reside on a double-word boundary. The second tbegin operand is set to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0xff0c</CODE>. This enables save/restore of all GPRs and disables aborts for FPR and AR manipulations inside the transaction body. The condition code set by the tbegin instruction is returned as integer value. The tbegin instruction by definition overwrites the content of all FPRs. The compiler will generate code which saves and restores the FPRs. For soft-float code it is recommended to used the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*_nofloat</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>variant. In order to prevent a TDB from being written it is required to pass an constant zero value as parameter. Passing the zero value through a variable is not sufficient. Although modifications of access registers inside the transaction will not trigger an transaction abort it is not supported to actually modify them. Access registers do not get saved when entering a transaction. They will have undefined state when reaching the abort code.</P></BLOCKQUOTE></DIV>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Macros for the possible return codes of tbegin are defined in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>htmintrin.h</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>header file:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>_HTM_TBEGIN_STARTED</CODE></DT>
<DD><CODE>tbegin</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>has been executed as part of normal processing. The transaction body is supposed to be executed.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>_HTM_TBEGIN_INDETERMINATE</CODE></DT>
<DD>The transaction was aborted due to an indeterminate condition which might be persistent.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>_HTM_TBEGIN_TRANSIENT</CODE></DT>
<DD>The transaction aborted due to a transient failure. The transaction should be re-executed in that case.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>_HTM_TBEGIN_PERSISTENT</CODE></DT>
<DD>The transaction aborted due to a persistent failure. Re-execution under same circumstances will not be productive.</DD></DL>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=defun>&#8212; Macro:<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>_HTM_FIRST_USER_ABORT_CODE</B><VAR><A name=index-g_t_005fHTM_005fFIRST_005fUSER_005fABORT_005fCODE-3735></A></VAR><BR>
<BLOCKQUOTE>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_HTM_FIRST_USER_ABORT_CODE</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>defined in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>htmintrin.h</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>specifies the first abort code which can be used for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_tabort</CODE>. Values below this threshold are reserved for machine use.</P></BLOCKQUOTE></DIV>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=defun>&#8212; Data type:<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>struct __htm_tdb</B><VAR><A name=index-struct-_005f_005fhtm_005ftdb-3736></A></VAR><BR>
<BLOCKQUOTE>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct __htm_tdb</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>defined in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>htmintrin.h</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>describes the structure of the transaction diagnostic block as specified in the Principles of Operation manual chapter 5-91.</P></BLOCKQUOTE></DIV>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=defun>&#8212; Built-in Function: int<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_tbegin_nofloat</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>void*</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005ftbegin_005fnofloat-3737></A></VAR><BR>
<BLOCKQUOTE>
<P>Same as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_tbegin</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>but without FPR saves and restores. Using this variant in code making use of FPRs will leave the FPRs in undefined state when entering the transaction abort handler code.</P></BLOCKQUOTE></DIV>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=defun>&#8212; Built-in Function: int<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_tbegin_retry</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>void*, int</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005ftbegin_005fretry-3738></A></VAR><BR>
<BLOCKQUOTE>
<P>In addition to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_tbegin</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>a loop for transient failures is generated. If tbegin returns a condition code of 2 the transaction will be retried as often as specified in the second argument. The perform processor assist instruction is used to tell the CPU about the number of fails so far.</P></BLOCKQUOTE></DIV>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=defun>&#8212; Built-in Function: int<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_tbegin_retry_nofloat</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>void*, int</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005ftbegin_005fretry_005fnofloat-3739></A></VAR><BR>
<BLOCKQUOTE>
<P>Same as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_tbegin_retry</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>but without FPR saves and restores. Using this variant in code making use of FPRs will leave the FPRs in undefined state when entering the transaction abort handler code.</P></BLOCKQUOTE></DIV>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=defun>&#8212; Built-in Function: void<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_tbeginc</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>void</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005ftbeginc-3740></A></VAR><BR>
<BLOCKQUOTE>
<P>Generates the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tbeginc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>machine instruction starting a constraint hardware transaction. The second operand is set to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0xff08</CODE>.</P></BLOCKQUOTE></DIV>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=defun>&#8212; Built-in Function: int<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_tend</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>void</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005ftend-3741></A></VAR><BR>
<BLOCKQUOTE>
<P>Generates the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tend</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>machine instruction finishing a transaction and making the changes visible to other threads. The condition code generated by tend is returned as integer value.</P></BLOCKQUOTE></DIV>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=defun>&#8212; Built-in Function: void<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_tabort</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>int</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005ftabort-3742></A></VAR><BR>
<BLOCKQUOTE>
<P>Generates the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tabort</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>machine instruction with the specified abort code. Abort codes from 0 through 255 are reserved and will result in an error message.</P></BLOCKQUOTE></DIV>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=defun>&#8212; Built-in Function: void<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_tx_assist</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>int</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005ftx_005fassist-3743></A></VAR><BR>
<BLOCKQUOTE>
<P>Generates the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ppa rX,rY,1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>machine instruction. Where the integer parameter is loaded into rX and a value of zero is loaded into rY. The integer parameter specifies the number of times the transaction repeatedly aborted.</P></BLOCKQUOTE></DIV>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=defun>&#8212; Built-in Function: int<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_tx_nesting_depth</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>void</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005ftx_005fnesting_005fdepth-3744></A></VAR><BR>
<BLOCKQUOTE>
<P>Generates the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>etnd</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>machine instruction. The current nesting depth is returned as integer value. For a nesting depth of 0 the code is not executed as part of an transaction.</P></BLOCKQUOTE></DIV>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=defun>&#8212; Built-in Function: void<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_non_tx_store</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>uint64_t *, uint64_t</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fnon_005ftx_005fstore-3745></A></VAR><BR>
<BLOCKQUOTE>
<P>Generates the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ntstg</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>machine instruction. The second argument is written to the first arguments location. The store operation will not be rolled-back in case of an transaction abort.</P></BLOCKQUOTE></DIV>