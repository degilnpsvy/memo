<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.57.19 picoChip Built-in Functions</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">GCC provides an interface to selected machine instructions from the picoChip instruction set.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>int __builtin_sbc (int<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>value</VAR><CODE>)</CODE></DT>
<DD>Sign bit count. Return the number of consecutive bits in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>that have the same value as the sign bit. The result is the number of leading sign bits minus one, giving the number of redundant sign bits in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>int __builtin_byteswap (int<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>value</VAR><CODE>)</CODE></DT>
<DD>Byte swap. Return the result of swapping the upper and lower bytes of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>int __builtin_brev (int<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>value</VAR><CODE>)</CODE></DT>
<DD>Bit reversal. Return the result of reversing the bits in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>. Bit 15 is swapped with bit 0, bit 14 is swapped with bit 1, and so on.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>int __builtin_adds (int<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>x</VAR><CODE>, int<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>y</VAR><CODE>)</CODE></DT>
<DD>Saturating addition. Return the result of adding<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR>, storing the value 32767 if the result overflows.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>int __builtin_subs (int<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>x</VAR><CODE>, int<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>y</VAR><CODE>)</CODE></DT>
<DD>Saturating subtraction. Return the result of subtracting<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>y</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>, storing the value &#8722;32768 if the result overflows.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>void __builtin_halt (void)</CODE></DT>
<DD>Halt. The processor stops execution. This built-in is useful for implementing assertions.</DD></DL>