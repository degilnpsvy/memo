<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.57.25 SH Built-in Functions</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following built-in functions are supported on the SH1, SH2, SH3 and SH4 families of processors:</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=defun>&#8212; Built-in Function: void<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_set_thread_pointer</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>void *ptr</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fset_005fthread_005fpointer-3746></A></VAR><BR>
<BLOCKQUOTE>
<P>Sets the &#8216;<SAMP><SPAN class=samp>GBR</SPAN></SAMP>&#8217; register to the specified value<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ptr</VAR>. This is usually used by system code that manages threads and execution contexts. The compiler normally does not generate code that modifies the contents of &#8216;<SAMP><SPAN class=samp>GBR</SPAN></SAMP>&#8217; and thus the value is preserved across function calls. Changing the &#8216;<SAMP><SPAN class=samp>GBR</SPAN></SAMP>&#8217; value in user code must be done with caution, since the compiler might use &#8216;<SAMP><SPAN class=samp>GBR</SPAN></SAMP>&#8217; in order to access thread local variables.</P></BLOCKQUOTE></DIV>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=defun>&#8212; Built-in Function: void *<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_thread_pointer</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>void</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fthread_005fpointer-3747></A></VAR><BR>
<BLOCKQUOTE>
<P>Returns the value that is currently set in the &#8216;<SAMP><SPAN class=samp>GBR</SPAN></SAMP>&#8217; register. Memory loads and stores that use the thread pointer as a base address are turned into &#8216;<SAMP><SPAN class=samp>GBR</SPAN></SAMP>&#8217; based displacement loads and stores, if possible. For example:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          struct my_tcb
          {
             int a, b, c, d, e;
          };
          
          int get_tcb_value (void)
          {
            // Generate &#8216;<SAMP><SPAN class=samp>mov.l @(8,gbr),r0</SPAN></SAMP>&#8217; instruction
            return ((my_tcb*)__builtin_thread_pointer ())-&gt;c;
          }
          </PRE></BLOCKQUOTE></DIV>