<H2 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=chapter>7 Extensions to the C++ Language</H2>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-extensions_002c-C_002b_002b-language-3790></A><A name=index-C_002b_002b-language-extensions-3791></A>The GNU compiler provides these extensions to the C++ language (and you can also use most of the C language extensions in your C++ programs). If you want to write code that checks whether these features are available, you can test for the GNU compiler the same way as for C programs: check for a predefined macro<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__GNUC__</CODE>. You can also use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__GNUG__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to test specifically for GNU C++ (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/cpp/Common-Predefined-Macros.html#Common-Predefined-Macros">Predefined Macros</A>).</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu>
<LI><A accessKey=1 href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/C_002b_002b-Volatiles.html#C_002b_002b-Volatiles">C++ Volatiles</A>: What constitutes an access to a volatile object.</LI>
<LI><A accessKey=2 href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Restricted-Pointers.html#Restricted-Pointers">Restricted Pointers</A>: C99 restricted pointers and references.</LI>
<LI><A accessKey=3 href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Vague-Linkage.html#Vague-Linkage">Vague Linkage</A>: Where G++ puts inlines, vtables and such.</LI>
<LI><A accessKey=4 href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/C_002b_002b-Interface.html#C_002b_002b-Interface">C++ Interface</A>: You can use a single C++ header file for both declarations and definitions.</LI>
<LI><A accessKey=5 href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Template-Instantiation.html#Template-Instantiation">Template Instantiation</A>: Methods for ensuring that exactly one copy of each needed template instantiation is emitted.</LI>
<LI><A accessKey=6 href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Bound-member-functions.html#Bound-member-functions">Bound member functions</A>: You can extract a function pointer to the method denoted by a &#8216;<SAMP><SPAN class=samp>-&gt;*</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>.*</SPAN></SAMP>&#8217; expression.</LI>
<LI><A accessKey=7 href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/C_002b_002b-Attributes.html#C_002b_002b-Attributes">C++ Attributes</A>: Variable, function, and type attributes for C++ only.</LI>
<LI><A accessKey=8 href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Function-Multiversioning.html#Function-Multiversioning">Function Multiversioning</A>: Declaring multiple function versions.</LI>
<LI><A accessKey=9 href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Namespace-Association.html#Namespace-Association">Namespace Association</A>: Strong using-directives for namespace association.</LI>
<LI><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Type-Traits.html#Type-Traits">Type Traits</A>: Compiler support for type traits</LI>
<LI><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Java-Exceptions.html#Java-Exceptions">Java Exceptions</A>: Tweaking exception handling to work with Java.</LI>
<LI><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Deprecated-Features.html#Deprecated-Features">Deprecated Features</A>: Things will disappear from G++.</LI>
<LI><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Backwards-Compatibility.html#Backwards-Compatibility">Backwards Compatibility</A>: Compatibilities with earlier definitions of C++.</LI></UL>