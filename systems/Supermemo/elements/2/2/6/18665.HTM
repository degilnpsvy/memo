<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>6.61 Thread-Local Storage</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-Thread-Local-Storage-3786></A><A name=index-g_t_0040acronym_007bTLS_007d-3787></A><A name=index-g_t_0040code_007b_005f_005fthread_007d-3788></A>Thread-local storage (<ACRONYM>TLS</ACRONYM>) is a mechanism by which variables are allocated such that there is one instance of the variable per extant thread. The runtime model GCC uses to implement this originates in the IA-64 processor-specific ABI, but has since been migrated to other processors as well. It requires significant support from the linker (<SAMP><SPAN class=command>ld</SPAN></SAMP>), dynamic linker (<SAMP><SPAN class=command>ld.so</SPAN></SAMP>), and system libraries (<SAMP><SPAN class=file>libc.so</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libpthread.so</SPAN></SAMP>), so it is not available everywhere.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">At the user level, the extension is visible with a new storage class keyword:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__thread</CODE>. For example:</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     __thread int i;
     extern __thread struct state s;
     static __thread char *p;
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__thread</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>specifier may be used alone, with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>extern</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>static</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>specifiers, but with no other storage class specifier. When used with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>extern</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<CODE>static</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__thread</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>must appear immediately after the other storage class specifier.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__thread</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>specifier may be applied to any global, file-scoped static, function-scoped static, or static data member of a class. It may not be applied to block-scoped automatic or non-static data member.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When the address-of operator is applied to a thread-local variable, it is evaluated at run time and returns the address of the current thread's instance of that variable. An address so obtained may be used by any thread. When a thread terminates, any pointers to thread-local variables in that thread become invalid.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">No static initialization may refer to the address of a thread-local variable.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In C++, if an initializer is present for a thread-local variable, it must be a<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>constant-expression</VAR>, as defined in 5.19.2 of the ANSI/ISO C++ standard.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.akkadia.org/drepper/tls.pdf">ELF Handling For Thread-Local Storage</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>for a detailed explanation of the four thread-local storage addressing models, and how the runtime is expected to function.</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=menu>
<LI><A accessKey=1 href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/C99-Thread-Local-Edits.html#C99-Thread-Local-Edits">C99 Thread-Local Edits</A></LI>
<LI><A accessKey=2 href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/C_002b_002b98-Thread-Local-Edits.html#C_002b_002b98-Thread-Local-Edits">C++98 Thread-Local Edits</A></LI></UL>