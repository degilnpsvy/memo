<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>6.60 Unnamed struct/union fields within structs/unions</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-g_t_0040code_007bstruct_007d-3782></A><A name=index-g_t_0040code_007bunion_007d-3783></A>As permitted by ISO C11 and for compatibility with other compilers, GCC allows you to define a structure or union that contains, as fields, structures and unions without names. For example:</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     struct {
       int a;
       union {
         int b;
         float c;
       };
       int d;
     } foo;
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=noindent>In this example, you are able to access members of the unnamed union with code like &#8216;<SAMP><SPAN class=samp>foo.b</SPAN></SAMP>&#8217;. Note that only unnamed structs and unions are allowed, you may not have, for example, an unnamed<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">You must never create such structures that cause ambiguous field definitions. For example, in this structure:</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     struct {
       int a;
       struct {
         int a;
       };
     } foo;
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=noindent>it is ambiguous which<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>a</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is being referred to with &#8216;<SAMP><SPAN class=samp>foo.a</SPAN></SAMP>&#8217;. The compiler gives errors for such constructs.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-fms-extensions-3784></A>Unless<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fms-extensions</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used, the unnamed field must be a structure or union definition without a tag (for example, &#8216;<SAMP><SPAN class=samp>struct { int a; };</SPAN></SAMP>&#8217;). If<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fms-extensions</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used, the field may also be a definition with a tag such as &#8216;<SAMP><SPAN class=samp>struct foo { int a; };</SPAN></SAMP>&#8217;, a reference to a previously defined structure or union such as &#8216;<SAMP><SPAN class=samp>struct foo;</SPAN></SAMP>&#8217;, or a reference to a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>typedef</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>name for a previously defined structure or union type.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-fplan9-extensions-3785></A>The option<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fplan9-extensions</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>enables<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fms-extensions</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>as well as two other extensions. First, a pointer to a structure is automatically converted to a pointer to an anonymous field for assignments and function calls. For example:</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     struct s1 { int a; };
     struct s2 { struct s1; };
     extern void f1 (struct s1 *);
     void f2 (struct s2 *p) { f1 (p); }
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=noindent>In the call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>f1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>inside<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>f2</CODE>, the pointer<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>p</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is converted into a pointer to the anonymous field.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Second, when the type of an anonymous field is a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>typedef</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>union</CODE>, code may refer to the field using the name of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>typedef</CODE>.</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     typedef struct { int a; } s1;
     struct s2 { s1; };
     s1 f1 (struct s2 *p) { return p-&gt;s1; }
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">These usages are only permitted when they are not ambiguous.