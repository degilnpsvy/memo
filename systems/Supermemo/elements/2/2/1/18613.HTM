<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.57.8 AVR Built-in Functions</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For each built-in function for AVR, there is an equally named, uppercase built-in macro defined. That way users can easily query if or if not a specific built-in is implemented or not. For example, if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_avr_nop</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is available the macro<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__BUILTIN_AVR_NOP</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is defined to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and undefined otherwise.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following built-in functions map to the respective machine instruction, i.e.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nop</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sei</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cli</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sleep</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>wdr</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>swap</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fmul</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fmuls</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>resp.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fmulsu</CODE>. The three<CODE>fmul*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>built-ins are implemented as library call if no hardware multiplier is available.</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     void __builtin_avr_nop (void)
     void __builtin_avr_sei (void)
     void __builtin_avr_cli (void)
     void __builtin_avr_sleep (void)
     void __builtin_avr_wdr (void)
     unsigned char __builtin_avr_swap (unsigned char)
     unsigned int __builtin_avr_fmul (unsigned char, unsigned char)
     int __builtin_avr_fmuls (char, char)
     int __builtin_avr_fmulsu (char, unsigned char)
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In order to delay execution for a specific number of cycles, GCC implements</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     void __builtin_avr_delay_cycles (unsigned long ticks)
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=noindent><CODE>ticks</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the number of ticks to delay execution. Note that this built-in does not take into account the effect of interrupts that might increase delay time.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ticks</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a compile-time integer constant; delays with a variable number of cycles are not supported.</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     char __builtin_avr_flash_segment (const __memx void*)
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=noindent>This built-in takes a byte address to the 24-bit<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/AVR-Named-Address-Spaces.html#AVR-Named-Address-Spaces">address space</A><SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__memx</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and returns the number of the flash segment (the 64 KiB chunk) where the address points to. Counting starts at<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0</CODE>. If the address does not point to flash memory, return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-1</CODE>.</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     unsigned char __builtin_avr_insert_bits (unsigned long map, unsigned char bits, unsigned char val)
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=noindent>Insert bits from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bits</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>into<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and return the resulting value. The nibbles of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>map</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>determine how the insertion is performed: Let<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>X</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>be the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>-th nibble of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>map</VAR></P>
<OL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" type=1>
<LI>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>X</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0xf</CODE>, then the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>-th bit of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>val</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned unaltered.</LI>
<LI>If X is in the range 0<SMALL class=dots>...</SMALL>7, then the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>-th result bit is set to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>X</VAR>-th bit of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>bits</VAR></LI>
<LI>If X is in the range 8<SMALL class=dots>...</SMALL><CODE>0xe</CODE>, then the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>-th result bit is undefined.</LI></OL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=noindent>One typical use case for this built-in is adjusting input and output values to non-contiguous port layouts. Some examples:</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     // same as val, bits is unused
     __builtin_avr_insert_bits (0xffffffff, bits, val)
</PRE><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     // same as bits, val is unused
     __builtin_avr_insert_bits (0x76543210, bits, val)
</PRE><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     // same as rotating bits by 4
     __builtin_avr_insert_bits (0x32107654, bits, 0)
</PRE><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     // high nibble of result is the high nibble of val
     // low nibble of result is the low nibble of bits
     __builtin_avr_insert_bits (0xffff3210, bits, val)
</PRE><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     // reverse the bit order of bits
     __builtin_avr_insert_bits (0x01234567, bits, 0)</PRE>