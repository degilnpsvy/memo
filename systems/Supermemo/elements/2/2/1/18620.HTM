<H5 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>6.57.10.5 Other Built-in Functions</H5>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This section describes built-in functions that are not named after a specific FR-V instruction.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>sw2 __IACCreadll (iacc<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>reg</VAR><CODE>)</CODE></DT>
<DD>Return the full 64-bit value of IACC0. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>reg</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument is reserved for future expansion and must be 0.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>sw1 __IACCreadl (iacc<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>reg</VAR><CODE>)</CODE></DT>
<DD>Return the value of IACC0H if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>reg</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 0 and IACC0L if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>reg</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 1. Other values of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>reg</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are rejected as invalid.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>void __IACCsetll (iacc<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>reg</VAR><CODE>, sw2<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>x</VAR><CODE>)</CODE></DT>
<DD>Set the full 64-bit value of IACC0 to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>reg</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument is reserved for future expansion and must be 0.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>void __IACCsetl (iacc<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>reg</VAR><CODE>, sw1<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>x</VAR><CODE>)</CODE></DT>
<DD>Set IACC0H to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>reg</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 0 and IACC0L to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>reg</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 1. Other values of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>reg</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are rejected as invalid.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>void __data_prefetch0 (const void *</CODE><VAR>x</VAR><CODE>)</CODE></DT>
<DD>Use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dcpl</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction to load the contents of address<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>into the data cache.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>void __data_prefetch (const void *</CODE><VAR>x</VAR><CODE>)</CODE></DT>
<DD>Use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nldub</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction to load the contents of address<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>into the data cache. The instruction is issued in slot I1.</DD></DL>