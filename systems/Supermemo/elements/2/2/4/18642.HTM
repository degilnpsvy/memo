<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.57.27 SPU Built-in Functions</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">GCC provides extensions for the SPU processor as described in the Sony/Toshiba/IBM SPU Language Extensions Specification, which can be found at<A href="http://cell.scei.co.jp/">http://cell.scei.co.jp/</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.ibm.com/developerworks/power/cell/">http://www.ibm.com/developerworks/power/cell/</A>. GCC's implementation differs in several ways.</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>The optional extension of specifying vector constants in parentheses is not supported.</LI>
<LI>A vector initializer requires no cast if the vector constant is of the same type as the variable it is initializing.</LI>
<LI>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>signed</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unsigned</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is omitted, the signedness of the vector type is the default signedness of the base type. The default varies depending on the operating system, so a portable program should always specify the signedness.</LI>
<LI>By default, the keyword<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__vector</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is added. The macro<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vector</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is defined in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;spu_intrinsics.h&gt;</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and can be undefined.</LI>
<LI>GCC allows using a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>typedef</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>name as the type specifier for a vector type.</LI>
<LI>For C, overloaded functions are implemented with macros so the following does not work:<PRE style="FONT-SIZE: smaller" class=smallexample>            spu_add ((vector signed int){1, 2, 3, 4}, foo);
</PRE>
<P class=noindent>Since<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>spu_add</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a macro, the vector constant in the example is treated as four separate arguments. Wrap the entire argument in parentheses for this to work.</P></LI>
<LI>The extended version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_expect</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not supported.</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><EM>Note:</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>Only the interface described in the aforementioned specification is supported. Internally, GCC uses built-in functions to implement the required functionality, but these are not supported and are subject to change without notice.