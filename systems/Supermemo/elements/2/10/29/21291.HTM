linux_torvalds/linux$ make help<BR>Cleaning targets:<BR>&nbsp; clean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Remove most generated files but keep the config and<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; enough build support to build external modules<BR>&nbsp; <FONT class=extract>mrproper&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Remove all generated files + config + various backup files<BR></FONT>&nbsp; <FONT class=extract>distclean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - mrproper + remove editor backup and patch files</FONT> 
<P></P>
<P>Configuration targets:<BR><FONT class=extract>&nbsp; config&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Update current config utilising a line-oriented program<BR>&nbsp; nconfig&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Update current config utilising a ncurses menu based program<BR>&nbsp; menuconfig&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Update current config utilising a menu based program<BR>&nbsp; xconfig&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Update current config utilising a QT based front-end<BR>&nbsp; gconfig&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Update current config utilising a GTK based front-end<BR></FONT>&nbsp; <FONT class=extract>oldconfig&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Update current config utilising a provided .config as base<BR></FONT>&nbsp; <FONT class=extract>localmodconfig&nbsp; - Update current config disabling modules not loaded<BR></FONT>&nbsp; <FONT class=extract>localyesconfig&nbsp; - Update current config converting local mods to core<BR></FONT>&nbsp; silentoldconfig - Same as oldconfig, but quietly, additionally update deps<BR>&nbsp; defconfig&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - New config with default from ARCH supplied defconfig<BR>&nbsp; savedefconfig&nbsp;&nbsp; - Save current config as ./defconfig (minimal config)<BR><FONT class=extract>&nbsp; allnoconfig&nbsp;&nbsp;&nbsp;&nbsp; - New config where all options are answered with no<BR>&nbsp; allyesconfig&nbsp;&nbsp;&nbsp; - New config where all options are accepted with yes<BR>&nbsp; allmodconfig&nbsp;&nbsp;&nbsp; - New config selecting modules when possible<BR>&nbsp; alldefconfig&nbsp;&nbsp;&nbsp; - New config with all symbols set to default<BR>&nbsp; randconfig&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - New config with random answer to all options<BR></FONT>&nbsp; <FONT class=extract>listnewconfig&nbsp;&nbsp; - List new options<BR></FONT>&nbsp; olddefconfig&nbsp;&nbsp;&nbsp; - Same as silentoldconfig but sets new symbols to their default value<BR>&nbsp; <FONT class=extract>kvmconfig&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Enable additional options for guest kernel support<BR></FONT>&nbsp; <FONT class=extract>tinyconfig&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Configure the tiniest possible kernel</FONT></P>
<P>Other generic targets:<BR><FONT class=extract>&nbsp; all&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Build all targets marked with [*]<BR>* vmlinux&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Build the bare kernel<BR>* modules&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Build all modules<BR></FONT><FONT class=extract>&nbsp; modules_install - Install all modules to INSTALL_MOD_PATH (default: /)<BR>&nbsp; firmware_install- Install all firmware to INSTALL_FW_PATH<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (default: $(INSTALL_MOD_PATH)/lib/firmware)<BR></FONT><FONT class=extract>&nbsp; dir/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Build all files in dir and below<BR>&nbsp; dir/file.[oisS] - Build specified target only<BR>&nbsp; dir/file.lst&nbsp;&nbsp;&nbsp; - Build specified mixed source/assembly target only<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (requires a recent binutils and recent build (System.map))<BR>&nbsp; dir/file.ko&nbsp;&nbsp;&nbsp;&nbsp; - Build module including final link<BR></FONT>&nbsp; <FONT class=extract>modules_prepare - Set up for building external modules<BR></FONT><FONT class=extract>&nbsp; tags/TAGS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Generate tags file for editors<BR>&nbsp; cscope&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Generate cscope index<BR>&nbsp; gtags&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Generate GNU GLOBAL index<BR></FONT><FONT class=extract>&nbsp; kernelrelease&nbsp;&nbsp; - Output the release version string (use with make -s)<BR>&nbsp; kernelversion&nbsp;&nbsp; - Output the version stored in Makefile (use with make -s)<BR>&nbsp; image_name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Output the image name (use with make -s)<BR></FONT>&nbsp; <FONT class=extract>headers_install - Install sanitised kernel headers to INSTALL_HDR_PATH<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (default: ./usr)</FONT></P>
<P><FONT class=extract>Static analysers<BR>&nbsp; checkstack&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Generate a list of stack hogs<BR>&nbsp; namespacecheck&nbsp; - Name space analysis on compiled kernel<BR>&nbsp; versioncheck&nbsp;&nbsp;&nbsp; - Sanity check on version.h usage<BR>&nbsp; includecheck&nbsp;&nbsp;&nbsp; - Check for duplicate included header files<BR>&nbsp; export_report&nbsp;&nbsp; - List the usages of all exported symbols<BR>&nbsp; headers_check&nbsp;&nbsp; - Sanity check on exported headers<BR>&nbsp; headerdep&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Detect inclusion cycles in headers<BR>&nbsp; coccicheck&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Check with Coccinelle.</FONT></P>
<P><FONT class=extract>Kernel selftest<BR>&nbsp; kselftest&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Build and run kernel selftest (run as root)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Build, install, and boot kernel before<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; running kselftest on it</FONT></P>
<P><FONT class=extract>Kernel packaging:<BR>&nbsp; rpm-pkg&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Build both source and binary RPM kernel packages<BR>&nbsp; binrpm-pkg&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Build only the binary kernel package<BR>&nbsp; deb-pkg&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Build the kernel as a deb package<BR>&nbsp; tar-pkg&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Build the kernel as an uncompressed tarball<BR>&nbsp; targz-pkg&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Build the kernel as a gzip compressed tarball<BR>&nbsp; tarbz2-pkg&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Build the kernel as a bzip2 compressed tarball<BR>&nbsp; tarxz-pkg&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Build the kernel as a xz compressed tarball<BR>&nbsp; perf-tar-src-pkg&nbsp;&nbsp;&nbsp; - Build perf-4.0.0-rc6.tar source tarball<BR>&nbsp; perf-targz-src-pkg&nbsp; - Build perf-4.0.0-rc6.tar.gz source tarball<BR>&nbsp; perf-tarbz2-src-pkg - Build perf-4.0.0-rc6.tar.bz2 source tarball<BR>&nbsp; perf-tarxz-src-pkg&nbsp; - Build perf-4.0.0-rc6.tar.xz source tarball</FONT></P>
<P><FONT class=extract>Documentation targets:<BR>&nbsp;Linux kernel internal documentation in different formats:<BR>&nbsp; htmldocs&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - HTML<BR>&nbsp; pdfdocs&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - PDF<BR>&nbsp; psdocs&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Postscript<BR>&nbsp; xmldocs&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - XML DocBook<BR>&nbsp; mandocs&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - man pages<BR>&nbsp; installmandocs&nbsp; - install man pages generated by mandocs<BR>&nbsp; cleandocs&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - clean all generated DocBook files</FONT></P>
<P><FONT class=extract>Architecture specific targets (x86):<BR>* bzImage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Compressed kernel image (arch/x86/boot/bzImage)<BR>&nbsp; install&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Install kernel using<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (your) ~/bin/installkernel or<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (distribution) /sbin/installkernel or<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; install to $(INSTALL_PATH) and run lilo<BR>&nbsp; fdimage&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Create 1.4MB boot floppy image (arch/x86/boot/fdimage)<BR>&nbsp; fdimage144&nbsp;&nbsp; - Create 1.4MB boot floppy image (arch/x86/boot/fdimage)<BR>&nbsp; fdimage288&nbsp;&nbsp; - Create 2.8MB boot floppy image (arch/x86/boot/fdimage)<BR>&nbsp; isoimage&nbsp;&nbsp;&nbsp;&nbsp; - Create a boot CD-ROM image (arch/x86/boot/image.iso)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bzdisk/fdimage*/isoimage also accept:<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FDARGS="..."&nbsp; arguments for the booted kernel<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; FDINITRD=file initrd for the booted kernel</FONT></P>
<P><FONT class=extract>&nbsp; i386_defconfig&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Build for i386<BR>&nbsp; x86_64_defconfig&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Build for x86_64</FONT></P>
<P><FONT class=extract>&nbsp; make V=0|1 [targets] 0 =&gt; quiet build (default), 1 =&gt; verbose build<BR>&nbsp; make V=2&nbsp;&nbsp; [targets] 2 =&gt; give reason for rebuild of target<BR>&nbsp; make O=dir [targets] Locate all output files in "dir", including .config<BR>&nbsp; make C=1&nbsp;&nbsp; [targets] Check all c source with $CHECK (sparse by default)<BR>&nbsp; make C=2&nbsp;&nbsp; [targets] Force check of all c source with $CHECK<BR>&nbsp; make RECORDMCOUNT_WARN=1 [targets] Warn about ignored mcount sections<BR>&nbsp; make W=n&nbsp;&nbsp; [targets] Enable extra gcc checks, n=1,2,3 where<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 1: warnings which may be relevant and do not occur too often<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 2: warnings which occur quite often but may still be relevant<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 3: more obscure warnings, can most likely be ignored<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Multiple levels can be combined with W=12 or W=123</FONT></P>
<P>Execute "make" or "make all" to build all targets marked with [*]<BR>For further info see the ./README file