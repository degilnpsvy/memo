--- 4.3 Several Subdirectories 
<P></P>
<P>&nbsp;kbuild can handle files that are spread over several directories.<BR>&nbsp;Consider the following example:</P>
<P>&nbsp;.<BR>&nbsp;|__ src<BR>&nbsp;|&nbsp;&nbsp; |__ complex_main.c<BR>&nbsp;|&nbsp;&nbsp; |__ hal<BR>&nbsp;|&nbsp;|__ hardwareif.c<BR>&nbsp;|&nbsp;|__ include<BR>&nbsp;|&nbsp;&nbsp;&nbsp;&nbsp; |__ hardwareif.h<BR>&nbsp;|__ include<BR>&nbsp;&nbsp;&nbsp;&nbsp; |__ complex.h</P>
<P>&nbsp;To build the module complex.ko, we then need the following<BR>&nbsp;kbuild file:</P>
<P>&nbsp;&nbsp;--&gt; filename: Kbuild<BR>&nbsp;&nbsp;obj-m := complex.o<BR>&nbsp;&nbsp;complex-y := src/complex_main.o<BR>&nbsp;&nbsp;complex-y += src/hal/hardwareif.o</P>
<P>&nbsp;&nbsp;ccflags-y := -I$(src)/include<BR>&nbsp;&nbsp;ccflags-y += -I$(src)/src/hal/include</P>
<P>&nbsp;As you can see, kbuild knows how to handle object files located<BR>&nbsp;in other directories. The trick is to specify the directory<BR>&nbsp;relative to the kbuild file's location. That being said, this<BR>&nbsp;is NOT recommended practice.</P>
<P>&nbsp;For the header files, kbuild must be explicitly told where to<BR>&nbsp;look. When kbuild executes, the current directory is<FONT class=clozed> always the<BR>&nbsp;root of the kernel tree (the argument to "-C"</FONT>) and therefore an<BR>&nbsp;absolute path is needed. $(src) provides the absolute path by<BR>&nbsp;pointing to the directory where <SPAN class=cloze>[...]</SPAN>.