--- 3.11 $(CC) support functions
<P></P>
<P>&nbsp;The kernel may be built with several different versions of<BR>&nbsp;$(CC), each supporting a unique set of features and options.<BR>&nbsp;kbuild provide basic support to check for valid options for $(CC).<BR>&nbsp;$(CC) is usually the gcc compiler, but other alternatives are<BR>&nbsp;available.</P>
<P>&nbsp;&nbsp;&nbsp; as-option<BR>&nbsp;as-option is used to check if $(CC) -- when used to compile<BR>&nbsp;assembler (*.S) files -- supports the given option. An optional<BR>&nbsp;second option may be specified if the first option is not supported.</P>
<P>&nbsp;Example:<BR>&nbsp;&nbsp;#arch/sh/Makefile<BR>&nbsp;&nbsp;cflags-y += $(call as-option,-Wa$(comma)-isa=$(isa-y),)</P>
<P>&nbsp;In the above example, cflags-y will be assigned the option<BR>&nbsp;-Wa$(comma)-isa=$(isa-y) if it is supported by $(CC).<BR>&nbsp;The second argument is optional, and if supplied will be used<BR>&nbsp;if first argument is not supported.</P>
<P>&nbsp;&nbsp;&nbsp; cc-ldoption<BR>&nbsp;cc-ldoption is used to check if $(CC) when used to link object files<BR>&nbsp;supports the given option.&nbsp; An optional second option may be<BR>&nbsp;specified if first option are not supported.</P>
<P>&nbsp;Example:<BR>&nbsp;&nbsp;#arch/x86/kernel/Makefile<BR>&nbsp;&nbsp;vsyscall-flags += $(call cc-ldoption, -Wl$(comma)--hash-style=sysv)</P>
<P>&nbsp;In the above example, vsyscall-flags will be assigned the option<BR>&nbsp;-Wl$(comma)--hash-style=sysv if it is supported by $(CC).<BR>&nbsp;The second argument is optional, and if supplied will be used<BR>&nbsp;if first argument is not supported.</P>
<P>&nbsp;&nbsp;&nbsp; as-instr<BR>&nbsp;as-instr checks if the assembler reports a specific instruction<BR>&nbsp;and then outputs either option1 or option2<BR>&nbsp;C escapes are supported in the test instruction<BR>&nbsp;Note: as-instr-option uses KBUILD_AFLAGS for $(AS) options</P>
<P>&nbsp;&nbsp;&nbsp; cc-option<BR>&nbsp;cc-option is used to check if $(CC) supports a given option, and not<BR>&nbsp;supported to use an optional second option.</P>
<P>&nbsp;Example:<BR>&nbsp;&nbsp;#arch/x86/Makefile<BR>&nbsp;&nbsp;cflags-y += $(call cc-option,-march=pentium-mmx,-march=i586)</P>
<P>&nbsp;In the above example, cflags-y will be assigned the option<BR>&nbsp;-march=pentium-mmx if supported by $(CC), otherwise -march=i586.<BR>&nbsp;The second argument to cc-option is optional, and if omitted,<BR>&nbsp;cflags-y will be assigned no value if first option is not supported.<BR>&nbsp;Note: cc-option uses KBUILD_CFLAGS for $(CC) options</P>
<P>&nbsp;&nbsp; cc-option-yn<BR>&nbsp;cc-option-yn is used to check if gcc supports a given option<BR>&nbsp;and return 'y' if supported, otherwise 'n'.</P>
<P>&nbsp;Example:<BR>&nbsp;&nbsp;#arch/ppc/Makefile<BR>&nbsp;&nbsp;biarch := $(call cc-option-yn, -m32)<BR>&nbsp;&nbsp;aflags-$(biarch) += -a32<BR>&nbsp;&nbsp;cflags-$(biarch) += -m32</P>
<P>&nbsp;In the above example, $(biarch) is set to y if $(CC) supports the -m32<BR>&nbsp;option. When $(biarch) equals 'y', the expanded variables $(aflags-y)<BR>&nbsp;and $(cflags-y) will be assigned the values -a32 and -m32,<BR>&nbsp;respectively.<BR>&nbsp;Note: cc-option-yn uses KBUILD_CFLAGS for $(CC) options</P>
<P>&nbsp;&nbsp;&nbsp; cc-option-align<BR>&nbsp;gcc versions &gt;= 3.0 changed the type of options used to specify<BR>&nbsp;alignment of functions, loops etc. $(cc-option-align), when used<BR>&nbsp;as prefix to the align options, will select the right prefix:<BR>&nbsp;gcc &lt; 3.00<BR>&nbsp;&nbsp;cc-option-align = -malign<BR>&nbsp;gcc &gt;= 3.00<BR>&nbsp;&nbsp;cc-option-align = -falign</P>
<P>&nbsp;Example:<BR>&nbsp;&nbsp;KBUILD_CFLAGS += $(cc-option-align)-functions=4</P>
<P>&nbsp;In the above example, the option -falign-functions=4 is used for<BR>&nbsp;gcc &gt;= 3.00. For gcc &lt; 3.00, -malign-functions=4 is used.<BR>&nbsp;Note: cc-option-align uses KBUILD_CFLAGS for $(CC) options</P>
<P>&nbsp;&nbsp;&nbsp; cc-disable-warning<BR>&nbsp;cc-disable-warning checks if gcc supports a given warning and returns<BR>&nbsp;the commandline switch to disable it. This special function is needed,<BR>&nbsp;because gcc 4.4 and later accept any unknown -Wno-* option and only<BR>&nbsp;warn about it if there is another warning in the source file.</P>
<P>&nbsp;Example:<BR>&nbsp;&nbsp;KBUILD_CFLAGS += $(call cc-disable-warning, unused-but-set-variable)</P>
<P>&nbsp;In the above example, -Wno-unused-but-set-variable will be added to<BR>&nbsp;KBUILD_CFLAGS only if gcc really accepts it.</P>
<P>&nbsp;&nbsp;&nbsp; cc-version<BR>&nbsp;cc-version returns a numerical version of the $(CC) compiler version.<BR>&nbsp;The format is &lt;major&gt;&lt;minor&gt; where both are two digits. So for example<BR>&nbsp;gcc 3.41 would return 0341.<BR>&nbsp;cc-version is useful when a specific $(CC) version is faulty in one<BR>&nbsp;area, for example -mregparm=3 was broken in some gcc versions<BR>&nbsp;even though the option was accepted by gcc.</P>
<P>&nbsp;Example:<BR>&nbsp;&nbsp;#arch/x86/Makefile<BR>&nbsp;&nbsp;cflags-y += $(shell \<BR>&nbsp;&nbsp;if [ $(call cc-version) -ge 0300 ] ; then \<BR>&nbsp;&nbsp;&nbsp;echo "-mregparm=3"; fi ;)</P>
<P>&nbsp;In the above example, -mregparm=3 is only used for gcc version greater<BR>&nbsp;than or equal to gcc 3.0.</P>
<P>&nbsp;&nbsp;&nbsp; cc-ifversion<BR>&nbsp;cc-ifversion tests the version of $(CC) and equals last argument if<BR>&nbsp;version expression is true.</P>
<P>&nbsp;Example:<BR>&nbsp;&nbsp;#fs/reiserfs/Makefile<BR>&nbsp;&nbsp;ccflags-y := $(call cc-ifversion, -lt, 0402, -O1)</P>
<P>&nbsp;In this example, ccflags-y will be assigned the value -O1 if the<BR>&nbsp;$(CC) version is less than 4.2.<BR>&nbsp;cc-ifversion takes all the shell operators:<BR>&nbsp;-eq, -ne, -lt, -le, -gt, and -ge<BR>&nbsp;The third parameter may be a text as in this example, but it may also<BR>&nbsp;be an expanded variable or a macro.</P>
<P>&nbsp;&nbsp;&nbsp; cc-fullversion<BR>&nbsp;cc-fullversion is useful when the exact version of gcc is needed.<BR>&nbsp;One typical use-case is when a specific GCC version is broken.<BR>&nbsp;cc-fullversion points out a more specific version than cc-version does.</P>
<P>&nbsp;Example:<BR>&nbsp;&nbsp;#arch/powerpc/Makefile<BR>&nbsp;&nbsp;$(Q)if test "$(call cc-fullversion)" = "040200" ; then \<BR>&nbsp;&nbsp;&nbsp;echo -n '*** GCC-4.2.0 cannot compile the 64-bit powerpc ' ; \<BR>&nbsp;&nbsp;&nbsp;false ; \<BR>&nbsp;&nbsp;fi</P>
<P>&nbsp;In this example for a specific GCC version the build will error out explaining<BR>&nbsp;to the user why it stops.</P>
<P>&nbsp;&nbsp;&nbsp; cc-cross-prefix<BR>&nbsp;cc-cross-prefix is used to check if there exists a $(CC) in path with<BR>&nbsp;one of the listed prefixes. The first prefix where there exist a<BR>&nbsp;prefix$(CC) in the PATH is returned - and if no prefix$(CC) is found<BR>&nbsp;then nothing is returned.<BR>&nbsp;Additional prefixes are separated by a single space in the<BR>&nbsp;call of cc-cross-prefix.<BR>&nbsp;This functionality is useful for architecture Makefiles that try<BR>&nbsp;to set CROSS_COMPILE to well-known values but may have several<BR>&nbsp;values to select between.<BR>&nbsp;It is recommended only to try to set CROSS_COMPILE if it is a cross<BR>&nbsp;build (host arch is different from target arch). And if CROSS_COMPILE<BR>&nbsp;is already set then leave it with the old value.</P>
<P>&nbsp;Example:<BR>&nbsp;&nbsp;#arch/m68k/Makefile<BR>&nbsp;&nbsp;ifneq ($(SUBARCH),$(ARCH))<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ifeq ($(CROSS_COMPILE),)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CROSS_COMPILE := $(call cc-cross-prefix, m68k-linux-gnu-)<BR>&nbsp;&nbsp;&nbsp;endif<BR>&nbsp;&nbsp;endif