Environment variables
<P></P>
<P>KCPPFLAGS<BR>--------------------------------------------------<BR>Additional options to pass when preprocessing. The preprocessing options<BR>will be used in all cases where kbuild does preprocessing including<BR>building C files and assembler files.</P>
<P>KAFLAGS<BR>--------------------------------------------------<BR>Additional options to the assembler (for built-in and modules).</P>
<P>AFLAGS_MODULE<BR>--------------------------------------------------<BR>Additional module specific options to use for $(AS).</P>
<P>AFLAGS_KERNEL<BR>--------------------------------------------------<BR>Additional options for $(AS) when used for assembler<BR>code for code that is compiled as built-in.</P>
<P>KCFLAGS<BR>--------------------------------------------------<BR>Additional options to the C compiler (for built-in and modules).</P>
<P>CFLAGS_KERNEL<BR>--------------------------------------------------<BR>Additional options for $(CC) when used to compile<BR>code that is compiled as built-in.</P>
<P>CFLAGS_MODULE<BR>--------------------------------------------------<BR>Additional module specific options to use for $(CC).</P>
<P>LDFLAGS_MODULE<BR>--------------------------------------------------<BR>Additional options used for $(LD) when linking modules.</P>
<P>LDFLAGS_vmlinux<BR>--------------------------------------------------<BR>Additional options passed to final link of vmlinux.</P>
<P>KBUILD_VERBOSE<BR>--------------------------------------------------<BR>Set the kbuild verbosity. Can be assigned same values as "V=...".<BR>See make help for the full list.<BR>Setting "V=..." takes precedence over KBUILD_VERBOSE.</P>
<P>KBUILD_EXTMOD<BR>--------------------------------------------------<BR>Set the directory to look for the kernel source when building external<BR>modules.<BR>The directory can be specified in several ways:<BR>1) Use "M=..." on the command line<BR>2) Environment variable KBUILD_EXTMOD<BR>3) Environment variable SUBDIRS<BR>The possibilities are listed in the order they take precedence.<BR>Using "M=..." will always override the others.</P>
<P>KBUILD_OUTPUT<BR>--------------------------------------------------<BR>Specify the output directory when building the kernel.<BR>The output directory can also be specified using "O=...".<BR>Setting "O=..." takes precedence over KBUILD_OUTPUT.</P>
<P>KBUILD_DEBARCH<BR>--------------------------------------------------<BR>For the deb-pkg target, allows overriding the normal heuristics deployed by<BR>deb-pkg. Normally deb-pkg attempts to guess the right architecture based on<BR>the UTS_MACHINE variable, and on some architectures also the kernel config.<BR>The value of KBUILD_DEBARCH is assumed (not checked) to be a valid Debian<BR>architecture.</P>
<P>ARCH<BR>--------------------------------------------------<BR>Set ARCH to the architecture to be built.<BR>In most cases the name of the architecture is the same as the<BR>directory name found in the arch/ directory.<BR>But some architectures such as x86 and sparc have aliases.<BR>x86: i386 for 32 bit, x86_64 for 64 bit<BR>sparc: sparc for 32 bit, sparc64 for 64 bit</P>
<P>CROSS_COMPILE<BR>--------------------------------------------------<BR>Specify an optional fixed part of the binutils filename.<BR>CROSS_COMPILE can be a part of the filename or the full path.</P>
<P>CROSS_COMPILE is also used for ccache in some setups.</P>
<P>CF<BR>--------------------------------------------------<BR>Additional options for sparse.<BR>CF is often used on the command-line like this:</P>
<P>&nbsp;&nbsp;&nbsp; make CF=-Wbitwise C=2</P>
<P>INSTALL_PATH<BR>--------------------------------------------------<BR>INSTALL_PATH specifies where to place the updated kernel and system map<BR>images. Default is /boot, but you can set it to other values.</P>
<P>INSTALLKERNEL<BR>--------------------------------------------------<BR>Install script called when using "make install".<BR>The default name is "installkernel".</P>
<P>The script will be called with the following arguments:<BR>&nbsp;&nbsp;&nbsp; $1 - kernel version<BR>&nbsp;&nbsp;&nbsp; $2 - kernel image file<BR>&nbsp;&nbsp;&nbsp; $3 - kernel map file<BR>&nbsp;&nbsp;&nbsp; $4 - default install path (use root directory if blank)</P>
<P>The implementation of "make install" is architecture specific<BR>and it may differ from the above.</P>
<P>INSTALLKERNEL is provided to enable the possibility to<BR>specify a custom installer when cross compiling a kernel.</P>
<P>MODLIB<BR>--------------------------------------------------<BR>Specify where to install modules.<BR>The default value is:</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp; $(INSTALL_MOD_PATH)/lib/modules/$(KERNELRELEASE)</P>
<P>The value can be overridden in which case the default value is ignored.</P>
<P>INSTALL_MOD_PATH<BR>--------------------------------------------------<BR>INSTALL_MOD_PATH specifies a prefix to MODLIB for module directory<BR>relocations required by build roots.&nbsp; This is not defined in the<BR>makefile but the argument can be passed to make if needed.</P>
<P>INSTALL_MOD_STRIP<BR>--------------------------------------------------<BR>INSTALL_MOD_STRIP, if defined, will cause modules to be<BR>stripped after they are installed.&nbsp; If INSTALL_MOD_STRIP is '1', then<BR>the default option --strip-debug will be used.&nbsp; Otherwise,<BR>INSTALL_MOD_STRIP value will be used as the options to the strip command.</P>
<P>INSTALL_FW_PATH<BR>--------------------------------------------------<BR>INSTALL_FW_PATH specifies where to install the firmware blobs.<BR>The default value is:</P>
<P>&nbsp;&nbsp;&nbsp; $(INSTALL_MOD_PATH)/lib/firmware</P>
<P>The value can be overridden in which case the default value is ignored.</P>
<P>INSTALL_HDR_PATH<BR>--------------------------------------------------<BR>INSTALL_HDR_PATH specifies where to install user space headers when<BR>executing "make headers_*".<BR>The default value is:</P>
<P>&nbsp;&nbsp;&nbsp; $(objtree)/usr</P>
<P>$(objtree) is the directory where output files are saved.<BR>The output directory is often set using "O=..." on the commandline.</P>
<P>The value can be overridden in which case the default value is ignored.</P>
<P>KBUILD_MODPOST_WARN<BR>--------------------------------------------------<BR>KBUILD_MODPOST_WARN can be set to avoid errors in case of undefined<BR>symbols in the final module linking stage. It changes such errors<BR>into warnings.</P>
<P>KBUILD_MODPOST_NOFINAL<BR>--------------------------------------------------<BR>KBUILD_MODPOST_NOFINAL can be set to skip the final link of modules.<BR>This is solely useful to speed up test compiles.</P>
<P>KBUILD_EXTRA_SYMBOLS<BR>--------------------------------------------------<BR>For modules that use symbols from other modules.<BR>See more details in modules.txt.</P>
<P>ALLSOURCE_ARCHS<BR>--------------------------------------------------<BR>For tags/TAGS/cscope targets, you can specify more than one arch<BR>to be included in the databases, separated by blank space. E.g.:</P>
<P>&nbsp;&nbsp;&nbsp; $ make ALLSOURCE_ARCHS="x86 mips arm" tags</P>
<P>To get all available archs you can also specify all. E.g.:</P>
<P>&nbsp;&nbsp;&nbsp; $ make ALLSOURCE_ARCHS=all tags</P>
<P>KBUILD_ENABLE_EXTRA_GCC_CHECKS<BR>--------------------------------------------------<BR>If enabled over the make command line with "W=1", it turns on additional<BR>gcc -W... options for more extensive build-time checking.</P>
<P>KBUILD_BUILD_TIMESTAMP<BR>--------------------------------------------------<BR>Setting this to a date string overrides the timestamp used in the<BR>UTS_VERSION definition (uname -v in the running kernel). The value has to<BR>be a string that can be passed to date -d. The default value<BR>is the output of the date command at one point during build.</P>
<P>KBUILD_BUILD_USER, KBUILD_BUILD_HOST<BR>--------------------------------------------------<BR>These two variables allow to override the <A href="mailto:user@host">user@host</A> string displayed during<BR>boot and in /proc/version. The default value is the output of the commands<BR>whoami and host, respectively.</P>
<P>KBUILD_LDS<BR>--------------------------------------------------<BR>The linker script with full path. Assigned by the top-level Makefile.</P>
<P>KBUILD_VMLINUX_INIT<BR>--------------------------------------------------<BR>All object files for the init (first) part of vmlinux.<BR>Files specified with KBUILD_VMLINUX_INIT are linked first.</P>
<P>KBUILD_VMLINUX_MAIN<BR>--------------------------------------------------<BR>All object files for the main part of vmlinux.<BR>KBUILD_VMLINUX_INIT and KBUILD_VMLINUX_MAIN together specify<BR>all the object files used to link vmlinux.