<H2>linux kernel&#30340;&#20013;&#26029;&#23376;&#31995;&#32479;&#20043;&#65288;&#19971;&#65289;&#65306;GIC&#20195;&#30721;&#20998;&#26512;</H2>
<P class=date>&#20316;&#32773;&#65306;<A href="http://www.wowotech.net/author/3">linuxer</A> &#21457;&#24067;&#20110;&#65306;2014-9-4 16:59 &#20998;&#31867;&#65306;<A href="http://www.wowotech.net/sort/irq_subsystem">&#20013;&#26029;&#23376;&#31995;&#32479;</A> </P>
<P>&#19968;&#12289;&#21069;&#35328; </P>
<P>GIC&#65288;Generic Interrupt Controller&#65289;&#26159;ARM&#20844;&#21496;&#25552;&#20379;&#30340;&#19968;&#20010;&#36890;&#29992;&#30340;&#20013;&#26029;&#25511;&#21046;&#22120;&#65292;&#20854;architecture specification&#30446;&#21069;&#26377;&#22235;&#20010;&#29256;&#26412;&#65292;V1&#65374;V4(V2&#26368;&#22810;&#25903;&#25345;8&#20010;ARM core&#65292;V3/V4&#25903;&#25345;&#26356;&#22810;&#30340;ARM core&#65292;&#20027;&#35201;&#29992;&#20110;ARM64&#26381;&#21153;&#22120;&#31995;&#32479;&#32467;&#26500;&#65289;&#12290;&#30446;&#21069;&#22312;ARM&#23448;&#26041;&#32593;&#31449;&#21482;&#33021;&#19979;&#36733;&#21040;Version 2&#30340;GIC architecture specification&#65292;&#22240;&#27492;&#65292;&#26412;&#25991;&#20027;&#35201;&#25551;&#36848;&#31526;&#21512;V2&#35268;&#33539;&#30340;GIC&#30828;&#20214;&#21450;&#20854;&#39537;&#21160;&#12290; </P>
<P>&#20855;&#20307;GIC&#30828;&#20214;&#30340;&#23454;&#29616;&#24418;&#24577;&#26377;&#20004;&#31181;&#65292;&#19968;&#31181;&#26159;&#22312;ARM vensor&#30740;&#21457;&#33258;&#24049;&#30340;SOC&#30340;&#26102;&#20505;&#65292;&#20250;&#21521;ARM&#20844;&#21496;&#36141;&#20080;GIC&#30340;IP&#65292;&#36825;&#20123;IP&#21253;&#25324;&#30340;&#22411;&#21495;&#26377;&#65306;PL390&#65292;GIC-400&#65292;GIC-500&#12290;&#20854;&#20013;GIC-500&#26368;&#22810;&#25903;&#25345;128&#20010; cpu core&#65292;&#23427;&#35201;&#27714;ARM core&#24517;&#39035;&#26159;ARMV8&#25351;&#20196;&#38598;&#30340;&#65288;&#20363;&#22914;Cortex-A57&#65289;&#65292;&#31526;&#21512;GIC architecture specification version 3&#12290;&#21478;&#22806;&#19968;&#31181;&#24418;&#24577;&#26159;ARM vensor&#30452;&#25509;&#36141;&#20080;ARM&#20844;&#21496;&#30340;Cortex A9&#25110;&#32773;A15&#30340;IP&#65292;Cortex A9&#25110;&#32773;A15&#20013;&#20250;&#21253;&#25324;&#20102;GIC&#30340;&#23454;&#29616;&#65292;&#24403;&#28982;&#65292;&#36825;&#20123;&#23454;&#29616;&#20063;&#26159;&#31526;&#21512;GIC V2&#30340;&#35268;&#26684;&#12290; </P>
<P>&#26412;&#25991;&#22312;&#36827;&#34892;&#30828;&#20214;&#25551;&#36848;&#30340;&#26102;&#20505;&#20027;&#35201;&#26159;&#20197;GIC-400&#20026;&#30446;&#26631;&#65292;&#24403;&#28982;&#65292;&#20063;&#20250;&#39034;&#20415;&#25552;&#21450;&#19968;&#20123;Cortex A9&#25110;&#32773;A15&#19978;&#30340;GIC&#23454;&#29616;&#12290; </P>
<P>&#26412;&#25991;&#20027;&#35201;&#20998;&#26512;&#20102;linux kernel&#20013;GIC&#20013;&#26029;&#25511;&#21046;&#22120;&#30340;&#39537;&#21160;&#20195;&#30721;&#65288;&#20301;&#20110;drivers/irqchip/irq-gic.c&#21644;irq-gic-common.c&#65289;&#12290; irq-gic-common.c&#20013;&#26159;GIC V2&#21644;V3&#30340;&#36890;&#29992;&#20195;&#30721;&#65292;&#32780;irq-gic.c&#26159;V2 specific&#30340;&#20195;&#30721;&#65292;irq-gic-v3.c&#26159;V3 specific&#30340;&#20195;&#30721;&#65292;&#19981;&#22312;&#26412;&#25991;&#30340;&#25551;&#36848;&#33539;&#22260;&#12290;&#26412;&#25991;&#20027;&#35201;&#20998;&#25104;&#19977;&#20010;&#37096;&#20998;&#65306;&#31532;&#20108;&#31456;&#25551;&#36848;&#20102;GIC V2&#30340;&#30828;&#20214;&#65307;&#31532;&#19977;&#31456;&#25551;&#36848;&#20102;GIC V2&#30340;&#21021;&#22987;&#21270;&#36807;&#31243;&#65307;&#31532;&#22235;&#31456;&#25551;&#36848;&#20102;&#24213;&#23618;&#30340;&#30828;&#20214;call back&#20989;&#25968;&#12290; </P>
<P>&#27880;&#65306;&#20855;&#20307;&#30340;linux kernel&#30340;&#29256;&#26412;&#26159;linux-3.17-rc3&#12290; </P>
<P>&nbsp; </P>
<P>&#20108;&#12289;GIC-V2&#30340;&#30828;&#20214;&#25551;&#36848; </P>
<P>1&#12289;GIC-V2&#30340;&#36755;&#20837;&#21644;&#36755;&#20986;&#20449;&#21495; </P>
<P>&#65288;1&#65289;GIC-V2&#30340;&#36755;&#20837;&#21644;&#36755;&#20986;&#20449;&#21495;&#31034;&#24847;&#22270; </P>
<P>&#35201;&#24819;&#29702;&#35299;&#19968;&#20010;building block&#65288;&#26080;&#35770;&#36719;&#20214;&#36824;&#26159;&#30828;&#20214;&#65289;&#65292;&#25105;&#20204;&#37117;&#21487;&#20197;&#20808;&#25226;&#23427;&#24403;&#25104;&#40657;&#30418;&#23376;&#65292;&#21482;&#26159;&#30740;&#31350;&#20854;input&#65292;output&#12290;GIC-V2&#30340;&#36755;&#20837;&#21644;&#36755;&#20986;&#20449;&#21495;&#30340;&#31034;&#24847;&#22270;&#22914;&#19979;&#65288;&#27880;&#65306;&#25105;&#20204;&#20197;GIC-400&#20026;&#20363;&#65292;&#21516;&#26102;&#30465;&#30053;&#20102;clock&#65292;config&#31561;&#20449;&#21495;&#65289;&#65306; </P>
<P><A href="http://www.wowotech.net/content/uploadfile/201409/645b571aed74ae33aca449e3b57420b820140904115848.gif"><IMG title=gic-400 style="BORDER-LEFT-WIDTH: 0px; BORDER-RIGHT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; DISPLAY: inline; BORDER-TOP-WIDTH: 0px" border=0 alt=gic-400 src="http://www.wowotech.net/content/uploadfile/201409/27eba98d637e10c5f8d6e0b4aebd5c4820140904115850.gif" width=688 height=443></A>&nbsp; </P>
<P>&#65288;2&#65289;&#36755;&#20837;&#20449;&#21495; </P>
<P>&#19978;&#22270;&#20013;&#24038;&#36793;&#23601;&#26159;&#26469;&#33258;&#22806;&#35774;&#30340;interrupt source&#36755;&#20837;&#20449;&#21495;&#12290;&#20998;&#25104;&#20004;&#31181;&#31867;&#22411;&#65292;&#20998;&#21035;&#26159;PPI&#65288;Private Peripheral Interrupt&#65289;&#21644;SPI&#65288;Shared Peripheral Interrupt&#65289;&#12290;&#20854;&#23454;&#20174;&#21517;&#23383;&#23601;&#21487;&#20197;&#30475;&#20986;&#26469;&#20004;&#31181;&#31867;&#22411;&#20013;&#26029;&#20449;&#21495;&#30340;&#29305;&#28857;&#65292;PPI&#20013;&#26029;&#20449;&#21495;&#26159;CPU&#31169;&#26377;&#30340;&#65292;&#27599;&#20010;CPU&#37117;&#26377;&#20854;&#29305;&#23450;&#30340;PPI&#20449;&#21495;&#32447;&#12290;&#32780;SPI&#26159;&#25152;&#26377;CPU&#20043;&#38388;&#20849;&#20139;&#30340;&#12290;&#36890;&#36807;&#23492;&#23384;&#22120;GICD_TYPER&#21487;&#20197;&#37197;&#32622;SPI&#30340;&#20010;&#25968;&#65288;&#26368;&#22810;480&#20010;&#65289;&#12290;GIC-400&#25903;&#25345;&#22810;&#23569;&#20010;SPI&#20013;&#26029;&#65292;&#20854;&#36755;&#20837;&#20449;&#21495;&#32447;&#23601;&#26377;&#22810;&#23569;&#20010;SPI interrupt request signal&#12290;&#21516;&#26679;&#30340;&#65292;&#36890;&#36807;&#23492;&#23384;&#22120;GICD_TYPER&#20063;&#21487;&#20197;&#37197;&#32622;CPU interface&#30340;&#20010;&#25968;&#65288;&#26368;&#22810;8&#20010;&#65289;&#65292;GIC-400&#25903;&#25345;&#22810;&#23569;&#20010;CPU interface&#65292;&#20854;&#36755;&#20837;&#20449;&#21495;&#32447;&#23601;&#25552;&#20379;&#22810;&#23569;&#32452;PPI&#20013;&#26029;&#20449;&#21495;&#32447;&#12290;&#19968;&#32452;PPI&#20013;&#26029;&#20449;&#21495;&#32447;&#21253;&#25324;6&#20010;&#23454;&#38469;&#30340;signal&#65306; </P>
<P>&#65288;a&#65289;nLEGACYIRQ&#20449;&#21495;&#32447;&#12290;&#23545;&#24212;interrupt ID 31&#65292;&#22312;bypass mode&#19979;&#65288;&#36825;&#37324;&#30340;bypass&#26159;&#25351;bypass GIC functionality&#65292;&#30452;&#25509;&#36830;&#25509;&#21040;&#26576;&#20010;processor&#19978;&#65289;&#65292;nLEGACYIRQ&#21487;&#20197;&#30452;&#25509;&#36830;&#21040;&#23545;&#24212;CPU&#30340;nIRQCPU&#20449;&#21495;&#32447;&#19978;&#12290;&#22312;&#36825;&#26679;&#30340;&#35774;&#32622;&#19979;&#65292;&#35813;CPU&#19981;&#21442;&#19982;&#20854;&#20182;&#23646;&#20110;&#35813;CPU&#30340;PPI&#20197;&#21450;SPI&#20013;&#26029;&#30340;&#21709;&#24212;&#65292;&#32780;&#26159;&#29305;&#21035;&#20026;&#36825;&#19968;&#26681;&#20013;&#26029;&#32447;&#26381;&#21153;&#12290; </P>
<P>&#65288;b&#65289;nCNTPNSIRQ&#20449;&#21495;&#32447;&#12290;&#26469;&#33258;Non-secure physical timer&#30340;&#20013;&#26029;&#20107;&#20214;&#65292;&#23545;&#24212;interrupt ID 30&#12290; </P>
<P>&#65288;c&#65289;nCNTPSIRQ&#20449;&#21495;&#32447;&#12290;&#26469;&#33258;secure physical timer&#30340;&#20013;&#26029;&#20107;&#20214;&#65292;&#23545;&#24212;interrupt ID 29&#12290; </P>
<P>&#65288;d&#65289;nLEGACYFIQ&#20449;&#21495;&#32447;&#12290;&#23545;&#24212;interrupt ID 28&#12290;&#27010;&#24565;&#21516;nLEGACYIRQ&#20449;&#21495;&#32447;&#65292;&#19981;&#20877;&#25551;&#36848;&#12290; </P>
<P>&#65288;e&#65289;nCNTVIRQ&#20449;&#21495;&#32447;&#12290;&#23545;&#24212;interrupt ID 27&#12290;Virtual Timer Event&#65292;&#21644;&#34394;&#25311;&#21270;&#30456;&#20851;&#65292;&#36825;&#37324;&#19981;&#19982;&#25551;&#36848;&#12290; </P>
<P>&#65288;f&#65289;nCNTHPIRQ&#20449;&#21495;&#32447;&#12290;&#23545;&#24212;interrupt ID 26&#12290;Hypervisor Timer Event&#65292;&#21644;&#34394;&#25311;&#21270;&#30456;&#20851;&#65292;&#36825;&#37324;&#19981;&#19982;&#25551;&#36848;&#12290; </P>
<P>&#23545;&#20110;Cortex A15&#30340;GIC&#23454;&#29616;&#65292;&#20854;PPI&#20013;&#26029;&#20449;&#21495;&#32447;&#38500;&#20102;&#19978;&#38754;&#30340;6&#20010;&#65292;&#36824;&#26377;&#19968;&#20010;&#21483;&#20570;Virtual Maintenance Interrupt&#65292;&#23545;&#24212;interrupt ID 25&#12290; </P>
<P>&#23545;&#20110;Cortex A9&#30340;GIC&#23454;&#29616;&#65292;&#20854;PPI&#20013;&#26029;&#20449;&#21495;&#32447;&#21253;&#25324;5&#26681;&#65306; </P>
<P>&#65288;a&#65289;nLEGACYIRQ&#20449;&#21495;&#32447;&#21644;nLEGACYFIQ&#20449;&#21495;&#32447;&#12290;&#23545;&#24212;interrupt ID 31&#21644;interrupt ID 28&#12290;&#36825;&#37096;&#20998;&#21644;&#19978;&#38754;&#19968;&#33268;&#12290; </P>
<P>&#65288;b&#65289;&#30001;&#20110;Cortext A9&#30340;&#27599;&#20010;&#22788;&#29702;&#22120;&#37117;&#26377;&#33258;&#24049;&#30340;Private timer&#21644;watch dog timer&#65292;&#36825;&#20004;&#20010;HW block&#20998;&#21035;&#20351;&#29992;&#20102;ID 29&#21644;ID 30 </P>
<P>&#65288;c&#65289;Cortext A9&#20869;&#23884;&#19968;&#20010;global timer&#20026;&#31995;&#32479;&#20869;&#30340;&#25152;&#26377;processor&#20849;&#20139;&#65292;&#23545;&#24212;interrupt ID 27 </P>
<P>&#20851;&#20110;private timer&#21644;global timer&#30340;&#25551;&#36848;&#65292;&#35831;&#21442;&#32771;&#26102;&#38388;&#23376;&#31995;&#32479;&#30340;&#30456;&#20851;&#25991;&#26723;&#12290; </P>
<P>&#20851;&#20110;&#19968;&#31995;&#21015;&#21644;&#34394;&#25311;&#21270;&#30456;&#20851;&#30340;&#20013;&#26029;&#65292;&#35831;&#21442;&#32771;&#34394;&#25311;&#21270;&#30340;&#31995;&#21015;&#25991;&#26723;&#12290; </P>
<P>&nbsp; </P>
<P>&#65288;3&#65289;&#36755;&#20986;&#20449;&#21495; </P>
<P>&#25152;&#35859;&#36755;&#20986;&#20449;&#21495;&#65292;&#20854;&#23454;&#23601;&#26159;GIC&#21644;&#21508;&#20010;CPU&#30452;&#25509;&#30340;&#25509;&#21475;&#65292;&#36825;&#20123;&#25509;&#21475;&#21253;&#25324;&#65306; </P>
<P>&#65288;a&#65289;&#35302;&#21457;CPU&#20013;&#26029;&#30340;&#20449;&#21495;&#12290;nIRQCPU&#21644;nFIQCPU&#20449;&#21495;&#32447;&#65292;&#29087;&#24713;ARM CPU&#30340;&#24037;&#31243;&#24072;&#23545;&#36825;&#20004;&#20010;&#20449;&#21495;&#32447;&#24212;&#35813;&#19981;&#38476;&#29983;&#65292;&#20027;&#35201;&#29992;&#26469;&#35302;&#21457;ARM cpu&#36827;&#20837;IRQ mode&#21644;FIQ mode&#12290; </P>
<P>&#65288;b&#65289;Wake up&#20449;&#21495;&#12290;nFIQOUT&#21644;nIRQOUT&#20449;&#21495;&#32447;&#65292;&#21435;ARM CPU&#30340;&#30005;&#28304;&#31649;&#29702;&#27169;&#22359;&#65292;&#29992;&#26469;&#21796;&#37266;CPU&#30340; </P>
<P>&#65288;c&#65289;AXI slave interface signals&#12290;AXI&#65288;Advanced eXtensible Interface&#65289;&#26159;&#19968;&#31181;&#24635;&#32447;&#21327;&#35758;&#65292;&#23646;&#20110;AMBA&#35268;&#33539;&#30340;&#19968;&#37096;&#20998;&#12290;&#36890;&#36807;&#36825;&#20123;&#20449;&#21495;&#32447;&#65292;ARM CPU&#21487;&#20197;&#21644;GIC&#30828;&#20214;block&#36827;&#34892;&#36890;&#20449;&#65288;&#20363;&#22914;&#23492;&#23384;&#22120;&#35775;&#38382;&#65289;&#12290; </P>
<P>&nbsp; </P>
<P>&#65288;4&#65289;&#20013;&#26029;&#21495;&#30340;&#20998;&#37197; </P>
<P>GIC-V2&#25903;&#25345;&#30340;&#20013;&#26029;&#31867;&#22411;&#26377;&#19979;&#38754;&#20960;&#31181;&#65306; </P>
<P>&#65288;a&#65289;&#22806;&#35774;&#20013;&#26029;&#65288;Peripheral interrupt&#65289;&#12290;&#26377;&#23454;&#38469;&#29289;&#29702;interrupt request signal&#30340;&#37027;&#20123;&#20013;&#26029;&#65292;&#19978;&#38754;&#24050;&#32463;&#20171;&#32461;&#36807;&#20102;&#12290; </P>
<P>&#65288;b&#65289;&#36719;&#20214;&#35302;&#21457;&#30340;&#20013;&#26029;&#65288;SGI&#65292;Software-generated interrupt&#65289;&#12290;&#36719;&#20214;&#21487;&#20197;&#36890;&#36807;&#20889;GICD_SGIR&#23492;&#23384;&#22120;&#26469;&#35302;&#21457;&#19968;&#20010;&#20013;&#26029;&#20107;&#20214;&#65292;&#36825;&#26679;&#30340;&#20013;&#26029;&#65292;&#21487;&#20197;&#29992;&#20110;processor&#20043;&#38388;&#30340;&#36890;&#20449;&#12290; </P>
<P>&#65288;c&#65289;&#34394;&#25311;&#20013;&#26029;&#65288;Virtual interrupt&#65289;&#21644;Maintenance interrupt&#12290;&#36825;&#20004;&#31181;&#20013;&#26029;&#21644;&#26412;&#25991;&#26080;&#20851;&#65292;&#19981;&#20877;&#36184;&#36848;&#12290; </P>
<P>&#20026;&#20102;&#26631;&#35782;&#36825;&#20123;interrupt source&#65292;&#25105;&#20204;&#24517;&#39035;&#35201;&#23545;&#23427;&#20204;&#36827;&#34892;&#32534;&#30721;&#65292;&#20855;&#20307;&#30340;ID&#20998;&#37197;&#24773;&#20917;&#22914;&#19979;&#65306; </P>
<P>&#65288;a&#65289;ID0~ID31&#26159;&#29992;&#20110;&#20998;&#21457;&#21040;&#19968;&#20010;&#29305;&#23450;&#30340;process&#30340;interrupt&#12290;&#26631;&#35782;&#36825;&#20123;interrupt&#19981;&#33021;&#20165;&#20165;&#20381;&#38752;ID&#65292;&#22240;&#20026;&#21508;&#20010;interrupt source&#37117;&#29992;&#21516;&#26679;&#30340;ID0~ID31&#26469;&#26631;&#35782;&#65292;&#22240;&#27492;&#35782;&#21035;&#36825;&#20123;interrupt&#38656;&#35201;interrupt ID &#65291; CPU interface number&#12290;ID0~ID15&#29992;&#20110;SGI&#65292;ID16~ID31&#29992;&#20110;PPI&#12290;PPI&#31867;&#22411;&#30340;&#20013;&#26029;&#20250;&#36865;&#21040;&#20854;&#31169;&#26377;&#30340;process&#19978;&#65292;&#21644;&#20854;&#20182;&#30340;process&#26080;&#20851;&#12290;SGI&#26159;&#36890;&#36807;&#20889;GICD_SGIR&#23492;&#23384;&#22120;&#32780;&#35302;&#21457;&#30340;&#20013;&#26029;&#12290;Distributor&#36890;&#36807;processor source ID&#12289;&#20013;&#26029;ID&#21644;target processor ID&#26469;&#21807;&#19968;&#35782;&#21035;&#19968;&#20010;SGI&#12290; </P>
<P>&#65288;b&#65289;ID32~ID1019&#29992;&#20110;SPI&#12290; &#36825;&#26159;GIC&#35268;&#33539;&#30340;&#26368;&#22823;size&#65292;&#23454;&#38469;&#19978;GIC-400&#26368;&#22823;&#25903;&#25345;480&#20010;SPI&#65292;Cortex-A15&#21644;A9&#19978;&#30340;GIC&#26368;&#22810;&#25903;&#25345;224&#20010;SPI&#12290; </P>
<P>&nbsp; </P>
<P>2&#12289;GIC-V2&#30340;&#20869;&#37096;&#36923;&#36753; </P>
<P>&#65288;1&#65289;GIC&#30340;block diagram </P>
<P>GIC&#30340;block diagram&#22914;&#19979;&#22270;&#25152;&#31034;&#65306; </P>
<P>&nbsp;<A href="http://www.wowotech.net/content/uploadfile/201409/e1fbd5278ddff2a62b06d22df15848e920140904115852.gif"><IMG title=gic style="BORDER-LEFT-WIDTH: 0px; BORDER-RIGHT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; DISPLAY: inline; BORDER-TOP-WIDTH: 0px" border=0 alt=gic src="http://www.wowotech.net/content/uploadfile/201409/049e88993db95cd9b35b6d9e8c1fa99920140904115854.gif" width=728 height=652></A> </P>
<P>GIC&#21487;&#20197;&#28165;&#26224;&#30340;&#21010;&#20998;&#25104;&#20004;&#20010;block&#65292;&#19968;&#20010;block&#26159;Distributor&#65288;&#19978;&#22270;&#30340;&#24038;&#36793;&#30340;block&#65289;&#65292;&#19968;&#20010;&#26159;CPU interface&#12290;CPU interface&#26377;&#20004;&#31181;&#65292;&#19968;&#31181;&#23601;&#26159;&#21644;&#26222;&#36890;processor&#25509;&#21475;&#65292;&#21478;&#22806;&#19968;&#31181;&#26159;&#21644;&#34394;&#25311;&#26426;&#25509;&#21475;&#30340;&#12290;Virtual CPU interface&#22312;&#26412;&#25991;&#20013;&#19981;&#20250;&#35814;&#32454;&#25551;&#36848;&#12290; </P>
<P>&nbsp; </P>
<P>&#65288;2&#65289;Distributor &#27010;&#36848; </P>
<P>Distributor&#30340;&#20027;&#35201;&#30340;&#20316;&#29992;&#26159;&#26816;&#27979;&#21508;&#20010;interrupt source&#30340;&#29366;&#24577;&#65292;&#25511;&#21046;&#21508;&#20010;interrupt source&#30340;&#34892;&#20026;&#65292;&#20998;&#21457;&#21508;&#20010;interrupt source&#20135;&#29983;&#30340;&#20013;&#26029;&#20107;&#20214;&#20998;&#21457;&#21040;&#25351;&#23450;&#30340;&#19968;&#20010;&#25110;&#32773;&#22810;&#20010;CPU interface&#19978;&#12290;&#34429;&#28982;Distributor&#21487;&#20197;&#31649;&#29702;&#22810;&#20010;interrupt source&#65292;&#20294;&#26159;&#23427;&#24635;&#26159;&#25226;&#20248;&#20808;&#32423;&#26368;&#39640;&#30340;&#37027;&#20010;interrupt&#35831;&#27714;&#36865;&#24448;CPU interface&#12290;Distributor&#23545;&#20013;&#26029;&#30340;&#25511;&#21046;&#21253;&#25324;&#65306; </P>
<P>&#65288;1&#65289;&#20013;&#26029;enable&#25110;&#32773;disable&#30340;&#25511;&#21046;&#12290;Distributor&#23545;&#20013;&#26029;&#30340;&#25511;&#21046;&#20998;&#25104;&#20004;&#20010;&#32423;&#21035;&#12290;&#19968;&#20010;&#26159;&#20840;&#23616;&#20013;&#26029;&#30340;&#25511;&#21046;&#65288;GIC_DIST_CTRL&#65289;&#12290;&#19968;&#26086;disable&#20102;&#20840;&#23616;&#30340;&#20013;&#26029;&#65292;&#37027;&#20040;&#20219;&#20309;&#30340;interrupt source&#20135;&#29983;&#30340;interrupt event&#37117;&#19981;&#20250;&#34987;&#20256;&#36882;&#21040;CPU interface&#12290;&#21478;&#22806;&#19968;&#20010;&#32423;&#21035;&#26159;&#23545;&#38024;&#23545;&#21508;&#20010;interrupt source&#36827;&#34892;&#25511;&#21046;&#65288;GIC_DIST_ENABLE_CLEAR&#65289;&#65292;disable&#26576;&#19968;&#20010;interrupt source&#20250;&#23548;&#33268;&#35813;interrupt event&#19981;&#20250;&#20998;&#21457;&#21040;CPU interface&#65292;&#20294;&#19981;&#24433;&#21709;&#20854;&#20182;interrupt source&#20135;&#29983;interrupt event&#30340;&#20998;&#21457;&#12290; </P>
<P>&#65288;2&#65289;&#25511;&#21046;&#23558;&#24403;&#21069;&#20248;&#20808;&#32423;&#26368;&#39640;&#30340;&#20013;&#26029;&#20107;&#20214;&#20998;&#21457;&#21040;&#19968;&#20010;&#25110;&#32773;&#19968;&#32452;CPU interface&#12290;&#24403;&#19968;&#20010;&#20013;&#26029;&#20107;&#20214;&#20998;&#21457;&#21040;&#22810;&#20010;CPU interface&#30340;&#26102;&#20505;&#65292;GIC&#30340;&#20869;&#37096;&#36923;&#36753;&#24212;&#35813;&#20445;&#35777;&#21482;assert &#19968;&#20010;CPU&#12290; </P>
<P>&#65288;3&#65289;&#20248;&#20808;&#32423;&#25511;&#21046;&#12290; </P>
<P>&#65288;4&#65289;interrupt&#23646;&#24615;&#35774;&#23450;&#12290;&#20363;&#22914;&#26159;level-sensitive&#36824;&#26159;edge-triggered </P>
<P>&#65288;5&#65289;interrupt group&#30340;&#35774;&#23450; </P>
<P>Distributor&#21487;&#20197;&#31649;&#29702;&#33509;&#24178;&#20010;interrupt source&#65292;&#36825;&#20123;interrupt source&#29992;ID&#26469;&#26631;&#35782;&#65292;&#25105;&#20204;&#31216;&#20043;interrupt ID&#12290; </P>
<P>&nbsp; </P>
<P>&#65288;3&#65289;CPU interface </P>
<P>CPU interface&#36825;&#20010;block&#20027;&#35201;&#29992;&#20110;&#21644;process&#36827;&#34892;&#25509;&#21475;&#12290;&#35813;block&#30340;&#20027;&#35201;&#21151;&#33021;&#21253;&#25324;&#65306; </P>
<P>&#65288;a&#65289;enable&#25110;&#32773;disable CPU interface&#21521;&#36830;&#25509;&#30340;CPU assert&#20013;&#26029;&#20107;&#20214;&#12290;&#23545;&#20110;ARM&#65292;CPU interface block&#21644;CPU&#20043;&#38388;&#30340;&#20013;&#26029;&#20449;&#21495;&#32447;&#26159;nIRQCPU&#21644;nFIQCPU&#12290;&#22914;&#26524;disable&#20102;&#20013;&#26029;&#65292;&#37027;&#20040;&#21363;&#20415;&#26159;Distributor&#20998;&#21457;&#20102;&#19968;&#20010;&#20013;&#26029;&#20107;&#20214;&#21040;CPU interface&#65292;&#20294;&#26159;&#20063;&#19981;&#20250;assert&#25351;&#23450;&#30340;nIRQ&#25110;&#32773;nFIQ&#36890;&#30693;processor&#12290; </P>
<P>&#65288;b&#65289;ackowledging&#20013;&#26029;&#12290;processor&#20250;&#21521;CPU interface block&#24212;&#31572;&#20013;&#26029;&#65288;&#24212;&#31572;&#24403;&#21069;&#20248;&#20808;&#32423;&#26368;&#39640;&#30340;&#37027;&#20010;&#20013;&#26029;&#65289;&#65292;&#20013;&#26029;&#19968;&#26086;&#34987;&#24212;&#31572;&#65292;Distributor&#23601;&#20250;&#25226;&#35813;&#20013;&#26029;&#30340;&#29366;&#24577;&#20174;pending&#29366;&#24577;&#20462;&#25913;&#25104;active&#25110;&#32773;pending and active&#65288;&#36825;&#26159;&#21644;&#35813;interrupt source&#30340;&#20449;&#21495;&#26377;&#20851;&#65292;&#20363;&#22914;&#22914;&#26524;&#26159;&#30005;&#24179;&#20013;&#26029;&#24182;&#19988;&#20445;&#25345;&#20102;&#35813;asserted&#30005;&#24179;&#65292;&#37027;&#20040;&#23601;&#26159;pending and active&#65289;&#12290;processor ack&#20102;&#20013;&#26029;&#20043;&#21518;&#65292;CPU interface&#23601;&#20250;deassert nIRQCPU&#21644;nFIQCPU&#20449;&#21495;&#32447;&#12290; </P>
<P>&#65288;c&#65289;&#20013;&#26029;&#22788;&#29702;&#23436;&#27605;&#30340;&#36890;&#30693;&#12290;&#24403;interrupt handler&#22788;&#29702;&#23436;&#20102;&#19968;&#20010;&#20013;&#26029;&#30340;&#26102;&#20505;&#65292;&#20250;&#21521;&#20889;CPU interface&#30340;&#23492;&#23384;&#22120;&#20174;&#32780;&#36890;&#30693;GIC CPU&#24050;&#32463;&#22788;&#29702;&#23436;&#35813;&#20013;&#26029;&#12290;&#20570;&#36825;&#20010;&#21160;&#20316;&#19968;&#26041;&#38754;&#26159;&#36890;&#30693;Distributor&#23558;&#20013;&#26029;&#29366;&#24577;&#20462;&#25913;&#20026;deactive&#65292;&#21478;&#22806;&#19968;&#26041;&#38754;&#65292;CPU interface&#20250;priority drop&#65292;&#20174;&#32780;&#20801;&#35768;&#20854;&#20182;&#30340;pending&#30340;interrupt&#21521;CPU&#25552;&#20132;&#12290; </P>
<P>&#65288;d&#65289;&#35774;&#23450;priority mask&#12290;&#36890;&#36807;priority mask&#65292;&#21487;&#20197;mask&#25481;&#19968;&#20123;&#20248;&#20808;&#32423;&#27604;&#36739;&#20302;&#30340;&#20013;&#26029;&#65292;&#36825;&#20123;&#20013;&#26029;&#19981;&#20250;&#36890;&#30693;&#21040;CPU&#12290; </P>
<P>&#65288;e&#65289;&#35774;&#23450;preemption&#30340;&#31574;&#30053; </P>
<P>&#65288;f&#65289;&#22312;&#22810;&#20010;&#20013;&#26029;&#20107;&#20214;&#21516;&#26102;&#21040;&#26469;&#30340;&#26102;&#20505;&#65292;&#36873;&#25321;&#19968;&#20010;&#20248;&#20808;&#32423;&#26368;&#39640;&#30340;&#36890;&#30693;processor </P>
<P>&nbsp; </P>
<P>&#65288;4&#65289;&#23454;&#20363; </P>
<P>&#25105;&#20204;&#29992;&#19968;&#20010;&#23454;&#38469;&#30340;&#20363;&#23376;&#26469;&#25551;&#36848;GIC&#21644;CPU&#25509;&#21475;&#19978;&#30340;&#20132;&#20114;&#36807;&#31243;&#65292;&#20855;&#20307;&#36807;&#31243;&#22914;&#19979;&#65306; </P>
<P><A href="http://www.wowotech.net/content/uploadfile/201409/f37480c353855439540d8fd7f514eb3320140904115856.gif"><IMG title=xxx style="BORDER-LEFT-WIDTH: 0px; BORDER-RIGHT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; DISPLAY: inline; BORDER-TOP-WIDTH: 0px" border=0 alt=xxx src="http://www.wowotech.net/content/uploadfile/201409/61d3821d475611cca3ba2fd66232a80820140904115900.gif" width=609 height=1454></A> </P>
<P>&#65288;&#27880;&#65306;&#22270;&#29255;&#22826;&#38271;&#65292;&#22240;&#27492;&#31446;&#30528;&#25918;&#65292;&#30475;&#30340;&#26102;&#20505;&#26377;&#28857;&#36153;&#21170;&#65292;&#23601;&#24403;&#27963;&#21160;&#19968;&#19979;&#33046;&#23376;&#21543;&#65289; </P>
<P>&#39318;&#20808;&#32473;&#20986;&#21069;&#25552;&#26465;&#20214;&#65306; </P>
<P>&#65288;a&#65289;N&#21644;M&#29992;&#26469;&#26631;&#35782;&#20004;&#20010;&#22806;&#35774;&#20013;&#26029;&#65292;N&#30340;&#20248;&#20808;&#32423;&#22823;&#20110;M </P>
<P>&#65288;b&#65289;&#20004;&#20010;&#20013;&#26029;&#37117;&#26159;SPI&#31867;&#22411;&#65292;level trigger&#65292;active-high </P>
<P>&#65288;c&#65289;&#20004;&#20010;&#20013;&#26029;&#34987;&#37197;&#32622;&#20026;&#21435;&#21516;&#19968;&#20010;CPU </P>
<P>&#65288;d&#65289;&#37117;&#34987;&#37197;&#32622;&#25104;group 0&#65292;&#36890;&#36807;FIQ&#35302;&#21457;&#20013;&#26029; </P>
<P>&#19979;&#38754;&#30340;&#34920;&#26684;&#25353;&#29031;&#26102;&#38388;&#36724;&#26469;&#25551;&#36848;&#20132;&#20114;&#36807;&#31243;&#65306; </P>
<TABLE class=ke-zeroborder cellSpacing=0 cellPadding=2 width=700 border=0>
<TBODY>
<TR>
<TD vAlign=top width=131>&#26102;&#38388; </TD>
<TD vAlign=top width=569>&#20132;&#20114;&#21160;&#20316;&#30340;&#25551;&#36848; </TD></TR>
<TR>
<TD vAlign=top width=131>T0&#26102;&#21051; </TD>
<TD vAlign=top width=569>Distributor&#26816;&#27979;&#21040;M&#36825;&#20010;interrupt source&#30340;&#26377;&#25928;&#35302;&#21457;&#30005;&#24179; </TD></TR>
<TR>
<TD vAlign=top width=131>T2&#26102;&#21051; </TD>
<TD vAlign=top width=569>Distributor&#23558;M&#36825;&#20010;interrupt source&#30340;&#29366;&#24577;&#35774;&#23450;&#20026;pending </TD></TR>
<TR>
<TD vAlign=top width=131>T17&#26102;&#21051; </TD>
<TD vAlign=top width=569>&#22823;&#32422;15&#20010;clock&#20043;&#21518;&#65292;CPU interface&#25289;&#20302;nFIQCPU&#20449;&#21495;&#32447;&#65292;&#21521;CPU&#25253;&#21578;M&#22806;&#35774;&#30340;&#20013;&#26029;&#35831;&#27714;&#12290;&#36825;&#26102;&#20505;&#65292;CPU interface&#30340;ack&#23492;&#23384;&#22120;&#65288;GICC_IAR&#65289;&#30340;&#20869;&#23481;&#20250;&#20462;&#25913;&#25104;M interrupt source&#23545;&#24212;&#30340;ID </TD></TR>
<TR>
<TD vAlign=top width=131>T42&#26102;&#21051; </TD>
<TD vAlign=top width=569>Distributor&#26816;&#27979;&#21040;N&#36825;&#20010;&#20248;&#20808;&#32423;&#26356;&#39640;&#30340;interrupt source&#30340;&#35302;&#21457;&#20107;&#20214; </TD></TR>
<TR>
<TD vAlign=top width=131>T43&#26102;&#21051; </TD>
<TD vAlign=top width=569>Distributor&#23558;N&#36825;&#20010;interrupt source&#30340;&#29366;&#24577;&#35774;&#23450;&#20026;pending&#12290;&#21516;&#26102;&#65292;&#30001;&#20110;N&#30340;&#20248;&#20808;&#32423;&#26356;&#39640;&#65292;&#22240;&#27492;Distributor&#20250;&#26631;&#35760;&#24403;&#21069;&#20248;&#20808;&#32423;&#26368;&#39640;&#30340;&#20013;&#26029; </TD></TR>
<TR>
<TD vAlign=top width=131>T58&#26102;&#21051; </TD>
<TD vAlign=top width=569>&#22823;&#32422;15&#20010;clock&#20043;&#21518;&#65292;CPU interface&#25289;&#20302;nFIQCPU&#20449;&#21495;&#32447;&#65292;&#21521;CPU&#25253;&#21578;N&#22806;&#35774;&#30340;&#20013;&#26029;&#35831;&#27714;&#12290;&#24403;&#28982;&#65292;&#30001;&#20110;T17&#26102;&#21051;&#24050;&#32463;assert CPU&#20102;&#65292;&#22240;&#27492;&#23454;&#38469;&#30340;&#30005;&#24179;&#20449;&#21495;&#20173;&#28982;&#20445;&#25345;asserted&#12290;&#36825;&#26102;&#20505;&#65292;CPU interface&#30340;ack&#23492;&#23384;&#22120;&#65288;GICC_IAR&#65289;&#30340;&#20869;&#23481;&#20250;&#34987;&#26356;&#26032;&#25104;N interrupt source&#30340;ID </TD></TR>
<TR>
<TD vAlign=top width=131>T61&#26102;&#21051; </TD>
<TD vAlign=top width=569>&#36719;&#20214;&#36890;&#36807;&#35835;&#21462;ack&#23492;&#23384;&#22120;&#30340;&#20869;&#23481;&#65292;&#33719;&#21462;&#20102;&#24403;&#21069;&#20248;&#20808;&#32423;&#26368;&#39640;&#30340;&#65292;&#24182;&#19988;&#29366;&#24577;&#26159;pending&#30340;interrupt ID&#65288;&#20063;&#23601;&#26159;N interrupt source&#23545;&#24212;&#30340;ID&#65289;&#65292;&#36890;&#36807;&#35835;&#35813;&#23492;&#23384;&#22120;&#65292;CPU&#20063;&#23601;ack&#20102;&#35813;interrupt source N&#12290;&#36825;&#26102;&#20505;&#65292;Distributor&#23558;N&#36825;&#20010;interrupt source&#30340;&#29366;&#24577;&#35774;&#23450;&#20026;pending and active&#65288;&#22240;&#20026;&#26159;&#30005;&#24179;&#35302;&#21457;&#65292;&#21482;&#35201;&#22806;&#37096;&#20173;&#28982;&#26377;asserted&#30340;&#30005;&#24179;&#20449;&#21495;&#65292;&#37027;&#20040;&#19968;&#23450;&#23601;&#26159;pending&#30340;&#65292;&#32780;&#35813;&#20013;&#26029;&#26159;&#27491;&#22312;&#34987;CPU&#22788;&#29702;&#30340;&#20013;&#26029;&#65292;&#22240;&#27492;&#29366;&#24577;&#26159;pending and active&#65289; <BR>&#27880;&#24847;&#65306;T61&#26631;&#35782;CPU&#24320;&#22987;&#26381;&#21153;&#35813;&#20013;&#26029; </TD></TR>
<TR>
<TD vAlign=top width=131>T64&#26102;&#21051; </TD>
<TD vAlign=top width=569>3&#20010;clock&#20043;&#21518;&#65292;&#30001;&#20110;CPU&#24050;&#32463;ack&#20102;&#20013;&#26029;&#65292;&#22240;&#27492;GIC&#20013;CPU interface&#27169;&#22359; deassert nFIQCPU&#20449;&#21495;&#32447;&#65292;&#35299;&#38500;&#21457;&#21521;&#35813;CPU&#30340;&#20013;&#26029;&#35831;&#27714; </TD></TR>
<TR>
<TD vAlign=top width=131>T126&#26102;&#21051; </TD>
<TD vAlign=top width=569>&#30001;&#20110;&#20013;&#26029;&#26381;&#21153;&#31243;&#24207;&#25805;&#20316;&#20102;N&#22806;&#35774;&#30340;&#25511;&#21046;&#23492;&#23384;&#22120;&#65288;ack&#22806;&#35774;&#30340;&#20013;&#26029;&#65289;&#65292;&#22240;&#27492;N&#22806;&#35774;deassert&#20102;&#20854;interrupt request signal </TD></TR>
<TR>
<TD vAlign=top width=131>T128&#26102;&#21051; </TD>
<TD vAlign=top width=569>Distributor&#35299;&#38500;N&#22806;&#35774;&#30340;pending&#29366;&#24577;&#65292;&#22240;&#27492;N&#36825;&#20010;interrupt source&#30340;&#29366;&#24577;&#35774;&#23450;&#20026;active </TD></TR>
<TR>
<TD vAlign=top width=131>T131&#26102;&#21051; </TD>
<TD vAlign=top width=569>&#36719;&#20214;&#25805;&#20316;End of Interrupt&#23492;&#23384;&#22120;&#65288;&#21521;GICC_EOIR&#23492;&#23384;&#22120;&#20889;&#20837;N&#23545;&#24212;&#30340;interrupt ID&#65289;&#65292;&#26631;&#35782;&#20013;&#26029;&#22788;&#29702;&#32467;&#26463;&#12290;Distributor&#23558;N&#36825;&#20010;interrupt source&#30340;&#29366;&#24577;&#20462;&#25913;&#20026;idle <BR>&#27880;&#24847;&#65306;T61&#65374;T131&#26159;CPU&#26381;&#21153;N&#22806;&#35774;&#20013;&#26029;&#30340;&#30340;&#26102;&#38388;&#21306;&#22495;&#65292;&#36825;&#20010;&#26399;&#38388;&#65292;&#22914;&#26524;&#26377;&#39640;&#20248;&#20808;&#32423;&#30340;&#20013;&#26029;pending&#65292;&#20250;&#21457;&#29983;&#20013;&#26029;&#30340;&#25250;&#21344;&#65288;&#30828;&#20214;&#24847;&#20041;&#30340;&#65289;&#65292;&#36825;&#26102;&#20505;CPU interface&#20250;&#21521;CPU assert &#26032;&#30340;&#20013;&#26029;&#12290; </TD></TR>
<TR>
<TD vAlign=top width=131>T146&#26102;&#21051; </TD>
<TD vAlign=top width=569>&#22823;&#32422;15&#20010;clock&#20043;&#21518;&#65292;Distributor&#21521;CPU interface&#25253;&#21578;&#24403;&#21069;pending&#19988;&#20248;&#20808;&#32423;&#26368;&#39640;&#30340;interrupt source&#65292;&#20063;&#23601;&#26159;M&#20102;&#12290;&#28459;&#38271;&#30340;pending&#20043;&#21518;&#65292;M&#32456;&#20110;&#36814;&#26469;&#20102;&#26149;&#22825;&#12290;CPU interface&#25289;&#20302;nFIQCPU&#20449;&#21495;&#32447;&#65292;&#21521;CPU&#25253;&#21578;M&#22806;&#35774;&#30340;&#20013;&#26029;&#35831;&#27714;&#12290;&#36825;&#26102;&#20505;&#65292;CPU interface&#30340;ack&#23492;&#23384;&#22120;&#65288;GICC_IAR&#65289;&#30340;&#20869;&#23481;&#20250;&#20462;&#25913;&#25104;M interrupt source&#23545;&#24212;&#30340;ID </TD></TR>
<TR>
<TD vAlign=top width=131>T211&#26102;&#21051; </TD>
<TD vAlign=top width=569>CPU ack M&#20013;&#26029;&#65288;&#36890;&#36807;&#35835;GICC_IAR&#23492;&#23384;&#22120;&#65289;&#65292;&#24320;&#22987;&#22788;&#29702;&#20302;&#20248;&#20808;&#32423;&#30340;&#20013;&#26029;&#12290; </TD></TR></TBODY></TABLE>
<P>&nbsp; </P>
<P>&#19977;&#12289;GIC-V2 irq chip driver&#30340;&#21021;&#22987;&#21270;&#36807;&#31243; </P>
<P>&#22312;linux-3.17-rc3\drivers\irqchip&#30446;&#24405;&#19979;&#20445;&#23384;&#22312;&#21508;&#31181;&#19981;&#21516;&#30340;&#20013;&#26029;&#25511;&#21046;&#22120;&#30340;&#39537;&#21160;&#20195;&#30721;&#65292;&#36825;&#20010;&#29256;&#26412;&#30340;&#20869;&#26680;&#25903;&#25345;&#20102;GICV3&#12290;irq-gic-common.c&#26159;&#36890;&#29992;&#30340;GIC&#30340;&#39537;&#21160;&#20195;&#30721;&#65292;&#21487;&#20197;&#34987;&#21508;&#20010;&#29256;&#26412;&#30340;GIC&#20351;&#29992;&#12290;irq-gic.c&#26159;&#29992;&#20110;V2&#29256;&#26412;&#30340;GIC controller&#65292;&#32780;irq-gic-v3.c&#26159;&#29992;&#20110;V3&#29256;&#26412;&#30340;GIC controller&#12290; </P>
<P>1&#12289;GIC&#30340;device node&#21644;GIC irq chip driver&#30340;&#21305;&#37197;&#36807;&#31243; </P>
<P>&#65288;1&#65289;irq chip driver&#20013;&#30340;&#22768;&#26126; </P>
<P>&#22312;linux-3.17-rc3\drivers\irqchip&#30446;&#24405;&#19979;&#30340;irqchip.h&#25991;&#20214;&#20013;&#23450;&#20041;&#20102;IRQCHIP_DECLARE&#23439;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>#define IRQCHIP_DECLARE(name, compat, fn) OF_DECLARE_2(irqchip, name, compat, fn) </P>
<P>#define OF_DECLARE_2(table, name, compat, fn) \ <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _OF_DECLARE(table, name, compat, fn, of_init_fn_2) </P>
<P>#define _OF_DECLARE(table, name, compat, fn, fn_type)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \ <BR>&nbsp;&nbsp;&nbsp; static const struct of_device_id __of_table_##name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \ <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __used __section(__##table##_of_table)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \ <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = { .compatible = compat,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \ <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .data = (fn == (fn_type)NULL) ? fn : fn&nbsp; } </P></BLOCKQUOTE>
<P>&#36825;&#20010;&#23439;&#20854;&#23454;&#23601;&#26159;&#21021;&#22987;&#21270;&#20102;&#19968;&#20010;struct of_device_id&#30340;&#38745;&#24577;&#24120;&#37327;&#65292;&#24182;&#25918;&#32622;&#22312;__irqchip_of_table section&#20013;&#12290;irq-gic.c&#25991;&#20214;&#20013;&#20351;&#29992;IRQCHIP_DECLARE&#26469;&#23450;&#20041;&#20102;&#33509;&#24178;&#20010;&#38745;&#24577;&#30340;struct of_device_id&#24120;&#37327;&#65292;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>IRQCHIP_DECLARE(gic_400, "arm,gic-400", gic_of_init); <BR>IRQCHIP_DECLARE(cortex_a15_gic, "arm,cortex-a15-gic", gic_of_init); <BR>IRQCHIP_DECLARE(cortex_a9_gic, "arm,cortex-a9-gic", gic_of_init); <BR>IRQCHIP_DECLARE(cortex_a7_gic, "arm,cortex-a7-gic", gic_of_init); <BR>IRQCHIP_DECLARE(msm_8660_qgic, "qcom,msm-8660-qgic", gic_of_init); <BR>IRQCHIP_DECLARE(msm_qgic2, "qcom,msm-qgic2", gic_of_init); </P></BLOCKQUOTE>
<P>&#20860;&#23481;GIC-V2&#30340;GIC&#23454;&#29616;&#26377;&#24456;&#22810;&#65292;&#19981;&#36807;&#20854;&#21021;&#22987;&#21270;&#20989;&#25968;&#37117;&#26159;&#19968;&#20010;&#12290;&#22312;linux kernel&#32534;&#35793;&#30340;&#26102;&#20505;&#65292;&#20320;&#21487;&#20197;&#37197;&#32622;&#22810;&#20010;irq chip&#36827;&#20837;&#20869;&#26680;&#65292;&#32534;&#35793;&#31995;&#32479;&#20250;&#25226;&#25152;&#26377;&#30340;IRQCHIP_DECLARE&#23439;&#23450;&#20041;&#30340;&#25968;&#25454;&#25918;&#20837;&#21040;&#19968;&#20010;&#29305;&#27530;&#30340;section&#20013;&#65288;section name&#26159;__irqchip_of_table&#65289;&#65292;&#25105;&#20204;&#31216;&#36825;&#20010;&#29305;&#27530;&#30340;section&#21483;&#20570;irq chip table&#12290;&#36825;&#20010;table&#20063;&#23601;&#20445;&#23384;&#20102;kernel&#25903;&#25345;&#30340;&#25152;&#26377;&#30340;&#20013;&#26029;&#25511;&#21046;&#22120;&#30340;ID&#20449;&#24687;&#65288;&#26368;&#37325;&#35201;&#30340;&#26159;&#39537;&#21160;&#20195;&#30721;&#21021;&#22987;&#21270;&#20989;&#25968;&#21644;DT compatible string&#65289;&#12290;&#25105;&#20204;&#26469;&#30475;&#30475;struct of_device_id&#30340;&#23450;&#20041;&#65306; </P>
<BLOCKQUOTE>
<P>struct of_device_id <BR>{ <BR>&nbsp;&nbsp;&nbsp; char&nbsp;&nbsp;&nbsp; name[32];&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#35201;&#21305;&#37197;&#30340;device node&#30340;&#21517;&#23383; <BR>&nbsp;&nbsp;&nbsp; char&nbsp;&nbsp;&nbsp; type[32];&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#35201;&#21305;&#37197;&#30340;device node&#30340;&#31867;&#22411; <BR>&nbsp;&nbsp;&nbsp; char&nbsp;&nbsp;&nbsp; compatible[128];&#65293;&#65293;&#65293;&#21305;&#37197;&#23383;&#31526;&#20018;&#65288;DT compatible string&#65289;&#65292;&#29992;&#26469;&#21305;&#37197;&#36866;&#21512;&#30340;device node <BR>&nbsp;&nbsp;&nbsp; const void *data;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#23545;&#20110;GIC&#65292;&#36825;&#37324;&#26159;&#21021;&#22987;&#21270;&#20989;&#25968;&#25351;&#38024; <BR>}; </P></BLOCKQUOTE>
<P>&#36825;&#20010;&#25968;&#25454;&#32467;&#26500;&#20027;&#35201;&#34987;&#29992;&#26469;&#36827;&#34892;Device node&#21644;driver&#27169;&#22359;&#36827;&#34892;&#21305;&#37197;&#29992;&#30340;&#12290;&#20174;&#35813;&#25968;&#25454;&#32467;&#26500;&#30340;&#23450;&#20041;&#21487;&#20197;&#30475;&#20986;&#65292;&#22312;&#21305;&#37197;&#36807;&#31243;&#20013;&#65292;device name&#12289;device type&#21644;DT compatible string&#37117;&#26159;&#32771;&#34385;&#30340;&#22240;&#32032;&#12290;&#26356;&#32454;&#33410;&#30340;&#20869;&#23481;&#35831;&#21442;&#32771;__of_device_is_compatible&#20989;&#25968;&#12290; </P>
<P>&#65288;2&#65289;device node </P>
<P>&#19981;&#21516;&#30340;GIC-V2&#30340;&#23454;&#29616;&#24635;&#20250;&#26377;&#19968;&#20123;&#19981;&#21516;&#65292;&#36825;&#20123;&#20449;&#24687;&#21487;&#20197;&#36890;&#36807;Device tree&#30340;&#26426;&#21046;&#26469;&#20256;&#36882;&#12290;Device node&#20013;&#23450;&#20041;&#20102;&#21508;&#31181;&#23646;&#24615;&#65292;&#20854;&#20013;&#23601;&#21253;&#25324;&#20102;memory&#36164;&#28304;&#65292;IRQ&#25551;&#36848;&#31561;&#20449;&#24687;&#65292;&#36825;&#20123;&#20449;&#24687;&#38656;&#35201;&#22312;&#21021;&#22987;&#21270;&#30340;&#26102;&#20505;&#20256;&#36882;&#32473;&#20855;&#20307;&#30340;&#39537;&#21160;&#65292;&#22240;&#27492;&#38656;&#35201;&#19968;&#20010;Device node&#21644;driver&#27169;&#22359;&#30340;&#21305;&#37197;&#36807;&#31243;&#12290;&#22312;Device Tree&#27169;&#22359;&#20013;&#20250;&#21253;&#25324;&#31995;&#32479;&#20013;&#25152;&#26377;&#30340;device node&#65292;&#22914;&#26524;&#25105;&#20204;&#30340;&#31995;&#32479;&#20351;&#29992;&#20102;GIC-400&#65292;&#37027;&#20040;&#31995;&#32479;&#30340;device node&#25968;&#25454;&#24211;&#20013;&#20250;&#26377;&#19968;&#20010;node&#26159;GIC-400&#30340;&#65292;&#19968;&#20010;&#31034;&#20363;&#24615;&#30340;GIC-400&#30340;device node&#65288;&#25105;&#20204;&#20197;&#29790;&#33455;&#24494;&#30340;RK3288&#22788;&#29702;&#22120;&#20026;&#20363;&#65289;&#23450;&#20041;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>gic: interrupt-controller@ffc01000 { <BR>&nbsp;&nbsp;&nbsp; compatible = "arm,gic-400"; <BR>&nbsp;&nbsp;&nbsp; interrupt-controller; <BR>&nbsp;&nbsp;&nbsp; #interrupt-cells = &lt;3&gt;; <BR>&nbsp;&nbsp;&nbsp; #address-cells = &lt;0&gt;; </P>
<P>&nbsp;&nbsp;&nbsp; reg = &lt;0xffc01000 0x1000=""&gt;,&#65293;&#65293;&#65293;&#65293;Distributor address range <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;0xffc02000 0x1000=""&gt;,&#65293;&#65293;&#65293;&#65293;&#65293;CPU interface address range <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;0xffc04000 0x2000=""&gt;,&#65293;&#65293;&#65293;&#65293;&#65293;Virtual interface control block <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &lt;0xffc06000 0x2000=""&gt;;&#65293;&#65293;&#65293;&#65293;&#65293;Virtual CPU interfaces <BR>&nbsp;&nbsp;&nbsp; interrupts = <GIC_PPI 9="" 0xf04="">; <BR>};</GIC_PPI> </P></BLOCKQUOTE>
<P>&nbsp; </P>
<P>&#65288;3&#65289;device node&#21644;irq chip driver&#30340;&#21305;&#37197; </P>
<P>&#22312;machine driver&#21021;&#22987;&#21270;&#30340;&#26102;&#20505;&#20250;&#35843;&#29992;irqchip_init&#20989;&#25968;&#36827;&#34892;irq chip driver&#30340;&#21021;&#22987;&#21270;&#12290;&#22312;driver/irqchip/irqchip.c&#25991;&#20214;&#20013;&#23450;&#20041;&#20102;irqchip_init&#20989;&#25968;&#65292;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>&nbsp; </P>
<P>void __init irqchip_init(void) <BR>{ <BR>&nbsp;&nbsp;&nbsp; of_irq_init(__irqchip_begin); <BR>} </P></BLOCKQUOTE>
<P>__irqchip_begin&#23601;&#26159;&#20869;&#26680;irq chip table&#30340;&#39318;&#22320;&#22336;&#65292;&#36825;&#20010;table&#20063;&#23601;&#20445;&#23384;&#20102;kernel&#25903;&#25345;&#30340;&#25152;&#26377;&#30340;&#20013;&#26029;&#25511;&#21046;&#22120;&#30340;ID&#20449;&#24687;&#65288;&#29992;&#20110;&#21644;device node&#30340;&#21305;&#37197;&#65289;&#12290;of_irq_init&#20989;&#25968;&#25191;&#34892;&#20043;&#21069;&#65292;&#31995;&#32479;&#24050;&#32463;&#23436;&#25104;&#20102;device tree&#30340;&#21021;&#22987;&#21270;&#65292;&#22240;&#27492;&#31995;&#32479;&#20013;&#30340;&#25152;&#26377;&#30340;&#35774;&#22791;&#33410;&#28857;&#37117;&#24050;&#32463;&#24418;&#25104;&#20102;&#19968;&#20010;&#26641;&#29366;&#32467;&#26500;&#65292;&#27599;&#20010;&#33410;&#28857;&#20195;&#34920;&#19968;&#20010;&#35774;&#22791;&#30340;device node&#12290;of_irq_init&#26159;&#22312;&#25152;&#26377;&#30340;device node&#20013;&#23547;&#25214;&#20013;&#26029;&#25511;&#21046;&#22120;&#33410;&#28857;&#65292;&#24418;&#25104;&#26641;&#29366;&#32467;&#26500;&#65288;&#31995;&#32479;&#21487;&#20197;&#26377;&#22810;&#20010;interrupt controller&#65292;&#20043;&#25152;&#20197;&#24418;&#25104;&#20013;&#26029;&#25511;&#21046;&#22120;&#30340;&#26641;&#29366;&#32467;&#26500;&#65292;&#26159;&#20026;&#20102;&#35753;&#31995;&#32479;&#20013;&#25152;&#26377;&#30340;&#20013;&#26029;&#25511;&#21046;&#22120;&#39537;&#21160;&#25353;&#29031;&#19968;&#23450;&#30340;&#39034;&#24207;&#36827;&#34892;&#21021;&#22987;&#21270;&#65289;&#12290;&#20043;&#21518;&#65292;&#20174;root interrupt controller&#33410;&#28857;&#24320;&#22987;&#65292;&#23545;&#20110;&#27599;&#19968;&#20010;interrupt controller&#30340;device node&#65292;&#25195;&#25551;irq chip table&#65292;&#36827;&#34892;&#21305;&#37197;&#65292;&#19968;&#26086;&#21305;&#37197;&#21040;&#65292;&#23601;&#35843;&#29992;&#35813;interrupt controller&#30340;&#21021;&#22987;&#21270;&#20989;&#25968;&#65292;&#24182;&#25226;&#35813;&#20013;&#26029;&#25511;&#21046;&#22120;&#30340;device node&#20197;&#21450;parent&#20013;&#26029;&#25511;&#21046;&#22120;&#30340;device node&#20316;&#20026;&#21442;&#25968;&#20256;&#36882;&#32473;irq chip driver&#12290;&#12290;&#20855;&#20307;&#30340;&#21305;&#37197;&#36807;&#31243;&#30340;&#20195;&#30721;&#23646;&#20110;Device Tree&#27169;&#22359;&#30340;&#20869;&#23481;&#65292;&#26356;&#35814;&#32454;&#30340;&#20449;&#24687;&#21487;&#20197;&#21442;&#32771;<A href="http://www.wowotech.net/linux_kenrel/dt-code-analysis.html">Device Tree&#20195;&#30721;&#20998;&#26512;&#25991;&#26723;</A>&#12290; </P>
<P>&nbsp; </P>
<P>2&#12289;GIC driver&#21021;&#22987;&#21270;&#20195;&#30721;&#20998;&#26512; </P>
<P>&#65288;1&#65289;gic_of_init&#30340;&#20195;&#30721;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>int __init gic_of_init(struct device_node *node, struct device_node *parent) <BR>{ <BR>&nbsp;&nbsp;&nbsp; void __iomem *cpu_base; <BR>&nbsp;&nbsp;&nbsp; void __iomem *dist_base; <BR>&nbsp;&nbsp;&nbsp; u32 percpu_offset; <BR>&nbsp;&nbsp;&nbsp; int irq; </P>
<P>&nbsp;&nbsp;&nbsp; dist_base = of_iomap(node, 0);----------------&#26144;&#23556;GIC Distributor&#30340;&#23492;&#23384;&#22120;&#22320;&#22336;&#31354;&#38388; </P>
<P>&nbsp;&nbsp;&nbsp; cpu_base = of_iomap(node, 1);----------------&#26144;&#23556;GIC CPU interface&#30340;&#23492;&#23384;&#22120;&#22320;&#22336;&#31354;&#38388; </P>
<P>&nbsp;&nbsp;&nbsp; if (of_property_read_u32(node, "cpu-offset", &amp;percpu_offset))--------&#22788;&#29702;cpu-offset&#23646;&#24615;&#12290; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; percpu_offset = 0; </P>
<P>&nbsp;&nbsp;&nbsp; gic_init_bases(gic_cnt, -1, dist_base, cpu_base, percpu_offset, node);))-----&#20027;&#22788;&#29702;&#36807;&#31243;&#65292;&#21518;&#38754;&#35814;&#36848; <BR>&nbsp;&nbsp;&nbsp; if (!gic_cnt) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gic_init_physaddr(node); -----&#23545;&#20110;&#19981;&#25903;&#25345;big.LITTLE switcher&#65288;CONFIG_BL_SWITCHER&#65289;&#30340;&#31995;&#32479;&#65292;&#35813;&#20989;&#25968;&#20026;&#31354;&#12290; </P>
<P>&nbsp;&nbsp;&nbsp; if (parent) {--------&#22788;&#29702;interrupt&#32423;&#32852; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; irq = irq_of_parse_and_map(node, 0); &#65293;&#65293;&#65293;&#35299;&#26512;second GIC&#30340;interrupts&#23646;&#24615;&#65292;&#24182;&#36827;&#34892;mapping&#65292;&#36820;&#22238;IRQ number <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gic_cascade_irq(gic_cnt, irq); <BR>&nbsp;&nbsp;&nbsp; } <BR>&nbsp;&nbsp;&nbsp; gic_cnt++; <BR>&nbsp;&nbsp;&nbsp; return 0; <BR>} </P></BLOCKQUOTE>
<P>&#25105;&#20204;&#39318;&#20808;&#30475;&#30475;&#36825;&#20010;&#20989;&#25968;&#30340;&#21442;&#25968;&#65292;node&#21442;&#25968;&#20195;&#34920;&#38656;&#35201;&#21021;&#22987;&#21270;&#30340;&#37027;&#20010;interrupt controller&#30340;device node&#65292;parent&#21442;&#25968;&#25351;&#21521;&#20854;parent&#12290;&#22312;&#26144;&#23556;GIC-400&#30340;memory map I/O space&#30340;&#26102;&#20505;&#65292;&#25105;&#20204;&#21482;&#26159;&#26144;&#23556;&#20102;Distributor&#21644;CPU interface&#30340;&#23492;&#23384;&#22120;&#22320;&#22336;&#31354;&#38388;&#65292;&#21644;&#34394;&#25311;&#21270;&#22788;&#29702;&#30456;&#20851;&#30340;&#23492;&#23384;&#22120;&#27809;&#26377;&#26144;&#23556;&#65292;&#22240;&#27492;&#36825;&#20010;&#29256;&#26412;&#30340;GIC driver&#24212;&#35813;&#26159;&#19981;&#25903;&#25345;&#34394;&#25311;&#21270;&#30340;&#65288;&#19981;&#30693;&#36947;&#21518;&#32493;&#29256;&#26412;&#26159;&#21542;&#25903;&#25345;&#65292;&#22312;&#19968;&#20010;&#23884;&#20837;&#24335;&#24179;&#21488;&#19978;&#25903;&#25345;&#34394;&#25311;&#21270;&#26377;&#23454;&#38469;&#24847;&#20041;&#21527;&#65311;&#26368;&#20808;&#25903;&#25345;&#34394;&#25311;&#21270;&#30340;&#24212;&#35813;&#26159;ARM64+GICV3/4&#36825;&#26679;&#30340;&#24179;&#21488;&#65289;&#12290; </P>
<P>&#35201;&#20102;&#35299;cpu-offset&#23646;&#24615;&#65292;&#39318;&#20808;&#35201;&#20102;&#35299;&#20160;&#20040;&#26159;banked register&#12290;&#25152;&#35859;banked register&#23601;&#26159;&#22312;&#19968;&#20010;&#22320;&#22336;&#19978;&#25552;&#20379;&#22810;&#20010;&#23492;&#23384;&#22120;&#21103;&#26412;&#12290;&#27604;&#22914;&#35828;&#31995;&#32479;&#20013;&#26377;&#22235;&#20010;CPU&#65292;&#36825;&#20123;CPU&#35775;&#38382;&#26576;&#20010;&#23492;&#23384;&#22120;&#30340;&#26102;&#20505;&#22320;&#22336;&#26159;&#19968;&#26679;&#30340;&#65292;&#20294;&#26159;&#23545;&#20110;banked register&#65292;&#23454;&#38469;&#19978;&#65292;&#19981;&#21516;&#30340;CPU&#35775;&#38382;&#30340;&#26159;&#19981;&#21516;&#30340;&#23492;&#23384;&#22120;&#65292;&#34429;&#28982;&#23427;&#20204;&#30340;&#22320;&#22336;&#26159;&#19968;&#26679;&#30340;&#12290;&#22914;&#26524;GIC&#27809;&#26377;banked register&#65292;&#37027;&#20040;&#38656;&#35201;&#25552;&#20379;&#26681;&#25454;CPU index&#32473;&#20986;&#19968;&#31995;&#21015;&#22320;&#22336;&#20559;&#31227;&#65292;&#32780;&#22320;&#22336;&#20559;&#31227;=cpu-offset * cpu-nr&#12290; </P>
<P>interrupt controller&#21487;&#20197;&#32423;&#32852;&#12290;&#23545;&#20110;root GIC&#65292;&#20854;&#20256;&#20837;&#30340;parent&#26159;NULL&#65292;&#22240;&#27492;&#19981;&#20250;&#25191;&#34892;&#32423;&#32852;&#37096;&#20998;&#30340;&#20195;&#30721;&#12290;&#23545;&#20110;second GIC&#65292;&#23427;&#26159;&#20316;&#20026;&#20854;parent&#65288;root GIC&#65289;&#30340;&#19968;&#20010;&#26222;&#36890;&#30340;irq source&#65292;&#22240;&#27492;&#65292;&#20063;&#38656;&#35201;&#27880;&#20876;&#35813;IRQ&#30340;handler&#12290;&#30001;&#27492;&#21487;&#35265;&#65292;&#38750;root&#30340;GIC&#30340;&#21021;&#22987;&#21270;&#20998;&#25104;&#20102;&#20004;&#20010;&#37096;&#20998;&#65306;&#19968;&#37096;&#20998;&#26159;&#20316;&#20026;&#19968;&#20010;interrupt controller&#65292;&#25191;&#34892;&#21644;root GIC&#19968;&#26679;&#30340;&#21021;&#22987;&#21270;&#20195;&#30721;&#12290;&#21478;&#22806;&#19968;&#26041;&#38754;&#65292;GIC&#21448;&#20316;&#20026;&#19968;&#20010;&#26222;&#36890;&#30340;interrupt generating device&#65292;&#38656;&#35201;&#35937;&#19968;&#20010;&#26222;&#36890;&#30340;&#35774;&#22791;&#39537;&#21160;&#19968;&#26679;&#65292;&#27880;&#20876;&#20854;&#20013;&#26029;handler&#12290;&#29702;&#35299;irq_of_parse_and_map&#38656;&#35201;irq domain&#30340;&#30693;&#35782;&#65292;&#35831;&#21442;&#32771;<A href="http://www.wowotech.net/linux_kenrel/irq-domain.html">linux kernel&#30340;&#20013;&#26029;&#23376;&#31995;&#32479;&#20043;&#65288;&#20108;&#65289;&#65306;irq domain&#20171;&#32461;</A>&#12290; </P>
<P>&nbsp; </P>
<P>&#65288;2&#65289;gic_init_bases&#30340;&#20195;&#30721;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>void __init gic_init_bases(unsigned int gic_nr, int irq_start, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void __iomem *dist_base, void __iomem *cpu_base, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; u32 percpu_offset, struct device_node *node) <BR>{ <BR>&nbsp;&nbsp;&nbsp; irq_hw_number_t hwirq_base; <BR>&nbsp;&nbsp;&nbsp; struct gic_chip_data *gic; <BR>&nbsp;&nbsp;&nbsp; int gic_irqs, irq_base, i; </P>
<P>&nbsp;&nbsp;&nbsp; gic = &amp;gic_data[gic_nr];&nbsp; <BR>&nbsp;&nbsp;&nbsp; gic-&gt;dist_base.common_base = dist_base; &#65293;&#65293;&#65293;&#65293;&#30465;&#30053;&#20102;non banked&#30340;&#24773;&#20917; <BR>&nbsp;&nbsp;&nbsp; gic-&gt;cpu_base.common_base = cpu_base;&nbsp; <BR>&nbsp;&nbsp;&nbsp; gic_set_base_accessor(gic, gic_get_common_base); </P>
<P><BR>&nbsp;&nbsp;&nbsp; for (i = 0; i &lt; NR_GIC_CPU_IF; i++) &#65293;&#65293;&#65293;&#21518;&#38754;&#20250;&#20855;&#20307;&#25551;&#36848;gic_cpu_map&#30340;&#21547;&#20041; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gic_cpu_map[i] = 0xff; </P>
<P><BR>&nbsp;&nbsp;&nbsp; if (gic_nr == 0 &amp;&amp; (irq_start &amp; 31) &gt; 0) { &#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;a&#65289; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hwirq_base = 16; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (irq_start != -1) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; irq_start = (irq_start &amp; ~31) + 16; <BR>&nbsp;&nbsp;&nbsp; } else { <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hwirq_base = 32; <BR>&nbsp;&nbsp;&nbsp; } </P>
<P><BR>&nbsp;&nbsp;&nbsp; gic_irqs = readl_relaxed(gic_data_dist_base(gic) + GIC_DIST_CTR) &amp; 0x1f; &#65293;&#65293;&#65293;&#65293;&#65288;b&#65289; <BR>&nbsp;&nbsp;&nbsp; gic_irqs = (gic_irqs + 1) * 32; <BR>&nbsp;&nbsp;&nbsp; if (gic_irqs &gt; 1020) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gic_irqs = 1020; <BR>&nbsp;&nbsp;&nbsp; gic-&gt;gic_irqs = gic_irqs; </P>
<P>&nbsp;&nbsp;&nbsp; gic_irqs -= hwirq_base;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;c&#65289; <BR>&nbsp;&nbsp;&nbsp; </P>
<P>&nbsp;&nbsp;&nbsp; if (of_property_read_u32(node, "arm,routable-irqs",&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;d&#65289; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;nr_routable_irqs)) { <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; irq_base = irq_alloc_descs(irq_start, 16, gic_irqs,&nbsp; numa_node_id()); &#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;e&#65289; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (IS_ERR_VALUE(irq_base)) { <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WARN(1, "Cannot allocate irq_descs @ IRQ%d, assuming pre-allocated\n", <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; irq_start); <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; irq_base = irq_start; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gic-&gt;domain = irq_domain_add_legacy(node, gic_irqs, irq_base, &#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;f&#65289; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hwirq_base, &amp;gic_irq_domain_ops, gic); <BR>&nbsp;&nbsp;&nbsp; } else { <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gic-&gt;domain = irq_domain_add_linear(node, nr_routable_irqs, &#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;f&#65289; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;gic_irq_domain_ops, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gic); <BR>&nbsp;&nbsp;&nbsp; } </P>
<P>&nbsp;&nbsp;&nbsp; if (gic_nr == 0) { &#65293;&#65293;&#65293;&#21482;&#23545;root GIC&#25805;&#20316;&#65292;&#22240;&#20026;&#35774;&#23450;callback&#12289;&#27880;&#20876;Notifier&#21482;&#38656;&#35201;&#19968;&#27425;&#23601;OK&#20102; <BR>#ifdef CONFIG_SMP <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set_smp_cross_call(gic_raise_softirq);&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;g&#65289; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; register_cpu_notifier(&amp;gic_cpu_notifier);&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;h&#65289; <BR>#endif <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set_handle_irq(gic_handle_irq); &#65293;&#65293;&#65293;&#36825;&#20010;&#20989;&#25968;&#21517;&#23383;&#20063;&#19981;&#22909;&#65292;&#23454;&#38469;&#19978;&#26159;&#35774;&#23450;arch&#30456;&#20851;&#30340;irq handler <BR>&nbsp;&nbsp;&nbsp; } </P>
<P>&nbsp;&nbsp;&nbsp; gic_chip.flags |= gic_arch_extn.flags; <BR>&nbsp;&nbsp;&nbsp; gic_dist_init(gic);---------&#20855;&#20307;&#30340;&#30828;&#20214;&#21021;&#22987;&#20195;&#30721;&#65292;&#21442;&#32771;&#19979;&#33410;&#30340;&#25551;&#36848; <BR>&nbsp;&nbsp;&nbsp; gic_cpu_init(gic); <BR>&nbsp;&nbsp;&nbsp; gic_pm_init(gic); <BR>} </P></BLOCKQUOTE>
<P>&#65288;a&#65289;gic_nr&#26631;&#35782;GIC number&#65292;&#31561;&#20110;0&#23601;&#26159;root GIC&#12290;hwirq&#30340;&#24847;&#24605;&#23601;&#26159;GIC&#19978;&#30340;HW interrupt ID&#65292;&#24182;&#19981;&#26159;GIC&#19978;&#30340;&#27599;&#20010;interrupt ID&#37117;&#26377;map&#21040;linux IRQ framework&#20013;&#30340;&#19968;&#20010;IRQ number&#65292;&#23545;&#20110;SGI&#65292;&#26159;&#23646;&#20110;&#36719;&#20214;&#20013;&#26029;&#65292;&#29992;&#20110;CPU&#20043;&#38388;&#36890;&#20449;&#65292;&#27809;&#26377;&#24517;&#35201;&#36827;&#34892;HW interrupt ID&#21040;IRQ number&#30340;mapping&#12290;&#21464;&#37327;hwirq_base&#34920;&#31034;&#35813;GIC&#19978;&#35201;&#36827;&#34892;map&#30340;base ID&#65292;hwirq_base = 16&#20063;&#23601;&#24847;&#21619;&#30528;&#24573;&#30053;&#25481;16&#20010;SGI&#12290;&#23545;&#20110;&#31995;&#32479;&#20013;&#20854;&#20182;&#30340;GIC&#65292;&#20854;PPI&#20063;&#27809;&#26377;&#24517;&#35201;mapping&#65292;&#22240;&#27492;hwirq_base = 32&#12290; </P>
<P>&#22312;&#26412;&#22330;&#26223;&#20013;&#65292;irq_start &#65309; -1&#65292;&#34920;&#31034;&#19981;&#25351;&#23450;IRQ number&#12290;&#26377;&#20123;&#22330;&#26223;&#20250;&#25351;&#23450;IRQ number&#65292;&#36825;&#26102;&#20505;&#65292;&#38656;&#35201;&#23545;IRQ number&#36827;&#34892;&#19968;&#20010;&#23545;&#40784;&#30340;&#25805;&#20316;&#12290; </P>
<P>&#65288;b&#65289;&#21464;&#37327;gic_irqs&#20445;&#23384;&#20102;&#35813;GIC&#25903;&#25345;&#30340;&#26368;&#22823;&#30340;&#20013;&#26029;&#25968;&#30446;&#12290;&#35813;&#20449;&#24687;&#26159;&#20174;GIC_DIST_CTR&#23492;&#23384;&#22120;&#65288;&#36825;&#26159;V1&#29256;&#26412;&#30340;&#23492;&#23384;&#22120;&#21517;&#23383;&#65292;V2&#20013;&#26159;GICD_TYPER&#65292;Interrupt Controller Type Register,&#65289;&#30340;&#20302;&#20116;&#20301;ITLinesNumber&#33719;&#21462;&#30340;&#12290;&#22914;&#26524;ITLinesNumber&#31561;&#20110;N&#65292;&#37027;&#20040;&#26368;&#22823;&#25903;&#25345;&#30340;&#20013;&#26029;&#25968;&#30446;&#26159;32(N+1)&#12290;&#27492;&#22806;&#65292;GIC&#35268;&#33539;&#35268;&#23450;&#26368;&#22823;&#30340;&#20013;&#26029;&#25968;&#30446;&#19981;&#33021;&#36229;&#36807;1020&#65292;1020-1023&#26159;&#26377;&#29305;&#21035;&#29992;&#25143;&#30340;interrupt ID&#12290; </P>
<P>&#65288;c&#65289;&#20943;&#21435;&#19981;&#38656;&#35201;map&#65288;&#19981;&#38656;&#35201;&#20998;&#37197;IRQ&#65289;&#30340;&#37027;&#20123;interrupt ID&#65292;OK&#65292;&#36825;&#26102;&#20505;gic_irqs&#30340;&#25968;&#20540;&#32456;&#20110;&#21644;&#23427;&#30340;&#21517;&#23383;&#19968;&#33268;&#20102;&#12290;gic_irqs&#20174;&#23383;&#38754;&#19978;&#30475;&#19981;&#23601;&#26159;&#35813;GIC&#38656;&#35201;&#20998;&#37197;&#30340;IRQ number&#30340;&#25968;&#30446;&#21527;&#65311; </P>
<P>&#65288;d&#65289;of_property_read_u32&#20989;&#25968;&#25226;arm,routable-irqs&#30340;&#23646;&#24615;&#20540;&#35835;&#20986;&#21040;nr_routable_irqs&#21464;&#37327;&#20013;&#65292;&#22914;&#26524;&#27491;&#30830;&#36820;&#22238;0&#12290;&#22312;&#26377;&#20123;SOC&#30340;&#35774;&#35745;&#20013;&#65292;&#22806;&#35774;&#30340;&#20013;&#26029;&#35831;&#27714;&#20449;&#21495;&#32447;&#19981;&#26159;&#30452;&#25509;&#25509;&#21040;GIC&#65292;&#32780;&#26159;&#36890;&#36807;crossbar/multiplexer&#36825;&#20010;&#30340;HW block&#36830;&#25509;&#21040;GIC&#19978;&#12290;arm,routable-irqs&#36825;&#20010;&#23646;&#24615;&#29992;&#26469;&#23450;&#20041;&#37027;&#20123;&#19981;&#30452;&#25509;&#36830;&#25509;&#21040;GIC&#30340;&#20013;&#26029;&#35831;&#27714;&#25968;&#30446;&#12290; </P>
<P>&#65288;e&#65289;&#23545;&#20110;&#37027;&#20123;&#30452;&#25509;&#36830;&#25509;&#21040;GIC&#30340;&#24773;&#20917;&#65292;&#25105;&#20204;&#38656;&#35201;&#36890;&#36807;&#35843;&#29992;irq_alloc_descs&#20998;&#37197;&#20013;&#26029;&#25551;&#36848;&#31526;&#12290;&#22914;&#26524;irq_start&#22823;&#20110;0&#65292;&#37027;&#20040;&#35828;&#26126;&#26159;&#25351;&#23450;IRQ number&#30340;&#20998;&#37197;&#65292;&#23545;&#20110;&#25105;&#20204;&#36825;&#20010;&#22330;&#26223;&#65292;irq_start&#31561;&#20110;-1&#65292;&#22240;&#27492;&#19981;&#25351;&#23450;IRQ &#21495;&#12290;&#22914;&#26524;&#19981;&#25351;&#23450;IRQ number&#30340;&#65292;&#23601;&#38656;&#35201;&#25628;&#32034;&#65292;&#31532;&#20108;&#20010;&#21442;&#25968;16&#23601;&#26159;&#36215;&#22987;&#25628;&#32034;&#30340;IRQ number&#12290;gic_irqs&#25351;&#26126;&#35201;&#20998;&#37197;&#30340;irq number&#30340;&#25968;&#30446;&#12290;&#22914;&#26524;&#27809;&#26377;&#27491;&#30830;&#30340;&#20998;&#37197;&#21040;&#20013;&#26029;&#25551;&#36848;&#31526;&#65292;&#31243;&#24207;&#20250;&#35748;&#20026;&#21487;&#33021;&#26159;&#20043;&#21069;&#24050;&#32463;&#20934;&#22791;&#22909;&#20102;&#12290; </P>
<P>&#65288;f&#65289;&#36825;&#27573;&#20195;&#30721;&#20027;&#35201;&#26159;&#21521;&#31995;&#32479;&#20013;&#27880;&#20876;&#19968;&#20010;irq domain&#30340;&#25968;&#25454;&#32467;&#26500;&#12290;&#20026;&#20309;&#38656;&#35201;struct irq_domain&#36825;&#26679;&#19968;&#20010;&#25968;&#25454;&#32467;&#26500;&#21602;&#65311;&#20174;linux kernel&#30340;&#35282;&#24230;&#26469;&#30475;&#65292;&#20219;&#20309;&#22806;&#37096;&#30340;&#35774;&#22791;&#30340;&#20013;&#26029;&#37117;&#26159;&#19968;&#20010;&#24322;&#27493;&#20107;&#20214;&#65292;kernel&#37117;&#38656;&#35201;&#35782;&#21035;&#36825;&#20010;&#20107;&#20214;&#12290;&#22312;&#20869;&#26680;&#20013;&#65292;&#29992;IRQ number&#26469;&#26631;&#35782;&#26576;&#19968;&#20010;&#35774;&#22791;&#30340;&#26576;&#20010;interrupt request&#12290;&#26377;&#20102;IRQ number&#23601;&#21487;&#20197;&#23450;&#20301;&#21040;&#35813;&#20013;&#26029;&#30340;&#25551;&#36848;&#31526;&#65288;struct irq_desc&#65289;&#12290;&#20294;&#26159;&#65292;&#23545;&#20110;&#20013;&#26029;&#25511;&#21046;&#22120;&#32780;&#35328;&#65292;&#23427;&#19981;&#24182;&#30693;&#36947;IRQ number&#65292;&#23427;&#21482;&#26159;&#30693;&#36947;HW interrupt number&#65288;&#20013;&#26029;&#25511;&#21046;&#22120;&#20250;&#20026;&#20854;&#25903;&#25345;&#30340;interrupt source&#36827;&#34892;&#32534;&#30721;&#65292;&#36825;&#20010;&#32534;&#30721;&#34987;&#31216;&#20026;Hardware interrupt number &#65289;&#12290;&#19981;&#21516;&#30340;&#36719;&#20214;&#27169;&#22359;&#29992;&#19981;&#21516;&#30340;ID&#26469;&#35782;&#21035;interrupt source&#65292;&#36825;&#26679;&#23601;&#38656;&#35201;&#26144;&#23556;&#20102;&#12290;&#22914;&#20309;&#23558;Hardware interrupt number &#26144;&#23556;&#21040;IRQ number&#21602;&#65311;&#36825;&#38656;&#35201;&#19968;&#20010;translation object&#65292;&#20869;&#26680;&#23450;&#20041;&#20026;struct irq_domain&#12290; </P>
<P>&#27599;&#20010;interrupt controller&#37117;&#20250;&#24418;&#25104;&#19968;&#20010;irq domain&#65292;&#36127;&#36131;&#35299;&#26512;&#20854;&#19979;&#28216;&#30340;interrut source&#12290;&#22914;&#26524;interrupt controller&#26377;&#32423;&#32852;&#30340;&#24773;&#20917;&#65292;&#37027;&#20040;&#19968;&#20010;&#38750;root interrupt controller&#30340;&#20013;&#26029;&#25511;&#21046;&#22120;&#20063;&#26159;&#20854;parent irq domain&#30340;&#19968;&#20010;&#26222;&#36890;&#30340;interrupt source&#12290;struct irq_domain&#23450;&#20041;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>struct irq_domain { <BR>&#8230;&#8230; <BR>&nbsp;&nbsp;&nbsp; const struct irq_domain_ops *ops; <BR>&nbsp;&nbsp;&nbsp; void *host_data; </P>
<P>&#8230;&#8230; <BR>}; </P></BLOCKQUOTE>
<P>&#36825;&#20010;&#25968;&#25454;&#32467;&#26500;&#26159;&#23646;&#20110;linux kernel&#36890;&#29992;&#20013;&#26029;&#23376;&#31995;&#32479;&#30340;&#19968;&#37096;&#20998;&#65292;&#25105;&#20204;&#36825;&#37324;&#21482;&#26159;&#25551;&#36848;&#30456;&#20851;&#30340;&#25968;&#25454;&#25104;&#21592;&#12290;host_data&#25104;&#21592;&#26159;&#24213;&#23618;interrupt controller&#30340;&#31169;&#26377;&#25968;&#25454;&#65292;linux kernel&#36890;&#29992;&#20013;&#26029;&#23376;&#31995;&#32479;&#19981;&#24212;&#35813;&#20462;&#25913;&#23427;&#12290;&#23545;&#20110;GIC&#32780;&#35328;&#65292;host_data&#25104;&#21592;&#25351;&#21521;&#19968;&#20010;struct gic_chip_data&#30340;&#25968;&#25454;&#32467;&#26500;&#65292;&#23450;&#20041;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>struct gic_chip_data { <BR>&nbsp;&nbsp;&nbsp; union gic_base dist_base;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;GIC Distributor&#30340;&#22522;&#22320;&#22336;&#31354;&#38388; <BR>&nbsp;&nbsp;&nbsp; union gic_base cpu_base;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;GIC CPU interface&#30340;&#22522;&#22320;&#22336;&#31354;&#38388; <BR>#ifdef CONFIG_CPU_PM&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;GIC &#30005;&#28304;&#31649;&#29702;&#30456;&#20851;&#30340;&#25104;&#21592; <BR>&nbsp;&nbsp;&nbsp; u32 saved_spi_enable[DIV_ROUND_UP(1020, 32)]; <BR>&nbsp;&nbsp;&nbsp; u32 saved_spi_conf[DIV_ROUND_UP(1020, 16)]; <BR>&nbsp;&nbsp;&nbsp; u32 saved_spi_target[DIV_ROUND_UP(1020, 4)]; <BR>&nbsp;&nbsp;&nbsp; u32 __percpu *saved_ppi_enable; <BR>&nbsp;&nbsp;&nbsp; u32 __percpu *saved_ppi_conf; <BR>#endif <BR>&nbsp;&nbsp;&nbsp; struct irq_domain *domain;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#35813;GIC&#23545;&#24212;&#30340;irq domain&#25968;&#25454;&#32467;&#26500; <BR>&nbsp;&nbsp;&nbsp; unsigned int gic_irqs;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;GIC&#25903;&#25345;&#30340;IRQ&#30340;&#25968;&#30446; <BR>#ifdef CONFIG_GIC_NON_BANKED <BR>&nbsp;&nbsp;&nbsp; void __iomem *(*get_base)(union gic_base *); <BR>#endif <BR>}; </P></BLOCKQUOTE>
<P>&#23545;&#20110;GIC&#25903;&#25345;&#30340;IRQ&#30340;&#25968;&#30446;&#65292;&#36825;&#37324;&#36824;&#35201;&#36184;&#36848;&#20960;&#21477;&#12290;&#23454;&#38469;&#19978;&#24182;&#38750;GIC&#25903;&#25345;&#22810;&#23569;&#20010;HW interrupt ID&#65292;&#20854;&#23601;&#25903;&#25345;&#22810;&#23569;&#20010;IRQ&#12290;&#23545;&#20110;SGI&#65292;&#20854;&#22788;&#29702;&#27604;&#36739;&#29305;&#21035;&#65292;&#24182;&#19981;&#24402;&#20837;IRQ number&#20013;&#12290;&#22240;&#27492;&#65292;&#23545;&#20110;GIC&#32780;&#35328;&#65292;&#20854;SGI&#65288;&#20174;0&#21040;15&#30340;&#37027;&#20123;HW interrupt ID&#65289;&#19981;&#38656;&#35201;irq domain&#36827;&#34892;&#26144;&#23556;&#22788;&#29702;&#65292;&#20063;&#23601;&#26159;&#35828;SGI&#27809;&#26377;&#23545;&#24212;&#30340;IRQ number&#12290;&#22914;&#26524;&#31995;&#32479;&#36234;&#26469;&#36234;&#22797;&#26434;&#65292;&#19968;&#20010;GIC&#19981;&#33021;&#25903;&#25345;&#25152;&#26377;&#30340;interrupt source&#65288;&#30446;&#21069;GIC&#25903;&#25345;1020&#20010;&#20013;&#26029;&#28304;&#65292;&#36825;&#20010;&#25968;&#30446;&#24050;&#32463;&#38750;&#24120;&#30340;&#22823;&#20102;&#65289;&#65292;&#37027;&#20040;&#31995;&#32479;&#36824;&#38656;&#35201;&#24341;&#20837;secondary GIC&#65292;&#36825;&#20010;GIC&#20027;&#35201;&#36127;&#36131;&#25193;&#23637;&#22806;&#35774;&#30456;&#20851;&#30340;interrupt source&#65292;&#20063;&#23601;&#26159;&#35828;&#65292;secondary GIC&#30340;SGI&#21644;PPI&#37117;&#21464;&#24471;&#20887;&#20313;&#20102;&#65288;&#36825;&#20123;&#21151;&#33021;&#65292;primary GIC&#24050;&#32463;&#25552;&#20379;&#20102;&#65289;&#12290;&#36825;&#20123;&#20449;&#24687;&#21487;&#20197;&#21327;&#21161;&#29702;&#35299;&#20195;&#30721;&#20013;&#30340;hwirq_base&#30340;&#35774;&#23450;&#12290; </P>
<P>&#22312;&#27880;&#20876;GIC&#30340;irq domain&#30340;&#26102;&#20505;&#36824;&#26377;&#19968;&#20010;&#37325;&#35201;&#30340;&#25968;&#25454;&#32467;&#26500;gic_irq_domain_ops&#65292;&#20854;&#31867;&#22411;&#26159;struct irq_domain_ops &#65292;&#23545;&#20110;GIC&#65292;&#20854;irq domain&#30340;&#25805;&#20316;&#20989;&#25968;&#26159;gic_irq_domain_ops&#65292;&#23450;&#20041;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>static const struct irq_domain_ops gic_irq_domain_ops = { <BR>&nbsp;&nbsp;&nbsp; .map = gic_irq_domain_map, <BR>&nbsp;&nbsp;&nbsp; .unmap = gic_irq_domain_unmap, <BR>&nbsp;&nbsp;&nbsp; .xlate = gic_irq_domain_xlate, <BR>}; </P></BLOCKQUOTE>
<P>irq domain&#30340;&#27010;&#24565;&#26159;&#19968;&#20010;&#36890;&#29992;&#20013;&#26029;&#23376;&#31995;&#32479;&#30340;&#27010;&#24565;&#65292;&#22312;&#20855;&#20307;&#30340;irq chip driver&#36825;&#20010;&#23618;&#27425;&#65292;&#25105;&#20204;&#38656;&#35201;&#19968;&#20123;&#35299;&#26512;GIC binding&#65292;&#21019;&#24314;IRQ number&#21644;HW interrupt ID&#30340;mapping&#30340;callback&#20989;&#25968;&#65292;&#26356;&#20855;&#20307;&#30340;&#35299;&#26512;&#21442;&#32771;&#21518;&#25991;&#30340;&#25551;&#36848;&#12290; </P>
<P>&#28459;&#38271;&#30340;&#20934;&#22791;&#36807;&#31243;&#32467;&#26463;&#21518;&#65292;&#20855;&#20307;&#30340;&#27880;&#20876;&#27604;&#36739;&#31616;&#21333;&#65292;&#35843;&#29992;irq_domain_add_legacy&#25110;&#32773;irq_domain_add_linear&#36827;&#34892;&#27880;&#20876;&#23601;OK&#20102;&#12290;&#20851;&#20110;&#36825;&#20004;&#20010;&#25509;&#21475;&#35831;&#21442;&#32771;<A href="http://www.wowotech.net/linux_kenrel/irq-domain.html">linux kernel&#30340;&#20013;&#26029;&#23376;&#31995;&#32479;&#20043;&#65288;&#20108;&#65289;&#65306;irq domain&#20171;&#32461;</A>&#12290; </P>
<P>&#65288;g&#65289; &#19968;&#20010;&#20989;&#25968;&#21517;&#23383;&#26159;&#21542;&#36215;&#30340;&#22909;&#36275;&#21487;&#20197;&#30475;&#20986;&#24037;&#31243;&#24072;&#30340;&#21151;&#21147;&#12290;set_smp_cross_call&#36825;&#20010;&#20989;&#25968;&#30475;&#21517;&#23383;&#20063;&#30693;&#36947;&#23427;&#30340;&#21547;&#20041;&#65292;&#23601;&#26159;&#35774;&#23450;&#19968;&#20010;&#22810;&#20010;CPU&#30452;&#25509;&#36890;&#20449;&#30340;callback&#20989;&#25968;&#12290;&#24403;&#19968;&#20010;CPU core&#19978;&#30340;&#36719;&#20214;&#25511;&#21046;&#34892;&#20026;&#38656;&#35201;&#20256;&#36882;&#21040;&#20854;&#20182;&#30340;CPU&#19978;&#30340;&#26102;&#20505;&#65288;&#20363;&#22914;&#22312;&#26576;&#19968;&#20010;CPU&#19978;&#36816;&#34892;&#30340;&#36827;&#31243;&#35843;&#29992;&#20102;&#31995;&#32479;&#35843;&#29992;&#36827;&#34892;reboot&#65289;&#65292;&#23601;&#20250;&#35843;&#29992;&#36825;&#20010;callback&#20989;&#25968;&#12290;&#23545;&#20110;GIC&#65292;&#36825;&#20010;callback&#23450;&#20041;&#20026;gic_raise_softirq&#12290;&#36825;&#20010;&#20989;&#25968;&#21517;&#23383;&#36215;&#30340;&#19981;&#22909;&#65292;&#30452;&#35266;&#19978;&#20197;&#20026;&#26159;&#21644;softirq&#30456;&#20851;&#65292;&#23454;&#38469;&#19978;&#20854;&#23454;&#26159;&#35302;&#21457;&#20102;IPI&#20013;&#26029;&#12290; </P>
<P>&#65288;h&#65289;&#22312;multi processor&#29615;&#22659;&#19979;&#65292;&#24403;processor&#29366;&#24577;&#21457;&#36865;&#21464;&#21270;&#30340;&#26102;&#20505;&#65288;&#20363;&#22914;online&#65292;offline&#65289;&#65292;&#38656;&#35201;&#25226;&#36825;&#20123;&#20107;&#20214;&#36890;&#30693;&#21040;GIC&#12290;&#32780;GIC driver&#22312;&#25910;&#21040;&#26469;&#33258;CPU&#30340;&#20107;&#20214;&#21518;&#20250;&#23545;cpu interface&#36827;&#34892;&#30456;&#24212;&#30340;&#35774;&#23450;&#12290; </P>
<P>&nbsp; </P>
<P>3&#12289;GIC&#30828;&#20214;&#21021;&#22987;&#21270; </P>
<P>&#65288;1&#65289;Distributor&#21021;&#22987;&#21270;&#65292;&#20195;&#30721;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>static void __init gic_dist_init(struct gic_chip_data *gic) <BR>{ <BR>&nbsp;&nbsp;&nbsp; unsigned int i; <BR>&nbsp;&nbsp;&nbsp; u32 cpumask; <BR>&nbsp;&nbsp;&nbsp; unsigned int gic_irqs = gic-&gt;gic_irqs;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#33719;&#21462;&#35813;GIC&#25903;&#25345;&#30340;IRQ&#30340;&#25968;&#30446; <BR>&nbsp;&nbsp;&nbsp; void __iomem *base = gic_data_dist_base(gic); &#65293;&#65293;&#65293;&#65293;&#33719;&#21462;&#35813;GIC&#23545;&#24212;&#30340;Distributor&#22522;&#22320;&#22336; </P>
<P>&nbsp;&nbsp;&nbsp; writel_relaxed(0, base + GIC_DIST_CTRL); &#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;a&#65289; </P>
<P><BR>&nbsp;&nbsp;&nbsp; cpumask = gic_get_cpumask(gic);&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;b&#65289; <BR>&nbsp;&nbsp;&nbsp; cpumask |= cpumask &lt;&lt; 8; <BR>&nbsp;&nbsp;&nbsp; cpumask |= cpumask &lt;&lt; 16;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;c&#65289; <BR>&nbsp;&nbsp;&nbsp; for (i = 32; i &lt; gic_irqs; i += 4) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; writel_relaxed(cpumask, base + GIC_DIST_TARGET + i * 4 / 4); &#65293;&#65293;&#65288;d&#65289; </P>
<P>&nbsp;&nbsp;&nbsp; gic_dist_config(base, gic_irqs, NULL); &#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;e&#65289; </P>
<P>&nbsp;&nbsp;&nbsp; writel_relaxed(1, base + GIC_DIST_CTRL);&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;f&#65289; <BR>} </P></BLOCKQUOTE>
<P>&#65288;a&#65289;Distributor Control Register&#29992;&#26469;&#25511;&#21046;&#20840;&#23616;&#30340;&#20013;&#26029;forward&#24773;&#20917;&#12290;&#20889;&#20837;0&#34920;&#31034;Distributor&#19981;&#21521;CPU interface&#21457;&#36865;&#20013;&#26029;&#35831;&#27714;&#20449;&#21495;&#65292;&#20063;&#23601;disable&#20102;&#20840;&#37096;&#30340;&#20013;&#26029;&#35831;&#27714;&#65288;group 0&#21644;group 1&#65289;&#65292;CPU interace&#20877;&#20063;&#25910;&#19981;&#21040;&#20013;&#26029;&#35831;&#27714;&#20449;&#21495;&#20102;&#12290;&#22312;&#21021;&#22987;&#21270;&#30340;&#26368;&#21518;&#65292;step&#65288;f&#65289;&#37027;&#37324;&#20250;&#36827;&#34892;enable&#30340;&#21160;&#20316;&#65288;&#36825;&#37324;&#21482;&#26159;enable&#20102;group 0&#30340;&#20013;&#26029;&#65289;&#12290;&#22312;&#21021;&#22987;&#21270;&#20195;&#30721;&#20013;&#65292;&#24182;&#27809;&#26377;&#35774;&#23450;interrupt source&#30340;group&#65288;&#23492;&#23384;&#22120;&#26159;GIC_DIST_IGROUP&#65289;&#65292;&#25105;&#30456;&#20449;&#32570;&#30465;&#20540;&#23601;&#26159;&#35774;&#23450;&#20026;group 0&#30340;&#12290; </P>
<P>&#65288;b&#65289;&#25105;&#20204;&#20808;&#30475;&#30475;gic_get_cpumask&#30340;&#20195;&#30721;&#65306; </P>
<BLOCKQUOTE>
<P>static u8 gic_get_cpumask(struct gic_chip_data *gic) <BR>{ <BR>&nbsp;&nbsp;&nbsp; void __iomem *base = gic_data_dist_base(gic); <BR>&nbsp;&nbsp;&nbsp; u32 mask, i; </P>
<P>&nbsp;&nbsp;&nbsp; for (i = mask = 0; i &lt; 32; i += 4) { <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mask = readl_relaxed(base + GIC_DIST_TARGET + i); <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mask |= mask &gt;&gt; 16; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mask |= mask &gt;&gt; 8; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (mask) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break; <BR>&nbsp;&nbsp;&nbsp; } </P>
<P>&nbsp;&nbsp;&nbsp; return mask; <BR>} </P></BLOCKQUOTE>
<P>&#36825;&#37324;&#25805;&#20316;&#30340;&#23492;&#23384;&#22120;&#26159;Interrupt Processor Targets Registers&#65292;&#35813;&#23492;&#23384;&#22120;&#32452;&#20013;&#65292;&#27599;&#20010;GIC&#19978;&#30340;interrupt ID&#37117;&#26377;8&#20010;bit&#26469;&#25511;&#21046;&#36865;&#36798;&#30340;target CPU&#12290;&#25105;&#20204;&#26469;&#30475;&#30475;&#19979;&#38754;&#30340;&#22270;&#29255;&#65306; </P>
<P><A href="http://www.wowotech.net/content/uploadfile/201409/eb40e557055dc9efc3633f73ff0ad3b520140904115901.gif"><IMG title="cpu mask" style="BORDER-LEFT-WIDTH: 0px; BORDER-RIGHT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; DISPLAY: inline; BORDER-TOP-WIDTH: 0px" border=0 alt="cpu mask" src="http://www.wowotech.net/content/uploadfile/201409/b82a9c1eec7bfc66eed6ed4086d9d80420140904115902.gif" width=673 height=498></A> </P>
<P>GIC_DIST_TARGETn&#65288;Interrupt Processor Targets Registers&#65289;&#20301;&#20110;Distributor HW block&#20013;&#65292;&#33021;&#25511;&#21046;&#36865;&#36798;&#30340;CPU interface&#65292;&#24182;&#19981;&#26159;&#20855;&#20307;&#30340;CPU&#65292;&#22914;&#26524;&#20855;&#20307;&#30340;&#23454;&#29616;&#20013;CPU interface&#21644;CPU&#26159;&#20005;&#26684;&#25353;&#29031;&#19978;&#22270;&#20013;&#37027;&#26679;&#19968;&#19968;&#23545;&#24212;&#65292;&#37027;&#20040;GIC_DIST_TARGET&#36865;&#36798;&#20102;CPU Interface n&#65292;&#20063;&#23601;&#26159;&#36865;&#36798;&#20102;CPU n&#12290;&#24403;&#28982;&#29616;&#23454;&#26410;&#24517;&#22914;&#20320;&#25152;&#24895;&#65292;&#37027;&#20040;&#24590;&#26679;&#26469;&#33719;&#21462;&#36825;&#20010;CPU&#30340;mask&#21602;&#65311;&#25105;&#20204;&#30693;&#36947;SGI&#21644;PPI&#19981;&#38656;&#35201;&#20351;&#29992;GIC_DIST_TARGET&#25511;&#21046;target CPU&#12290;SGI&#36865;&#36798;&#30446;&#26631;CPU&#26377;&#33258;&#24049;&#29305;&#26377;&#30340;&#23492;&#23384;&#22120;&#26469;&#25511;&#21046;&#65288;Software Generated Interrupt Register&#65289;&#65292;&#23545;&#20110;PPI&#65292;&#20854;&#26159;CPU&#31169;&#26377;&#30340;&#65292;&#22240;&#27492;&#19981;&#38656;&#35201;&#25511;&#21046;target CPU&#12290;GIC_DIST_TARGET0&#65374;GIC_DIST_TARGET7&#26159;&#25511;&#21046;0&#65374;31&#36825;32&#20010;interrupt ID&#65288;SGI&#21644;PPI&#65289;&#30340;target CPU&#30340;&#65292;&#20294;&#26159;&#23454;&#38469;&#19978;SGI&#21644;PPI&#26159;&#19981;&#38656;&#35201;&#25511;&#21046;target CPU&#30340;&#65292;&#22240;&#27492;&#65292;&#36825;&#20123;&#23492;&#23384;&#22120;&#26159;read only&#30340;&#65292;&#35835;&#21462;&#36825;&#20123;&#23492;&#23384;&#22120;&#36820;&#22238;&#30340;&#23601;&#26159;cpu mask&#20540;&#12290;&#20551;&#35774;CPU0&#25509;&#22312;CPU interface 4&#19978;&#65292;&#37027;&#20040;&#36816;&#34892;&#22312;CPU 0&#19978;&#30340;&#31243;&#24207;&#22312;&#35835;GIC_DIST_TARGET0&#65374;GIC_DIST_TARGET7&#30340;&#26102;&#20505;&#65292;&#36820;&#22238;&#30340;&#23601;&#26159;0b00010000&#12290; </P>
<P>&#24403;&#28982;&#65292;&#30001;&#20110;GIC-400&#21482;&#25903;&#25345;8&#20010;CPU&#65292;&#22240;&#27492;CPU mask&#20540;&#21482;&#38656;&#35201;8bit&#65292;&#20294;&#26159;&#23492;&#23384;&#22120;GIC_DIST_TARGETn&#36820;&#22238;32&#20010;bit&#30340;&#20540;&#65292;&#24590;&#20040;&#23545;&#24212;&#65311;&#24456;&#31616;&#21333;&#65292;cpu mask&#37325;&#22797;&#22235;&#27425;&#23601;OK&#20102;&#12290;&#20102;&#35299;&#20102;&#36825;&#20123;&#30693;&#35782;&#65292;&#22238;&#22836;&#30475;&#20195;&#30721;&#23601;&#24456;&#31616;&#21333;&#20102;&#12290; </P>
<P>&#65288;c&#65289;step &#65288;b&#65289;&#20013;&#33719;&#21462;&#20102;8&#20010;bit&#30340;cpu mask&#20540;&#65292;&#36890;&#36807;&#31616;&#21333;&#30340;copy&#65292;&#25193;&#20805;&#20026;32&#20010;bit&#65292;&#27599;8&#20010;bit&#37117;&#26159;cpu mask&#30340;&#20540;&#65292;&#36825;&#20040;&#20570;&#26159;&#20026;&#20102;&#19979;&#19968;&#27493;&#35774;&#23450;&#25152;&#26377;IRQ&#65288;&#23545;&#20110;GIC&#32780;&#35328;&#23601;&#26159;SPI&#31867;&#22411;&#30340;&#20013;&#26029;&#65289;&#30340;CPU mask&#12290; </P>
<P>&#65288;d&#65289;&#35774;&#23450;&#27599;&#20010;SPI&#31867;&#22411;&#30340;&#20013;&#26029;&#37117;&#26159;&#21482;&#36865;&#36798;&#35813;CPU&#12290; </P>
<P>&#65288;e&#65289;&#37197;&#32622;GIC distributor&#30340;&#20854;&#20182;&#23492;&#23384;&#22120;&#65292;&#20195;&#30721;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>void __init gic_dist_config(void __iomem *base, int gic_irqs,&nbsp; void (*sync_access)(void)) <BR>{ <BR>&nbsp;&nbsp;&nbsp; unsigned int i; </P>
<P>&nbsp;&nbsp;&nbsp; /* Set all global interrupts to be level triggered, active low.&nbsp;&nbsp;&nbsp; */ <BR>&nbsp;&nbsp;&nbsp; for (i = 32; i &lt; gic_irqs; i += 16) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; writel_relaxed(0, base + GIC_DIST_CONFIG + i / 4); </P>
<P>&nbsp;&nbsp;&nbsp; /* Set priority on all global interrupts.&nbsp;&nbsp; */ <BR>&nbsp;&nbsp;&nbsp; for (i = 32; i &lt; gic_irqs; i += 4) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; writel_relaxed(0xa0a0a0a0, base + GIC_DIST_PRI + i); </P>
<P>&nbsp;&nbsp;&nbsp; /* Disable all interrupts.&nbsp; Leave the PPI and SGIs alone as they are enabled by redistributor registers.&nbsp;&nbsp;&nbsp; */ <BR>&nbsp;&nbsp;&nbsp; for (i = 32; i &lt; gic_irqs; i += 32) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; writel_relaxed(0xffffffff, base + GIC_DIST_ENABLE_CLEAR + i / 8); </P>
<P>&nbsp;&nbsp;&nbsp; if (sync_access) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sync_access(); <BR>} </P></BLOCKQUOTE>
<P>&#31243;&#24207;&#30340;&#27880;&#37322;&#24050;&#32463;&#38750;&#24120;&#28165;&#26970;&#20102;&#65292;&#36825;&#37324;&#23601;&#19981;&#32454;&#36848;&#20102;&#12290;&#38656;&#35201;&#27880;&#24847;&#30340;&#26159;&#65306;&#36825;&#37324;&#35774;&#23450;&#30340;&#37117;&#26159;&#32570;&#30465;&#20540;&#65292;&#23454;&#38469;&#19978;&#65292;&#22312;&#21508;&#31181;driver&#30340;&#21021;&#22987;&#21270;&#36807;&#31243;&#20013;&#65292;&#36824;&#26159;&#26377;&#21487;&#33021;&#25913;&#21160;&#36825;&#20123;&#35774;&#32622;&#30340;&#65288;&#20363;&#22914;&#35302;&#21457;&#26041;&#24335;&#65289;&#12290; </P>
<P>&nbsp; </P>
<P>&#65288;2&#65289;CPU interface&#21021;&#22987;&#21270;&#65292;&#20195;&#30721;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>static void gic_cpu_init(struct gic_chip_data *gic) <BR>{ <BR>&nbsp;&nbsp;&nbsp; void __iomem *dist_base = gic_data_dist_base(gic);&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;Distributor&#30340;&#22522;&#22320;&#22336;&#31354;&#38388; <BR>&nbsp;&nbsp;&nbsp; void __iomem *base = gic_data_cpu_base(gic);&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;CPU interface&#30340;&#22522;&#22320;&#22336;&#31354;&#38388; <BR>&nbsp;&nbsp;&nbsp; unsigned int cpu_mask, cpu = smp_processor_id();&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#33719;&#21462;CPU&#30340;&#36923;&#36753;ID <BR>&nbsp;&nbsp;&nbsp; int i; </P>
<P><BR>&nbsp;&nbsp;&nbsp; cpu_mask = gic_get_cpumask(gic);&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;a&#65289; <BR>&nbsp;&nbsp;&nbsp; gic_cpu_map[cpu] = cpu_mask; </P>
<P><BR>&nbsp;&nbsp;&nbsp; for (i = 0; i &lt; NR_GIC_CPU_IF; i++) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (i != cpu) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gic_cpu_map[i] &amp;= ~cpu_mask; &#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;b&#65289; </P>
<P>&nbsp;&nbsp;&nbsp; gic_cpu_config(dist_base, NULL); &#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;c&#65289; </P>
<P>&nbsp;&nbsp;&nbsp; writel_relaxed(0xf0, base + GIC_CPU_PRIMASK);&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;d&#65289; <BR>&nbsp;&nbsp;&nbsp; writel_relaxed(1, base + GIC_CPU_CTRL);&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;e&#65289; <BR>} </P></BLOCKQUOTE>
<P>&#65288;a&#65289;&#31995;&#32479;&#36719;&#20214;&#23454;&#38469;&#19978;&#26159;&#20351;&#29992;CPU &#36923;&#36753;ID&#36825;&#20010;&#27010;&#24565;&#30340;&#65292;&#36890;&#36807;smp_processor_id&#21487;&#20197;&#33719;&#24471;&#26412;CPU&#30340;&#36923;&#36753;ID&#12290;gic_cpu_map&#36825;&#20010;&#20840;&#37096;lookup table&#23601;&#26159;&#29992;CPU &#36923;&#36753;ID&#20316;&#20026;&#25152;&#20197;&#65292;&#21435;&#23547;&#25214;&#20854;cpu mask&#65292;&#21518;&#32493;&#36890;&#36807;cpu mask&#20540;&#26469;&#25511;&#21046;&#20013;&#26029;&#26159;&#21542;&#36865;&#36798;&#35813;CPU&#12290;&#22312;gic_init_bases&#20989;&#25968;&#20013;&#65292;&#25105;&#20204;&#23558;&#35813;lookup table&#20013;&#30340;&#20540;&#37117;&#21021;&#22987;&#21270;&#20026;0xff&#65292;&#20063;&#23601;&#26159;&#35828;&#19981;&#36827;&#34892;mask&#65292;&#36865;&#36798;&#25152;&#26377;&#30340;CPU&#12290;&#36825;&#37324;&#65292;&#25105;&#20204;&#20250;&#36827;&#34892;&#37325;&#26032;&#20462;&#27491;&#12290; </P>
<P>&#65288;b&#65289;&#28165;&#38500;lookup table&#20013;&#20854;&#20182;entry&#20013;&#26412;cpu mask&#30340;&#37027;&#20010;bit&#12290; </P>
<P>&#65288;c&#65289;&#35774;&#23450;SGI&#21644;PPI&#30340;&#21021;&#22987;&#20540;&#12290;&#20855;&#20307;&#20195;&#30721;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>void gic_cpu_config(void __iomem *base, void (*sync_access)(void)) <BR>{ <BR>&nbsp;&nbsp;&nbsp; int i; </P>
<P>&nbsp;&nbsp;&nbsp; /* Deal with the banked PPI and SGI interrupts - disable all <BR>&nbsp;&nbsp;&nbsp;&nbsp; * PPI interrupts, ensure all SGI interrupts are enabled.&nbsp;&nbsp;&nbsp;&nbsp; */ <BR>&nbsp;&nbsp;&nbsp; writel_relaxed(0xffff0000, base + GIC_DIST_ENABLE_CLEAR); <BR>&nbsp;&nbsp;&nbsp; writel_relaxed(0x0000ffff, base + GIC_DIST_ENABLE_SET); </P>
<P>&nbsp;&nbsp;&nbsp; /* Set priority on PPI and SGI interrupts&nbsp;&nbsp;&nbsp; */ <BR>&nbsp;&nbsp;&nbsp; for (i = 0; i &lt; 32; i += 4) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; writel_relaxed(0xa0a0a0a0, base + GIC_DIST_PRI + i * 4 / 4); </P>
<P>&nbsp;&nbsp;&nbsp; if (sync_access) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; sync_access(); <BR>} </P></BLOCKQUOTE>
<P>&#31243;&#24207;&#30340;&#27880;&#37322;&#24050;&#32463;&#38750;&#24120;&#28165;&#26970;&#20102;&#65292;&#36825;&#37324;&#23601;&#19981;&#32454;&#36848;&#20102;&#12290; </P>
<P>&#65288;d&#65289;&#36890;&#36807;Distributor&#20013;&#30340;&#23492;&#23384;&#22120;&#21487;&#20197;&#25511;&#21046;&#36865;&#36798;CPU interface&#65292;&#20013;&#26029;&#26469;&#21040;&#20102;GIC&#30340;CPU interface&#26159;&#21542;&#21487;&#20197;&#30495;&#27491;&#36865;&#36798;CPU&#21602;&#65311;&#20063;&#19981;&#19968;&#23450;&#65292;&#36824;&#26377;&#19968;&#36947;&#20851;&#21345;&#65292;&#20063;&#23601;&#26159;CPU interface&#20013;&#30340;Interrupt Priority Mask Register&#12290;&#36825;&#20010;&#23492;&#23384;&#22120;&#35774;&#23450;&#20102;&#19968;&#20010;&#20013;&#26029;&#20248;&#20808;&#32423;&#30340;&#20540;&#65292;&#21482;&#26377;&#20013;&#26029;&#20248;&#20808;&#32423;&#39640;&#36807;&#35813;&#20540;&#30340;&#20013;&#26029;&#35831;&#27714;&#25165;&#20250;&#34987;&#36865;&#21040;CPU&#19978;&#21435;&#12290;&#25105;&#20204;&#22312;&#21069;&#38754;&#21021;&#22987;&#21270;&#30340;&#26102;&#20505;&#65292;&#32473;&#27599;&#20010;interrupt ID&#35774;&#23450;&#30340;&#32570;&#30465;&#20248;&#20808;&#32423;&#26159;0xa0&#65292;&#36825;&#37324;&#35774;&#23450;&#30340;priority filter&#30340;&#20248;&#20808;&#32423;&#20540;&#26159;0xf0&#12290;&#25968;&#20540;&#36234;&#23567;&#65292;&#20248;&#20808;&#32423;&#36234;&#36807;&#12290;&#22240;&#27492;&#65292;&#36825;&#26679;&#30340;&#35774;&#23450;&#23601;&#26159;&#35753;&#25152;&#26377;&#30340;interrupt source&#37117;&#21487;&#20197;&#36865;&#36798;CPU&#65292;&#22312;CPU interface&#36825;&#37324;&#19981;&#20570;&#25511;&#21046;&#20102;&#12290; </P>
<P>&#65288;e&#65289;&#35774;&#23450;CPU interface&#30340;control register&#12290;enable&#20102;group 0&#30340;&#20013;&#26029;&#65292;disable&#20102;group 1&#30340;&#20013;&#26029;&#65292;group 0&#30340;interrupt source&#35302;&#21457;IRQ&#20013;&#26029;&#65288;&#32780;&#19981;&#26159;FIQ&#20013;&#26029;&#65289;&#12290; </P>
<P>&nbsp; </P>
<P>&#65288;3&#65289;GIC&#30005;&#28304;&#31649;&#29702;&#21021;&#22987;&#21270;&#65292;&#20195;&#30721;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>static void __init gic_pm_init(struct gic_chip_data *gic) <BR>{ <BR>&nbsp;&nbsp;&nbsp; gic-&gt;saved_ppi_enable = __alloc_percpu(DIV_ROUND_UP(32, 32) * 4, sizeof(u32)); </P>
<P>&nbsp;&nbsp;&nbsp; gic-&gt;saved_ppi_conf = __alloc_percpu(DIV_ROUND_UP(32, 16) * 4,&nbsp; sizeof(u32)); </P>
<P>&nbsp;&nbsp;&nbsp; if (gic == &amp;gic_data[0]) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cpu_pm_register_notifier(&amp;gic_notifier_block); <BR>} </P></BLOCKQUOTE>
<P>&#36825;&#27573;&#20195;&#30721;&#21069;&#38754;&#20027;&#35201;&#26159;&#20998;&#37197;&#20004;&#20010;per cpu&#30340;&#20869;&#23384;&#12290;&#36825;&#20123;&#20869;&#23384;&#22312;&#31995;&#32479;&#36827;&#20837;sleep&#29366;&#24577;&#30340;&#26102;&#20505;&#20445;&#23384;PPI&#30340;&#23492;&#23384;&#22120;&#29366;&#24577;&#20449;&#24687;&#65292;&#22312;resume&#30340;&#26102;&#20505;&#65292;&#20889;&#22238;&#23492;&#23384;&#22120;&#12290;&#23545;&#20110;root GIC&#65292;&#38656;&#35201;&#27880;&#20876;&#19968;&#20010;&#21644;&#30005;&#28304;&#31649;&#29702;&#30340;&#20107;&#20214;&#36890;&#30693;callback&#20989;&#25968;&#12290;&#19981;&#24471;&#19981;&#21520;&#27133;&#19968;&#19979;gic_notifier_block&#21644;gic_notifier&#36825;&#20004;&#20010;&#31526;&#21495;&#30340;&#21629;&#21517;&#65292;&#30475;&#19981;&#20986;&#26469;&#21644;&#30005;&#28304;&#31649;&#29702;&#26377;&#20219;&#20309;&#20851;&#31995;&#12290;&#26356;&#20248;&#38597;&#30340;&#21517;&#23383;&#24212;&#35813;&#21253;&#25324;pm&#36825;&#26679;&#30340;&#31526;&#21495;&#65292;&#20197;&#20415;&#35753;&#20854;&#20182;&#24037;&#31243;&#24072;&#30475;&#21040;&#21517;&#23383;&#23601;&#31435;&#21051;&#30693;&#36947;&#26159;&#21644;&#30005;&#28304;&#31649;&#29702;&#30456;&#20851;&#30340;&#12290; </P>
<P>&nbsp; </P>
<P>&#22235;&#12289;GIC callback&#20989;&#25968;&#20998;&#26512; </P>
<P>1&#12289;irq domain&#30456;&#20851;callback&#20989;&#25968;&#20998;&#26512; </P>
<P>irq domain&#30456;&#20851;callback&#20989;&#25968;&#21253;&#25324;&#65306; </P>
<P>&#65288;1&#65289;gic_irq_domain_map&#20989;&#25968;&#65306;&#21019;&#24314;IRQ number&#21644;GIC hw interrupt ID&#20043;&#38388;&#26144;&#23556;&#20851;&#31995;&#30340;&#26102;&#20505;&#65292;&#38656;&#35201;&#35843;&#29992;&#35813;&#22238;&#35843;&#20989;&#25968;&#12290;&#20855;&#20307;&#20195;&#30721;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>static int gic_irq_domain_map(struct irq_domain *d, unsigned int irq, irq_hw_number_t hw) <BR>{ <BR>&nbsp;&nbsp;&nbsp; if (hw &lt; 32) {&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;SGI&#25110;&#32773;PPI <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; irq_set_percpu_devid(irq);&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;a&#65289; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; irq_set_chip_and_handler(irq, &amp;gic_chip, handle_percpu_devid_irq);&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;b&#65289; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set_irq_flags(irq, IRQF_VALID | IRQF_NOAUTOEN);&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;c&#65289; <BR>&nbsp;&nbsp;&nbsp; } else { <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; irq_set_chip_and_handler(irq, &amp;gic_chip, handle_fasteoi_irq);&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;d&#65289; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set_irq_flags(irq, IRQF_VALID | IRQF_PROBE); </P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gic_routable_irq_domain_ops-&gt;map(d, irq, hw);&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;e&#65289; <BR>&nbsp;&nbsp;&nbsp; } <BR>&nbsp;&nbsp;&nbsp; irq_set_chip_data(irq, d-&gt;host_data);&#65293;&#65293;&#65293;&#65293;&#65293;&#35774;&#23450;irq chip&#30340;&#31169;&#26377;&#25968;&#25454; <BR>&nbsp;&nbsp;&nbsp; return 0; <BR>} </P></BLOCKQUOTE>
<P>&#65288;a&#65289;SGI&#25110;&#32773;PPI&#21644;SPI&#26368;&#22823;&#30340;&#19981;&#21516;&#26159;per cpu&#30340;&#65292;SPI&#26159;&#25152;&#26377;CPU&#20849;&#20139;&#30340;&#65292;&#22240;&#27492;&#38656;&#35201;&#20998;&#37197;per cpu&#30340;&#20869;&#23384;&#65292;&#35774;&#23450;&#19968;&#20123;per cpu&#30340;flag&#12290; </P>
<P>&#65288;b&#65289;&#35774;&#23450;&#35813;&#20013;&#26029;&#25551;&#36848;&#31526;&#30340;irq chip&#21644;high level&#30340;handler </P>
<P>&#65288;c&#65289;&#35774;&#23450;irq flag&#26159;&#26377;&#25928;&#30340;&#65288;&#22240;&#20026;&#24050;&#32463;&#35774;&#23450;&#22909;&#20102;chip&#21644;handler&#20102;&#65289;&#65292;&#24182;&#19988;request&#21518;&#19981;&#26159;auto enable&#30340;&#12290; </P>
<P>&#65288;d&#65289;&#23545;&#20110;SPI&#65292;&#35774;&#23450;&#30340;high level irq event handler&#26159;handle_fasteoi_irq&#12290;&#23545;&#20110;SPI&#65292;&#26159;&#21487;&#20197;probe&#65292;&#24182;&#19988;request&#21518;&#26159;auto enable&#30340;&#12290; </P>
<P>&#65288;e&#65289;&#26377;&#20123;SOC&#20250;&#22312;&#21508;&#31181;&#22806;&#35774;&#20013;&#26029;&#21644;GIC&#20043;&#38388;&#22686;&#21152;cross bar&#65288;&#20363;&#22914;TI&#30340;OMAP&#33455;&#29255;&#65289;&#65292;&#36825;&#37324;&#26159;&#20026;&#37027;&#20123;ARM SOC&#20934;&#22791;&#30340; </P>
<P>&nbsp; </P>
<P>&#65288;2&#65289;gic_irq_domain_unmap&#26159;gic_irq_domain_map&#30340;&#36870;&#36807;&#31243;&#20063;&#23601;&#26159;&#35299;&#38500;IRQ number&#21644;GIC hw interrupt ID&#20043;&#38388;&#26144;&#23556;&#20851;&#31995;&#30340;&#26102;&#20505;&#65292;&#38656;&#35201;&#35843;&#29992;&#35813;&#22238;&#35843;&#20989;&#25968;&#12290; </P>
<P>&#65288;3&#65289;gic_irq_domain_xlate&#20989;&#25968;&#65306;&#38500;&#20102;&#26631;&#20934;&#30340;&#23646;&#24615;&#20043;&#22806;&#65292;&#21508;&#20010;&#20855;&#20307;&#30340;interrupt controller&#21487;&#20197;&#23450;&#20041;&#33258;&#24049;&#30340;device binding&#12290;&#36825;&#20123;device bindings&#37117;&#38656;&#22312;irq chip driver&#36825;&#20010;&#23618;&#38754;&#36827;&#34892;&#35299;&#26512;&#12290;&#35201;&#32473;&#23450;&#26576;&#20010;&#22806;&#35774;&#30340;device tree node &#21644;interrupt specifier&#65292;&#35813;&#20989;&#25968;&#21487;&#20197;&#35299;&#30721;&#20986;&#35813;&#35774;&#22791;&#20351;&#29992;&#30340;hw interrupt ID&#21644;linux irq type value &#12290;&#20855;&#20307;&#30340;&#20195;&#30721;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>static int gic_irq_domain_xlate(struct irq_domain *d, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct device_node *controller, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const u32 *intspec, unsigned int intsize,&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#36755;&#20837;&#21442;&#25968; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsigned long *out_hwirq, unsigned int *out_type)&#65293;&#65293;&#65293;&#65293;&#36755;&#20986;&#21442;&#25968; <BR>{ <BR>&nbsp;&nbsp;&nbsp; unsigned long ret = 0;&nbsp; <BR>&nbsp;&nbsp;&nbsp; *out_hwirq = intspec[1] + 16; &#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;a&#65289; </P>
<P>&nbsp;&nbsp;&nbsp; *out_type = intspec[2] &amp; IRQ_TYPE_SENSE_MASK; &#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;b&#65289; </P>
<P>&nbsp;&nbsp;&nbsp; return ret; <BR>} </P></BLOCKQUOTE>
<P>&#65288;a&#65289;&#26681;&#25454;gic binding&#25991;&#26723;&#30340;&#25551;&#36848;&#65292;&#20854;interrupt specifier&#21253;&#25324;3&#20010;cell&#65292;&#20998;&#21035;&#26159;interrupt type&#65288;0 &#34920;&#31034;SPI&#65292;1&#34920;&#31034;PPI&#65289;&#65292;interrupt number&#65288;&#23545;&#20110;PPI&#65292;&#33539;&#22260;&#26159;[0-15]&#65292;&#23545;&#20110;SPI&#65292;&#33539;&#22260;&#26159;[0-987]&#65289;&#65292;interrupt flag&#65288;&#35302;&#21457;&#26041;&#24335;&#65289;&#12290;GIC interrupt specifier&#20013;&#30340;interrupt number&#38656;&#35201;&#21152;&#19978;16&#65288;&#20063;&#23601;&#26159;&#21152;&#19978;SGI&#30340;&#37027;&#20123;ID&#21495;&#65289;&#65292;&#25165;&#33021;&#36716;&#25442;&#25104;GIC&#30340;HW interrupt ID&#12290; </P>
<P>&#65288;b&#65289;&#21462;&#20986;bits[3:0]&#30340;&#20449;&#24687;&#65292;&#36825;&#20123;bits&#20445;&#23384;&#20102;&#35302;&#21457;&#26041;&#24335;&#30340;&#20449;&#24687; </P>
<P>&nbsp; </P>
<P>2&#12289;&#30005;&#28304;&#31649;&#29702;&#30340;callback&#20989;&#25968; </P>
<P>TODO </P>
<P>&nbsp; </P>
<P>3&#12289;irq chip&#22238;&#35843;&#20989;&#25968;&#20998;&#26512; </P>
<P>&#65288;1&#65289;gic_mask_irq&#20989;&#25968; </P>
<P>&#36825;&#20010;&#20989;&#25968;&#29992;&#26469;mask&#19968;&#20010;interrupt source&#12290;&#20195;&#30721;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>static void gic_mask_irq(struct irq_data *d) <BR>{ <BR>&nbsp;&nbsp;&nbsp; u32 mask = 1 &lt;&lt; (gic_irq(d) % 32); </P>
<P>&nbsp;&nbsp;&nbsp; raw_spin_lock(&amp;irq_controller_lock); <BR>&nbsp;&nbsp;&nbsp; writel_relaxed(mask, gic_dist_base(d) + GIC_DIST_ENABLE_CLEAR + (gic_irq(d) / 32) * 4); <BR>&nbsp;&nbsp;&nbsp; if (gic_arch_extn.irq_mask) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gic_arch_extn.irq_mask(d); <BR>&nbsp;&nbsp;&nbsp; raw_spin_unlock(&amp;irq_controller_lock); <BR>} </P></BLOCKQUOTE>
<P>GIC&#26377;&#33509;&#24178;&#20010;&#21483;&#20570;Interrupt Clear-Enable Registers&#65288;&#20855;&#20307;&#25968;&#30446;&#26159;&#21644;GIC&#25903;&#25345;&#30340;hw interrupt&#25968;&#30446;&#30456;&#20851;&#65292;&#25105;&#20204;&#21069;&#38754;&#35828;&#36807;&#30340;&#65292;GIC&#26159;&#19968;&#20010;&#39640;&#24230;&#21487;&#37197;&#32622;&#30340;interrupt controller&#65289;&#12290;&#36825;&#20123;Interrupt Clear-Enable Registers&#23492;&#23384;&#22120;&#30340;&#27599;&#20010;bit&#21487;&#20197;&#25511;&#21046;&#19968;&#20010;interrupt source&#26159;&#21542;forward&#21040;CPU interface&#65292;&#20889;&#20837;1&#34920;&#31034;Distributor&#19981;&#20877;forward&#35813;interrupt&#65292;&#22240;&#27492;CPU&#20063;&#23601;&#24863;&#30693;&#19981;&#21040;&#35813;&#20013;&#26029;&#65292;&#20063;&#23601;&#26159;mask&#20102;&#35813;&#20013;&#26029;&#12290;&#29305;&#21035;&#38656;&#35201;&#27880;&#24847;&#30340;&#26159;&#65306;&#20889;&#20837;0&#26080;&#25928;&#65292;&#32780;&#19981;&#26159;unmask&#30340;&#25805;&#20316;&#12290; </P>
<P>&#30001;&#20110;&#19981;&#21516;&#30340;SOC&#21378;&#21830;&#22312;&#38598;&#25104;GIC&#30340;&#26102;&#20505;&#21487;&#33021;&#20250;&#20462;&#25913;&#65292;&#20063;&#23601;&#26159;&#35828;&#65292;&#20063;&#26377;&#21487;&#33021;mask&#30340;&#20195;&#30721;&#35201;&#24494;&#35843;&#65292;&#36825;&#26159;&#36890;&#36807;gic_arch_extn&#36825;&#20010;&#20840;&#23616;&#21464;&#37327;&#23454;&#29616;&#30340;&#12290;&#22312;gic-irq.c&#20013;&#36825;&#20010;&#21464;&#37327;&#30340;&#20840;&#37096;&#25104;&#21592;&#37117;&#35774;&#23450;&#20026;NULL&#65292;&#21508;&#20010;&#21378;&#21830;&#22312;&#21021;&#22987;&#20013;&#26029;&#25511;&#21046;&#22120;&#30340;&#26102;&#20505;&#21487;&#20197;&#35774;&#23450;&#20854;&#29305;&#23450;&#30340;&#25805;&#20316;&#20989;&#25968;&#12290; </P>
<P>&#65288;2&#65289;gic_unmask_irq&#20989;&#25968; </P>
<P>&#36825;&#20010;&#20989;&#25968;&#29992;&#26469;unmask&#19968;&#20010;interrupt source&#12290;&#20195;&#30721;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>static void gic_unmask_irq(struct irq_data *d) <BR>{ <BR>&nbsp;&nbsp;&nbsp; u32 mask = 1 &lt;&lt; (gic_irq(d) % 32); </P>
<P>&nbsp;&nbsp;&nbsp; raw_spin_lock(&amp;irq_controller_lock); <BR>&nbsp;&nbsp;&nbsp; if (gic_arch_extn.irq_unmask) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gic_arch_extn.irq_unmask(d); <BR>&nbsp;&nbsp;&nbsp; writel_relaxed(mask, gic_dist_base(d) + GIC_DIST_ENABLE_SET + (gic_irq(d) / 32) * 4); <BR>&nbsp;&nbsp;&nbsp; raw_spin_unlock(&amp;irq_controller_lock); <BR>} </P></BLOCKQUOTE>
<P>GIC&#26377;&#33509;&#24178;&#20010;&#21483;&#20570;Interrupt Set-Enable Registers&#30340;&#23492;&#23384;&#22120;&#12290;&#36825;&#20123;&#23492;&#23384;&#22120;&#30340;&#27599;&#20010;bit&#21487;&#20197;&#25511;&#21046;&#19968;&#20010;interrupt source&#12290;&#24403;&#20889;&#20837;1&#30340;&#26102;&#20505;&#65292;&#34920;&#31034;Distributor&#20250;forward&#35813;interrupt&#21040;CPU interface&#65292;&#20063;&#23601;&#26159;&#24847;&#21619;&#36825;unmask&#20102;&#35813;&#20013;&#26029;&#12290;&#29305;&#21035;&#38656;&#35201;&#27880;&#24847;&#30340;&#26159;&#65306;&#20889;&#20837;0&#26080;&#25928;&#65292;&#32780;&#19981;&#26159;mask&#30340;&#25805;&#20316;&#12290; </P>
<P>&#65288;3&#65289;gic_eoi_irq&#20989;&#25968; </P>
<P>&#24403;processor&#22788;&#29702;&#20013;&#26029;&#30340;&#26102;&#20505;&#23601;&#20250;&#35843;&#29992;&#36825;&#20010;&#20989;&#25968;&#29992;&#26469;&#32467;&#26463;&#20013;&#26029;&#22788;&#29702;&#12290;&#20195;&#30721;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>static void gic_eoi_irq(struct irq_data *d) <BR>{ <BR>&nbsp;&nbsp;&nbsp; if (gic_arch_extn.irq_eoi) { <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; raw_spin_lock(&amp;irq_controller_lock); <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gic_arch_extn.irq_eoi(d); <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; raw_spin_unlock(&amp;irq_controller_lock); <BR>&nbsp;&nbsp;&nbsp; } </P>
<P>&nbsp;&nbsp;&nbsp; writel_relaxed(gic_irq(d), gic_cpu_base(d) + GIC_CPU_EOI); <BR>} </P></BLOCKQUOTE>
<P>&#23545;&#20110;GIC&#32780;&#35328;&#65292;&#20854;&#20013;&#26029;&#29366;&#24577;&#26377;&#22235;&#31181;&#65306; </P>
<TABLE class=ke-zeroborder cellSpacing=0 cellPadding=2 width=668 border=0>
<TBODY>
<TR>
<TD vAlign=top width=200>&#20013;&#26029;&#29366;&#24577; </TD>
<TD vAlign=top width=466>&#25551;&#36848; </TD></TR>
<TR>
<TD vAlign=top width=200>Inactive </TD>
<TD vAlign=top width=466>&#20013;&#26029;&#26410;&#35302;&#21457;&#29366;&#24577;&#65292;&#35813;&#20013;&#26029;&#21363;&#27809;&#26377;Pending&#20063;&#27809;&#26377;Active </TD></TR>
<TR>
<TD vAlign=top width=200>Pending </TD>
<TD vAlign=top width=466>&#30001;&#20110;&#22806;&#35774;&#30828;&#20214;&#20135;&#29983;&#20102;&#20013;&#26029;&#20107;&#20214;&#65288;&#25110;&#32773;&#36719;&#20214;&#35302;&#21457;&#65289;&#35813;&#20013;&#26029;&#20107;&#20214;&#24050;&#32463;&#36890;&#36807;&#30828;&#20214;&#20449;&#21495;&#36890;&#30693;&#21040;GIC&#65292;&#31561;&#24453;GIC&#20998;&#37197;&#30340;&#37027;&#20010;CPU&#36827;&#34892;&#22788;&#29702; </TD></TR>
<TR>
<TD vAlign=top width=200>Active </TD>
<TD vAlign=top width=466>CPU&#24050;&#32463;&#24212;&#31572;&#65288;acknowledge&#65289;&#20102;&#35813;interrupt&#35831;&#27714;&#65292;&#24182;&#19988;&#27491;&#22312;&#22788;&#29702;&#20013; </TD></TR>
<TR>
<TD vAlign=top width=200>Active and Pending </TD>
<TD vAlign=top width=466>&#24403;&#19968;&#20010;&#20013;&#26029;&#28304;&#22788;&#20110;Active&#29366;&#24577;&#30340;&#26102;&#20505;&#65292;&#21516;&#19968;&#20013;&#26029;&#28304;&#21448;&#35302;&#21457;&#20102;&#20013;&#26029;&#65292;&#36827;&#20837;pending&#29366;&#24577; </TD></TR></TBODY></TABLE>
<P>processor ack&#20102;&#19968;&#20010;&#20013;&#26029;&#21518;&#65292;&#35813;&#20013;&#26029;&#20250;&#34987;&#35774;&#23450;&#20026;active&#12290;&#24403;&#22788;&#29702;&#23436;&#25104;&#21518;&#65292;&#20173;&#28982;&#35201;&#36890;&#30693;GIC&#65292;&#20013;&#26029;&#24050;&#32463;&#22788;&#29702;&#23436;&#27605;&#20102;&#12290;&#36825;&#26102;&#20505;&#65292;&#22914;&#26524;&#27809;&#26377;pending&#30340;&#20013;&#26029;&#65292;GIC&#23601;&#20250;&#23558;&#35813;interrupt&#35774;&#23450;&#20026;inactive&#29366;&#24577;&#12290;&#25805;&#20316;GIC&#20013;&#30340;End of Interrupt Register&#21487;&#20197;&#23436;&#25104;end of interrupt&#20107;&#20214;&#36890;&#30693;&#12290; </P>
<P>&#65288;4&#65289;gic_set_type&#20989;&#25968; </P>
<P>&#36825;&#20010;&#20989;&#25968;&#29992;&#26469;&#35774;&#23450;&#19968;&#20010;interrupt source&#30340;type&#65292;&#20363;&#22914;&#26159;level sensitive&#36824;&#26159;edge triggered&#12290;&#20195;&#30721;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>static int gic_set_type(struct irq_data *d, unsigned int type) <BR>{ <BR>&nbsp;&nbsp;&nbsp; void __iomem *base = gic_dist_base(d); <BR>&nbsp;&nbsp;&nbsp; unsigned int gicirq = gic_irq(d); <BR>&nbsp;&nbsp;&nbsp; u32 enablemask = 1 &lt;&lt; (gicirq % 32); <BR>&nbsp;&nbsp;&nbsp; u32 enableoff = (gicirq / 32) * 4; <BR>&nbsp;&nbsp;&nbsp; u32 confmask = 0x2 &lt;&lt; ((gicirq % 16) * 2); <BR>&nbsp;&nbsp;&nbsp; u32 confoff = (gicirq / 16) * 4; <BR>&nbsp;&nbsp;&nbsp; bool enabled = false; <BR>&nbsp;&nbsp;&nbsp; u32 val; </P>
<P>&nbsp;&nbsp;&nbsp; /* Interrupt configuration for SGIs can't be changed */ <BR>&nbsp;&nbsp;&nbsp; if (gicirq &lt; 16) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return -EINVAL; </P>
<P>&nbsp;&nbsp;&nbsp; if (type != IRQ_TYPE_LEVEL_HIGH &amp;&amp; type != IRQ_TYPE_EDGE_RISING) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return -EINVAL; </P>
<P>&nbsp;&nbsp;&nbsp; raw_spin_lock(&amp;irq_controller_lock); </P>
<P>&nbsp;&nbsp;&nbsp; if (gic_arch_extn.irq_set_type) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gic_arch_extn.irq_set_type(d, type); </P>
<P>&nbsp;&nbsp;&nbsp; val = readl_relaxed(base + GIC_DIST_CONFIG + confoff); <BR>&nbsp;&nbsp;&nbsp; if (type == IRQ_TYPE_LEVEL_HIGH) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; val &amp;= ~confmask; <BR>&nbsp;&nbsp;&nbsp; else if (type == IRQ_TYPE_EDGE_RISING) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; val |= confmask; </P>
<P>&nbsp;&nbsp;&nbsp; /* <BR>&nbsp;&nbsp;&nbsp;&nbsp; * As recommended by the spec, disable the interrupt before changing <BR>&nbsp;&nbsp;&nbsp;&nbsp; * the configuration <BR>&nbsp;&nbsp;&nbsp;&nbsp; */ <BR>&nbsp;&nbsp;&nbsp; if (readl_relaxed(base + GIC_DIST_ENABLE_SET + enableoff) &amp; enablemask) { <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; writel_relaxed(enablemask, base + GIC_DIST_ENABLE_CLEAR + enableoff); <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; enabled = true; <BR>&nbsp;&nbsp;&nbsp; } </P>
<P>&nbsp;&nbsp;&nbsp; writel_relaxed(val, base + GIC_DIST_CONFIG + confoff); </P>
<P>&nbsp;&nbsp;&nbsp; if (enabled) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; writel_relaxed(enablemask, base + GIC_DIST_ENABLE_SET + enableoff); </P>
<P>&nbsp;&nbsp;&nbsp; raw_spin_unlock(&amp;irq_controller_lock); </P>
<P>&nbsp;&nbsp;&nbsp; return 0; <BR>} </P></BLOCKQUOTE>
<P>&#23545;&#20110;SGI&#31867;&#22411;&#30340;interrupt&#65292;&#26159;&#19981;&#33021;&#20462;&#25913;&#20854;type&#30340;&#65292;&#22240;&#20026;GIC&#20013;SGI&#22266;&#23450;&#23601;&#26159;edge-triggered&#12290;&#23545;&#20110;GIC&#65292;&#20854;type&#21482;&#25903;&#25345;&#39640;&#30005;&#24179;&#35302;&#21457;&#65288;IRQ_TYPE_LEVEL_HIGH&#65289;&#21644;&#19978;&#21319;&#27839;&#35302;&#21457;&#65288;IRQ_TYPE_EDGE_RISING&#65289;&#30340;&#20013;&#26029;&#12290;&#21478;&#22806;&#38656;&#35201;&#27880;&#24847;&#30340;&#26159;&#65292;&#22312;&#26356;&#25913;&#20854;type&#30340;&#26102;&#20505;&#65292;&#20808;disable&#65292;&#28982;&#21518;&#20462;&#25913;type&#65292;&#28982;&#21518;&#20877;enable&#12290; </P>
<P>&#65288;5&#65289;gic_retrigger </P>
<P>&#36825;&#20010;&#25509;&#21475;&#29992;&#26469;resend&#19968;&#20010;IRQ&#21040;CPU&#12290; </P>
<BLOCKQUOTE>
<P>static int gic_retrigger(struct irq_data *d) <BR>{ <BR>&nbsp;&nbsp;&nbsp; if (gic_arch_extn.irq_retrigger) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return gic_arch_extn.irq_retrigger(d); </P>
<P>&nbsp;&nbsp;&nbsp; /* the genirq layer expects 0 if we can't retrigger in hardware */ <BR>&nbsp;&nbsp;&nbsp; return 0; <BR>} </P></BLOCKQUOTE>
<P>&#30475;&#36215;&#26469;&#36825;&#26159;&#21151;&#33021;&#19981;&#26159;&#36890;&#29992;GIC&#25317;&#26377;&#30340;&#21151;&#33021;&#65292;&#21508;&#20010;&#21378;&#23478;&#22312;&#38598;&#25104;GIC&#30340;&#26102;&#20505;&#65292;&#26377;&#21487;&#33021;&#36827;&#34892;&#21151;&#33021;&#25193;&#23637;&#12290; </P>
<P>&#65288;6&#65289;gic_set_affinity </P>
<P>&#22312;&#22810;&#22788;&#29702;&#22120;&#30340;&#29615;&#22659;&#19979;&#65292;&#22806;&#37096;&#35774;&#22791;&#20135;&#29983;&#20102;&#19968;&#20010;&#20013;&#26029;&#23601;&#38656;&#35201;&#36865;&#21040;&#19968;&#20010;&#25110;&#32773;&#22810;&#20010;&#22788;&#29702;&#22120;&#21435;&#65292;&#36825;&#20010;&#35774;&#23450;&#26159;&#36890;&#36807;&#35774;&#23450;&#22788;&#29702;&#22120;&#30340;affinity&#36827;&#34892;&#30340;&#12290;&#20855;&#20307;&#20195;&#30721;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>static int gic_set_affinity(struct irq_data *d, const struct cpumask *mask_val,&nbsp;&nbsp;&nbsp; bool force) <BR>{ <BR>&nbsp;&nbsp;&nbsp; void __iomem *reg = gic_dist_base(d) + GIC_DIST_TARGET + (gic_irq(d) &amp; ~3); <BR>&nbsp;&nbsp;&nbsp; unsigned int cpu, shift = (gic_irq(d) % 4) * 8; <BR>&nbsp;&nbsp;&nbsp; u32 val, mask, bit; </P>
<P>&nbsp;&nbsp;&nbsp; if (!force) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cpu = cpumask_any_and(mask_val, cpu_online_mask);&#65293;&#65293;&#65293;&#38543;&#26426;&#36873;&#21462;&#19968;&#20010;online&#30340;cpu <BR>&nbsp;&nbsp;&nbsp; else <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cpu = cpumask_first(mask_val); &#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#36873;&#21462;mask&#20013;&#30340;&#31532;&#19968;&#20010;cpu&#65292;&#19981;&#31649;&#26159;&#21542;online </P>
<P>&nbsp;&nbsp;&nbsp; raw_spin_lock(&amp;irq_controller_lock); <BR>&nbsp;&nbsp;&nbsp; mask = 0xff &lt;&lt; shift; <BR>&nbsp;&nbsp;&nbsp; bit = gic_cpu_map[cpu] &lt;&lt; shift;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#23558;CPU&#30340;&#36923;&#36753;ID&#36716;&#25442;&#25104;&#35201;&#35774;&#23450;&#30340;cpu mask <BR>&nbsp;&nbsp;&nbsp; val = readl_relaxed(reg) &amp; ~mask; <BR>&nbsp;&nbsp;&nbsp; writel_relaxed(val | bit, reg); <BR>&nbsp;&nbsp;&nbsp; raw_spin_unlock(&amp;irq_controller_lock); </P>
<P>&nbsp;&nbsp;&nbsp; return IRQ_SET_MASK_OK; <BR>} </P></BLOCKQUOTE>
<P>GIC Distributor&#20013;&#26377;&#19968;&#20010;&#23492;&#23384;&#22120;&#21483;&#20570;Interrupt Processor Targets Registers&#65292;&#36825;&#20010;&#23492;&#23384;&#22120;&#29992;&#26469;&#35774;&#23450;&#21046;&#23450;&#30340;&#20013;&#26029;&#36865;&#21040;&#21738;&#20010;process&#21435;&#12290;&#30001;&#20110;GIC&#26368;&#22823;&#25903;&#25345;8&#20010;process&#65292;&#22240;&#27492;&#27599;&#20010;hw interrupt ID&#38656;&#35201;8&#20010;bit&#26469;&#34920;&#31034;&#36865;&#36798;&#30340;process&#12290;&#27599;&#19968;&#20010;Interrupt Processor Targets Registers&#30001;32&#20010;bit&#32452;&#25104;&#65292;&#22240;&#27492;&#27599;&#20010;Interrupt Processor Targets Registers&#21487;&#20197;&#34920;&#31034;4&#20010;HW interrupt ID&#30340;affinity&#65292;&#22240;&#27492;&#19978;&#38754;&#30340;&#20195;&#30721;&#20013;&#30340;shift&#23601;&#26159;&#35745;&#31639;&#35813;HW interrupt ID&#22312;&#23492;&#23384;&#22120;&#20013;&#30340;&#20559;&#31227;&#12290; </P>
<P>&#65288;7&#65289;gic_set_wake </P>
<P>&#36825;&#20010;&#25509;&#21475;&#29992;&#26469;&#35774;&#23450;&#21796;&#37266;CPU&#30340;interrupt source&#12290;&#23545;&#20110;GIC&#65292;&#20195;&#30721;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>static int gic_set_wake(struct irq_data *d, unsigned int on) <BR>{ <BR>&nbsp;&nbsp;&nbsp; int ret = -ENXIO; </P>
<P>&nbsp;&nbsp;&nbsp; if (gic_arch_extn.irq_set_wake) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ret = gic_arch_extn.irq_set_wake(d, on); </P>
<P>&nbsp;&nbsp;&nbsp; return ret; <BR>} </P></BLOCKQUOTE>
<P>&#35774;&#23450;&#21796;&#37266;&#30340;interrupt&#21644;&#20855;&#20307;&#30340;&#21378;&#21830;&#30456;&#20851;&#65292;&#36825;&#37324;&#19981;&#20877;&#36184;&#36848;&#12290; </P>
<P><BR></P>
<P>4&#12289;BSP&#65288;bootstrap processor&#65289;&#20043;&#22806;&#65292;&#20854;&#20182;CPU&#30340;callback&#20989;&#25968; </P>
<P>&#23545;&#20110;multi processor&#31995;&#32479;&#65292;&#19981;&#21487;&#33021;&#21021;&#22987;&#21270;&#20195;&#30721;&#22312;&#25152;&#26377;&#30340;processor&#19978;&#37117;&#25191;&#34892;&#19968;&#36941;&#65292;&#23454;&#38469;&#19978;&#65292;&#31995;&#32479;&#30340;&#30828;&#20214;&#20250;&#36873;&#21462;&#19968;&#20010;processor&#20316;&#20026;&#24341;&#23548;&#22788;&#29702;&#22120;&#65292;&#25105;&#20204;&#31216;&#20043;BSP&#12290;&#36825;&#20010;processor&#20250;&#39318;&#20808;&#25191;&#34892;&#65292;&#20854;&#20182;&#30340;CPU&#37117;&#26159;&#22788;&#20110;reset&#29366;&#24577;&#65292;&#31561;&#21040;BSP&#21021;&#22987;&#21270;&#23436;&#25104;&#20043;&#21518;&#65292;release&#25152;&#26377;&#30340;non-BSP&#65292;&#36825;&#26102;&#20505;&#65292;&#31995;&#32479;&#20013;&#30340;&#21508;&#31181;&#22806;&#35774;&#30828;&#20214;&#26465;&#20214;&#21644;&#36719;&#20214;&#26465;&#20214;&#65288;&#20363;&#22914;per CPU&#21464;&#37327;&#65289;&#37117;&#20934;&#22791;&#22909;&#20102;&#65292;&#21508;&#20010;non-BSP&#25191;&#34892;&#33258;&#24049;CPU specific&#30340;&#21021;&#22987;&#21270;&#23601;OK&#20102;&#12290; </P>
<P>&#19978;&#38754;&#25551;&#36848;&#30340;&#37117;&#26159;BSP&#30340;&#21021;&#22987;&#21270;&#36807;&#31243;&#65292;&#20855;&#20307;&#21253;&#25324;&#65306; </P>
<BLOCKQUOTE>
<P>&#8230;&#8230; <BR>&nbsp;&nbsp;&nbsp; gic_dist_init(gic);&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#21021;&#22987;&#21270;GIC&#30340;Distributor <BR>&nbsp;&nbsp;&nbsp; gic_cpu_init(gic);&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#21021;&#22987;&#21270;BSP&#30340;CPU interface <BR>&nbsp;&nbsp;&nbsp; gic_pm_init(gic);&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#21021;&#22987;&#21270;GIC&#30340;Power management <BR>&#8230;&#8230; </P></BLOCKQUOTE>
<P>&#23545;&#20110;GIC&#30340;Distributor&#21644;Power management&#65292;&#36825;&#20004;&#37096;&#20998;&#26159;&#20840;&#23616;&#24615;&#30340;&#65292;BSP&#25191;&#34892;&#21021;&#22987;&#21270;&#19968;&#27425;&#23601;OK&#20102;&#12290;&#23545;&#20110;CPU interface&#65292;&#27599;&#20010;processor&#36127;&#36131;&#21021;&#22987;&#21270;&#33258;&#24049;&#30340;&#36830;&#25509;&#30340;&#37027;&#20010;CPU interface HW block&#12290;&#25105;&#20204;&#29992;&#19979;&#38754;&#36825;&#20010;&#22270;&#29255;&#26469;&#25551;&#36848;&#36825;&#20010;&#36807;&#31243;&#65306; </P>
<P><A href="http://www.wowotech.net/content/uploadfile/201409/f9b5b82dcfa88ba9503bb8c835da63c420140909083805.gif"><IMG title=booting style="BORDER-LEFT-WIDTH: 0px; BORDER-RIGHT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; DISPLAY: inline; BORDER-TOP-WIDTH: 0px" border=0 alt=booting src="http://www.wowotech.net/content/uploadfile/201409/cdec2bc26e9fb0e1a7b3d29389896b5420140909083806.gif" width=670 height=495></A> </P>
<P>&nbsp; &#20551;&#35774;CPUx&#34987;&#36873;&#23450;&#20026;BSP&#65292;&#37027;&#20040;&#31532;&#19977;&#31456;&#25551;&#36848;&#30340;&#21021;&#22987;&#21270;&#36807;&#31243;&#22312;&#35813;CPU&#19978;&#27426;&#30021;&#30340;&#25191;&#34892;&#12290;&#36825;&#26102;&#20505;&#65292;&#34987;&#21021;&#22987;&#21270;&#30340;GIC&#30828;&#20214;&#21253;&#25324;&#65306;root GIC&#30340;Distributor&#12289;root GIC CPU Interface x&#65288;&#36830;&#25509;BSP&#30340;&#37027;&#20010;CPU interface&#65289;&#20197;&#21450;&#20854;&#20182;&#30340;&#32423;&#32852;&#30340;&#38750;root GIC&#65288;&#19978;&#22270;&#20013;&#32511;&#33394;block&#65292;&#24403;&#28982;&#65292;&#25105;&#20599;&#25042;&#65292;&#27809;&#26377;&#30011;non-root GIC&#65289;&#12290; </P>
<P>BSP&#21021;&#22987;&#21270;&#23436;&#25104;&#20043;&#21518;&#65292;&#21508;&#20010;&#20854;&#20182;&#30340;CPU&#36816;&#34892;&#36215;&#26469;&#65292;&#20250;&#21457;&#36865;CPU_STARTING&#28040;&#24687;&#32473;&#20851;&#27880;&#35813;&#28040;&#24687;&#30340;&#27169;&#22359;&#12290;&#27627;&#26080;&#30097;&#38382;&#65292;GIC driver&#27169;&#22359;&#24403;&#28982;&#35201;&#20851;&#27880;&#36825;&#26679;&#30340;&#28040;&#24687;&#65292;&#22312;&#21021;&#22987;&#21270;&#36807;&#31243;&#20013;&#20250;&#27880;&#20876;callback&#20989;&#25968;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>register_cpu_notifier(&amp;gic_cpu_notifier); </P></BLOCKQUOTE>
<P>GIC&#30456;&#20851;&#30340;&#22238;&#35843;&#20989;&#25968;&#23450;&#20041;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>static struct notifier_block gic_cpu_notifier = { <BR>&nbsp;&nbsp;&nbsp; .notifier_call = gic_secondary_init, <BR>&nbsp;&nbsp;&nbsp; .priority = 100, <BR>}; </P>
<P>static int gic_secondary_init(struct notifier_block *nfb, unsigned long action,&nbsp; void *hcpu) <BR>{ <BR>&nbsp;&nbsp;&nbsp; if (action == CPU_STARTING || action == CPU_STARTING_FROZEN) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; gic_cpu_init(&amp;gic_data[0]);&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#21021;&#22987;&#21270;&#37027;&#20123;&#38750;BSP&#30340;CPU interface <BR>&nbsp;&nbsp;&nbsp; return NOTIFY_OK; <BR>} </P></BLOCKQUOTE>
<P>&#22240;&#27492;&#65292;&#24403;non-BSP booting up&#30340;&#26102;&#20505;&#65292;&#21457;&#36865;CPU_STARTING&#28040;&#24687;&#65292;&#35843;&#29992;GIC&#30340;callback&#20989;&#25968;&#65292;&#23545;&#19978;&#22270;&#20013;&#30340;&#32043;&#33394;&#30340;CPU Interface HW block&#36827;&#34892;&#21021;&#22987;&#21270;&#65292;&#36825;&#26679;&#65292;&#23601;&#23436;&#25104;&#20102;&#20840;&#37096;GIC&#30828;&#20214;&#30340;&#21021;&#22987;&#21270;&#36807;&#31243;&#12290; </P>
<P><BR></P>
<P>Change log&#65306;<BR>11&#26376;3&#21495;&#65292;&#20462;&#25913;&#21253;&#25324;&#65306;<BR>1&#12289;&#20351;&#29992;GIC-V2&#36825;&#26679;&#26356;&#36890;&#29992;&#30340;&#25551;&#36848;&#65292;&#32780;&#19981;&#26159;&#20165;&#20165;GIC-400