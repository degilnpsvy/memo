<H2>linux kernel&#30340;&#20013;&#26029;&#23376;&#31995;&#32479;&#20043;&#65288;&#22235;&#65289;&#65306;High level irq event handler</H2>
<P class=date>&#20316;&#32773;&#65306;<A href="http://www.wowotech.net/author/3">linuxer</A> &#21457;&#24067;&#20110;&#65306;2014-8-28 20:00 &#20998;&#31867;&#65306;<A href="http://www.wowotech.net/sort/irq_subsystem">&#20013;&#26029;&#23376;&#31995;&#32479;</A> </P>
<P>&#19968;&#12289;&#21069;&#35328; </P>
<P>&#24403;&#22806;&#35774;&#35302;&#21457;&#19968;&#27425;&#20013;&#26029;&#21518;&#65292;&#19968;&#20010;&#22823;&#27010;&#30340;&#22788;&#29702;&#36807;&#31243;&#26159;&#65306; </P>
<P>1&#12289;&#20855;&#20307;CPU architecture&#30456;&#20851;&#30340;&#27169;&#22359;&#20250;&#36827;&#34892;&#29616;&#22330;&#20445;&#25252;&#65292;&#28982;&#21518;&#35843;&#29992;machine driver&#23545;&#24212;&#30340;&#20013;&#26029;&#22788;&#29702;handler </P>
<P>2&#12289;machine driver&#23545;&#24212;&#30340;&#20013;&#26029;&#22788;&#29702;handler&#20013;&#20250;&#26681;&#25454;&#30828;&#20214;&#30340;&#20449;&#24687;&#33719;&#21462;HW interrupt ID&#65292;&#24182;&#19988;&#36890;&#36807;irq domain&#27169;&#22359;&#32763;&#35793;&#25104;IRQ number </P>
<P>3&#12289;&#35843;&#29992;&#35813;IRQ number&#23545;&#24212;&#30340;high level irq event handler&#65292;&#22312;&#36825;&#20010;high level&#30340;handler&#20013;&#65292;&#20250;&#36890;&#36807;&#21644;interupt controller&#20132;&#20114;&#65292;&#36827;&#34892;&#20013;&#26029;&#22788;&#29702;&#30340;flow control&#65288;&#22788;&#29702;&#20013;&#26029;&#30340;&#23884;&#22871;&#12289;&#25250;&#21344;&#31561;&#65289;&#65292;&#24403;&#28982;&#26368;&#32456;&#20250;&#36941;&#21382;&#35813;&#20013;&#26029;&#25551;&#36848;&#31526;&#30340;IRQ action list&#65292;&#35843;&#29992;&#22806;&#35774;&#30340;specific handler&#26469;&#22788;&#29702;&#35813;&#20013;&#26029; </P>
<P>4&#12289;&#20855;&#20307;CPU architecture&#30456;&#20851;&#30340;&#27169;&#22359;&#20250;&#36827;&#34892;&#29616;&#22330;&#24674;&#22797;&#12290; </P>
<P>&#19978;&#38754;&#30340;1&#12289;4&#36825;&#20004;&#20010;&#27493;&#39588;&#22312;<A href="http://www.wowotech.net/linux_kenrel/irq_handler.html">linux kernel&#30340;&#20013;&#26029;&#23376;&#31995;&#32479;&#20043;&#65288;&#20845;&#65289;&#65306;ARM&#20013;&#26029;&#22788;&#29702;&#36807;&#31243;</A>&#20013;&#24050;&#32463;&#26377;&#20102;&#36739;&#20026;&#32454;&#33268;&#30340;&#25551;&#36848;&#65292;&#27493;&#39588;2&#22312;<A href="http://www.wowotech.net/linux_kenrel/irq-domain.html">linux kernel&#30340;&#20013;&#26029;&#23376;&#31995;&#32479;&#20043;&#65288;&#20108;&#65289;&#65306;irq domain&#20171;&#32461;</A>&#20013;&#20171;&#32461;&#65292;&#26412;&#25991;&#20027;&#35201;&#25551;&#36848;&#27493;&#39588;3&#65292;&#20063;&#23601;&#26159;linux&#20013;&#26029;&#23376;&#31995;&#32479;&#30340;high level irq event handler&#12290; </P>
<P>&nbsp; </P>
<P>&#27880;&#65306;&#36825;&#20221;&#25991;&#26723;&#20805;&#28385;&#20102;&#29468;&#27979;&#21644;&#31354;&#24819;&#65292;&#24456;&#22810;&#22320;&#26041;&#25551;&#36848;&#21487;&#33021;&#26159;&#26377;&#38382;&#39064;&#30340;&#65292;&#19981;&#36807;&#25105;&#36824;&#26159;&#25226;&#23427;&#21457;&#20986;&#26469;&#65292;&#25243;&#30742;&#24341;&#29577;&#65292;&#24076;&#26395;&#21487;&#20197;&#24341;&#21457;&#22823;&#23478;&#35752;&#35770;&#12290; </P>
<P>&nbsp; </P>
<P>&#19968;&#12289;&#22914;&#20309;&#36827;&#20837;high level irq event handler </P>
<P>1&#12289;&#20174;&#20855;&#20307;CPU architecture&#30340;&#20013;&#26029;&#22788;&#29702;&#21040;machine&#30456;&#20851;&#30340;&#22788;&#29702;&#27169;&#22359; </P>
<P>&#35828;&#21040;&#20855;&#20307;&#30340;CPU&#65292;&#25105;&#20204;&#36824;&#26159;&#29992;ARM&#20026;&#20363;&#22909;&#20102;&#12290;&#23545;&#20110;ARM&#65292;&#25105;&#20204;&#22312;<A href="http://www.wowotech.net/linux_kenrel/irq_handler.html">ARM&#20013;&#26029;&#22788;&#29702;</A>&#25991;&#26723;&#20013;&#24050;&#32463;&#26377;&#20102;&#36739;&#20026;&#32454;&#33268;&#30340;&#25551;&#36848;&#12290;&#36825;&#37324;&#25105;&#20204;&#30475;&#30475;&#22914;&#20309;&#20174;&#20174;&#20855;&#20307;CPU&#30340;&#20013;&#26029;&#22788;&#29702;&#21040;machine&#30456;&#20851;&#30340;&#22788;&#29702;&#27169;&#22359; &#65292;&#20854;&#20855;&#20307;&#20195;&#30721;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>&nbsp;&nbsp;&nbsp; .macro&nbsp;&nbsp;&nbsp; irq_handler <BR>#ifdef CONFIG_MULTI_IRQ_HANDLER <BR>&nbsp;&nbsp;&nbsp; ldr&nbsp;&nbsp;&nbsp; r1, =handle_arch_irq <BR>&nbsp;&nbsp;&nbsp; mov&nbsp;&nbsp;&nbsp; r0, sp <BR>&nbsp;&nbsp;&nbsp; adr&nbsp;&nbsp;&nbsp; lr, BSYM(9997f) <BR>&nbsp;&nbsp;&nbsp; ldr&nbsp;&nbsp;&nbsp; pc, [r1] <BR>#else <BR>&nbsp;&nbsp;&nbsp; arch_irq_handler_default <BR>#endif <BR>9997: <BR>&nbsp;&nbsp;&nbsp; .endm </P></BLOCKQUOTE>
<P>&#20854;&#23454;&#65292;&#30452;&#25509;&#20174;CPU&#30340;&#20013;&#26029;&#22788;&#29702;&#36339;&#36716;&#21040;&#36890;&#29992;&#20013;&#26029;&#22788;&#29702;&#27169;&#22359;&#26159;&#19981;&#21487;&#33021;&#30340;&#65292;&#20013;&#26029;&#22788;&#29702;&#19981;&#21487;&#33021;&#36234;&#36807;interrupt controller&#36825;&#20010;&#23618;&#27425;&#12290;&#19968;&#33324;&#32780;&#35328;&#65292;&#36890;&#29992;&#20013;&#26029;&#22788;&#29702;&#27169;&#22359;&#20250;&#25552;&#20379;&#19968;&#20123;&#36890;&#29992;&#30340;&#20013;&#26029;&#20195;&#30721;&#22788;&#29702;&#24211;&#65292;&#28982;&#21518;&#30001;interrupt controller&#36825;&#20010;&#23618;&#27425;&#30340;&#20195;&#30721;&#35843;&#29992;&#36825;&#20123;&#36890;&#29992;&#20013;&#26029;&#22788;&#29702;&#30340;&#23436;&#25104;&#25972;&#20010;&#30340;&#20013;&#26029;&#22788;&#29702;&#36807;&#31243;&#12290;&#8220;interrupt controller&#36825;&#20010;&#23618;&#27425;&#30340;&#20195;&#30721;&#8221;&#26159;&#21644;&#30828;&#20214;&#20013;&#26029;&#31995;&#32479;&#35774;&#35745;&#30456;&#20851;&#30340;&#65292;&#20363;&#22914;&#65306;&#31995;&#32479;&#20013;&#26377;&#22810;&#23569;&#20010;interrupt contrller&#65292;&#27599;&#20010;interrupt controller&#26159;&#22914;&#20309;&#25511;&#21046;&#30340;&#65311;&#23427;&#20204;&#26159;&#22914;&#20309;&#32423;&#32852;&#30340;&#65311;&#25105;&#20204;&#31216;&#36825;&#20123;&#30456;&#20851;&#30340;&#39537;&#21160;&#27169;&#22359;&#20026;machine interrupt driver&#12290; </P>
<P>&#22312;&#19978;&#38754;&#30340;&#20195;&#30721;&#20013;&#65292;&#22914;&#26524;&#37197;&#32622;&#20102;MULTI_IRQ_HANDLER&#30340;&#35805;&#65292;ARM&#20013;&#26029;&#22788;&#29702;&#21017;&#30452;&#25509;&#36339;&#36716;&#21040;&#19968;&#20010;&#21483;&#20570;handle_arch_irq&#20989;&#25968;&#65292;&#22914;&#26524;&#31995;&#32479;&#20013;&#21482;&#26377;&#19968;&#20010;&#31867;&#22411;&#30340;interrupt controller&#65288;&#21487;&#33021;&#26159;&#22810;&#20010;interrupt controller&#65292;&#20363;&#22914;&#20351;&#29992;&#20004;&#20010;&#32423;&#32852;&#30340;GIC&#65289;&#65292;&#37027;&#20040;handle_arch_irq&#21487;&#20197;&#22312;interrupt controller&#21021;&#22987;&#21270;&#30340;&#26102;&#20505;&#35774;&#23450;&#12290;&#20195;&#30721;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>&#8230;&#8230; </P>
<P>if (gic_nr == 0) { <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set_handle_irq(gic_handle_irq); <BR>} </P>
<P>&#8230;&#8230; </P></BLOCKQUOTE>
<P>gic_nr&#26159;GIC&#30340;&#32534;&#21495;&#65292;linux kernel&#21021;&#22987;&#21270;&#36807;&#31243;&#20013;&#65292;&#27599;&#21457;&#29616;&#19968;&#20010;GIC&#65292;&#37117;&#26159;&#20250;&#25351;&#21521;GIC driver&#30340;&#21021;&#22987;&#21270;&#20989;&#25968;&#30340;&#65292;&#19981;&#36807;&#23545;&#20110;&#31532;&#19968;&#20010;GIC&#65292;gic_nr&#31561;&#20110;0&#65292;&#23545;&#20110;&#31532;&#20108;&#20010;GIC&#65292;gic_nr&#31561;&#20110;1&#12290;&#24403;&#28982;handle_arch_irq&#36825;&#20010;&#20989;&#25968;&#25351;&#38024;&#19981;&#26159;per CPU&#30340;&#21464;&#37327;&#65292;&#26159;&#20840;&#37096;CPU&#20849;&#20139;&#30340;&#65292;&#22240;&#27492;&#65292;&#21021;&#22987;&#21270;&#19968;&#27425;&#23601;OK&#20102;&#12290; </P>
<P>&#24403;&#20351;&#29992;&#22810;&#31181;&#31867;&#22411;&#30340;interrupt controller&#30340;&#26102;&#20505;&#65288;&#20363;&#22914;HW &#31995;&#32479;&#20351;&#29992;&#20102;S3C2451&#36825;&#26679;&#30340;SOC&#65292;&#36825;&#26102;&#20505;&#65292;&#31995;&#32479;&#26377;&#20004;&#31181;interrupt controller&#65292;&#19968;&#31181;&#26159;GPIO type&#65292;&#21478;&#22806;&#19968;&#31181;&#26159;SOC&#19978;&#30340;interrupt controller&#65289;&#65292;&#21017;&#19981;&#36866;&#21512;&#22312;interrupt controller&#20013;&#36827;&#34892;&#35774;&#23450;&#65292;&#36825;&#26102;&#20505;&#65292;&#21487;&#20197;&#32771;&#34385;&#22312;machine driver&#20013;&#35774;&#23450;&#12290;&#22312;&#36825;&#31181;&#24773;&#20917;&#19979;&#65292;handle_arch_irq &#36825;&#20010;&#20989;&#25968;&#26159;&#22312;setup_arch&#20989;&#25968;&#20013;&#26681;&#25454;machine driver&#35774;&#23450;&#65292;&#20855;&#20307;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>handle_arch_irq = mdesc-&gt;handle_irq; </P></BLOCKQUOTE>
<P>&#20851;&#20110;MULTI_IRQ_HANDLER&#36825;&#20010;&#37197;&#32622;&#39033;&#65292;&#25105;&#20204;&#21487;&#20197;&#20877;&#22810;&#35828;&#20960;&#21477;&#12290;&#24403;&#28982;&#65292;&#20854;&#23454;&#36825;&#20010;&#37197;&#32622;&#39033;&#30340;&#21517;&#23383;&#24050;&#32463;&#20986;&#21334;&#23427;&#20102;&#12290;multi irq handler&#23601;&#26159;&#35828;&#31995;&#32479;&#20013;&#26377;&#22810;&#20010;irq handler&#65292;&#21487;&#20197;&#22312;run time&#30340;&#26102;&#20505;&#25351;&#23450;&#12290;&#20026;&#20309;&#35201;run time&#30340;&#26102;&#20505;&#65292;&#20174;&#22810;&#20010;handler&#20013;&#36873;&#25321;&#19968;&#20010;&#21602;&#65311;HW interrupt block&#38590;&#36947;&#19981;&#26159;&#22266;&#23450;&#30340;&#21527;&#65311;&#25105;&#30340;&#29702;&#35299;&#65288;&#29468;&#24819;&#65289;&#26159;&#65306;&#19968;&#20010;kernel&#30340;image&#25903;&#25345;&#22810;&#20010;HW platform&#65292;&#23545;&#20110;&#19981;&#21516;&#30340;HW platform&#65292;&#22312;&#36816;&#34892;&#26102;&#26816;&#26597;HW platform&#30340;&#31867;&#22411;&#65292;&#35774;&#23450;&#19981;&#21516;&#30340;irq handler&#12290; </P>
<P>2&#12289;interrupt controller&#30456;&#20851;&#30340;&#20195;&#30721; </P>
<P>&#25105;&#20204;&#36824;&#26159;&#20197;2&#20010;&#32423;&#32852;&#30340;GIC&#20026;&#20363;&#26469;&#25551;&#36848;interrupt controller&#30456;&#20851;&#30340;&#20195;&#30721;&#12290;&#20195;&#30721;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>static asmlinkage void __exception_irq_entry gic_handle_irq(struct pt_regs *regs) <BR>{ <BR>&nbsp;&nbsp;&nbsp; u32 irqstat, irqnr; <BR>&nbsp;&nbsp;&nbsp; struct gic_chip_data *gic = &amp;gic_data[0];&#65293;&#65293;&#65293;&#65293;&#65293;&#33719;&#21462;root GIC&#30340;&#30828;&#20214;&#25551;&#36848;&#31526; <BR>&nbsp;&nbsp;&nbsp; void __iomem *cpu_base = gic_data_cpu_base(gic); &#33719;&#21462;root GIC mapping&#21040;CPU&#22320;&#22336;&#31354;&#38388;&#30340;&#20449;&#24687; </P>
<P>&nbsp;&nbsp;&nbsp; do { <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; irqstat = readl_relaxed(cpu_base + GIC_CPU_INTACK);&#65293;&#65293;&#65293;&#33719;&#21462;HW interrupt ID <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; irqnr = irqstat &amp; ~0x1c00; </P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (likely(irqnr &gt; 15 &amp;&amp; irqnr &lt; 1021)) {&#65293;&#65293;&#65293;&#65293;SPI&#21644;PPI&#30340;&#22788;&#29702; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; irqnr = irq_find_mapping(gic-&gt;domain, irqnr);&#65293;&#65293;&#65293;&#23558;HW interrupt ID&#36716;&#25104;IRQ number <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; handle_IRQ(irqnr, regs);&#65293;&#65293;&#65293;&#65293;&#22788;&#29702;&#35813;IRQ number <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; continue; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (irqnr &lt; 16) {&#65293;&#65293;&#65293;&#65293;&#65293;IPI&#31867;&#22411;&#30340;&#20013;&#26029;&#22788;&#29702; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; writel_relaxed(irqstat, cpu_base + GIC_CPU_EOI); <BR>#ifdef CONFIG_SMP <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; handle_IPI(irqnr, regs); <BR>#endif <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; continue; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break; <BR>&nbsp;&nbsp;&nbsp; } while (1); <BR>} </P></BLOCKQUOTE>
<P>&#26356;&#22810;&#20851;&#20110;GIC&#30456;&#20851;&#30340;&#20449;&#24687;&#65292;&#35831;&#21442;&#32771;linux kernel&#30340;&#20013;&#26029;&#23376;&#31995;&#32479;&#20043;&#65288;&#19971;&#65289;&#65306;GIC&#20195;&#30721;&#20998;&#26512;&#12290;&#23545;&#20110;ARM&#22788;&#29702;&#22120;&#65292;handle_IRQ&#20195;&#30721;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>void handle_IRQ(unsigned int irq, struct pt_regs *regs) <BR>{ </P>
<P>&#8230;&#8230; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; generic_handle_irq(irq); </P>
<P>&#8230;&#8230; <BR>} </P></BLOCKQUOTE>
<P>3&#12289;&#35843;&#29992;high level handler </P>
<P>&#35843;&#29992;high level handler&#30340;&#20195;&#30721;&#36923;&#36753;&#38750;&#24120;&#31616;&#21333;&#65292;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>int generic_handle_irq(unsigned int irq) <BR>{ <BR>&nbsp;&nbsp;&nbsp; struct irq_desc *desc = irq_to_desc(irq); &#65293;&#65293;&#65293;&#36890;&#36807;IRQ number&#33719;&#21462;&#35813;irq&#30340;&#25551;&#36848;&#31526; </P>
<P>&nbsp;&nbsp;&nbsp; if (!desc) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return -EINVAL; <BR>&nbsp;&nbsp;&nbsp; generic_handle_irq_desc(irq, desc);&#65293;&#65293;&#65293;&#65293;&#35843;&#29992;high level&#30340;irq handler&#26469;&#22788;&#29702;&#35813;IRQ <BR>&nbsp;&nbsp;&nbsp; return 0; <BR>} </P>
<P>static inline void generic_handle_irq_desc(unsigned int irq, struct irq_desc *desc) <BR>{ <BR>&nbsp;&nbsp;&nbsp; desc-&gt;handle_irq(irq, desc); <BR>} </P></BLOCKQUOTE>
<P>&nbsp; </P>
<P>&#20108;&#12289;&#29702;&#35299;high level irq event handler&#38656;&#35201;&#30340;&#30693;&#35782;&#20934;&#22791; </P>
<P>1&#12289;&#33258;&#21160;&#25506;&#27979;IRQ </P>
<P>&#19968;&#20010;&#30828;&#20214;&#39537;&#21160;&#21487;&#20197;&#36890;&#36807;&#19979;&#38754;&#30340;&#26041;&#27861;&#36827;&#34892;&#33258;&#21160;&#25506;&#27979;&#23427;&#20351;&#29992;&#30340;IRQ&#65306; </P>
<BLOCKQUOTE>
<P>unsigned long irqs; <BR>int irq; </P>
<P>irqs = probe_irq_on();&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#21551;&#21160;IRQ&#33258;&#21160;&#25506;&#27979; <BR>&#39537;&#21160;&#37027;&#20010;&#25171;&#31639;&#33258;&#21160;&#25506;&#27979;IRQ&#30340;&#30828;&#20214;&#20135;&#29983;&#20013;&#26029; <BR>irq = probe_irq_off(irqs);&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#32467;&#26463;IRQ&#33258;&#21160;&#25506;&#27979; </P></BLOCKQUOTE>
<P>&#22914;&#26524;&#33021;&#22815;&#33258;&#21160;&#25506;&#27979;&#21040;IRQ&#65292;&#19978;&#38754;&#31243;&#24207;&#20013;&#30340;irq(probe_irq_off&#30340;&#36820;&#22238;&#20540;)&#23601;&#26159;&#33258;&#21160;&#25506;&#27979;&#30340;&#32467;&#26524;&#12290;&#21518;&#32493;&#31243;&#24207;&#21487;&#20197;&#36890;&#36807;request_threaded_irq&#30003;&#35831;&#35813;IRQ&#12290;probe_irq_on&#20989;&#25968;&#20027;&#35201;&#30340;&#30446;&#30340;&#26159;&#36820;&#22238;&#19968;&#20010;32 bit&#30340;&#25513;&#30721;&#65292;&#36890;&#36807;&#35813;&#25513;&#30721;&#21487;&#20197;&#30693;&#36947;&#21487;&#33021;&#20351;&#29992;&#30340;IRQ number&#26377;&#21738;&#20123;&#65292;&#20855;&#20307;&#20195;&#30721;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>unsigned long probe_irq_on(void) <BR>{ </P>
<P>&#8230;&#8230; <BR>&nbsp;&nbsp;&nbsp; for_each_irq_desc_reverse(i, desc) { &#65293;&#65293;&#65293;&#65293;scan &#20174;nr_irqs-1 &#21040;0 &#30340;&#20013;&#26029;&#25551;&#36848;&#31526; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; raw_spin_lock_irq(&amp;desc-&gt;lock); <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!desc-&gt;action &amp;&amp; irq_settings_can_probe(desc)) {&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;1&#65289; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; desc-&gt;istate |= IRQS_AUTODETECT | IRQS_WAITING;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;2&#65289; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (irq_startup(desc, false)) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; desc-&gt;istate |= IRQS_PENDING; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; raw_spin_unlock_irq(&amp;desc-&gt;lock); <BR>&nbsp;&nbsp;&nbsp; }&nbsp; <BR>&nbsp;&nbsp;&nbsp; msleep(100); &#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;3&#65289; </P>
<P><BR>&nbsp;&nbsp;&nbsp; for_each_irq_desc(i, desc) { <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; raw_spin_lock_irq(&amp;desc-&gt;lock); </P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (desc-&gt;istate &amp; IRQS_AUTODETECT) {&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;4&#65289; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!(desc-&gt;istate &amp; IRQS_WAITING)) { <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; desc-&gt;istate &amp;= ~IRQS_AUTODETECT; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; irq_shutdown(desc); <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (i &lt; 32)&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;5&#65289; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mask |= 1 &lt;&lt; i; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; raw_spin_unlock_irq(&amp;desc-&gt;lock); <BR>&nbsp;&nbsp;&nbsp; } </P>
<P>&nbsp;&nbsp;&nbsp; return mask; <BR>} </P></BLOCKQUOTE>
<P>&#65288;1&#65289;&#37027;&#20123;&#33021;&#33258;&#21160;&#25506;&#27979;IRQ&#30340;&#20013;&#26029;&#25551;&#36848;&#31526;&#38656;&#35201;&#20855;&#20307;&#20004;&#20010;&#26465;&#20214;&#65306; </P>
<P>a&#12289;&#35813;&#20013;&#26029;&#25551;&#36848;&#31526;&#36824;&#27809;&#26377;&#36890;&#36807;request_threaded_irq&#25110;&#32773;&#20854;&#20182;&#26041;&#24335;&#30003;&#35831;&#35813;IRQ&#30340;specific handler&#65288;&#20063;&#23601;&#26159;irqaction&#25968;&#25454;&#32467;&#26500;&#65289; </P>
<P>b&#12289;&#35813;&#20013;&#26029;&#25551;&#36848;&#31526;&#20801;&#35768;&#33258;&#21160;&#25506;&#27979;&#65288;&#19981;&#33021;&#35774;&#23450;IRQ_NOPROBE&#65289; </P>
<P>&#65288;2&#65289;&#22914;&#26524;&#28385;&#36275;&#19978;&#38754;&#30340;&#26465;&#20214;&#65292;&#37027;&#20040;&#35813;&#20013;&#26029;&#25551;&#36848;&#31526;&#23646;&#20110;&#22791;&#36873;&#25551;&#36848;&#31526;&#12290;&#35774;&#23450;&#20854;internal state&#20026;IRQS_AUTODETECT | IRQS_WAITING&#12290;IRQS_AUTODETECT&#34920;&#31034;&#26412;IRQ&#27491;&#22788;&#20110;&#33258;&#21160;&#25506;&#27979;&#20013;&#12290; </P>
<P>&#65288;3&#65289;&#22312;&#31561;&#24453;&#36807;&#31243;&#20013;&#65292;&#31995;&#32479;&#20173;&#28982;&#20801;&#35768;&#65292;&#21508;&#31181;&#20013;&#26029;&#20381;&#28982;&#20250;&#35302;&#21457;&#12290;&#22312;&#21508;&#31181;high level irq event handler&#20013;&#65292;&#24635;&#20250;&#26377;&#22914;&#19979;&#30340;&#20195;&#30721;&#65306; </P>
<BLOCKQUOTE>
<P>desc-&gt;istate &amp;= ~(IRQS_REPLAY | IRQS_WAITING); </P></BLOCKQUOTE>
<P>&#36825;&#37324;&#20250;&#28165;&#38500;IRQS_WAITING&#29366;&#24577;&#12290; </P>
<P>&#65288;4&#65289;&#36825;&#26102;&#20505;&#65292;&#25105;&#20204;&#36824;&#27809;&#26377;&#25511;&#21046;&#37027;&#20010;&#24819;&#35201;&#33258;&#21160;&#25506;&#27979;IRQ&#30340;&#30828;&#20214;&#20135;&#29983;&#20013;&#26029;&#65292;&#22240;&#27492;&#22788;&#20110;&#33258;&#21160;&#25506;&#27979;&#20013;&#65292;&#24182;&#19988;IRQS_WAITING&#24182;&#28165;&#38500;&#30340;&#19968;&#23450;&#19981;&#26159;&#25105;&#20204;&#26399;&#24453;&#30340;IRQ&#65288;&#21487;&#33021;&#26159;spurious interrupts&#23548;&#33268;&#30340;&#65289;&#65292;&#36825;&#26102;&#20505;&#65292;clear IRQS_AUTODETECT&#65292;shutdown&#35813;IRQ&#12290; </P>
<P>&#65288;5&#65289;&#26368;&#22823;&#25506;&#27979;&#30340;IRQ&#26159;31&#65288;mask&#26159;&#19968;&#20010;32 bit&#30340;value&#65289;&#65292;mask&#36820;&#22238;&#30340;&#26159;&#21487;&#33021;&#30340;irq&#25513;&#30721;&#12290; </P>
<P>&#25105;&#20204;&#20877;&#26469;&#30475;&#30475;probe_irq_off&#30340;&#20195;&#30721;&#65306; </P>
<BLOCKQUOTE>
<P>int probe_irq_off(unsigned long val) <BR>{ <BR>&nbsp;&nbsp;&nbsp; int i, irq_found = 0, nr_of_irqs = 0; <BR>&nbsp;&nbsp;&nbsp; struct irq_desc *desc; </P>
<P>&nbsp;&nbsp;&nbsp; for_each_irq_desc(i, desc) { <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; raw_spin_lock_irq(&amp;desc-&gt;lock); </P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (desc-&gt;istate &amp; IRQS_AUTODETECT) {&#65293;&#65293;&#65293;&#65293;&#21482;&#26377;&#22788;&#20110;IRQ&#33258;&#21160;&#25506;&#27979;&#20013;&#30340;&#25551;&#36848;&#31526;&#25165;&#20250;&#34987;&#22788;&#29702; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!(desc-&gt;istate &amp; IRQS_WAITING)) {&#65293;&#65293;&#65293;&#65293;&#25214;&#21040;&#19968;&#20010;&#28508;&#22312;&#30340;&#20013;&#26029;&#25551;&#36848;&#31526; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!nr_of_irqs) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; irq_found = i; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nr_of_irqs++; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; desc-&gt;istate &amp;= ~IRQS_AUTODETECT; &#65293;&#65293;&#65293;&#65293;IRQS_WAITING&#27809;&#26377;&#34987;&#28165;&#38500;&#65292;&#35828;&#26126;&#35813;&#25551;&#36848;&#31526; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; irq_shutdown(desc);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#19981;&#26159;&#33258;&#21160;&#25506;&#27979;&#30340;&#37027;&#20010;&#65292;shutdown&#20043; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; raw_spin_unlock_irq(&amp;desc-&gt;lock); <BR>&nbsp;&nbsp;&nbsp; } <BR>&nbsp;&nbsp;&nbsp; mutex_unlock(&amp;probing_active); </P>
<P>&nbsp;&nbsp;&nbsp; if (nr_of_irqs &gt; 1) &#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#22914;&#26524;&#25214;&#21040;&#22810;&#20110;1&#20010;&#30340;IRQ&#65292;&#35828;&#26126;&#25506;&#27979;&#22833;&#36133;&#65292;&#36820;&#22238;&#36127;&#30340;IRQ&#20010;&#25968;&#20449;&#24687; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; irq_found = -irq_found; </P>
<P>&nbsp;&nbsp;&nbsp; return irq_found; <BR>} </P></BLOCKQUOTE>
<P>&#22240;&#20026;&#22312;&#35843;&#29992;probe_irq_off&#24050;&#32463;&#35302;&#21457;&#20102;&#33258;&#21160;&#25506;&#27979;IRQ&#30340;&#37027;&#20010;&#30828;&#20214;&#20013;&#26029;&#65292;&#22240;&#27492;&#22312;&#35813;&#20013;&#26029;&#30340;high level handler&#30340;&#25191;&#34892;&#36807;&#31243;&#20013;&#65292;&#35813;&#30828;&#20214;&#23545;&#24212;&#30340;&#20013;&#26029;&#25551;&#36848;&#31526;&#30340;IRQS_WAITING&#26631;&#33268;&#24212;&#35813;&#24050;&#32463;&#34987;&#28165;&#38500;&#65292;&#22240;&#27492;probe_irq_off&#20989;&#25968;scan&#20013;&#26029;&#25551;&#36848;&#31526;DB&#65292;&#25214;&#21040;&#22788;&#20110;auto probe&#20013;&#65292;&#32780;&#19988;IRQS_WAITING&#26631;&#33268;&#34987;&#28165;&#38500;&#30340;&#37027;&#20010;IRQ&#12290;&#22914;&#26524;&#25214;&#21040;&#19968;&#20010;&#65292;&#37027;&#20040;&#25506;&#27979;OK&#65292;&#36820;&#22238;&#35813;IRQ number&#65292;&#22914;&#26524;&#25214;&#21040;&#22810;&#20010;&#65292;&#35828;&#26126;&#25506;&#27979;&#22833;&#36133;&#65292;&#36820;&#22238;&#36127;&#30340;IRQ&#20010;&#25968;&#20449;&#24687;&#65292;&#27809;&#26377;&#25214;&#21040;&#30340;&#35805;&#65292;&#36820;&#22238;0&#12290; </P>
<P><BR>2&#12289;resend&#19968;&#20010;&#20013;&#26029; </P>
<P>&#19968;&#20010;ARM SOC&#24635;&#26159;&#26377;&#24456;&#22810;&#30340;GPIO&#65292;&#26377;&#20123;GPIO&#21487;&#20197;&#25552;&#20379;&#20013;&#26029;&#21151;&#33021;&#65292;&#36825;&#20123;GPIO&#30340;&#20013;&#26029;&#21487;&#20197;&#37197;&#32622;&#25104;level trigger&#25110;&#32773;edge trigger&#12290;&#19968;&#33324;&#32780;&#35328;&#65292;&#22823;&#23478;&#37117;&#26356;&#21916;&#27426;&#29992;level trigger&#30340;&#20013;&#26029;&#12290;&#26377;&#30340;SOC&#21482;&#33021;&#26159;&#26377;&#38480;&#20010;&#25968;&#30340;GPIO&#21487;&#20197;&#37197;&#32622;&#25104;&#30005;&#24179;&#20013;&#26029;&#65292;&#22240;&#27492;&#65292;&#22312;&#39033;&#30446;&#21021;&#26399;&#36827;&#34892;pin define&#30340;&#26102;&#20505;&#65292;&#22823;&#23478;&#37117;&#22312;&#20105;&#25250;&#30005;&#24179;&#35302;&#21457;&#30340;GPIO&#12290; </P>
<P>&#30005;&#24179;&#35302;&#21457;&#30340;&#20013;&#26029;&#26377;&#20160;&#20040;&#22909;&#22788;&#21602;&#65311;&#30005;&#24179;&#35302;&#21457;&#30340;&#20013;&#26029;&#24456;&#31616;&#21333;&#12289;&#30452;&#25509;&#65292;&#21482;&#35201;&#30828;&#20214;&#26816;&#27979;&#21040;&#30828;&#20214;&#20107;&#20214;&#65288;&#20363;&#22914;&#26377;&#25968;&#25454;&#21040;&#26469;&#65289;&#65292;&#20854;assert&#25351;&#23450;&#30340;&#30005;&#24179;&#20449;&#21495;&#65292;CPU ack&#35813;&#20013;&#26029;&#21518;&#65292;&#30005;&#24179;&#20449;&#21495;&#28040;&#22833;&#12290;&#20294;&#26159;&#23545;&#20110;&#36793;&#32536;&#35302;&#21457;&#30340;&#20013;&#26029;&#65292;&#23427;&#26159;&#29992;&#19968;&#20010;&#19978;&#21319;&#27839;&#25110;&#32773;&#19979;&#38477;&#27839;&#21578;&#30693;&#30828;&#20214;&#30340;&#29366;&#24577;&#65292;&#36825;&#20010;&#29366;&#24577;&#19981;&#26159;&#19968;&#20010;&#25345;&#32493;&#30340;&#29366;&#24577;&#65292;&#22914;&#26524;&#36719;&#20214;&#22788;&#29702;&#19981;&#22909;&#65292;&#23481;&#26131;&#20002;&#22833;&#20013;&#26029;&#12290; </P>
<P>&#20160;&#20040;&#26102;&#20505;&#20250;resend&#19968;&#20010;&#20013;&#26029;&#21602;&#65311;&#25105;&#20204;&#32771;&#34385;&#19968;&#20010;&#31616;&#21333;&#30340;&#20363;&#23376;&#65306; </P>
<P>&#65288;1&#65289;CPU A&#19978;&#27491;&#22312;&#22788;&#29702;x&#22806;&#35774;&#30340;&#20013;&#26029; </P>
<P>&#65288;2&#65289;x&#22806;&#35774;&#30340;&#20013;&#26029;&#20877;&#27425;&#21040;&#26469;&#65288;CPU A&#24050;&#32463;ack&#35813;IRQ&#65292;&#22240;&#27492;x&#22806;&#35774;&#30340;&#20013;&#26029;&#21487;&#20197;&#20877;&#27425;&#35302;&#21457;&#65289;&#65292;&#36825;&#26102;&#20505;&#20854;&#20182;CPU&#20250;&#22788;&#29702;&#23427;&#65288;mask and ack&#65289;&#65292;&#24182;&#35774;&#32622;&#35813;&#20013;&#26029;&#25551;&#36848;&#31526;&#26159;pending&#29366;&#24577;&#65292;&#24182;&#22996;&#25176;CPU A&#22788;&#29702;&#35813;pending&#29366;&#24577;&#30340;&#20013;&#26029;&#12290;&#38656;&#35201;&#27880;&#24847;&#30340;&#26159;CPU&#24050;&#32463;ack&#20102;&#35813;&#20013;&#26029;&#65292;&#22240;&#27492;&#35813;&#20013;&#26029;&#30340;&#30828;&#20214;&#29366;&#24577;&#24050;&#32463;&#19981;&#26159;pending&#29366;&#24577;&#65292;&#26080;&#27861;&#35302;&#21457;&#20013;&#26029;&#20102;&#65292;&#36825;&#37324;&#30340;pending&#29366;&#24577;&#26159;&#25351;&#20013;&#26029;&#25551;&#36848;&#31526;&#30340;&#36719;&#20214;&#29366;&#24577;&#12290; </P>
<P>&#65288;3&#65289;CPU B&#19978;&#30001;&#20110;&#21516;&#27493;&#30340;&#38656;&#27714;&#65292;disable&#20102;x&#22806;&#35774;&#30340;IRQ&#65292;&#36825;&#26102;&#20505;&#65292;CPU A&#27809;&#26377;&#22788;&#29702;pending&#29366;&#24577;&#30340;x&#22806;&#35774;&#20013;&#26029;&#23601;&#31163;&#24320;&#20102;&#20013;&#26029;&#22788;&#29702;&#36807;&#31243;&#12290; </P>
<P>&#65288;4&#65289;&#24403;enable x&#22806;&#35774;&#30340;IRQ&#30340;&#26102;&#20505;&#65292;&#38656;&#35201;&#26816;&#27979;pending&#29366;&#24577;&#20197;&#20415;resend&#35813;&#20013;&#26029;&#65292;&#21542;&#21017;&#65292;&#35813;&#20013;&#26029;&#20250;&#20002;&#22833;&#30340; </P>
<P>&#20855;&#20307;&#20195;&#30721;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>void check_irq_resend(struct irq_desc *desc, unsigned int irq) <BR>{ <BR><BR>&nbsp;&nbsp;&nbsp; if (irq_settings_is_level(desc)) {&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#30005;&#24179;&#20013;&#26029;&#19981;&#23384;&#22312;resend&#30340;&#38382;&#39064; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; desc-&gt;istate &amp;= ~IRQS_PENDING; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return; <BR>&nbsp;&nbsp;&nbsp; } <BR>&nbsp;&nbsp;&nbsp; if (desc-&gt;istate &amp; IRQS_REPLAY)&#65293;&#65293;&#65293;&#65293;&#22914;&#26524;&#24050;&#32463;&#35774;&#23450;resend&#30340;flag&#65292;&#36864;&#20986;&#23601;OK&#20102;&#65292;&#36825;&#20010;&#24212;&#35813; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &#21644;irq&#30340;enable disable&#33021;&#22810;&#23618;&#23884;&#22871;&#30456;&#20851; <BR>&nbsp;&nbsp;&nbsp; if (desc-&gt;istate &amp; IRQS_PENDING) {&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#22914;&#26524;&#26377;pending&#30340;flag&#21017;&#36827;&#34892;&#22788;&#29702; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; desc-&gt;istate &amp;= ~IRQS_PENDING; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; desc-&gt;istate |= IRQS_REPLAY; &#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#35774;&#32622;retrigger&#26631;&#24535; </P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!desc-&gt;irq_data.chip-&gt;irq_retrigger || <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; !desc-&gt;irq_data.chip-&gt;irq_retrigger(&amp;desc-&gt;irq_data)) {&#65293;&#65293;&#65293;&#65293;&#35843;&#29992;&#24213;&#23618;irq chip&#30340;callback <BR>#ifdef CONFIG_HARDIRQS_SW_RESEND <BR>&#20063;&#21487;&#20197;&#20351;&#29992;&#36719;&#20214;&#25163;&#27573;&#26469;&#23436;&#25104;resend&#19968;&#20010;&#20013;&#26029;&#65292;&#20855;&#20307;&#20195;&#30721;&#30465;&#30053;&#65292;&#26377;&#20852;&#36259;&#22823;&#23478;&#21487;&#20197;&#33258;&#24049;&#30475;&#30475; <BR>#endif <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <BR>&nbsp;&nbsp;&nbsp; } <BR>} </P></BLOCKQUOTE>
<P>&#22312;&#21508;&#31181;high level irq event handler&#20013;&#65292;&#24635;&#20250;&#26377;&#22914;&#19979;&#30340;&#20195;&#30721;&#65306; </P>
<BLOCKQUOTE>
<P>desc-&gt;istate &amp;= ~(IRQS_REPLAY | IRQS_WAITING); </P></BLOCKQUOTE>
<P>&#36825;&#37324;&#20250;&#28165;&#38500;IRQS_REPLAY&#29366;&#24577;&#65292;&#34920;&#31034;&#35813;&#20013;&#26029;&#24050;&#32463;&#34987;retrigger&#65292;&#19968;&#27425;resend interrupt&#30340;&#36807;&#31243;&#32467;&#26463;&#12290; </P>
<P>&nbsp; </P>
<P>3&#12289;unhandled interrupt&#21644;spurious interrupt </P>
<P>&#22312;&#20013;&#26029;&#22788;&#29702;&#30340;&#26368;&#21518;&#65292;&#24635;&#20250;&#26377;&#19968;&#27573;&#20195;&#30721;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>irqreturn_t <BR>handle_irq_event_percpu(struct irq_desc *desc, struct irqaction *action) <BR>{ </P>
<P>&#8230;&#8230; </P>
<P>&nbsp;&nbsp;&nbsp; if (!noirqdebug) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; note_interrupt(irq, desc, retval); <BR>&nbsp;&nbsp;&nbsp; return retval; <BR>} </P></BLOCKQUOTE>
<P>note_interrupt&#23601;&#26159;&#36827;&#34892;unhandled interrupt&#21644;spurious interrupt&#22788;&#29702;&#30340;&#12290;&#23545;&#20110;&#36825;&#31867;&#20013;&#26029;&#65292;linux kernel&#26377;&#19968;&#22871;&#22797;&#26434;&#30340;&#26426;&#21046;&#26469;&#22788;&#29702;&#65292;&#20320;&#21487;&#20197;&#36890;&#36807;command line&#21442;&#25968;&#65288;noirqdebug&#65289;&#26469;&#25511;&#21046;&#24320;&#20851;&#35813;&#21151;&#33021;&#12290; </P>
<P>&#24403;&#21457;&#29983;&#20102;&#19968;&#20010;&#20013;&#26029;&#65292;&#20294;&#26159;&#27809;&#26377;&#34987;&#22788;&#29702;&#65288;&#26377;&#20004;&#31181;&#21487;&#33021;&#65292;&#19968;&#31181;&#26159;&#26681;&#26412;&#27809;&#26377;&#27880;&#20876;&#30340;specific handler&#65292;&#31532;&#20108;&#31181;&#26159;&#26377;handler&#65292;&#20294;&#26159;handler&#21542;&#35748;&#26159;&#33258;&#24049;&#23545;&#24212;&#30340;&#35774;&#22791;&#35302;&#21457;&#30340;&#20013;&#26029;&#65289;&#65292;&#24590;&#20040;&#21150;&#65311;&#27627;&#26080;&#30097;&#38382;&#36825;&#26159;&#19968;&#20010;&#24322;&#24120;&#29366;&#20917;&#65292;&#37027;&#20040;kernel&#26159;&#21542;&#35201;&#31435;&#21051;&#37319;&#21462;&#25514;&#26045;&#23558;&#35813;IRQ disable&#21602;&#65311;&#20063;&#19981;&#22826;&#21512;&#36866;&#65292;&#27605;&#31455;interrupt request&#20449;&#21495;&#32447;&#26159;&#20801;&#35768;&#20849;&#20139;&#30340;&#65292;&#30452;&#25509;disable&#35813;IRQ&#26377;&#21487;&#33021;&#20250;&#19979;&#25163;&#22826;&#29408;&#65292;kernel&#37319;&#21462;&#20102;&#36825;&#26679;&#30340;&#31574;&#30053;&#65306;&#22914;&#26524;&#35813;IRQ&#35302;&#21457;&#20102;100,000&#27425;&#65292;&#20294;&#26159;99,900&#27425;&#27809;&#26377;&#22788;&#29702;&#65292;&#22312;&#36825;&#31181;&#26465;&#20214;&#19979;&#65292;&#25105;&#20204;&#23601;&#26159;disable&#36825;&#20010;interrupt request line&#12290;&#22810;&#20040;&#26377;&#24773;&#26377;&#20041;&#30340;&#31574;&#30053;&#21834;&#65281;&#30456;&#20851;&#30340;&#25511;&#21046;&#25968;&#25454;&#22312;&#20013;&#26029;&#25551;&#36848;&#31526;&#20013;&#65292;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>struct irq_desc { <BR>&#8230;&#8230; <BR>&nbsp;&nbsp;&nbsp; unsigned int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; irq_count;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#35760;&#24405;&#21457;&#29983;&#30340;&#20013;&#26029;&#30340;&#27425;&#25968;&#65292;&#27599;100,000&#21017;&#22238;&#28378; <BR>&nbsp;&nbsp;&nbsp; unsigned long&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; last_unhandled;&#65293;&#65293;&#65293;&#65293;&#65293;&#19978;&#19968;&#27425;&#27809;&#26377;&#22788;&#29702;&#30340;IRQ&#30340;&#26102;&#38388;&#28857; <BR>&nbsp;&nbsp;&nbsp; unsigned int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; irqs_unhandled;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#27809;&#26377;&#22788;&#29702;&#30340;&#27425;&#25968; <BR>&#8230;&#8230; <BR>} </P></BLOCKQUOTE>
<P>irq_count&#21644;irqs_unhandled&#37117;&#26159;&#27604;&#36739;&#30452;&#35266;&#30340;&#65292;&#20026;&#20309;&#35201;&#35760;&#24405;unhandled interrupt&#21457;&#29983;&#30340;&#26102;&#38388;&#21602;&#65311;&#25105;&#20204;&#26469;&#30475;&#20855;&#20307;&#30340;&#20195;&#30721;&#12290;&#20855;&#20307;&#30340;&#30456;&#20851;&#20195;&#30721;&#20301;&#20110;note_interrupt&#20013;&#65292;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>void note_interrupt(unsigned int irq, struct irq_desc *desc,&nbsp; irqreturn_t action_ret) <BR>{ <BR>&nbsp;&nbsp;&nbsp; if (desc-&gt;istate &amp; IRQS_POLL_INPROGRESS ||&nbsp; irq_settings_is_polled(desc)) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return; </P>
<P><BR>&nbsp;&nbsp;&nbsp; if (action_ret == IRQ_WAKE_THREAD)&#65293;&#65293;&#65293;&#65293;handler&#36820;&#22238;IRQ_WAKE_THREAD&#26159;&#27491;&#24120;&#24773;&#20917; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return; </P>
<P>&nbsp;&nbsp;&nbsp; if (bad_action_ret(action_ret)) {&#65293;&#65293;&#65293;&#65293;&#65293;&#25253;&#21578;&#38169;&#35823;&#65292;&#36825;&#20123;&#26159;&#30001;&#20110;specific handler&#30340;&#36820;&#22238;&#38169;&#35823;&#23548;&#33268;&#30340; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; report_bad_irq(irq, desc, action_ret); <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return; <BR>&nbsp;&nbsp;&nbsp; } </P>
<P>&nbsp;&nbsp;&nbsp; if (unlikely(action_ret == IRQ_NONE)) {&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#26159;unhandled interrupt <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (time_after(jiffies, desc-&gt;last_unhandled + HZ/10))&#65293;&#65293;&#65293;&#65288;1&#65289; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; desc-&gt;irqs_unhandled = 1;&#65293;&#65293;&#65293;&#37325;&#26032;&#24320;&#22987;&#35745;&#25968; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; desc-&gt;irqs_unhandled++;&#65293;&#65293;&#65293;&#21028;&#23450;&#20026;unhandled interrupt&#65292;&#35745;&#25968;&#21152;&#19968; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; desc-&gt;last_unhandled = jiffies;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#20445;&#23384;&#26412;&#27425;unhandled interrupt&#23545;&#24212;&#30340;jiffies&#26102;&#38388; <BR>&nbsp;&nbsp;&nbsp; } </P>
<P>if (unlikely(try_misrouted_irq(irq, desc, action_ret))) {&#65293;&#65293;&#65293;&#26159;&#21542;&#21551;&#21160;Misrouted IRQ fixup <BR>&nbsp;&nbsp;&nbsp; int ok = misrouted_irq(irq); <BR>&nbsp;&nbsp;&nbsp; if (action_ret == IRQ_NONE) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; desc-&gt;irqs_unhandled -= ok; <BR>} </P>
<P>&nbsp;&nbsp;&nbsp; desc-&gt;irq_count++; <BR>&nbsp;&nbsp;&nbsp; if (likely(desc-&gt;irq_count &lt; 100000))&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;2&#65289; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return; </P>
<P>&nbsp;&nbsp;&nbsp; desc-&gt;irq_count = 0; <BR>&nbsp;&nbsp;&nbsp; if (unlikely(desc-&gt;irqs_unhandled &gt; 99900)) {&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;3&#65289; <BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __report_bad_irq(irq, desc, action_ret);&#65293;&#65293;&#65293;&#25253;&#21578;&#38169;&#35823; <BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; desc-&gt;istate |= IRQS_SPURIOUS_DISABLED; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; desc-&gt;depth++; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; irq_disable(desc); </P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mod_timer(&amp;poll_spurious_irq_timer,&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;4&#65289; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jiffies + POLL_SPURIOUS_IRQ_INTERVAL); <BR>&nbsp;&nbsp;&nbsp; } <BR>&nbsp;&nbsp;&nbsp; desc-&gt;irqs_unhandled = 0; <BR>} </P></BLOCKQUOTE>
<P>&#65288;1&#65289;&#26159;&#21542;&#26159;&#19968;&#27425;&#26377;&#25928;&#30340;unhandled interrupt&#36824;&#35201;&#26681;&#25454;&#26102;&#38388;&#26469;&#21028;&#26029;&#12290;&#19968;&#33324;&#32780;&#35328;&#65292;&#24403;&#30828;&#20214;&#22788;&#20110;&#24322;&#24120;&#29366;&#24577;&#30340;&#26102;&#20505;&#24448;&#24448;&#26159;&#38750;&#24120;&#30701;&#30340;&#26102;&#38388;&#35302;&#21457;&#38750;&#24120;&#22810;&#27425;&#30340;&#20013;&#26029;&#65292;&#22914;&#26524;&#36317;&#31163;&#19978;&#27425;unhandled interrupt&#30340;&#26102;&#38388;&#36229;&#36807;&#20102;10&#20010;jiffies&#65288;&#22914;&#26524;HZ&#65309;100&#65292;&#37027;&#20040;&#26102;&#38388;&#23601;&#26159;100ms&#65289;&#65292;&#37027;&#20040;&#25105;&#20204;&#35201;&#25226;irqs_unhandled&#37325;&#26032;&#35745;&#25968;&#12290;&#22914;&#26524;&#19981;&#36825;&#20040;&#22788;&#29702;&#30340;&#35805;&#65292;&#38543;&#30528;&#26102;&#38388;&#30340;&#32047;&#35745;&#65292;&#26368;&#32456;irqs_unhandled&#21487;&#33021;&#20250;&#36798;&#21040;99900&#27425;&#30340;&#65292;&#20174;&#32780;&#25226;&#36825;&#20010;IRQ&#38169;&#35823;&#30340;&#25512;&#19978;&#20102;&#23457;&#21028;&#21488;&#12290; </P>
<P>&#65288;2&#65289;irq_count&#27599;&#27425;&#37117;&#20250;&#21152;&#19968;&#65292;&#35760;&#24405;IRQ&#34987;&#35302;&#21457;&#30340;&#27425;&#25968;&#12290;&#20294;&#21482;&#35201;&#22823;&#20110;100000&#25165;&#21551;&#21160; step &#65288;3&#65289;&#20013;&#30340;&#26816;&#26597;&#12290;&#19968;&#26086;&#21551;&#21160;&#26816;&#26597;&#65292;irq_count&#20250;&#28165;&#38646;&#65292;irqs_unhandled&#20063;&#20250;&#28165;&#38646;&#65292;&#36827;&#20837;&#19979;&#19968;&#20010;&#26816;&#26597;&#21608;&#26399;&#12290; </P>
<P>&#65288;3&#65289;&#22914;&#26524;&#28385;&#36275;&#26465;&#20214;&#65288;IRQ&#35302;&#21457;&#20102;100,000&#27425;&#65292;&#20294;&#26159;99,900&#27425;&#27809;&#26377;&#22788;&#29702;&#65289;&#65292;disable&#35813;IRQ&#12290; </P>
<P>&#65288;4&#65289;&#21551;&#21160;timer&#65292;&#36718;&#35810;&#25972;&#20010;&#31995;&#32479;&#20013;&#30340;handler&#26469;&#22788;&#29702;&#36825;&#20010;&#20013;&#26029;&#65288;&#36718;&#35810;&#21834;&#65292;&#32477;&#23545;&#26159;&#30495;&#29233;&#21834;&#65289;&#12290;&#36825;&#20010;timer&#30340;callback&#20989;&#25968;&#23450;&#20041;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>static void poll_spurious_irqs(unsigned long dummy) <BR>{ <BR>&nbsp;&nbsp;&nbsp; struct irq_desc *desc; <BR>&nbsp;&nbsp;&nbsp; int i; </P>
<P>&nbsp;&nbsp;&nbsp; if (atomic_inc_return(&amp;irq_poll_active) != 1)&#65293;&#65293;&#65293;&#65293;&#30830;&#20445;&#31995;&#32479;&#20013;&#21482;&#26377;&#19968;&#20010;excuting thread&#36827;&#20837;&#20020;&#30028;&#21306; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto out; <BR>&nbsp;&nbsp;&nbsp; irq_poll_cpu = smp_processor_id(); &#65293;&#65293;&#65293;&#65293;&#35760;&#24405;&#24403;&#21069;&#27491;&#22312;polling&#30340;CPU </P>
<P>&nbsp;&nbsp;&nbsp; for_each_irq_desc(i, desc) {&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#36941;&#21382;&#25152;&#26377;&#30340;&#20013;&#26029;&#25551;&#36848;&#31526; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsigned int state; </P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!i)&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#36234;&#36807;0&#21495;&#20013;&#26029;&#25551;&#36848;&#31526;&#12290;&#23545;&#20110;X86&#65292;&#36825;&#26159;timer&#30340;&#20013;&#26029; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; continue; </P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Racy but it doesn't matter */ <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; state = desc-&gt;istate; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; barrier(); <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!(state &amp; IRQS_SPURIOUS_DISABLED))&#65293;&#65293;&#65293;&#65293;&#21517;&#33457;&#26377;&#20027;&#30340;&#37027;&#20123;&#23601;&#19981;&#24517;&#32771;&#34385;&#20102; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; continue; </P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; local_irq_disable(); <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try_one_irq(i, desc, true);&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;OK&#65292;&#23581;&#35797;&#19968;&#19979;&#26159;&#19981;&#26159;&#21487;&#20197;&#22788;&#29702; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; local_irq_enable(); <BR>&nbsp;&nbsp;&nbsp; } <BR>out: <BR>&nbsp;&nbsp;&nbsp; atomic_dec(&amp;irq_poll_active); <BR>&nbsp;&nbsp;&nbsp; mod_timer(&amp;poll_spurious_irq_timer,&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#19968;&#26086;&#35302;&#21457;&#20102;&#35813;timer&#65292;&#23601;&#20572;&#19981;&#19979;&#26469; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; jiffies + POLL_SPURIOUS_IRQ_INTERVAL); <BR>} </P></BLOCKQUOTE>
<P>&nbsp; </P>
<P>&#19977;&#12289;&#21644;high level irq event handler&#30456;&#20851;&#30340;&#30828;&#20214;&#25551;&#36848; </P>
<P>1&#12289;CPU layer&#21644;Interrupt controller&#20043;&#38388;&#30340;&#25509;&#21475; </P>
<P>&#20174;&#36923;&#36753;&#23618;&#38754;&#19978;&#30475;&#65292;CPU&#21644;interrupt controller&#20043;&#38388;&#30340;&#25509;&#21475;&#21253;&#25324;&#65306; </P>
<P>&#65288;1&#65289;&#35302;&#21457;&#20013;&#26029;&#30340;signal&#12290;&#19968;&#33324;&#32780;&#35328;&#65292;&#36825;&#20010;&#65288;&#20123;&#65289;&#20449;&#21495;&#26159;&#30005;&#24179;&#35302;&#21457;&#30340;&#12290;&#23545;&#20110;ARM CPU&#65292;&#23427;&#26159;nIRQ&#21644;nFIQ&#20449;&#21495;&#32447;&#65292;&#23545;&#20110;X86&#65292;&#23427;&#26159;INT&#21644;NMI&#20449;&#21495;&#32447;&#65292;&#23545;&#20110;PowerPC&#65292;&#36825;&#20123;&#20449;&#21495;&#32447;&#21253;&#25324;MC&#65288;machine check&#65289;&#12289;CRIT&#65288;critical interrupt&#65289;&#21644;NON-CRIT&#65288;Non critical interrupt&#65289;&#12290;&#23545;&#20110;linux kernel&#30340;&#20013;&#26029;&#23376;&#31995;&#32479;&#65292;&#25105;&#20204;&#21482;&#20351;&#29992;&#20854;&#20013;&#19968;&#20010;&#20449;&#21495;&#32447;&#65288;&#20363;&#22914;&#23545;&#20110;ARM&#32780;&#35328;&#65292;&#25105;&#20204;&#21482;&#20351;&#29992;nIRQ&#36825;&#20010;&#20449;&#21495;&#32447;&#65289;&#12290;&#36825;&#26679;&#65292;&#20174;CPU&#23618;&#38754;&#30475;&#65292;&#20854;&#36923;&#36753;&#21160;&#20316;&#38750;&#24120;&#30340;&#31616;&#21333;&#65292;&#19981;&#21306;&#20998;&#20248;&#20808;&#32423;&#65292;&#35302;&#21457;&#20013;&#26029;&#30340;&#37027;&#20010;&#20449;&#21495;&#32447;&#19968;&#26086;assert&#65292;&#24182;&#19988;CPU&#27809;&#26377;mask&#20013;&#26029;&#65292;&#37027;&#20040;&#36719;&#20214;&#23601;&#20250;&#36716;&#21040;&#19968;&#20010;&#24322;&#24120;&#21521;&#37327;&#25191;&#34892;&#65292;&#23436;&#27605;&#21518;&#36820;&#22238;&#29616;&#22330;&#12290; </P>
<P>&#65288;2&#65289;Ack&#20013;&#26029;&#30340;signal&#12290;&#36825;&#20010;signal&#21487;&#33021;&#26159;&#29289;&#29702;&#19978;&#30340;&#19968;&#20010;&#36830;&#25509;CPU&#21644;interrupt controller&#30340;&#38108;&#32447;&#65292;&#20063;&#21487;&#33021;&#19981;&#26159;&#12290;&#23545;&#20110;X86&#65291;8259&#36825;&#26679;&#30340;&#32467;&#26500;&#65292;Ack&#20013;&#26029;&#30340;signal&#23601;&#26159;nINTA&#20449;&#21495;&#32447;&#65292;&#23545;&#20110;ARM&#65291;GIC&#32780;&#35328;&#65292;&#36825;&#20010;&#20449;&#21495;&#23601;&#26159;&#24635;&#32447;&#19978;&#30340;&#19968;&#27425;&#35775;&#38382;&#65288;&#35835;Interrupt Acknowledge Register&#23492;&#23384;&#22120;&#65289;&#12290;CPU ack&#20013;&#26029;&#26631;&#35782;cpu&#24320;&#21551;&#21551;&#21160;&#20013;&#26029;&#26381;&#21153;&#31243;&#24207;&#65288;specific handler&#65289;&#21435;&#22788;&#29702;&#35813;&#20013;&#26029;&#12290;&#23545;&#20110;X86&#32780;&#35328;&#65292;ack&#20013;&#26029;&#21487;&#20197;&#35753;8259&#23558;interrupt vector&#25968;&#25454;&#36865;&#21040;&#25968;&#25454;&#24635;&#32447;&#19978;&#65292;&#20174;&#32780;&#35753;CPU&#33719;&#21462;&#20102;&#36275;&#22815;&#30340;&#22788;&#29702;&#35813;&#20013;&#26029;&#30340;&#20449;&#24687;&#12290;&#23545;&#20110;ARM&#32780;&#35328;&#65292;ack&#20013;&#26029;&#30340;&#21516;&#26102;&#20063;&#23601;&#26159;&#33719;&#21462;&#20102;&#21457;&#29983;&#20013;&#26029;&#30340;HW interrupt ID&#65292;&#24635;&#32780;&#35328;&#20043;&#65292;ack&#20013;&#26029;&#21518;&#65292;CPU&#33719;&#21462;&#20102;&#36275;&#22815;&#24320;&#21551;&#25191;&#34892;&#20013;&#26029;&#22788;&#29702;&#30340;&#20449;&#24687;&#12290; </P>
<P>&#65288;3&#65289;&#32467;&#26463;&#20013;&#26029;&#65288;EOI&#65292;end of interrupt&#65289;&#30340;signal&#12290;&#36825;&#20010;signal&#29992;&#26469;&#26631;&#35782;CPU&#24050;&#32463;&#23436;&#25104;&#20102;&#23545;&#35813;&#20013;&#26029;&#30340;&#22788;&#29702;&#65288;specific handler&#25110;&#32773;ISR&#65292;interrupt serivce routine&#25191;&#34892;&#23436;&#27605;&#65289;&#12290;&#23454;&#38469;&#30340;&#29289;&#29702;&#24418;&#24577;&#36825;&#37324;&#23601;&#19981;&#25551;&#36848;&#20102;&#65292;&#21644;ack&#20013;&#26029;signal&#26159;&#31867;&#20284;&#30340;&#12290; </P>
<P>&#65288;4&#65289;&#25511;&#21046;&#24635;&#32447;&#21644;&#25968;&#25454;&#24635;&#32447;&#25509;&#21475;&#12290;&#36890;&#36807;&#36825;&#20123;&#25509;&#21475;&#65292;CPU&#21487;&#20197;&#35775;&#38382;&#65288;&#35835;&#20889;&#65289;interrupt controller&#30340;&#23492;&#23384;&#22120;&#12290; </P>
<P>&nbsp; </P>
<P>2&#12289;Interrupt controller&#21644;Peripheral device&#20043;&#38388;&#30340;&#25509;&#21475; </P>
<P>&#25152;&#26377;&#30340;&#31995;&#32479;&#20013;&#65292;Interrupt controller&#21644;Peripheral device&#20043;&#38388;&#30340;&#25509;&#21475;&#37117;&#26159;&#19968;&#20010;Interrupt Request&#20449;&#21495;&#32447;&#12290;&#22806;&#35774;&#36890;&#36807;&#36825;&#20010;&#20449;&#21495;&#32447;&#19978;&#30340;&#30005;&#24179;&#25110;&#32773;&#36793;&#32536;&#21521;CPU&#65288;&#23454;&#38469;&#19978;&#26159;&#36890;&#36807;interrupt controller&#65289;&#30003;&#35831;&#20013;&#26029;&#26381;&#21153;&#12290; </P>
<P>&nbsp; </P>
<P>&#22235;&#12289;&#20960;&#31181;&#20856;&#22411;&#30340;high level irq event handler </P>
<P>&#26412;&#31456;&#20027;&#35201;&#20171;&#32461;&#20960;&#31181;&#20856;&#22411;&#30340;high level irq event handler&#65292;&#22312;&#36827;&#34892;high level irq event handler&#30340;&#35774;&#23450;&#30340;&#26102;&#20505;&#38656;&#35201;&#27880;&#24847;&#65292;&#19981;&#26159;&#22806;&#35774;&#20351;&#29992;&#30005;&#24179;&#35302;&#21457;&#23601;&#36873;&#29992;handle_level_irq&#65292;&#36873;&#29992;&#20160;&#20040;&#26679;&#30340;high level irq event handler&#26159;&#21644;Interrupt controller&#30340;&#34892;&#20026;&#20197;&#21450;&#22806;&#35774;&#30005;&#24179;&#35302;&#21457;&#26041;&#24335;&#20915;&#23450;&#30340;&#12290;&#20171;&#32461;&#27599;&#20010;&#20856;&#22411;&#30340;handler&#20043;&#21069;&#65292;&#25105;&#20250;&#31616;&#21333;&#30340;&#25551;&#36848;&#35813;handler&#35201;&#27714;&#30340;&#30828;&#20214;&#34892;&#20026;&#65292;&#22914;&#26524;&#35813;&#22806;&#35774;&#30340;&#20013;&#26029;&#31995;&#32479;&#31526;&#21512;&#36825;&#20010;&#30828;&#20214;&#34892;&#20026;&#65292;&#37027;&#20040;&#21487;&#20197;&#36873;&#25321;&#35813;handler&#20026;&#35813;&#20013;&#26029;&#30340;high level irq event handler&#12290; </P>
<P>1&#12289;&#36793;&#32536;&#35302;&#21457;&#30340;handler&#12290; </P>
<P>&#20351;&#29992;handle_edge_irq&#36825;&#20010;handler&#30340;&#30828;&#20214;&#20013;&#26029;&#31995;&#32479;&#34892;&#20026;&#22914;&#19979;&#65306; </P>
<P><A href="http://www.wowotech.net/content/uploadfile/201408/b844e701747cb80623342178d80fbe0120140828120039.gif"><IMG title=xyz style="BORDER-LEFT-WIDTH: 0px; BORDER-RIGHT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; DISPLAY: inline; BORDER-TOP-WIDTH: 0px" border=0 alt=xyz src="http://www.wowotech.net/content/uploadfile/201408/1618e77f0e5a8cbc94806355a0ff3c4720140828120041.gif" width=645 height=480></A> </P>
<P>&#25105;&#20204;&#20197;&#19978;&#21319;&#27839;&#20026;&#20363;&#25551;&#36848;&#36793;&#32536;&#20013;&#26029;&#30340;&#22788;&#29702;&#36807;&#31243;&#65288;&#19979;&#38477;&#27839;&#30340;&#35302;&#21457;&#26159;&#31867;&#20284;&#30340;&#65289;&#12290;&#24403;interrupt controller&#26816;&#27979;&#21040;&#20102;&#19978;&#21319;&#27839;&#20449;&#21495;&#65292;&#20250;&#23558;&#35813;&#19978;&#21319;&#27839;&#29366;&#24577;&#65288;pending&#65289;&#38145;&#23384;&#22312;&#23492;&#23384;&#22120;&#20013;&#65292;&#24182;&#36890;&#36807;&#20013;&#26029;&#30340;signal&#21521;CPU&#35302;&#21457;&#20013;&#26029;&#12290;&#38656;&#35201;&#27880;&#24847;&#65306;&#36825;&#26102;&#20505;&#65292;&#22806;&#35774;&#21644;interrupt controller&#20043;&#38388;&#30340;interrupt request&#20449;&#21495;&#32447;&#20250;&#20445;&#25345;&#39640;&#30005;&#24179;&#65292;&#36825;&#20063;&#23601;&#24847;&#21619;&#30528;interrupt controller&#19981;&#21487;&#33021;&#26816;&#27979;&#21040;&#26032;&#30340;&#20013;&#26029;&#20449;&#21495;&#65288;&#26412;&#36523;&#26159;&#39640;&#30005;&#24179;&#65292;&#26080;&#27861;&#24418;&#25104;&#19978;&#21319;&#27839;&#65289;&#12290;&#36825;&#20010;&#39640;&#30005;&#24179;&#20449;&#21495;&#20250;&#19968;&#30452;&#20445;&#25345;&#21040;&#36719;&#20214;ack&#35813;&#20013;&#26029;&#65288;&#35843;&#29992;irq chip&#30340;irq_ack callback&#20989;&#25968;&#65289;&#12290;ack&#20043;&#21518;&#65292;&#20013;&#26029;&#25511;&#21046;&#22120;&#25165;&#26377;&#21487;&#33021;&#32487;&#32493;&#25506;&#27979;&#19978;&#21319;&#27839;&#65292;&#35302;&#21457;&#19979;&#19968;&#27425;&#20013;&#26029;&#12290; </P>
<P>ARM&#65291;GIC&#32452;&#25104;&#30340;&#31995;&#32479;&#19981;&#31526;&#21512;&#36825;&#20010;&#31867;&#22411;&#12290;&#34429;&#28982;GIC&#25552;&#20379;&#20102;IAR&#65288;Interrupt Acknowledge Register&#65289;&#23492;&#23384;&#22120;&#26469;&#35753;ARM&#26469;ack&#20013;&#26029;&#65292;&#20294;&#26159;&#65292;&#22312;&#35843;&#29992;high level handler&#20043;&#21069;&#65292;&#20013;&#26029;&#22788;&#29702;&#31243;&#24207;&#38656;&#35201;&#36890;&#36807;&#35835;&#21462;IAR&#23492;&#23384;&#22120;&#33719;&#24471;HW interrpt ID&#24182;&#36716;&#25442;&#25104;IRQ number&#65292;&#22240;&#27492;&#23454;&#38469;&#19978;&#65292;&#23545;&#20110;GIC&#30340;irq chip&#65292;&#23427;&#26159;&#26080;&#27861;&#25552;&#20379;&#26412;&#22330;&#26223;&#20013;&#30340;irq_ack&#20989;&#25968;&#30340;&#12290;&#24456;&#22810;GPIO type&#30340;interrupt controller&#31526;&#21512;&#19978;&#38754;&#30340;&#26465;&#20214;&#65292;&#23427;&#20204;&#20250;&#25552;&#20379;pending&#29366;&#24577;&#23492;&#23384;&#22120;&#65292;&#35835;&#21487;&#20197;&#33719;&#21462;pending&#29366;&#24577;&#65292;&#32780;&#21521;pending&#29366;&#24577;&#23492;&#23384;&#22120;&#20889;1&#21487;&#20197;ack&#35813;&#20013;&#26029;&#65292;&#35753;interrupt controller&#21487;&#20197;&#32487;&#32493;&#35302;&#21457;&#19979;&#19968;&#27425;&#20013;&#26029;&#12290; </P>
<P>handle_edge_irq&#20195;&#30721;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>void handle_edge_irq(unsigned int irq, struct irq_desc *desc) <BR>{ <BR>&nbsp;&nbsp;&nbsp; raw_spin_lock(&amp;desc-&gt;lock); &#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;0&#65289; </P>
<P>&nbsp;&nbsp;&nbsp; desc-&gt;istate &amp;= ~(IRQS_REPLAY | IRQS_WAITING);&#65293;&#65293;&#65293;&#65293;&#21442;&#32771;&#19978;&#19968;&#31456;&#30340;&#25551;&#36848; <BR><BR>&nbsp;&nbsp;&nbsp; if (unlikely(irqd_irq_disabled(&amp;desc-&gt;irq_data) ||&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;1&#65289; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; irqd_irq_inprogress(&amp;desc-&gt;irq_data) || !desc-&gt;action)) { <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!irq_check_poll(desc)) { <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; desc-&gt;istate |= IRQS_PENDING; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mask_ack_irq(desc); <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto out_unlock; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <BR>&nbsp;&nbsp;&nbsp; } <BR>&nbsp;&nbsp;&nbsp; kstat_incr_irqs_this_cpu(irq, desc); &#65293;&#65293;&#65293;&#26356;&#26032;&#35813;IRQ&#32479;&#35745;&#20449;&#24687; </P>
<P><BR>&nbsp;&nbsp;&nbsp; desc-&gt;irq_data.chip-&gt;irq_ack(&amp;desc-&gt;irq_data); &#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;2&#65289; </P>
<P>&nbsp;&nbsp;&nbsp; do { <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (unlikely(!desc-&gt;action)) { &#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;3&#65289; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mask_irq(desc); <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto out_unlock; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P><BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (unlikely(desc-&gt;istate &amp; IRQS_PENDING)) { &#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;4&#65289; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!irqd_irq_disabled(&amp;desc-&gt;irq_data) &amp;&amp; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; irqd_irq_masked(&amp;desc-&gt;irq_data)) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unmask_irq(desc); <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } </P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; handle_irq_event(desc); &#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;5&#65289; </P>
<P>&nbsp;&nbsp;&nbsp; } while ((desc-&gt;istate &amp; IRQS_PENDING) &amp;&amp; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; !irqd_irq_disabled(&amp;desc-&gt;irq_data)); &#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;6&#65289; </P>
<P>out_unlock: <BR>&nbsp;&nbsp;&nbsp; raw_spin_unlock(&amp;desc-&gt;lock); &#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;7&#65289; <BR>} </P></BLOCKQUOTE>
<P>&#65288;0&#65289; &#36825;&#26102;&#20505;&#65292;&#20013;&#26029;&#20173;&#28982;&#26159;&#20851;&#38381;&#30340;&#65292;&#22240;&#27492;&#19981;&#20250;&#26377;&#26469;&#33258;&#26412;CPU&#30340;&#24182;&#21457;&#65292;&#20351;&#29992;raw spin lock&#23601;&#38450;&#27490;&#20854;&#20182;CPU&#19978;&#23545;&#35813;IRQ&#30340;&#20013;&#26029;&#25551;&#36848;&#31526;&#30340;&#35775;&#38382;&#12290;&#38024;&#23545;&#35813;spin lock&#65292;&#25105;&#20204;&#30452;&#35266;&#30340;&#24863;&#35273;&#26159;raw_spin_lock&#21644;&#65288;7&#65289;&#20013;&#30340;raw_spin_unlock&#26159;&#25104;&#23545;&#30340;&#65292;&#23454;&#38469;&#19978;&#24182;&#19981;&#26159;&#65292;handle_irq_event&#20013;&#30340;&#20195;&#30721;&#26159;&#36825;&#26679;&#30340;&#65306; </P>
<BLOCKQUOTE>
<P>irqreturn_t handle_irq_event(struct irq_desc *desc) <BR>{ </P>
<P>&nbsp;&nbsp;&nbsp; raw_spin_unlock(&amp;desc-&gt;lock); &#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#21644;&#19978;&#38754;&#30340;&#65288;0&#65289;&#23545;&#24212; </P>
<P>&nbsp;&nbsp;&nbsp; &#22788;&#29702;&#20855;&#20307;&#30340;action list </P>
<P>&nbsp;&nbsp;&nbsp; raw_spin_lock(&amp;desc-&gt;lock);&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#21644;&#19978;&#38754;&#30340;&#65288;7&#65289;&#23545;&#24212; <BR><BR>} </P></BLOCKQUOTE>
<P>&#23454;&#38469;&#19978;&#65292;&#30001;&#20110;&#22312;handle_irq_event&#20013;&#22788;&#29702;action list&#30340;&#32791;&#26102;&#36824;&#26159;&#27604;&#36739;&#38271;&#30340;&#65292;&#22240;&#27492;&#22788;&#29702;&#20855;&#20307;&#30340;action list&#30340;&#26102;&#20505;&#24182;&#27809;&#26377;&#25345;&#26377;&#20013;&#26029;&#25551;&#36848;&#31526;&#30340;spin lock&#12290;&#22312;&#22914;&#26524;&#37027;&#26679;&#30340;&#35805;&#65292;&#20854;&#20182;CPU&#22312;&#23545;&#20013;&#26029;&#25551;&#36848;&#31526;&#36827;&#34892;&#25805;&#20316;&#30340;&#26102;&#20505;&#38656;&#35201;spin&#30340;&#26102;&#38388;&#20250;&#24456;&#38271;&#30340;&#12290; </P>
<P>&#65288;1&#65289;&#21028;&#26029;&#26159;&#21542;&#38656;&#35201;&#25191;&#34892;&#19979;&#38754;&#30340;action list&#30340;&#22788;&#29702;&#12290;&#36825;&#37324;&#20998;&#25104;&#20960;&#31181;&#24773;&#20917;&#65306; </P>
<P>a&#12289;&#35813;&#20013;&#26029;&#20107;&#20214;&#24050;&#32463;&#34987;&#20854;&#20182;&#30340;CPU&#22788;&#29702;&#20102; </P>
<P>b&#12289;&#35813;&#20013;&#26029;&#34987;&#20854;&#20182;&#30340;CPU disable&#20102; </P>
<P>c&#12289;&#35813;&#20013;&#26029;&#25551;&#36848;&#31526;&#27809;&#26377;&#27880;&#20876;specific handler&#12290;&#36825;&#20010;&#27604;&#36739;&#31616;&#21333;&#65292;&#22914;&#26524;&#27809;&#26377;irqaction&#65292;&#26681;&#26412;&#27809;&#26377;&#24517;&#35201;&#35843;&#29992;action list&#30340;&#22788;&#29702; </P>
<P>&#22914;&#26524;&#35813;&#20013;&#26029;&#20107;&#20214;&#24050;&#32463;&#34987;&#20854;&#20182;&#30340;CPU&#22788;&#29702;&#20102;&#65292;&#37027;&#20040;&#25105;&#20204;&#20165;&#20165;&#26159;&#35774;&#23450;pending&#29366;&#24577;&#65288;&#20026;&#20102;&#22996;&#25176;&#27491;&#22312;&#22788;&#29702;&#30340;&#35813;&#20013;&#26029;&#30340;&#37027;&#20010;CPU&#36827;&#34892;&#22788;&#29702;&#65289;&#65292;mask_ack_irq&#35813;&#20013;&#26029;&#24182;&#36864;&#20986;&#23601;OK&#20102;&#65292;&#24182;&#19981;&#20570;&#20855;&#20307;&#30340;&#22788;&#29702;&#12290;&#21478;&#22806;&#27491;&#22312;&#22788;&#29702;&#35813;&#20013;&#26029;&#30340;CPU&#20250;&#26816;&#26597;pending&#29366;&#24577;&#65292;&#24182;&#36827;&#34892;&#22788;&#29702;&#30340;&#12290;&#21516;&#26679;&#30340;&#65292;&#22914;&#26524;&#35813;&#20013;&#26029;&#34987;&#20854;&#20182;&#30340;CPU disable&#20102;&#65292;&#26412;&#23601;&#19981;&#24212;&#35813;&#32487;&#32493;&#25191;&#34892;&#35813;&#20013;&#26029;&#30340;specific handler&#65292;&#25105;&#20204;&#20063;&#26159;&#35774;&#23450;pending&#29366;&#24577;&#65292;mask and ack&#20013;&#26029;&#23601;&#36864;&#20986;&#20102;&#12290;&#24403;&#20854;&#20182;CPU&#30340;&#20195;&#30721;&#31163;&#24320;&#20020;&#30028;&#21306;&#65292;enable &#35813;&#20013;&#26029;&#30340;&#26102;&#20505;&#65292;&#36719;&#20214;&#20250;&#26816;&#27979;pending&#29366;&#24577;&#24182;resend&#35813;&#20013;&#26029;&#12290; </P>
<P>&#36825;&#37324;&#30340;irq_check_poll&#20195;&#30721;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>static bool irq_check_poll(struct irq_desc *desc) <BR>{ <BR>&nbsp;&nbsp;&nbsp; if (!(desc-&gt;istate &amp; IRQS_POLL_INPROGRESS)) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return false; <BR>&nbsp;&nbsp;&nbsp; return irq_wait_for_poll(desc); <BR>} </P></BLOCKQUOTE>
<P>IRQS_POLL_INPROGRESS&#26631;&#35782;&#20102;&#35813;IRQ&#27491;&#22312;&#34987;polling&#65288;&#19978;&#19968;&#31456;&#26377;&#25551;&#36848;&#65289;&#65292;&#22914;&#26524;&#27809;&#26377;&#34987;&#36718;&#35810;&#65292;&#37027;&#20040;&#36820;&#22238;false&#65292;&#36827;&#34892;&#27491;&#24120;&#30340;&#35774;&#23450;pending&#26631;&#35760;&#12289;mask and ack&#20013;&#26029;&#12290;&#22914;&#26524;&#27491;&#22312;&#34987;&#36718;&#35810;&#65292;&#37027;&#20040;&#38656;&#35201;&#31561;&#24453;poll&#32467;&#26463;&#12290; </P>
<P>&#65288;2&#65289;ack&#35813;&#20013;&#26029;&#12290;&#23545;&#20110;&#20013;&#26029;&#25511;&#21046;&#22120;&#65292;&#19968;&#26086;&#34987;ack&#65292;&#34920;&#31034;&#35813;&#22806;&#35774;&#30340;&#20013;&#26029;&#34987;enable&#65292;&#30828;&#20214;&#19978;&#24050;&#32463;&#20934;&#22791;&#22909;&#35302;&#21457;&#19979;&#19968;&#27425;&#20013;&#26029;&#20102;&#12290;&#20877;&#27425;&#35302;&#21457;&#30340;&#20013;&#26029;&#20250;&#34987;&#35843;&#24230;&#21040;&#20854;&#20182;&#30340;CPU&#19978;&#12290;&#29616;&#22312;&#65292;&#25105;&#20204;&#21487;&#20197;&#20877;&#27425;&#22238;&#21040;&#27493;&#39588;&#65288;1&#65289;&#20013;&#65292;&#20026;&#20160;&#20040;&#36825;&#37324;&#29992;mask and ack&#32780;&#19981;&#26159;&#21333;&#32431;&#30340;ack&#21602;&#65311;&#22914;&#26524;&#21333;&#32431;&#30340;ack&#21017;&#24847;&#21619;&#30528;&#21518;&#32493;&#20013;&#26029;&#36824;&#26159;&#20250;&#35302;&#21457;&#65292;&#36825;&#26102;&#20505;&#24590;&#20040;&#22788;&#29702;&#65311;&#22312;pending&#65291;in progress&#30340;&#24773;&#20917;&#19979;&#65292;&#25105;&#20204;&#35201;&#24590;&#20040;&#22788;&#29702;&#65311;&#35760;&#24405;pending&#30340;&#27425;&#25968;&#65292;&#26377;&#24847;&#20041;&#21527;&#65311;&#30001;&#20110;&#20013;&#26029;&#26159;&#23436;&#20840;&#24322;&#27493;&#30340;&#65292;&#20063;&#26377;&#21487;&#33021;pending&#30340;&#26631;&#35760;&#21487;&#33021;&#22312;&#21478;&#22806;&#30340;CPU&#19978;&#24050;&#32463;&#20462;&#25913;&#20026;replay&#30340;&#26631;&#35760;&#65292;&#36825;&#26102;&#20505;&#24590;&#20040;&#21150;&#65311;&#24403;&#20107;&#24773;&#21464;&#24471;&#22797;&#26434;&#30340;&#26102;&#20505;&#65292;&#37027;&#19968;&#23450;&#26159;&#26412;&#26469;&#26041;&#21521;&#23601;&#38169;&#20102;&#65292;&#22240;&#27492;&#65292;mask and ack&#23601;&#26159;&#26368;&#22909;&#30340;&#31574;&#30053;&#65292;&#25105;&#24050;&#32463;&#35760;&#24405;&#20102;pending&#29366;&#24577;&#65292;&#19981;&#20877;&#32771;&#34385;pending&#23884;&#22871;&#30340;&#24773;&#20917;&#12290; </P>
<P>&#65288;3&#65289;&#22312;&#35843;&#29992;specific handler&#22788;&#29702;&#20855;&#20307;&#30340;&#20013;&#26029;&#30340;&#26102;&#20505;&#65292;&#30001;&#20110;&#19981;&#25345;&#26377;&#20013;&#26029;&#25551;&#36848;&#31526;&#30340;spin lock&#65292;&#22240;&#27492;&#20854;&#20182;CPU&#19978;&#26377;&#21487;&#33021;&#20250;&#27880;&#38144;&#20854;specific handler&#65292;&#22240;&#27492;do while&#24490;&#29615;&#20043;&#21518;&#65292;desc-&gt;action&#26377;&#21487;&#33021;&#26159;NULL&#65292;&#22914;&#26524;&#26159;&#36825;&#26679;&#65292;&#37027;&#20040;mask irq&#65292;&#28982;&#21518;&#36864;&#20986;&#23601;OK&#20102; </P>
<P>&#65288;4&#65289;&#22914;&#26524;&#20013;&#26029;&#25551;&#36848;&#31526;&#22788;&#20110;pending&#29366;&#24577;&#65292;&#37027;&#20040;&#19968;&#23450;&#26159;&#20854;&#20182;CPU&#19978;&#21448;&#35302;&#21457;&#20102;&#35813;interrupt source&#30340;&#20013;&#26029;&#65292;&#24182;&#35774;&#23450;&#20102;pending&#29366;&#24577;&#65292;&#8220;&#22996;&#25176;&#8221;&#26412;CPU&#36827;&#34892;&#22788;&#29702;&#65292;&#36825;&#26102;&#20505;&#65292;&#38656;&#35201;&#25226;&#20043;&#21069;mask&#20303;&#30340;&#20013;&#26029;&#36827;&#34892;unmask&#30340;&#25805;&#20316;&#12290;&#19968;&#26086;unmask&#20102;&#35813;interrupt source&#65292;&#21518;&#32493;&#30340;&#20013;&#26029;&#21487;&#20197;&#32487;&#32493;&#35302;&#21457;&#65292;&#30001;&#20854;&#20182;&#30340;CPU&#22788;&#29702;&#65288;&#20173;&#28982;&#26159;&#35774;&#23450;&#20013;&#26029;&#25551;&#36848;&#31526;&#30340;pending&#29366;&#24577;&#65292;&#22996;&#25176;&#24403;&#21069;&#27491;&#22312;&#22788;&#29702;&#35813;&#20013;&#26029;&#35831;&#27714;&#30340;&#37027;&#20010;CPU&#36827;&#34892;&#22788;&#29702;&#65289;&#12290; </P>
<P>&#65288;5&#65289;&#22788;&#29702;&#35813;&#20013;&#26029;&#35831;&#27714;&#20107;&#20214; </P>
<BLOCKQUOTE>
<P>irqreturn_t handle_irq_event(struct irq_desc *desc) <BR>{ <BR>&nbsp;&nbsp;&nbsp; struct irqaction *action = desc-&gt;action; <BR>&nbsp;&nbsp;&nbsp; irqreturn_t ret; </P>
<P>&nbsp;&nbsp;&nbsp; desc-&gt;istate &amp;= ~IRQS_PENDING;&#65293;&#65293;&#65293;&#65293;CPU&#24050;&#32463;&#20934;&#22791;&#22788;&#29702;&#35813;&#20013;&#26029;&#20102;&#65292;&#22240;&#27492;&#65292;&#28165;&#38500;pending&#29366;&#24577; <BR>&nbsp;&nbsp;&nbsp; irqd_set(&amp;desc-&gt;irq_data, IRQD_IRQ_INPROGRESS);&#65293;&#65293;&#35774;&#23450;INPROGRESS&#30340;flag <BR>&nbsp;&nbsp;&nbsp; raw_spin_unlock(&amp;desc-&gt;lock); </P>
<P>&nbsp;&nbsp;&nbsp; ret = handle_irq_event_percpu(desc, action); &#65293;&#65293;&#65293;&#36941;&#21382;action list&#65292;&#35843;&#29992;specific handler </P>
<P>&nbsp;&nbsp;&nbsp; raw_spin_lock(&amp;desc-&gt;lock); <BR>&nbsp;&nbsp;&nbsp; irqd_clear(&amp;desc-&gt;irq_data, IRQD_IRQ_INPROGRESS);&#65293;&#65293;&#65293;&#22788;&#29702;&#23436;&#25104;&#65292;&#28165;&#38500;INPROGRESS&#26631;&#35760; <BR>&nbsp;&nbsp;&nbsp; return ret; <BR>} </P></BLOCKQUOTE>
<P>&#65288;6&#65289;&#21482;&#35201;&#26377;pending&#26631;&#35760;&#65292;&#23601;&#35828;&#26126;&#35813;&#20013;&#26029;&#36824;&#22312;pending&#29366;&#24577;&#65292;&#38656;&#35201;&#32487;&#32493;&#22788;&#29702;&#12290;&#24403;&#28982;&#65292;&#22914;&#26524;&#26377;&#20854;&#20182;&#30340;CPU disable&#20102;&#35813;interrupt source&#65292;&#37027;&#20040;&#26412;&#27425;&#20013;&#26029;&#32467;&#26463;&#22788;&#29702;&#12290; </P>
<P>&nbsp; </P>
<P>2&#12289;&#30005;&#24179;&#35302;&#21457;&#30340;handler </P>
<P>&#20351;&#29992;handle_level_irq&#36825;&#20010;handler&#30340;&#30828;&#20214;&#20013;&#26029;&#31995;&#32479;&#34892;&#20026;&#22914;&#19979;&#65306; </P>
<P><A href="http://www.wowotech.net/content/uploadfile/201408/5a88d2c9e746aa35e79f6de6c1f6afd020140828120043.gif"><IMG title=level style="BORDER-LEFT-WIDTH: 0px; BORDER-RIGHT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; DISPLAY: inline; BORDER-TOP-WIDTH: 0px" border=0 alt=level src="http://www.wowotech.net/content/uploadfile/201408/335dea2bd22abd76c4df50e9953b759920140828120046.gif" width=641 height=479></A> </P>
<P>&#25105;&#20204;&#20197;&#39640;&#30005;&#24179;&#35302;&#21457;&#20026;&#20363;&#12290;&#24403;interrupt controller&#26816;&#27979;&#21040;&#20102;&#39640;&#30005;&#24179;&#20449;&#21495;&#65292;&#24182;&#36890;&#36807;&#20013;&#26029;&#30340;signal&#21521;CPU&#35302;&#21457;&#20013;&#26029;&#12290;&#36825;&#26102;&#20505;&#65292;&#23545;&#20013;&#26029;&#25511;&#21046;&#22120;&#36827;&#34892;ack&#24182;&#19981;&#33021;&#25913;&#21464;interrupt request signal&#19978;&#30340;&#30005;&#24179;&#29366;&#24577;&#65292;&#19968;&#30452;&#35201;&#31561;&#21040;&#25191;&#34892;&#20855;&#20307;&#30340;&#20013;&#26029;&#26381;&#21153;&#31243;&#24207;&#65288;specific handler&#65289;&#65292;&#23545;&#22806;&#35774;&#36827;&#34892;ack&#30340;&#26102;&#20505;&#65292;&#30005;&#24179;&#20449;&#21495;&#25165;&#20250;&#24674;&#22797;&#25104;&#20302;&#30005;&#24179;&#12290;&#22312;&#23545;&#22806;&#35774;ack&#20043;&#21069;&#65292;&#20013;&#26029;&#29366;&#24577;&#19968;&#30452;&#26159;pending&#30340;&#65292;&#22914;&#26524;&#27809;&#26377;mask&#20013;&#26029;&#65292;&#37027;&#20040;&#20013;&#26029;&#25511;&#21046;&#22120;&#23601;&#20250;assert CPU&#12290; </P>
<P>handle_level_irq&#30340;&#20195;&#30721;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>void handle_level_irq(unsigned int irq, struct irq_desc *desc) <BR>{ <BR>&nbsp;&nbsp;&nbsp; raw_spin_lock(&amp;desc-&gt;lock); <BR>&nbsp;&nbsp;&nbsp; mask_ack_irq(desc); &#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;1&#65289; </P>
<P>&nbsp;&nbsp;&nbsp; if (unlikely(irqd_irq_inprogress(&amp;desc-&gt;irq_data)))&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;2&#65289; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!irq_check_poll(desc)) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto out_unlock; </P>
<P>&nbsp;&nbsp;&nbsp; desc-&gt;istate &amp;= ~(IRQS_REPLAY | IRQS_WAITING);&#65293;&#65293;&#21644;retrigger&#20013;&#26029;&#20197;&#21450;&#33258;&#21160;&#25506;&#27979;IRQ&#30456;&#20851; <BR>&nbsp;&nbsp;&nbsp; kstat_incr_irqs_this_cpu(irq, desc); </P>
<P><BR>&nbsp;&nbsp;&nbsp; if (unlikely(!desc-&gt;action || irqd_irq_disabled(&amp;desc-&gt;irq_data))) {&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;3&#65289; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; desc-&gt;istate |= IRQS_PENDING; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto out_unlock; <BR>&nbsp;&nbsp;&nbsp; } </P>
<P>&nbsp;&nbsp;&nbsp; handle_irq_event(desc); </P>
<P>&nbsp;&nbsp;&nbsp; cond_unmask_irq(desc); &#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;4&#65289; </P>
<P>out_unlock: <BR>&nbsp;&nbsp;&nbsp; raw_spin_unlock(&amp;desc-&gt;lock); <BR>} </P></BLOCKQUOTE>
<P>&#65288;1&#65289;&#32771;&#34385;CPU&lt;------&gt;interrupt controller&lt;------&gt;device&#36825;&#26679;&#30340;&#36830;&#25509;&#26041;&#24335;&#20013;&#65292;&#25105;&#20204;&#35748;&#20026;high level handler&#20027;&#35201;&#26159;&#21644;interrupt controller&#20132;&#20114;&#65292;&#32780;specific handler&#65288;request_irq&#27880;&#20876;&#30340;&#37027;&#20010;&#65289;&#26159;&#21644;device&#36827;&#34892;&#20132;&#20114;&#12290;Level&#31867;&#22411;&#30340;&#20013;&#26029;&#30340;&#29305;&#28857;&#23601;&#26159;&#21482;&#35201;&#22806;&#35774;interrupt request line&#30340;&#30005;&#24179;&#29366;&#24577;&#26159;&#26377;&#25928;&#29366;&#24577;&#65292;&#23545;&#20110;interrupt controller&#65292;&#35813;&#22806;&#35774;&#30340;interrupt&#24635;&#26159;active&#30340;&#12290;&#30001;&#20110;&#22806;&#35774;&#26816;&#27979;&#21040;&#20102;&#20107;&#20214;&#65288;&#27604;&#22914;&#25968;&#25454;&#21040;&#26469;&#20102;&#65289;&#65292;&#22240;&#27492;assert&#20102;&#25351;&#23450;&#30340;&#30005;&#24179;&#20449;&#21495;&#65292;&#36825;&#20010;&#30005;&#24179;&#20449;&#21495;&#20250;&#19968;&#30452;&#20445;&#25345;&#65292;&#30452;&#21040;&#36719;&#20214;&#28165;&#38500;&#20102;&#22806;&#35774;&#30340;&#29366;&#24577;&#23492;&#23384;&#22120;&#12290;&#20294;&#26159;&#65292;high level irq event handler&#36825;&#20010;&#23618;&#38754;&#21482;&#33021;&#25805;&#20316;Interrupt controller&#65292;&#19981;&#33021;&#25805;&#20316;&#20855;&#20307;&#22806;&#35774;&#30340;&#23492;&#23384;&#22120;&#65288;&#37027;&#24212;&#35813;&#23646;&#20110;&#20855;&#20307;&#22806;&#35774;&#30340;specific interrupt handler&#22788;&#29702;&#20869;&#23481;&#65292;&#35813;handler&#20250;&#25346;&#20837;&#20013;&#26029;&#25551;&#36848;&#31526;&#20013;&#30340;IRQ action list&#65289;&#12290;&#30452;&#21040;&#22312;&#20855;&#20307;&#30340;&#20013;&#26029;&#26381;&#21153;&#31243;&#24207;&#65288;specific handler&#20013;&#65289;&#25805;&#20316;&#20855;&#20307;&#22806;&#35774;&#30340;&#23492;&#23384;&#22120;&#65292;&#25165;&#33021;&#35753;&#36825;&#20010;asserted&#30005;&#24179;&#20449;&#21495;&#28040;&#24687;&#12290; </P>
<P>&#27491;&#26159;&#22240;&#20026;level trigger&#30340;&#36825;&#20010;&#29305;&#28857;&#65292;&#22240;&#27492;&#65292;&#22312;high level handler&#20013;&#39318;&#20808;mask&#24182;ack&#35813;IRQ&#12290;&#36825;&#19968;&#28857;&#21644;&#36793;&#32536;&#35302;&#21457;&#30340;high level handler&#26377;&#26174;&#33879;&#30340;&#19981;&#21516;&#65292;&#22312;handle_edge_irq&#20013;&#65292;&#25105;&#20204;&#20165;&#20165;&#26159;ack&#20102;&#20013;&#26029;&#65292;&#24182;&#27809;&#26377;mask&#65292;&#22240;&#20026;&#36793;&#32536;&#35302;&#21457;&#30340;&#20013;&#26029;&#31245;&#32437;&#21363;&#36893;&#65292;&#19968;&#26086;mask&#20102;&#35813;&#20013;&#26029;&#65292;&#23481;&#26131;&#36896;&#25104;&#20013;&#26029;&#20002;&#22833;&#12290;&#32780;&#23545;&#20110;&#30005;&#24179;&#20013;&#26029;&#65292;&#25105;&#20204;&#19981;&#24471;&#19981;mask&#20303;&#35813;&#20013;&#26029;&#65292;&#22914;&#26524;&#19981;mask&#20303;&#65292;&#21482;&#35201;CPU ack&#20013;&#26029;&#65292;&#20013;&#26029;&#25511;&#21046;&#22120;&#23558;&#25345;&#32493;&#30340;assert CPU&#20013;&#26029;&#65288;&#22240;&#20026;&#26377;&#25928;&#30005;&#24179;&#29366;&#24577;&#19968;&#30452;&#20445;&#25345;&#65289;&#12290;&#22914;&#26524;&#25105;&#20204;mask&#20303;&#35813;&#20013;&#26029;&#65292;&#20013;&#26029;&#25511;&#21046;&#22120;&#23558;&#19981;&#20877;&#36716;&#21457;&#35813;interrupt source&#26469;&#30340;&#20013;&#26029;&#65292;&#22240;&#27492;&#65292;&#25152;&#26377;&#30340;CPU&#37117;&#19981;&#20250;&#24863;&#30693;&#21040;&#35813;&#20013;&#26029;&#65292;&#30452;&#21040;&#36719;&#20214;unmask&#12290;&#36825;&#37324;&#30340;ack&#26159;&#38024;&#23545;interrupt controller&#30340;ack&#65292;&#26412;&#36523;ack&#23601;&#26159;&#20026;&#20102;clear interrupt controller&#23545;&#35813;IRQ&#30340;&#29366;&#24577;&#23492;&#23384;&#22120;&#65292;&#19981;&#36807;&#30001;&#20110;&#22806;&#37096;&#30340;&#30005;&#24179;&#20173;&#28982;&#26159;&#26377;&#25928;&#20449;&#21495;&#65292;&#20854;&#23454;&#26410;&#24517;&#33021;&#28165;&#38500;interrupt controller&#30340;&#20013;&#26029;&#29366;&#24577;&#65292;&#19981;&#36807;&#36825;&#26159;&#21644;&#20013;&#26029;&#25511;&#21046;&#22120;&#30828;&#20214;&#23454;&#29616;&#30456;&#20851;&#30340;&#12290; </P>
<P>&#65288;2&#65289;&#23545;&#20110;&#30005;&#24179;&#35302;&#21457;&#30340;high level handler&#65292;&#25105;&#20204;&#19968;&#24320;&#22987;&#23601;mask&#24182;ack&#20102;&#20013;&#26029;&#65292;&#22240;&#27492;&#21518;&#32493;specific handler&#22240;&#35813;&#26159;&#20018;&#34892;&#21270;&#25191;&#34892;&#30340;&#65292;&#20026;&#20309;&#35201;&#21028;&#26029;in progress&#26631;&#35760;&#21602;&#65311;&#19981;&#35201;&#24536;&#35760;spurious interrupt&#65292;&#37027;&#37324;&#20250;&#30452;&#25509;&#35843;&#29992;handler&#26469;&#22788;&#29702;spurious interrupt&#12290; </P>
<P>&#65288;3&#65289;&#36825;&#37324;&#26377;&#20004;&#20010;&#22330;&#26223; </P>
<P>a&#12289;&#27809;&#26377;&#27880;&#20876;specific handler&#12290;&#22914;&#26524;&#27809;&#26377;&#27880;&#20876;handler&#65292;&#37027;&#20040;&#20445;&#25345;mask&#24182;&#35774;&#23450;pending&#26631;&#35760;&#65288;&#36825;&#20010;pending&#26631;&#35760;&#26377;&#20160;&#20040;&#20316;&#29992;&#36824;&#27809;&#26377;&#24819;&#26126;&#30333;&#65289;&#12290; </P>
<P>b&#12289;&#35813;&#20013;&#26029;&#34987;&#20854;&#20182;&#30340;CPU disable&#20102;&#12290;&#22914;&#26524;&#35813;&#20013;&#26029;&#34987;&#20854;&#20182;&#30340;CPU disable&#20102;&#65292;&#26412;&#23601;&#19981;&#24212;&#35813;&#32487;&#32493;&#25191;&#34892;&#35813;&#20013;&#26029;&#30340;specific handler&#65292;&#25105;&#20204;&#20063;&#26159;&#35774;&#23450;pending&#29366;&#24577;&#65292;mask and ack&#20013;&#26029;&#23601;&#36864;&#20986;&#20102;&#12290;&#24403;&#20854;&#20182;CPU&#30340;&#20195;&#30721;&#31163;&#24320;&#20020;&#30028;&#21306;&#65292;enable &#35813;&#20013;&#26029;&#30340;&#26102;&#20505;&#65292;&#36719;&#20214;&#20250;&#26816;&#27979;pending&#29366;&#24577;&#24182;resend&#35813;&#20013;&#26029;&#12290; </P>
<P>&#65288;4&#65289;&#20026;&#20309;&#26159;&#26377;&#26465;&#20214;&#30340;unmask&#35813;IRQ&#65311;&#27491;&#24120;&#30340;&#35805;&#24403;&#28982;&#26159;umask&#23601;OK&#20102;&#65292;&#19981;&#36807;&#26377;&#20123;threaded interrupt&#65288;&#36825;&#20010;&#27010;&#24565;&#22312;&#19979;&#19968;&#20221;&#25991;&#26723;&#20013;&#25551;&#36848;&#65289;&#35201;&#27714;&#26159;one shot&#30340;&#65288;&#39318;&#27425;&#20013;&#26029;&#65292;specific handler&#20013;&#24320;&#20102;&#19968;&#26538;&#65292;wakeup&#20102;irq handler thread&#65292;&#22914;&#26524;&#20801;&#35768;&#20013;&#26029;&#23884;&#22871;&#65292;&#37027;&#20040;&#22312;specific handler&#20250;&#22810;&#27425;&#24320;&#26538;&#65292;&#36825;&#20063;&#23601;&#19981;&#26159;one shot&#20102;&#65292;&#26377;&#20123;IRQ&#30340;handler thread&#35201;&#27714;&#26159;one shot&#65292;&#20063;&#23601;&#26159;&#19981;&#33021;&#23884;&#22871;specific handler&#65289;&#12290; </P>
<P>&nbsp; </P>
<P>3&#12289;&#25903;&#25345;EOI&#30340;handler </P>
<P>TODO