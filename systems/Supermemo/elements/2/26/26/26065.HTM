/*<BR>&nbsp;* {read,write}s{b,w,l,q}() repeatedly access the same memory address in<BR>&nbsp;* native endianness in 8-, 16-, 32- or 64-bit chunks (@count times).<BR>&nbsp;*/<BR><FONT class=extract>#ifndef readsb<BR>#define readsb readsb<BR>static inline void readsb(const volatile void __iomem *addr, void *buffer,<BR>&nbsp;&nbsp;&nbsp;&nbsp; unsigned int count)<BR>{<BR>&nbsp;if (count) {<BR>&nbsp;&nbsp;u8 *buf = buffer; </FONT>
<P></P>
<P><FONT class=extract>&nbsp;&nbsp;do {<BR>&nbsp;&nbsp;&nbsp;u8 x = __raw_readb(addr);<BR>&nbsp;&nbsp;&nbsp;*buf++ = x;<BR>&nbsp;&nbsp;} while (--count);<BR>&nbsp;}<BR>}<BR>#endif</FONT></P>
<P>#ifndef readsw<BR>#define readsw readsw<BR>static inline void readsw(const volatile void __iomem *addr, void *buffer,<BR>&nbsp;&nbsp;&nbsp;&nbsp; unsigned int count)<BR>{<BR>&nbsp;if (count) {<BR>&nbsp;&nbsp;u16 *buf = buffer;</P>
<P>&nbsp;&nbsp;do {<BR>&nbsp;&nbsp;&nbsp;u16 x = __raw_readw(addr);<BR>&nbsp;&nbsp;&nbsp;*buf++ = x;<BR>&nbsp;&nbsp;} while (--count);<BR>&nbsp;}<BR>}<BR>#endif</P>
<P>#ifndef readsl<BR>#define readsl readsl<BR>static inline void readsl(const volatile void __iomem *addr, void *buffer,<BR>&nbsp;&nbsp;&nbsp;&nbsp; unsigned int count)<BR>{<BR>&nbsp;if (count) {<BR>&nbsp;&nbsp;u32 *buf = buffer;</P>
<P>&nbsp;&nbsp;do {<BR>&nbsp;&nbsp;&nbsp;u32 x = __raw_readl(addr);<BR>&nbsp;&nbsp;&nbsp;*buf++ = x;<BR>&nbsp;&nbsp;} while (--count);<BR>&nbsp;}<BR>}<BR>#endif</P>
<P>#ifdef CONFIG_64BIT<BR>#ifndef readsq<BR>#define readsq readsq<BR>static inline void readsq(const volatile void __iomem *addr, void *buffer,<BR>&nbsp;&nbsp;&nbsp;&nbsp; unsigned int count)<BR>{<BR>&nbsp;if (count) {<BR>&nbsp;&nbsp;u64 *buf = buffer;</P>
<P>&nbsp;&nbsp;do {<BR>&nbsp;&nbsp;&nbsp;u64 x = __raw_readq(addr);<BR>&nbsp;&nbsp;&nbsp;*buf++ = x;<BR>&nbsp;&nbsp;} while (--count);<BR>&nbsp;}<BR>}<BR>#endif<BR>#endif /* CONFIG_64BIT */</P>
<P><FONT class=extract>#ifndef writesb<BR>#define writesb writesb<BR>static inline void writesb(volatile void __iomem *addr, const void *buffer,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsigned int count)<BR>{<BR>&nbsp;if (count) {<BR>&nbsp;&nbsp;const u8 *buf = buffer;</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;do {<BR>&nbsp;&nbsp;&nbsp;__raw_writeb(*buf++, addr);<BR>&nbsp;&nbsp;} while (--count);<BR>&nbsp;}<BR>}<BR>#endif</FONT></P>
<P>#ifndef writesw<BR>#define writesw writesw<BR>static inline void writesw(volatile void __iomem *addr, const void *buffer,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsigned int count)<BR>{<BR>&nbsp;if (count) {<BR>&nbsp;&nbsp;const u16 *buf = buffer;</P>
<P>&nbsp;&nbsp;do {<BR>&nbsp;&nbsp;&nbsp;__raw_writew(*buf++, addr);<BR>&nbsp;&nbsp;} while (--count);<BR>&nbsp;}<BR>}<BR>#endif</P>
<P>#ifndef writesl<BR>#define writesl writesl<BR>static inline void writesl(volatile void __iomem *addr, const void *buffer,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsigned int count)<BR>{<BR>&nbsp;if (count) {<BR>&nbsp;&nbsp;const u32 *buf = buffer;</P>
<P>&nbsp;&nbsp;do {<BR>&nbsp;&nbsp;&nbsp;__raw_writel(*buf++, addr);<BR>&nbsp;&nbsp;} while (--count);<BR>&nbsp;}<BR>}<BR>#endif</P>
<P>#ifdef CONFIG_64BIT<BR>#ifndef writesq<BR>#define writesq writesq<BR>static inline void writesq(volatile void __iomem *addr, const void *buffer,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsigned int count)<BR>{<BR>&nbsp;if (count) {<BR>&nbsp;&nbsp;const u64 *buf = buffer;</P>
<P>&nbsp;&nbsp;do {<BR>&nbsp;&nbsp;&nbsp;__raw_writeq(*buf++, addr);<BR>&nbsp;&nbsp;} while (--count);<BR>&nbsp;}<BR>}<BR>#endif<BR>#endif /* CONFIG_64BIT */