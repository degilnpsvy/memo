/*<BR>&nbsp;* __raw_{read,write}{b,w,l,q}() access memory in native endianness.<BR>&nbsp;*<BR>&nbsp;* On some architectures memory mapped IO needs to be accessed differently.<BR>&nbsp;* On the simple architectures, we just read/write the memory location<BR>&nbsp;* directly.<BR>&nbsp;*/ 
<P></P>
<P><FONT class=extract>#ifndef __raw_readb<BR>#define __raw_readb __raw_readb<BR>static inline u8 __raw_readb(const volatile void __iomem *addr)<BR>{<BR>&nbsp;return *(const volatile u8 __force *)addr;<BR>}<BR>#endif</FONT></P>
<P><FONT class=extract>#ifndef __raw_readw<BR>#define __raw_readw __raw_readw<BR>static inline u16 __raw_readw(const volatile void __iomem *addr)<BR>{<BR>&nbsp;return *(const volatile u16 __force *)addr;<BR>}<BR>#endif</FONT></P>
<P><FONT class=extract>#ifndef __raw_readl<BR>#define __raw_readl __raw_readl<BR>static inline u32 __raw_readl(const volatile void __iomem *addr)<BR>{<BR>&nbsp;return *(const volatile u32 __force *)addr;<BR>}<BR>#endif</FONT></P>
<P><FONT class=extract>#ifdef CONFIG_64BIT<BR>#ifndef __raw_readq<BR>#define __raw_readq __raw_readq<BR>static inline u64 __raw_readq(const volatile void __iomem *addr)<BR>{<BR>&nbsp;return *(const volatile u64 __force *)addr;<BR>}<BR>#endif<BR>#endif /* CONFIG_64BIT */</FONT></P>
<P><FONT class=extract>#ifndef __raw_writeb<BR>#define __raw_writeb __raw_writeb<BR>static inline void __raw_writeb(u8 value, volatile void __iomem *addr)<BR>{<BR>&nbsp;*(volatile u8 __force *)addr = value;<BR>}<BR>#endif</FONT></P>
<P><FONT class=extract>#ifndef __raw_writew<BR>#define __raw_writew __raw_writew<BR>static inline void __raw_writew(u16 value, volatile void __iomem *addr)<BR>{<BR>&nbsp;*(volatile u16 __force *)addr = value;<BR>}<BR>#endif</FONT></P>
<P><FONT class=extract>#ifndef __raw_writel<BR>#define __raw_writel __raw_writel<BR>static inline void __raw_writel(u32 value, volatile void __iomem *addr)<BR>{<BR>&nbsp;*(volatile u32 __force *)addr = value;<BR>}<BR>#endif</FONT></P>
<P><FONT class=extract>#ifdef CONFIG_64BIT<BR>#ifndef __raw_writeq<BR>#define __raw_writeq __raw_writeq<BR>static inline void __raw_writeq(u64 value, volatile void __iomem *addr)<BR>{<BR>&nbsp;*(volatile u64 __force *)addr = value;<BR>}<BR>#endif<BR>#endif /* CONFIG_64BIT */</FONT></P>
<P><FONT class=extract>/*<BR>&nbsp;* {read,write}{b,w,l,q}() access little endian memory and return result in<BR>&nbsp;* native endianness.<BR>&nbsp;*/</FONT></P>
<P><FONT class=extract>#ifndef readb<BR>#define readb readb<BR>static inline u8 readb(const volatile void __iomem *addr)<BR>{<BR>&nbsp;return __raw_readb(addr);<BR>}<BR>#endif</FONT></P>
<P><FONT class=extract>#ifndef readw<BR>#define readw readw<BR>static inline u16 readw(const volatile void __iomem *addr)<BR>{<BR>&nbsp;return __le16_to_cpu(__raw_readw(addr));<BR>}<BR>#endif</FONT></P>
<P><FONT class=extract>#ifndef readl<BR>#define readl readl<BR>static inline u32 readl(const volatile void __iomem *addr)<BR>{<BR>&nbsp;return __le32_to_cpu(__raw_readl(addr));<BR>}<BR>#endif</FONT></P>
<P><FONT class=extract>#ifdef CONFIG_64BIT<BR>#ifndef readq<BR>#define readq readq<BR>static inline u64 readq(const volatile void __iomem *addr)<BR>{<BR>&nbsp;return __le64_to_cpu(__raw_readq(addr));<BR>}<BR>#endif<BR>#endif /* CONFIG_64BIT */</FONT></P>
<P><FONT class=extract>#ifndef writeb<BR>#define writeb writeb<BR>static inline void writeb(u8 value, volatile void __iomem *addr)<BR>{<BR>&nbsp;__raw_writeb(value, addr);<BR>}<BR>#endif</FONT></P>
<P><FONT class=extract>#ifndef writew<BR>#define writew writew<BR>static inline void writew(u16 value, volatile void __iomem *addr)<BR>{<BR>&nbsp;__raw_writew(cpu_to_le16(value), addr);<BR>}<BR>#endif</FONT></P>
<P><FONT class=extract>#ifndef writel<BR>#define writel writel<BR>static inline void writel(u32 value, volatile void __iomem *addr)<BR>{<BR>&nbsp;__raw_writel(__cpu_to_le32(value), addr);<BR>}<BR>#endif</FONT></P>
<P><FONT class=extract>#ifdef CONFIG_64BIT<BR>#ifndef writeq<BR>#define writeq writeq<BR>static inline void writeq(u64 value, volatile void __iomem *addr)<BR>{<BR>&nbsp;__raw_writeq(__cpu_to_le64(value), addr);<BR>}<BR>#endif<BR>#endif /* CONFIG_64BIT */</FONT>