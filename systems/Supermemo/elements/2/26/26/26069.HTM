<FONT class=extract>#ifndef CONFIG_GENERIC_IOMAP<BR>#ifndef ioread8<BR>#define ioread8 ioread8<BR>static inline u8 ioread8(const volatile void __iomem *addr)<BR>{<BR>&nbsp;return readb(addr);<BR>}<BR>#endif</FONT> 
<P></P>
<P><FONT class=extract>#ifndef ioread16<BR>#define ioread16 ioread16<BR>static inline u16 ioread16(const volatile void __iomem *addr)<BR>{<BR>&nbsp;return readw(addr);<BR>}<BR>#endif</FONT></P>
<P><FONT class=extract>#ifndef ioread32<BR>#define ioread32 ioread32<BR>static inline u32 ioread32(const volatile void __iomem *addr)<BR>{<BR>&nbsp;return readl(addr);<BR>}<BR>#endif</FONT></P>
<P><FONT class=extract>#ifndef iowrite8<BR>#define iowrite8 iowrite8<BR>static inline void iowrite8(u8 value, volatile void __iomem *addr)<BR>{<BR>&nbsp;writeb(value, addr);<BR>}<BR>#endif</FONT></P>
<P><FONT class=extract>#ifndef iowrite16<BR>#define iowrite16 iowrite16<BR>static inline void iowrite16(u16 value, volatile void __iomem *addr)<BR>{<BR>&nbsp;writew(value, addr);<BR>}<BR>#endif</FONT></P>
<P><FONT class=extract>#ifndef iowrite32<BR>#define iowrite32 iowrite32<BR>static inline void iowrite32(u32 value, volatile void __iomem *addr)<BR>{<BR>&nbsp;writel(value, addr);<BR>}<BR>#endif</FONT></P>
<P><FONT class=extract>#ifndef ioread16be<BR>#define ioread16be ioread16be<BR>static inline u16 ioread16be(const volatile void __iomem *addr)<BR>{<BR>&nbsp;return __be16_to_cpu(__raw_readw(addr));<BR>}<BR>#endif</FONT></P>
<P><FONT class=extract>#ifndef ioread32be<BR>#define ioread32be ioread32be<BR>static inline u32 ioread32be(const volatile void __iomem *addr)<BR>{<BR>&nbsp;return __be32_to_cpu(__raw_readl(addr));<BR>}<BR>#endif</FONT></P>
<P><FONT class=extract>#ifndef iowrite16be<BR>#define iowrite16be iowrite16be<BR>static inline void iowrite16be(u16 value, void volatile __iomem *addr)<BR>{<BR>&nbsp;__raw_writew(__cpu_to_be16(value), addr);<BR>}<BR>#endif</FONT></P>
<P><FONT class=extract>#ifndef iowrite32be<BR>#define iowrite32be iowrite32be<BR>static inline void iowrite32be(u32 value, volatile void __iomem *addr)<BR>{<BR>&nbsp;__raw_writel(__cpu_to_be32(value), addr);<BR>}<BR>#endif</FONT></P>
<P><FONT class=extract>#ifndef ioread8_rep<BR>#define ioread8_rep ioread8_rep<BR>static inline void ioread8_rep(const volatile void __iomem *addr, void *buffer,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsigned int count)<BR>{<BR>&nbsp;readsb(addr, buffer, count);<BR>}<BR>#endif</FONT></P>
<P><FONT class=extract>#ifndef ioread16_rep<BR>#define ioread16_rep ioread16_rep<BR>static inline void ioread16_rep(const volatile void __iomem *addr,<BR>&nbsp;&nbsp;&nbsp;&nbsp;void *buffer, unsigned int count)<BR>{<BR>&nbsp;readsw(addr, buffer, count);<BR>}<BR>#endif</FONT></P>
<P><FONT class=extract>#ifndef ioread32_rep<BR>#define ioread32_rep ioread32_rep<BR>static inline void ioread32_rep(const volatile void __iomem *addr,<BR>&nbsp;&nbsp;&nbsp;&nbsp;void *buffer, unsigned int count)<BR>{<BR>&nbsp;readsl(addr, buffer, count);<BR>}<BR>#endif</FONT></P>
<P><FONT class=extract>#ifndef iowrite8_rep<BR>#define iowrite8_rep iowrite8_rep<BR>static inline void iowrite8_rep(volatile void __iomem *addr,<BR>&nbsp;&nbsp;&nbsp;&nbsp;const void *buffer,<BR>&nbsp;&nbsp;&nbsp;&nbsp;unsigned int count)<BR>{<BR>&nbsp;writesb(addr, buffer, count);<BR>}<BR>#endif</FONT></P>
<P><FONT class=extract>#ifndef iowrite16_rep<BR>#define iowrite16_rep iowrite16_rep<BR>static inline void iowrite16_rep(volatile void __iomem *addr,<BR>&nbsp;&nbsp;&nbsp;&nbsp; const void *buffer,<BR>&nbsp;&nbsp;&nbsp;&nbsp; unsigned int count)<BR>{<BR>&nbsp;writesw(addr, buffer, count);<BR>}<BR>#endif</FONT></P>
<P><FONT class=extract>#ifndef iowrite32_rep<BR>#define iowrite32_rep iowrite32_rep<BR>static inline void iowrite32_rep(volatile void __iomem *addr,<BR>&nbsp;&nbsp;&nbsp;&nbsp; const void *buffer,<BR>&nbsp;&nbsp;&nbsp;&nbsp; unsigned int count)<BR>{<BR>&nbsp;writesl(addr, buffer, count);<BR>}<BR>#endif<BR></FONT>#endif /* CONFIG_GENERIC_IOMAP */