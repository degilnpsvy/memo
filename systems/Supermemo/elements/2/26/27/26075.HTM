/**<BR>&nbsp;*&nbsp;<FONT class=clozed>disable_irq</FONT> - disable an irq and wait for completion<BR>&nbsp;*&nbsp;@irq: Interrupt to disable<BR>&nbsp;*<BR>&nbsp;*&nbsp;Disable the selected interrupt line.&nbsp; Enables and Disables are<BR>&nbsp;*&nbsp;nested.<BR>&nbsp;*&nbsp;This function <FONT class=clozed>waits for any pending IRQ handlers for this interrupt<BR>&nbsp;*&nbsp;to complete before returning. If you use this function while<BR>&nbsp;*&nbsp;holding a resource the IRQ handler may need</FONT> you will deadlock.<BR>&nbsp;*<BR>&nbsp;*&nbsp;This function may be called - with care - from IRQ context.<BR>&nbsp;*/<BR>void disable_irq(unsigned int irq)<BR>{<BR><FONT class=clozed>&nbsp;if (!__disable_irq_nosync(irq))<BR>&nbsp;&nbsp;synchronize_irq(irq);<BR></FONT>}<BR>EXPORT_SYMBOL(disable_irq);