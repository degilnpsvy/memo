# Documentation/SubmittingPatches</P>
<P>&nbsp;How to Get Your Change Into the Linux Kernel<BR>&nbsp;&nbsp;or<BR>&nbsp;Care And Operation Of Your Linus Torvalds</P>
<P></P>
<P>&nbsp;</P>
<P>For a person or company who wishes to submit a change to the Linux<BR>kernel, the process can sometimes be daunting if you're not familiar<BR>with "the system."&nbsp; This text is a collection of suggestions which<BR>can greatly increase the chances of your change being accepted.</P>
<P>This document contains a large number of suggestions in a relatively terse<BR>format.&nbsp; For detailed information on how the kernel development process<BR>works, see Documentation/development-process.&nbsp; Also, read<BR>Documentation/SubmitChecklist for a list of items to check before<BR>submitting code.&nbsp; If you are submitting a driver, also read<BR>Documentation/SubmittingDrivers; for device tree binding patches, read<BR>Documentation/devicetree/bindings/submitting-patches.txt.</P>
<P>Many of these steps describe the default behavior of the git version<BR>control system; if you use git to prepare your patches, you'll find much<BR>of the mechanical work done for you, though you'll still need to prepare<BR>and document a sensible set of patches.&nbsp; In general, use of git will make<BR>your life as a kernel developer easier.</P>
<P>--------------------------------------------<BR>SECTION 1 - CREATING AND SENDING YOUR CHANGE<BR>--------------------------------------------</P>
<P><BR>0) Obtain a current source tree<BR>-------------------------------</P>
<P>If you do not have a repository with the current kernel source handy, use<BR>git to obtain one.&nbsp; You'll want to start with the mainline repository,<BR>which can be grabbed with:</P>
<P>&nbsp; git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git </P>
<P>Note, however, that you may not want to develop against the mainline tree<BR>directly.&nbsp; Most subsystem maintainers run their own trees and want to see<BR>patches prepared against those trees.&nbsp; See the "T:" entry for the subsystem<BR>in the MAINTAINERS file to find that tree, or simply ask the maintainer if<BR>the tree is not listed there.</P>
<P>It is still possible to download kernel releases via tarballs (as described<BR>in the next section), but that is the hard way to do kernel development.</P>
<P>1) "diff -up"<BR>------------</P>
<P>If you must generate your patches by hand, use "diff -up" or "diff -uprN"<BR>to create patches.&nbsp; Git generates patches in this form by default; if<BR>you're using git, you can skip this section entirely.</P>
<P>All changes to the Linux kernel occur in the form of patches, as<BR>generated by diff(1).&nbsp; When creating your patch, make sure to create it<BR>in "unified diff" format, as supplied by the '-u' argument to diff(1).<BR>Also, please use the '-p' argument which shows which C function each<BR>change is in - that makes the resultant diff a lot easier to read.<BR>Patches should be based in the root kernel source directory,<BR>not in any lower subdirectory.</P>
<P>To create a patch for a single file, it is often sufficient to do:</P>
<P>&nbsp;SRCTREE= linux<BR>&nbsp;MYFILE=&nbsp; drivers/net/mydriver.c</P>
<P>&nbsp;cd $SRCTREE<BR>&nbsp;cp $MYFILE $MYFILE.orig<BR>&nbsp;vi $MYFILE&nbsp;# make your change<BR>&nbsp;cd ..<BR>&nbsp;diff -up $SRCTREE/$MYFILE{.orig,} &gt; /tmp/patch</P>
<P>To create a patch for multiple files, you should unpack a "vanilla",<BR>or unmodified kernel source tree, and generate a diff against your<BR>own source tree.&nbsp; For example:</P>
<P>&nbsp;MYSRC= /devel/linux</P>
<P>&nbsp;tar xvfz linux-3.19.tar.gz<BR>&nbsp;mv linux-3.19 linux-3.19-vanilla<BR>&nbsp;diff -uprN -X linux-3.19-vanilla/Documentation/dontdiff \<BR>&nbsp;&nbsp;linux-3.19-vanilla $MYSRC &gt; /tmp/patch</P>
<P>"dontdiff" is a list of files which are generated by the kernel during<BR>the build process, and should be ignored in any diff(1)-generated<BR>patch.</P>
<P>Make sure your patch does not include any extra files which do not<BR>belong in a patch submission.&nbsp; Make sure to review your patch -after-<BR>generated it with diff(1), to ensure accuracy.</P>
<P>If your changes produce a lot of deltas, you need to split them into<BR>individual patches which modify things in logical stages; see section<BR>#3.&nbsp; This will facilitate easier reviewing by other kernel developers,<BR>very important if you want your patch accepted.</P>
<P>If you're using git, "git rebase -i" can help you with this process.&nbsp; If<BR>you're not using git, quilt &lt;<A href="http://savannah.nongnu.org/projects/quilt">http://savannah.nongnu.org/projects/quilt</A>&gt;<BR>is another popular alternative.</P>
<P>&nbsp;</P>
<P>2) Describe your changes.<BR>-------------------------</P>
<P>Describe your problem.&nbsp; Whether your patch is a one-line bug fix or<BR>5000 lines of a new feature, there must be an underlying problem that<BR>motivated you to do this work.&nbsp; Convince the reviewer that there is a<BR>problem worth fixing and that it makes sense for them to read past the<BR>first paragraph.</P>
<P>Describe user-visible impact.&nbsp; Straight up crashes and lockups are<BR>pretty convincing, but not all bugs are that blatant.&nbsp; Even if the<BR>problem was spotted during code review, describe the impact you think<BR>it can have on users.&nbsp; Keep in mind that the majority of Linux<BR>installations run kernels from secondary stable trees or<BR>vendor/product-specific trees that cherry-pick only specific patches<BR>from upstream, so include anything that could help route your change<BR>downstream: provoking circumstances, excerpts from dmesg, crash<BR>descriptions, performance regressions, latency spikes, lockups, etc.</P>
<P>Quantify optimizations and trade-offs.&nbsp; If you claim improvements in<BR>performance, memory consumption, stack footprint, or binary size,<BR>include numbers that back them up.&nbsp; But also describe non-obvious<BR>costs.&nbsp; Optimizations usually aren't free but trade-offs between CPU,<BR>memory, and readability; or, when it comes to heuristics, between<BR>different workloads.&nbsp; Describe the expected downsides of your<BR>optimization so that the reviewer can weigh costs against benefits.</P>
<P>Once the problem is established, describe what you are actually doing<BR>about it in technical detail.&nbsp; It's important to describe the change<BR>in plain English for the reviewer to verify that the code is behaving<BR>as you intend it to.</P>
<P>The maintainer will thank you if you write your patch description in a<BR>form which can be easily pulled into Linux's source code management<BR>system, git, as a "commit log".&nbsp; See #15, below.</P>
<P>Solve only one problem per patch.&nbsp; If your description starts to get<BR>long, that's a sign that you probably need to split up your patch.<BR>See #3, next.</P>
<P>When you submit or resubmit a patch or patch series, include the<BR>complete patch description and justification for it.&nbsp; Don't just<BR>say that this is version N of the patch (series).&nbsp; Don't expect the<BR>subsystem maintainer to refer back to earlier patch versions or referenced<BR>URLs to find the patch description and put that into the patch.<BR>I.e., the patch (series) and its description should be self-contained.<BR>This benefits both the maintainers and reviewers.&nbsp; Some reviewers<BR>probably didn't even receive earlier versions of the patch.</P>
<P>Describe your changes in imperative mood, e.g. "make xyzzy do frotz"<BR>instead of "[This patch] makes xyzzy do frotz" or "[I] changed xyzzy<BR>to do frotz", as if you are giving orders to the codebase to change<BR>its behaviour.</P>
<P>If the patch fixes a logged bug entry, refer to that bug entry by<BR>number and URL.&nbsp; If the patch follows from a mailing list discussion,<BR>give a URL to the mailing list archive; use the <A href="https://lkml.kernel.org/">https://lkml.kernel.org/</A><BR>redirector with a Message-Id, to ensure that the links cannot become<BR>stale.</P>
<P>However, try to make your explanation understandable without external<BR>resources.&nbsp; In addition to giving a URL to a mailing list archive or<BR>bug, summarize the relevant points of the discussion that led to the<BR>patch as submitted.</P>
<P>If you want to refer to a specific commit, don't just refer to the<BR>SHA-1 ID of the commit. Please also include the oneline summary of<BR>the commit, to make it easier for reviewers to know what it is about.<BR>Example:</P>
<P>&nbsp;Commit e21d2170f36602ae2708 ("video: remove unnecessary<BR>&nbsp;platform_set_drvdata()") removed the unnecessary<BR>&nbsp;platform_set_drvdata(), but left the variable "dev" unused,<BR>&nbsp;delete it.</P>
<P>You should also be sure to use at least the first twelve characters of the<BR>SHA-1 ID.&nbsp; The kernel repository holds a *lot* of objects, making<BR>collisions with shorter IDs a real possibility.&nbsp; Bear in mind that, even if<BR>there is no collision with your six-character ID now, that condition may<BR>change five years from now.</P>
<P>If your patch fixes a bug in a specific commit, e.g. you found an issue using<BR>git-bisect, please use the 'Fixes:' tag with the first 12 characters of the<BR>SHA-1 ID, and the one line summary.&nbsp; For example:</P>
<P>&nbsp;Fixes: e21d2170f366 ("video: remove unnecessary platform_set_drvdata()")</P>
<P>The following git-config settings can be used to add a pretty format for<BR>outputting the above style in the git log or git show commands</P>
<P>&nbsp;[core]<BR>&nbsp;&nbsp;abbrev = 12<BR>&nbsp;[pretty]<BR>&nbsp;&nbsp;fixes = Fixes: %h (\"%s\")</P>
<P>3) Separate your changes.<BR>-------------------------</P>
<P>Separate each _logical change_ into a separate patch.</P>
<P>For example, if your changes include both bug fixes and performance<BR>enhancements for a single driver, separate those changes into two<BR>or more patches.&nbsp; If your changes include an API update, and a new<BR>driver which uses that new API, separate those into two patches.</P>
<P>On the other hand, if you make a single change to numerous files,<BR>group those changes into a single patch.&nbsp; Thus a single logical change<BR>is contained within a single patch.</P>
<P>The point to remember is that each patch should make an easily understood<BR>change that can be verified by reviewers.&nbsp; Each patch should be justifiable<BR>on its own merits.</P>
<P>If one patch depends on another patch in order for a change to be<BR>complete, that is OK.&nbsp; Simply note "this patch depends on patch X"<BR>in your patch description.</P>
<P>When dividing your change into a series of patches, take special care to<BR>ensure that the kernel builds and runs properly after each patch in the<BR>series.&nbsp; Developers using "git bisect" to track down a problem can end up<BR>splitting your patch series at any point; they will not thank you if you<BR>introduce bugs in the middle.</P>
<P>If you cannot condense your patch set into a smaller set of patches,<BR>then only post say 15 or so at a time and wait for review and integration.</P>
<P>&nbsp;</P>
<P>4) Style-check your changes.<BR>----------------------------</P>
<P>Check your patch for basic style violations, details of which can be<BR>found in Documentation/CodingStyle.&nbsp; Failure to do so simply wastes<BR>the reviewers time and will get your patch rejected, probably<BR>without even being read.</P>
<P>One significant exception is when moving code from one file to<BR>another -- in this case you should not modify the moved code at all in<BR>the same patch which moves it.&nbsp; This clearly delineates the act of<BR>moving the code and your changes.&nbsp; This greatly aids review of the<BR>actual differences and allows tools to better track the history of<BR>the code itself.</P>
<P>Check your patches with the patch style checker prior to submission<BR>(scripts/checkpatch.pl).&nbsp; Note, though, that the style checker should be<BR>viewed as a guide, not as a replacement for human judgment.&nbsp; If your code<BR>looks better with a violation then its probably best left alone.</P>
<P>The checker reports at three levels:<BR>&nbsp;- ERROR: things that are very likely to be wrong<BR>&nbsp;- WARNING: things requiring careful review<BR>&nbsp;- CHECK: things requiring thought</P>
<P>You should be able to justify all violations that remain in your<BR>patch.</P>
<P><BR>5) Select the recipients for your patch.<BR>----------------------------------------</P>
<P>You should always copy the appropriate subsystem maintainer(s) on any patch<BR>to code that they maintain; look through the MAINTAINERS file and the<BR>source code revision history to see who those maintainers are.&nbsp; The<BR>script scripts/get_maintainer.pl can be very useful at this step.&nbsp; If you<BR>cannot find a maintainer for the subsystem your are working on, Andrew<BR>Morton (<A href="mailto:akpm@linux-foundation.org">akpm@linux-foundation.org</A>) serves as a maintainer of last resort.</P>
<P>You should also normally choose at least one mailing list to receive a copy<BR>of your patch set.&nbsp; <A href="mailto:linux-kernel@vger.kernel.org">linux-kernel@vger.kernel.org</A> functions as a list of<BR>last resort, but the volume on that list has caused a number of developers<BR>to tune it out.&nbsp; Look in the MAINTAINERS file for a subsystem-specific<BR>list; your patch will probably get more attention there.&nbsp; Please do not<BR>spam unrelated lists, though.</P>
<P>Many kernel-related lists are hosted on vger.kernel.org; you can find a<BR>list of them at <A href="http://vger.kernel.org/vger-lists.html">http://vger.kernel.org/vger-lists.html</A>.&nbsp; There are<BR>kernel-related lists hosted elsewhere as well, though.</P>
<P>Do not send more than 15 patches at once to the vger mailing lists!!!</P>
<P>Linus Torvalds is the final arbiter of all changes accepted into the<BR>Linux kernel.&nbsp; His e-mail address is &lt;<A href="mailto:torvalds@linux-foundation.org">torvalds@linux-foundation.org</A>&gt;.<BR>He gets a lot of e-mail, and, at this point, very few patches go through<BR>Linus directly, so typically you should do your best to -avoid-<BR>sending him e-mail.</P>
<P>If you have a patch that fixes an exploitable security bug, send that patch<BR>to <A href="mailto:security@kernel.org">security@kernel.org</A>.&nbsp; For severe bugs, a short embargo may be considered<BR>to allow distrbutors to get the patch out to users; in such cases,<BR>obviously, the patch should not be sent to any public lists.</P>
<P>Patches that fix a severe bug in a released kernel should be directed<BR>toward the stable maintainers by putting a line like this:</P>
<P>&nbsp; Cc: <A href="mailto:stable@vger.kernel.org">stable@vger.kernel.org</A></P>
<P>into the sign-off area of your patch (note, NOT an email recipient).&nbsp; You<BR>should also read Documentation/stable_kernel_rules.txt in addition to this<BR>file.</P>
<P>Note, however, that some subsystem maintainers want to come to their own<BR>conclusions on which patches should go to the stable trees.&nbsp; The networking<BR>maintainer, in particular, would rather not see individual developers<BR>adding lines like the above to their patches.</P>
<P>If changes affect userland-kernel interfaces, please send the MAN-PAGES<BR>maintainer (as listed in the MAINTAINERS file) a man-pages patch, or at<BR>least a notification of the change, so that some information makes its way<BR>into the manual pages.&nbsp; User-space API changes should also be copied to<BR><A href="mailto:linux-api@vger.kernel.org">linux-api@vger.kernel.org</A>. </P>
<P>For small patches you may want to CC the Trivial Patch Monkey<BR><A href="mailto:trivial@kernel.org">trivial@kernel.org</A> which collects "trivial" patches. Have a look<BR>into the MAINTAINERS file for its current manager.<BR>Trivial patches must qualify for one of the following rules:<BR>&nbsp;Spelling fixes in documentation<BR>&nbsp;Spelling fixes for errors which could break grep(1)<BR>&nbsp;Warning fixes (cluttering with useless warnings is bad)<BR>&nbsp;Compilation fixes (only if they are actually correct)<BR>&nbsp;Runtime fixes (only if they actually fix things)<BR>&nbsp;Removing use of deprecated functions/macros<BR>&nbsp;Contact detail and documentation fixes<BR>&nbsp;Non-portable code replaced by portable code (even in arch-specific,<BR>&nbsp;since people copy, as long as it's trivial)<BR>&nbsp;Any fix by the author/maintainer of the file (ie. patch monkey<BR>&nbsp;in re-transmission mode)</P>
<P>&nbsp;</P>
<P>6) No MIME, no links, no compression, no attachments.&nbsp; Just plain text.<BR>-----------------------------------------------------------------------</P>
<P>Linus and other kernel developers need to be able to read and comment<BR>on the changes you are submitting.&nbsp; It is important for a kernel<BR>developer to be able to "quote" your changes, using standard e-mail<BR>tools, so that they may comment on specific portions of your code.</P>
<P>For this reason, all patches should be submitting e-mail "inline".<BR>WARNING:&nbsp; Be wary of your editor's word-wrap corrupting your patch,<BR>if you choose to cut-n-paste your patch.</P>
<P>Do not attach the patch as a MIME attachment, compressed or not.<BR>Many popular e-mail applications will not always transmit a MIME<BR>attachment as plain text, making it impossible to comment on your<BR>code.&nbsp; A MIME attachment also takes Linus a bit more time to process,<BR>decreasing the likelihood of your MIME-attached change being accepted.</P>
<P>Exception:&nbsp; If your mailer is mangling patches then someone may ask<BR>you to re-send them using MIME.</P>
<P>See Documentation/email-clients.txt for hints about configuring<BR>your e-mail client so that it sends your patches untouched.</P>
<P>7) E-mail size.<BR>---------------</P>
<P>Large changes are not appropriate for mailing lists, and some<BR>maintainers.&nbsp; If your patch, uncompressed, exceeds 300 kB in size,<BR>it is preferred that you store your patch on an Internet-accessible<BR>server, and provide instead a URL (link) pointing to your patch.&nbsp; But note<BR>that if your patch exceeds 300 kB, it almost certainly needs to be broken up<BR>anyway.</P>
<P>8) Respond to review comments.<BR>------------------------------</P>
<P>Your patch will almost certainly get comments from reviewers on ways in<BR>which the patch can be improved.&nbsp; You must respond to those comments;<BR>ignoring reviewers is a good way to get ignored in return.&nbsp; Review comments<BR>or questions that do not lead to a code change should almost certainly<BR>bring about a comment or changelog entry so that the next reviewer better<BR>understands what is going on.</P>
<P>Be sure to tell the reviewers what changes you are making and to thank them<BR>for their time.&nbsp; Code review is a tiring and time-consuming process, and<BR>reviewers sometimes get grumpy.&nbsp; Even in that case, though, respond<BR>politely and address the problems they have pointed out.</P>
<P><BR>9) Don't get discouraged - or impatient.<BR>----------------------------------------</P>
<P>After you have submitted your change, be patient and wait.&nbsp; Reviewers are<BR>busy people and may not get to your patch right away.</P>
<P>Once upon a time, patches used to disappear into the void without comment,<BR>but the development process works more smoothly than that now.&nbsp; You should<BR>receive comments within a week or so; if that does not happen, make sure<BR>that you have sent your patches to the right place.&nbsp; Wait for a minimum of<BR>one week before resubmitting or pinging reviewers - possibly longer during<BR>busy times like merge windows.</P>
<P><BR>10) Include PATCH in the subject<BR>--------------------------------</P>
<P>Due to high e-mail traffic to Linus, and to linux-kernel, it is common<BR>convention to prefix your subject line with [PATCH].&nbsp; This lets Linus<BR>and other kernel developers more easily distinguish patches from other<BR>e-mail discussions.</P>
<P>&nbsp;</P>
<P>11) Sign your work<BR>------------------</P>
<P>To improve tracking of who did what, especially with patches that can<BR>percolate to their final resting place in the kernel through several<BR>layers of maintainers, we've introduced a "sign-off" procedure on<BR>patches that are being emailed around.</P>
<P>The sign-off is a simple line at the end of the explanation for the<BR>patch, which certifies that you wrote it or otherwise have the right to<BR>pass it on as an open-source patch.&nbsp; The rules are pretty simple: if you<BR>can certify the below:</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Developer's Certificate of Origin 1.1</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; By making a contribution to this project, I certify that:</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (a) The contribution was created in whole or in part by me and I<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; have the right to submit it under the open source license<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; indicated in the file; or</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (b) The contribution is based upon previous work that, to the best<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; of my knowledge, is covered under an appropriate open source<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; license and I have the right under that license to submit that<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; work with modifications, whether created in whole or in part<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; by me, under the same open source license (unless I am<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; permitted to submit under a different license), as indicated<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; in the file; or</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (c) The contribution was provided directly to me by some other<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; person who certified (a), (b) or (c) and I have not modified<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; it.</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (d) I understand and agree that this project and the contribution<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; are public and that a record of the contribution (including all<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; personal information I submit with it, including my sign-off) is<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; maintained indefinitely and may be redistributed consistent with<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; this project or the open source license(s) involved.</P>
<P>then you just add a line saying</P>
<P>&nbsp;Signed-off-by: Random J Developer &lt;<A href="mailto:random@developer.example.org">random@developer.example.org</A>&gt;</P>
<P>using your real name (sorry, no pseudonyms or anonymous contributions.)</P>
<P>Some people also put extra tags at the end.&nbsp; They'll just be ignored for<BR>now, but you can do this to mark internal company procedures or just<BR>point out some special detail about the sign-off.</P>
<P>If you are a subsystem or branch maintainer, sometimes you need to slightly<BR>modify patches you receive in order to merge them, because the code is not<BR>exactly the same in your tree and the submitters'. If you stick strictly to<BR>rule (c), you should ask the submitter to rediff, but this is a totally<BR>counter-productive waste of time and energy. Rule (b) allows you to adjust<BR>the code, but then it is very impolite to change one submitter's code and<BR>make him endorse your bugs. To solve this problem, it is recommended that<BR>you add a line between the last Signed-off-by header and yours, indicating<BR>the nature of your changes. While there is nothing mandatory about this, it<BR>seems like prepending the description with your mail and/or name, all<BR>enclosed in square brackets, is noticeable enough to make it obvious that<BR>you are responsible for last-minute changes. Example :</P>
<P>&nbsp;Signed-off-by: Random J Developer &lt;<A href="mailto:random@developer.example.org">random@developer.example.org</A>&gt;<BR>&nbsp;[lucky@maintainer.example.org: struct foo moved from foo.c to foo.h]<BR>&nbsp;Signed-off-by: Lucky K Maintainer &lt;<A href="mailto:lucky@maintainer.example.org">lucky@maintainer.example.org</A>&gt;</P>
<P>This practice is particularly helpful if you maintain a stable branch and<BR>want at the same time to credit the author, track changes, merge the fix,<BR>and protect the submitter from complaints. Note that under no circumstances<BR>can you change the author's identity (the From header), as it is the one<BR>which appears in the changelog.</P>
<P>Special note to back-porters: It seems to be a common and useful practice<BR>to insert an indication of the origin of a patch at the top of the commit<BR>message (just after the subject line) to facilitate tracking. For instance,<BR>here's what we see in a 3.x-stable release:</P>
<P>Date:&nbsp;&nbsp; Tue Oct 7 07:26:38 2014 -0400</P>
<P>&nbsp;&nbsp;&nbsp; libata: Un-break ATA blacklist</P>
<P>&nbsp;&nbsp;&nbsp; commit 1c40279960bcd7d52dbdf1d466b20d24b99176c8 upstream.</P>
<P>And here's what might appear in an older kernel once a patch is backported:</P>
<P>&nbsp;&nbsp;&nbsp; Date:&nbsp;&nbsp; Tue May 13 22:12:27 2008 +0200</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wireless, airo: waitbusy() won't delay</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; [backport of 2.6 commit b7acbdfbd1f277c1eb23f344f899cfa4cd0bf36a]</P>
<P>Whatever the format, this information provides a valuable help to people<BR>tracking your trees, and to people trying to troubleshoot bugs in your<BR>tree.</P>
<P><BR>12) When to use Acked-by: and Cc:<BR>---------------------------------</P>
<P>The Signed-off-by: tag indicates that the signer was involved in the<BR>development of the patch, or that he/she was in the patch's delivery path.</P>
<P>If a person was not directly involved in the preparation or handling of a<BR>patch but wishes to signify and record their approval of it then they can<BR>ask to have an Acked-by: line added to the patch's changelog.</P>
<P>Acked-by: is often used by the maintainer of the affected code when that<BR>maintainer neither contributed to nor forwarded the patch.</P>
<P>Acked-by: is not as formal as Signed-off-by:.&nbsp; It is a record that the acker<BR>has at least reviewed the patch and has indicated acceptance.&nbsp; Hence patch<BR>mergers will sometimes manually convert an acker's "yep, looks good to me"<BR>into an Acked-by: (but note that it is usually better to ask for an<BR>explicit ack).</P>
<P>Acked-by: does not necessarily indicate acknowledgement of the entire patch.<BR>For example, if a patch affects multiple subsystems and has an Acked-by: from<BR>one subsystem maintainer then this usually indicates acknowledgement of just<BR>the part which affects that maintainer's code.&nbsp; Judgement should be used here.<BR>When in doubt people should refer to the original discussion in the mailing<BR>list archives.</P>
<P>If a person has had the opportunity to comment on a patch, but has not<BR>provided such comments, you may optionally add a "Cc:" tag to the patch.<BR>This is the only tag which might be added without an explicit action by the<BR>person it names - but it should indicate that this person was copied on the<BR>patch.&nbsp; This tag documents that potentially interested parties<BR>have been included in the discussion.</P>
<P><BR>13) Using Reported-by:, Tested-by:, Reviewed-by:, Suggested-by: and Fixes:<BR>--------------------------------------------------------------------------</P>
<P>The Reported-by tag gives credit to people who find bugs and report them and it<BR>hopefully inspires them to help us again in the future.&nbsp; Please note that if<BR>the bug was reported in private, then ask for permission first before using the<BR>Reported-by tag.</P>
<P>A Tested-by: tag indicates that the patch has been successfully tested (in<BR>some environment) by the person named.&nbsp; This tag informs maintainers that<BR>some testing has been performed, provides a means to locate testers for<BR>future patches, and ensures credit for the testers.</P>
<P>Reviewed-by:, instead, indicates that the patch has been reviewed and found<BR>acceptable according to the Reviewer's Statement:</P>
<P>&nbsp;Reviewer's statement of oversight</P>
<P>&nbsp;By offering my Reviewed-by: tag, I state that:</P>
<P>&nbsp;&nbsp; (a) I have carried out a technical review of this patch to<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; evaluate its appropriateness and readiness for inclusion into<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; the mainline kernel.</P>
<P>&nbsp; (b) Any problems, concerns, or questions relating to the patch<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; have been communicated back to the submitter.&nbsp; I am satisfied<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; with the submitter's response to my comments.</P>
<P>&nbsp; (c) While there may be things that could be improved with this<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; submission, I believe that it is, at this time, (1) a<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; worthwhile modification to the kernel, and (2) free of known<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; issues which would argue against its inclusion.</P>
<P>&nbsp; (d) While I have reviewed the patch and believe it to be sound, I<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; do not (unless explicitly stated elsewhere) make any<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; warranties or guarantees that it will achieve its stated<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; purpose or function properly in any given situation.</P>
<P>A Reviewed-by tag is a statement of opinion that the patch is an<BR>appropriate modification of the kernel without any remaining serious<BR>technical issues.&nbsp; Any interested reviewer (who has done the work) can<BR>offer a Reviewed-by tag for a patch.&nbsp; This tag serves to give credit to<BR>reviewers and to inform maintainers of the degree of review which has been<BR>done on the patch.&nbsp; Reviewed-by: tags, when supplied by reviewers known to<BR>understand the subject area and to perform thorough reviews, will normally<BR>increase the likelihood of your patch getting into the kernel.</P>
<P>A Suggested-by: tag indicates that the patch idea is suggested by the person<BR>named and ensures credit to the person for the idea. Please note that this<BR>tag should not be added without the reporter's permission, especially if the<BR>idea was not posted in a public forum. That said, if we diligently credit our<BR>idea reporters, they will, hopefully, be inspired to help us again in the<BR>future.</P>
<P>A Fixes: tag indicates that the patch fixes an issue in a previous commit. It<BR>is used to make it easy to determine where a bug originated, which can help<BR>review a bug fix. This tag also assists the stable kernel team in determining<BR>which stable kernel versions should receive your fix. This is the preferred<BR>method for indicating a bug fixed by the patch. See #2 above for more details.</P>
<P><BR>14) The canonical patch format<BR>------------------------------</P>
<P>This section describes how the patch itself should be formatted.&nbsp; Note<BR>that, if you have your patches stored in a git repository, proper patch<BR>formatting can be had with "git format-patch".&nbsp; The tools cannot create<BR>the necessary text, though, so read the instructions below anyway.</P>
<P>The canonical patch subject line is:</P>
<P>&nbsp;&nbsp;&nbsp; Subject: [PATCH 001/123] subsystem: summary phrase</P>
<P>The canonical patch message body contains the following:</P>
<P>&nbsp; - A "from" line specifying the patch author (only needed if the person<BR>&nbsp;&nbsp;&nbsp; sending the patch is not the author).</P>
<P>&nbsp; - An empty line.</P>
<P>&nbsp; - The body of the explanation, line wrapped at 75 columns, which will<BR>&nbsp;&nbsp;&nbsp; be copied to the permanent changelog to describe this patch.</P>
<P>&nbsp; - The "Signed-off-by:" lines, described above, which will<BR>&nbsp;&nbsp;&nbsp; also go in the changelog.</P>
<P>&nbsp; - A marker line containing simply "---".</P>
<P>&nbsp; - Any additional comments not suitable for the changelog.</P>
<P>&nbsp; - The actual patch (diff output).</P>
<P>The Subject line format makes it very easy to sort the emails<BR>alphabetically by subject line - pretty much any email reader will<BR>support that - since because the sequence number is zero-padded,<BR>the numerical and alphabetic sort is the same.</P>
<P>The "subsystem" in the email's Subject should identify which<BR>area or subsystem of the kernel is being patched.</P>
<P>The "summary phrase" in the email's Subject should concisely<BR>describe the patch which that email contains.&nbsp; The "summary<BR>phrase" should not be a filename.&nbsp; Do not use the same "summary<BR>phrase" for every patch in a whole patch series (where a "patch<BR>series" is an ordered sequence of multiple, related patches).</P>
<P>Bear in mind that the "summary phrase" of your email becomes a<BR>globally-unique identifier for that patch.&nbsp; It propagates all the way<BR>into the git changelog.&nbsp; The "summary phrase" may later be used in<BR>developer discussions which refer to the patch.&nbsp; People will want to<BR>google for the "summary phrase" to read discussion regarding that<BR>patch.&nbsp; It will also be the only thing that people may quickly see<BR>when, two or three months later, they are going through perhaps<BR>thousands of patches using tools such as "gitk" or "git log<BR>--oneline".</P>
<P>For these reasons, the "summary" must be no more than 70-75<BR>characters, and it must describe both what the patch changes, as well<BR>as why the patch might be necessary.&nbsp; It is challenging to be both<BR>succinct and descriptive, but that is what a well-written summary<BR>should do.</P>
<P>The "summary phrase" may be prefixed by tags enclosed in square<BR>brackets: "Subject: [PATCH tag] &lt;summary phrase&gt;".&nbsp; The tags are not<BR>considered part of the summary phrase, but describe how the patch<BR>should be treated.&nbsp; Common tags might include a version descriptor if<BR>the multiple versions of the patch have been sent out in response to<BR>comments (i.e., "v1, v2, v3"), or "RFC" to indicate a request for<BR>comments.&nbsp; If there are four patches in a patch series the individual<BR>patches may be numbered like this: 1/4, 2/4, 3/4, 4/4.&nbsp; This assures<BR>that developers understand the order in which the patches should be<BR>applied and that they have reviewed or applied all of the patches in<BR>the patch series.</P>
<P>A couple of example Subjects:</P>
<P>&nbsp;&nbsp;&nbsp; Subject: [patch 2/5] ext2: improve scalability of bitmap searching<BR>&nbsp;&nbsp;&nbsp; Subject: [PATCHv2 001/207] x86: fix eflags tracking</P>
<P>The "from" line must be the very first line in the message body,<BR>and has the form:</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; From: Original Author &lt;<A href="mailto:author@example.com">author@example.com</A>&gt;</P>
<P>The "from" line specifies who will be credited as the author of the<BR>patch in the permanent changelog.&nbsp; If the "from" line is missing,<BR>then the "From:" line from the email header will be used to determine<BR>the patch author in the changelog.</P>
<P>The explanation body will be committed to the permanent source<BR>changelog, so should make sense to a competent reader who has long<BR>since forgotten the immediate details of the discussion that might<BR>have led to this patch.&nbsp; Including symptoms of the failure which the<BR>patch addresses (kernel log messages, oops messages, etc.) is<BR>especially useful for people who might be searching the commit logs<BR>looking for the applicable patch.&nbsp; If a patch fixes a compile failure,<BR>it may not be necessary to include _all_ of the compile failures; just<BR>enough that it is likely that someone searching for the patch can find<BR>it.&nbsp; As in the "summary phrase", it is important to be both succinct as<BR>well as descriptive.</P>
<P>The "---" marker line serves the essential purpose of marking for patch<BR>handling tools where the changelog message ends.</P>
<P>One good use for the additional comments after the "---" marker is for<BR>a diffstat, to show what files have changed, and the number of<BR>inserted and deleted lines per file.&nbsp; A diffstat is especially useful<BR>on bigger patches.&nbsp; Other comments relevant only to the moment or the<BR>maintainer, not suitable for the permanent changelog, should also go<BR>here.&nbsp; A good example of such comments might be "patch changelogs"<BR>which describe what has changed between the v1 and v2 version of the<BR>patch.</P>
<P>If you are going to include a diffstat after the "---" marker, please<BR>use diffstat options "-p 1 -w 70" so that filenames are listed from<BR>the top of the kernel source tree and don't use too much horizontal<BR>space (easily fit in 80 columns, maybe with some indentation).&nbsp; (git<BR>generates appropriate diffstats by default.)</P>
<P>See more details on the proper patch format in the following<BR>references.</P>
<P><BR>15) Sending "git pull" requests<BR>-------------------------------</P>
<P>If you have a series of patches, it may be most convenient to have the<BR>maintainer pull them directly into the subsystem repository with a<BR>"git pull" operation.&nbsp; Note, however, that pulling patches from a developer<BR>requires a higher degree of trust than taking patches from a mailing list.<BR>As a result, many subsystem maintainers are reluctant to take pull<BR>requests, especially from new, unknown developers.&nbsp; If in doubt you can use<BR>the pull request as the cover letter for a normal posting of the patch<BR>series, giving the maintainer the option of using either.</P>
<P>A pull request should have [GIT] or [PULL] in the subject line.&nbsp; The<BR>request itself should include the repository name and the branch of<BR>interest on a single line; it should look something like:</P>
<P>&nbsp; Please pull from</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; git://jdelvare.pck.nerim.net/jdelvare-2.6 i2c-for-linus</P>
<P>&nbsp; to get these changes:"</P>
<P>A pull request should also include an overall message saying what will be<BR>included in the request, a "git shortlog" listing of the patches<BR>themselves, and a diffstat showing the overall effect of the patch series.<BR>The easiest way to get all this information together is, of course, to let<BR>git do it for you with the "git request-pull" command.</P>
<P>Some maintainers (including Linus) want to see pull requests from signed<BR>commits; that increases their confidence that the request actually came<BR>from you.&nbsp; Linus, in particular, will not pull from public hosting sites<BR>like GitHub in the absence of a signed tag.</P>
<P>The first step toward creating such tags is to make a GNUPG key and get it<BR>signed by one or more core kernel developers.&nbsp; This step can be hard for<BR>new developers, but there is no way around it.&nbsp; Attending conferences can<BR>be a good way to find developers who can sign your key.</P>
<P>Once you have prepared a patch series in git that you wish to have somebody<BR>pull, create a signed tag with "git tag -s".&nbsp; This will create a new tag<BR>identifying the last commit in the series and containing a signature<BR>created with your private key.&nbsp; You will also have the opportunity to add a<BR>changelog-style message to the tag; this is an ideal place to describe the<BR>effects of the pull request as a whole.</P>
<P>If the tree the maintainer will be pulling from is not the repository you<BR>are working from, don't forget to push the signed tag explicitly to the<BR>public tree.</P>
<P>When generating your pull request, use the signed tag as the target.&nbsp; A<BR>command like this will do the trick:</P>
<P>&nbsp; git request-pull master git://my.public.tree/linux.git my-signed-tag</P>
<P><BR>----------------------<BR>SECTION 2 - REFERENCES<BR>----------------------</P>
<P>Andrew Morton, "The perfect patch" (tpp).<BR>&nbsp; &lt;<A href="http://www.ozlabs.org/~akpm/stuff/tpp.txt">http://www.ozlabs.org/~akpm/stuff/tpp.txt</A>&gt;</P>
<P>Jeff Garzik, "Linux kernel patch submission format".<BR>&nbsp; &lt;<A href="http://linux.yyz.us/patch-format.html">http://linux.yyz.us/patch-format.html</A>&gt;</P>
<P>Greg Kroah-Hartman, "How to piss off a kernel subsystem maintainer".<BR>&nbsp; &lt;<A href="http://www.kroah.com/log/linux/maintainer.html">http://www.kroah.com/log/linux/maintainer.html</A>&gt;<BR>&nbsp; &lt;<A href="http://www.kroah.com/log/linux/maintainer-02.html">http://www.kroah.com/log/linux/maintainer-02.html</A>&gt;<BR>&nbsp; &lt;<A href="http://www.kroah.com/log/linux/maintainer-03.html">http://www.kroah.com/log/linux/maintainer-03.html</A>&gt;<BR>&nbsp; &lt;<A href="http://www.kroah.com/log/linux/maintainer-04.html">http://www.kroah.com/log/linux/maintainer-04.html</A>&gt;<BR>&nbsp; &lt;<A href="http://www.kroah.com/log/linux/maintainer-05.html">http://www.kroah.com/log/linux/maintainer-05.html</A>&gt;<BR>&nbsp; &lt;<A href="http://www.kroah.com/log/linux/maintainer-06.html">http://www.kroah.com/log/linux/maintainer-06.html</A>&gt;</P>
<P>NO!!!! No more huge patch bombs to <A href="mailto:linux-kernel@vger.kernel.org">linux-kernel@vger.kernel.org</A> people!<BR>&nbsp; &lt;<A href="https://lkml.org/lkml/2005/7/11/336">https://lkml.org/lkml/2005/7/11/336</A>&gt;</P>
<P>Kernel Documentation/CodingStyle:<BR>&nbsp; &lt;<A href="http://users.sosdg.org/~qiyong/lxr/source/Documentation/CodingStyle">http://users.sosdg.org/~qiyong/lxr/source/Documentation/CodingStyle</A>&gt;</P>
<P>Linus Torvalds's mail on the canonical patch format:<BR>&nbsp; &lt;<A href="http://lkml.org/lkml/2005/4/7/183">http://lkml.org/lkml/2005/4/7/183</A>&gt;</P>
<P>Andi Kleen, "On submitting kernel patches"<BR>&nbsp; Some strategies to get difficult or controversial changes in.<BR>&nbsp; <A href="http://halobates.de/on-submitting-patches.pdf">http://halobates.de/on-submitting-patches.pdf</A></P>
<P>--