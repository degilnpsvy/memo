# Documentation/applying-patches.txt
<P></P>
<P>&nbsp;Applying Patches To The Linux Kernel<BR>&nbsp;------------------------------------</P>
<P></P>
<P>&nbsp;Original by: Jesper Juhl, August 2005<BR>&nbsp;Last update: 2006-01-05</P>
<P><BR>A frequently asked question on the Linux Kernel Mailing List is how to apply<BR>a patch to the kernel or, more specifically, what base kernel a patch for<BR>one of the many trees/branches should be applied to. Hopefully this document<BR>will explain this to you.</P>
<P>In addition to explaining how to apply and revert patches, a brief<BR>description of the different kernel trees (and examples of how to apply<BR>their specific patches) is also provided.</P>
<P><BR>What is a patch?<BR>---<BR>&nbsp;A patch is a small text document containing a delta of changes between two<BR>different versions of a source tree. Patches are created with the `diff'<BR>program.<BR>To correctly apply a patch you need to know what base it was generated from<BR>and what new version the patch will change the source tree into. These<BR>should both be present in the patch file metadata or be possible to deduce<BR>from the filename.</P>
<P><BR>How do I apply or revert a patch?<BR>---<BR>&nbsp;You apply a patch with the `patch' program. The patch program reads a diff<BR>(or patch) file and makes the changes to the source tree described in it.</P>
<P>Patches for the Linux kernel are generated relative to the parent directory<BR>holding the kernel source dir.</P>
<P>This means that paths to files inside the patch file contain the name of the<BR>kernel source directories it was generated against (or some other directory<BR>names like "a/" and "b/").<BR>Since this is unlikely to match the name of the kernel source dir on your<BR>local machine (but is often useful info to see what version an otherwise<BR>unlabeled patch was generated against) you should change into your kernel<BR>source directory and then strip the first element of the path from filenames<BR>in the patch file when applying it (the -p1 argument to `patch' does this).</P>
<P>To revert a previously applied patch, use the -R argument to patch.<BR>So, if you applied a patch like this:<BR>&nbsp;patch -p1 &lt; ../patch-x.y.z</P>
<P>You can revert (undo) it like this:<BR>&nbsp;patch -R -p1 &lt; ../patch-x.y.z</P>
<P><BR>How do I feed a patch/diff file to `patch'?<BR>---<BR>&nbsp;This (as usual with Linux and other UNIX like operating systems) can be<BR>done in several different ways.<BR>In all the examples below I feed the file (in uncompressed form) to patch<BR>via stdin using the following syntax:<BR>&nbsp;patch -p1 &lt; path/to/patch-x.y.z</P>
<P>If you just want to be able to follow the examples below and don't want to<BR>know of more than one way to use patch, then you can stop reading this<BR>section here.</P>
<P>Patch can also get the name of the file to use via the -i argument, like<BR>this:<BR>&nbsp;patch -p1 -i path/to/patch-x.y.z</P>
<P>If your patch file is compressed with gzip or bzip2 and you don't want to<BR>uncompress it before applying it, then you can feed it to patch like this<BR>instead:<BR>&nbsp;zcat path/to/patch-x.y.z.gz | patch -p1<BR>&nbsp;bzcat path/to/patch-x.y.z.bz2 | patch -p1</P>
<P>If you wish to uncompress the patch file by hand first before applying it<BR>(what I assume you've done in the examples below), then you simply run<BR>gunzip or bunzip2 on the file -- like this:<BR>&nbsp;gunzip patch-x.y.z.gz<BR>&nbsp;bunzip2 patch-x.y.z.bz2</P>
<P>Which will leave you with a plain text patch-x.y.z file that you can feed to<BR>patch via stdin or the -i argument, as you prefer.</P>
<P>A few other nice arguments for patch are -s which causes patch to be silent<BR>except for errors which is nice to prevent errors from scrolling out of the<BR>screen too fast, and --dry-run which causes patch to just print a listing of<BR>what would happen, but doesn't actually make any changes. Finally --verbose<BR>tells patch to print more information about the work being done.</P>
<P><BR>Common errors when patching<BR>---<BR>&nbsp;When patch applies a patch file it attempts to verify the sanity of the<BR>file in different ways.<BR>Checking that the file looks like a valid patch file and checking the code<BR>around the bits being modified matches the context provided in the patch are<BR>just two of the basic sanity checks patch does.</P>
<P>If patch encounters something that doesn't look quite right it has two<BR>options. It can either refuse to apply the changes and abort or it can try<BR>to find a way to make the patch apply with a few minor changes.</P>
<P>One example of something that's not 'quite right' that patch will attempt to<BR>fix up is if all the context matches, the lines being changed match, but the<BR>line numbers are different. This can happen, for example, if the patch makes<BR>a change in the middle of the file but for some reasons a few lines have<BR>been added or removed near the beginning of the file. In that case<BR>everything looks good it has just moved up or down a bit, and patch will<BR>usually adjust the line numbers and apply the patch.</P>
<P>Whenever patch applies a patch that it had to modify a bit to make it fit<BR>it'll tell you about it by saying the patch applied with 'fuzz'.<BR>You should be wary of such changes since even though patch probably got it<BR>right it doesn't /always/ get it right, and the result will sometimes be<BR>wrong.</P>
<P>When patch encounters a change that it can't fix up with fuzz it rejects it<BR>outright and leaves a file with a .rej extension (a reject file). You can<BR>read this file to see exactly what change couldn't be applied, so you can<BR>go fix it up by hand if you wish.</P>
<P>If you don't have any third-party patches applied to your kernel source, but<BR>only patches from kernel.org and you apply the patches in the correct order,<BR>and have made no modifications yourself to the source files, then you should<BR>never see a fuzz or reject message from patch. If you do see such messages<BR>anyway, then there's a high risk that either your local source tree or the<BR>patch file is corrupted in some way. In that case you should probably try<BR>re-downloading the patch and if things are still not OK then you'd be advised<BR>to start with a fresh tree downloaded in full from kernel.org.</P>
<P>Let's look a bit more at some of the messages patch can produce.</P>
<P>If patch stops and presents a "File to patch:" prompt, then patch could not<BR>find a file to be patched. Most likely you forgot to specify -p1 or you are<BR>in the wrong directory. Less often, you'll find patches that need to be<BR>applied with -p0 instead of -p1 (reading the patch file should reveal if<BR>this is the case -- if so, then this is an error by the person who created<BR>the patch but is not fatal).</P>
<P>If you get "Hunk #2 succeeded at 1887 with fuzz 2 (offset 7 lines)." or a<BR>message similar to that, then it means that patch had to adjust the location<BR>of the change (in this example it needed to move 7 lines from where it<BR>expected to make the change to make it fit).<BR>The resulting file may or may not be OK, depending on the reason the file<BR>was different than expected.<BR>This often happens if you try to apply a patch that was generated against a<BR>different kernel version than the one you are trying to patch.</P>
<P>If you get a message like "Hunk #3 FAILED at 2387.", then it means that the<BR>patch could not be applied correctly and the patch program was unable to<BR>fuzz its way through. This will generate a .rej file with the change that<BR>caused the patch to fail and also a .orig file showing you the original<BR>content that couldn't be changed.</P>
<P>If you get "Reversed (or previously applied) patch detected!&nbsp; Assume -R? [n]"<BR>then patch detected that the change contained in the patch seems to have<BR>already been made.<BR>If you actually did apply this patch previously and you just re-applied it<BR>in error, then just say [n]o and abort this patch. If you applied this patch<BR>previously and actually intended to revert it, but forgot to specify -R,<BR>then you can say [y]es here to make patch revert it for you.<BR>This can also happen if the creator of the patch reversed the source and<BR>destination directories when creating the patch, and in that case reverting<BR>the patch will in fact apply it.</P>
<P>A message similar to "patch: **** unexpected end of file in patch" or "patch<BR>unexpectedly ends in middle of line" means that patch could make no sense of<BR>the file you fed to it. Either your download is broken, you tried to feed<BR>patch a compressed patch file without uncompressing it first, or the patch<BR>file that you are using has been mangled by a mail client or mail transfer<BR>agent along the way somewhere, e.g., by splitting a long line into two lines.<BR>Often these warnings can easily be fixed by joining (concatenating) the<BR>two lines that had been split.</P>
<P>As I already mentioned above, these errors should never happen if you apply<BR>a patch from kernel.org to the correct version of an unmodified source tree.<BR>So if you get these errors with kernel.org patches then you should probably<BR>assume that either your patch file or your tree is broken and I'd advise you<BR>to start over with a fresh download of a full kernel tree and the patch you<BR>wish to apply.</P>
<P><BR>Are there any alternatives to `patch'?<BR>---<BR>&nbsp;Yes there are alternatives.</P>
<P>&nbsp;You can use the `interdiff' program (<A href="http://cyberelk.net/tim/patchutils/">http://cyberelk.net/tim/patchutils/</A>) to<BR>generate a patch representing the differences between two patches and then<BR>apply the result.<BR>This will let you move from something like 2.6.12.2 to 2.6.12.3 in a single<BR>step. The -z flag to interdiff will even let you feed it patches in gzip or<BR>bzip2 compressed form directly without the use of zcat or bzcat or manual<BR>decompression.</P>
<P>Here's how you'd go from 2.6.12.2 to 2.6.12.3 in a single step:<BR>&nbsp;interdiff -z ../patch-2.6.12.2.bz2 ../patch-2.6.12.3.gz | patch -p1</P>
<P>Although interdiff may save you a step or two you are generally advised to<BR>do the additional steps since interdiff can get things wrong in some cases.</P>
<P>&nbsp;Another alternative is `ketchup', which is a python script for automatic<BR>downloading and applying of patches (<A href="http://www.selenic.com/ketchup/">http://www.selenic.com/ketchup/</A>).</P>
<P>&nbsp;Other nice tools are diffstat, which shows a summary of changes made by a<BR>patch; lsdiff, which displays a short listing of affected files in a patch<BR>file, along with (optionally) the line numbers of the start of each patch;<BR>and grepdiff, which displays a list of the files modified by a patch where<BR>the patch contains a given regular expression.</P>
<P><BR>Where can I download the patches?<BR>---<BR>&nbsp;The patches are available at <A href="http://kernel.org/">http://kernel.org/</A><BR>Most recent patches are linked from the front page, but they also have<BR>specific homes.</P>
<P>The 2.6.x.y (-stable) and 2.6.x patches live at<BR>&nbsp;<A href="ftp://ftp.kernel.org/pub/linux/kernel/v2.6/">ftp://ftp.kernel.org/pub/linux/kernel/v2.6/</A></P>
<P>The -rc patches live at<BR>&nbsp;<A href="ftp://ftp.kernel.org/pub/linux/kernel/v2.6/testing/">ftp://ftp.kernel.org/pub/linux/kernel/v2.6/testing/</A></P>
<P>The -git patches live at<BR>&nbsp;<A href="ftp://ftp.kernel.org/pub/linux/kernel/v2.6/snapshots/">ftp://ftp.kernel.org/pub/linux/kernel/v2.6/snapshots/</A></P>
<P>The -mm kernels live at<BR>&nbsp;<A href="ftp://ftp.kernel.org/pub/linux/kernel/people/akpm/patches/2.6/">ftp://ftp.kernel.org/pub/linux/kernel/people/akpm/patches/2.6/</A></P>
<P>In place of <A href="ftp://ftp.kernel.org">ftp.kernel.org</A> you can use <A href="ftp://ftp.cc.kernel.org">ftp.cc.kernel.org</A>, where cc is a<BR>country code. This way you'll be downloading from a mirror site that's most<BR>likely geographically closer to you, resulting in faster downloads for you,<BR>less bandwidth used globally and less load on the main kernel.org servers --<BR>these are good things, so do use mirrors when possible.</P>
<P><BR>The 2.6.x kernels<BR>---<BR>&nbsp;These are the base stable releases released by Linus. The highest numbered<BR>release is the most recent.</P>
<P>If regressions or other serious flaws are found, then a -stable fix patch<BR>will be released (see below) on top of this base. Once a new 2.6.x base<BR>kernel is released, a patch is made available that is a delta between the<BR>previous 2.6.x kernel and the new one.</P>
<P>To apply a patch moving from 2.6.11 to 2.6.12, you'd do the following (note<BR>that such patches do *NOT* apply on top of 2.6.x.y kernels but on top of the<BR>base 2.6.x kernel -- if you need to move from 2.6.x.y to 2.6.x+1 you need to<BR>first revert the 2.6.x.y patch).</P>
<P>Here are some examples:</P>
<P># moving from 2.6.11 to 2.6.12<BR>$ cd ~/linux-2.6.11&nbsp;&nbsp;&nbsp;# change to kernel source dir<BR>$ patch -p1 &lt; ../patch-2.6.12&nbsp;&nbsp;# apply the 2.6.12 patch<BR>$ cd ..<BR>$ mv linux-2.6.11 linux-2.6.12&nbsp;&nbsp;# rename source dir</P>
<P># moving from 2.6.11.1 to 2.6.12<BR>$ cd ~/linux-2.6.11.1&nbsp;&nbsp;&nbsp;# change to kernel source dir<BR>$ patch -p1 -R &lt; ../patch-2.6.11.1&nbsp;# revert the 2.6.11.1 patch<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# source dir is now 2.6.11<BR>$ patch -p1 &lt; ../patch-2.6.12&nbsp;&nbsp;# apply new 2.6.12 patch<BR>$ cd ..<BR>$ mv linux-2.6.11.1 linux-2.6.12&nbsp;&nbsp;# rename source dir</P>
<P><BR>The 2.6.x.y kernels<BR>---<BR>&nbsp;Kernels with 4-digit versions are -stable kernels. They contain small(ish)<BR>critical fixes for security problems or significant regressions discovered<BR>in a given 2.6.x kernel.</P>
<P>This is the recommended branch for users who want the most recent stable<BR>kernel and are not interested in helping test development/experimental<BR>versions.</P>
<P>If no 2.6.x.y kernel is available, then the highest numbered 2.6.x kernel is<BR>the current stable kernel.</P>
<P>&nbsp;note: the -stable team usually do make incremental patches available as well<BR>&nbsp;as patches against the latest mainline release, but I only cover the<BR>&nbsp;non-incremental ones below. The incremental ones can be found at<BR>&nbsp;<A href="ftp://ftp.kernel.org/pub/linux/kernel/v2.6/incr/">ftp://ftp.kernel.org/pub/linux/kernel/v2.6/incr/</A></P>
<P>These patches are not incremental, meaning that for example the 2.6.12.3<BR>patch does not apply on top of the 2.6.12.2 kernel source, but rather on top<BR>of the base 2.6.12 kernel source .<BR>So, in order to apply the 2.6.12.3 patch to your existing 2.6.12.2 kernel<BR>source you have to first back out the 2.6.12.2 patch (so you are left with a<BR>base 2.6.12 kernel source) and then apply the new 2.6.12.3 patch.</P>
<P>Here's a small example:</P>
<P>$ cd ~/linux-2.6.12.2&nbsp;&nbsp;&nbsp;# change into the kernel source dir<BR>$ patch -p1 -R &lt; ../patch-2.6.12.2&nbsp;# revert the 2.6.12.2 patch<BR>$ patch -p1 &lt; ../patch-2.6.12.3&nbsp;&nbsp;# apply the new 2.6.12.3 patch<BR>$ cd ..<BR>$ mv linux-2.6.12.2 linux-2.6.12.3&nbsp;# rename the kernel source dir</P>
<P><BR>The -rc kernels<BR>---<BR>&nbsp;These are release-candidate kernels. These are development kernels released<BR>by Linus whenever he deems the current git (the kernel's source management<BR>tool) tree to be in a reasonably sane state adequate for testing.</P>
<P>These kernels are not stable and you should expect occasional breakage if<BR>you intend to run them. This is however the most stable of the main<BR>development branches and is also what will eventually turn into the next<BR>stable kernel, so it is important that it be tested by as many people as<BR>possible.</P>
<P>This is a good branch to run for people who want to help out testing<BR>development kernels but do not want to run some of the really experimental<BR>stuff (such people should see the sections about -git and -mm kernels below).</P>
<P>The -rc patches are not incremental, they apply to a base 2.6.x kernel, just<BR>like the 2.6.x.y patches described above. The kernel version before the -rcN<BR>suffix denotes the version of the kernel that this -rc kernel will eventually<BR>turn into.<BR>So, 2.6.13-rc5 means that this is the fifth release candidate for the 2.6.13<BR>kernel and the patch should be applied on top of the 2.6.12 kernel source.</P>
<P>Here are 3 examples of how to apply these patches:</P>
<P># first an example of moving from 2.6.12 to 2.6.13-rc3<BR>$ cd ~/linux-2.6.12&nbsp;&nbsp;&nbsp;# change into the 2.6.12 source dir<BR>$ patch -p1 &lt; ../patch-2.6.13-rc3&nbsp;# apply the 2.6.13-rc3 patch<BR>$ cd ..<BR>$ mv linux-2.6.12 linux-2.6.13-rc3&nbsp;# rename the source dir</P>
<P># now let's move from 2.6.13-rc3 to 2.6.13-rc5<BR>$ cd ~/linux-2.6.13-rc3&nbsp;&nbsp;&nbsp;# change into the 2.6.13-rc3 dir<BR>$ patch -p1 -R &lt; ../patch-2.6.13-rc3&nbsp;# revert the 2.6.13-rc3 patch<BR>$ patch -p1 &lt; ../patch-2.6.13-rc5&nbsp;# apply the new 2.6.13-rc5 patch<BR>$ cd ..<BR>$ mv linux-2.6.13-rc3 linux-2.6.13-rc5&nbsp;# rename the source dir</P>
<P># finally let's try and move from 2.6.12.3 to 2.6.13-rc5<BR>$ cd ~/linux-2.6.12.3&nbsp;&nbsp;&nbsp;# change to the kernel source dir<BR>$ patch -p1 -R &lt; ../patch-2.6.12.3&nbsp;# revert the 2.6.12.3 patch<BR>$ patch -p1 &lt; ../patch-2.6.13-rc5&nbsp;# apply new 2.6.13-rc5 patch<BR>$ cd ..<BR>$ mv linux-2.6.12.3 linux-2.6.13-rc5&nbsp;# rename the kernel source dir</P>
<P><BR>The -git kernels<BR>---<BR>&nbsp;These are daily snapshots of Linus' kernel tree (managed in a git<BR>repository, hence the name).</P>
<P>These patches are usually released daily and represent the current state of<BR>Linus's tree. They are more experimental than -rc kernels since they are<BR>generated automatically without even a cursory glance to see if they are<BR>sane.</P>
<P>-git patches are not incremental and apply either to a base 2.6.x kernel or<BR>a base 2.6.x-rc kernel -- you can see which from their name.<BR>A patch named 2.6.12-git1 applies to the 2.6.12 kernel source and a patch<BR>named 2.6.13-rc3-git2 applies to the source of the 2.6.13-rc3 kernel.</P>
<P>Here are some examples of how to apply these patches:</P>
<P># moving from 2.6.12 to 2.6.12-git1<BR>$ cd ~/linux-2.6.12&nbsp;&nbsp;&nbsp;# change to the kernel source dir<BR>$ patch -p1 &lt; ../patch-2.6.12-git1&nbsp;# apply the 2.6.12-git1 patch<BR>$ cd ..<BR>$ mv linux-2.6.12 linux-2.6.12-git1&nbsp;# rename the kernel source dir</P>
<P># moving from 2.6.12-git1 to 2.6.13-rc2-git3<BR>$ cd ~/linux-2.6.12-git1&nbsp;&nbsp;# change to the kernel source dir<BR>$ patch -p1 -R &lt; ../patch-2.6.12-git1&nbsp;# revert the 2.6.12-git1 patch<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# we now have a 2.6.12 kernel<BR>$ patch -p1 &lt; ../patch-2.6.13-rc2&nbsp;# apply the 2.6.13-rc2 patch<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# the kernel is now 2.6.13-rc2<BR>$ patch -p1 &lt; ../patch-2.6.13-rc2-git3&nbsp;# apply the 2.6.13-rc2-git3 patch<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# the kernel is now 2.6.13-rc2-git3<BR>$ cd ..<BR>$ mv linux-2.6.12-git1 linux-2.6.13-rc2-git3&nbsp;# rename source dir</P>
<P><BR>The -mm kernels<BR>---<BR>&nbsp;These are experimental kernels released by Andrew Morton.</P>
<P>The -mm tree serves as a sort of proving ground for new features and other<BR>experimental patches.<BR>Once a patch has proved its worth in -mm for a while Andrew pushes it on to<BR>Linus for inclusion in mainline.</P>
<P>Although it's encouraged that patches flow to Linus via the -mm tree, this<BR>is not always enforced.<BR>Subsystem maintainers (or individuals) sometimes push their patches directly<BR>to Linus, even though (or after) they have been merged and tested in -mm (or<BR>sometimes even without prior testing in -mm).</P>
<P>You should generally strive to get your patches into mainline via -mm to<BR>ensure maximum testing.</P>
<P>This branch is in constant flux and contains many experimental features, a<BR>lot of debugging patches not appropriate for mainline etc., and is the most<BR>experimental of the branches described in this document.</P>
<P>These kernels are not appropriate for use on systems that are supposed to be<BR>stable and they are more risky to run than any of the other branches (make<BR>sure you have up-to-date backups -- that goes for any experimental kernel but<BR>even more so for -mm kernels).</P>
<P>These kernels in addition to all the other experimental patches they contain<BR>usually also contain any changes in the mainline -git kernels available at<BR>the time of release.</P>
<P>Testing of -mm kernels is greatly appreciated since the whole point of the<BR>tree is to weed out regressions, crashes, data corruption bugs, build<BR>breakage (and any other bug in general) before changes are merged into the<BR>more stable mainline Linus tree.<BR>But testers of -mm should be aware that breakage in this tree is more common<BR>than in any other tree.</P>
<P>The -mm kernels are not released on a fixed schedule, but usually a few -mm<BR>kernels are released in between each -rc kernel (1 to 3 is common).<BR>The -mm kernels apply to either a base 2.6.x kernel (when no -rc kernels<BR>have been released yet) or to a Linus -rc kernel.</P>
<P>Here are some examples of applying the -mm patches:</P>
<P># moving from 2.6.12 to 2.6.12-mm1<BR>$ cd ~/linux-2.6.12&nbsp;&nbsp;&nbsp;# change to the 2.6.12 source dir<BR>$ patch -p1 &lt; ../2.6.12-mm1&nbsp;&nbsp;# apply the 2.6.12-mm1 patch<BR>$ cd ..<BR>$ mv linux-2.6.12 linux-2.6.12-mm1&nbsp;# rename the source appropriately</P>
<P># moving from 2.6.12-mm1 to 2.6.13-rc3-mm3<BR>$ cd ~/linux-2.6.12-mm1<BR>$ patch -p1 -R &lt; ../2.6.12-mm1&nbsp;&nbsp;# revert the 2.6.12-mm1 patch<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# we now have a 2.6.12 source<BR>$ patch -p1 &lt; ../patch-2.6.13-rc3&nbsp;# apply the 2.6.13-rc3 patch<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;# we now have a 2.6.13-rc3 source<BR>$ patch -p1 &lt; ../2.6.13-rc3-mm3&nbsp;&nbsp;# apply the 2.6.13-rc3-mm3 patch<BR>$ cd ..<BR>$ mv linux-2.6.12-mm1 linux-2.6.13-rc3-mm3&nbsp;# rename the source dir</P>
<P><BR>This concludes this list of explanations of the various kernel trees.<BR>I hope you are now clear on how to apply the various patches and help testing<BR>the kernel.</P>
<P>Thank you's to Randy Dunlap, Rolf Eike Beer, Linus Torvalds, Bodo Eggert,<BR>Johannes Stezenbach, Grant Coady, Pavel Machek and others that I may have<BR>forgotten for their reviews and contributions to this document.</P>
<P>&nbsp;