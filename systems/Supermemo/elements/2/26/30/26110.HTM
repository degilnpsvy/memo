<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 26pt; FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; mso-bidi-font-size: 18.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka">Interrupt-Driven I/O</SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><FONT face=Calibri><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">Whenever a data transfer to or from the managed hardware might be delayed for any reason, the driver writer should implement buffering. Data buffers help to detach data transmission and reception from the </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt">write </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">and </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt">read </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">system calls, and overall system performance benefits.</SPAN></FONT></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><FONT face=Calibri><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">A good buffering mechanism leads to </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt">interrupt-driven I/O</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">, in which an input buffer is filled at interrupt time and is emptied by processes that read the device; an output buffer is filled by processes that write to the device and is emptied at interrupt time. An example of interrupt-driven output is the implementation of </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt">/dev/shortprint</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">. For interrupt-driven data transfer to happen successfully, the hardware should be able to generate interrupts with the following semantics:</SPAN></FONT></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN style="FONT-SIZE: 14pt; FONT-FAMILY: &#23435;&#20307;; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt"><FONT face=Calibri> For input, the device interrupts the processor when new data has arrived and is ready to be retrieved by the system processor. The actual actions to perform depend on whether the device uses I/O ports, memory mapping, or DMA.</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN style="FONT-SIZE: 14pt; FONT-FAMILY: &#23435;&#20307;; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt"><FONT face=Calibri> For output, the device delivers an interrupt either when it is ready to accept new data or to acknowledge a successful data transfer. Memory-mapped and DMA capable devices usually generate interrupts to tell the system they are done with the buffer.</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><FONT face=Calibri><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">The timing relationships between a </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt">read </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">or </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt">write </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">and the actual arrival of data were introduced in the section </SPAN><SPAN style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>Blocking and Nonblocking Operations</SPAN>&#8221;<SPAN lang=EN-US> in Chapter 6.</SPAN></SPAN></FONT></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 22pt; FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka">A Write-Buffering Example</SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><FONT face=Calibri><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">We have mentioned the </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt">shortprint </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">driver a couple of times; now it is time to actually take a look. This module implements a very simple, output-oriented driver for the parallel port; it is sufficient, however, to enable the printing of files. If you chose to test this driver out, however, remember that you must pass the printer a file in a format it understands; not all printers respond well when given a stream of arbitrary data.</SPAN></FONT></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><FONT face=Calibri><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">The </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt">shortprint </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">driver maintains a one-page circular output buffer. When a user-space process writes data to the device, that data is fed into the buffer, but the </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt">write </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">method does not actually perform any I/O. Instead, the core of </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt">shortp_write </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">looks like this:</SPAN></FONT></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>while (written &lt; count) {</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>/* Hang out until some buffer space is available. */</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>space = shortp_out_space( );</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>if (space &lt;= 0) {</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>if (wait_event_interruptible(shortp_out_queue,</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>(space = shortp_out_space( )) &gt; 0))</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>goto out;</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>}</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>/* Move data into the buffer. */</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>if ((space + written) &gt; count)</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>space = count - written;</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>if (copy_from_user((char *) shortp_out_head, buf, space)) {</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>up(&amp;shortp_out_sem);</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>return -EFAULT;</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>}</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>shortp_incr_out_bp(&amp;shortp_out_head, space);</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>buf += space;</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>written += space;</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>/* If no output is active, make it active. */</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>spin_lock_irqsave(&amp;shortp_out_lock, flags);</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>if (! shortp_output_active)</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>shortp_start_output( );</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>spin_unlock_irqrestore(&amp;shortp_out_lock, flags);</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>}</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>out:</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>*f_pos += written;</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><FONT face=Calibri><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">A semaphore (</SPAN><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt">shortp_out_sem</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">) controls access to the circular buffer; </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt">shortp_write </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">obtains that semaphore just prior to the code fragment above. While holding the semaphore, it attempts to feed data into the circular buffer. The function </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt">shortp_out_space </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">returns the amount of contiguous space available (so there is no need to worry about buffer wraps); if that amount is </SPAN><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt">0</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">, the driver waits until some space is freed. It then copies as much data as it can into the buffer.</SPAN></FONT></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><FONT face=Calibri><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">Once there is data to output, </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt">shortp_write </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">must ensure that the data is written to the device. The actual writing is done by way of a </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt">workqueue </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">function; </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt">shortp_write </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">must kick that function off if it is not already running. After obtaining a separate spinlockthat controls access to variables used on the consumer side of the output buffer (including </SPAN><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt">shortp_output_active</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">), it calls </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt">shortp_start_output </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">if need be. Then it</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka; mso-ascii-font-family: Birka">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">s just a matter of noting how much data was </SPAN><SPAN style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>written</SPAN>&#8221;<SPAN lang=EN-US> to the buffer and returning.</SPAN></SPAN></FONT></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt"><FONT face=Calibri>The function that starts the output process looks like the following:</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>static void shortp_start_output(void)</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>{</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>if (shortp_output_active) /* Should never happen */</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>return;</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>/* Set up our 'missed interrupt' timer */</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>shortp_output_active = 1;</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>shortp_timer.expires = jiffies + TIMEOUT;</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>add_timer(&amp;shortp_timer);</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>/* And get the process going. */</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>queue_work(shortp_workqueue, &amp;shortp_work);</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>}</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><FONT face=Calibri><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">The reality of dealing with hardware is that you can, occasionally, lose an interrupt from the device. When this happens, you really do not want your driver to stop forevermore until the system is rebooted; that is not a user-friendly way of doing things. It is far better to realize that an interrupt has been missed, pickup the pieces, and go on. To that end, </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt">shortprint </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">sets a kernel timer whenever it outputs data to the device. If the timer expires, we may have missed an interrupt. We lookat the timer function shortly, but, for the moment, let</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka; mso-ascii-font-family: Birka">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">s stickwith the main output functionality. That is implemented in our </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt">workqueue </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">function, which, as you can see above, is scheduled here. The core of that function looks like the following:</SPAN></FONT></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>spin_lock_irqsave(&amp;shortp_out_lock, flags);</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>/* Have we written everything? */</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>if (shortp_out_head = = shortp_out_tail) { /* empty */</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>shortp_output_active = 0;</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>wake_up_interruptible(&amp;shortp_empty_queue);</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>del_timer(&amp;shortp_timer);</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>}</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>/* Nope, write another byte */</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>else</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>shortp_do_write( );</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>/* If somebody's waiting, maybe wake them up. */</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>if (((PAGE_SIZE + shortp_out_tail -shortp_out_head) % PAGE_SIZE) &gt; SP_MIN_SPACE)</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>{</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>wake_up_interruptible(&amp;shortp_out_queue);</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>}</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>spin_unlock_irqrestore(&amp;shortp_out_lock, flags);</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><FONT face=Calibri><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">Since we are dealing with the output side</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka; mso-ascii-font-family: Birka">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">s shared variables, we must obtain the spinlock. Then we look to see whether there is any more data to send out; if not, we note that output is no longer active, delete the timer, and wake up anybody who might have been waiting for the queue to become completely empty (this sort of wait is done when the device is closed). If, instead, there remains data to write, we call </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt">shortp_do_write </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">to actually send a byte to the hardware.</SPAN></FONT></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt"><FONT face=Calibri>Then, since we may have freed space in the output buffer, we consider waking up any processes waiting to add more data to that buffer. We do not perform that wakeup unconditionally, however; instead, we wait until a minimum amount of space is available. There is no point in awakening a writer every time we take one byte out of the buffer; the cost of awakening the process, scheduling it to run, and putting it backto sleep is too high for that. Instead, we should wait until that process is able to move a substantial amount of data into the buffer at once. This technique is common in buffering, interrupt-driven drivers.</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt"><FONT face=Calibri>For completeness, here is the code that actually writes the data to the port:</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>static void shortp_do_write(void)</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>{</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>unsigned char cr = inb(shortp_base + SP_CONTROL);</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>/* Something happened; reset the timer */</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>mod_timer(&amp;shortp_timer, jiffies + TIMEOUT);</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>/* Strobe a byte out to the device */</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>outb_p(*shortp_out_tail, shortp_base+SP_DATA);</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>shortp_incr_out_bp(&amp;shortp_out_tail, 1);</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>if (shortp_delay)</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>udelay(shortp_delay);</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>outb_p(cr | SP_CR_STROBE, shortp_base+SP_CONTROL);</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>if (shortp_delay)</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>udelay(shortp_delay);</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>outb_p(cr &amp; ~SP_CR_STROBE, shortp_base+SP_CONTROL);</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>}</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt"><FONT face=Calibri>Here, we reset the timer to reflect the fact that we have made some progress, strobe the byte out to the device, and update the circular buffer pointer.</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><FONT face=Calibri><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">The </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt">workqueue </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">function does not resubmit itself directly, so only a single byte will be written to the device. At some point, the printer will, in its slow way, consume the byte and become ready for the next one; it will then interrupt the processor. The interrupt handler used in </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt">shortprint </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">is short and simple:</SPAN></FONT></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>static irqreturn_t shortp_interrupt(int irq, void *dev_id, struct pt_regs *regs)</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>{</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>if (! shortp_output_active)</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>return IRQ_NONE;</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>/* Remember the time, and farm off the rest to the workqueue function */</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>do_gettimeofday(&amp;shortp_tv);</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>queue_work(shortp_workqueue, &amp;shortp_work);</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>return IRQ_HANDLED;</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>}</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><FONT face=Calibri><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">Since the parallel port does not require an explicit interrupt acknowledgment, all the interrupt handler really needs to do is to tell the kernel to run the </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt">workqueue </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">function again.</SPAN></FONT></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt"><FONT face=Calibri>What if the interrupt never comes? The driver code that we have seen thus far would simply come to a halt. To keep that from happening, we set a timer back a few pages ago. The function that is executed when that timer expires is:</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>static void shortp_timeout(unsigned long unused)</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>{</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>unsigned long flags;</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>unsigned char status;</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>if (! shortp_output_active)</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>return;</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>spin_lock_irqsave(&amp;shortp_out_lock, flags);</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>status = inb(shortp_base + SP_STATUS);</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>/* If the printer is still busy we just reset the timer */</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>if ((status &amp; SP_SR_BUSY) = = 0 || (status &amp; SP_SR_ACK)) {</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>shortp_timer.expires = jiffies + TIMEOUT;</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>add_timer(&amp;shortp_timer);</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>spin_unlock_irqrestore(&amp;shortp_out_lock, flags);</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>return;</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>}</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>/* Otherwise we must have dropped an interrupt. */</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>spin_unlock_irqrestore(&amp;shortp_out_lock, flags);</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>shortp_interrupt(shortp_irq, NULL, NULL);</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>}</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><FONT face=Calibri><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">If no output is supposed to be active, the timer function simply returns; this keeps the timer from resubmitting itself when things are being shut down. Then, after taking the lock, we query the status of the port; if it claims to be busy, it simply hasn</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka; mso-ascii-font-family: Birka">&#8217;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">t gotten around to interrupting us yet, so we reset the timer and return. Printers can, at times, take a very long time to make themselves ready; consider the printer that runs out of paper while everybody is gone over a long weekend. In such situations, there is nothing to do other than to wait patiently until something changes.</SPAN></FONT></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt"><FONT face=Calibri>If, however, the printer claims to be ready, we must have missed its interrupt. In that case, we simply invoke our interrupt handler manually to get the output process moving again.</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><FONT face=Calibri><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">The </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt">shortprint </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">driver does not support reading from the port; instead, it behaves like </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt">shortint </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">and returns interrupt timing information. The implementation of an interrupt-driven </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt">read </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">method would be very similar to what we have seen, however. Data from the device would be read into a driver buffer; it would be copied out to user space only when a significant amount of data has accumulated in the buffer, the full </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt">read </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">request has been satisfied, or some sort of timeout occurs.</SPAN></FONT>