<H2>Concurrency Managed Workqueue&#20043;&#65288;&#19977;&#65289;&#65306;&#21019;&#24314;workqueue&#20195;&#30721;&#20998;&#26512;</H2>
<P class=date>&#20316;&#32773;&#65306;<A href="http://www.wowotech.net/author/3">linuxer</A> &#21457;&#24067;&#20110;&#65306;2015-8-6 18:22 &#20998;&#31867;&#65306;<A href="http://www.wowotech.net/sort/irq_subsystem">&#20013;&#26029;&#23376;&#31995;&#32479;</A> </P>
<P>&#19968;&#12289;&#21069;&#35328; </P>
<P>&#26412;&#25991;&#20027;&#35201;&#20197;__alloc_workqueue_key&#20989;&#25968;&#20026;&#20027;&#32447;&#65292;&#25551;&#36848;CMWQ&#20013;&#30340;&#21019;&#24314;&#19968;&#20010;workqueue&#23454;&#20363;&#30340;&#20195;&#30721;&#36807;&#31243;&#12290; </P>
<P>&nbsp; </P>
<P>&#20108;&#12289;WQ_POWER_EFFICIENT&#30340;&#22788;&#29702; </P>
<P>__alloc_workqueue_key&#20989;&#25968;&#30340;&#19968;&#24320;&#22987;&#26377;&#22914;&#19979;&#30340;&#20195;&#30721;&#65306; </P>
<BLOCKQUOTE>
<P>if ((flags &amp; WQ_POWER_EFFICIENT) &amp;&amp; wq_power_efficient) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; flags |= WQ_UNBOUND; </P></BLOCKQUOTE>
<P>&#22312;kernel&#20013;&#65292;&#26377;&#20004;&#31181;&#32447;&#31243;&#27744;&#65292;&#19968;&#31181;&#26159;&#32447;&#31243;&#27744;&#26159;per cpu&#30340;&#65292;&#20063;&#23601;&#26159;&#35828;&#65292;&#31995;&#32479;&#20013;&#26377;&#22810;&#23569;&#20010;cpu&#65292;&#23601;&#20250;&#21019;&#24314;&#22810;&#23569;&#20010;&#32447;&#31243;&#27744;&#65292;cpu x&#19978;&#30340;&#32447;&#31243;&#27744;&#21019;&#24314;&#30340;worker&#32447;&#31243;&#20063;&#21482;&#20250;&#36816;&#34892;&#22312;cpu x&#19978;&#12290;&#21478;&#22806;&#19968;&#31181;&#26159;unbound thread pool&#65292;&#35813;&#32447;&#31243;&#27744;&#21019;&#24314;&#30340;worker&#32447;&#31243;&#21487;&#20197;&#35843;&#24230;&#21040;&#20219;&#24847;&#30340;cpu&#19978;&#21435;&#12290;&#30001;&#20110;cache locality&#30340;&#21407;&#22240;&#65292;per cpu&#30340;&#32447;&#31243;&#27744;&#30340;&#24615;&#33021;&#20250;&#22909;&#19968;&#20123;&#65292;&#20294;&#26159;&#23545;power saving&#26377;&#19968;&#20123;&#24433;&#21709;&#12290;&#35774;&#35745;&#24448;&#24448;&#22914;&#27492;&#65292;workqueue&#38656;&#35201;&#22312;performance&#21644;power saving&#20043;&#38388;&#24179;&#34913;&#65292;&#24819;&#35201;&#26356;&#22909;&#30340;&#24615;&#33021;&#65292;&#37027;&#20040;&#26368;&#22909;&#35753;&#19968;&#20010;cpu&#19978;&#30340;worker thread&#26469;&#22788;&#29702;work&#65292;&#36825;&#26679;&#30340;&#35805;&#65292;cache&#21629;&#20013;&#29575;&#20250;&#27604;&#36739;&#39640;&#65292;&#24615;&#33021;&#20250;&#26356;&#22909;&#12290;&#20294;&#26159;&#65292;&#20174;&#30005;&#28304;&#31649;&#29702;&#30340;&#35282;&#24230;&#26469;&#30475;&#65292;&#26368;&#22909;&#30340;&#31574;&#30053;&#26159;&#35753;idle&#29366;&#24577;&#30340;cpu&#23613;&#21487;&#33021;&#30340;&#20445;&#25345;idle&#65292;&#32780;&#19981;&#26159;&#21453;&#22797;idle&#65292;working&#65292;idle again&#12290; </P>
<P>&#25105;&#20204;&#26469;&#19968;&#20010;&#20363;&#23376;&#36741;&#21161;&#29702;&#35299;&#19978;&#38754;&#30340;&#20869;&#23481;&#12290;&#22312;t1&#26102;&#21051;&#65292;work&#34987;&#35843;&#24230;&#21040;CPU A&#19978;&#25191;&#34892;&#65292;t2&#26102;&#21051;work&#25191;&#34892;&#23436;&#27605;&#65292;CPU A&#36827;&#20837;idle&#65292;t3&#26102;&#21051;&#26377;&#19968;&#20010;&#26032;&#30340;work&#38656;&#35201;&#22788;&#29702;&#65292;&#36825;&#26102;&#20505;&#35843;&#24230;work&#21040;&#37027;&#20010;CPU&#20250;&#22909;&#20123;&#21602;&#65311;&#26159;&#22788;&#20110;working&#29366;&#24577;&#30340;CPU B&#36824;&#26159;&#22788;&#20110;idle&#29366;&#24577;&#30340;CPU A&#21602;&#65311;&#22914;&#26524;&#35843;&#24230;&#21040;CPU A&#19978;&#36816;&#34892;&#65292;&#37027;&#20040;&#65292;&#30001;&#20110;&#20043;&#21069;&#22788;&#29702;&#36807;work&#65292;&#20854;cache&#20869;&#23481;&#26032;&#40092;&#28909;&#36771;&#65292;&#22788;&#29702;&#36215;work&#24403;&#28982;&#26159;&#24471;&#24515;&#24212;&#25163;&#65292;&#36895;&#24230;&#24456;&#24555;&#65292;&#20294;&#26159;&#65292;&#36825;&#38656;&#35201;&#23558;CPU A&#20174;idle&#29366;&#24577;&#20013;&#21796;&#37266;&#12290;&#36873;&#25321;CPU B&#21602;&#23601;&#19981;&#23384;&#22312;&#23558;CPU &#20174;idle&#29366;&#24577;&#21796;&#37266;&#65292;&#20174;&#32780;&#33719;&#21462;power saving&#26041;&#38754;&#30340;&#22909;&#22788;&#12290; </P>
<P>&#20102;&#35299;&#20102;&#19978;&#38754;&#30340;&#22522;&#30784;&#20869;&#23481;&#20043;&#21518;&#65292;&#25105;&#20204;&#20877;&#26469;&#26816;&#35270;per cpu thread pool&#21644;unbound thread pool&#12290;&#24403;workqueue&#25910;&#21040;&#19968;&#20010;&#35201;&#22788;&#29702;&#30340;work&#65292;&#22914;&#26524;&#35813;workqueue&#26159;unbound&#31867;&#22411;&#30340;&#35805;&#65292;&#37027;&#20040;&#35813;work&#30001;unbound thread pool&#22788;&#29702;&#24182;&#25226;&#35843;&#24230;&#35813;work&#21435;&#21738;&#19968;&#20010;CPU&#25191;&#34892;&#36825;&#26679;&#30340;&#31574;&#30053;&#20132;&#32473;&#31995;&#32479;&#30340;&#35843;&#24230;&#22120;&#27169;&#22359;&#26469;&#23436;&#25104;&#65292;&#23545;&#20110;scheduler&#32780;&#35328;&#65292;&#23427;&#20250;&#32771;&#34385;CPU core&#30340;idle&#29366;&#24577;&#65292;&#20174;&#32780;&#23613;&#21487;&#33021;&#30340;&#35753;CPU&#20445;&#25345;&#22312;idle&#29366;&#24577;&#65292;&#20174;&#32780;&#33410;&#30465;&#20102;&#21151;&#32791;&#12290;&#22240;&#27492;&#65292;&#22914;&#26524;&#19968;&#20010;workqueue&#26377;WQ_UNBOUND&#36825;&#26679;&#30340;flag&#65292;&#21017;&#35828;&#26126;&#35813;workqueue&#19978;&#25346;&#20837;&#30340;work&#22788;&#29702;&#26159;&#32771;&#34385;&#21040;power saving&#30340;&#12290;&#22914;&#26524;workqueue&#27809;&#26377;WQ_UNBOUND flag&#65292;&#21017;&#35828;&#26126;&#35813;workqueue&#26159;per cpu&#30340;&#65292;&#36825;&#26102;&#20505;&#65292;&#35843;&#24230;&#21738;&#19968;&#20010;CPU core&#36816;&#34892;worker thread&#26469;&#22788;&#29702;work&#24050;&#32463;&#19981;&#26159;scheduler&#21487;&#20197;&#25511;&#21046;&#30340;&#20102;&#65292;&#36825;&#26679;&#65292;&#20063;&#23601;&#38388;&#25509;&#24433;&#21709;&#20102;&#21151;&#32791;&#12290; </P>
<P>&#26377;&#20004;&#20010;&#21442;&#25968;&#21487;&#20197;&#25511;&#21046;workqueue&#22312;performance&#21644;power saving&#20043;&#38388;&#30340;&#24179;&#34913;&#65306; </P>
<P>1&#12289;&#21508;&#20010;workqueue&#38656;&#35201;&#36890;&#36807;WQ_POWER_EFFICIENT&#26469;&#26631;&#35760;&#33258;&#24049;&#22312;&#21151;&#32791;&#26041;&#38754;&#30340;&#23646;&#24615; </P>
<P>2&#12289;&#31995;&#32479;&#32423;&#21035;&#30340;&#20869;&#26680;&#21442;&#25968;workqueue.power_efficient&#12290; </P>
<P>&#20351;&#29992;workqueue&#30340;&#29992;&#25143;&#30693;&#36947;&#33258;&#24049;&#22312;&#30005;&#28304;&#31649;&#29702;&#26041;&#38754;&#30340;&#29305;&#28857;&#65292;&#22914;&#26524;&#35813;workqueue&#22312;unbound&#30340;&#26102;&#20505;&#20250;&#26497;&#22823;&#30340;&#38477;&#20302;&#21151;&#32791;&#65292;&#37027;&#20040;&#23601;&#38656;&#35201;&#21152;&#19978;WQ_POWER_EFFICIENT&#30340;&#26631;&#35760;&#12290;&#36825;&#26102;&#20505;&#65292;&#22914;&#26524;&#27809;&#26377;&#26631;&#35760;WQ_UNBOUND&#65292;&#37027;&#20040;&#32570;&#30465;workqueue&#20250;&#21019;&#24314;per cpu thread pool&#26469;&#22788;&#29702;work&#12290;&#19981;&#36807;&#65292;&#20063;&#21487;&#20197;&#36890;&#36807;workqueue.power_efficient&#36825;&#20010;&#20869;&#26680;&#21442;&#25968;&#26469;&#20462;&#25913;workqueue&#30340;&#34892;&#20026;&#65306; </P>
<BLOCKQUOTE>
<P>#ifdef CONFIG_WQ_POWER_EFFICIENT_DEFAULT <BR>static bool wq_power_efficient = true; <BR>#else <BR>static bool wq_power_efficient; <BR>#endif </P>
<P>module_param_named(power_efficient, wq_power_efficient, bool, 0444); </P></BLOCKQUOTE>
<P>&#22914;&#26524;wq_power_efficient&#35774;&#23450;&#20026;true&#65292;&#37027;&#20040;WQ_POWER_EFFICIENT&#30340;&#26631;&#35760;&#30340;workqueue&#23601;&#20250;&#24378;&#21046;&#25353;&#29031;unbound workqueue&#26469;&#22788;&#29702;&#65292;&#21363;&#20351;&#27809;&#26377;&#26631;&#35760;WQ_UNBOUND&#12290; </P>
<P>&nbsp; </P>
<P>&#19977;&#12289;&#20998;&#37197;workqueue&#30340;&#20869;&#23384; </P>
<BLOCKQUOTE>
<P>if (flags &amp; WQ_UNBOUND) <BR>&nbsp;&nbsp;&nbsp; tbl_size = nr_node_ids * sizeof(wq-&gt;numa_pwq_tbl[0]); &#65293;&#65293;&#65293;only for unbound workqueue </P>
<P>wq = kzalloc(sizeof(*wq) + tbl_size, GFP_KERNEL); </P>
<P>if (flags &amp; WQ_UNBOUND) { <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wq-&gt;unbound_attrs = alloc_workqueue_attrs(GFP_KERNEL); &#65293;&#65293;only for unbound workqueue <BR>&nbsp;&nbsp;&nbsp; } </P></BLOCKQUOTE>
<P>&#20195;&#30721;&#24456;&#31616;&#21333;&#65292;&#19982;&#20854;&#35201;&#35299;&#37322;&#20195;&#30721;&#65292;&#19981;&#22914;&#26469;&#35299;&#37322;&#19968;&#20123;&#22522;&#26412;&#27010;&#24565;&#12290; </P>
<P>1&#12289;workqueue&#21644;pool workqueue&#30340;&#20851;&#31995; </P>
<P>&#25105;&#20204;&#20808;&#32473;&#20986;&#19968;&#20010;&#31616;&#21270;&#29256;&#26412;&#30340;workqueue_struct&#23450;&#20041;&#65292;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>struct workqueue_struct { <BR>&nbsp;&nbsp;&nbsp; struct list_head&nbsp;&nbsp;&nbsp; pwqs;&nbsp; <BR>&nbsp;&nbsp;&nbsp; struct list_head&nbsp;&nbsp;&nbsp; list; </P>
<P><BR>&nbsp;&nbsp;&nbsp; struct pool_workqueue __percpu *cpu_pwqs;&nbsp; &#65293;&#65293;&#65293;&#65293;&#65293;&#25351;&#21521;per cpu&#30340;pool workqueue <BR>&nbsp;&nbsp;&nbsp; struct pool_workqueue __rcu *numa_pwq_tbl[]; &#65293;&#65293;&#65293;&#65293;&#25351;&#21521;per node&#30340;pool workqueue <BR>}; </P></BLOCKQUOTE>
<P>&#36825;&#37324;&#28041;&#21450;2&#20010;&#25968;&#25454;&#32467;&#26500;&#65306;workqueue_struct&#21644;pool_workqueue&#65292;&#20026;&#20309;&#22914;&#27492;&#22788;&#29702;&#21602;&#65311;&#25105;&#20204;&#30693;&#36947;&#65292;&#22312;CMWQ&#20013;&#65292;workqueue&#21644;thread pool&#27809;&#26377;&#20005;&#26684;&#30340;&#19968;&#19968;&#23545;&#24212;&#20851;&#31995;&#20102;&#65292;&#22240;&#27492;&#65292;&#31995;&#32479;&#20013;&#30340;workqueue&#20204;&#20849;&#20139;&#19968;&#32452;thread pool&#65292;&#22240;&#27492;&#65292;workqueue&#20013;&#30340;&#25104;&#21592;&#21253;&#25324;&#20004;&#20010;&#31867;&#21035;&#65306;global&#31867;&#22411;&#21644;per thread pool&#31867;&#22411;&#30340;&#65292;&#25105;&#20204;&#25226;&#37027;&#20123;per thread pool&#31867;&#22411;&#30340;&#25968;&#25454;&#38598;&#21512;&#36215;&#26469;&#23601;&#24418;&#25104;&#20102;pool_workqueue&#30340;&#23450;&#20041;&#12290; </P>
<P>&#25346;&#20837;workqueue&#30340;work&#32456;&#31350;&#38656;&#35201;worker pool&#20013;&#30340;&#26576;&#20010;worker thread&#26469;&#22788;&#29702;&#65292;&#20063;&#23601;&#26159;&#35828;&#65292;workqueue&#35201;&#21644;&#31995;&#32479;&#20013;&#37027;&#20123;&#20849;&#20139;&#30340;worker thread pool&#36827;&#34892;&#36830;&#25509;&#65292;&#36825;&#26159;&#36890;&#36807;pool_workqueue&#65288;&#35813;&#25968;&#25454;&#32467;&#26500;&#20250;&#21253;&#21547;&#19968;&#20010;&#25351;&#21521;worker pool&#30340;&#25351;&#38024;&#65289;&#30340;&#25968;&#25454;&#32467;&#26500;&#26469;&#31649;&#29702;&#30340;&#12290;&#21644;&#36825;&#20010;workqueue&#30456;&#20851;&#30340;pool_workqueue&#34987;&#25346;&#20837;&#19968;&#20010;&#38142;&#34920;&#65292;&#38142;&#34920;&#22836;&#23601;&#26159;workqueue_struct&#20013;&#30340;pwqs&#25104;&#21592;&#12290; </P>
<P>&#21644;&#26087;&#30340;workqueue&#26426;&#21046;&#19968;&#26679;&#65292;&#31995;&#32479;&#32500;&#25252;&#20102;&#19968;&#20010;&#25152;&#26377;workqueue&#30340;list&#65292;list head&#23450;&#20041;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>static LIST_HEAD(workqueues); </P></BLOCKQUOTE>
<P>workqueue_struct&#20013;&#30340;list&#25104;&#21592;&#23601;&#26159;&#25346;&#20837;&#36825;&#20010;&#38142;&#34920;&#30340;&#33410;&#28857;&#12290; </P>
<P>workqueue&#26377;&#20004;&#31181;&#65306;unbound workqueue&#21644;per cpu workqueue&#12290;&#23545;&#20110;per cpu&#31867;&#22411;&#65292;cpu_pwqs&#25351;&#21521;&#20102;&#19968;&#32452;per cpu&#30340;pool_workqueue&#25968;&#25454;&#32467;&#26500;&#65292;&#29992;&#26469;&#32500;&#25252;workqueue&#21644;per cpu thread pool&#20043;&#38388;&#30340;&#20851;&#31995;&#12290;&#27599;&#20010;cpu&#37117;&#26377;&#20004;&#20010;thread pool&#65292;normal&#21644;&#39640;&#20248;&#20808;&#32423;&#30340;&#32447;&#31243;&#27744;&#65292;&#21040;&#24213;cpu_pwqs&#25351;&#21521;&#21738;&#19968;&#20010;pool_workqueue&#65288;worker thread&#65289;&#26159;&#21644;workqueue&#30340;flag&#30456;&#20851;&#65292;&#22914;&#26524;&#26631;&#26377;WQ_HIGHPRI&#65292;&#37027;&#20040;cpu_pwqs&#25351;&#21521;&#39640;&#20248;&#20808;&#32423;&#30340;&#32447;&#31243;&#27744;&#12290;unbound workqueue&#23545;&#24212;&#30340;pool_workqueue&#21644;workqueue&#23646;&#24615;&#30456;&#20851;&#65292;&#25105;&#20204;&#22312;&#19979;&#19968;&#33410;&#25551;&#36848;&#12290; </P>
<P>2&#12289;workqueue attribute </P>
<P>&#25346;&#20837;workqueue&#30340;work&#32456;&#31350;&#26159;&#38656;&#35201;worker&#32447;&#31243;&#26469;&#22788;&#29702;&#65292;&#38024;&#23545;worker&#32447;&#31243;&#26377;&#19979;&#38754;&#20960;&#20010;&#32771;&#37327;&#28857;&#65288;&#25105;&#20204;&#31216;&#20043;attribute&#65289;&#65306; </P>
<P>&#65288;1&#65289;&#35813;worker&#32447;&#31243;&#30340;&#20248;&#20808;&#32423; </P>
<P>&#65288;2&#65289;&#35813;worker&#32447;&#31243;&#36816;&#34892;&#22312;&#21738;&#19968;&#20010;CPU&#19978; </P>
<P>&#65288;3&#65289;&#22914;&#26524;worker&#32447;&#31243;&#21487;&#20197;&#36816;&#34892;&#22312;&#22810;&#20010;CPU&#19978;&#65292;&#19988;&#36825;&#20123;CPU&#23646;&#20110;&#19981;&#21516;&#30340;NUMA node&#65292;&#37027;&#20040;&#26159;&#21542;&#22312;&#25152;&#26377;&#30340;NUMA node&#20013;&#37117;&#21487;&#20197;&#33719;&#21462;&#33391;&#22909;&#30340;&#24615;&#33021;&#12290; </P>
<P>&#23545;&#20110;per-CPU&#30340;workqueue&#65292;2&#21644;3&#19981;&#23384;&#22312;&#38382;&#39064;&#65292;&#21738;&#20010;cpu&#19978;queue&#30340;work&#23601;&#22312;&#21738;&#20010;cpu&#19978;&#25191;&#34892;&#65292;&#30001;&#20110;&#21482;&#33021;&#22312;&#19968;&#20010;&#30830;&#23450;&#30340;cpu&#19978;&#25191;&#34892;&#65292;&#22240;&#27492;&#36215;NUMA&#30340;node&#20063;&#26159;&#30830;&#23450;&#30340;&#65288;&#19968;&#20010;CPU&#19981;&#21487;&#33021;&#23646;&#20110;&#20004;&#20010;NUMA node&#65289;&#12290;&#32622;&#20110;&#20248;&#20808;&#32423;&#65292;per-CPU&#30340;workqueue&#20351;&#29992;WQ_HIGHPRI&#26469;&#26631;&#35760;&#12290;&#32508;&#19978;&#25152;&#36848;&#65292;per-CPU&#30340;workqueue&#19981;&#38656;&#35201;&#21333;&#29420;&#23450;&#20041;&#19968;&#20010;workqueue attribute&#65292;&#36825;&#20063;&#26159;&#20026;&#20309;&#22312;workqueue_struct&#20013;&#21482;&#26377;unbound_attrs&#36825;&#20010;&#25104;&#21592;&#26469;&#35760;&#24405;unbound workqueue&#30340;&#23646;&#24615;&#12290; </P>
<P>unbound workqueue&#30001;&#20110;&#19981;&#32465;&#23450;&#22312;&#20855;&#20307;&#30340;cpu&#19978;&#65292;&#21487;&#20197;&#36816;&#34892;&#22312;&#31995;&#32479;&#20013;&#30340;&#20219;&#20309;&#19968;&#20010;cpu&#65292;&#30452;&#35273;&#19978;&#20284;&#20046;&#31995;&#32479;&#20013;&#26377;&#19968;&#20010;unbound thread pool&#23601;OK&#20102;&#65292;&#19981;&#36807;&#35753;&#19968;&#20010;thread pool&#21019;&#24314;&#22810;&#31181;&#23646;&#24615;&#30340;worker&#32447;&#31243;&#26159;&#19968;&#20010;&#22909;&#30340;&#35774;&#35745;&#21527;&#65311;&#26412;&#36136;&#19978;&#65292;thread pool&#24212;&#35813;&#21019;&#24314;&#23646;&#24615;&#19968;&#26679;&#30340;worker thread&#12290;&#22240;&#27492;&#65292;&#25105;&#20204;&#36890;&#36807;workqueue&#23646;&#24615;&#26469;&#23545;unbound workqueue&#36827;&#34892;&#20998;&#31867;&#65292;workqueue&#23646;&#24615;&#23450;&#20041;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>struct workqueue_attrs { <BR>&nbsp;&nbsp;&nbsp; int&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nice;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* nice level */ <BR>&nbsp;&nbsp;&nbsp; cpumask_var_t&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cpumask;&nbsp;&nbsp;&nbsp; /* allowed CPUs */ <BR>&nbsp;&nbsp;&nbsp; bool&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; no_numa;&nbsp;&nbsp;&nbsp; /* disable NUMA affinity */ <BR>}; </P></BLOCKQUOTE>
<P>nice&#26159;&#19968;&#20010;&#21644;thread&#20248;&#20808;&#32423;&#30456;&#20851;&#30340;&#23646;&#24615;&#65292;nice&#36234;&#20302;&#21017;&#20248;&#20808;&#32423;&#36234;&#39640;&#12290;cpumask&#26159;&#35813;workqueue&#25346;&#20837;&#30340;work&#20801;&#35768;&#22312;&#21738;&#20123;cpu&#19978;&#36816;&#34892;&#12290;no_numa&#26159;&#19968;&#20010;&#21644;NUMA affinity&#30456;&#20851;&#30340;&#35774;&#23450;&#12290; </P>
<P>3&#12289;unbound workqueue&#21644;NUMA&#20043;&#38388;&#30340;&#32852;&#31995; </P>
<P>UMA&#31995;&#32479;&#20013;&#65292;&#25152;&#26377;&#30340;processor&#30475;&#21040;&#30340;&#20869;&#23384;&#37117;&#26159;&#19968;&#26679;&#30340;&#65292;&#35775;&#38382;&#36895;&#24230;&#20063;&#26159;&#19968;&#26679;&#65292;&#26080;&#25152;&#35859;local or remote&#65292;&#22240;&#27492;&#65292;&#20869;&#26680;&#32447;&#31243;&#22914;&#26524;&#35201;&#20998;&#37197;&#20869;&#23384;&#65292;&#37027;&#20040;&#20063;&#26159;&#26080;&#25152;&#35859;&#65292;&#32479;&#19968;&#23433;&#25490;&#21363;&#21487;&#12290;&#22312;NUMA&#31995;&#32479;&#20013;&#65292;&#19981;&#21516;&#30340;&#19968;&#20010;&#25110;&#32773;&#19968;&#32452;cpu&#30475;&#21040;&#30340;memory&#26159;&#19981;&#19968;&#26679;&#30340;&#65292;&#25105;&#20204;&#20551;&#35774;node 0&#20013;&#26377;CPU A&#21644;B&#65292;node 1&#20013;&#26377;CPU C&#21644;D&#65292;&#22914;&#26524;&#36816;&#34892;&#22312;CPU A&#19978;&#20869;&#26680;&#32447;&#31243;&#29616;&#22312;&#35201;&#36801;&#31227;&#21040;CPU C&#19978;&#30340;&#26102;&#20505;&#65292;&#24754;&#21095;&#21457;&#29983;&#20102;&#65306;&#35813;&#32447;&#31243;&#22312;A CPU&#21019;&#24314;&#24182;&#36816;&#34892;&#30340;&#26102;&#20505;&#65292;&#20998;&#37197;&#30340;&#20869;&#23384;&#26159;node 0&#20013;&#30340;memory&#65292;&#36825;&#20123;memory&#26159;local&#30340;&#35775;&#38382;&#36895;&#24230;&#24456;&#24555;&#65292;&#24403;&#36801;&#31227;&#21040;CPU C&#19978;&#30340;&#26102;&#20505;&#65292;&#21407;&#26469;local memory&#21464;&#25104;remote&#65292;&#24615;&#33021;&#22823;&#22823;&#38477;&#20302;&#12290;&#22240;&#27492;&#65292;unbound workqueue&#38656;&#35201;&#24341;&#20837;NUMA&#30340;&#32771;&#37327;&#28857;&#12290; </P>
<P>NUMA&#26159;&#20869;&#23384;&#31649;&#29702;&#30340;&#33539;&#30068;&#65292;&#26412;&#25991;&#19981;&#20250;&#28145;&#20837;&#25551;&#36848;&#65292;&#25105;&#20204;&#26242;&#19988;&#25918;&#24320;NUMA&#65292;&#20808;&#24605;&#32771;&#36825;&#26679;&#30340;&#19968;&#20010;&#38382;&#39064;&#65306;&#19968;&#20010;&#30830;&#23450;&#23646;&#24615;&#30340;unbound workqueue&#38656;&#35201;&#20960;&#20010;&#32447;&#31243;&#27744;&#65311;&#30475;&#36215;&#26469;&#19968;&#20010;&#23601;&#22815;&#20102;&#65292;&#27605;&#31455;workqueue&#30340;&#23646;&#24615;&#24050;&#32463;&#30830;&#23450;&#20102;&#65292;&#19968;&#20010;&#32447;&#31243;&#27744;&#21019;&#24314;&#30456;&#21516;&#23646;&#24615;&#30340;worker thread&#23601;&#34892;&#20102;&#12290;&#20294;&#26159;&#25105;&#20204;&#26469;&#30475;&#19968;&#20010;&#20363;&#23376;&#65306;&#20551;&#35774;workqueue&#30340;work&#26159;&#21487;&#20197;&#22312;node 0&#20013;&#30340;CPU A&#21644;B&#65292;&#20197;&#21450;node 1&#20013;CPU C&#21644;D&#19978;&#22788;&#29702;&#65292;&#22914;&#26524;&#21482;&#26377;&#19968;&#20010;thread pool&#65292;&#37027;&#20040;&#23601;&#20250;&#23384;&#22312;worker thread&#22312;&#19981;&#21516;node&#20043;&#38388;&#30340;&#36801;&#31227;&#38382;&#39064;&#12290;&#20026;&#20102;&#35299;&#20915;&#36825;&#20010;&#38382;&#39064;&#65292;&#23454;&#38469;&#19978;unbound workqueue&#23454;&#38469;&#19978;&#26159;&#21019;&#24314;&#20102;per node&#30340;pool_workqueue&#65288;thread pool&#65289; </P>
<P>&#24403;&#28982;&#65292;&#26159;&#21542;&#20351;&#29992;per node&#30340;pool workqueue&#29992;&#25143;&#26159;&#21487;&#20197;&#36890;&#36807;&#19979;&#38754;&#30340;&#21442;&#25968;&#36827;&#34892;&#35774;&#23450;&#30340;&#65306; </P>
<P>&#65288;1&#65289;workqueue attribute&#20013;&#30340;no_numa&#25104;&#21592; </P>
<P>&#65288;2&#65289;&#36890;&#36807;workqueue.disable_numa&#36825;&#20010;&#21442;&#25968;&#65292;disable&#25152;&#26377;workqueue&#30340;numa affinity&#30340;&#25903;&#25345;&#12290; </P>
<BLOCKQUOTE>
<P>static bool wq_disable_numa; <BR>module_param_named(disable_numa, wq_disable_numa, bool, 0444); </P></BLOCKQUOTE>
<P>&nbsp; </P>
<P>&#22235;&#12289;&#21021;&#22987;&#21270;workqueue&#30340;&#25104;&#21592; </P>
<BLOCKQUOTE>
<P>va_start(args, lock_name); <BR>vsnprintf(wq-&gt;name, sizeof(wq-&gt;name), fmt, args);&#65293;&#65293;&#65293;&#65293;&#65293;set workqueue name <BR>va_end(args); </P>
<P>max_active = max_active ?: WQ_DFL_ACTIVE; <BR>max_active = wq_clamp_max_active(max_active, flags, wq-&gt;name); <BR>wq-&gt;flags = flags; <BR>wq-&gt;saved_max_active = max_active; <BR>mutex_init(&amp;wq-&gt;mutex); <BR>atomic_set(&amp;wq-&gt;nr_pwqs_to_flush, 0); <BR>INIT_LIST_HEAD(&amp;wq-&gt;pwqs); <BR>INIT_LIST_HEAD(&amp;wq-&gt;flusher_queue); <BR>INIT_LIST_HEAD(&amp;wq-&gt;flusher_overflow); <BR>INIT_LIST_HEAD(&amp;wq-&gt;maydays); </P>
<P>lockdep_init_map(&amp;wq-&gt;lockdep_map, lock_name, key, 0); <BR>INIT_LIST_HEAD(&amp;wq-&gt;list); </P></BLOCKQUOTE>
<P>&#38500;&#20102;max active&#65292;&#27809;&#26377;&#20160;&#20040;&#35201;&#35828;&#30340;&#65292;&#20195;&#30721;&#37117;&#31616;&#21333;&#32780;&#19988;&#30452;&#35266;&#12290;&#22914;&#26524;&#29992;&#25143;&#27809;&#26377;&#35774;&#23450;max active&#65288;&#25110;&#32773;&#35828;max active&#31561;&#20110;0&#65289;&#65292;&#37027;&#20040;&#31995;&#32479;&#20250;&#32473;&#20986;&#19968;&#20010;&#32570;&#30465;&#30340;&#35774;&#23450;&#12290;&#31995;&#32479;&#23450;&#20041;&#20102;&#20004;&#20010;&#26368;&#22823;&#20540;WQ_MAX_ACTIVE&#65288;512&#65289;&#21644;WQ_UNBOUND_MAX_ACTIVE&#65288;&#21644;cpu&#25968;&#30446;&#26377;&#20851;&#65292;&#26368;&#22823;&#20540;&#26159;cpu&#25968;&#30446;&#20056;&#20197;4&#65292;&#24403;&#28982;&#20063;&#19981;&#33021;&#22823;&#20110;WQ_MAX_ACTIVE&#65289;&#65292;&#20998;&#21035;&#38480;&#23450;per cpu workqueue&#21644;unbound workqueue&#30340;&#26368;&#22823;&#21487;&#20197;&#21019;&#24314;&#30340;worker thread&#30340;&#25968;&#30446;&#12290;wq_clamp_max_active&#21487;&#20197;&#23558;max active&#38480;&#21046;&#22312;&#19968;&#20010;&#30830;&#23450;&#30340;&#33539;&#22260;&#20869;&#12290; </P>
<P>&nbsp; </P>
<P>&#20116;&#12289;&#20998;&#37197;pool workqueue&#30340;&#20869;&#23384;&#24182;&#24314;&#31435;workqueue&#21644;pool workqueue&#30340;&#20851;&#31995; </P>
<P>&#36825;&#37096;&#20998;&#30340;&#20195;&#30721;&#20027;&#35201;&#28041;&#21450;alloc_and_link_pwqs&#20989;&#25968;&#65292;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>static int alloc_and_link_pwqs(struct workqueue_struct *wq) <BR>{ <BR>&nbsp;&nbsp;&nbsp; bool highpri = wq-&gt;flags &amp; WQ_HIGHPRI;&#65293;&#65293;&#65293;&#65293;normal or high priority&#65311; <BR>&nbsp;&nbsp;&nbsp; int cpu, ret; </P>
<P>&nbsp;&nbsp;&nbsp; if (!(wq-&gt;flags &amp; WQ_UNBOUND)) {&#65293;&#65293;&#65293;&#65293;&#65293;per cpu workqueue&#30340;&#22788;&#29702; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wq-&gt;cpu_pwqs = alloc_percpu(struct pool_workqueue); </P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for_each_possible_cpu(cpu) {&#65293;&#65293;&#65293;&#65293;&#65293;&#36880;&#20010;cpu&#36827;&#34892;&#35774;&#23450; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct pool_workqueue *pwq =&nbsp;&nbsp;&nbsp; per_cpu_ptr(wq-&gt;cpu_pwqs, cpu); <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct worker_pool *cpu_pools = per_cpu(cpu_worker_pools, cpu); </P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; init_pwq(pwq, wq, &amp;cpu_pools[highpri]);&nbsp; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; link_pwq(pwq);&#65293;&#65293;&#65293;&#65293;&#19978;&#38754;&#20004;&#34892;&#20195;&#30721;&#29992;&#26469;&#24314;&#31435;workqueue&#12289;pool wq&#21644;thread pool&#20043;&#38388;&#30340;&#20851;&#31995; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return 0; <BR>&nbsp;&nbsp;&nbsp; } else if (wq-&gt;flags &amp; __WQ_ORDERED) {&#65293;&#65293;&#65293;&#65293;&#65293;ordered unbound workqueue&#30340;&#22788;&#29702; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ret = apply_workqueue_attrs(wq, ordered_wq_attrs[highpri]); <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ret; <BR>&nbsp;&nbsp;&nbsp; } else {&#65293;&#65293;&#65293;&#65293;&#65293;unbound workqueue&#30340;&#22788;&#29702; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return apply_workqueue_attrs(wq, unbound_std_wq_attrs[highpri]); <BR>&nbsp;&nbsp;&nbsp; } <BR>} </P></BLOCKQUOTE>
<P>&#36890;&#36807;alloc_percpu&#21487;&#20197;&#20026;&#27599;&#19968;&#20010;cpu&#20998;&#37197;&#19968;&#20010;pool_workqueue&#30340;memory&#12290;&#27599;&#20010;pool_workqueue&#37117;&#26377;&#19968;&#20010;&#23545;&#24212;&#30340;worker thread pool&#65292;&#23545;&#20110;per-CPU workqueue&#65292;&#23427;&#26159;&#38745;&#24577;&#23450;&#20041;&#30340;&#65292;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>static DEFINE_PER_CPU_SHARED_ALIGNED(struct worker_pool [NR_STD_WORKER_POOLS], <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cpu_worker_pools); </P></BLOCKQUOTE>
<P>init_pwq&#20989;&#25968;&#21021;&#22987;&#21270;pool_workqueue&#65292;&#26368;&#37325;&#35201;&#30340;&#26159;&#35774;&#23450;&#20854;&#23545;&#24212;&#30340;workqueue&#21644;worker pool&#12290;link_pwq&#20027;&#35201;&#26159;&#23558;pool_workqueue&#25346;&#20837;&#23427;&#25152;&#23646;&#30340;workqueue&#30340;&#38142;&#34920;&#20013;&#12290;&#23545;&#20110;unbound workqueue&#65292;apply_workqueue_attrs&#23436;&#25104;&#20998;&#37197;pool workqueue&#24182;&#24314;&#31435;workqueue&#21644;pool workqueue&#30340;&#20851;&#31995;&#12290; </P>
<P>&nbsp; </P>
<P>&#20845;&#12289;&#24212;&#29992;&#26032;&#30340;attribute&#21040;workqueue&#20013; </P>
<P>unbound workqueue&#26377;&#20004;&#31181;&#65292;&#19968;&#31181;&#26159;normal type&#65292;&#21478;&#22806;&#19968;&#31181;&#26159;ordered type&#65292;&#36825;&#31181;workqueue&#19978;&#30340;work&#26159;&#20005;&#26684;&#25353;&#29031;&#39034;&#24207;&#25191;&#34892;&#30340;&#65292;&#19981;&#23384;&#22312;&#24182;&#21457;&#38382;&#39064;&#12290;ordered unbound workqueue&#30340;&#34892;&#20026;&#31867;&#20284;&#36807;&#21435;&#30340;single thread workqueue&#12290;&#20294;&#26159;&#65292;&#26080;&#35770;&#37027;&#31181;&#31867;&#22411;&#30340;unbound workqueue&#37117;&#20351;&#29992;apply_workqueue_attrs&#26469;&#24314;&#31435;workqueue&#12289;pool wq&#21644;thread pool&#20043;&#38388;&#30340;&#20851;&#31995;&#12290; </P>
<P>1&#12289;&#20581;&#24247;&#26816;&#26597;&#12290; </P>
<BLOCKQUOTE>
<P>if (WARN_ON(!(wq-&gt;flags &amp; WQ_UNBOUND))) <BR>&nbsp;&nbsp;&nbsp; return -EINVAL; </P>
<P>if (WARN_ON((wq-&gt;flags &amp; __WQ_ORDERED) &amp;&amp; !list_empty(&amp;wq-&gt;pwqs))) <BR>&nbsp;&nbsp;&nbsp; return -EINVAL; </P></BLOCKQUOTE>
<P>&#21482;&#26377;unbound&#31867;&#22411;&#30340;workqueue&#25165;&#26377;attribute&#65292;&#25165;&#21487;&#20197;apply attributes&#12290;&#23545;&#20110;ordered&#31867;&#22411;&#30340;unbound workqueue&#65292;&#23646;&#20110;&#23427;&#30340;pool workqueue&#65288;worker thread pool&#65289;&#21482;&#33021;&#26377;&#19968;&#20010;&#65292;&#21542;&#21017;&#26080;&#27861;&#38480;&#21046;work&#26159;&#25353;&#29031;&#39034;&#24207;&#25191;&#34892;&#12290; </P>
<P>2&#12289;&#20998;&#37197;&#20869;&#23384;&#24182;&#21021;&#22987;&#21270; </P>
<BLOCKQUOTE>
<P>pwq_tbl = kzalloc(nr_node_ids * sizeof(pwq_tbl[0]), GFP_KERNEL); <BR>new_attrs = alloc_workqueue_attrs(GFP_KERNEL); <BR>tmp_attrs = alloc_workqueue_attrs(GFP_KERNEL); <BR>copy_workqueue_attrs(new_attrs, attrs); <BR>cpumask_and(new_attrs-&gt;cpumask, new_attrs-&gt;cpumask, cpu_possible_mask); <BR>copy_workqueue_attrs(tmp_attrs, new_attrs); </P></BLOCKQUOTE>
<P>pwq_tbl&#25968;&#32452;&#29992;&#26469;&#20445;&#23384;unbound workqueue&#21508;&#20010;node&#30340;pool workqueue&#30340;&#25351;&#38024;&#65292;new_attrs&#21644;tmp_attrs&#37117;&#26159;&#19968;&#20123;&#35745;&#31639;workqueue attribute&#30340;&#20013;&#38388;&#21464;&#37327;&#65292;&#24320;&#22987;&#30340;&#26102;&#20505;&#35774;&#23450;&#20026;&#29992;&#25143;&#20256;&#20837;&#30340;workqueue&#30340;attribute&#12290; </P>
<P>3&#12289;&#22914;&#20309;&#20026;unbound workqueue&#30340;pool workqueue&#23547;&#25214;&#23545;&#24212;&#30340;&#32447;&#31243;&#27744;&#65311; </P>
<P>&#20855;&#20307;&#30340;&#20195;&#30721;&#22312;get_unbound_pool&#20989;&#25968;&#20013;&#12290;&#26412;&#33410;&#19981;&#25551;&#36848;&#20855;&#20307;&#30340;&#20195;&#30721;&#65292;&#21482;&#35828;&#26126;&#22522;&#26412;&#21407;&#29702;&#65292;&#22823;&#23478;&#21487;&#20197;&#33258;&#34892;&#38405;&#35835;&#20195;&#30721;&#12290; </P>
<P>per cpu&#30340;workqueue&#30340;pool workqueue&#23545;&#24212;&#30340;&#32447;&#31243;&#27744;&#20063;&#26159;per cpu&#30340;&#65292;&#27599;&#20010;cpu&#26377;&#20004;&#20010;&#32447;&#31243;&#27744;&#65288;normal&#21644;high priority&#65289;&#65292;&#22240;&#27492;&#23558;pool workqueue&#21644;thread pool&#23545;&#24212;&#36215;&#26469;&#26159;&#38750;&#24120;&#31616;&#21333;&#30340;&#20107;&#24773;&#12290;&#23545;&#20110;unbound workqueue&#65292;&#23545;&#24212;&#20851;&#31995;&#27809;&#26377;&#37027;&#20040;&#30452;&#25509;&#65292;&#22914;&#26524;&#23646;&#24615;&#30456;&#21516;&#65292;&#22810;&#20010;unbound workqueue&#30340;pool workqueue&#21487;&#33021;&#23545;&#24212;&#19968;&#20010;thread pool&#12290; </P>
<P>&#31995;&#32479;&#20351;&#29992;&#21704;&#24076;&#34920;&#26469;&#20445;&#23384;&#25152;&#26377;&#30340;unbound worker thread pool&#65292;&#23450;&#20041;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>static DEFINE_HASHTABLE(unbound_pool_hash, UNBOUND_POOL_HASH_ORDER); </P></BLOCKQUOTE>
<P>&#22312;&#21019;&#24314;unbound workqueue&#30340;&#26102;&#20505;&#65292;pool workqueue&#23545;&#24212;&#30340;worker thread pool&#38656;&#35201;&#22312;&#36825;&#20010;&#21704;&#24076;&#34920;&#20013;&#25628;&#32034;&#65292;&#22914;&#26524;&#26377;&#30456;&#21516;&#23646;&#24615;&#30340;worker thread pool&#30340;&#35805;&#65292;&#37027;&#20040;&#23601;&#19981;&#38656;&#35201;&#21019;&#24314;&#26032;&#30340;&#32447;&#31243;&#27744;&#65292;&#20195;&#30721;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>hash_for_each_possible(unbound_pool_hash, pool, hash_node, hash) { <BR>&nbsp;&nbsp;&nbsp; if (wqattrs_equal(pool-&gt;attrs, attrs)) { &#65293;&#65293;&#65293;&#65293;&#26816;&#26597;&#23646;&#24615;&#26159;&#21542;&#30456;&#21516; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pool-&gt;refcnt++; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return pool; &#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#22312;&#21704;&#24076;&#34920;&#25214;&#21040;&#36866;&#21512;&#30340;unbound&#32447;&#31243;&#27744; <BR>&nbsp;&nbsp;&nbsp; } <BR>} </P></BLOCKQUOTE>
<P>&#22914;&#26524;&#27809;&#26377;&#30456;&#21516;&#23646;&#24615;&#30340;thread pool&#65292;&#37027;&#20040;&#38656;&#35201;&#21019;&#24314;&#19968;&#20010;&#24182;&#25346;&#20837;&#21704;&#24076;&#34920;&#12290; </P>
<P>4&#12289;&#32473;&#21508;&#20010;node&#20998;&#37197;pool workqueue&#24182;&#21021;&#22987;&#21270; </P>
<P>&#22312;&#36827;&#20837;&#20195;&#30721;&#20043;&#21069;&#65292;&#20808;&#20102;&#35299;&#19968;&#20123;&#22522;&#30784;&#30693;&#35782;&#12290;&#32570;&#30465;&#24773;&#20917;&#19979;&#65292;&#25346;&#20837;unbound workqueue&#30340;works&#26368;&#22909;&#26159;&#32771;&#34385;NUMA Affinity&#65292;&#36825;&#26679;&#21487;&#20197;&#33719;&#21462;&#26356;&#22909;&#30340;&#24615;&#33021;&#12290;&#24403;&#28982;&#65292;&#23454;&#38469;&#19978;&#29992;&#25143;&#21487;&#20197;&#36890;&#36807;workqueue.disable_numa&#36825;&#20010;&#20869;&#26680;&#21442;&#25968;&#26469;&#20851;&#38381;&#36825;&#20010;&#29305;&#24615;&#65292;&#36825;&#26102;&#20505;&#65292;&#31995;&#32479;&#38656;&#35201;&#19968;&#20010;default pool workqueue&#65288;workqueue_struct&#30340;dfl_pwq&#25104;&#21592;&#65289;&#65292;&#25152;&#26377;&#30340;per node&#30340;pool workqueue&#25351;&#38024;&#37117;&#26159;&#25191;&#34892;default pool workqueue&#12290; </P>
<P>workqueue.disable_numa&#26159;enable&#30340;&#24773;&#20917;&#19979;&#26159;&#21542;&#19981;&#38656;&#35201;default pool workqueue&#20102;&#21602;&#65311;&#20063;&#19981;&#26159;&#65292;&#25105;&#20204;&#20030;&#19968;&#20010;&#31616;&#21333;&#30340;&#20363;&#23376;&#65292;&#19968;&#20010;&#31995;&#32479;&#30340;&#26500;&#25104;&#26159;&#36825;&#26679;&#30340;&#65306;node 0&#20013;&#26377;CPU A&#21644;B&#65292;node 1&#20013;&#26377;CPU C&#21644;D&#65292;node 2&#20013;&#26377;CPU E&#21644;F&#65292;&#20551;&#35774;workqueue&#30340;attribute&#35268;&#23450;work&#21482;&#33021;&#22312;CPU A &#21644;C&#19978;&#36816;&#34892;&#65292;&#37027;&#20040;&#22312;node 0&#21644;node 1&#20013;&#21019;&#24314;&#33258;&#24049;&#30340;pool workqueue&#26159;ok&#30340;&#65292;&#27605;&#31455;node 0&#20013;&#26377;CPU A&#65292;node 1&#20013;&#26377;CPU C&#65292;&#35813;node&#21019;&#24314;&#30340;worker thread&#21487;&#20197;&#22312;A&#25110;&#32773;C&#19978;&#36816;&#34892;&#12290;&#20294;&#26159;&#23545;&#20110;node 2&#33410;&#28857;&#65292;&#27809;&#26377;&#20219;&#20309;&#30340;CPU&#20801;&#35768;&#22788;&#29702;&#35813;workqueue&#30340;work&#65292;&#22312;&#36825;&#31181;&#24773;&#20917;&#19979;&#65292;&#27809;&#26377;&#24517;&#35201;&#20026;node 2&#24314;&#31435;&#33258;&#24049;&#30340;pool workqueue&#65292;&#32780;&#26159;&#20351;&#29992;default pool workqueue&#12290; </P>
<P>OK&#65292;&#25105;&#20204;&#26469;&#30475;&#20195;&#30721;&#65306; </P>
<BLOCKQUOTE>
<P>dfl_pwq = alloc_unbound_pwq(wq, new_attrs); &#65293;&#65293;&#65293;&#65293;&#65293;&#20998;&#37197;default pool workqueue </P>
<P>for_each_node(node) { &#65293;&#65293;&#65293;&#65293;&#36941;&#21382;node <BR>&nbsp;&nbsp;&nbsp; if (wq_calc_node_cpumask(attrs, node, -1, tmp_attrs-&gt;cpumask)) { &#65293;&#65293;&#65293;&#26159;&#21542;&#20351;&#29992;default pool wq <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pwq_tbl[node] = alloc_unbound_pwq(wq, tmp_attrs); &#65293;&#65293;&#65293;&#35813;node&#20351;&#29992;&#33258;&#24049;&#30340;pool wq <BR>&nbsp;&nbsp;&nbsp; } else { <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dfl_pwq-&gt;refcnt++; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pwq_tbl[node] = dfl_pwq; &#65293;&#65293;&#65293;&#65293;&#35813;node&#20351;&#29992;default pool wq <BR>&nbsp;&nbsp;&nbsp; } <BR>} </P></BLOCKQUOTE>
<P>&#20540;&#24471;&#19968;&#25552;&#30340;&#26159;wq_calc_node_cpumask&#36825;&#20010;&#20989;&#25968;&#65292;&#36825;&#20010;&#20989;&#25968;&#20250;&#26681;&#25454;&#35813;node&#30340;cpu&#24773;&#20917;&#20197;&#21450;workqueue attribute&#20013;&#30340;cpumask&#25104;&#21592;&#26469;&#26356;&#26032;tmp_attrs-&gt;cpumask&#65292;&#22240;&#27492;&#65292;&#22312;pwq_tbl[node] = alloc_unbound_pwq(wq, tmp_attrs); &#36825;&#34892;&#20195;&#30721;&#20013;&#65292;&#20026;&#35813;node&#20998;&#37197;pool workqueue&#23545;&#24212;&#30340;&#32447;&#31243;&#27744;&#30340;&#26102;&#20505;&#65292;&#21435;&#25481;&#20102;&#26412;node&#20013;&#19981;&#23384;&#22312;&#30340;cpu&#12290;&#20363;&#22914;node 0&#20013;&#26377;CPU A&#21644;B&#65292;workqueue&#30340;attribute&#35268;&#23450;work&#21482;&#33021;&#22312;CPU A &#21644;C&#19978;&#36816;&#34892;&#65292;&#37027;&#20040;&#21019;&#24314;node 0&#19978;&#30340;pool workqueue&#20197;&#21450;&#23545;&#24212;&#30340;worker thread pool&#30340;&#26102;&#20505;&#65292;&#38656;&#35201;&#21024;&#38500;CPU C&#65292;&#20063;&#23601;&#26159;&#35828;&#65292;node 0&#19978;&#30340;&#32447;&#31243;&#27744;&#30340;&#23646;&#24615;&#20013;&#30340;cpumask&#20165;&#20165;&#25903;&#25345;CPU A&#20102;&#12290; </P>
<P>5&#12289;&#23433;&#35013; </P>
<P>&#25152;&#26377;&#30340;node&#30340;pool workqueue&#21450;&#20854;worker thread pool&#24050;&#32463;ready&#65292;&#38656;&#35201;&#23433;&#35013;&#21040;workqueue&#20013;&#20102;&#65306; </P>
<BLOCKQUOTE>
<P>for_each_node(node) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pwq_tbl[node] = numa_pwq_tbl_install(wq, node, pwq_tbl[node]);&nbsp; <BR>&nbsp;&nbsp;&nbsp; link_pwq(dfl_pwq); <BR>&nbsp;&nbsp;&nbsp; swap(wq-&gt;dfl_pwq, dfl_pwq); </P></BLOCKQUOTE>
<P>&#20195;&#30721;&#38750;&#24120;&#31616;&#21333;&#65292;&#36825;&#37324;&#23601;&#19981;&#32454;&#36848;&#20102;&#12290;