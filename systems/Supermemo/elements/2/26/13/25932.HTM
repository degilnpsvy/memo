<H2>Concurrency Managed Workqueue&#20043;&#65288;&#22235;&#65289;&#65306;workqueue&#22914;&#20309;&#22788;&#29702;work</H2>
<P class=date>&#20316;&#32773;&#65306;<A href="http://www.wowotech.net/author/3">linuxer</A> &#21457;&#24067;&#20110;&#65306;2015-8-17 19:41 &#20998;&#31867;&#65306;<A href="http://www.wowotech.net/sort/irq_subsystem">&#20013;&#26029;&#23376;&#31995;&#32479;</A> </P>
<P>&#19968;&#12289;&#21069;&#35328; </P>
<P>&#26412;&#25991;&#20027;&#35201;&#35762;&#36848;&#19979;&#38754;&#20004;&#37096;&#20998;&#30340;&#20869;&#23481;&#65306; </P>
<P>1&#12289;&#23558;work&#25346;&#20837;workqueue&#30340;&#22788;&#29702;&#36807;&#31243; </P>
<P>2&#12289;&#22914;&#20309;&#22788;&#29702;&#25346;&#20837;workqueue&#30340;work </P>
<P>&nbsp; </P>
<P>&#20108;&#12289;&#29992;&#25143;&#23558;&#19968;&#20010;work&#25346;&#20837;workqueue </P>
<P>1&#12289;queue_work_on&#20989;&#25968; </P>
<P>&#20351;&#29992;workqueue&#26426;&#21046;&#30340;&#27169;&#22359;&#21487;&#20197;&#35843;&#29992;queue_work_on&#65288;&#26377;&#20854;&#20182;&#21464;&#31181;&#30340;&#25509;&#21475;&#65292;&#36825;&#37324;&#30053;&#36807;&#65292;&#20854;&#23454;&#24605;&#36335;&#26159;&#19968;&#33268;&#30340;&#65289;&#23558;&#19968;&#20010;&#23450;&#20041;&#22909;&#30340;work&#25346;&#20837;workqueue&#65292;&#20855;&#20307;&#20195;&#30721;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>bool queue_work_on(int cpu, struct workqueue_struct *wq, struct work_struct *work) <BR>{ <BR>&nbsp;&nbsp;&nbsp; &#8230;&#8230; </P>
<P>&nbsp;&nbsp;&nbsp; if (!test_and_set_bit(WORK_STRUCT_PENDING_BIT, work_data_bits(work))) { <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __queue_work(cpu, wq, work);&#65293;&#65293;&#65293;&#25346;&#20837;work list&#24182;&#36890;&#30693;worker thread pool&#26469;&#22788;&#29702; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ret = true; <BR>&nbsp;&nbsp;&nbsp; } </P>
<P>&nbsp;&nbsp;&nbsp; &#8230;&#8230; <BR>} </P></BLOCKQUOTE>
<P>work_struct&#30340;data member&#20013;&#30340;WORK_STRUCT_PENDING_BIT&#36825;&#20010;bit&#26631;&#35782;&#20102;&#35813;work&#26159;&#22788;&#20110;pending&#29366;&#24577;&#36824;&#26159;&#27491;&#22312;&#22788;&#29702;&#20013;&#65292;pending&#29366;&#24577;&#30340;work&#21482;&#20250;&#25346;&#20837;&#19968;&#27425;&#12290;&#22823;&#37096;&#20998;&#30340;&#36923;&#36753;&#37117;&#26159;&#22312;__queue_work&#20989;&#25968;&#20013;&#65292;&#19979;&#38754;&#30340;&#23567;&#33410;&#37117;&#26159;&#25551;&#36848;&#35813;&#20989;&#25968;&#30340;&#25191;&#34892;&#36807;&#31243;&#12290; </P>
<P>2&#12289;__WQ_DRAINING&#30340;&#35299;&#37322; </P>
<P>__queue_work&#20989;&#25968;&#19968;&#24320;&#22987;&#20250;&#26657;&#39564;__WQ_DRAINING&#36825;&#20010;flag&#65292;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>if (unlikely(wq-&gt;flags &amp; __WQ_DRAINING) &amp;&amp; WARN_ON_ONCE(!is_chained_work(wq))) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return; </BLOCKQUOTE>
<P>__WQ_DRAINING&#36825;&#20010;flag&#34920;&#31034;&#35813;workqueue&#27491;&#22312;&#36827;&#34892;draining&#30340;&#25805;&#20316;&#65292;&#36825;&#22810;&#21322;&#26159;&#21457;&#36865;&#22312;&#38144;&#27585;workqueue&#30340;&#26102;&#20505;&#65292;&#26082;&#28982;&#35201;&#38144;&#27585;&#65292;&#37027;&#20040;&#25346;&#20837;&#35813;workqueue&#30340;&#25152;&#26377;&#30340;work&#37117;&#35201;&#22788;&#29702;&#23436;&#27605;&#65292;&#25165;&#20801;&#35768;&#23427;&#28040;&#20129;&#12290;&#24403;&#24819;&#35201;&#23558;&#19968;&#20010;workqueue&#20013;&#25152;&#26377;&#30340;work&#37117;&#28165;&#31354;&#30340;&#26102;&#20505;&#65292;&#22914;&#26524;&#36824;&#26377;work&#25346;&#20837;&#24590;&#20040;&#21150;&#65311;&#19968;&#33324;&#32780;&#35328;&#65292;&#36825;&#26102;&#20505;&#24403;&#28982;&#26159;&#19981;&#20801;&#35768;&#26032;&#30340;work&#25346;&#20837;&#20102;&#65292;&#27605;&#31455;&#29616;&#22312;&#30340;&#30446;&#26631;&#26159;&#28165;&#31354;workqueue&#20013;&#30340;work&#12290;&#20294;&#26159;&#26377;&#19968;&#31181;&#29305;&#20363;&#65288;&#36890;&#36807;is_chained_work&#21028;&#23450;&#65289;&#65292;&#20063;&#23601;&#26159;&#27491;&#22312;&#28165;&#31354;&#30340;work&#65288;&#38582;&#23646;&#20110;&#35813;workqueue&#65289;&#21448;&#35302;&#21457;&#20102;&#19968;&#20010;queue work&#30340;&#25805;&#20316;&#65288;&#20063;&#23601;&#26159;&#25152;&#35859;chained work&#65289;&#65292;&#36825;&#26102;&#20505;&#35813;work&#20801;&#35768;&#25346;&#20837;&#12290; </P>
<P>3&#12289;&#36873;&#25321;pool workqueue </P>
<BLOCKQUOTE>
<P>if (req_cpu == WORK_CPU_UNBOUND) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cpu = raw_smp_processor_id(); </P>
<P>if (!(wq-&gt;flags &amp; WQ_UNBOUND)) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pwq = per_cpu_ptr(wq-&gt;cpu_pwqs, cpu); <BR>&nbsp;&nbsp;&nbsp; else <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pwq = unbound_pwq_by_node(wq, cpu_to_node(cpu)); </P></BLOCKQUOTE>
<P>WORK_CPU_UNBOUND&#34920;&#31034;&#24182;&#19981;&#25351;&#23450;cpu&#65292;&#36825;&#26102;&#20505;&#65292;&#36873;&#25321;&#24403;&#21069;&#20195;&#30721;&#36816;&#34892;&#30340;&#37027;&#20010;cpu&#20102;&#12290;&#19968;&#26086;&#30830;&#23450;&#20102;cpu&#20102;&#65292;&#23545;&#20110;&#38750;unbound&#30340;workqueue&#65292;&#24403;&#28982;&#20351;&#29992;per cpu&#30340;pool workqueue&#12290;&#22914;&#26524;&#26159;unbound&#30340;workqueue&#65292;&#37027;&#20040;&#35201;&#26681;&#25454;numa node id&#26469;&#36873;&#25321;&#12290;cpu_to_node&#21487;&#20197;&#20174;cpu id&#33719;&#21462;node id&#12290;&#38656;&#35201;&#27880;&#24847;&#30340;&#26159;&#65306;&#36825;&#37324;&#36873;&#25321;&#30340;pool wq&#21482;&#26159;&#22791;&#36873;&#30340;&#65292;&#21487;&#33021;&#29992;&#20063;&#21487;&#33021;&#19981;&#29992;&#65292;&#23427;&#26377;&#21487;&#33021;&#20250;&#34987;&#26367;&#25442;&#25481;&#65292;&#20855;&#20307;&#21442;&#32771;&#19979;&#19968;&#33410;&#25551;&#36848;&#12290; </P>
<P>4&#12289;&#36873;&#25321;worker thread pool </P>
<P>&#19982;&#20854;&#35828;&#25346;&#20837;workqueue&#65292;&#19981;&#22914;&#35828;&#25346;&#20837;worker thread pool&#65292;&#22240;&#20026;&#27605;&#31455;&#26159;&#32447;&#31243;&#27744;&#26469;&#22788;&#29702;&#20855;&#20307;&#30340;work&#12290;pool_workqueue&#26377;&#19968;&#20010;&#30456;&#20851;&#32852;&#30340;worker thread pool&#65288;struct pool_workqueue&#30340;pool&#25104;&#21592;&#65289;&#65292;&#22240;&#27492;&#30475;&#36215;&#26469;&#36873;&#25321;&#20102;pool wq&#20063;&#23601;&#36873;&#23450;&#20102;worker pool&#20102;&#65292;&#20294;&#26159;&#65292;&#19981;&#26159;&#24403;&#21069;&#36873;&#23450;&#30340;&#37027;&#20010;pool wq&#23545;&#24212;&#30340;worker pool&#23601;&#36866;&#21512;&#35813;work&#65292;&#22240;&#20026;&#26377;&#26102;&#20505;&#35813;work&#21487;&#33021;&#27491;&#22312;&#20854;&#20182;&#30340;worker thread&#19978;&#25191;&#34892;&#20013;&#65292;&#22312;&#36825;&#31181;&#24773;&#20917;&#19979;&#65292;&#20026;&#20102;&#30830;&#20445;work&#30340;callback function&#19981;&#20250;&#37325;&#20837;&#65292;&#35813;work&#26368;&#22909;&#36824;&#26159;&#25346;&#22312;&#37027;&#20010;worker thread pool&#19978;&#65292;&#20855;&#20307;&#20195;&#30721;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>last_pool = get_work_pool(work); <BR>&nbsp;&nbsp;&nbsp; if (last_pool &amp;&amp; last_pool != pwq-&gt;pool) { <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct worker *worker; </P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; spin_lock(&amp;last_pool-&gt;lock); </P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; worker = find_worker_executing_work(last_pool, work); </P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (worker &amp;&amp; worker-&gt;current_pwq-&gt;wq == wq) { <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pwq = worker-&gt;current_pwq; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } else { <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* meh... not running there, queue here */ <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; spin_unlock(&amp;last_pool-&gt;lock); <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; spin_lock(&amp;pwq-&gt;pool-&gt;lock); <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <BR>&nbsp;&nbsp;&nbsp; } else { <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; spin_lock(&amp;pwq-&gt;pool-&gt;lock); <BR>&nbsp;&nbsp;&nbsp; } </P></BLOCKQUOTE>
<P>last_pool&#35760;&#24405;&#20102;&#19978;&#19968;&#27425;&#35813;work&#26159;&#34987;&#21738;&#19968;&#20010;worker pool&#22788;&#29702;&#30340;&#65292;&#22914;&#26524;last_pool&#23601;&#26159;pool wq&#23545;&#24212;&#30340;worker pool&#65292;&#37027;&#20040;&#30342;&#22823;&#27426;&#21916;&#65292;&#21542;&#21017;&#21482;&#33021;&#20351;&#29992;last pool&#20102;&#12290;&#20351;&#29992;last pool&#30340;&#20363;&#23376;&#27604;&#36739;&#22797;&#26434;&#19968;&#20123;&#65292;&#22240;&#20026;&#36825;&#26102;&#20505;&#38656;&#35201;&#26681;&#25454;last worker pool&#25214;&#21040;&#23545;&#24212;&#30340;pool workqueue&#12290;find_worker_executing_work&#20989;&#25968;&#21487;&#20197;&#25214;&#21040;&#20855;&#20307;&#21738;&#19968;&#20010;worker&#32447;&#31243;&#27491;&#22312;&#22788;&#29702;&#35813;work&#65292;&#22914;&#26524;&#27809;&#26377;&#25214;&#21040;&#65292;&#37027;&#20040;&#36824;&#26159;&#20351;&#29992;&#31532;3&#33410;&#20013;&#36873;&#23450;&#30340;pool wq&#21543;&#65292;&#21542;&#21017;&#65292;&#36873;&#25321;&#35813;worker&#32447;&#31243;&#24403;&#21069;&#30340;&#37027;&#20010;pool workqueue&#65288;&#20854;&#23454;&#20063;&#23601;&#26159;&#36873;&#23450;&#20102;&#32447;&#31243;&#27744;&#65289;&#12290; </P>
<P>5&#12289;&#36873;&#25321;work&#25346;&#20837;&#30340;&#38431;&#21015; </P>
<P>&#38431;&#21015;&#26377;&#20004;&#20010;&#65292;&#19968;&#20010;&#26159;&#34987;&#25512;&#36831;&#25191;&#34892;&#30340;&#38431;&#21015;&#65288;pwq-&gt;delayed_works&#65289;&#65292;&#19968;&#20010;&#26159;&#32447;&#31243;&#27744;&#35201;&#22788;&#29702;&#30340;&#38431;&#21015;&#65288;pwq-&gt;pool-&gt;worklist&#65289;&#65292;&#22914;&#26524;&#25346;&#20837;&#32447;&#31243;&#27744;&#35201;&#22788;&#29702;&#30340;&#38431;&#21015;&#65292;&#20063;&#23601;&#24847;&#21619;&#30528;&#35813;work&#36827;&#20837;active&#29366;&#24577;&#65292;&#32447;&#31243;&#27744;&#20250;&#31435;&#21051;&#21551;&#21160;&#22788;&#29702;&#27969;&#31243;&#65292;&#22914;&#26524;&#25346;&#20837;&#25512;&#36831;&#25191;&#34892;&#30340;&#38431;&#21015;&#65292;&#37027;&#20040;&#35813;work&#36824;&#26159;pending&#29366;&#24577;&#65306; </P>
<BLOCKQUOTE>
<P>&nbsp;&nbsp;&nbsp; pwq-&gt;nr_in_flight[pwq-&gt;work_color]++; <BR>&nbsp;&nbsp;&nbsp; work_flags = work_color_to_flags(pwq-&gt;work_color); </P>
<P>&nbsp;&nbsp;&nbsp; if (likely(pwq-&gt;nr_active &lt; pwq-&gt;max_active)) { <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pwq-&gt;nr_active++; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; worklist = &amp;pwq-&gt;pool-&gt;worklist; <BR>&nbsp;&nbsp;&nbsp; } else { <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; work_flags |= WORK_STRUCT_DELAYED; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; worklist = &amp;pwq-&gt;delayed_works; <BR>&nbsp;&nbsp;&nbsp; } </P>
<P>&nbsp;&nbsp;&nbsp; insert_work(pwq, work, worklist, work_flags); </P></BLOCKQUOTE>
<P>&#20855;&#20307;&#30340;&#25346;&#20837;&#38431;&#21015;&#30340;&#21160;&#20316;&#26159;&#22312;insert_work&#20989;&#25968;&#20013;&#23436;&#25104;&#30340;&#12290; </P>
<P>6&#12289;&#21796;&#37266;idle&#30340;worker&#26469;&#22788;&#29702;&#35813;work </P>
<P>&#22312;insert_work&#20989;&#25968;&#20013;&#26377;&#19979;&#38754;&#30340;&#20195;&#30721;&#65306; </P>
<BLOCKQUOTE>
<P>if (__need_more_worker(pool)) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wake_up_worker(pool); </P></BLOCKQUOTE>
<P>&#24403;&#32447;&#31243;&#27744;&#20013;&#27491;&#22312;&#36816;&#34892;&#29366;&#24577;&#30340;worker&#32447;&#31243;&#25968;&#30446;&#31561;&#20110;0&#30340;&#26102;&#20505;&#65292;&#35828;&#26126;&#38656;&#35201;wakeup&#32447;&#31243;&#27744;&#20013;&#22788;&#20110;idle&#29366;&#24577;&#30340;&#30340;worker&#32447;&#31243;&#26469;&#22788;&#29702;work&#12290; </P>
<P>&nbsp; </P>
<P>&#19977;&#12289;&#32447;&#31243;&#27744;&#22914;&#20309;&#21019;&#24314;worker&#32447;&#31243;&#65311; </P>
<P>1&#12289;per cpu worker pool&#20160;&#20040;&#26102;&#20505;&#21019;&#24314;worker&#32447;&#31243;&#65311; </P>
<P>&#23545;&#20110;per-CPU workqueue&#65292;&#27599;&#20010;cpu&#26377;&#20004;&#20010;&#32447;&#31243;&#27744;&#65292;&#19968;&#20010;&#26159;normal&#65292;&#19968;&#20010;&#26159;high priority&#30340;&#12290;&#22312;&#21021;&#22987;&#21270;&#20989;&#25968;init_workqueues&#20013;&#26377;&#23545;&#36825;&#20004;&#20010;&#32447;&#31243;&#27744;&#30340;&#21021;&#22987;&#21270;&#65306; </P>
<BLOCKQUOTE>
<P>for_each_online_cpu(cpu) { <BR>&nbsp;&nbsp;&nbsp; struct worker_pool *pool; </P>
<P>&nbsp;&nbsp;&nbsp; for_each_cpu_worker_pool(pool, cpu) { <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pool-&gt;flags &amp;= ~POOL_DISASSOCIATED; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; BUG_ON(!create_worker(pool)); <BR>&nbsp;&nbsp;&nbsp; } <BR>} </P></BLOCKQUOTE>
<P>&#22240;&#27492;&#65292;&#22312;&#31995;&#32479;&#21021;&#22987;&#21270;&#30340;&#26102;&#20505;&#65292;per cpu workqueue&#20849;&#20139;&#30340;&#37027;&#20123;&#32447;&#31243;&#27744;&#65288;2 x cpu nr&#65289;&#23601;&#20250;&#36890;&#36807;create_worker&#21019;&#24314;&#19968;&#20010;initial worker&#12290; </P>
<P>&#19968;&#26086;initial worker&#21551;&#21160;&#65292;&#35813;&#32447;&#31243;&#20250;&#25191;&#34892;worker_thread&#20989;&#25968;&#26469;&#22788;&#29702;work&#65292;&#22312;&#22788;&#29702;&#36807;&#31243;&#20013;&#65292;&#22914;&#26524;&#26377;&#38656;&#35201;&#65292; worker&#20250;&#21019;&#24314;&#26032;&#30340;&#32447;&#31243;&#12290; </P>
<P>2&#12289;unbound thread pool&#20160;&#20040;&#26102;&#20505;&#21019;&#24314;worker&#32447;&#31243;&#65311; </P>
<P>&#25105;&#20204;&#20808;&#30475;&#30475;unbound thread pool&#30340;&#24314;&#31435;&#65292;&#21644;per-CPU&#19981;&#21516;&#30340;&#26159;unbound thread pool&#26159;&#20840;&#23616;&#20849;&#20139;&#30340;&#65292;&#22240;&#27492;&#65292;&#27599;&#24403;&#21019;&#24314;&#19981;&#21516;&#23646;&#24615;&#30340;unbound workqueue&#30340;&#26102;&#20505;&#65292;&#37117;&#38656;&#35201;&#21019;&#24314;pool_workqueue&#21450;&#20854;&#23545;&#24212;&#30340;worker pool&#65292;&#36825;&#26102;&#20505;&#23601;&#20250;&#35843;&#29992;get_unbound_pool&#20989;&#25968;&#22312;&#24403;&#21069;&#31995;&#32479;&#20013;&#29616;&#23384;&#30340;&#32447;&#31243;&#27744;&#20013;&#25214;&#26159;&#21542;&#26377;&#21305;&#37197;&#30340;worker pool&#65292;&#22914;&#26524;&#27809;&#26377;&#23601;&#38656;&#35201;&#21019;&#24314;&#26032;&#30340;&#32447;&#31243;&#27744;&#12290;&#22312;&#21019;&#24314;&#26032;&#30340;&#32447;&#31243;&#27744;&#20043;&#21518;&#65292;&#20250;&#31435;&#21051;&#35843;&#29992;create_worker&#21019;&#24314;&#19968;&#20010;initial worker&#12290;&#21644;per cpu worker pool&#19968;&#26679;&#65292;&#19968;&#26086;initial worker&#21551;&#21160;&#65292;&#38543;&#30528;work&#19981;&#26029;&#30340;&#25346;&#20837;&#20197;&#21450;worker&#22788;&#29702;work&#30340;&#20855;&#20307;&#24773;&#20917;&#65292;&#32447;&#31243;&#27744;&#20250;&#21160;&#24577;&#21019;&#24314;worker&#12290; </P>
<P>3&#12289;&#22914;&#20309;&#21019;&#24314;worker&#12290;&#20195;&#30721;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>static struct worker *create_worker(struct worker_pool *pool) <BR>{ <BR>&nbsp;&nbsp;&nbsp; struct worker *worker = NULL; <BR>&nbsp;&nbsp;&nbsp; int id = -1; <BR>&nbsp;&nbsp;&nbsp; char id_buf[16]; </P>
<P>&nbsp;&nbsp;&nbsp; id = ida_simple_get(&amp;pool-&gt;worker_ida, 0, 0, GFP_KERNEL);&#65293;&#65293;&#65293;&#65293;&#20998;&#37197;ID </P>
<P>&nbsp;&nbsp;&nbsp; worker = alloc_worker(pool-&gt;node);&#65293;&#65293;&#65293;&#65293;&#65293;&#20998;&#37197;worker struct&#30340;&#20869;&#23384; </P>
<P>&nbsp;&nbsp;&nbsp; worker-&gt;pool = pool; <BR>&nbsp;&nbsp;&nbsp; worker-&gt;id = id; </P>
<P>&nbsp;&nbsp;&nbsp; if (pool-&gt;cpu &gt;= 0)&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;worker&#30340;&#21517;&#23383; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; snprintf(id_buf, sizeof(id_buf), "%d:%d%s", pool-&gt;cpu, id,&nbsp; pool-&gt;attrs-&gt;nice &lt; 0&nbsp; ? "H" : ""); <BR>&nbsp;&nbsp;&nbsp; else <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; snprintf(id_buf, sizeof(id_buf), "u%d:%d", pool-&gt;id, id); </P>
<P>worker-&gt;task = kthread_create_on_node(worker_thread, worker, pool-&gt;node,&nbsp;&nbsp; "kworker/%s", id_buf); </P>
<P>&nbsp;&nbsp;&nbsp; set_user_nice(worker-&gt;task, pool-&gt;attrs-&gt;nice); &#65293;&#65293;&#65293;&#21019;&#24314;task&#24182;&#35774;&#23450;nice value <BR>&nbsp;&nbsp;&nbsp; worker-&gt;task-&gt;flags |= PF_NO_SETAFFINITY;&nbsp; <BR>&nbsp;&nbsp;&nbsp; worker_attach_to_pool(worker, pool); &#65293;&#65293;&#65293;&#65293;&#65293;&#24314;&#31435;worker&#21644;&#32447;&#31243;&#27744;&#30340;&#20851;&#31995; </P>
<P>&nbsp;&nbsp;&nbsp; spin_lock_irq(&amp;pool-&gt;lock); <BR>&nbsp;&nbsp;&nbsp; worker-&gt;pool-&gt;nr_workers++; <BR>&nbsp;&nbsp;&nbsp; worker_enter_idle(worker); <BR>&nbsp;&nbsp;&nbsp; wake_up_process(worker-&gt;task);&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#35753;worker&#36816;&#34892;&#36215;&#26469; <BR>&nbsp;&nbsp;&nbsp; spin_unlock_irq(&amp;pool-&gt;lock); </P>
<P>&nbsp;&nbsp;&nbsp; return worker; <BR>} </P></BLOCKQUOTE>
<P>&#20195;&#30721;&#19981;&#22797;&#26434;&#65292;&#36890;&#36807;&#32447;&#31243;&#27744;&#65288;struct worker_pool&#65289;&#32465;&#23450;&#30340;cpu&#20449;&#24687;&#65288;struct worker_pool&#30340;cpu&#25104;&#21592;&#65289;&#21487;&#20197;&#30693;&#36947;&#35813;pool&#26159;per-CPU&#36824;&#26159;unbound&#65292;&#23545;&#20110;per-CPU&#32447;&#31243;&#27744;&#65292;pool-&gt;cpu&#26159;&#22823;&#20110;&#31561;&#20110;0&#30340;&#12290;&#23545;&#20110;&#23545;&#20110;per-CPU&#32447;&#31243;&#27744;&#65292;&#20854;worker&#32447;&#31243;&#30340;&#21517;&#23383;&#26159;kworker/<EM>cpu</EM>&#65306;<EM>worker id</EM>&#65292;&#22914;&#26524;&#26159;high priority&#30340;&#65292;&#21518;&#38754;&#36824;&#36319;&#30528;&#19968;&#20010;H&#23383;&#31526;&#12290;&#23545;&#20110;unbound&#32447;&#31243;&#27744;&#65292;&#20854;worker&#32447;&#31243;&#30340;&#21517;&#23383;&#26159;kworker/u <EM>pool id</EM>&#65306;<EM>worker id&#12290;</EM> </P>
<P><EM></EM></P>
<P>&#22235;&#12289;work&#30340;&#22788;&#29702; </P>
<P>&#26412;&#31456;&#20027;&#35201;&#25551;&#36848;worker_thread&#20989;&#25968;&#30340;&#25191;&#34892;&#27969;&#31243;&#65292;&#37096;&#20998;&#20195;&#30721;&#26377;&#21024;&#33410;&#65292;&#20445;&#30041;&#20027;&#24178;&#37096;&#20998;&#12290; </P>
<P>1&#12289;PF_WQ_WORKER&#26631;&#35760; </P>
<P>worker&#32447;&#31243;&#20989;&#25968;&#19968;&#24320;&#22987;&#23601;&#20250;&#36890;&#36807;PF_WQ_WORKER&#26469;&#26631;&#27880;&#33258;&#24049;&#65306; </P>
<BLOCKQUOTE>
<P>worker-&gt;task-&gt;flags |= PF_WQ_WORKER; </P></BLOCKQUOTE>
<P>&#26377;&#20102;&#36825;&#26679;&#19968;&#20010;flag&#65292;&#35843;&#24230;&#22120;&#22312;&#35843;&#24230;&#24403;&#21069;&#36827;&#31243;sleep&#30340;&#26102;&#20505;&#21487;&#20197;&#26816;&#26597;&#36825;&#20010;&#20934;&#22791;sleep&#30340;&#36827;&#31243;&#26159;&#21542;&#26159;&#19968;&#20010;worker&#32447;&#31243;&#65292;&#22914;&#26524;&#26159;&#30340;&#35805;&#65292;&#37027;&#20040;&#35843;&#24230;&#22120;&#19981;&#33021;&#40065;&#33725;&#30340;&#35843;&#24230;&#21040;&#20854;&#20182;&#30340;&#36827;&#31243;&#65292;&#36825;&#26102;&#20505;&#65292;&#36824;&#38656;&#35201;&#25214;&#21040;&#35813;worker&#23545;&#24212;&#30340;&#32447;&#31243;&#27744;&#65292;&#21796;&#37266;&#19968;&#20010;idle&#30340;worker&#32447;&#31243;&#12290;&#36890;&#36807;workqueue&#27169;&#22359;&#21644;&#35843;&#24230;&#22120;&#27169;&#22359;&#30340;&#20132;&#20114;&#65292;&#24403;work A&#34987;&#38459;&#22622;&#21518;&#65288;&#22788;&#29702;&#35813;work&#30340;worker&#32447;&#31243;&#36827;&#20837;sleep&#65289;&#65292;&#35843;&#24230;&#22120;&#20250;&#21796;&#37266;&#20854;&#20182;&#30340;worker&#32447;&#31243;&#26469;&#22788;&#29702;&#20854;&#20182;&#30340;work B&#65292;work C&#8230;&#8230; </P>
<P>2&#12289;&#31649;&#29702;&#32447;&#31243;&#27744;&#20013;&#30340;&#32447;&#31243; </P>
<BLOCKQUOTE>
<P>recheck: <BR>&nbsp;&nbsp;&nbsp; if (!need_more_worker(pool)) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto sleep; </P>
<P>&nbsp;&nbsp;&nbsp; if (unlikely(!may_start_working(pool)) &amp;&amp; manage_workers(worker)) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; goto recheck; </P></BLOCKQUOTE>
<P>&#22914;&#20309;&#21028;&#26029;&#26159;&#21542;&#38656;&#35201;&#21019;&#24314;&#26356;&#22810;&#30340;worker&#32447;&#31243;&#21602;&#65311;&#21407;&#21017;&#22914;&#19979;&#65306; </P>
<P>&#65288;1&#65289;&#26377;&#20107;&#24773;&#20570;&#65306;&#25346;&#22312;worker pool&#20013;&#30340;work list&#19981;&#33021;&#26159;&#31354;&#30340;&#65292;&#22914;&#26524;&#26159;&#31354;&#30340;&#65292;&#37027;&#20040;&#24403;&#28982;sleep&#23601;&#22909;&#20102; </P>
<P>&#65288;2&#65289;&#27604;&#36739;&#24537;&#65306;worker pool&#30340;nr_running&#25104;&#21592;&#34920;&#31034;&#32447;&#31243;&#27744;&#20013;&#24403;&#21069;&#27491;&#22312;&#24178;&#27963;&#65288;running&#29366;&#24577;&#65289;&#30340;worker&#32447;&#31243;&#26377;&#22810;&#23569;&#20010;&#65292;&#24403;nr_running&#31561;&#20110;0&#34920;&#31034;&#25152;&#26377;&#30340;worker&#32447;&#31243;&#22312;&#22788;&#29702;work&#30340;&#26102;&#20505;&#38459;&#22622;&#20102;&#65292;&#36825;&#26102;&#20505;&#65292;&#24517;&#39035;&#35201;&#21551;&#21160;&#26032;&#30340;worker&#32447;&#31243;&#26469;&#22788;&#29702;worker pool&#19978;&#22788;&#20110;active&#29366;&#24577;&#30340;work&#38142;&#34920;&#19978;&#30340;work&#20204;&#12290; </P>
<P>3&#12289;worker&#32447;&#31243;&#24320;&#22987;&#22788;&#29702;work </P>
<BLOCKQUOTE>
<P>worker_clr_flags(worker, WORKER_PREP | WORKER_REBOUND); </P>
<P>do { <BR>&nbsp;&nbsp;&nbsp; struct work_struct *work =&nbsp;&nbsp; list_first_entry(&amp;pool-&gt;worklist,&nbsp; struct work_struct, entry); </P>
<P>&nbsp;&nbsp;&nbsp; if (likely(!(*work_data_bits(work) &amp; WORK_STRUCT_LINKED))) { <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; process_one_work(worker, work); <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (unlikely(!list_empty(&amp;worker-&gt;scheduled))) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; process_scheduled_works(worker); <BR>&nbsp;&nbsp;&nbsp; } else { <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; move_linked_works(work, &amp;worker-&gt;scheduled, NULL); <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; process_scheduled_works(worker); <BR>&nbsp;&nbsp;&nbsp; } <BR>} while (keep_working(pool)); </P>
<P>worker_set_flags(worker, WORKER_PREP); </P></BLOCKQUOTE>
<P>&#25353;&#29702;&#35828;worker&#32447;&#31243;&#22788;&#29702;work&#24212;&#35813;&#27604;&#36739;&#31616;&#21333;&#65292;&#20174;&#32447;&#31243;&#27744;&#30340;worklist&#20013;&#21462;&#19968;&#20010;work&#65292;&#28982;&#21518;&#35843;&#29992;process_one_work&#22788;&#29702;&#20043;&#23601;OK&#20102;&#65292;&#19981;&#36807;&#29616;&#23454;&#31245;&#24494;&#22797;&#26434;&#19968;&#20123;&#65292;work&#21644;work&#20043;&#38388;&#24182;&#19981;&#26159;&#29420;&#31435;&#30340;&#65292;&#20063;&#23601;&#26159;&#35828;&#65292;work A&#21644;work B&#21487;&#33021;&#26159;linked work&#65292;&#36825;&#20123;linked work&#24212;&#35813;&#34987;&#19968;&#20010;worker&#26469;&#22788;&#29702;&#12290;WORK_STRUCT_LINKED&#26631;&#35760;&#20102;work&#26159;&#23646;&#20110;linked work&#65292;&#22914;&#26524;&#26159;linked work&#65292;worker&#24182;&#19981;&#30452;&#25509;&#22788;&#29702;&#65292;&#32780;&#26159;&#23558;&#20854;&#25346;&#20837;scheduled work list&#65292;&#28982;&#21518;&#35843;&#29992;process_scheduled_works&#26469;&#22788;&#29702;&#12290;&#27627;&#26080;&#30097;&#38382;&#65292;process_scheduled_works&#20063;&#26159;&#35843;&#29992;process_one_work&#26469;&#22788;&#29702;&#19968;&#20010;&#19968;&#20010;scheduled work list&#19978;&#30340;work&#12290; </P>
<P>scheduled work list&#24182;&#38750;&#20165;&#20165;&#24212;&#29992;&#22312;linked work&#65292;&#22312;worker&#22788;&#29702;work&#30340;&#26102;&#20505;&#65292;&#26377;&#19968;&#20010;&#21407;&#21017;&#35201;&#20445;&#35777;&#65306;&#21516;&#19968;&#20010;work&#19981;&#33021;&#34987;&#21516;&#19968;&#20010;cpu&#19978;&#30340;&#22810;&#20010;worker&#21516;&#26102;&#25191;&#34892;&#12290;&#36825;&#26102;&#20505;&#65292;&#22914;&#26524;worker&#21457;&#29616;&#33258;&#24049;&#35201;&#22788;&#29702;&#30340;work&#27491;&#22312;&#34987;&#21478;&#22806;&#19968;&#20010;worker&#32447;&#31243;&#22788;&#29702;&#65292;&#37027;&#20040;&#26412;worker&#32447;&#31243;&#23558;&#19981;&#22788;&#29702;&#35813;work&#65292;&#21482;&#38656;&#35201;&#25346;&#20837;&#27491;&#22312;&#25191;&#34892;&#35813;work&#30340;worker&#32447;&#31243;&#30340;scheduled work list&#21363;&#21487;&#12290;