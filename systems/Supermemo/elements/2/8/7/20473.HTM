<P style="TEXT-ALIGN: left; TEXT-INDENT: 43.1pt; MARGIN: 0cm 0cm 0pt; mso-char-indent-count: 1.96; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 22pt; mso-bidi-font-size: 15.0pt; mso-fareast-font-family: Birka; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt" lang=EN-US>A Few Other Details</SPAN></P>
<P style="TEXT-ALIGN: left; TEXT-INDENT: 27.45pt; MARGIN: 0cm 0cm 0pt; mso-char-indent-count: 1.96; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-fareast-font-family: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Kernel programming differs from user-space programming in many ways. We&#8217;ll point things out as we get to them over the course of the book, but there are a few fundamental issues which, while not warranting a section of their own, are worth a mention. So, as you dig into the kernel, the following issues should be kept in mind.</SPAN></P>
<P style="TEXT-ALIGN: left; TEXT-INDENT: 27.45pt; MARGIN: 0cm 0cm 0pt; mso-char-indent-count: 1.96; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-fareast-font-family: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US><FONT class=extract>Applications are laid out in virtual memory with a very large stack area. The stack, of course, is used to hold the function call history and all automatic variables created by currently active functions. The kernel, instead, has a very small stack; it can be as small as a single, 4096-byte page. Your functions must share that stack with the entire kernel-space call chain. Thus, it is never a good idea to declare large automatic variables; if you need larger structures, you should allocate them dynamically at call time.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; TEXT-INDENT: 27.45pt; MARGIN: 0cm 0cm 0pt; mso-char-indent-count: 1.96; mso-layout-grid-align: none" class=MsoNormal align=left><FONT class=extract><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-fareast-font-family: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Often, as you look at the kernel API, you will encounter function names starting with a double underscore (</SPAN><SPAN style="FONT-FAMILY: TheSansMonoCondensed-SemiLight; FONT-SIZE: 12pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US><FONT face=Calibri>__</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-fareast-font-family: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>). Functions so marked are generally a low-level component of the interface and should be used with caution. Essentially, the double underscore says to the programmer: &#8220;If you call this function, be sure you know what you are doing.&#8221;</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; TEXT-INDENT: 27.45pt; MARGIN: 0cm 0cm 0pt; mso-char-indent-count: 1.96; mso-layout-grid-align: none" class=MsoNormal align=left><FONT class=extract><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-fareast-font-family: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Kernel code cannot do floating point arithmetic. Enabling floating point would require that the kernel save and restore the floating point processor&#8217;s state on each entry to, and exit from, kernel space</SPAN><SPAN style="FONT-FAMILY: Birka; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8212;</FONT></SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-fareast-font-family: Birka; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>at least, on some architectures. Given that there really is no need for floating point in kernel code, the extra overhead is not worthwhile.</SPAN></FONT>