<HEAD></HEAD>
<BODY>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 40.8pt; mso-char-indent-count: 1.57; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 26pt; FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; mso-bidi-font-size: 18.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt">Classes of Devices and Modules</SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 22pt; mso-char-indent-count: 1.57; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka">The Linux way of looking at devices distinguishes between three fundamental device types. Each module usually implements one of these types, and thus is classifiable as a </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-fareast-font-family: Birka-Italic">char module</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka">, a </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-fareast-font-family: Birka-Italic">block module</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka">, or a </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-fareast-font-family: Birka-Italic">network module</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka">. This division of modules into different types, or classes, is not a rigid one; the programmer can choose to build huge modules implementing different drivers in a single chunk of code. Good programmers, nonetheless, usually create a different module for each new functionality they implement, because decomposition is a key element of scalability and extendability.</SPAN></P>
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 22pt; mso-char-indent-count: 1.57"><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka">&nbsp;</SPAN></P>
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 25.1pt; mso-char-indent-count: 1.57"><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 11.0pt; mso-no-proof: yes"><?xml:namespace prefix = "v" /><v:shapetype id=_x0000_t75 stroked="f" filled="f" path="m@4@5l@4@11@9@11@9@5xe" o:preferrelative="t" o:spt="75" coordsize="21600,21600"><v:stroke joinstyle="miter"></v:stroke><v:formulas><v:f eqn="if lineDrawn pixelLineWidth 0"></v:f><v:f eqn="sum @0 1 0"></v:f><v:f eqn="sum 0 0 @1"></v:f><v:f eqn="prod @2 1 2"></v:f><v:f eqn="prod @3 21600 pixelWidth"></v:f><v:f eqn="prod @3 21600 pixelHeight"></v:f><v:f eqn="sum @0 0 1"></v:f><v:f eqn="prod @6 1 2"></v:f><v:f eqn="prod @7 21600 pixelWidth"></v:f><v:f eqn="sum @8 21600 0"></v:f><v:f eqn="prod @7 21600 pixelHeight"></v:f><v:f eqn="sum @10 21600 0"></v:f></v:formulas><v:path o:connecttype="rect" gradientshapeok="t" o:extrusionok="f"></v:path><?xml:namespace prefix = "o" /><o:lock aspectratio="t" v:ext="edit"></o:lock></v:shapetype></SPAN><SPAN lang=EN-US style="FONT-SIZE: 16pt; mso-bidi-font-size: 11.0pt"></SPAN></P>
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 18.85pt; mso-char-indent-count: 1.57"><I><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-fareast-font-family: Birka-Italic">Figure 1-1. A split view of the kernel</SPAN></I></P>
<P class=MsoNormal style="MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 18.85pt; mso-char-indent-count: 1.57"><I><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-fareast-font-family: Birka-Italic">&nbsp;</SPAN></I></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 22pt; mso-char-indent-count: 1.57; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka">The three classes are:</SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 22pt; mso-char-indent-count: 1.57; mso-layout-grid-align: none" align=left><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-fareast-font-family: Birka-Italic"><FONT class=extract>Character devices</FONT></SPAN></I></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt 10.5pt; TEXT-INDENT: 22pt; mso-char-indent-count: 1.57; mso-layout-grid-align: none; mso-para-margin-left: 1.0gd" align=left><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka">A character (char) device is one that can be accessed as a stream of bytes (like a file); a char driver is in charge of implementing this behavior. Such a driver usually implements at least the </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-fareast-font-family: Birka-Italic">open</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka">, </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-fareast-font-family: Birka-Italic">close</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka">, </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-fareast-font-family: Birka-Italic">read</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka">, and </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-fareast-font-family: Birka-Italic">write </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka">system calls. The text console (</SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-fareast-font-family: Birka-Italic">/dev/console</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka">) and the serial ports (</SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-fareast-font-family: Birka-Italic">/dev/ttyS0 </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka">and friends) are examples of char devices, as they are well represented by the stream abstraction. Char devices are accessed by means of filesystem nodes, such as </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-fareast-font-family: Birka-Italic">/dev/tty1 </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka">and </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-fareast-font-family: Birka-Italic">/dev/lp0</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka">. The only relevant difference between a char device and a regular file is that you can always move back and forth in the regular file, whereas most char devices are just data channels, which you can only access sequentially. There exist, nonetheless, char devices that look like data areas, and you can move back and forth in them; for instance, this usually applies to frame grabbers, where the applications can access the whole acquired image using </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-fareast-font-family: Birka-Italic">mmap </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka">or </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-fareast-font-family: Birka-Italic">lseek</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka">.</SPAN></FONT></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 22pt; mso-char-indent-count: 1.57; mso-layout-grid-align: none" align=left><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-fareast-font-family: Birka-Italic"><FONT class=extract>Block devices</FONT></SPAN></I></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt 10.5pt; TEXT-INDENT: 22pt; mso-char-indent-count: 1.57; mso-layout-grid-align: none; mso-para-margin-left: 1.0gd" align=left><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka">Like char devices, block devices are accessed by filesystem nodes in the </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-fareast-font-family: Birka-Italic">/dev </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka">directory. A block device is a device (e.g., a disk) that can host a filesystem. In most Unix systems, a block device can only handle I/O operations that transfer one or more whole blocks, which are usually 512 bytes (or a larger power of two) bytes in length. Linux, instead, allows the application to read and write a block device like a char device</SPAN><SPAN style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-ascii-font-family: &#24494;&#36719;&#38597;&#40657;; mso-hansi-font-family: &#24494;&#36719;&#38597;&#40657;"><FONT face=Calibri>&#8212;</FONT></SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka">it permits the transfer of any number of bytes at a time. As a result, block and char devices differ only in the way data is managed internally by the kernel, and thus in the kernel/driver software interface. Like a char device, each block device is accessed through a filesystem node, and the difference between them is transparent to the user. Block drivers have a completely different interface to the kernel than char drivers.</SPAN></FONT></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 22pt; mso-char-indent-count: 1.57; mso-layout-grid-align: none" align=left><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-fareast-font-family: Birka-Italic"><FONT class=extract>Network interfaces</FONT></SPAN></I></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt 10.5pt; TEXT-INDENT: 22pt; mso-char-indent-count: 1.57; mso-layout-grid-align: none; mso-para-margin-left: 1.0gd" align=left><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka">Any network transaction is made through an interface, that is, a device that is able to exchange data with other hosts. Usually, an </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-fareast-font-family: Birka-Italic">interface </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka">is a hardware device, but it might also be a pure software device, like the loopback interface. A network interface is in charge of sending and receiving data packets, driven by the network subsystem of the kernel, without knowing how individual transactions map to the actual packets being transmitted. Many network connections (especially those using TCP) are stream-oriented, but network devices are, usually, designed around the transmission and receipt of packets. A network driver knows nothing about individual connections; it only handles packets.</SPAN></FONT></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt 10.5pt; TEXT-INDENT: 22pt; mso-char-indent-count: 1.57; mso-layout-grid-align: none; mso-para-margin-left: 1.0gd" align=left><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka">Not being a stream-oriented device, a network interface isn&#8217;t easily mapped to a node in the filesystem, as </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-fareast-font-family: Birka-Italic">/dev/tty1 </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka">is. The Unix way to provide access to interfaces is still by assigning a unique name to them (such as </SPAN><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt"><FONT face=Calibri>eth0</FONT></SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka">), but that name doesn&#8217;t have a corresponding entry in the filesystem. Communication between the kernel and a network device driver is completely different from that used with char and block drivers. Instead of </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-fareast-font-family: Birka-Italic">read </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka">and </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-fareast-font-family: Birka-Italic">write</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka">, the kernel calls functions related to packet transmission.</SPAN></FONT></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 22pt; mso-char-indent-count: 1.57; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka">There are other ways of classifying driver modules that are orthogonal to the above device types. In general, some types of drivers work with additional layers of kernel support functions for a given type of device. For example, one can talk of universal serial bus (USB) modules, serial modules, SCSI modules, and so on. Every USB device is driven by a USB module that works with the USB subsystem, but the device itself shows up in the system as a char device (a USB serial port, say), a block device (a USB memory card reader), or a network device (a USB Ethernet interface).</SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 22pt; mso-char-indent-count: 1.57; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka">Other classes of device drivers have been added to the kernel in recent times, including FireWire drivers and I2O drivers. In the same way that they handled USB and SCSI drivers, kernel developers collected class-wide features and exported them to driver implementers to avoid duplicating work and bugs, thus simplifying and strengthening the process of writing such drivers.</SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 22pt; mso-char-indent-count: 1.57; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka">In addition to device drivers, other functionalities, both hardware and software, are modularized in the kernel. One common example is filesystems. A filesystem type determines how information is organized on a block device in order to represent a tree of directories and files. Such an entity is not a device driver, in that there&#8217;s no explicit device associated with the way the information is laid down; the filesystem type is instead a software driver, because it maps the low-level data structures to high-level data structures. It is the filesystem that determines how long a filename </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka">can be and what information about each file is stored in a directory entry. The filesystem module must implement the lowest level of the system calls that access directories and files, by mapping filenames and paths (as well as other information, such as access modes) to data structures stored in data blocks. Such an interface is completely independent of the actual data transfer to and from the disk (or other medium), which is accomplished by a block device driver.</SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; TEXT-INDENT: 22pt; mso-char-indent-count: 1.57; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka">If you think of how strongly a Unix system depends on the underlying filesystem, you&#8217;ll realize that such a software concept is vital to system operation. The ability to decode filesystem information stays at the lowest level of the kernel hierarchy and is of utmost importance; even if you write a block driver for your new CD-ROM, it is useless if you are not able to run </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-fareast-font-family: Birka-Italic">ls </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka">or </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-fareast-font-family: Birka-Italic">cp </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka">on the data it hosts. Linux supports the concept of a filesystem module, whose software interface declares the different operations that can be performed on a filesystem inode, directory, file, and superblock. It&#8217;s quite unusual for a programmer to actually need to write a filesystem module, because the official kernel already includes code for the most important filesystem types.</SPAN></P></BODY>