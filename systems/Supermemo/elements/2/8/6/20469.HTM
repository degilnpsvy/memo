<P style="TEXT-ALIGN: left; TEXT-INDENT: 40.8pt; MARGIN: 0cm 0cm 0pt; mso-char-indent-count: 1.57; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; FONT-SIZE: 26pt; mso-bidi-font-size: 18.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt" lang=EN-US>Splitting the Kernel</SPAN></P>
<P style="TEXT-ALIGN: left; TEXT-INDENT: 22pt; MARGIN: 0cm 0cm 0pt; mso-char-indent-count: 1.57; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>In a Unix system, several concurrent </SPAN><I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-fareast-font-family: Birka-Italic" lang=EN-US>processes </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>attend to different tasks. Each process asks for system resources, be it computing power, memory, network connectivity, or some other resource. The </SPAN><I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-fareast-font-family: Birka-Italic" lang=EN-US>kernel </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>is the big chunk of executable code in charge of handling all such requests. Although the distinction between the different kernel tasks isn&#8217;t always clearly marked, the kernel&#8217;s role can be split (as shown in Figure 1-1) into the following parts:</SPAN></P>
<P style="TEXT-ALIGN: left; TEXT-INDENT: 22pt; MARGIN: 0cm 0cm 0pt; mso-char-indent-count: 1.57; mso-layout-grid-align: none" class=MsoNormal align=left><I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-fareast-font-family: Birka-Italic" lang=EN-US><FONT class=extract>Process management</FONT></SPAN></I></P>
<P style="TEXT-ALIGN: left; TEXT-INDENT: 22pt; MARGIN: 0cm 0cm 0pt 10.5pt; mso-char-indent-count: 1.57; mso-layout-grid-align: none; mso-para-margin-left: 1.0gd" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US><FONT class=extract>The kernel is in charge of creating and destroying processes and handling their connection to the outside world (input and output). Communication among different processes (through signals, pipes, or interprocess communication primitives) is basic to the overall system functionality and is also handled by the kernel. In addition, the scheduler, which controls how processes share the CPU, is part of process management. More generally, the kernel&#8217;s process management activity implements the abstraction of several processes on top of a single CPU or a few of them.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; TEXT-INDENT: 22pt; MARGIN: 0cm 0cm 0pt; mso-char-indent-count: 1.57; mso-layout-grid-align: none" class=MsoNormal align=left><I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-fareast-font-family: Birka-Italic" lang=EN-US><FONT class=extract>Memory management</FONT></SPAN></I></P>
<P style="TEXT-ALIGN: left; TEXT-INDENT: 22pt; MARGIN: 0cm 0cm 0pt 10.5pt; mso-char-indent-count: 1.57; mso-layout-grid-align: none; mso-para-margin-left: 1.0gd" class=MsoNormal align=left><FONT class=extract><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The computer&#8217;s memory is a major resource, and the policy used to deal with it is a critical one for system performance. The kernel builds up a virtual addressing space for any and all processes on top of the limited available resources. The different parts of the kernel interact with the memory-management subsystem through a set of function calls, ranging from the simple </SPAN><I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-fareast-font-family: Birka-Italic" lang=EN-US>malloc</SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>/</SPAN><I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-fareast-font-family: Birka-Italic" lang=EN-US>free </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>pair to much more complex functionalities.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; TEXT-INDENT: 22pt; MARGIN: 0cm 0cm 0pt; mso-char-indent-count: 1.57; mso-layout-grid-align: none" class=MsoNormal align=left><I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-fareast-font-family: Birka-Italic" lang=EN-US><FONT class=extract>Filesystems</FONT></SPAN></I></P>
<P style="TEXT-ALIGN: left; TEXT-INDENT: 22pt; MARGIN: 0cm 0cm 0pt 10.5pt; mso-char-indent-count: 1.57; mso-layout-grid-align: none; mso-para-margin-left: 1.0gd" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US><FONT class=extract>Unix is heavily based on the filesystem concept; almost everything in Unix can be treated as a file. The kernel builds a structured filesystem on top of unstructured hardware, and the resulting file abstraction is heavily used throughout the whole system. In addition, Linux supports multiple filesystem types, that is, different ways of organizing data on the physical medium. For example, disks may be formatted with the Linux-standard ext3 filesystem, the commonly used FAT filesystem or several others.</FONT></SPAN></P>
<P style="TEXT-ALIGN: left; TEXT-INDENT: 22pt; MARGIN: 0cm 0cm 0pt; mso-char-indent-count: 1.57; mso-layout-grid-align: none" class=MsoNormal align=left><I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-fareast-font-family: Birka-Italic" lang=EN-US><FONT class=extract>Device control</FONT></SPAN></I></P>
<P style="TEXT-ALIGN: left; TEXT-INDENT: 22pt; MARGIN: 0cm 0cm 0pt 10.5pt; mso-char-indent-count: 1.57; mso-layout-grid-align: none; mso-para-margin-left: 1.0gd" class=MsoNormal align=left><FONT class=extract><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>Almost every system operation eventually maps to a physical device. With the exception of the processor, memory, and a very few other entities, any and all device control operations are performed by code that is specific to the device being addressed. That code is called a </SPAN><I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-fareast-font-family: Birka-Italic" lang=EN-US>device driver</SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>. The kernel must have embedded in it a device driver for every peripheral present on a system, from the hard drive to the keyboard and the tape drive. This aspect of the kernel&#8217;s functions is our primary interest in this book.</SPAN></FONT></P>
<P style="TEXT-ALIGN: left; TEXT-INDENT: 22pt; MARGIN: 0cm 0cm 0pt; mso-char-indent-count: 1.57; mso-layout-grid-align: none" class=MsoNormal align=left><I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-fareast-font-family: Birka-Italic" lang=EN-US><FONT class=extract>Networking</FONT></SPAN></I></P>
<P style="TEXT-ALIGN: left; TEXT-INDENT: 22pt; MARGIN: 0cm 0cm 0pt 10.5pt; mso-char-indent-count: 1.57; mso-layout-grid-align: none; mso-para-margin-left: 1.0gd" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US><FONT class=extract>Networking must be managed by the operating system, because most network operations are not specific to a process: incoming packets are asynchronous events. The packets must be collected, identified, and dispatched before a process takes care of them. The system is in charge of delivering data packets across program and network interfaces, and it must control the execution of programs according to their network activity. Additionally, all the routing and address resolution issues are implemented within the kernel.</FONT></SPAN>