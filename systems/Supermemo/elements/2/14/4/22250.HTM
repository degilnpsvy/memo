<DIV class=navheader>
<TABLE summary="Navigation header" width="100%">
<TBODY>
<TR>
<TH colSpan=3 align=middle><SPAN class=phrase>seqno_fence_init</SPAN></TH></TR>
<TR>
<TD width="20%" align=left><A accessKey=p href="file:///C:/Users/donpope_tang/Documents/docbook/device-drivers/API-to-seqno-fence.html">Prev</A>&nbsp;</TD>
<TH width="60%" align=middle>Device Drivers DMA Management</TH>
<TD width="20%" align=right>&nbsp;<A accessKey=n href="file:///C:/Users/donpope_tang/Documents/docbook/device-drivers/re408.html">Next</A></TD></TR></TBODY></TABLE>
<HR>
</DIV>
<DIV class=refentry><A name=API-seqno-fence-init></A>
<DIV class=titlepage></DIV>
<DIV class=refnamediv>
<H2>Name</H2>
<P>seqno_fence_init &#8212; initialize a seqno fence </P></DIV>
<DIV class=refsynopsisdiv>
<H2>Synopsis</H2>
<DIV class=funcsynopsis>
<TABLE style="cellspacing: 0; cellpadding: 0" class=funcprototype-table border=0 summary="Function synopsis">
<TBODY>
<TR>
<TD><CODE class=funcdef>void <B class=fsfunc>seqno_fence_init </B>(</CODE></TD>
<TD>struct seqno_fence * <VAR class=pdparam>fence</VAR>, </TD></TR>
<TR>
<TD>&nbsp;</TD>
<TD>spinlock_t * <VAR class=pdparam>lock</VAR>, </TD></TR>
<TR>
<TD>&nbsp;</TD>
<TD>struct dma_buf * <VAR class=pdparam>sync_buf</VAR>, </TD></TR>
<TR>
<TD>&nbsp;</TD>
<TD>uint32_t <VAR class=pdparam>context</VAR>, </TD></TR>
<TR>
<TD>&nbsp;</TD>
<TD>uint32_t <VAR class=pdparam>seqno_ofs</VAR>, </TD></TR>
<TR>
<TD>&nbsp;</TD>
<TD>uint32_t <VAR class=pdparam>seqno</VAR>, </TD></TR>
<TR>
<TD>&nbsp;</TD>
<TD>enum seqno_fence_condition <VAR class=pdparam>cond</VAR>, </TD></TR>
<TR>
<TD>&nbsp;</TD>
<TD>const struct fence_ops * <VAR class=pdparam>ops</VAR><CODE>)</CODE>;</TD></TR></TBODY></TABLE>
<DIV class=funcprototype-spacer>&nbsp;</DIV></DIV></DIV>
<DIV class=refsect1><A name=idp45018932></A>
<H2>Arguments</H2>
<DIV class=variablelist>
<DL class=variablelist>
<DT><SPAN class=term><EM class=parameter><CODE>fence</CODE></EM></SPAN> 
<DD>
<P>seqno_fence to initialize </P>
<DT><SPAN class=term><EM class=parameter><CODE>lock</CODE></EM></SPAN> 
<DD>
<P>pointer to spinlock to use for fence </P>
<DT><SPAN class=term><EM class=parameter><CODE>sync_buf</CODE></EM></SPAN> 
<DD>
<P>buffer containing the memory location to signal on </P>
<DT><SPAN class=term><EM class=parameter><CODE>context</CODE></EM></SPAN> 
<DD>
<P>the execution context this fence is a part of </P>
<DT><SPAN class=term><EM class=parameter><CODE>seqno_ofs</CODE></EM></SPAN> 
<DD>
<P>the offset within <EM class=parameter><CODE>sync_buf</CODE></EM> </P>
<DT><SPAN class=term><EM class=parameter><CODE>seqno</CODE></EM></SPAN> 
<DD>
<P>the sequence # to signal on </P>
<DT><SPAN class=term><EM class=parameter><CODE>cond</CODE></EM></SPAN> 
<DD>
<P>fence wait condition </P>
<DT><SPAN class=term><EM class=parameter><CODE>ops</CODE></EM></SPAN> 
<DD>
<P>the fence_ops for operations on this seqno fence </P></DD></DL></DIV></DIV>
<DIV class=refsect1><A name=idp45028148></A>
<H2>Description</H2>
<P>This function initializes a struct seqno_fence with passed parameters, and takes a reference on sync_buf which is released on fence destruction. </P>
<P>A seqno_fence is a dma_fence which can complete in software when enable_signaling is called, but it also completes when (s32)((sync_buf)[seqno_ofs] - seqno) &gt;= 0 is true </P>
<P>The seqno_fence will take a refcount on the sync_buf until it's destroyed, but actual lifetime of sync_buf may be longer if one of the callers take a reference to it. </P>
<P>Certain hardware have instructions to insert this type of wait condition in the command stream, so no intervention from software would be needed. This type of fence can be destroyed before completed, however a reference on the sync_buf dma-buf can be taken. It is encouraged to re-use the same dma-buf for sync_buf, since mapping or unmapping the sync_buf to the device's vm can be expensive. </P>
<P>It is recommended for creators of seqno_fence to call fence_signal before destruction. This will prevent possible issues from wraparound at time of issue vs time of check, since users can check fence_is_signaled before submitting instructions for the hardware to wait on the fence. However, when ops.enable_signaling is not called, it doesn't have to be done as soon as possible, just before there's any real danger of seqno wraparound. </P></DIV></DIV>
<DIV class=navfooter>
<HR>

<TABLE summary="Navigation footer" width="100%">
<TBODY>
<TR>
<TD width="40%" align=left><A accessKey=p href="file:///C:/Users/donpope_tang/Documents/docbook/device-drivers/API-to-seqno-fence.html">Prev</A>&nbsp;</TD>
<TD width="20%" align=middle><A accessKey=u href="file:///C:/Users/donpope_tang/Documents/docbook/device-drivers/ch02s03.html">Up</A></TD>
<TD width="40%" align=right>&nbsp;<A accessKey=n href="file:///C:/Users/donpope_tang/Documents/docbook/device-drivers/re408.html">Next</A></TD></TR>
<TR>
<TD vAlign=top width="40%" align=left><SPAN class=phrase>to_seqno_fence</SPAN>&nbsp;</TD>
<TD width="20%" align=middle><A accessKey=h href="file:///C:/Users/donpope_tang/Documents/docbook/device-drivers/index.html">Home</A></TD>
<TD vAlign=top width="40%" align=right>&nbsp; .//drivers/dma-buf/reservation.c </TD></TR></TBODY></TABLE></DIV>