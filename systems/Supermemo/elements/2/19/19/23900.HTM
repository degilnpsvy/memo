<P class=docText><FONT class=extract></FONT></P><A name=ch02tab04></A>
<P>
<TABLE cellSpacing=0 cellPadding=4 rules=rows frame=hsides>
<CAPTION>
<H5 class=docTableTitle>Table 2.2. Summary of Kernel Programming Interfaces</H5></CAPTION>
<COLGROUP span=3 align=left>
<COL width=100>
<COL width=150>
<COL width=300></COLGROUP>
<THEAD>
<TR>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left><A name=iddle1048></A><A name=iddle1740></A><A name=iddle1741></A><A name=iddle1836></A><A name=iddle2354></A><A name=iddle2580></A><A name=iddle2836></A><A name=iddle2838></A><A name=iddle2839></A><A name=iddle2840></A><A name=iddle3022></A><A name=iddle3131></A><A name=iddle3132></A><A name=iddle3721></A><A name=iddle3885></A><A name=iddle4130></A><A name=iddle4134></A><A name=iddle4136></A><A name=iddle4138></A><A name=iddle4258></A><A name=iddle4259></A><A name=iddle4260></A><A name=iddle4261></A><A name=iddle4265></A><A name=iddle4378></A><A name=iddle4617></A>Kernel Interface</TH>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left>Location</TH>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left>Description</TH></TR></THEAD>
<TBODY>
<TR>
<TD class=docTableCell vAlign=top align=left>
<DIV class=docText><PRE><FONT class=extract>time_after()
time_after_eq()
time_before()
ime_before_eq()</FONT></PRE></DIV><BR></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>include/linux/jiffies.h</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Compares the current value of <TT>jiffies</TT> with a specified future value</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>schedule_timeout()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>kernel/timer.c</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="has elapsed"></A><FONT class=extract>Schedules a process to run after a specified timeout has elapsed</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>wait_event_timeout()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>include/linux/wait.h</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="condition becomes"></A><FONT class=extract>Resumes execution if a specified condition becomes true or if a timeout occurs</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>DEFINE_TIMER()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>include/linux/timer.h</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Statically defines a timer</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>init_timer()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>kernel/timer.c</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Dynamically defines a timer</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>add_timer()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>include/linux/timer.h</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Schedules the timer for execution after the timeout has elapsed</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>mod_timer()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>kernel/timer.c</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Changes timer expiration</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>timer_pending()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>include/linux/timer.h</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Checks if a timer is pending at the moment</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>udelay()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>include/asm-your-arch/delay.h arch/your-arch/lib/delay.c</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Busy-waits for the specified number of microseconds</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>rdtsc()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>include/asm-x86/msr.h</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Gets the value of the TSC on Pentium-compatible processors</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>do_gettimeofday()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>kernel/time.c</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Obtains wall time</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>local_irq_disable()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>include/asm-your-arch/system.h</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Disables interrupts on the local CPU</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>local_irq_enable()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>include/asm-your-arch/system.h</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Enables interrupts on the local CPU</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>local_irq_save()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>include/asm-your-arch/system.h</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Saves interrupt state and disables interrupts</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>local_irq_restore()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>include/asm-your-arch/system.h</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name=matching></A><FONT class=extract>Restores interrupt state to what it was when the matching <TT>local_irq_save()</TT> was called</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>spin_lock()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>include/linux/spinlock.h kernel/spinlock.c</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Acquires a spinlock.</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>spin_unlock()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>include/linux/spinlock.h</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Releases a spinlock</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>spin_lock_irqsave()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>include/linux/spinlock.h kernel/spinlock.c</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="on local"></A><FONT class=extract>Saves interrupt state, disables interrupts and preemption on local CPU, and locks their critical section to regulate access by other CPUs</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>spin_unlock_irqrestore()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>include/linux/spinlock.h kernel/spinlock.c</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Restores interrupt state and preemption and releases the lock</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>DEFINE_MUTEX()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>include/linux/mutex.h</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Statically declares a mutex</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><A name=iddle1146></A><A name=iddle1147></A><A name=iddle1148></A><A name=iddle1149></A><A name=iddle1482></A><A name=iddle1738></A><A name=iddle1849></A><A name=iddle1850></A><A name=iddle1851></A><A name=iddle2352></A><A name=iddle2657></A><A name=iddle2666></A><A name=iddle2711></A><A name=iddle3133></A><A name=iddle3725></A><A name=iddle3727></A><A name=iddle3729></A><A name=iddle3730></A><A name=iddle3731></A><A name=iddle3732></A><A name=iddle3733></A><A name=iddle3734></A><A name=iddle3982></A><A name=iddle4244></A><A name=iddle4245></A><A name=iddle4400></A><A name=iddle4401></A><A name=iddle4402></A><A name=iddle4602></A><A name=iddle4651></A><A name=iddle4653></A><A name=iddle4655></A><A name=iddle4658></A><TT><FONT class=extract>mutex_init()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>include/linux/mutex.h</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Dynamically declares a mutex</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>mutex_lock()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>kernel/mutex.c</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Acquires a mutex</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>mutex_unlock()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>kernel/mutex.c</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Releases a mutex</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>DECLARE_MUTEX()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>include/asm-your-arch/semaphore.h</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Statically declares a semaphore</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>init_MUTEX()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>include/asm-your-arch/semaphore.h</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Dynamically declares a semaphore</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>up()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>arch/your-arch/kernel/semaphore.c</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Acquires a semaphore</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>down()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>arch/your-arch/kernel/semaphore.c</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Releases a semaphore</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left>
<DIV class=docText><PRE><FONT class=extract>atomic_inc()
atomic_inc_and_test()
atomic_dec()
atomic_dec_and_test()
clear_bit()
set_bit()
test_bit()
test_and_set_bit()</FONT></PRE></DIV><BR></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>include/asm-your-arch/atomic.h</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Atomic operators to perform lightweight operations</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left>
<DIV class=docText><PRE><FONT class=extract>read_lock()
read_unlock()
read_lock_irqsave()
read_lock_irqrestore()
write_lock()
write_unlock()
write_lock_irqsave()
write_lock_irqrestore()</FONT></PRE></DIV><BR></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>include/linux/spinlock.h kernel/spinlock.c</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Reader-writer variant of spinlocks</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left>
<DIV class=docText><PRE><FONT class=extract>down_read()
up_read()
down_write()
up_write()</FONT></PRE></DIV><BR></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>kernel/rwsem.c</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Reader-writer variant of semaphores</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left>
<DIV class=docText><PRE><FONT class=extract>read_seqbegin()
read_seqretry()
write_seqlock()
write_sequnlock()</FONT></PRE></DIV><BR></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>include/linux/seqlock.h</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Seqlock operations</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left>
<DIV class=docText><PRE><FONT class=extract>kmalloc()</FONT></PRE></DIV><BR></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>include/linux/slab.h mm/slab.c</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Allocates physically contiguous memory from <TT>ZONE_NORMAL</TT></FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>kzalloc()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>include/linux/slab.h mm/util.c</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Obtains zeroed kmalloced memory</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>kfree()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>mm/slab.c</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Releases kmalloced memory</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>vmalloc()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>mm/vmalloc.c</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="to be"></A><FONT class=extract>Allocates virtually contiguous memory that is not guaranteed to be physically contiguous.</FONT></TD></TR></TBODY></TABLE>