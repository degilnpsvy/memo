<H4 id=title-ID0EXSPM class=docSection2Title>Freeing Initrd Memory: 387k Freed</H4>
<P class=docText><SPAN class=docEmphasis><FONT class=extract>Initrd</FONT></SPAN><A name="by the"></A><FONT class=extract> is a memory-resident virtual disk image loaded by the bootloader. It's mounted as the initial root filesystem after the kernel boots, to hold additional dynamically </FONT><A name=iddle1319></A><A name=iddle2036></A><A name=iddle2060></A><A name=iddle2067></A><A name=iddle2319></A><A name=iddle2362></A><A name=iddle2543></A><A name=iddle3009></A><A name=iddle3010></A><A name=iddle3841></A><A name="that holds"></A><FONT class=extract>loadable modules required to mount the disk partition that holds the actual root filesystem. Because the kernel runs on different hardware platforms that use diverse storage controllers, it's not feasible for distributions to enable device drivers for all possible disk drives in the base kernel image. Drivers specific to your system's storage device are packed inside initrd and loaded after the kernel boots, but before the root filesystem is mounted. To create an initrd image, use the <TT>mkinitrd</TT> command.</FONT></P>
<P class=docText><A name="kernel includes"></A><FONT class=extract>The 2.6 kernel includes a feature called <SPAN class=docEmphasis>initramfs</SPAN></FONT><A name="disk "></A><FONT class=extract> that bring several benefits over initrd. Whereas the latter emulates a disk (hence called <SPAN class=docEmphasis>initramdisk</SPAN></FONT><A name=or></A><FONT class=extract> or <SPAN class=docEmphasis>initrd</SPAN></FONT><A name="the overheads"></A><FONT class=extract>) and suffers the overheads associated with the Linux block I/O subsystem such as caching, the former essentially gets the cache itself mounted like a filesystem (hence called <SPAN class=docEmphasis>initramfs</SPAN>).</FONT></P>
<P class=docText><A name="the page"></A><FONT class=extract>Initramfs, like the page cache over which it's built, grows and shrinks dynamically unlike initrd and, hence, reduces memory wastage. Also, unlike initrd, which requires you to include the associated filesystem driver (e.g., EXT2 drivers if you have an EXT2 filesystem on your initrd), initramfs needs no filesystem support. The initramfs code is tiny because it's just a small layer on top of the page cache.</FONT></P>
<P class=docText><A name=compressed></A><FONT class=extract>You can pack your initial root filesystem into a compressed <SPAN class=docEmphasis>cpio</SPAN> archive<SUP class=docFootnote><A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch02.html#ch02fn02">[2]</A></SUP></FONT><A name="kernel command"></A><FONT class=extract> and pass it to the kernel command line using the <TT>initrd=</TT></FONT><A name="image using"></A><FONT class=extract> argument or build it as part of the kernel image using the <TT>INITRAMFS_SOURCE</TT></FONT><A name="you may"></A><FONT class=extract> menu option during kernel configuration. With the latter, you may either provide the filename of a cpio archive or the path name to a directory tree containing your initramfs layout. During boot, the kernel extracts the files into an initramfs root filesystem (also called <SPAN class=docEmphasis>rootfs</SPAN>) and executes a top-level <SPAN class=docEmphasis>/init</SPAN></FONT><A name="an initial"></A><FONT class=extract> program if it finds one. This method of obtaining an initial rootfs is especially useful for embedded platforms, where all system resources are at a premium. To create an initramfs image, use <TT>mkinitramfs</TT></FONT><A name=at></A><FONT class=extract>. Look at <SPAN class=docEmphasis>Documentation/filesystems/ramfs-rootfs-initramfs.txt</SPAN> for more documentation.</FONT></P>
<BLOCKQUOTE>
<P class=docFootnote><SUP><A name=ch02fn02><FONT class=extract>[2]</FONT></A></SUP><A name=from></A><FONT class=extract> cpio is a UNIX file archival format. You can download it from </FONT><A class=docLink href="http://www.gnu.org/software/cpio" target=_blank><FONT class=extract>www.gnu.org/software/cpio</FONT></A><FONT class=extract>.</FONT></P></BLOCKQUOTE>
<P class=docText><A name="In this"></A>In this case, we are using initramfs by supplying a compressed cpio archive of the initial root filesystem to the kernel using the <TT>initrd=</TT><A name="the contents"></A> command-line argument. <FONT class=extract>After unpacking the contents of the archive into rootfs, the kernel frees the memory where the archive resides (387K in this case) and announces the above boot message. The freed pages are then doled out to other parts of the kernel that request memory.</FONT></P>
<P class=docText><A name="discussed in"></A>As discussed in <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch18.html#ch18">Chapter 18</A><A name="actual root"></A>, initrd and initramfs are sometimes used to hold the actual root filesystem on embedded devices during development.