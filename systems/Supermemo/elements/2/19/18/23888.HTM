<P class=docText>The kernel has specialized locking primitives in its repertoire that help improve performance under specific conditions. Using a mutual-exclusion scheme tailored to your needs makes your code more powerful. Let's take a look at some of the specialized exclusion mechanisms.</P><A name=ch02lev2sec18></A>
<H4 id=title-ID0E2YOM class=docSection2Title><FONT class=extract>Atomic Operators</FONT></H4>
<P class=docText><SPAN class=docEmphasis><FONT class=extract>Atomic operators</FONT></SPAN><A name="such as"></A><FONT class=extract> are used to perform lightweight one-shot operations such as bumping counters, conditional increments, and setting bit positions. Atomic operations are guaranteed to be serialized and do not need locks for protection against concurrent access. The implementation of atomic operators is architecture-dependent.</FONT></P>
<P class=docText><A name="references before"></A><FONT class=extract>To check whether there are any remaining data references before freeing a kernel network buffer (called an <TT>skbuff</TT>), the <TT>skb_release_data()</TT></FONT><A name="defined in"></A><FONT class=extract> routine defined in <SPAN class=docEmphasis>net/core/skbuff.c</SPAN> does the following:</FONT></P>
<DIV class=docText><PRE><FONT class=extract>if (!skb-&gt;cloned ||
  /* Atomically decrement and check if the returned value is zero */
    !atomic_sub_return(skb-&gt;nohdr ? (1 &lt;&lt; SKB_DATAREF_SHIFT) + 1 :
                       1,&amp;skb_shinfo(skb)-&gt;dataref)) {
  /* ... */
  kfree(skb-&gt;head);
}</FONT></PRE></DIV><BR>
<P class=docText><FONT class=extract>While <TT>skb_release_data()</TT> is thus executing, another thread using <TT>skbuff_clone()</TT> (defined in the same file) might be simultaneously incrementing the data reference counter:</FONT></P>
<DIV class=docText><PRE><FONT class=extract>/* ... */
/* Atomically bump up the data reference count */
atomic_inc(&amp;(skb_shinfo(skb)-&gt;dataref));
/* ... */</FONT></PRE></DIV><BR>
<P class=docText><A name=iddle1553></A><A name=iddle2467></A><A name=iddle2558></A><A name=iddle2844></A><A name=iddle3726></A><A name=iddle3728></A><A name=iddle3735></A><A name=iddle4654></A><A name=iddle4656></A><A name=iddle4657></A><A name="from being"></A><FONT class=extract>The use of atomic operators protects the data reference counter from being trampled by these two threads. It also eliminates the hassle of using locks to protect a single integer variable from concurrent access.</FONT></P>
<P class=docText><A name="The kernel"></A><FONT class=extract>The kernel also supports operators such as <TT>set_bit()</TT>, <TT>clear_bit()</TT>, and <TT>test_and_set_bit()</TT></FONT><A name="engage in"></A><FONT class=extract> to atomically engage in bit manipulations. Look at <SPAN class=docEmphasis>include/asm-your-arch/atomic.h</SPAN></FONT><A name="the atomic"></A><FONT class=extract> for the atomic operators supported on your architecture.</FONT></P><A name=ch02lev2sec19></A>
<H4 id=title-ID0EN4OM class=docSection2Title><FONT class=extract>Reader-Writer Locks</FONT></H4>
<P class=docText><A name="If the"></A><FONT class=extract>Another specialized concurrency regulation mechanism is a reader-writer variant of spinlocks. If the usage of a critical section is such that separate threads either read from or write to a shared data structure, but don't do both, these locks are a natural fit. Multiple reader threads are allowed inside a critical region simultaneously. Reader spinlocks are defined as follows:</FONT></P>
<DIV class=docText><PRE><FONT class=extract>rwlock_t myrwlock = RW_LOCK_UNLOCKED;

read_lock(&amp;myrwlock);     /* Acquire reader lock */
/* ... Critical Region ... */
read_unlock(&amp;myrwlock);   /* Release lock */</FONT></PRE></DIV><BR>
<P class=docText><A name="a critical"></A><FONT class=extract>However, if a writer thread enters a critical section, other reader or writer threads are not allowed inside. To use writer spinlocks, you would write this:</FONT></P>
<DIV class=docText><PRE><FONT class=extract>rwlock_t myrwlock = RW_LOCK_UNLOCKED;

write_lock(&amp;myrwlock);    /* Acquire writer lock */
/* ... Critical Region ... */
write_unlock(&amp;myrwlock);  /* Release lock */</FONT></PRE></DIV><BR>
<P class=docText><FONT class=extract>Look at the IPX routing code present in <SPAN class=docEmphasis>net/ipx/ipx_route.c</SPAN> for a real-life example of a reader-writer spinlock. A reader-writer lock called <TT>ipx_routes_lock</TT></FONT><A name="need to"></A><FONT class=extract> protects the IPX routing table from simultaneous access. Threads that need to look up the routing table to forward packets request reader locks. Threads that need to add or delete entries from the routing table acquire writer locks. This improves performance because there are usually far more instances of routing table lookups than routing table updates.</FONT></P>
<P class=docText><A name="irq variants"></A><FONT class=extract>Like regular spinlocks, reader-writer locks also have corresponding irq variants&#37413;&#25871;amely, <TT>read_lock_irqsave()</TT>, <TT>read_lock_irqrestore()</TT>, <TT>write_lock_irqsave()</TT>, </FONT><A name=iddle3719></A><A name=iddle3724></A><A name=iddle3931></A><A name=iddle3932></A><A name=iddle4652></A><FONT class=extract>and <TT>write_lock_irqrestore()</TT></FONT><A name="those of"></A><FONT class=extract>. The semantics of these functions are similar to those of regular spinlocks.</FONT></P>
<P class=docText><A name="locks or"></A><FONT class=extract>Sequence locks or <SPAN class=docEmphasis>seqlocks</SPAN></FONT><A name="This is"></A><FONT class=extract>, introduced in the 2.6 kernel, are reader-writer locks where writers are favored over readers. This is useful if write operations on a variable far outnumber read accesses. An example is the <TT>jiffies_64</TT></FONT><A name="variable discussed"></A><FONT class=extract> variable discussed earlier in this chapter. Writer threads do not wait for readers who may be inside a critical section. Because of this, reader threads may discover that their entry inside a critical section has failed and may need to retry:</FONT></P>
<DIV class=docText><PRE><FONT class=extract>u64 get_jiffies_64(void) /* Defined in <SPAN class=docEmphasis>kernel/time.c</SPAN> */
{
  unsigned long seq;
  u64 ret;
  do {
    seq = read_seqbegin(&amp;xtime_lock);
    ret = jiffies_64;
  } while (read_seqretry(&amp;xtime_lock, seq));
  return ret;
}</FONT></PRE></DIV><BR>
<P class=docText><A name="critical regions"></A><FONT class=extract>Writers protect critical regions using <TT>write_seqlock()</TT> and <TT>write_sequnlock()</TT>.</FONT></P>
<P class=docText><A name="kernel introduced"></A><FONT class=extract>The 2.6 kernel introduced another mechanism called <SPAN class=docEmphasis>Read-Copy Update</SPAN></FONT><A name="basic idea"></A><FONT class=extract> (RCU), which yields improved performance when readers far outnumber writers. The basic idea is that reader threads can execute without locking. Writer threads are more complex. They perform update operations on a copy of the data structure and replace the pointer that readers see. The original copy is maintained until the next context switch on all CPUs to ensure completion of all ongoing read operations. Be aware that using RCU is more involved than using the primitives discussed thus far and should be used only if you are sure that it's the right tool for the job. RCU data structures and interface functions are defined in <SPAN class=docEmphasis>include/linux/rcupdate.h.</SPAN> There is ample documentation in <SPAN class=docEmphasis>Documentation/RCU/*</SPAN>.</FONT></P>
<P class=docText><A name=at></A><FONT class=extract>For an RCU usage example, look at <SPAN class=docEmphasis>fs/dcache.c.</SPAN></FONT><A name="in a"></A><FONT class=extract> On Linux, each file is associated with directory entry information (stored in a structure called <SPAN class=docEmphasis>dentry</SPAN></FONT><A name="data "></A><FONT class=extract>), metadata information (stored in an inode), and actual data (stored in data blocks). Each time you operate on a file, the components in the file path are parsed, and the corresponding dentries are obtained. The dentries are kept cached in a data structure called the <SPAN class=docEmphasis>dcache</SPAN>, to speed </FONT><A name=iddle1550></A><A name=iddle1684></A><A name=iddle2556></A><A name=iddle3705></A><A name="lookups is"></A><FONT class=extract>up future operations. At any time, the number of dcache lookups is much more than dcache updates, so references to the dcache are protected using RCU primitives.</FONT></P><A name=ch02lev2sec20></A>
<H4 id=title-ID0E2CPM class=docSection2Title><FONT class=extract>Debugging</FONT></H4>
<P class=docText><A name="are generally"></A><FONT class=extract>Concurrency-related problems are generally hard to debug because they are usually difficult to reproduce. It's a good idea to enable SMP (<TT>CONFIG_SMP</TT>) and preemption (<TT>CONFIG_PREEMPT</TT></FONT><A name="is going"></A><FONT class=extract>) while compiling and testing your code, even if your production kernel is going to run on a UP machine with preemption disabled. There is a kernel configuration option under <SPAN class=docEmphasis><A name="Kernel hacking"></A>Kernel hacking</SPAN> called <SPAN class=docEmphasis>Spinlock and rw-lock debugging</SPAN> (<TT>CONFIG_DEBUG_SPINLOCK</TT></FONT><A name="help you"></A><FONT class=extract>) that can help you catch some common spinlock errors. Also available are tools such as lockmeter (</FONT><A class=docLink href="http://oss.sgi.com/projects/lockmeter/" target=_blank><FONT class=extract>http://oss.sgi.com/projects/lockmeter/</FONT></A><A name="collect lock"></A><FONT class=extract>) that collect lock-related statistics.</FONT></P>
<P class=docText><A name="lock an"></A><FONT class=extract>A common concurrency problem occurs when you forget to lock an access to a shared resource. This results in different threads "racing" through that access in an unregulated manner. The problem, called a <SPAN class=docEmphasis>race condition</SPAN></FONT><A name="of occasional"></A><FONT class=extract>, might manifest in the form of occasional strange code behavior.</FONT></P>
<P class=docText><A name="locks in"></A><FONT class=extract>Another potential problem arises when you miss releasing held locks in certain code paths, resulting in deadlocks. To understand this, consider the following example:</FONT></P>
<DIV class=docText><PRE><FONT class=extract>spin_lock(&amp;mylock);     /* Acquire lock */

/* ... Critical Section ... */

if (error) {            /* This error condition occurs rarely */
  return -EIO; /* Forgot to release the lock! */
}

spin_unlock(&amp;mylock);   /* Release lock */</FONT></PRE></DIV><BR>
<P class=docText><A name="any thread"></A><FONT class=extract>After the occurrence of the error condition, any thread trying to acquire <TT>mylock</TT> gets deadlocked, and the kernel might freeze.</FONT></P>
<P class=docText><A name="after you"></A><FONT class=extract>If the problem first manifests months or years after you write the code, it'll be all the more tough to go back and debug it. (There is a related debugging example in the section "</FONT><A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch21lev1sec3.html#ch21lev2sec14"><FONT class=extract>Kdump</FONT></A><FONT class=extract>" in </FONT><A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch21.html#ch21"><FONT class=extract>Chapter 21</FONT></A><A name="To avoid"></A><FONT class=extract>, "Debugging Device Drivers.") To avoid such unpleasant encounters, concurrency logic should be designed when you architect your software.</FONT>