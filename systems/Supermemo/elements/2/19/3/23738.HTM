As stated above, struct device_driver objects are statically<BR>allocated. Below is an example declaration of the eepro100<BR>driver. This declaration is hypothetical only; it relies on the driver<BR>being converted completely to the new model. 
<P></P>
<P>static struct device_driver eepro100_driver = {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .name&nbsp;&nbsp;= "eepro100",<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .bus&nbsp;&nbsp;= &amp;pci_bus_type,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .probe&nbsp;&nbsp;= eepro100_probe,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .remove&nbsp;&nbsp;= eepro100_remove,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .suspend&nbsp;&nbsp;= eepro100_suspend,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; .resume&nbsp;&nbsp;= eepro100_resume,<BR>};</P>
<P>Most drivers will not be able to be converted completely to the new<BR>model because the bus they belong to has a bus-specific structure with<BR>bus-specific fields that cannot be generalized. </P>
<P>The most common example of this are device ID structures. A driver<BR>typically defines an array of device IDs that it supports. The format<BR>of these structures and the semantics for comparing device IDs are<BR>completely bus-specific. Defining them as bus-specific entities would<BR>sacrifice type-safety, so we keep bus-specific structures around.