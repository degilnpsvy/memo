<H4 id=title-ID0EFJPM class=docSection2Title>Process States and Wait Queues</H4>
<P class=docText><FONT class=extract>Here's the code region from </FONT><A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch03.html#ch03ex01"><FONT class=extract>Listing 3.1</FONT></A><A name="waiting for"></A><FONT class=extract> that puts mykthread to sleep while waiting for events:</FONT></P>
<DIV class=docText><PRE><FONT class=extract>add_wait_queue(&amp;myevent_waitqueue, &amp;wait);
for (;;) {

  /* ... */
  set_current_state(TASK_INTERRUPTIBLE);
  schedule();    /* Relinquish the processor */
  /* Point A */

  /* ... */
}
set_current_state(TASK_RUNNING);
remove_wait_queue(&amp;myevent_waitqueue, &amp;wait);</FONT></PRE></DIV><BR>
<P class=docText><A name=iddle1676></A><A name=iddle2031></A><A name=iddle2032></A><A name=iddle2444></A><A name=iddle3794></A><A name=iddle3867></A><A name=iddle3985></A><A name=iddle4153></A><A name=iddle4212></A><A name=iddle4213></A><A name=iddle4214></A><A name=iddle4215></A><A name=iddle4216></A><A name=iddle4293></A><A name=iddle4389></A><A name=iddle4622></A><A name=iddle4677></A><A name="on two"></A><FONT class=extract>The operation of the preceding snippet is based on two concepts: <SPAN class=docEmphasis>wait queues</SPAN> and <SPAN class=docEmphasis>process states</SPAN>.</FONT></P>
<P class=docText><A name="queues hold"></A><FONT class=extract>Wait queues hold threads that need to wait for an event or a system resource. Threads in a wait queue go to sleep until they are woken up by another thread or an interrupt handler that is responsible for detecting the event. Queuing and dequeuing are respectively done using <TT>add_wait_queue()</TT> and <TT>remove_wait_queue()</TT>, and waking up queued tasks is accomplished via <TT>wake_up_interruptible()</TT>.</FONT></P>
<P class=docText><A name="the following"></A><FONT class=extract>A kernel thread (or a normal process) can be in any of the following process states: <SPAN class=docEmphasis>running</SPAN>, <SPAN class=docEmphasis>interruptible</SPAN>, <SPAN class=docEmphasis>uninterruptible</SPAN>, <SPAN class=docEmphasis>zombie</SPAN>, <SPAN class=docEmphasis>stopped</SPAN>, <SPAN class=docEmphasis>traced</SPAN></FONT><A name=or></A><FONT class=extract>, or <SPAN class=docEmphasis>dead</SPAN></FONT><A name="are defined"></A><FONT class=extract>. These states are defined in <SPAN class=docEmphasis>include</SPAN>/<SPAN class=docEmphasis>linux</SPAN>/<SPAN class=docEmphasis>sched</SPAN>.<SPAN class=docEmphasis>h</SPAN>:</FONT></P>
<UL>
<LI>
<P class=docList><A name="process in"></A><FONT class=extract>A process in the <SPAN class=docEmphStrong>running</SPAN> state (<TT>TASK_RUNNING</TT></FONT><A name="candidate for"></A><FONT class=extract>) is in the scheduler run queue and is a candidate for getting CPU time allotted by the scheduler.</FONT></P>
<LI>
<P class=docList><FONT class=extract>A task in the <SPAN class=docEmphStrong>interruptible</SPAN> state (<TT>TASK_INTERRUPTIBLE</TT></FONT><A name="to occur"></A><FONT class=extract>) is waiting for an event to occur and is not in the scheduler run queue. When the task gets woken up, or if a signal is delivered to it, it re-enters the run queue.</FONT></P>
<LI>
<P class=docList><FONT class=extract>The <SPAN class=docEmphStrong>uninterruptible</SPAN> state (<TT>TASK_UNINTERRUPTIBLE</TT>) is similar to the <SPAN class=docEmphStrong>interruptible</SPAN></FONT><A name="put the"></A><FONT class=extract> state except that receipt of a signal will not put the task back into the run queue.</FONT></P>
<LI>
<P class=docList><FONT class=extract>A <SPAN class=docEmphStrong>stopped</SPAN> task (<TT>TASK_STOPPED</TT></FONT><A name="of certain"></A><FONT class=extract>) has stopped execution due to receipt of certain signals.</FONT></P>
<LI>
<P class=docList><A name="the ptrace"></A><FONT class=extract>If an application such as strace is using the ptrace support in the kernel to intercept a task, it'll be in the <SPAN class=docEmphStrong>traced</SPAN> state (<TT>TASK_TRACED</TT>).</FONT></P>
<LI>
<P class=docList><A name="task in"></A><FONT class=extract>A task in the <SPAN class=docEmphStrong>zombie</SPAN> state (<TT>EXIT_ZOMBIE</TT></FONT><A name="to complete"></A><FONT class=extract>) has terminated, but its parent did not wait for the task to complete. An exiting task is either in the <TT>EXIT_ZOMBIE</TT></FONT><A name="state or"></A><FONT class=extract> state or the dead (<TT>EXIT_DEAD</TT>) state.</FONT></P></LI></UL>
<P class=docText><A name=use></A><FONT class=extract>You can use <TT>set_current_state()</TT></FONT><A name="set the"></A><FONT class=extract> to set the run state of your kernel thread.</FONT></P>
<P class=docText><A name="on a"></A>Let's now turn back to the preceding code snippet. mykthread sleeps on a wait queue (<TT>myevent_waitqueue</TT>) and changes its state to <TT>TASK_INTERRUPTIBLE</TT><A name="out of"></A>, signaling its desire to opt out of the scheduler run queue. The call to <TT>schedule()</TT><A name="task from"></A> asks the scheduler to choose and run a new task from its run queue. When code responsible for health monitoring wakes up mykthread using <TT>wake_up_interruptible(&amp;myevent_waitqueue)</TT><A name="the scheduler"></A>, the thread is put back into the scheduler run queue. The process state also gets simultaneously changed to <TT>TASK_RUNNING</TT>, so there is no race condition even <A name=iddle2608></A><A name=iddle2636></A><A name=iddle3865></A><A name=iddle4551></A><A name="the task"></A>if the wake up occurs between the time the task state is set to <TT>TASK_INTERRUPTIBLE</TT><A name="the time"></A> and the time <TT>schedule()</TT><A name="if a"></A> is called. The thread also gets back into the run queue if a <TT>SIGKILL</TT><A name="signal is"></A> signal is delivered to it. When the scheduler subsequently picks mykthread from the run queue, execution resumes from Point A.