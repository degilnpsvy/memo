<FONT class=extract>void input_set_capability(struct input_dev *dev, unsigned int type, unsigned int code);</FONT>
<P></P>
<P>/**<BR>&nbsp;* input_set_events_per_packet - tell handlers about the driver event rate<BR>&nbsp;* @dev: the input device used by the driver<BR>&nbsp;* @n_events: the average number of events between calls to input_sync()<BR>&nbsp;*<BR>&nbsp;* If the event rate sent from a device is unusually large, use this<BR>&nbsp;* function to set the expected event rate. This will allow handlers<BR>&nbsp;* to set up an appropriate buffer size for the event stream, in order<BR>&nbsp;* to minimize information loss.<BR>&nbsp;*/<BR>static inline void input_set_events_per_packet(struct input_dev *dev, int n_events)<BR>{<BR>&nbsp;dev-&gt;hint_events_per_packet = n_events;<BR>}</P>
<P>void input_alloc_absinfo(struct input_dev *dev);<BR>void input_set_abs_params(struct input_dev *dev, unsigned int axis,<BR>&nbsp;&nbsp;&nbsp;&nbsp; int min, int max, int fuzz, int flat);</P>
<P>#define INPUT_GENERATE_ABS_ACCESSORS(_suffix, _item)&nbsp;&nbsp;&nbsp;\<BR>static inline int input_abs_get_##_suffix(struct input_dev *dev,&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsigned int axis)&nbsp;&nbsp;\<BR>{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;return dev-&gt;absinfo ? dev-&gt;absinfo[axis]._item : 0;&nbsp;&nbsp;\<BR>}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>static inline void input_abs_set_##_suffix(struct input_dev *dev,&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsigned int axis, int val)&nbsp;\<BR>{&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;input_alloc_absinfo(dev);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;if (dev-&gt;absinfo)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;dev-&gt;absinfo[axis]._item = val;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>}</P>
<P>INPUT_GENERATE_ABS_ACCESSORS(val, value)<BR>INPUT_GENERATE_ABS_ACCESSORS(min, minimum)<BR>INPUT_GENERATE_ABS_ACCESSORS(max, maximum)<BR>INPUT_GENERATE_ABS_ACCESSORS(fuzz, fuzz)<BR>INPUT_GENERATE_ABS_ACCESSORS(flat, flat)<BR>INPUT_GENERATE_ABS_ACCESSORS(res, resolution)</P>
<P>int input_scancode_to_scalar(const struct input_keymap_entry *ke,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsigned int *scancode);</P>
<P>int input_get_keycode(struct input_dev *dev, struct input_keymap_entry *ke);<BR>int input_set_keycode(struct input_dev *dev,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const struct input_keymap_entry *ke);