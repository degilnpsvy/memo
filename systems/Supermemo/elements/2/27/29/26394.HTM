<H1 lang=en id=firstHeading class=firstHeading style='OVERFLOW: visible; FONT-SIZE: 1.8em; FONT-FAMILY: "Linux Libertine", Georgia, Times, serif; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: rgb(162,169,177) 1px solid; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; FONT-STYLE: normal; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 0.25em; ORPHANS: 2; WIDOWS: 2; LETTER-SPACING: normal; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px'>Scope (computer science)</H1>
<DIV id=bodyContent class=mw-body-content style="FONT-SIZE: 0.87em; FONT-FAMILY: sans-serif; WHITE-SPACE: normal; WORD-SPACING: 0px; POSITION: relative; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(34,34,34); FONT-STYLE: normal; ORPHANS: 2; WIDOWS: 2; Z-INDEX: 0; LETTER-SPACING: normal; LINE-HEIGHT: 1.6; TEXT-INDENT: 0px; font-variant-ligatures: normal; font-variant-caps: normal; -webkit-text-stroke-width: 0px">
<DIV id=siteSub style="FONT-SIZE: 12px; DISPLAY: block">From Wikipedia, the free encyclopedia</DIV>
<DIV id=contentSub style="FONT-SIZE: 11px; WIDTH: auto; COLOR: rgb(84,84,84); MARGIN: 0px 0px 1.4em 1em; LINE-HEIGHT: 1.2em"><SPAN class=mw-redirectedfrom>&nbsp;&nbsp;(Redirected from<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Lexically scoped" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Lexically_scoped&amp;redirect=no">Lexically scoped</A>)</SPAN></DIV>
<DIV id=jump-to-nav class=mw-jump style="OVERFLOW: hidden; MARGIN-BOTTOM: 1.4em; HEIGHT: 0px; ZOOM: 1; MARGIN-TOP: -1.4em; user-select: none"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#mw-head"></A><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#p-search"></A></DIV>
<DIV lang=en id=mw-content-text class=mw-content-ltr style="DIRECTION: ltr" dir=ltr>
<P style="MARGIN: 0.5em 0px">In<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Computer programming" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Computer_programming">computer programming</A>, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>scope</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Name binding" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Name_binding">name binding</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8211; an association of a name to an entity, such as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Variable (programming)" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Variable_(programming)">variable</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8211; is the region of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Computer program" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Computer_program">computer program</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>where the binding is valid: where the name can be used to refer to the entity. Such a region is referred to as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><SPAN id=scope_block>scope block</SPAN></B>. In other parts of the program the name may refer to a different entity (it may have a different binding), or to nothing at all (it may be unbound). The scope of a binding is also known as the<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>visibility</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>of an entity, particularly in older or more technical literature &#8211; this is from the perspective of the referenced entity, not the referencing name. A scope is a part of a program that is or can be the scope for a set of bindings &#8211; a precise<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Scope (computer science)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#Definition">definition</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>is tricky, but in casual use and in practice largely corresponds to a<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Block (programming)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Block_(programming)">block</A>, a function, or a file, depending on language and type of entity. The term "scope" is also used to refer to the set of<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>all</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>entities that are visible or names that are valid within a portion of the program or at a given point in a program, which is more correctly referred to as<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>context</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>environment</I>.<SUP id=cite_ref-1 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#cite_note-1">[a]</A></SUP></P>
<P style="MARGIN: 0.5em 0px">Strictly speaking<SUP id=cite_ref-2 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#cite_note-2">[b]</A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and in practice for most programming languages, "part of a program" refers to "portion of the source code (area of text)", and is known as<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>lexical scope</B>. In some languages, however, "part of a program" refers to "portion of run time (time period during execution)", and is known as<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>dynamic scope</B>. Both of these terms are somewhat misleading &#8211; they misuse technical terms, as discussed in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Scope (computer science)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#Definition">definition</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8211; but the distinction itself is accurate and precise, and these are the standard respective terms. Lexical scope is the main focus of this article, with dynamic scope understood by contrast with lexical scope.</P>
<P style="MARGIN: 0.5em 0px">In most cases, name resolution based on lexical scope is straightforward to use and to implement, as in use one can simply read backwards in the source code to determine to which entity a name refers, and in implementation one can simply maintain a list of names and contexts when compiling or interpreting a program. Basic difficulties arise in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Name masking" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Name_masking">name masking</A>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Forward declaration" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Forward_declaration">forward declarations</A>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Variable hoisting" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Variable_hoisting">hoisting</A>, while considerably subtler ones arise with<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Non-local variable" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Non-local_variable">non-local variables</A>, particularly in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Closure (computer programming)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_programming)">closures</A>.</P>
<P style="MARGIN: 0.5em 0px"></P>
<DIV id=toc class=toc style="FONT-SIZE: 13px; BORDER-TOP: rgb(162,169,177) 1px solid; BORDER-RIGHT: rgb(162,169,177) 1px solid; BORDER-BOTTOM: rgb(162,169,177) 1px solid; ZOOM: 1; PADDING-BOTTOM: 7px; PADDING-TOP: 7px; PADDING-LEFT: 7px; BORDER-LEFT: rgb(162,169,177) 1px solid; DISPLAY: table; PADDING-RIGHT: 7px; BACKGROUND-COLOR: rgb(248,249,250)">
<DIV id=toctitle style="DIRECTION: ltr; TEXT-ALIGN: center">
<H2 style="OVERFLOW: hidden; FONT-SIZE: 13px; BORDER-TOP: 0px; FONT-FAMILY: sans-serif; BORDER-RIGHT: 0px; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 1em 0px 0.25em; BORDER-LEFT: 0px; DISPLAY: inline; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px">Contents</H2><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=toctoggle style="FONT-SIZE: 12px; user-select: none">&nbsp;[<A role=button tabIndex=0 id=togglelink style="CURSOR: pointer; TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(6,69,173)">hide</A>]&nbsp;</SPAN></DIV>
<UL style="LIST-STYLE-TYPE: none; PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.3em 0px; LIST-STYLE-IMAGE: none; PADDING-RIGHT: 0px">
<LI class="toclevel-1 tocsection-1" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#Definition"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">1</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">Definition</SPAN></A>
<UL style="LIST-STYLE-TYPE: none; PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 0px 2em; LIST-STYLE-IMAGE: none; PADDING-RIGHT: 0px">
<LI class="toclevel-2 tocsection-2" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#Lexical_scope_vs._dynamic_scope"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">1.1</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">Lexical scope vs. dynamic scope</SPAN></A></LI>
<LI class="toclevel-2 tocsection-3" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#Related_concepts"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">1.2</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">Related concepts</SPAN></A></LI></UL></LI>
<LI class="toclevel-1 tocsection-4" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#Use"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">2</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">Use</SPAN></A></LI>
<LI class="toclevel-1 tocsection-5" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#Overview"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">3</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">Overview</SPAN></A></LI>
<LI class="toclevel-1 tocsection-6" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#Levels_of_scope"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">4</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">Levels of scope</SPAN></A>
<UL style="LIST-STYLE-TYPE: none; PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 0px 2em; LIST-STYLE-IMAGE: none; PADDING-RIGHT: 0px">
<LI class="toclevel-2 tocsection-7" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#Expression_scope"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">4.1</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">Expression scope</SPAN></A></LI>
<LI class="toclevel-2 tocsection-8" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#Block_scope"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">4.2</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">Block scope</SPAN></A></LI>
<LI class="toclevel-2 tocsection-9" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#Function_scope"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">4.3</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">Function scope</SPAN></A></LI>
<LI class="toclevel-2 tocsection-10" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#File_scope"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">4.4</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">File scope</SPAN></A></LI>
<LI class="toclevel-2 tocsection-11" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#Module_scope"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">4.5</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">Module scope</SPAN></A></LI>
<LI class="toclevel-2 tocsection-12" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#Global_scope"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">4.6</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">Global scope</SPAN></A></LI></UL></LI>
<LI class="toclevel-1 tocsection-13" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#Lexical_scoping_vs._dynamic_scoping"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">5</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">Lexical scoping vs. dynamic scoping</SPAN></A></LI>
<LI class="toclevel-1 tocsection-14" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#Lexical_scoping"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">6</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">Lexical scoping</SPAN></A>
<UL style="LIST-STYLE-TYPE: none; PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 0px 2em; LIST-STYLE-IMAGE: none; PADDING-RIGHT: 0px">
<LI class="toclevel-2 tocsection-15" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#History"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">6.1</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">History</SPAN></A></LI></UL></LI>
<LI class="toclevel-1 tocsection-16" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#Dynamic_scoping"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">7</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">Dynamic scoping</SPAN></A>
<UL style="LIST-STYLE-TYPE: none; PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 0px 2em; LIST-STYLE-IMAGE: none; PADDING-RIGHT: 0px">
<LI class="toclevel-2 tocsection-17" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#Macro_expansion"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">7.1</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">Macro expansion</SPAN></A></LI></UL></LI>
<LI class="toclevel-1 tocsection-18" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#Qualified_identifiers"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">8</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">Qualified identifiers</SPAN></A></LI>
<LI class="toclevel-1 tocsection-19" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#By_language"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">9</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">By language</SPAN></A>
<UL style="LIST-STYLE-TYPE: none; PADDING-BOTTOM: 0px; TEXT-ALIGN: left; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0px 0px 0px 2em; LIST-STYLE-IMAGE: none; PADDING-RIGHT: 0px">
<LI class="toclevel-2 tocsection-20" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#C"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">9.1</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">C</SPAN></A></LI>
<LI class="toclevel-2 tocsection-21" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#C.2B.2B"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">9.2</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">C++</SPAN></A></LI>
<LI class="toclevel-2 tocsection-22" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#Go"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">9.3</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">Go</SPAN></A></LI>
<LI class="toclevel-2 tocsection-23" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#Java"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">9.4</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">Java</SPAN></A></LI>
<LI class="toclevel-2 tocsection-24" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#JavaScript"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">9.5</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">JavaScript</SPAN></A></LI>
<LI class="toclevel-2 tocsection-25" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#Lisp"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">9.6</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">Lisp</SPAN></A></LI>
<LI class="toclevel-2 tocsection-26" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#Python"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">9.7</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">Python</SPAN></A></LI>
<LI class="toclevel-2 tocsection-27" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#R"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">9.8</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">R</SPAN></A></LI></UL></LI>
<LI class="toclevel-1 tocsection-28" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#See_also"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">10</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">See also</SPAN></A></LI>
<LI class="toclevel-1 tocsection-29" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#Notes"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">11</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">Notes</SPAN></A></LI>
<LI class="toclevel-1 tocsection-30" style="MARGIN-BOTTOM: 0.1em"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#References"><SPAN class=tocnumber style="TEXT-DECORATION: ; COLOR: rgb(34,34,34); PADDING-LEFT: 0px; DISPLAY: table-cell; PADDING-RIGHT: 0.5em">12</SPAN><SPAN class=toctext style="TEXT-DECORATION: ; DISPLAY: table-cell">References</SPAN></A></LI></UL></DIV>
<P style="MARGIN: 0.5em 0px"></P>
<H2 style='OVERFLOW: hidden; FONT-SIZE: 1.5em; FONT-FAMILY: "Linux Libertine", Georgia, Times, serif; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: rgb(162,169,177) 1px solid; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 1em 0px 0.25em; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px'><SPAN id=Definition class=mw-headline>Definition</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Definition" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=1">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H2>
<P style="MARGIN: 0.5em 0px">The strict definition of the (lexical) "scope" of a name (<A title=Identifier style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Identifier">identifier</A>) is unambiguous &#8211; it is "the portion of source code in which a binding of a name with an entity applies" &#8211; and is virtually unchanged from its 1960 definition in the specification of<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="ALGOL 60" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/ALGOL_60">ALGOL 60</A>. Representative language specification follow.</P>
<DL style="MARGIN-BOTTOM: 0.5em; MARGIN-TOP: 0.2em">
<DT style="MARGIN-BOTTOM: 0.1em; FONT-WEIGHT: bold">ALGOL 60 (1960)<SUP id=cite_ref-RALA60_2.7_3-0 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#cite_note-RALA60_2.7-3">[1]</A></SUP></DT>
<DD style="MARGIN-BOTTOM: 0.1em; MARGIN-LEFT: 1.6em; MARGIN-RIGHT: 0px">The following kinds of quantities are distinguished: simple variables, arrays, labels, switches, and procedures. The scope of a quantity is the set of statements and expressions in which the declaration of the identifier associated with that quantity is valid.</DD>
<DT style="MARGIN-BOTTOM: 0.1em; FONT-WEIGHT: bold"><A title="C (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/C_(programming_language)">C</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>(2007)<SUP id=cite_ref-4 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#cite_note-4">[2]</A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>An identifier can denote an object; a function; a tag or a member of a structure, union, or enumeration; a typedef name; a label name; a macro name; or a macro parameter. The same identifier can denote different entities at different points in the program. [...] For each different entity that an identifier designates, the identifier is<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>visible</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>(i.e., can be used) only within a region of program text called its<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>scope.</I></DT>
<DT style="MARGIN-BOTTOM: 0.1em; FONT-WEIGHT: bold"><A title="Go (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Go_(programming_language)">Go</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>(2013)<SUP id=cite_ref-go_5-0 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#cite_note-go-5">[3]</A></SUP></DT>
<DD style="MARGIN-BOTTOM: 0.1em; MARGIN-LEFT: 1.6em; MARGIN-RIGHT: 0px">A declaration binds a non-blank identifier to a constant, type, variable, function, label, or package. [...] The scope of a declared identifier is the extent of source text in which the identifier denotes the specified constant, type, variable, function, label, or package.</DD></DL>
<P style="MARGIN: 0.5em 0px">Most commonly "scope" refers to when a given name can refer to a given<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Variable (programming)" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Variable_(programming)">variable</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8211; when a<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Declaration (computer programming)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Declaration_(computer_programming)">declaration</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>has effect &#8211; but can also apply to other entities, such as functions, types, classes,<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Label (computer science)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Label_(computer_science)">labels</A>, constants, and enumerations.</P>
<H3 style="OVERFLOW: hidden; FONT-SIZE: 1.2em; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0.5em; MARGIN: 0.3em 0px 0px; LINE-HEIGHT: 1.6"><SPAN id=Lexical_scope_vs._dynamic_scope class=mw-headline>Lexical scope vs. dynamic scope</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Lexical scope vs. dynamic scope" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=2">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H3>
<P style="MARGIN: 0.5em 0px">A fundamental distinction in scoping is what "part of a program" means. In languages with<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>lexical scope</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(also called<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>static scope</B>), name resolution depends on the location in the source code and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>lexical context</B>, which is defined by where the named variable or function is defined. In contrast, in languages with<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>dynamic scope</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>the name resolution depends upon the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Program state" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Program_state">program state</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>when the name is encountered which is determined by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><I><A title="Execution context" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Execution_context">execution context</A></I><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>calling context</I>. In practice, with lexical scope a variable's definition is resolved by searching its containing block or function, then if that fails searching the outer containing block, and so on, whereas with dynamic scope the calling function is searched, then the function which called that calling function, and so on, progressing up the call stack.<SUP id=cite_ref-Borning_6-0 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#cite_note-Borning-6">[4]</A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>Of course, in both rules, we first look for a local definition of a variable.</P>
<P style="MARGIN: 0.5em 0px">Most modern languages use lexical scoping for variables and functions, though dynamic scoping is used in some languages, notably some dialects of Lisp, some "scripting" languages like<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=Perl style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Perl">Perl</A>, and some<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Template language" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Template_language">template languages</A>.<SUP id=cite_ref-7 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#cite_note-7">[c]</A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>Even in lexically scoped languages, scope for<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Closure (computer science)" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_science)">closures</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be confusing to the uninitiated, as these depend on the lexical context where the closure is defined, not where it is called.</P>
<P style="MARGIN: 0.5em 0px">Lexical resolution can be determined at<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Compile time" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Compile_time">compile time</A>, and is also known as<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>early binding</B>, while dynamic resolution can in general only be determined at<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Run time (program lifecycle phase)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Run_time_(program_lifecycle_phase)">run time</A>, and thus is known as<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>late binding</B>.</P>
<H3 style="OVERFLOW: hidden; FONT-SIZE: 1.2em; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0.5em; MARGIN: 0.3em 0px 0px; LINE-HEIGHT: 1.6"><SPAN id=Related_concepts class=mw-headline>Related concepts</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Related concepts" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=3">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H3>
<P style="MARGIN: 0.5em 0px">In<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Object-oriented programming" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Object-oriented_programming">object-oriented programming</A>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Dynamic dispatch" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Dynamic_dispatch">dynamic dispatch</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>selects an object<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Method (computer programming)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Method_(computer_programming)">method</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>at runtime, though whether the actual name binding is done at compile time or run time depends on the language. De facto dynamic scoping is common in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Macro (computer science)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Macro_(computer_science)">macro languages</A>, which do not directly do name resolution, but instead expand in place.</P>
<P style="MARGIN: 0.5em 0px">Some programming frameworks like<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=AngularJS style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/AngularJS#Scope">AngularJS</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>use the term "scope" to mean something entirely different than how it is used in this article. In those frameworks the scope is just an object of the programming language that they use (<A title=JavaScript style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/JavaScript">JavaScript</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in case of AngularJS) that is used in certain ways by the framework to emulate dynamic scope in a language that uses lexical scope for its variables. Those<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=AngularJS style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/AngularJS#Scope">AngularJS scopes</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>can themselves be in scope or out of scope (using the usual meaning of the term) in any given part of the program, following the usual rules of variable scope of the language like any other object, and using their own<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Inheritance (object-oriented programming)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Inheritance_(object-oriented_programming)">inheritance</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=Transclusion style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Transclusion">transclusion</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>rules. In the context of AngularJS, sometimes the term "$scope" (with a dollar sign) is used to avoid confusion, but using the dollar sign in variable names is often discouraged by the style guides.<SUP id=cite_ref-js-conventions_8-0 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#cite_note-js-conventions-8">[5]</A></SUP></P>
<H2 style='OVERFLOW: hidden; FONT-SIZE: 1.5em; FONT-FAMILY: "Linux Libertine", Georgia, Times, serif; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: rgb(162,169,177) 1px solid; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 1em 0px 0.25em; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px'><SPAN id=Use class=mw-headline>Use</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Use" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=4">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H2>
<P style="MARGIN: 0.5em 0px">Scope is an important component of<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Name resolution (programming languages)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Name_resolution_(programming_languages)">name resolution</A>,<SUP id=cite_ref-9 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#cite_note-9">[d]</A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>which is in turn fundamental to<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Formal semantics of programming languages" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Formal_semantics_of_programming_languages">language semantics</A>. Name resolution (including scope) varies between programming languages, and within a programming language, varies by type of entity; the rules for scope are called<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>scope rules</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>scoping rules</I>. Together with<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=Namespaces class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Namespaces">namespaces</A>, scoping rules are crucial in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Modular programming" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Modular_programming">modular programming</A>, so a change in one part of the program does not break an unrelated part.</P>
<H2 style='OVERFLOW: hidden; FONT-SIZE: 1.5em; FONT-FAMILY: "Linux Libertine", Georgia, Times, serif; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: rgb(162,169,177) 1px solid; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 1em 0px 0.25em; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px'><SPAN id=Overview class=mw-headline>Overview</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Overview" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=5">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H2>
<DIV role=note class=hatnote style="MARGIN-BOTTOM: 0.5em; FONT-STYLE: italic; PADDING-LEFT: 1.6em">See also:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Variable (programming)" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Variable_(programming)#Scope_and_extent">Variable (programming) &#167;&nbsp;Scope and extent</A></DIV>
<P style="MARGIN: 0.5em 0px">When discussing scope, there are three basic concepts:<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>scope,</I><SPAN class=Apple-converted-space>&nbsp;</SPAN><I>extent,</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>context.</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>"Scope" and "context" in particular are frequently confused: scope is a property of an identifier, and is fixed, while context is a property of a program, which varies by position. More precisely, context is a property of a position in the program, either a position in the source code (<I>lexical context</I>) or a point during<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Run time (program lifecycle phase)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Run_time_(program_lifecycle_phase)">run time</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<I>execution context,</I><SPAN class=Apple-converted-space>&nbsp;</SPAN><I>runtime context,</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>calling context</I>). Execution context consists of lexical context (at the current execution point) plus additional runtime state such as the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Call stack" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Call_stack">call stack</A>.<SUP id=cite_ref-10 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#cite_note-10">[e]</A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>Thus, when the execution point of a program is in a variable name's scope, the "variable (name) is in context" (meaning "in the context at this point"), and when the execution point "exits a variable (name)'s scope", such as by returning from a function, "the variable (name) goes out of context".<SUP id=cite_ref-11 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#cite_note-11">[f]</A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>Narrowly speaking, during execution a program enters and exits various scopes, and at a point in execution identifiers are "in context" or "not in context", hence identifiers "come into context" or "go out of context" as the program enters or exits the scope &#8211; however in practice usage is much looser.</P>
<P style="MARGIN: 0.5em 0px">Scope is a source-code level concept, and a property of identifiers, particularly variable or function names &#8211; identifiers in the source code are<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Reference (computer science)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Reference_(computer_science)">references</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>to entities in the program &#8211; and is part of the behavior of a compiler or interpreter of a language. As such, issues of scope are similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Pointer (computer programming)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Pointer_(computer_programming)">pointers</A>, which are a type of reference used in programs more generally. Using the value of a variable when the name is in context but the variable is uninitialized is analogous to dereferencing (accessing the value of) a<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Wild pointer" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Wild_pointer">wild pointer</A>, as it is undefined. However, as variables are not destroyed until they go out of context, the analog of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Dangling pointer" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Dangling_pointer">dangling pointer</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not exist.</P>
<P style="MARGIN: 0.5em 0px">For entities such as variables, scope is a subset of<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Object lifetime" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Object_lifetime">lifetime</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>(also known as<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Variable (programming)" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Variable_(programming)#Scope_and_extent">extent</A>) &#8211; a name can only refer to a variable that exists (possibly with undefined value), but variables that exist are not necessarily visible: a variable may exist but be inaccessible (the value is stored but not referred to within a given context), or accessible but not via the given name, in which case it is<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>out of context</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(the program is "out of the scope of the name"). In other cases "lifetime" is irrelevant &#8211; a label (named position in the source code) has lifetime identical with the program (for statically compiled languages), but may be in or out of context at a given point in the program, and likewise for<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Static variable" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Static_variable">static variables</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8211; a<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Static global variable" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Static_global_variable">static global variable</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>is in context for the entire program, while a<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Static local variable" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Static_local_variable">static local variable</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>is only in context within a function or other local context, but both have lifetime of the entire run of the program.</P>
<P style="MARGIN: 0.5em 0px">Determining which entity an identifier refers to is known as<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Name resolution (programming languages)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Name_resolution_(programming_languages)">name resolution</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Name binding" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Name_binding">name binding</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>(particularly in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Object-oriented programming" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Object-oriented_programming">object-oriented programming</A>), and varies between languages. Given an identifier, the language (properly, the compiler or interpreter) checks all entities that are in context for matches; in case of ambiguity (two entities with the same name, such as a global and local variable with the same name), the name resolution rules are used to distinguish them. Most frequently, name resolution relies on an "inner-to-outer" rule, such as the Python LEGB (Local, Enclosing, Global, Built-in) rule: names implicitly resolves to the narrowest relevant context. In some cases name resolution can be explicitly specified, such as by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">global</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">nonlocal</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>keywords in Python; in other cases the default rules cannot be overridden.</P>
<P style="MARGIN: 0.5em 0px">When two identical identifiers are in context at the same time, referring to different entities, one says that<SPAN class=Apple-converted-space>&nbsp;</SPAN><I><A title="Name masking" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Name_masking">name masking</A></I><SPAN class=Apple-converted-space>&nbsp;</SPAN>is occurring, where the higher-priority name (usually innermost) is "masking" the lower-priority name. At the level of variables, this is known as<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Variable shadowing" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Variable_shadowing">variable shadowing</A>. Due to the potential for<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Logic error" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Logic_error">logic errors</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>from masking, some languages disallow or discourage masking, raising an error or warning at compile time or run time.</P>
<P style="MARGIN: 0.5em 0px">Various<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Programming language" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Programming_language">programming languages</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>have various different scoping rules for different kinds of declarations and identifiers. Such scoping rules have a large effect on<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Formal semantics of programming languages" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Formal_semantics_of_programming_languages">language semantics</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and, consequently, on the behavior and correctness of programs. In languages like<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=C++ style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/C%2B%2B">C++</A>, accessing an unbound variable does not have well-defined semantics and may result in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Undefined behavior" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Undefined_behavior">undefined behavior</A>, similar to referring to a<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Dangling pointer" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Dangling_pointer">dangling pointer</A>; and declarations or identifiers used outside their scope will generate<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Syntax error" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Syntax_error">syntax errors</A>.</P>
<P style="MARGIN: 0.5em 0px">Scopes are frequently tied to other language constructs and determined implicitly, but many languages also offer constructs specifically for controlling scope.</P>
<H2 style='OVERFLOW: hidden; FONT-SIZE: 1.5em; FONT-FAMILY: "Linux Libertine", Georgia, Times, serif; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: rgb(162,169,177) 1px solid; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 1em 0px 0.25em; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px'><SPAN id=Levels_of_scope class=mw-headline>Levels of scope</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Levels of scope" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=6">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H2>
<P style="MARGIN: 0.5em 0px">Scope can vary from as little as a single expression to as much as the entire program, with many possible gradations in between. The simplest scoping rule is global scope &#8211; all entities are visible throughout the entire program. The most basic modular scoping rule is two-level scoping, with a global scope anywhere in the program, and local scope within a function. More sophisticated modular programming allows a separate module scope, where names are visible within the module (private to the module) but not visible outside it. Within a function, some languages, such as C, allow block scope to restrict scope to a subset of a function; others, notably functional languages, allow expression scope, to restrict scope to a single expression. Other scopes include file scope (notably in C), which functions similarly to module scope, and block scope outside of functions (notably in Perl).</P>
<P style="MARGIN: 0.5em 0px">A subtle issue is exactly when a scope begins and ends. In some languages, such as in C, a scope starts at declaration, and thus different names declared within a given block can have different scopes. This requires declaring functions before use, though not necessarily defining them, and requires<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Forward declaration" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Forward_declaration">forward declaration</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in some cases, notably for mutual recursion. In other languages, such as JavaScript or Python, a name's scope begins at the start of the relevant block (such as the start of a function), regardless of where it is defined, and all names within a given block have the same scope; in JavaScript this is known as<SPAN class=Apple-converted-space>&nbsp;</SPAN><I><A title="Variable hoisting" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Variable_hoisting">variable hoisting</A></I>. However, when the name is bound to a value varies, and behavior of in-context names that have undefined value differs: in Python use of undefined variables yields a runtime error, while in JavaScript undefined variables are usable (with undefined value), but function declarations are also hoisted to the top of the containing function and usable throughout the function.</P>
<H3 style="OVERFLOW: hidden; FONT-SIZE: 1.2em; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0.5em; MARGIN: 0.3em 0px 0px; LINE-HEIGHT: 1.6"><SPAN id=Expression_scope class=mw-headline>Expression scope</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Expression scope" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=7">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H3>
<P style="MARGIN: 0.5em 0px">Many languages, especially<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Functional programming" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Functional_programming">functional</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>languages, offer a feature called<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>let-expressions</I>, which allow a declaration's scope to be a single expression. This is convenient if, for example, an intermediate value is needed for a computation. For example, in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Standard ML" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Standard_ML">Standard ML</A>, if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">f()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">12</TT>, then<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px"><B>let val</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>x = f()<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>in</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>x * x<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>end</B></CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an expression that evaluates to<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">144</TT>, using a temporary variable named<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">x</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>to avoid calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">f()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>twice. Some languages with block scope approximate this functionality by offering syntax for a block to be embedded into an expression; for example, the aforementioned Standard ML expression could be written in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=Perl style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Perl">Perl</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=mw-highlight style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BACKGROUND: rgb(248,248,248); unicode-bidi: embed; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; DIRECTION: ltr; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; border-radius: 2px" dir=ltr><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">do</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=p>{</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">my</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=nv style="COLOR: rgb(25,23,124)">$x</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=n>f</SPAN><SPAN class=p>();</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=nv style="COLOR: rgb(25,23,124)">$x</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">*</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=nv style="COLOR: rgb(25,23,124)">$x</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=p>}</SPAN></CODE>, or in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="GNU Compiler Collection" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/GNU_Compiler_Collection">GNU C</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=mw-highlight style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BACKGROUND: rgb(248,248,248); unicode-bidi: embed; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; DIRECTION: ltr; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; border-radius: 2px" dir=ltr><SPAN class=p>({</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=kt style="COLOR: rgb(176,0,64)">int</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=n>x</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=n>f</SPAN><SPAN class=p>();</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=n>x</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">*</SPAN><SPAN class=n>x</SPAN><SPAN class=p>;</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=p>})</SPAN></CODE>.</P>
<P style="MARGIN: 0.5em 0px">In Python, auxiliary variables in generator expressions and list comprehensions (in Python 3) have expression scope.</P>
<P style="MARGIN: 0.5em 0px">In C, variable names in a<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Function prototype" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Function_prototype">function prototype</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>have expression scope, known in this context as<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>function protocol scope</B>. As the variable names in the prototype are not referred to (they may be different in the actual definition) &#8211; they are just dummies &#8211; these are often omitted, though they may be used for generating documentation, for instance.</P>
<H3 style="OVERFLOW: hidden; FONT-SIZE: 1.2em; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0.5em; MARGIN: 0.3em 0px 0px; LINE-HEIGHT: 1.6"><SPAN id=Block_scope class=mw-headline>Block scope</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Block scope" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=8">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H3>
<P style="MARGIN: 0.5em 0px">Many, but not all, block-structured programming languages allow scope to be restricted to a<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Block (programming)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Block_(programming)">block</A>, which is known as<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>block scope</B>. This began with<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="ALGOL 60" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/ALGOL_60">ALGOL 60</A>, where "[e]very declaration ... is valid only for that block.",<SUP id=cite_ref-12 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#cite_note-12">[6]</A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and today is particularly associated with languages in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Pascal (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Pascal_(programming_language)">Pascal</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="C (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/C_(programming_language)">C</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>families and traditions. Most often this block is contained within a function, thus restricting the scope to a part of a function, but in some cases, such as Perl, the block may not be within a function.</P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; FLOAT: right; DIRECTION: ltr; MARGIN-LEFT: 1em" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=kt style="COLOR: rgb(176,0,64)">unsigned</SPAN> <SPAN class=kt style="COLOR: rgb(176,0,64)">int</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">sum_of_squares</SPAN><SPAN class=p>(</SPAN><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">const</SPAN> <SPAN class=kt style="COLOR: rgb(176,0,64)">unsigned</SPAN> <SPAN class=kt style="COLOR: rgb(176,0,64)">int</SPAN> <SPAN class=n>N</SPAN><SPAN class=p>)</SPAN> <SPAN class=p>{</SPAN>
  <SPAN class=kt style="COLOR: rgb(176,0,64)">unsigned</SPAN> <SPAN class=kt style="COLOR: rgb(176,0,64)">int</SPAN> <SPAN class=n>ret</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">0</SPAN><SPAN class=p>;</SPAN>
  <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">for</SPAN> <SPAN class=p>(</SPAN><SPAN class=kt style="COLOR: rgb(176,0,64)">unsigned</SPAN> <SPAN class=kt style="COLOR: rgb(176,0,64)">int</SPAN> <SPAN class=n>n</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p>;</SPAN> <SPAN class=n>n</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">&lt;=</SPAN> <SPAN class=n>N</SPAN><SPAN class=p>;</SPAN> <SPAN class=n>n</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">++</SPAN><SPAN class=p>)</SPAN> <SPAN class=p>{</SPAN>
    <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">const</SPAN> <SPAN class=kt style="COLOR: rgb(176,0,64)">unsigned</SPAN> <SPAN class=kt style="COLOR: rgb(176,0,64)">int</SPAN> <SPAN class=n>n_squared</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=n>n</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">*</SPAN> <SPAN class=n>n</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=n>ret</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">+=</SPAN> <SPAN class=n>n_squared</SPAN><SPAN class=p>;</SPAN>
  <SPAN class=p>}</SPAN>
  <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">return</SPAN> <SPAN class=n>ret</SPAN><SPAN class=p>;</SPAN>
<SPAN class=p>}</SPAN>
</PRE></DIV>
<P style="MARGIN: 0.5em 0px">A representative example of the use of block scope is the C code shown here, where two variables are scoped to the loop: the loop variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>, which is initialized once and incremented on each iteration of the loop, and the auxiliary variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n_squared</VAR>, which is initialized at each iteration. The purpose is to avoid adding variables to the function scope that are only relevant to a particular block &#8211; for example, this prevents errors where the generic loop variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>i</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>has accidentally already been set to another value. In this example the expression<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">n * n</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>would generally not be assigned to an auxiliary variable, and the body of the loop would simply be written<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">ret += n * n</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>but in more complicated examples auxiliary variables are useful.</P>
<P style="MARGIN: 0.5em 0px">Blocks are primarily used for control flow, such as with if, while, and for loops, and in these cases block scope means the scope of variable depends on the structure of a function's flow of execution. However, languages with block scope typically also allow the use of "naked" blocks, whose sole purpose is to allow fine-grained control of variable scope. For example, an auxiliary variable may be defined in a block, then used (say, added to a variable with function scope) and discarded when the block ends, or a while loop might be enclosed in a block that initializes variables used inside the loop that should only be initialized once.</P>
<P style="MARGIN: 0.5em 0px">A subtlety of several programming languages, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Algol 68" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Algol_68">Algol 68</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and C (demonstrated in this example and standardized since<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=C99 style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/C99">C99</A>), is that block-scope variables can be declared not only within the body of the block, but also within the control statement, if any. This is analogous to function parameters, which are declared in the function declaration (before the block of the function body starts), and in scope for the whole function body. This is primarily used in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="For loop" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/For_loop">for loops</A>, which have an initialization statement separate from the loop condition, unlike while loops, and is a common idiom.</P>
<P style="MARGIN: 0.5em 0px">Block scope can be used for shadowing. In this example, inside the block the auxiliary variable could also have been called<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>, shadowing the parameter name, but this is considered poor style due to the potential for errors. Furthermore, some descendants of C, such as Java and C#, despite having support for block scope (in that a local variable can be made to go out of scope before the end of a function), do not allow one local variable to hide another. In such languages, the attempted declaration of the second<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>would result in a syntax error, and one of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>variables would have to be renamed.</P>
<P style="MARGIN: 0.5em 0px">If a block is used to set the value of a variable, block scope requires that the variable be declared outside of the block. This complicates the use of conditional statements with<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Single assignment" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Single_assignment">single assignment</A>. For example, in Python, which does not use block scope, one may initialize a variable as such:</P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; DIRECTION: ltr" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">if</SPAN> <SPAN class=n>c</SPAN><SPAN class=p>:</SPAN>
    <SPAN class=n>a</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=s1 style="COLOR: rgb(186,33,33)">'foo'</SPAN>
<SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">else</SPAN><SPAN class=p>:</SPAN>
    <SPAN class=n>a</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=s1 style="COLOR: rgb(186,33,33)">''</SPAN>
</PRE></DIV>
<P style="MARGIN: 0.5em 0px">where<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">a</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is accessible after the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">if</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>statement.</P>
<P style="MARGIN: 0.5em 0px">In Perl, which has block scope, this instead requires declaring the variable prior to the block:</P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; DIRECTION: ltr" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">my</SPAN> <SPAN class=nv style="COLOR: rgb(25,23,124)">$a</SPAN><SPAN class=p>;</SPAN>
<SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">if</SPAN> <SPAN class=p>(</SPAN><SPAN class=n>c</SPAN><SPAN class=p>)</SPAN> <SPAN class=p>{</SPAN>
  <SPAN class=nv style="COLOR: rgb(25,23,124)">$a</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=s style="COLOR: rgb(186,33,33)">'foo'</SPAN><SPAN class=p>;</SPAN>
<SPAN class=p>}</SPAN> <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">else</SPAN> <SPAN class=p>{</SPAN>
  <SPAN class=nv style="COLOR: rgb(25,23,124)">$a</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=s style="COLOR: rgb(186,33,33)">''</SPAN><SPAN class=p>;</SPAN>
<SPAN class=p>}</SPAN>
</PRE></DIV>
<P style="MARGIN: 0.5em 0px">Often this is instead rewritten using multiple assignment, initializing the variable to a default value. In Python (where it is not necessary) this would be:</P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; DIRECTION: ltr" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=n>a</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=s1 style="COLOR: rgb(186,33,33)">''</SPAN>
<SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">if</SPAN> <SPAN class=n>c</SPAN><SPAN class=p>:</SPAN>
    <SPAN class=n>a</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=s1 style="COLOR: rgb(186,33,33)">'foo'</SPAN>
</PRE></DIV>
<P style="MARGIN: 0.5em 0px">while in Perl this would be:</P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; DIRECTION: ltr" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">my</SPAN> <SPAN class=nv style="COLOR: rgb(25,23,124)">$a</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=s style="COLOR: rgb(186,33,33)">''</SPAN><SPAN class=p>;</SPAN>
<SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">if</SPAN> <SPAN class=p>(</SPAN><SPAN class=n>c</SPAN><SPAN class=p>)</SPAN> <SPAN class=p>{</SPAN>
    <SPAN class=nv style="COLOR: rgb(25,23,124)">$a</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=s style="COLOR: rgb(186,33,33)">'foo'</SPAN><SPAN class=p>;</SPAN>
<SPAN class=p>}</SPAN>
</PRE></DIV>
<P style="MARGIN: 0.5em 0px">In case of a single variable assignment, an alternative is to use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Ternary operator" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Ternary_operator">ternary operator</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>to avoid a block, but this is not in general possible for multiple variable assignments, and is difficult to read for complex logic.</P>
<P style="MARGIN: 0.5em 0px">This is a more significant issue in C, notably for string assignment, as string initialization can automatically allocate memory, while string assignment to an already initialized variable requires allocating memory, a string copy, and checking that these are successful.</P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; FLOAT: right; DIRECTION: ltr; MARGIN-LEFT: 1em" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">sub </SPAN><SPAN class=nf style="COLOR: rgb(0,0,255)">increment_counter</SPAN> <SPAN class=p>()</SPAN> 
<SPAN class=p>{</SPAN> 
    <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">my</SPAN> <SPAN class=nv style="COLOR: rgb(25,23,124)">$counter</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">0</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">return</SPAN> <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">sub </SPAN><SPAN class=p>()</SPAN>
    <SPAN class=p>{</SPAN>
        <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">return</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">++</SPAN><SPAN class=nv style="COLOR: rgb(25,23,124)">$counter</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=p>}</SPAN>
<SPAN class=p>}</SPAN>
</PRE></DIV>
<P style="MARGIN: 0.5em 0px">Some languages allow the concept of block scope to be applied, to varying extents, outside of a function. For example, in the Perl snippet at right,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>$counter</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a variable name with block scope (due to the use of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">my</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword), while<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>increment_counter</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a function name with global scope. Each call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>increment_counter</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>will increase the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>$counter</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>by one, and return the new value. Code outside of this block can call<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>increment_counter</VAR>, but cannot otherwise obtain or alter the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>$counter</VAR>. This idiom allows one to define<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Closure (computer science)" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_science)">closures</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in Perl.</P>
<H3 style="OVERFLOW: hidden; FONT-SIZE: 1.2em; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0.5em; MARGIN: 0.3em 0px 0px; LINE-HEIGHT: 1.6"><SPAN id=Function_scope class=mw-headline>Function scope</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Function scope" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=9">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H3>
<P style="MARGIN: 0.5em 0px">Most of the commonly used programming languages offer a way to create a<SPAN class=Apple-converted-space>&nbsp;</SPAN><I><A title="Local variable" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Local_variable">local variable</A></I><SPAN class=Apple-converted-space>&nbsp;</SPAN>in a function or<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=Subroutine style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Subroutine">subroutine</A>: a variable whose scope ends (that goes out of context) when the function returns. In most cases the lifetime of the variable is the duration of the function call &#8211; it is an<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Automatic variable" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Automatic_variable">automatic variable</A>, created when the function starts (or the variable is declared), destroyed when the function returns &#8211; while the scope of the variable is within the function, though the meaning of "within" depends on whether scoping is lexical or dynamic. However, some languages, such as C, also provide for<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Static local variable" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Static_local_variable">static local variables</A>, where the lifetime of the variable is the entire lifetime of the program, but the variable is only in context when inside the function. In the case of static local variables, the variable is created when the program initializes, and destroyed only when the program terminates, as with a<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Static global variable" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Static_global_variable">static global variable</A>, but is only in context within a function, like an automatic local variable.</P>
<P style="MARGIN: 0.5em 0px">Importantly, in lexical scoping a variable with function scope has scope only within the<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>lexical context</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the function: it moves<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>out</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>of context when another function is called within the function, and moves back into context when the function returns &#8211; called functions have no access to the local variables of calling functions, and local variables are only in context within the body of the function in which they are declared. By contrast, in dynamic scoping, the scope extends to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>runtime context</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the function: local variables<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>stay in context</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>when another function is called, only moving out of context when the defining function ends, and thus local variables are in context of the function in which they are defined<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>and all called functions</I>. In languages with lexical scoping and<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Nested function" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Nested_function">nested functions</A>, local variables are in context for nested functions, since these are within the same lexical context, but not for other functions that are not lexically nested. A local variable of an enclosing function is known as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Non-local variable" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Non-local_variable">non-local variable</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>for the nested function. Function scope is also applicable to<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Anonymous function" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Anonymous_function">anonymous functions</A>.</P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; FLOAT: right; DIRECTION: ltr; MARGIN-LEFT: 1em" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">def</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">square</SPAN><SPAN class=p>(</SPAN><SPAN class=n>n</SPAN><SPAN class=p>):</SPAN>
  <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">return</SPAN> <SPAN class=n>n</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">*</SPAN> <SPAN class=n>n</SPAN>

<SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">def</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">sum_of_squares</SPAN><SPAN class=p>(</SPAN><SPAN class=n>n</SPAN><SPAN class=p>):</SPAN>
  <SPAN class=n>total</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">0</SPAN> 
  <SPAN class=n>i</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">0</SPAN>
  <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">while</SPAN> <SPAN class=n>i</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">&lt;=</SPAN> <SPAN class=n>n</SPAN><SPAN class=p>:</SPAN>
    <SPAN class=n>total</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">+=</SPAN> <SPAN class=n>square</SPAN><SPAN class=p>(</SPAN><SPAN class=n>i</SPAN><SPAN class=p>)</SPAN>
    <SPAN class=n>i</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">+=</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">1</SPAN>
  <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">return</SPAN> <SPAN class=n>total</SPAN>
</PRE></DIV>
<P style="MARGIN: 0.5em 0px">For example, in the snippet of Python code on the right, two functions are defined:<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">square</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">sum_of_squares</TT>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">square</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>computes the square of a number;<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">sum_of_squares</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>computes the sum of all squares up to a number. (For example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">square(4)</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 4<SUP style="FONT-SIZE: 11px; LINE-HEIGHT: 1">2</SUP>&nbsp;=&nbsp;<TT style="FONT-FAMILY: monospace, Courier">16</TT>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">sum_of_squares(4)</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 0<SUP style="FONT-SIZE: 11px; LINE-HEIGHT: 1">2</SUP>&nbsp;+&nbsp;1<SUP style="FONT-SIZE: 11px; LINE-HEIGHT: 1">2</SUP>&nbsp;+&nbsp;2<SUP style="FONT-SIZE: 11px; LINE-HEIGHT: 1">2</SUP>&nbsp;+&nbsp;3<SUP style="FONT-SIZE: 11px; LINE-HEIGHT: 1">2</SUP>&nbsp;+&nbsp;4<SUP style="FONT-SIZE: 11px; LINE-HEIGHT: 1">2</SUP>&nbsp;=&nbsp;<TT style="FONT-FAMILY: monospace, Courier">30</TT>.)</P>
<P style="MARGIN: 0.5em 0px">Each of these functions has a variable named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>that represents the argument to the function. These two<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>variables are completely separate and unrelated, despite having the same name, because they are lexically scoped local variables, with function scope: each one's scope is its own, lexically separate, function, so they don't overlap. Therefore,<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">sum_of_squares</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>can call<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">square</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>without its own<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>being altered. Similarly,<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">sum_of_squares</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>has variables named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>total</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>i</VAR>; these variables, because of their limited scope, will not interfere with any variables named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>total</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>i</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>that might belong to any other function. In other words, there is no risk of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>name collision</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>between these identifiers and any unrelated identifiers, even if they are identical.</P>
<P style="MARGIN: 0.5em 0px">Note also that no name masking is occurring: only one variable named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is in context at any given time, as the scopes do not overlap. By contrast, were a similar fragment to be written in a language with dynamic scope, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the calling function would remain in context in the called function &#8211; the scopes would overlap &#8211; and would be masked ("shadowed") by the new<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the called function.</P>
<P style="MARGIN: 0.5em 0px">Function scope is significantly more complicated if functions are first-class objects and can be created locally to a function and then returned. In this case any variables in the nested function that are not local to it (unbound variables in the function definition, that resolve to variables in an enclosing context) create a<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Closure (computer science)" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_science)">closure</A>, as not only the function itself, but also its environment (of variables) must be returned, and then potentially called in a different context. This requires significantly more support from the compiler, and can complicate program analysis.</P>
<H3 style="OVERFLOW: hidden; FONT-SIZE: 1.2em; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0.5em; MARGIN: 0.3em 0px 0px; LINE-HEIGHT: 1.6"><SPAN id=File_scope class=mw-headline>File scope</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: File scope" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=10">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H3>
<P style="MARGIN: 0.5em 0px">A scoping rule largely particular to C (and C++) is<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>file scope</B>, where scope of variables and functions declared at the top level of a file (not within any function) is for the entire file &#8211; or rather for C, from the declaration until the end of the source file, or more precisely<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Translation unit (programming)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Translation_unit_(programming)">translation unit</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>(internal linking). This can be seen as a form of module scope, where modules are identified with files, and in more modern languages is replaced by an explicit module scope. Due to the presence of include statements, which add variables and functions to the internal context and may themselves call further include statements, it can be difficult to determine what is in context in the body of a file.</P>
<P style="MARGIN: 0.5em 0px">In the C code snippet above, the function name<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">sum_of_squares</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>has file scope.</P>
<H3 style="OVERFLOW: hidden; FONT-SIZE: 1.2em; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0.5em; MARGIN: 0.3em 0px 0px; LINE-HEIGHT: 1.6"><SPAN id=Module_scope class=mw-headline>Module scope</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Module scope" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=11">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H3>
<P style="MARGIN: 0.5em 0px">In<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Modular programming" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Modular_programming">modular programming</A>, the scope of a name can be an entire module, however it may be structured across various files. In this paradigm, modules are the basic unit of a complex program, as they allow information hiding and exposing a limited interface. Module scope was pioneered in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=Modula style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Modula">Modula</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>family of languages, and Python (which was influenced by Modula) is a representative contemporary example.</P>
<P style="MARGIN: 0.5em 0px">In some<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Object-oriented programming" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Object-oriented_programming">object-oriented programming</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>languages that lack direct support for modules, such as C++, a similar structure is instead provided by the class hierarchy, where classes are the basic unit of the program, and a class can have private methods. This is properly understood in the context of<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Dynamic dispatch" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Dynamic_dispatch">dynamic dispatch</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>rather than name resolution and scope, though they often play analogous roles. In some cases both these facilities are available, such as in Python, which has both modules and classes, and code organization (as a module-level function or a conventionally private method) is a choice of the programmer.</P>
<H3 style="OVERFLOW: hidden; FONT-SIZE: 1.2em; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0.5em; MARGIN: 0.3em 0px 0px; LINE-HEIGHT: 1.6"><SPAN id=Global_scope class=mw-headline>Global scope</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Global scope" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=12">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H3>
<P style="MARGIN: 0.5em 0px">A declaration has<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>global scope</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>if it has effect throughout an entire program. Variable names with global scope &#8212; called<SPAN class=Apple-converted-space>&nbsp;</SPAN><I><A title="Global variables" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Global_variables">global variables</A></I><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8212; are frequently considered bad practice, at least in some languages, due to the possibility of name collisions and unintentional masking, together with poor modularity, and function scope or block scope are considered preferable. However, global scope is typically used (depending on the language) for various other sorts of identifiers, such as names of functions, and names of<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Class (computer programming)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Class_(computer_programming)">classes</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and other<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Data type" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Data_type">data types</A>. In these cases mechanisms such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=Namespaces class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Namespaces">namespaces</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>are used to avoid collisions.</P>
<H2 style='OVERFLOW: hidden; FONT-SIZE: 1.5em; FONT-FAMILY: "Linux Libertine", Georgia, Times, serif; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: rgb(162,169,177) 1px solid; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 1em 0px 0.25em; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px'><SPAN id=Lexical_scoping_vs._dynamic_scoping class=mw-headline>Lexical scoping vs. dynamic scoping<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN id=Lexical_scoping_and_dynamic_scoping></SPAN></SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Lexical scoping vs. dynamic scoping" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=13">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H2>
<P style="MARGIN: 0.5em 0px">The use of local variables &#8212; of variable names with limited scope, that only exist within a specific function &#8212; helps avoid the risk of a name collision between two identically named variables. However, there are two very different approaches to answering this question: What does it mean to be "within" a function?</P>
<P style="MARGIN: 0.5em 0px">In<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>lexical scoping</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>(or<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>lexical scope</I>; also called<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>static scoping</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>static scope</I>), if a variable name's scope is a certain function, then its scope is the program text of the function definition: within that text, the variable name exists, and is bound to the variable's value, but outside that text, the variable name does not exist. By contrast, in<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>dynamic scoping</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>(or<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>dynamic scope</I>), if a variable name's scope is a certain function, then its scope is the time-period during which the function is executing: while the function is running, the variable name exists, and is bound to its value, but after the function returns, the variable name does not exist. This means that if function<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">f</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>invokes a separately defined function<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">g</TT>, then under lexical scoping, function<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">g</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>does<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>not</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>have access to<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">f</TT>'s local variables (assuming the text of<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">g</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not inside the text of<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">f</TT>), while under dynamic scoping, function<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">g</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN><I>does</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>have access to<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">f</TT>'s local variables (since<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">g</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>is invoked during the invocation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">f</TT>).</P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; FLOAT: right; DIRECTION: ltr; MARGIN-LEFT: 1em" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">$</SPAN> <SPAN class=nv style="COLOR: rgb(25,23,124)">x</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN>1
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">$</SPAN> <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">function</SPAN> g <SPAN class=o style="COLOR: rgb(102,102,102)">()</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">{</SPAN> <SPAN class=nb style="COLOR: rgb(0,128,0)">echo</SPAN> $x <SPAN class=p>;</SPAN> <SPAN class=nv style="COLOR: rgb(25,23,124)">x</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN><SPAN class=m style="COLOR: rgb(102,102,102)">2</SPAN> <SPAN class=p>;</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">}</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">$</SPAN> <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">function</SPAN> f <SPAN class=o style="COLOR: rgb(102,102,102)">()</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">{</SPAN> <SPAN class=nb style="COLOR: rgb(0,128,0)">local</SPAN> <SPAN class=nv style="COLOR: rgb(25,23,124)">x</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN><SPAN class=m style="COLOR: rgb(102,102,102)">3</SPAN> <SPAN class=p>;</SPAN> g <SPAN class=p>;</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">}</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">$</SPAN> f <SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic"># does this print 1, or 3?</SPAN>
<SPAN class=go style="COLOR: rgb(136,136,136)">3</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">$</SPAN> <SPAN class=nb style="COLOR: rgb(0,128,0)">echo</SPAN> $x <SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic"># does this print 1, or 2?</SPAN>
<SPAN class=go style="COLOR: rgb(136,136,136)">1</SPAN>
</PRE></DIV>
<P style="MARGIN: 0.5em 0px">Consider, for example, the program on the right. The first line,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=mw-highlight style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BACKGROUND: rgb(248,248,248); unicode-bidi: embed; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; DIRECTION: ltr; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; border-radius: 2px" dir=ltr><SPAN class=nv style="COLOR: rgb(25,23,124)">x</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN>1</CODE>, creates a global variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">x</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>and initializes it to<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">1</TT>. The second line,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=mw-highlight style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BACKGROUND: rgb(248,248,248); unicode-bidi: embed; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; DIRECTION: ltr; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; border-radius: 2px" dir=ltr><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">function</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>g<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">()</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">{</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=nb style="COLOR: rgb(0,128,0)">echo</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>$x<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=p>;</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=nv style="COLOR: rgb(25,23,124)">x</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN><SPAN class=m style="COLOR: rgb(102,102,102)">2</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=p>;</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">}</SPAN></CODE>, defines a function<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">g</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>that prints out ("echoes") the current value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">x</TT>, and then sets<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">x</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">2</TT>(overwriting the previous value). The third line,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=mw-highlight style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BACKGROUND: rgb(248,248,248); unicode-bidi: embed; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; DIRECTION: ltr; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; border-radius: 2px" dir=ltr><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">function</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>f<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">()</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">{</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=nb style="COLOR: rgb(0,128,0)">local</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=nv style="COLOR: rgb(25,23,124)">x</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN><SPAN class=m style="COLOR: rgb(102,102,102)">3</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=p>;</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>g<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=p>;</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">}</SPAN></CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>defines a function<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">f</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>that creates a local variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">x</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>(hiding the identically named global variable) and initializes it to<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">3</TT>, and then calls<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">g</TT>. The fourth line,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=mw-highlight style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BACKGROUND: rgb(248,248,248); unicode-bidi: embed; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; DIRECTION: ltr; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; border-radius: 2px" dir=ltr>f</CODE>, calls<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">f</TT>. The fifth line,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=mw-highlight style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BACKGROUND: rgb(248,248,248); unicode-bidi: embed; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; DIRECTION: ltr; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; border-radius: 2px" dir=ltr><SPAN class=nb style="COLOR: rgb(0,128,0)">echo</SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN>$x</CODE>, prints out the current value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">x</TT>.</P>
<P style="MARGIN: 0.5em 0px">So, what exactly does this program print? It depends on the scoping rules. If the language of this program is one that uses lexical scoping, then<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">g</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>prints and modifies the global variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">x</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>(because<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">g</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>is defined outside<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">f</TT>), so the program prints<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">1</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>and then<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">2</TT>. By contrast, if this language uses dynamic scoping, then<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">g</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>prints and modifies<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">f</TT>'s local variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">x</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>(because<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">g</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called from within<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">f</TT>), so the program prints<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">3</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>and then<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">1</TT>. (As it happens, the language of the program is<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Bash (Unix shell)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Bash_(Unix_shell)">Bash</A>, which uses dynamic scoping; so the program prints<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">3</TT><SPAN class=Apple-converted-space>&nbsp;</SPAN>and then<SPAN class=Apple-converted-space>&nbsp;</SPAN><TT style="FONT-FAMILY: monospace, Courier">1</TT>.)</P>
<DIV style="CLEAR: both"></DIV>
<H2 style='OVERFLOW: hidden; FONT-SIZE: 1.5em; FONT-FAMILY: "Linux Libertine", Georgia, Times, serif; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: rgb(162,169,177) 1px solid; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 1em 0px 0.25em; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px'><SPAN id=Lexical_scoping class=mw-headline>Lexical scoping</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Lexical scoping" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=14">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H2>
<P style="MARGIN: 0.5em 0px">With<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>lexical scope</B>, a name always refers to its (more or less) local lexical environment. This is a property of the program text and is made independent of the runtime<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Call stack" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Call_stack">call stack</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>by the language implementation. Because this matching only requires analysis of the static program text, this type of scoping is also called<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>static scoping</B>. Lexical scoping is standard in all<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=ALGOL style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/ALGOL">ALGOL</A>-based languages such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Pascal (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Pascal_(programming_language)">Pascal</A>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=Modula2 class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Modula2">Modula2</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Ada (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Ada_(programming_language)">Ada</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>as well as in modern functional languages such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="ML (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/ML_(programming_language)">ML</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Haskell (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Haskell_(programming_language)">Haskell</A>. It is also used in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="C (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/C_(programming_language)">C language</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and its syntactic and semantic relatives, although with different kinds of limitations. Static scoping allows the programmer to reason about object references such as parameters, variables, constants, types, functions, etc. as simple name substitutions. This makes it much easier to make modular code and reason about it, since the local naming structure can be understood in isolation. In contrast, dynamic scope forces the programmer to anticipate all possible dynamic contexts in which the module's code may be invoked.</P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; FLOAT: right; DIRECTION: ltr; MARGIN-LEFT: 1em" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">program</SPAN> <SPAN class=n>A</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">;</SPAN>
<SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">var</SPAN> <SPAN class=n>I</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">:</SPAN><SPAN class=kt style="COLOR: rgb(176,0,64)">integer</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">;</SPAN>
    <SPAN class=n>K</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">:</SPAN><SPAN class=kt style="COLOR: rgb(176,0,64)">char</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">;</SPAN>

    <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">procedure</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">B</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">;</SPAN>
    <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">var</SPAN> <SPAN class=n>K</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">:</SPAN><SPAN class=kt style="COLOR: rgb(176,0,64)">real</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">;</SPAN>
        <SPAN class=n>L</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">:</SPAN><SPAN class=kt style="COLOR: rgb(176,0,64)">integer</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">;</SPAN>

        <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">procedure</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">C</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">;</SPAN>
        <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">var</SPAN> <SPAN class=n>M</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">:</SPAN><SPAN class=kt style="COLOR: rgb(176,0,64)">real</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">;</SPAN>
        <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">begin</SPAN>
         <SPAN class=cm style="COLOR: rgb(64,128,128); FONT-STYLE: italic">(*scope A+B+C*)</SPAN>
        <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">end</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">;</SPAN>

     <SPAN class=cm style="COLOR: rgb(64,128,128); FONT-STYLE: italic">(*scope A+B*)</SPAN>
    <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">end</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">;</SPAN>

 <SPAN class=cm style="COLOR: rgb(64,128,128); FONT-STYLE: italic">(*scope A*)</SPAN>
<SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">end</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">.</SPAN>
</PRE></DIV>
<P style="MARGIN: 0.5em 0px">For example, consider the Pascal program fragment at right. The variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">I</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is visible at all points, because it is never hidden by another variable of the same name. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">char</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">K</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is visible only in the main program because it is hidden by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">real</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">K</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>visible in procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">B</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">C</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>only. Variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">L</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is also visible only in procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">B</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">C</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>but it does not hide any other variable. Variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">M</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is only visible in procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">C</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and therefore not accessible either from procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">B</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or the main program. Also, procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">C</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is visible only in procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">B</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and can therefore not be called from the main program.</P>
<P style="MARGIN: 0.5em 0px">There could have been another procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">C</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>declared in the program outside of procedure<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">B</CODE>. The place in the program where "<CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">C</CODE>" is mentioned then determines which of the two procedures named<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">C</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>it represents, thus precisely analogous with the scope of variables.</P>
<P style="MARGIN: 0.5em 0px">Correct implementation of static scope in languages with<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="First-class function" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/First-class_function">first-class</A><SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Nested function" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Nested_function">nested functions</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not trivial, as it requires each function value to carry with it a record of the values of the variables that it depends on (the pair of the function and this environment is called a<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Closure (computer science)" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_science)">closure</A>). Depending on implementation and<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Computer architecture" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Computer_architecture">computer architecture</A>, variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=Lookup class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Lookup">lookup</A><SPAN class=Apple-converted-space>&nbsp;</SPAN><I>may</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>become slightly inefficient<SUP class="noprint Inline-Template Template-Fact" style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; LINE-HEIGHT: 1">[<I><A title="Wikipedia:Citation needed" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Wikipedia:Citation_needed"><SPAN title="This claim needs references to reliable sources. (June 2012)">citation needed</SPAN></A></I>]</SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>when very deeply lexically<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Nesting (computing)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Nesting_(computing)">nested</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>functions are used, although there are well-known techniques to mitigate this.<SUP id=cite_ref-13 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#cite_note-13">[7]</A></SUP><SUP id=cite_ref-14 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#cite_note-14">[8]</A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>Also, for nested functions that only refer to their own arguments and (immediately) local variables, all relative locations can be known at<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Compile time" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Compile_time">compile time</A>. No overhead at all is therefore incurred when using that type of nested function. The same applies to particular parts of a program where nested functions are not used, and, naturally, to programs written in a language where nested functions are not available (such as in the C language).</P>
<H3 style="OVERFLOW: hidden; FONT-SIZE: 1.2em; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0.5em; MARGIN: 0.3em 0px 0px; LINE-HEIGHT: 1.6"><SPAN id=History class=mw-headline>History</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: History" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=15">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H3>
<P style="MARGIN: 0.5em 0px">Lexical scoping was used for<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=ALGOL style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/ALGOL">ALGOL</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and has been picked up in most other languages since then.<SUP id=cite_ref-Borning_6-1 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#cite_note-Borning-6">[4]</A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN><I>Deep binding</I>, which approximates static (lexical) scoping, was introduced in LISP 1.5 (via the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=Funarg class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Funarg">Funarg</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>device developed by<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Steve Russell (computer scientist)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Steve_Russell_(computer_scientist)">Steve Russell</A>, working under<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="John McCarthy (computer scientist)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/John_McCarthy_(computer_scientist)">John McCarthy</A>). The original Lisp interpreter (1960) and most early<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Lisp (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Lisp_(programming_language)">Lisps</A>used dynamic scoping, but descendants of dynamically scoped languages often adopt static scoping;<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Common Lisp" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Common_Lisp">Common Lisp</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Scheme (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scheme_(programming_language)">Scheme</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>(with SRFI 15) have both dynamic and static scoping.<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=Perl style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Perl">Perl</A>is another language with dynamic scoping that added static scoping afterwards. Languages like<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Pascal (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Pascal_(programming_language)">Pascal</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="C (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/C_(programming_language)">C</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>have always had lexical scoping, since they are both influenced by the ideas that went into<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="ALGOL 60" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/ALGOL_60">ALGOL 60</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>(although C did not include lexically<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Nested function" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Nested_function">nested functions</A>).</P>
<P style="MARGIN: 0.5em 0px">The term "lexical scope" dates at least to 1967,<SUP id=cite_ref-15 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#cite_note-15">[9]</A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>while the term "lexical scoping" dates at least to 1970, where it was used in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Project MAC" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Project_MAC">Project MAC</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>to describe the scoping rules of the Lisp dialect<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="MDL (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/MDL_(programming_language)">MDL</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>(then known as "Muddle").<SUP id=cite_ref-16 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#cite_note-16">[10]</A></SUP></P>
<H2 style='OVERFLOW: hidden; FONT-SIZE: 1.5em; FONT-FAMILY: "Linux Libertine", Georgia, Times, serif; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: rgb(162,169,177) 1px solid; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 1em 0px 0.25em; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px'><SPAN id=Dynamic_scoping class=mw-headline>Dynamic scoping</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Dynamic scoping" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=16">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H2>
<P style="MARGIN: 0.5em 0px">With<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>dynamic scope</B>, a global identifier refers to the identifier associated with the most recent environment, and is uncommon in modern languages.<SUP id=cite_ref-Borning_6-2 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#cite_note-Borning-6">[4]</A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>In technical terms, this means that each identifier has a global<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Stack (data structure)" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Stack_(data_structure)">stack</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>of bindings. Introducing a local variable with name<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">x</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>pushes a binding onto the global<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">x</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>stack (which may have been empty), which is popped off when the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Control flow" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Control_flow">control flow</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>leaves the scope. Evaluating<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">x</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in any context always yields the top binding. Note that this cannot be done at compile-time because the binding stack only exists at<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Run time (program lifecycle phase)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Run_time_(program_lifecycle_phase)">run-time</A>, which is why this type of scoping is called<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>dynamic</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>scoping.</P>
<P style="MARGIN: 0.5em 0px">Generally, certain<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Block (programming)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Block_(programming)">blocks</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>are defined to create bindings whose lifetime is the execution time of the block; this adds some features of static scoping to the dynamic scoping process. However, since a section of code can be called from many different locations and situations, it can be difficult to determine at the outset what bindings will apply when a variable is used (or if one exists at all). This can be beneficial; application of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Principle of least knowledge" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Principle_of_least_knowledge">principle of least knowledge</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>suggests that code avoid depending on the<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>reasons</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>for (or circumstances of) a variable's value, but simply use the value according to the variable's definition. This narrow interpretation of shared data can provide a very flexible system for adapting the behavior of a function to the current state (or policy) of the system. However, this benefit relies on careful documentation of all variables used this way as well as on careful avoidance of assumptions about a variable's behavior, and does not provide any mechanism to detect interference between different parts of a program. Dynamic scoping also voids all the benefits of<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Referential transparency (computer science)" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Referential_transparency_(computer_science)">referential transparency</A>. As such, dynamic scoping can be dangerous and few modern languages use it. Some languages, like<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=Perl style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Perl">Perl</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Common Lisp" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Common_Lisp">Common Lisp</A>, allow the programmer to choose static or dynamic scoping when defining or redefining a variable. Examples of languages that use dynamic scoping include<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Logo (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Logo_(programming_language)">Logo</A>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Emacs lisp" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Emacs_lisp">Emacs lisp</A>, and the shell languages<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Bash (Unix shell)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Bash_(Unix_shell)">bash</A>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Debian Almquist shell" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Debian_Almquist_shell">dash</A>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Windows PowerShell" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Windows_PowerShell">PowerShell</A>.</P>
<P style="MARGIN: 0.5em 0px">Dynamic scoping is fairly easy to implement. To find an identifier's value, the program could traverse the runtime stack, checking each activation record (each function's stack frame) for a value for the identifier. In practice, this is made more efficient via the use of an<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Association list" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Association_list">association list</A>, which is a stack of name/value pairs. Pairs are pushed onto this stack whenever declarations are made, and popped whenever variables go out of scope.<SUP id=cite_ref-FOOTNOTEScott20093.4_Implementing_Scope.2C_p._143_17-0 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#cite_note-FOOTNOTEScott20093.4_Implementing_Scope.2C_p._143-17">[11]</A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN><I>Shallow binding</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an alternative strategy that is considerably faster, making use of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>central reference table</I>, which associates each name with its own stack of meanings. This avoids a linear search during run-time to find a particular name, but care should be taken to properly maintain this table.<SUP id=cite_ref-FOOTNOTEScott20093.4_Implementing_Scope.2C_p._143_17-1 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#cite_note-FOOTNOTEScott20093.4_Implementing_Scope.2C_p._143-17">[11]</A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>Note that both of these strategies assume a last-in-first-out (<A title="LIFO (computing)" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/LIFO_(computing)">LIFO</A>) ordering to bindings for any one variable; in practice all bindings are so ordered.</P>
<P style="MARGIN: 0.5em 0px">An even simpler implementation is the representation of dynamic variables with simple global variables. The local binding is performed by saving the original value in an anonymous location on the stack that is invisible to the program. When that binding scope terminates, the original value is restored from this location. In fact, dynamic scope originated in this manner. Early implementations of Lisp used this obvious strategy for implementing local variables, and the practice survives in some dialects which are still in use, such as GNU Emacs Lisp. Lexical scope was introduced into Lisp later. This is equivalent to the above shallow binding scheme, except that the central reference table is simply the global variable binding environment, in which the current meaning of the variable is its global value. Maintaining global variables isn't complex. For instance, a symbol object can have a dedicated slot for its global value.</P>
<P style="MARGIN: 0.5em 0px">Dynamic scoping provides an excellent abstraction for<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Thread local storage" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Thread_local_storage">thread local storage</A>, but if it is used that way it cannot be based on saving and restoring a global variable. A possible implementation strategy is for each variable to have a thread-local key. When the variable is accessed, the thread-local key is used to access the thread-local memory location (by code generated by the compiler, which knows which variables are dynamic and which are lexical). If the thread-local key does not exist for the calling thread, then the global location is used. When a variable is locally bound, the prior value is stored in a hidden location on the stack. The thread-local storage is created under the variable's key, and the new value is stored there. Further nested overrides of the variable within that thread simply save and restore this thread-local location. When the initial, outer-most override's scope terminates, the thread-local key is deleted, exposing the global version of the variable once again to that thread.</P>
<H3 style="OVERFLOW: hidden; FONT-SIZE: 1.2em; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0.5em; MARGIN: 0.3em 0px 0px; LINE-HEIGHT: 1.6"><SPAN id=Macro_expansion class=mw-headline>Macro expansion</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Macro expansion" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=17">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H3>
<DIV role=note class=hatnote style="MARGIN-BOTTOM: 0.5em; FONT-STYLE: italic; PADDING-LEFT: 1.6em">Main article:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Macro expansion" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Macro_expansion">Macro expansion</A></DIV>
<P style="MARGIN: 0.5em 0px">In modern languages,<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Macro expansion" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Macro_expansion">macro expansion</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in a<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=Preprocessor style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Preprocessor">preprocessor</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a key example of de facto dynamic scope. The macro language itself only transforms the source code, without resolving names, but since the expansion is done in place, when the names in the expanded text are then resolved (notably free variables), they are resolved based on where they are expanded (loosely "called"), as if dynamic scoping were occurring.</P>
<P style="MARGIN: 0.5em 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="C preprocessor" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/C_preprocessor">C preprocessor</A>, used for<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Macro expansion" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Macro_expansion">macro expansion</A>, has de facto dynamic scope, as it does not do name resolution by itself. For example, the macro:</P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; DIRECTION: ltr" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=cp style="COLOR: rgb(188,122,0)">#define ADD_A(x) x + a</SPAN>
</PRE></DIV>
<P style="MARGIN: 0.5em 0px">will expand to add<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">a</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the passed variable, with this identifier only later resolved by the compiler based on where the macro<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">ADD_A</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is "called" (properly, expanded), is in dynamic scope, and is independent of where the macro is defined. Properly, the C preprocessor only does<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Lexical analysis" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Lexical_analysis">lexical analysis</A>, expanding the macro during the tokenization stage, but not parsing into a syntax tree or doing name resolution.</P>
<P style="MARGIN: 0.5em 0px">For example, in the following code, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">a</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the macro is resolved (after expansion) to the local variable at the expansion site:</P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; DIRECTION: ltr" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=cp style="COLOR: rgb(188,122,0)">#define ADD_A(x) x + a</SPAN>

<SPAN class=kt style="COLOR: rgb(176,0,64)">void</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">add_one</SPAN><SPAN class=p>(</SPAN><SPAN class=kt style="COLOR: rgb(176,0,64)">int</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">*</SPAN><SPAN class=n>x</SPAN><SPAN class=p>)</SPAN> <SPAN class=p>{</SPAN>
  <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">const</SPAN> <SPAN class=kt style="COLOR: rgb(176,0,64)">int</SPAN> <SPAN class=n>a</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p>;</SPAN>
  <SPAN class=o style="COLOR: rgb(102,102,102)">*</SPAN><SPAN class=n>x</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=n>ADD_A</SPAN><SPAN class=p>(</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">*</SPAN><SPAN class=n>x</SPAN><SPAN class=p>);</SPAN>
<SPAN class=p>}</SPAN>

<SPAN class=kt style="COLOR: rgb(176,0,64)">void</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">add_two</SPAN><SPAN class=p>(</SPAN><SPAN class=kt style="COLOR: rgb(176,0,64)">int</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">*</SPAN><SPAN class=n>x</SPAN><SPAN class=p>)</SPAN> <SPAN class=p>{</SPAN>
  <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">const</SPAN> <SPAN class=kt style="COLOR: rgb(176,0,64)">int</SPAN> <SPAN class=n>a</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">2</SPAN><SPAN class=p>;</SPAN>
  <SPAN class=o style="COLOR: rgb(102,102,102)">*</SPAN><SPAN class=n>x</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=n>ADD_A</SPAN><SPAN class=p>(</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">*</SPAN><SPAN class=n>x</SPAN><SPAN class=p>);</SPAN>
<SPAN class=p>}</SPAN>
</PRE></DIV>
<H2 style='OVERFLOW: hidden; FONT-SIZE: 1.5em; FONT-FAMILY: "Linux Libertine", Georgia, Times, serif; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: rgb(162,169,177) 1px solid; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 1em 0px 0.25em; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px'><SPAN id=Qualified_identifiers class=mw-headline>Qualified identifiers</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Qualified identifiers" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=18">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H2>
<P style="MARGIN: 0.5em 0px">As we have seen, one of the key reasons for scope is that it helps prevent name collisions, by allowing identical identifiers to refer to distinct things, with the restriction that the identifiers must have separate scopes. Sometimes this restriction is inconvenient; when many different things need to be accessible throughout a program, they generally all need identifiers with global scope, so different techniques are required to avoid name collisions.</P>
<P style="MARGIN: 0.5em 0px">To address this, many languages offer mechanisms for organizing global identifiers. The details of these mechanisms, and the terms used, depend on the language; but the general idea is that a group of identifiers can itself be given a name &#8212; a prefix &#8212; and, when necessary, an entity can be referred to by a<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>qualified identifier</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>consisting of the identifier plus the prefix. Normally such identifiers will have, in a sense, two sets of scopes: a scope (usually the global scope) in which the qualified identifier is visible, and one or more narrower scopes in which the<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>unqualified identifier</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>(without the prefix) is visible as well. And normally these groups can themselves be organized into groups; that is, they can be<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>nested</I>.</P>
<P style="MARGIN: 0.5em 0px">Although many languages support this concept, the details vary greatly. Some languages have mechanisms, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>namespaces</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=C++ style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/C%2B%2B">C++</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="C Sharp (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/C_Sharp_(programming_language)">C#</A>, that serve almost exclusively to enable global identifiers to be organized into groups. Other languages have mechanisms, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>packages</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Ada (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Ada_(programming_language)">Ada</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>structures</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Standard ML" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Standard_ML">Standard ML</A>, that combine this with the additional purpose of allowing some identifiers to be visible only to other members of their group. And object-oriented languages often allow classes or singleton objects to fulfill this purpose (whether or not they<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>also</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>have a mechanism for which this is the primary purpose). Furthermore, languages often meld these approaches; for example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=Perl style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Perl">Perl</A>'s packages are largely similar to C++'s namespaces, but optionally double as classes for object-oriented programming; and<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Java (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Java_(programming_language)">Java</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>organizes its variables and functions into classes, but then organizes those classes into Ada-like packages.</P>
<H2 style='OVERFLOW: hidden; FONT-SIZE: 1.5em; FONT-FAMILY: "Linux Libertine", Georgia, Times, serif; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: rgb(162,169,177) 1px solid; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 1em 0px 0.25em; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px'><SPAN id=By_language class=mw-headline>By language</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: By language" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=19">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H2>
<TABLE role=presentation class="plainlinks metadata ambox mbox-small-left ambox-content" style="BOX-SIZING: border-box; OVERFLOW: hidden; FONT-SIZE: 12px; BORDER-TOP: rgb(162,169,177) 1px solid; BORDER-RIGHT: rgb(162,169,177) 1px solid; WIDTH: 238px; BACKGROUND: rgb(251,251,251); BORDER-COLLAPSE: collapse; BORDER-BOTTOM: rgb(162,169,177) 1px solid; MARGIN: 4px 1em 4px 0px; BORDER-LEFT: rgb(242,133,0) 10px solid; LINE-HEIGHT: 1.25em; border-image: initial">
<TBODY>
<TR>
<TD class=mbox-image style="BORDER-TOP: medium none; BORDER-RIGHT: medium none; BORDER-BOTTOM: medium none; PADDING-BOTTOM: 2px; TEXT-ALIGN: center; PADDING-TOP: 2px; PADDING-LEFT: 0.5em; BORDER-LEFT: medium none; PADDING-RIGHT: 0px"><A class=image style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/File:Wiki_letter_w_cropped.svg"><IMG style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; VERTICAL-ALIGN: middle; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px" alt=[icon] src="https://upload.wikimedia.org/wikipedia/commons/thumb/1/1c/Wiki_letter_w_cropped.svg/20px-Wiki_letter_w_cropped.svg.png" width=20 height=14 data-file-height="31" data-file-width="44" srcset="//upload.wikimedia.org/wikipedia/commons/thumb/1/1c/Wiki_letter_w_cropped.svg/30px-Wiki_letter_w_cropped.svg.png 1.5x, //upload.wikimedia.org/wikipedia/commons/thumb/1/1c/Wiki_letter_w_cropped.svg/40px-Wiki_letter_w_cropped.svg.png 2x"></A></TD>
<TD class=mbox-text style="BORDER-TOP: medium none; BORDER-RIGHT: medium none; WIDTH: 189px; BORDER-BOTTOM: medium none; PADDING-BOTTOM: 0.25em; PADDING-TOP: 0.25em; PADDING-LEFT: 0.5em; BORDER-LEFT: medium none; PADDING-RIGHT: 0.5em"><SPAN class=mbox-text-span><B>This section needs expansion</B>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL style="FONT-SIZE: 10px">You can help by<SPAN class=Apple-converted-space>&nbsp;</SPAN><A class="external text" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(102,51,102); PADDING-BOTTOM: 0px !important; PADDING-TOP: 0px !important; PADDING-LEFT: 0px !important; PADDING-RIGHT: 0px !important" href="https://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=">adding to it</A>.</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL style="FONT-SIZE: 10px"><I>(April 2013)</I></SMALL></SPAN></TD></TR></TBODY></TABLE>
<P style="MARGIN: 0.5em 0px">Scoping rules for representative languages follow.</P>
<H3 style="OVERFLOW: hidden; FONT-SIZE: 1.2em; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0.5em; MARGIN: 0.3em 0px 0px; LINE-HEIGHT: 1.6"><SPAN id=C class=mw-headline>C</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: C" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=20">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H3>
<DIV role=note class=hatnote style="MARGIN-BOTTOM: 0.5em; FONT-STYLE: italic; PADDING-LEFT: 1.6em">Main article:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Linkage (software)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Linkage_(software)">Linkage (software)</A></DIV>
<P style="MARGIN: 0.5em 0px">In C, scope is traditionally known as<SPAN class=Apple-converted-space>&nbsp;</SPAN><B><A title="Linkage (software)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Linkage_(software)">linkage</A></B><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>visibility</B>, particularly for variables. C is a lexically scoped language with global scope (known as<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>external linkage</I>), a form of module scope or file scope (known as<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>internal linkage</I>), and local scope (within a function); within a function scopes can further be nested via block scope. However, standard C does not support nested functions.</P>
<P style="MARGIN: 0.5em 0px">The lifetime and visibility of a variable are determined by its<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Storage class" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Storage_class">storage class</A>. There are three types of lifetimes in C: static (program execution), automatic (block execution, allocated on the stack), and manual (allocated on the heap). Only static and automatic are supported for variables and handled by the compiler, while manually allocated memory must be tracked manually across different variables. There are three levels of visibility in C: external linkage (global), internal linkage (roughly file), and block scope (which includes functions); block scopes can be nested, and different levels of internal linkage is possible by use of includes. Internal linkage in C is visibility at the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Translation unit (programming)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Translation_unit_(programming)">translation unit</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>level, namely a source file after being processed by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="C preprocessor" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/C_preprocessor">C preprocessor</A>, notably including all relevant includes.</P>
<P style="MARGIN: 0.5em 0px">C programs are compiled as separate<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Object file" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Object_file">object files</A>, which are then linked into an executable or library via a<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Linker (computing)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Linker_(computing)">linker</A>. Thus name resolution is split across the compiler, which resolves names within a translation unit (more loosely, "compilation unit", but this is properly a different concept), and the linker, which resolves names across translation units; see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Linkage (software)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Linkage_(software)">linkage</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>for further discussion.</P>
<P style="MARGIN: 0.5em 0px">In C, variables with block scope enter scope when they are declared (not at the top of the block), move out of scope if any (non-nested) function is called within the block, move back into scope when the function returns, and move out of scope at the end of the block. In the case of automatic local variables, they are also allocated on declaration and deallocated at the end of the block, while for static local variables, they are allocated at program initialization and deallocated at program termination.</P>
<P style="MARGIN: 0.5em 0px">The following program demonstrates a variable with block scope coming into scope partway through the block, then exiting scope (and in fact being deallocated) when the block ends:</P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; DIRECTION: ltr" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=cp style="COLOR: rgb(188,122,0)">#include</SPAN> <SPAN class=cpf style="COLOR: rgb(64,128,128); FONT-STYLE: italic">&lt;stdio.h&gt;</SPAN>
<SPAN class=kt style="COLOR: rgb(176,0,64)">int</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">main</SPAN><SPAN class=p>(</SPAN><SPAN class=kt style="COLOR: rgb(176,0,64)">void</SPAN><SPAN class=p>)</SPAN>
<SPAN class=p>{</SPAN> 
    <SPAN class=kt style="COLOR: rgb(176,0,64)">char</SPAN> <SPAN class=n>x</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=sc style="COLOR: rgb(186,33,33)">'m'</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=n>printf</SPAN><SPAN class=p>(</SPAN><SPAN class=s style="COLOR: rgb(186,33,33)">"%c</SPAN><SPAN class=se style="FONT-WEIGHT: bold; COLOR: rgb(187,102,34)">\n</SPAN><SPAN class=s style="COLOR: rgb(186,33,33)">"</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>x</SPAN><SPAN class=p>);</SPAN>
    <SPAN class=p>{</SPAN>
        <SPAN class=n>printf</SPAN><SPAN class=p>(</SPAN><SPAN class=s style="COLOR: rgb(186,33,33)">"%c</SPAN><SPAN class=se style="FONT-WEIGHT: bold; COLOR: rgb(187,102,34)">\n</SPAN><SPAN class=s style="COLOR: rgb(186,33,33)">"</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>x</SPAN><SPAN class=p>);</SPAN>
        <SPAN class=kt style="COLOR: rgb(176,0,64)">char</SPAN> <SPAN class=n>x</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=sc style="COLOR: rgb(186,33,33)">'b'</SPAN><SPAN class=p>;</SPAN>
        <SPAN class=n>printf</SPAN><SPAN class=p>(</SPAN><SPAN class=s style="COLOR: rgb(186,33,33)">"%c</SPAN><SPAN class=se style="FONT-WEIGHT: bold; COLOR: rgb(187,102,34)">\n</SPAN><SPAN class=s style="COLOR: rgb(186,33,33)">"</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>x</SPAN><SPAN class=p>);</SPAN>
    <SPAN class=p>}</SPAN>
    <SPAN class=n>printf</SPAN><SPAN class=p>(</SPAN><SPAN class=s style="COLOR: rgb(186,33,33)">"%c</SPAN><SPAN class=se style="FONT-WEIGHT: bold; COLOR: rgb(187,102,34)">\n</SPAN><SPAN class=s style="COLOR: rgb(186,33,33)">"</SPAN><SPAN class=p>,</SPAN> <SPAN class=n>x</SPAN><SPAN class=p>);</SPAN>
<SPAN class=p>}</SPAN>
</PRE></DIV>
<P style="MARGIN: 0.5em 0px">There are other levels of scope in C.<SUP id=cite_ref-18 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#cite_note-18">[12]</A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>Variable names used in a function prototype have function prototype visibility, and exit scope at the end of the function prototype. Since the name is not used, this is not useful for compilation, but may be useful for documentation. Label names for GOTO statement have function scope, while case label names for<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Switch statement" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Switch_statement">switch statements</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>have block scope (the block of the switch).</P>
<H3 style="OVERFLOW: hidden; FONT-SIZE: 1.2em; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0.5em; MARGIN: 0.3em 0px 0px; LINE-HEIGHT: 1.6"><SPAN id=C.2B.2B class=mw-headline>C++</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: C++" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=21">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H3>
<P style="MARGIN: 0.5em 0px">All the variables that we intend to use in a program must have been declared with its type specifier in an earlier point in the code, like we did in the previous code at the beginning of the body of the function main when we declared that a, b, and result were of type int. A variable can be either of global or local scope. A global variable is a variable declared in the main body of the source code, outside all functions, while a local variable is one declared within the body of a function or a block.</P>
<P style="MARGIN: 0.5em 0px">Modern versions<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Anonymous function" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Anonymous_function#C.2B.2B_.28since_C.2B.2B11.29">allow</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>nested lexical scoping.</P>
<H3 style="OVERFLOW: hidden; FONT-SIZE: 1.2em; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0.5em; MARGIN: 0.3em 0px 0px; LINE-HEIGHT: 1.6"><SPAN id=Go class=mw-headline>Go</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Go" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=22">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H3>
<P style="MARGIN: 0.5em 0px"><A title="Go (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Go_(programming_language)">Go</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>is lexically scoped using blocks.<SUP id=cite_ref-go_5-1 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#cite_note-go-5">[3]</A></SUP></P>
<H3 style="OVERFLOW: hidden; FONT-SIZE: 1.2em; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0.5em; MARGIN: 0.3em 0px 0px; LINE-HEIGHT: 1.6"><SPAN id=Java class=mw-headline>Java</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Java" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=23">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H3>
<P style="MARGIN: 0.5em 0px"><A title="Java (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Java_(programming_language)">Java</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>is lexically scoped.</P>
<P style="MARGIN: 0.5em 0px">A Java class can contain three types of variables:<SUP id=cite_ref-19 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#cite_note-19">[13]</A></SUP></P>
<P style="MARGIN: 0.5em 0px"><B>Local variables</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>are defined inside a method, or a particular block. These variables are local to where they were defined and lower levels. For example, a loop inside a method can use that method's local variables, but not the other way around. The loop's variables (local to that loop) are destroyed as soon as the loop ends.</P>
<P style="MARGIN: 0.5em 0px"><B>Member variables</B>, also called<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>fields</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>are variables declared within the class, outside of any method. By default, these variables are available for all methods within that class and also for all classes in the package.</P>
<P style="MARGIN: 0.5em 0px"><B>Parameters</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>are variables in method declarations.</P>
<P style="MARGIN: 0.5em 0px">In general, a set of brackets defines a particular scope, but variables at top level within a class can differ in their behavior depending on the modifier keywords used in their definition. The following table shows the access to members permitted by each modifier.<SUP id=cite_ref-20 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#cite_note-20">[14]</A></SUP></P>
<TABLE class=wikitable style="FONT-SIZE: 14px; BORDER-TOP: rgb(162,169,177) 1px solid; BORDER-RIGHT: rgb(162,169,177) 1px solid; BORDER-COLLAPSE: collapse; BORDER-BOTTOM: rgb(162,169,177) 1px solid; COLOR: rgb(0,0,0); MARGIN: 1em 0px; BORDER-LEFT: rgb(162,169,177) 1px solid; BACKGROUND-COLOR: rgb(248,249,250)">
<TBODY>
<TR>
<TH style="BORDER-TOP: rgb(162,169,177) 1px solid; BORDER-RIGHT: rgb(162,169,177) 1px solid; BORDER-BOTTOM: rgb(162,169,177) 1px solid; PADDING-BOTTOM: 0.2em; TEXT-ALIGN: center; PADDING-TOP: 0.2em; PADDING-LEFT: 0.4em; BORDER-LEFT: rgb(162,169,177) 1px solid; PADDING-RIGHT: 0.4em; BACKGROUND-COLOR: rgb(234,236,240)">Modifier</TH>
<TH style="BORDER-TOP: rgb(162,169,177) 1px solid; BORDER-RIGHT: rgb(162,169,177) 1px solid; BORDER-BOTTOM: rgb(162,169,177) 1px solid; PADDING-BOTTOM: 0.2em; TEXT-ALIGN: center; PADDING-TOP: 0.2em; PADDING-LEFT: 0.4em; BORDER-LEFT: rgb(162,169,177) 1px solid; PADDING-RIGHT: 0.4em; BACKGROUND-COLOR: rgb(234,236,240)">Class</TH>
<TH style="BORDER-TOP: rgb(162,169,177) 1px solid; BORDER-RIGHT: rgb(162,169,177) 1px solid; BORDER-BOTTOM: rgb(162,169,177) 1px solid; PADDING-BOTTOM: 0.2em; TEXT-ALIGN: center; PADDING-TOP: 0.2em; PADDING-LEFT: 0.4em; BORDER-LEFT: rgb(162,169,177) 1px solid; PADDING-RIGHT: 0.4em; BACKGROUND-COLOR: rgb(234,236,240)">Package</TH>
<TH style="BORDER-TOP: rgb(162,169,177) 1px solid; BORDER-RIGHT: rgb(162,169,177) 1px solid; BORDER-BOTTOM: rgb(162,169,177) 1px solid; PADDING-BOTTOM: 0.2em; TEXT-ALIGN: center; PADDING-TOP: 0.2em; PADDING-LEFT: 0.4em; BORDER-LEFT: rgb(162,169,177) 1px solid; PADDING-RIGHT: 0.4em; BACKGROUND-COLOR: rgb(234,236,240)">Subclass</TH>
<TH style="BORDER-TOP: rgb(162,169,177) 1px solid; BORDER-RIGHT: rgb(162,169,177) 1px solid; BORDER-BOTTOM: rgb(162,169,177) 1px solid; PADDING-BOTTOM: 0.2em; TEXT-ALIGN: center; PADDING-TOP: 0.2em; PADDING-LEFT: 0.4em; BORDER-LEFT: rgb(162,169,177) 1px solid; PADDING-RIGHT: 0.4em; BACKGROUND-COLOR: rgb(234,236,240)">World</TH></TR>
<TR>
<TD style="BORDER-TOP: rgb(162,169,177) 1px solid; BORDER-RIGHT: rgb(162,169,177) 1px solid; BORDER-BOTTOM: rgb(162,169,177) 1px solid; PADDING-BOTTOM: 0.2em; PADDING-TOP: 0.2em; PADDING-LEFT: 0.4em; BORDER-LEFT: rgb(162,169,177) 1px solid; PADDING-RIGHT: 0.4em">public</TD>
<TD style="BORDER-TOP: rgb(162,169,177) 1px solid; BORDER-RIGHT: rgb(162,169,177) 1px solid; BORDER-BOTTOM: rgb(162,169,177) 1px solid; PADDING-BOTTOM: 0.2em; PADDING-TOP: 0.2em; PADDING-LEFT: 0.4em; BORDER-LEFT: rgb(162,169,177) 1px solid; PADDING-RIGHT: 0.4em">Yes</TD>
<TD style="BORDER-TOP: rgb(162,169,177) 1px solid; BORDER-RIGHT: rgb(162,169,177) 1px solid; BORDER-BOTTOM: rgb(162,169,177) 1px solid; PADDING-BOTTOM: 0.2em; PADDING-TOP: 0.2em; PADDING-LEFT: 0.4em; BORDER-LEFT: rgb(162,169,177) 1px solid; PADDING-RIGHT: 0.4em">Yes</TD>
<TD style="BORDER-TOP: rgb(162,169,177) 1px solid; BORDER-RIGHT: rgb(162,169,177) 1px solid; BORDER-BOTTOM: rgb(162,169,177) 1px solid; PADDING-BOTTOM: 0.2em; PADDING-TOP: 0.2em; PADDING-LEFT: 0.4em; BORDER-LEFT: rgb(162,169,177) 1px solid; PADDING-RIGHT: 0.4em">Yes</TD>
<TD style="BORDER-TOP: rgb(162,169,177) 1px solid; BORDER-RIGHT: rgb(162,169,177) 1px solid; BORDER-BOTTOM: rgb(162,169,177) 1px solid; PADDING-BOTTOM: 0.2em; PADDING-TOP: 0.2em; PADDING-LEFT: 0.4em; BORDER-LEFT: rgb(162,169,177) 1px solid; PADDING-RIGHT: 0.4em">Yes</TD></TR>
<TR>
<TD style="BORDER-TOP: rgb(162,169,177) 1px solid; BORDER-RIGHT: rgb(162,169,177) 1px solid; BORDER-BOTTOM: rgb(162,169,177) 1px solid; PADDING-BOTTOM: 0.2em; PADDING-TOP: 0.2em; PADDING-LEFT: 0.4em; BORDER-LEFT: rgb(162,169,177) 1px solid; PADDING-RIGHT: 0.4em">protected</TD>
<TD style="BORDER-TOP: rgb(162,169,177) 1px solid; BORDER-RIGHT: rgb(162,169,177) 1px solid; BORDER-BOTTOM: rgb(162,169,177) 1px solid; PADDING-BOTTOM: 0.2em; PADDING-TOP: 0.2em; PADDING-LEFT: 0.4em; BORDER-LEFT: rgb(162,169,177) 1px solid; PADDING-RIGHT: 0.4em">Yes</TD>
<TD style="BORDER-TOP: rgb(162,169,177) 1px solid; BORDER-RIGHT: rgb(162,169,177) 1px solid; BORDER-BOTTOM: rgb(162,169,177) 1px solid; PADDING-BOTTOM: 0.2em; PADDING-TOP: 0.2em; PADDING-LEFT: 0.4em; BORDER-LEFT: rgb(162,169,177) 1px solid; PADDING-RIGHT: 0.4em">Yes</TD>
<TD style="BORDER-TOP: rgb(162,169,177) 1px solid; BORDER-RIGHT: rgb(162,169,177) 1px solid; BORDER-BOTTOM: rgb(162,169,177) 1px solid; PADDING-BOTTOM: 0.2em; PADDING-TOP: 0.2em; PADDING-LEFT: 0.4em; BORDER-LEFT: rgb(162,169,177) 1px solid; PADDING-RIGHT: 0.4em">Yes</TD>
<TD style="BORDER-TOP: rgb(162,169,177) 1px solid; BORDER-RIGHT: rgb(162,169,177) 1px solid; BORDER-BOTTOM: rgb(162,169,177) 1px solid; PADDING-BOTTOM: 0.2em; PADDING-TOP: 0.2em; PADDING-LEFT: 0.4em; BORDER-LEFT: rgb(162,169,177) 1px solid; PADDING-RIGHT: 0.4em">No</TD></TR>
<TR>
<TD style="BORDER-TOP: rgb(162,169,177) 1px solid; BORDER-RIGHT: rgb(162,169,177) 1px solid; BORDER-BOTTOM: rgb(162,169,177) 1px solid; PADDING-BOTTOM: 0.2em; PADDING-TOP: 0.2em; PADDING-LEFT: 0.4em; BORDER-LEFT: rgb(162,169,177) 1px solid; PADDING-RIGHT: 0.4em">(no modifier)</TD>
<TD style="BORDER-TOP: rgb(162,169,177) 1px solid; BORDER-RIGHT: rgb(162,169,177) 1px solid; BORDER-BOTTOM: rgb(162,169,177) 1px solid; PADDING-BOTTOM: 0.2em; PADDING-TOP: 0.2em; PADDING-LEFT: 0.4em; BORDER-LEFT: rgb(162,169,177) 1px solid; PADDING-RIGHT: 0.4em">Yes</TD>
<TD style="BORDER-TOP: rgb(162,169,177) 1px solid; BORDER-RIGHT: rgb(162,169,177) 1px solid; BORDER-BOTTOM: rgb(162,169,177) 1px solid; PADDING-BOTTOM: 0.2em; PADDING-TOP: 0.2em; PADDING-LEFT: 0.4em; BORDER-LEFT: rgb(162,169,177) 1px solid; PADDING-RIGHT: 0.4em">Yes</TD>
<TD style="BORDER-TOP: rgb(162,169,177) 1px solid; BORDER-RIGHT: rgb(162,169,177) 1px solid; BORDER-BOTTOM: rgb(162,169,177) 1px solid; PADDING-BOTTOM: 0.2em; PADDING-TOP: 0.2em; PADDING-LEFT: 0.4em; BORDER-LEFT: rgb(162,169,177) 1px solid; PADDING-RIGHT: 0.4em">No</TD>
<TD style="BORDER-TOP: rgb(162,169,177) 1px solid; BORDER-RIGHT: rgb(162,169,177) 1px solid; BORDER-BOTTOM: rgb(162,169,177) 1px solid; PADDING-BOTTOM: 0.2em; PADDING-TOP: 0.2em; PADDING-LEFT: 0.4em; BORDER-LEFT: rgb(162,169,177) 1px solid; PADDING-RIGHT: 0.4em">No</TD></TR>
<TR>
<TD style="BORDER-TOP: rgb(162,169,177) 1px solid; BORDER-RIGHT: rgb(162,169,177) 1px solid; BORDER-BOTTOM: rgb(162,169,177) 1px solid; PADDING-BOTTOM: 0.2em; PADDING-TOP: 0.2em; PADDING-LEFT: 0.4em; BORDER-LEFT: rgb(162,169,177) 1px solid; PADDING-RIGHT: 0.4em">private</TD>
<TD style="BORDER-TOP: rgb(162,169,177) 1px solid; BORDER-RIGHT: rgb(162,169,177) 1px solid; BORDER-BOTTOM: rgb(162,169,177) 1px solid; PADDING-BOTTOM: 0.2em; PADDING-TOP: 0.2em; PADDING-LEFT: 0.4em; BORDER-LEFT: rgb(162,169,177) 1px solid; PADDING-RIGHT: 0.4em">Yes</TD>
<TD style="BORDER-TOP: rgb(162,169,177) 1px solid; BORDER-RIGHT: rgb(162,169,177) 1px solid; BORDER-BOTTOM: rgb(162,169,177) 1px solid; PADDING-BOTTOM: 0.2em; PADDING-TOP: 0.2em; PADDING-LEFT: 0.4em; BORDER-LEFT: rgb(162,169,177) 1px solid; PADDING-RIGHT: 0.4em">No</TD>
<TD style="BORDER-TOP: rgb(162,169,177) 1px solid; BORDER-RIGHT: rgb(162,169,177) 1px solid; BORDER-BOTTOM: rgb(162,169,177) 1px solid; PADDING-BOTTOM: 0.2em; PADDING-TOP: 0.2em; PADDING-LEFT: 0.4em; BORDER-LEFT: rgb(162,169,177) 1px solid; PADDING-RIGHT: 0.4em">No</TD>
<TD style="BORDER-TOP: rgb(162,169,177) 1px solid; BORDER-RIGHT: rgb(162,169,177) 1px solid; BORDER-BOTTOM: rgb(162,169,177) 1px solid; PADDING-BOTTOM: 0.2em; PADDING-TOP: 0.2em; PADDING-LEFT: 0.4em; BORDER-LEFT: rgb(162,169,177) 1px solid; PADDING-RIGHT: 0.4em">No</TD></TR></TBODY></TABLE>
<H3 style="OVERFLOW: hidden; FONT-SIZE: 1.2em; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0.5em; MARGIN: 0.3em 0px 0px; LINE-HEIGHT: 1.6"><SPAN id=JavaScript class=mw-headline>JavaScript</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: JavaScript" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=24">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H3>
<P style="MARGIN: 0.5em 0px"><A title=JavaScript style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/JavaScript">JavaScript</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>has simple<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>scoping rules</I>,<SUP id=cite_ref-21 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#cite_note-21">[15]</A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>but variable initialization and name resolution rules can cause problems, and the widespread use of closures for callbacks means the lexical environment of a function when defined (which is used for name resolution) can be very different from the lexical environment when it is called (which is irrelevant for name resolution). JavaScript objects have name resolution for properties, but this is a separate topic.</P>
<P style="MARGIN: 0.5em 0px">JavaScript has lexical scoping<SUP id=cite_ref-22 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#cite_note-22">[16]</A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>nested at the function level, with the global scope being the outermost scope. This scoping is used for both variables and for functions (meaning function declarations, as opposed to variables of function type).<SUP id=cite_ref-23 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#cite_note-23">[17]</A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>Block scoping is supported with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">let</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">const</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>keywords in Mozilla since JavaScript 1.7,<SUP id=cite_ref-24 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#cite_note-24">[18]</A></SUP>and As of 2013, is proposed in drafts of<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=ECMAScript style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/ECMAScript">ECMAScript</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>6, but is not currently part of the standard. Block scoping can be produced by wrapping the entire block in a function and then executing it; this is known as the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Immediately-invoked function expression" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Immediately-invoked_function_expression">immediately-invoked function expression</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>(IIFE) pattern.</P>
<P style="MARGIN: 0.5em 0px">While JavaScript scoping is simple &#8211; lexical, function-level &#8211; the associated initialization and name resolution rules are a cause of confusion. Firstly, assignment to a name not in scope defaults to creating a new global variable, not a local one. Secondly, to create a new local variable one must use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">var</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword; the variable is then created at the top of the function, with value<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">undefined</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the variable is assigned its value when the assignment expression is reached:</P>
<DL style="MARGIN-BOTTOM: 0.5em; MARGIN-TOP: 0.2em">
<DD style="MARGIN-BOTTOM: 0.1em; MARGIN-LEFT: 1.6em; MARGIN-RIGHT: 0px">A variable with an<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>Initialiser</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>is assigned the value of its<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>AssignmentExpression</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>when the<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>VariableStatement</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>is executed, not when the variable is created.<SUP id=cite_ref-25 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#cite_note-25">[19]</A></SUP></DD></DL>
<P style="MARGIN: 0.5em 0px">This is known as<SPAN class=Apple-converted-space>&nbsp;</SPAN><I><A title="Variable hoisting" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Variable_hoisting">variable hoisting</A></I><SUP id=cite_ref-26 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#cite_note-26">[20]</A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8211; the declaration, but not the initialization, is hoisted to the top of the function. Thirdly, accessing variables before initialization yields<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">undefined</CODE>, rather than a syntax error. Fourthly, for function declarations, the declaration and the initialization are both hoisted to the top of the function, unlike for variable initialization. For example, the following code produces a dialog with output<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP style="FONT-FAMILY: monospace, Courier">undefined</SAMP>, as the local variable declaration is hoisted, shadowing the global variable, but the initialization is not, so the variable is undefined when used:</P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; DIRECTION: ltr" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=nx>a</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">1</SPAN><SPAN class=p>;</SPAN>
<SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">function</SPAN> <SPAN class=nx>f</SPAN><SPAN class=p>()</SPAN> <SPAN class=p>{</SPAN>
    <SPAN class=nx>alert</SPAN><SPAN class=p>(</SPAN><SPAN class=nx>a</SPAN><SPAN class=p>);</SPAN>
    <SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">var</SPAN> <SPAN class=nx>a</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">2</SPAN><SPAN class=p>;</SPAN>
<SPAN class=p>}</SPAN>
<SPAN class=nx>f</SPAN><SPAN class=p>();</SPAN>
</PRE></DIV>
<P style="MARGIN: 0.5em 0px">Further, as functions are first-class objects in JavaScript and are frequently assigned as callbacks or returned from functions, when a function is executed, the name resolution depends on where it was originally defined (the lexical environment of the definition), not the lexical environment or execution environment where it is called. The nested scopes of a particular function (from most global to most local) in JavaScript, particularly of a closure, used as a callback, are sometimes referred to as the<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>scope chain</B>, by analogy with the prototype chain of an object.</P>
<P style="MARGIN: 0.5em 0px"><A title="Closure (computer science)" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_science)">Closures</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be produced in JavaScript by using nested functions, as functions are first-class objects.<SUP id=cite_ref-27 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#cite_note-27">[21]</A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>Returning a nested function from an enclosing function includes the local variables of the enclosing function as the (non-local) lexical environment of the returned function, yielding a closure. For example:</P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; DIRECTION: ltr" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">function</SPAN> <SPAN class=nx>newCounter</SPAN><SPAN class=p>()</SPAN> <SPAN class=p>{</SPAN>
    <SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic">// return a counter that is incremented on call (starting at 0)</SPAN>
    <SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic">// and which returns its new value</SPAN>
    <SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">var</SPAN> <SPAN class=nx>a</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=mi style="COLOR: rgb(102,102,102)">0</SPAN><SPAN class=p>;</SPAN>
    <SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">var</SPAN> <SPAN class=nx>b</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=kd style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">function</SPAN><SPAN class=p>()</SPAN> <SPAN class=p>{</SPAN> <SPAN class=nx>a</SPAN><SPAN class=o style="COLOR: rgb(102,102,102)">++</SPAN><SPAN class=p>;</SPAN> <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">return</SPAN> <SPAN class=nx>a</SPAN><SPAN class=p>;</SPAN> <SPAN class=p>};</SPAN>
    <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">return</SPAN> <SPAN class=nx>b</SPAN><SPAN class=p>;</SPAN>
<SPAN class=p>}</SPAN>

<SPAN class=nx>c</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=nx>newCounter</SPAN><SPAN class=p>();</SPAN>
<SPAN class=nx>alert</SPAN><SPAN class=p>(</SPAN><SPAN class=nx>c</SPAN><SPAN class=p>()</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">+</SPAN> <SPAN class=s1 style="COLOR: rgb(186,33,33)">' '</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">+</SPAN> <SPAN class=nx>c</SPAN><SPAN class=p>());</SPAN>  <SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic">// outputs "1 2"</SPAN>
</PRE></DIV>
<P style="MARGIN: 0.5em 0px">Closures are frequently used in JavaScript, due to being used for callbacks. Indeed, any hooking of a function in the local environment as a callback or returning it from a function creates a closure if there are any unbound variables in the function body (with the environment of the closure based on the nested scopes of the current lexical environment, or "scope chain"); this may be accidental. When creating a callback based on parameters, the parameters must be stored in a closure, otherwise it will accidentally create a closure that refers to the variables in the enclosing environment, which may change.<SUP id=cite_ref-28 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#cite_note-28">[22]</A></SUP></P>
<P style="MARGIN: 0.5em 0px">Name resolution of properties of JavaScript objects is based on inheritance in the prototype tree &#8211; a path to the root in the tree is called a<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>prototype chain</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8211; and is separate from name resolution of variables and functions.</P>
<H3 style="OVERFLOW: hidden; FONT-SIZE: 1.2em; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0.5em; MARGIN: 0.3em 0px 0px; LINE-HEIGHT: 1.6"><SPAN id=Lisp class=mw-headline>Lisp</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Lisp" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=25">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H3>
<P style="MARGIN: 0.5em 0px"><A title="Lisp (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Lisp_(programming_language)">Lisp</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>dialects have various rules for scoping. The original Lisp used dynamic scoping; it was<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Scheme (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scheme_(programming_language)">Scheme</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>that introduced static (lexical) scoping to the Lisp family.<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Common Lisp" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Common_Lisp">Common Lisp</A>adopted lexical scoping from Scheme, as did<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title=Clojure style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Clojure">Clojure</A>, but some other dialects of Lisp, like<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Emacs Lisp" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Emacs_Lisp">Emacs Lisp</A>, still use dynamic scoping.</P>
<H3 style="OVERFLOW: hidden; FONT-SIZE: 1.2em; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0.5em; MARGIN: 0.3em 0px 0px; LINE-HEIGHT: 1.6"><SPAN id=Python class=mw-headline>Python</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Python" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=26">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H3>
<P style="MARGIN: 0.5em 0px">For variables, Python has function scope, module scope, and global scope. Names enter scope at the start of a context (function, module, or globally), and exit scope when a non-nested function is called or the context ends. If a name is used prior to variable initialization, this raises a runtime exception. If a variable is simply accessed (not assigned to) in a context, name resolution follows the LEGB rule (Local, Enclosing, Global, Built-in). However, if a variable is assigned to, it defaults to creating a local variable, which is in scope for the entire context. Both these rules can be overridden with a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">global</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">nonlocal</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(in Python 3) declaration prior to use, which allows accessing global variables even if there is an intervening nonlocal variable, and assigning to global or nonlocal variables.</P>
<P style="MARGIN: 0.5em 0px">As a simple example, a function resolves a variable to the global scope:</P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; DIRECTION: ltr" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">&gt;&gt;&gt; </SPAN><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">def</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">f</SPAN><SPAN class=p>():</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">... </SPAN>    <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">print</SPAN><SPAN class=p>(</SPAN><SPAN class=n>x</SPAN><SPAN class=p>)</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">...</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">&gt;&gt;&gt; </SPAN><SPAN class=n>x</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=s1 style="COLOR: rgb(186,33,33)">'global'</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">&gt;&gt;&gt; </SPAN><SPAN class=n>f</SPAN><SPAN class=p>()</SPAN>
<SPAN class=go style="COLOR: rgb(136,136,136)">global</SPAN>
</PRE></DIV>
<P style="MARGIN: 0.5em 0px">Note that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is initialized before<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called, so no error is raised, even though it is declared after<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is declared. Lexically this is a<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Forward reference" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Forward_reference">forward reference</A>, which is allowed in Python.</P>
<P style="MARGIN: 0.5em 0px">Here assignment creates a new local variable, which does not change the value of the global variable:</P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; DIRECTION: ltr" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">&gt;&gt;&gt; </SPAN><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">def</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">f</SPAN><SPAN class=p>():</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">... </SPAN>    <SPAN class=n>x</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=s1 style="COLOR: rgb(186,33,33)">'f'</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">... </SPAN>    <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">print</SPAN><SPAN class=p>(</SPAN><SPAN class=n>x</SPAN><SPAN class=p>)</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">...</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">&gt;&gt;&gt; </SPAN><SPAN class=n>x</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=s1 style="COLOR: rgb(186,33,33)">'global'</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">&gt;&gt;&gt; </SPAN><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">print</SPAN><SPAN class=p>(</SPAN><SPAN class=n>x</SPAN><SPAN class=p>)</SPAN>
<SPAN class=go style="COLOR: rgb(136,136,136)">global</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">&gt;&gt;&gt; </SPAN><SPAN class=n>f</SPAN><SPAN class=p>()</SPAN>
<SPAN class=go style="COLOR: rgb(136,136,136)">f</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">&gt;&gt;&gt; </SPAN><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">print</SPAN><SPAN class=p>(</SPAN><SPAN class=n>x</SPAN><SPAN class=p>)</SPAN>
<SPAN class=go style="COLOR: rgb(136,136,136)">global</SPAN>
</PRE></DIV>
<P style="MARGIN: 0.5em 0px">Assignment to a variable within a function causes it to be declared local to the function (hence the local variable is in scope for the entire function), and thus using it prior to this assignment raises an error. This differs from C, where the local variable is only in scope from its declaration, not for the entire function. This code raises an error:</P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; DIRECTION: ltr" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">&gt;&gt;&gt; </SPAN><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">def</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">f</SPAN><SPAN class=p>():</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">... </SPAN>    <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">print</SPAN><SPAN class=p>(</SPAN><SPAN class=n>x</SPAN><SPAN class=p>)</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">... </SPAN>    <SPAN class=n>x</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=s1 style="COLOR: rgb(186,33,33)">'f'</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">...</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">&gt;&gt;&gt; </SPAN><SPAN class=n>x</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=s1 style="COLOR: rgb(186,33,33)">'global'</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">&gt;&gt;&gt; </SPAN><SPAN class=n>f</SPAN><SPAN class=p>()</SPAN>
<SPAN class=gt style="COLOR: rgb(0,68,221)">Traceback (most recent call last):</SPAN>
  File <SPAN class=nb style="COLOR: rgb(0,128,0)">"&lt;stdin&gt;"</SPAN>, line <SPAN class=m style="COLOR: rgb(102,102,102)">1</SPAN>, in <SPAN class=n>&lt;module&gt;</SPAN>
  File <SPAN class=nb style="COLOR: rgb(0,128,0)">"&lt;stdin&gt;"</SPAN>, line <SPAN class=m style="COLOR: rgb(102,102,102)">2</SPAN>, in <SPAN class=n>f</SPAN>
<SPAN class=gr style="COLOR: rgb(255,0,0)">UnboundLocalError</SPAN>: <SPAN class=n>local variable 'x' referenced before assignment</SPAN>
</PRE></DIV>
<P style="MARGIN: 0.5em 0px">The default name resolution rules can be overridden with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">global</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">nonlocal</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(in Python 3) keywords. In the below code, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">global x</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>declaration in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">g</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>means that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>resolves to the global variable. It thus can be accessed (as it has already been initialized), and assignment assigns to the global variable, rather than declaring a new local variable. Note that no<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">global</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>declaration is needed in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8211; since it does not assign to the variable, it defaults to resolving to the global variable.</P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; DIRECTION: ltr" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">&gt;&gt;&gt; </SPAN><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">def</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">f</SPAN><SPAN class=p>():</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">... </SPAN>    <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">print</SPAN><SPAN class=p>(</SPAN><SPAN class=n>x</SPAN><SPAN class=p>)</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">...</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">&gt;&gt;&gt; </SPAN><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">def</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">g</SPAN><SPAN class=p>():</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">... </SPAN>    <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">global</SPAN> <SPAN class=n>x</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">... </SPAN>    <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">print</SPAN><SPAN class=p>(</SPAN><SPAN class=n>x</SPAN><SPAN class=p>)</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">... </SPAN>    <SPAN class=n>x</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=s1 style="COLOR: rgb(186,33,33)">'g'</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">...</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">&gt;&gt;&gt; </SPAN><SPAN class=n>x</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=s1 style="COLOR: rgb(186,33,33)">'global'</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">&gt;&gt;&gt; </SPAN><SPAN class=n>f</SPAN><SPAN class=p>()</SPAN>
<SPAN class=go style="COLOR: rgb(136,136,136)">global</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">&gt;&gt;&gt; </SPAN><SPAN class=n>g</SPAN><SPAN class=p>()</SPAN>
<SPAN class=go style="COLOR: rgb(136,136,136)">global</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">&gt;&gt;&gt; </SPAN><SPAN class=n>f</SPAN><SPAN class=p>()</SPAN>
<SPAN class=go style="COLOR: rgb(136,136,136)">g</SPAN>
</PRE></DIV>
<P style="MARGIN: 0.5em 0px"><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">global</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can also be used for nested functions. In addition to allowing assignment to a global variable, as in an unnested function, this can also be used to access the global variable in the presence of a nonlocal variable:</P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; DIRECTION: ltr" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">&gt;&gt;&gt; </SPAN><SPAN class=n>x</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=s1 style="COLOR: rgb(186,33,33)">'global'</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">&gt;&gt;&gt; </SPAN><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">def</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">f</SPAN><SPAN class=p>():</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">... </SPAN>    <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">def</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">g</SPAN><SPAN class=p>():</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">... </SPAN>        <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">global</SPAN> <SPAN class=n>x</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">... </SPAN>        <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">print</SPAN><SPAN class=p>(</SPAN><SPAN class=n>x</SPAN><SPAN class=p>)</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">... </SPAN>    <SPAN class=n>x</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=s1 style="COLOR: rgb(186,33,33)">'f'</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">... </SPAN>    <SPAN class=n>g</SPAN><SPAN class=p>()</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">...</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">&gt;&gt;&gt; </SPAN><SPAN class=n>f</SPAN><SPAN class=p>()</SPAN>
<SPAN class=go style="COLOR: rgb(136,136,136)">global</SPAN>
</PRE></DIV>
<P style="MARGIN: 0.5em 0px">For nested functions, there is also the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">nonlocal</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>declaration, for assigning to a nonlocal variable, similar to using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">global</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in an unnested function:</P>
<DIV class="mw-highlight mw-content-ltr" style="BACKGROUND: rgb(248,248,248); unicode-bidi: embed; DIRECTION: ltr" dir=ltr><PRE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; WHITE-SPACE: pre-wrap; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1em; PADDING-TOP: 1em; PADDING-LEFT: 1em; BORDER-LEFT: rgb(234,236,240) 1px solid; LINE-HEIGHT: 1.3em; PADDING-RIGHT: 1em; BACKGROUND-COLOR: rgb(248,249,250); tab-size: 4"><SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">&gt;&gt;&gt; </SPAN><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">def</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">f</SPAN><SPAN class=p>():</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">... </SPAN>    <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">def</SPAN> <SPAN class=nf style="COLOR: rgb(0,0,255)">g</SPAN><SPAN class=p>():</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">... </SPAN>        <SPAN class=n>nonlocal</SPAN> <SPAN class=n>x</SPAN>    <SPAN class=c1 style="COLOR: rgb(64,128,128); FONT-STYLE: italic"># Python 3.x only</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">... </SPAN>        <SPAN class=n>x</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=s1 style="COLOR: rgb(186,33,33)">'g'</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">... </SPAN>    <SPAN class=n>x</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=s1 style="COLOR: rgb(186,33,33)">'f'</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">... </SPAN>    <SPAN class=n>g</SPAN><SPAN class=p>()</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">... </SPAN>    <SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">print</SPAN><SPAN class=p>(</SPAN><SPAN class=n>x</SPAN><SPAN class=p>)</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">...</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">&gt;&gt;&gt; </SPAN><SPAN class=n>x</SPAN> <SPAN class=o style="COLOR: rgb(102,102,102)">=</SPAN> <SPAN class=s1 style="COLOR: rgb(186,33,33)">'global'</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">&gt;&gt;&gt; </SPAN><SPAN class=n>f</SPAN><SPAN class=p>()</SPAN>
<SPAN class=go style="COLOR: rgb(136,136,136)">g</SPAN>
<SPAN class=gp style="FONT-WEIGHT: bold; COLOR: rgb(0,0,128)">&gt;&gt;&gt; </SPAN><SPAN class=k style="FONT-WEIGHT: bold; COLOR: rgb(0,128,0)">print</SPAN><SPAN class=p>(</SPAN><SPAN class=n>x</SPAN><SPAN class=p>)</SPAN>
<SPAN class=go style="COLOR: rgb(136,136,136)">global</SPAN>
</PRE></DIV>
<H3 style="OVERFLOW: hidden; FONT-SIZE: 1.2em; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: 0px; FONT-WEIGHT: bold; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0.5em; MARGIN: 0.3em 0px 0px; LINE-HEIGHT: 1.6"><SPAN id=R class=mw-headline>R</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: R" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=27">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H3>
<P style="MARGIN: 0.5em 0px"><A title="R (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/R_(programming_language)">R</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a lexically scoped language, unlike other implementations of<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="S (programming language)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/S_(programming_language)">S</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>where the values of free variables are determined by a set of global variables, while in R they are determined by the environment in which the function was created.<SUP id=cite_ref-29 class=reference style="FONT-SIZE: 11px; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; FONT-STYLE: normal; LINE-HEIGHT: 1"><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; WHITE-SPACE: nowrap; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#cite_note-29">[23]</A></SUP><SPAN class=Apple-converted-space>&nbsp;</SPAN>The scoping environments may be accessed using a variety of features (such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BORDER-TOP: rgb(234,236,240) 1px solid; FONT-FAMILY: monospace, Courier; BORDER-RIGHT: rgb(234,236,240) 1px solid; BORDER-BOTTOM: rgb(234,236,240) 1px solid; COLOR: rgb(0,0,0); PADDING-BOTTOM: 1px; PADDING-TOP: 1px; PADDING-LEFT: 4px; BORDER-LEFT: rgb(234,236,240) 1px solid; PADDING-RIGHT: 4px; BACKGROUND-COLOR: rgb(248,249,250); border-radius: 2px">parent.frame()</CODE>) which can simulate the experience of dynamic scoping should the programmer desire.</P>
<H2 style='OVERFLOW: hidden; FONT-SIZE: 1.5em; FONT-FAMILY: "Linux Libertine", Georgia, Times, serif; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: rgb(162,169,177) 1px solid; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 1em 0px 0.25em; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px'><SPAN id=See_also class=mw-headline>See also</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: See also" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=28">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H2>
<UL style="LIST-STYLE-TYPE: disc; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.3em 0px 0px 1.6em; LIST-STYLE-IMAGE: url(data:image/svg+xml,%3C%3Fxml%20version%3D%221.0%22%20encoding%3D%22UTF-8%22%3F%3E%0A%3Csvg%20xmlns%3D%22http%3A%2F%2Fwww.w3.org%2F2000%2Fsvg%22%20version%3D%221.1%22%20width%3D%225%22%20height%3D%2213%22%3E%0A%3Ccircle%20cx%3D%222.5%22%20cy%3D%229.5%22%20r%3D%222.5%22%20fill%3D%22%2300528c%22%2F%3E%0A%3C%2Fsvg%3E%0A); PADDING-RIGHT: 0px">
<LI style="MARGIN-BOTTOM: 0.1em"><A title="Closure (computer science)" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Closure_(computer_science)">Closure (computer science)</A></LI>
<LI style="MARGIN-BOTTOM: 0.1em"><A title="Global variable" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Global_variable">Global variable</A></LI>
<LI style="MARGIN-BOTTOM: 0.1em"><A title="Local variable" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Local_variable">Local variable</A></LI>
<LI style="MARGIN-BOTTOM: 0.1em"><A title="Let expression" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Let_expression">Let expression</A></LI>
<LI style="MARGIN-BOTTOM: 0.1em"><A title="Non-local variable" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Non-local_variable">Non-local variable</A></LI>
<LI style="MARGIN-BOTTOM: 0.1em"><A title="Name binding" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Name_binding">Name binding</A></LI>
<LI style="MARGIN-BOTTOM: 0.1em"><A title="Name resolution (programming languages)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Name_resolution_(programming_languages)">Name resolution (programming languages)</A></LI>
<LI style="MARGIN-BOTTOM: 0.1em"><A title="Variable (programming)" class=mw-redirect style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Variable_(programming)#Scope_and_extent">Variables (scope and extent)</A></LI>
<LI style="MARGIN-BOTTOM: 0.1em"><A title="Information hiding" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Information_hiding">Information hiding</A></LI>
<LI style="MARGIN-BOTTOM: 0.1em"><A title="Immediately-invoked function expression" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Immediately-invoked_function_expression">Immediately-invoked function expressions</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>in Javascript</LI>
<LI style="MARGIN-BOTTOM: 0.1em"><A title="Object lifetime" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Object_lifetime">Object lifetime</A></LI></UL>
<H2 style='OVERFLOW: hidden; FONT-SIZE: 1.5em; FONT-FAMILY: "Linux Libertine", Georgia, Times, serif; BACKGROUND: none transparent scroll repeat 0% 0%; BORDER-BOTTOM: rgb(162,169,177) 1px solid; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 1em 0px 0.25em; LINE-HEIGHT: 1.3; PADDING-RIGHT: 0px'><SPAN id=Notes class=mw-headline>Notes</SPAN><SPAN class=mw-editsection style="FONT-SIZE: small; FONT-FAMILY: sans-serif; VERTICAL-ALIGN: baseline; WHITE-SPACE: nowrap; FONT-WEIGHT: normal; MARGIN-LEFT: 1em; DISPLAY: inline-block; LINE-HEIGHT: 1em; user-select: none"><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-RIGHT: 0.25em">[</SPAN><A title="Edit section: Notes" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/w/index.php?title=Scope_(computer_science)&amp;action=edit&amp;section=29">edit</A><SPAN class=mw-editsection-bracket style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0.25em">]</SPAN></SPAN></H2>
<DIV class=reflist style="LIST-STYLE-TYPE: lower-alpha; MARGIN-BOTTOM: 0.5em; FONT-SIZE: 12px">
<OL class=references style="FONT-SIZE: 12px; PADDING-BOTTOM: 0px; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN: 0.3em 0px 0px 3.2em; LIST-STYLE-IMAGE: none; PADDING-RIGHT: 0px">
<LI id=cite_note-1 style="MARGIN-BOTTOM: 0.1em"><SPAN class=mw-cite-backlink style="user-select: none"><B><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#cite_ref-1"><SPAN class=cite-accessibility-label style="OVERFLOW: hidden; BORDER-TOP: 0px; CLIP: rect(1px 1px 1px 1px); HEIGHT: 1px !important; BORDER-RIGHT: 0px; WIDTH: 1px !important; BORDER-BOTTOM: 0px; POSITION: absolute !important; PADDING-BOTTOM: 0px !important; PADDING-TOP: 0px !important; PADDING-LEFT: 0px !important; BORDER-LEFT: 0px; TOP: -99999px; PADDING-RIGHT: 0px !important; user-select: none">Jump up</SPAN>^</A></B></SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=reference-text>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#Definition">definition</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>for meaning of "scope" versus "context".</SPAN></LI>
<LI id=cite_note-2 style="MARGIN-BOTTOM: 0.1em"><SPAN class=mw-cite-backlink style="user-select: none"><B><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#cite_ref-2"><SPAN class=cite-accessibility-label style="OVERFLOW: hidden; BORDER-TOP: 0px; CLIP: rect(1px 1px 1px 1px); HEIGHT: 1px !important; BORDER-RIGHT: 0px; WIDTH: 1px !important; BORDER-BOTTOM: 0px; POSITION: absolute !important; PADDING-BOTTOM: 0px !important; PADDING-TOP: 0px !important; PADDING-LEFT: 0px !important; BORDER-LEFT: 0px; TOP: -99999px; PADDING-RIGHT: 0px !important; user-select: none">Jump up</SPAN>^</A></B></SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=reference-text>"Dynamic scope" bases name resolution on<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>extent</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>(lifetime), not<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>scope</I>, and thus is formally inaccurate.</SPAN></LI>
<LI id=cite_note-7 style="MARGIN-BOTTOM: 0.1em"><SPAN class=mw-cite-backlink style="user-select: none"><B><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#cite_ref-7"><SPAN class=cite-accessibility-label style="OVERFLOW: hidden; BORDER-TOP: 0px; CLIP: rect(1px 1px 1px 1px); HEIGHT: 1px !important; BORDER-RIGHT: 0px; WIDTH: 1px !important; BORDER-BOTTOM: 0px; POSITION: absolute !important; PADDING-BOTTOM: 0px !important; PADDING-TOP: 0px !important; PADDING-LEFT: 0px !important; BORDER-LEFT: 0px; TOP: -99999px; PADDING-RIGHT: 0px !important; user-select: none">Jump up</SPAN>^</A></B></SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=reference-text>For example, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Jinja (template engine)" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Jinja_(template_engine)">Jinja</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>template engine for Python by default uses both lexical scoping (for imports) and dynamic scoping (for includes), and allows behavior to be specified with keywords; see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A class="external text" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(102,51,102); PADDING-RIGHT: 13px" href="http://jinja.pocoo.org/docs/templates/#import-context-behavior" rel=nofollow>Import Context Behavior</A>.</SPAN></LI>
<LI id=cite_note-9 style="MARGIN-BOTTOM: 0.1em"><SPAN class=mw-cite-backlink style="user-select: none"><B><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#cite_ref-9"><SPAN class=cite-accessibility-label style="OVERFLOW: hidden; BORDER-TOP: 0px; CLIP: rect(1px 1px 1px 1px); HEIGHT: 1px !important; BORDER-RIGHT: 0px; WIDTH: 1px !important; BORDER-BOTTOM: 0px; POSITION: absolute !important; PADDING-BOTTOM: 0px !important; PADDING-TOP: 0px !important; PADDING-LEFT: 0px !important; BORDER-LEFT: 0px; TOP: -99999px; PADDING-RIGHT: 0px !important; user-select: none">Jump up</SPAN>^</A></B></SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=reference-text>"Name resolution" and "name binding" are largely synonymous; narrowly speaking "resolution" determines which name a particular use of a name refers to, without associating it with any meaning, as in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Higher-order abstract syntax" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Higher-order_abstract_syntax">higher-order abstract syntax</A>; while "binding" associates the name with an actual meaning. In practice the terms are used interchangeably.</SPAN></LI>
<LI id=cite_note-10 style="MARGIN-BOTTOM: 0.1em"><SPAN class=mw-cite-backlink style="user-select: none"><B><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#cite_ref-10"><SPAN class=cite-accessibility-label style="OVERFLOW: hidden; BORDER-TOP: 0px; CLIP: rect(1px 1px 1px 1px); HEIGHT: 1px !important; BORDER-RIGHT: 0px; WIDTH: 1px !important; BORDER-BOTTOM: 0px; POSITION: absolute !important; PADDING-BOTTOM: 0px !important; PADDING-TOP: 0px !important; PADDING-LEFT: 0px !important; BORDER-LEFT: 0px; TOP: -99999px; PADDING-RIGHT: 0px !important; user-select: none">Jump up</SPAN>^</A></B></SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=reference-text>For<SPAN class=Apple-converted-space>&nbsp;</SPAN><A title="Self-modifying code" style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Self-modifying_code">self-modifying code</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>the lexical context itself can change during run time.</SPAN></LI>
<LI id=cite_note-11 style="MARGIN-BOTTOM: 0.1em"><SPAN class=mw-cite-backlink style="user-select: none"><B><A style="TEXT-DECORATION: none; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128)" href="https://en.wikipedia.org/wiki/Scope_(computer_science)#cite_ref-11"><SPAN class=cite-accessibility-label style="OVERFLOW: hidden; BORDER-TOP: 0px; CLIP: rect(1px 1px 1px 1px); HEIGHT: 1px !important; BORDER-RIGHT: 0px; WIDTH: 1px !important; BORDER-BOTTOM: 0px; POSITION: absolute !important; PADDING-BOTTOM: 0px !important; PADDING-TOP: 0px !important; PADDING-LEFT: 0px !important; BORDER-LEFT: 0px; TOP: -99999px; PADDING-RIGHT: 0px !important; user-select: none">Jump up</SPAN>^</A></B></SPAN><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=reference-text>By contrast, *"a variable is in scope", *"a variable's context" or *"a variable going out of scope" are all incorrect &#8211; a variable has scope, while a program has context.</SPAN></LI></OL></DIV></DIV></DIV>