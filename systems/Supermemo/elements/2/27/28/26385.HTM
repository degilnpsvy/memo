<DIV class=refnamediv>
<TABLE width="100%">
<TBODY>
<TR>
<TD vAlign=top>
<H2><SPAN class=refentrytitle>glib-mkenums</SPAN></H2>
<P>glib-mkenums &#8212; C language enum description generation utility</P></TD>
<TD class=gallery_image vAlign=top align=right></TD></TR></TBODY></TABLE></DIV>
<DIV class=refsynopsisdiv>
<H2>Synopsis</H2>
<DIV class=cmdsynopsis>
<P><CODE class=command>glib-mkenums</CODE> [OPTION...] [FILE...]</P></DIV></DIV>
<DIV class=refsect1><A name=id-1.5.2.5></A>
<H2>Description</H2>
<P><SPAN class=command><STRONG>glib-mkenums</STRONG></SPAN> is a small perl-script utility that parses C code to extract enum definitions and produces enum descriptions based on text templates specified by the user. Most frequently this script is used to produce C code that contains enum values as strings so programs can provide value name strings for introspection. </P>
<P><SPAN class=command><STRONG>glib-mkenums</STRONG></SPAN> takes a list of valid C code files as input. The options specified control the text that is output, certain substitutions are performed on the text templates for keywords enclosed in @ characters. </P>
<DIV class=refsect2><A name=id-1.5.2.5.4></A>
<H3>Production text substitutions</H3>
<P>Certain keywords enclosed in @ characters will be substituted in the emitted text. For the substitution examples of the keywords below, the following example enum definition is assumed: </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc kwc">typedef</SPAN> <SPAN class="gtkdoc kwb">enum</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  PREFIX_THE_XVALUE    <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=number>1</SPAN> <SPAN class="gtkdoc opt">&lt;&lt;</SPAN> <SPAN class=number>3</SPAN><SPAN class="gtkdoc opt">,</SPAN>
  PREFIX_ANOTHER_VALUE <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=number>1</SPAN> <SPAN class="gtkdoc opt">&lt;&lt;</SPAN> <SPAN class=number>4</SPAN>
<SPAN class="gtkdoc opt">}</SPAN> PrefixTheXEnum<SPAN class="gtkdoc opt">;</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<DIV class=variablelist>
<TABLE class=variablelist border=0>
<COLGROUP>
<COL vAlign=top align=left>
<COL></COLGROUP>
<TBODY>
<TR>
<TD>
<P><SPAN class=term>@EnumName@</SPAN></P></TD>
<TD>
<P>The name of the enum currently being processed, enum names are assumed to be properly namespaced and to use mixed capitalization to separate words (e.g. PrefixTheXEnum). </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term>@enum_name@</SPAN></P></TD>
<TD>
<P>The enum name with words lowercase and word-separated by underscores (e.g. prefix_the_xenum). </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term>@ENUMNAME@</SPAN></P></TD>
<TD>
<P>The enum name with words uppercase and word-separated by underscores (e.g. PREFIX_THE_XENUM). </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term>@ENUMSHORT@</SPAN></P></TD>
<TD>
<P>The enum name with words uppercase and word-separated by underscores, prefix stripped (e.g. THE_XENUM). </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term>@ENUMPREFIX@</SPAN></P></TD>
<TD>
<P>The prefix of the enum name (e.g. PREFIX). </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term>@VALUENAME@</SPAN></P></TD>
<TD>
<P>The enum value name currently being processed with words uppercase and word-separated by underscores, this is the assumed literal notation of enum values in the C sources (e.g. PREFIX_THE_XVALUE). </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term>@valuenick@</SPAN></P></TD>
<TD>
<P>A nick name for the enum value currently being processed, this is usually generated by stripping common prefix words of all the enum values of the current enum, the words are lowercase and underscores are substituted by a minus (e.g. the-xvalue). </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term>@valuenum@</SPAN></P></TD>
<TD>
<P>The integer value for the enum value currently being processed. This is calculated by using <SPAN class=command><STRONG>perl</STRONG></SPAN> to attempt to evaluate the expression as it appears in the C source code. If evaluation fails then <SPAN class=command><STRONG>glib-mkenums</STRONG></SPAN> will exit with an error status, but this only happens if <CODE class=literal>@valuenum@</CODE> appears in your value production template. (Since: 2.26) </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term>@type@</SPAN></P></TD>
<TD>
<P>This is substituted either by "enum" or "flags", depending on whether the enum value definitions contained bit-shift operators or not (e.g. flags). </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term>@Type@</SPAN></P></TD>
<TD>
<P>The same as <CODE class=literal>@type@</CODE> with the first letter capitalized (e.g. Flags). </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term>@TYPE@</SPAN></P></TD>
<TD>
<P>The same as <CODE class=literal>@type@</CODE> with all letters uppercased (e.g. FLAGS). </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term>@filename@</SPAN></P></TD>
<TD>
<P>The name of the input file currently being processed (e.g. foo.h). </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term>@basename@</SPAN></P></TD>
<TD>
<P>The base name of the input file currently being processed (e.g. foo.h). (Since: 2.22) </P></TD></TR></TBODY></TABLE></DIV>
<P></P></DIV>
<HR>

<DIV class=refsect2><A name=id-1.5.2.5.5></A>
<H3>Trigraph extensions</H3>
<P>Some C comments are treated specially in the parsed enum definitions, such comments start out with the trigraph sequence <CODE class=literal>/*&lt;</CODE> and end with the trigraph sequence <CODE class=literal>&gt;*/</CODE>. Per enum definition, the options "skip" and "flags" can be specified, to indicate this enum definition to be skipped, or for it to be treated as a flags definition, or to specify the common prefix to be stripped from all values to generate value nicknames, respectively. The "underscore_name" option can be used to specify the word separation used in the *_get_type() function. For instance, /*&lt; underscore_name=gnome_vfs_uri_hide_options &gt;*/. </P>
<P>Per value definition, the options "skip" and "nick" are supported. The former causes the value to be skipped, and the latter can be used to specify the otherwise auto-generated nickname. Examples: </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc kwc">typedef</SPAN> <SPAN class="gtkdoc kwb">enum</SPAN> <SPAN class=comment>/*&lt; skip &gt;*/</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  PREFIX_FOO
<SPAN class="gtkdoc opt">}</SPAN> PrefixThisEnumWillBeSkipped<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc kwc">typedef</SPAN> <SPAN class="gtkdoc kwb">enum</SPAN> <SPAN class=comment>/*&lt; flags,prefix=PREFIX &gt;*/</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  PREFIX_THE_ZEROTH_VALUE<SPAN class="gtkdoc opt">,</SPAN>	<SPAN class=comment>/*&lt; skip &gt;*/</SPAN>
  PREFIX_THE_FIRST_VALUE<SPAN class="gtkdoc opt">,</SPAN>
  PREFIX_THE_SECOND_VALUE<SPAN class="gtkdoc opt">,</SPAN>
  PREFIX_THE_THIRD_VALUE<SPAN class="gtkdoc opt">,</SPAN>	<SPAN class=comment>/*&lt; nick=the-last-value &gt;*/</SPAN>
<SPAN class="gtkdoc opt">}</SPAN> PrefixTheFlagsEnum<SPAN class="gtkdoc opt">;</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P></DIV></DIV>
<DIV class=refsect1><A name=id-1.5.2.6></A>
<H2>Options</H2>
<DIV class=variablelist>
<TABLE class=variablelist border=0>
<COLGROUP>
<COL vAlign=top align=left>
<COL></COLGROUP>
<TBODY>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>--fhead</CODE> <EM class=replaceable><CODE>TEXT</CODE></EM></SPAN></P></TD>
<TD>
<P>Put out <EM class=replaceable><CODE>TEXT</CODE></EM> prior to processing input files. </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>--fprod</CODE> <EM class=replaceable><CODE>TEXT</CODE></EM></SPAN></P></TD>
<TD>
<P>Put out <EM class=replaceable><CODE>TEXT</CODE></EM> everytime a new input file is being processed. </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>--ftail</CODE> <EM class=replaceable><CODE>TEXT</CODE></EM></SPAN></P></TD>
<TD>
<P>Put out <EM class=replaceable><CODE>TEXT</CODE></EM> after all input files have been processed. </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>--eprod</CODE> <EM class=replaceable><CODE>TEXT</CODE></EM></SPAN></P></TD>
<TD>
<P>Put out <EM class=replaceable><CODE>TEXT</CODE></EM> everytime an enum is encountered in the input files. </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>--vhead</CODE> <EM class=replaceable><CODE>TEXT</CODE></EM></SPAN></P></TD>
<TD>
<P>Put out <EM class=replaceable><CODE>TEXT</CODE></EM> before iterating over the set of values of an enum. </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>--vprod</CODE> <EM class=replaceable><CODE>TEXT</CODE></EM></SPAN></P></TD>
<TD>
<P>Put out <EM class=replaceable><CODE>TEXT</CODE></EM> for every value of an enum. </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>--vtail</CODE> <EM class=replaceable><CODE>TEXT</CODE></EM></SPAN></P></TD>
<TD>
<P>Put out <EM class=replaceable><CODE>TEXT</CODE></EM> after iterating over all values of an enum. </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>--comments</CODE> <EM class=replaceable><CODE>TEXT</CODE></EM></SPAN></P></TD>
<TD>
<P>Template for auto-generated comments, the default (for C code generations) is <CODE class=literal>"/* @comment@ */"</CODE>. </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>--template</CODE> <EM class=replaceable><CODE>FILE</CODE></EM></SPAN></P></TD>
<TD>
<P>Read templates from the given file. The templates are enclosed in specially-formatted C comments </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class=comment>/*** BEGIN section ***/</SPAN>
<SPAN class=comment>/*** END section ***/</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P>where section may be <CODE class=literal>file-header</CODE>, <CODE class=literal>file-production</CODE>, <CODE class=literal>file-tail</CODE>, <CODE class=literal>enumeration-production</CODE>, <CODE class=literal>value-header</CODE>, <CODE class=literal>value-production</CODE>, <CODE class=literal>value-tail</CODE> or <CODE class=literal>comment</CODE>. </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>--identifier-prefix</CODE> <EM class=replaceable><CODE>PREFIX</CODE></EM></SPAN></P></TD>
<TD>
<P>Indicates what portion of the enum name should be intepreted as the prefix (eg, the "<CODE class=literal>Gtk</CODE>" in "<CODE class=literal>GtkDirectionType</CODE>"). Normally this will be figured out automatically, but you may need to override the default if your namespace is capitalized oddly. </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>--symbol-prefix</CODE> <EM class=replaceable><CODE>PREFIX</CODE></EM></SPAN></P></TD>
<TD>
<P>Indicates what prefix should be used to correspond to the identifier prefix in related C function names (eg, the "<CODE class=literal>gtk</CODE>" in "<CODE class=literal>gtk_direction_type_get_type</CODE>". Equivalently, this is the lowercase version of the prefix component of the enum value names (eg, the "<CODE class=literal>GTK</CODE>" in "<CODE class=literal>GTK_DIR_UP</CODE>". The default value is the identifier prefix, converted to lowercase. </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>--help</CODE></SPAN></P></TD>
<TD>
<P>Print brief help and exit. </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>--version</CODE></SPAN></P></TD>
<TD>
<P>Print version and exit. </P></TD></TR>
<TR>
<TD>
<P><SPAN class=term><CODE class=option>--output=FILE</CODE></SPAN></P></TD>
<TD>
<P>Write output to FILE instead of stdout. </P></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=id-1.5.2.7></A>
<H2>See also</H2>
<P><SPAN class=citerefentry><SPAN class=refentrytitle>glib-genmarshal</SPAN>(1)</SPAN> </P></DIV>