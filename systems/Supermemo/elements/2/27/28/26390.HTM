<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title>How to create and use signals</H2></DIV></DIV></DIV>
<DIV class=toc>
<DL class=toc>
<DT><SPAN class=sect1><A href="https://developer.gnome.org/gobject/stable/howto-signals.html#howto-simple-signals">Simple use of signals</A></SPAN></DT></DL></DIV>
<P>The signal system in GType is pretty complex and flexible: it is possible for its users to connect at runtime any number of callbacks (implemented in any language for which a binding exists) <A class=footnote href="https://developer.gnome.org/gobject/stable/howto-signals.html#ftn.id-1.6.5.2.1" name=id-1.6.5.2.1><SUP class=footnote>[8]</SUP></A> to any signal and to stop the emission of any signal at any state of the signal emission process. This flexibility makes it possible to use GSignal for much more than just emitting signals to multiple clients. </P>
<DIV class=sect1>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both"><A name=howto-simple-signals></A>Simple use of signals</H2></DIV></DIV></DIV>
<P>The most basic use of signals is to implement event notification. For example, given a <SPAN class=type>ViewerFile</SPAN> object with a <CODE class=function>write</CODE> method, a signal could be emitted whenever the file is changed using that method. The code below shows how the user can connect a callback to the "changed" signal. </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting>file <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#g-object-new">g_object_new</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>VIEWER_FILE_TYPE<SPAN class="gtkdoc opt">,</SPAN> NULL<SPAN class="gtkdoc opt">);</SPAN>

<SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Signals.html#g-signal-connect">g_signal_connect</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>file<SPAN class="gtkdoc opt">,</SPAN> <SPAN class=string>"changed"</SPAN><SPAN class="gtkdoc opt">, (</SPAN>GCallback<SPAN class="gtkdoc opt">)</SPAN> changed_event<SPAN class="gtkdoc opt">,</SPAN> NULL<SPAN class="gtkdoc opt">);</SPAN>

<SPAN class=function>viewer_file_write</SPAN> <SPAN class="gtkdoc opt">(</SPAN>file<SPAN class="gtkdoc opt">,</SPAN> buffer<SPAN class="gtkdoc opt">,</SPAN> <SPAN class=function>strlen</SPAN> <SPAN class="gtkdoc opt">(</SPAN>buffer<SPAN class="gtkdoc opt">));</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<P>The <SPAN class=type>ViewerFile</SPAN> signal is registered in the <CODE class=function>class_init</CODE> function: </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting>file_signals<SPAN class="gtkdoc opt">[</SPAN>CHANGED<SPAN class="gtkdoc opt">] =</SPAN> 
  <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Signals.html#g-signal-newv">g_signal_newv</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"changed"</SPAN><SPAN class="gtkdoc opt">,</SPAN>
                 <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-FROM-CLASS:CAPS">G_TYPE_FROM_CLASS</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>object_class<SPAN class="gtkdoc opt">),</SPAN>
                 G_SIGNAL_RUN_LAST <SPAN class="gtkdoc opt">|</SPAN> G_SIGNAL_NO_RECURSE <SPAN class="gtkdoc opt">|</SPAN> G_SIGNAL_NO_HOOKS<SPAN class="gtkdoc opt">,</SPAN>
                 NULL <SPAN class=comment>/* closure */</SPAN><SPAN class="gtkdoc opt">,</SPAN>
                 NULL <SPAN class=comment>/* accumulator */</SPAN><SPAN class="gtkdoc opt">,</SPAN>
                 NULL <SPAN class=comment>/* accumulator data */</SPAN><SPAN class="gtkdoc opt">,</SPAN>
                 NULL <SPAN class=comment>/* C marshaller */</SPAN><SPAN class="gtkdoc opt">,</SPAN>
                 G_TYPE_NONE <SPAN class=comment>/* return_type */</SPAN><SPAN class="gtkdoc opt">,</SPAN>
                 <SPAN class=number>0</SPAN>     <SPAN class=comment>/* n_params */</SPAN><SPAN class="gtkdoc opt">,</SPAN>
                 NULL  <SPAN class=comment>/* param_types */</SPAN><SPAN class="gtkdoc opt">);</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P>and the signal is emitted in <CODE class=function>viewer_file_write</CODE>: </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc kwb">void</SPAN>
<SPAN class=function>viewer_file_write</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFile   <SPAN class="gtkdoc opt">*</SPAN>self<SPAN class="gtkdoc opt">,</SPAN>
                   <SPAN class="gtkdoc kwb">const</SPAN> guint8 <SPAN class="gtkdoc opt">*</SPAN>buffer<SPAN class="gtkdoc opt">,</SPAN>
                   gsize         size<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Warnings-and-Assertions.html#g-return-if-fail">g_return_if_fail</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=function>VIEWER_IS_FILE</SPAN> <SPAN class="gtkdoc opt">(</SPAN>self<SPAN class="gtkdoc opt">));</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Warnings-and-Assertions.html#g-return-if-fail">g_return_if_fail</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>buffer <SPAN class="gtkdoc opt">!=</SPAN> NULL <SPAN class="gtkdoc opt">||</SPAN> size <SPAN class="gtkdoc opt">==</SPAN> <SPAN class=number>0</SPAN><SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=comment>/* First write data. */</SPAN>

  <SPAN class=comment>/* Then, notify user of data written. */</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Signals.html#g-signal-emit">g_signal_emit</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>self<SPAN class="gtkdoc opt">,</SPAN> file_signals<SPAN class="gtkdoc opt">[</SPAN>CHANGED<SPAN class="gtkdoc opt">],</SPAN> <SPAN class=number>0</SPAN> <SPAN class=comment>/* details */</SPAN><SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P>As shown above, the details parameter can safely be set to zero if no detail needs to be conveyed. For a discussion of what it can be used for, see <A title="The detail argument" class=xref href="https://developer.gnome.org/gobject/stable/signal.html#signal-detail">the section called &#8220;The <SPAN class=emphasis><EM>detail</EM></SPAN> argument&#8221;</A> </P>
<P>The C signal marshaller should always be <CODE class=literal>NULL</CODE>, in which case the best marshaller for the given closure type will be chosen by GLib. This may be an internal marshaller specific to the closure type, or <CODE class=function>g_cclosure_marshal_generic</CODE>, which implements generic conversion of arrays of parameters to C callback invocations. GLib used to require the user to write or generate a type-specific marshaller and pass that, but that has been deprecated in favour of automatic selection of marshallers. </P>
<P>Note that <CODE class=function>g_cclosure_marshal_generic</CODE> is slower than non-generic marshallers, so should be avoided for performance critical code. However, performance critical code should rarely be using signals anyway, as emitting a signal blocks on emitting it to all listeners, which has potentially unbounded cost. </P></DIV>
<DIV class=footnotes><BR>
<HR style="WIDTH: 100px; TEXT-ALIGN: left; MARGIN-LEFT: 0px">

<DIV id=ftn.id-1.6.5.2.1 class=footnote>
<P><A class=para href="https://developer.gnome.org/gobject/stable/howto-signals.html#id-1.6.5.2.1"><SUP class=para>[8] </SUP></A>A Python callback can be connected to any signal on any C-based GObject, and vice versa, assuming that the Python object inherits from GObject.</P></DIV></DIV>