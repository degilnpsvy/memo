Initializing Variables</P>
<P>C allows variables to be initialized in the declaration statement. For example, the following statement declares the integer counter and initializes it to 0:</P>
<P>int counter = 0;&nbsp;&nbsp;&nbsp; /* number cases counted so far */<BR>Arrays can also be initialized in this manner. The element list must be enclosed in curly braces ({}). For example:</P>
<P>/* Product numbers for the parts we are making */ <BR>int product_codes[3] = {10, 972, 45};<BR>The previous initialization is equivalent to:</P>
<P>product_codes[0] = 10; <BR>product_codes[1] = 972; <BR>product_codes[2] = 45;<BR>The number of elements in {} does not have to match the array size. If too many numbers are present, a warning will be issued. If an insufficient amount of numbers are present, C will initialize the extra elements to 0.</P>
<P>If no dimension is given, C will determine the dimension from the number of elements in the initialization list. For example, we could have initialized our variable product_codes with the statement:</P>
<P>/* Product numbers for the parts we are making */ <BR>int product_codes[] = {10, 972, 45};<BR>Initializing multidimensional arrays is similar to initializing single-dimension arrays. A set of brackets ([ ]) encloses each dimension. The declaration:</P>
<P>int matrix[2][4]; /* a typical matrix */<BR>can be thought of as a declaration of an array of dimension 2 with elements that are arrays of dimension 4. This array is initialized as follows:</P>
<P>/* a typical matrix */ <BR>int matrix[2][4] = <BR>&nbsp;&nbsp;&nbsp; { <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {1, 2, 3, 4}, <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; {10, 20, 30, 40} <BR>&nbsp;&nbsp;&nbsp; };<BR>Strings can be initialized in a similar manner. For example, to initialize the variable name to the string &#8220;Sam&#8221;, we use the statement:</P>
<P>char&nbsp;&nbsp;&nbsp; name[] = {'S', 'a', 'm', '\0'};<BR>C has a special shorthand for initializing strings: Surround the string with double quotes ("") to simplify initialization. The previous example could have been written:</P>
<P>char name[] = "Sam";<BR>The dimension of name is 4, because C allocates a place for the '\0' character that ends the string.</P>
<P>The following declaration:</P>
<P>char string[50] = "Sam";<BR>is equivalent to:</P>
<P>char string[50]; <BR>. <BR>. <BR>. <BR>strcpy(string,"Sam");<BR>An array of 50 characters is allocated but the length of the string is 3.