/*<BR>&nbsp;* Pass values first through all filters and then, if event has not been<BR>&nbsp;* filtered out, through all open handles. This function is called with<BR>&nbsp;* dev-&gt;event_lock held and interrupts disabled.<BR>&nbsp;*/<BR>static void input_pass_values(struct input_dev *dev,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct input_value *vals, unsigned int count)<BR>{<BR>&nbsp;struct input_handle *handle;<BR>&nbsp;struct input_value *v;</P>
<P>&nbsp;if (!count)<BR>&nbsp;&nbsp;return;</P>
<P>&nbsp;rcu_read_lock();</P>
<P>&nbsp;handle = rcu_dereference(dev-&gt;grab);<BR>&nbsp;if (handle) {<BR>&nbsp;&nbsp;count = input_to_handler(handle, vals, count);<BR>&nbsp;} else {<BR>&nbsp;&nbsp;list_for_each_entry_rcu(handle, &amp;dev-&gt;h_list, d_node)<BR>&nbsp;&nbsp;&nbsp;if (handle-&gt;open) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;count = input_to_handler(handle, vals, count);<BR>&nbsp;&nbsp;&nbsp;&nbsp;if (!count)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;break;<BR>&nbsp;&nbsp;&nbsp;}<BR>&nbsp;}</P>
<P>&nbsp;rcu_read_unlock();</P>
<P>&nbsp;add_input_randomness(vals-&gt;type, vals-&gt;code, vals-&gt;value);</P>
<P>&nbsp;/* trigger auto repeat for key events */<BR>&nbsp;if (test_bit(EV_REP, dev-&gt;evbit) &amp;&amp; test_bit(EV_KEY, dev-&gt;evbit)) {<BR>&nbsp;&nbsp;for (v = vals; v != vals + count; v++) {<BR>&nbsp;&nbsp;&nbsp;if (v-&gt;type == EV_KEY &amp;&amp; v-&gt;value != 2) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;if (v-&gt;value)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input_start_autorepeat(dev, v-&gt;code);<BR>&nbsp;&nbsp;&nbsp;&nbsp;else<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;input_stop_autorepeat(dev);<BR>&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;}<BR>&nbsp;}<BR>}