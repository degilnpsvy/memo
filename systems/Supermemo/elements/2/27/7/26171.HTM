return __le64_to_cpu(__raw_readq(addr)); 
<P></P>
<P>include/uapi/linux/byteorder/big_endian.h<BR>31 #define __le64_to_cpu(x) __swab64((__force __u64)(__le64)(x))</P>
<P>/include/uapi/linux/swab.h<BR>119 /**<BR>120&nbsp; * __swab64 - return a byteswapped 64-bit value<BR>121&nbsp; * @x: value to byteswap<BR>122&nbsp; */<BR>123 #define __swab64(x)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>124&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (__builtin_constant_p((__u64)(x)) ?&nbsp;&nbsp;&nbsp;&nbsp; \<BR>125&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ___constant_swab64(x) :&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>126&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __fswab64(x))<BR>127 </P>
<P>&nbsp;22 #define ___constant_swab64(x) ((__u64)(&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;23&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (((__u64)(x) &amp; (__u64)0x00000000000000ffULL) &lt;&lt; 56) |&nbsp;&nbsp; \<BR>&nbsp;24&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (((__u64)(x) &amp; (__u64)0x000000000000ff00ULL) &lt;&lt; 40) |&nbsp;&nbsp; \<BR>&nbsp;25&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (((__u64)(x) &amp; (__u64)0x0000000000ff0000ULL) &lt;&lt; 24) |&nbsp;&nbsp; \<BR>&nbsp;26&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (((__u64)(x) &amp; (__u64)0x00000000ff000000ULL) &lt;&lt;&nbsp; 8) |&nbsp;&nbsp; \<BR>&nbsp;27&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (((__u64)(x) &amp; (__u64)0x000000ff00000000ULL) &gt;&gt;&nbsp; 8) |&nbsp;&nbsp; \<BR>&nbsp;28&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (((__u64)(x) &amp; (__u64)0x0000ff0000000000ULL) &gt;&gt; 24) |&nbsp;&nbsp; \<BR>&nbsp;29&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (((__u64)(x) &amp; (__u64)0x00ff000000000000ULL) &gt;&gt; 40) |&nbsp;&nbsp; \<BR>&nbsp;30&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (((__u64)(x) &amp; (__u64)0xff00000000000000ULL) &gt;&gt; 56)))</P>
<P>&nbsp;68 static inline __attribute_const__ __u64 __fswab64(__u64 val)<BR>&nbsp;69 {<BR>&nbsp;70 #ifdef __HAVE_BUILTIN_BSWAP64__<BR>&nbsp;71&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return __builtin_bswap64(val);<BR>&nbsp;72 #elif defined (__arch_swab64)<BR>&nbsp;73&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return __arch_swab64(val);<BR>&nbsp;74 #elif defined(__SWAB_64_THRU_32__)<BR>&nbsp;75&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __u32 h = val &gt;&gt; 32;<BR>&nbsp;76&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __u32 l = val &amp; ((1ULL &lt;&lt; 32) - 1);<BR>&nbsp;77&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return (((__u64)__fswab32(l)) &lt;&lt; 32) | ((__u64)(__fswab32(h)));<BR>&nbsp;78 #else<BR>&nbsp;79&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return ___constant_swab64(val);<BR>&nbsp;80 #endif<BR>&nbsp;81 }</P>
<P>/include/uapi/linux/byteorder/little_endian.h 31 </P>
<P>#define __le64_to_cpu(x) ((__force __u64)(__le64)(x))