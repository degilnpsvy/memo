<DIV class=preface>
<DIV class=titlepage>
<DIV>
<DIV>
<H1 class=title>Introduction</H1></DIV></DIV></DIV>
<P>Most modern programming languages come with their own native object systems and additional fundamental algorithmic language constructs. Just as GLib serves as an implementation of such fundamental types and algorithms (linked lists, hash tables and so forth), the GLib Object System provides the required implementations of a flexible, extensible, and intentionally easy to map (into other languages) object-oriented framework for C. The substantial elements that are provided can be summarized as: </P>
<DIV class=itemizedlist>
<UL class=itemizedlist style="LIST-STYLE-TYPE: disc">
<LI class=listitem>
<P>A generic type system to register arbitrary single-inherited flat and deep derived types as well as interfaces for structured types. It takes care of creation, initialization and memory management of the assorted object and class structures, maintains parent/child relationships and deals with dynamic implementations of such types. That is, their type specific implementations are relocatable/unloadable during runtime. </P>
<LI class=listitem>
<P>A collection of fundamental type implementations, such as integers, doubles, enums and structured types, to name a few. </P>
<LI class=listitem>
<P>A sample fundamental type implementation to base object hierarchies upon - the GObject fundamental type. </P>
<LI class=listitem>
<P>A signal system that allows very flexible user customization of virtual/overridable object methods and can serve as a powerful notification mechanism. </P>
<LI class=listitem>
<P>An extensible parameter/value system, supporting all the provided fundamental types that can be used to generically handle object properties or otherwise parameterized types. </P></LI></UL></DIV>
<P></P></DIV>
<DIV class=footer>
<HR>
</DIV>