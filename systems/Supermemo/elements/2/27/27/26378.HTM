<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title>The GObject base class</H2></DIV></DIV></DIV>
<DIV class=toc>
<DL class=toc>
<DT><SPAN class=sect1><A href="https://developer.gnome.org/gobject/stable/chapter-gobject.html#gobject-instantiation">Object instantiation</A></SPAN></DT>
<DT><SPAN class=sect1><A href="https://developer.gnome.org/gobject/stable/gobject-memory.html">Object memory management</A></SPAN></DT>
<DD>
<DL>
<DT><SPAN class=sect2><A href="https://developer.gnome.org/gobject/stable/gobject-memory.html#gobject-memory-refcount">Reference count</A></SPAN></DT>
<DT><SPAN class=sect2><A href="https://developer.gnome.org/gobject/stable/gobject-memory.html#gobject-memory-weakref">Weak References</A></SPAN></DT>
<DT><SPAN class=sect2><A href="https://developer.gnome.org/gobject/stable/gobject-memory.html#gobject-memory-cycles">Reference counts and cycles</A></SPAN></DT></DL></DD>
<DT><SPAN class=sect1><A href="https://developer.gnome.org/gobject/stable/gobject-properties.html">Object properties</A></SPAN></DT>
<DD>
<DL>
<DT><SPAN class=sect2><A href="https://developer.gnome.org/gobject/stable/gobject-properties.html#gobject-multi-properties">Accessing multiple properties at once</A></SPAN></DT></DL></DD></DL></DIV>
<P>The previous chapter discussed the details of GLib's Dynamic Type System. The GObject library also contains an implementation for a base fundamental type named <A class=link href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#GObject"><SPAN class=type>GObject</SPAN></A>. </P>
<P><A class=link href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#GObject"><SPAN class=type>GObject</SPAN></A> is a fundamental classed instantiable type. It implements: </P>
<DIV class=itemizedlist>
<UL class=itemizedlist style="LIST-STYLE-TYPE: disc">
<LI class=listitem>
<P>Memory management with reference counting</P></LI>
<LI class=listitem>
<P>Construction/Destruction of instances</P></LI>
<LI class=listitem>
<P>Generic per-object properties with set/get function pairs</P></LI>
<LI class=listitem>
<P>Easy use of signals</P></LI></UL></DIV>
<P>All the GNOME libraries which use the GLib type system (like GTK+ and GStreamer) inherit from <A class=link href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#GObject"><SPAN class=type>GObject</SPAN></A> which is why it is important to understand the details of how it works. </P>
<DIV class=sect1>
<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both"><A name=gobject-instantiation></A>Object instantiation</H2></DIV></DIV></DIV>
<P>The <CODE class=function><A title=g_object_new&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#g-object-new">g_object_new</A></CODE> family of functions can be used to instantiate any GType which inherits from the GObject base type. All these functions make sure the class and instance structures have been correctly initialized by GLib's type system and then invoke at one point or another the constructor class method which is used to: </P>
<DIV class=itemizedlist>
<UL class=itemizedlist style="LIST-STYLE-TYPE: disc">
<LI class=listitem>
<P>Allocate and clear memory through <CODE class=function><A title=g_type_create_instance&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-create-instance">g_type_create_instance</A></CODE>, </P></LI>
<LI class=listitem>
<P>Initialize the object's instance with the construction properties. </P></LI></UL></DIV>
<P>Although one can expect all class and instance members (except the fields pointing to the parents) to be set to zero, some consider it good practice to explicitly set them. </P>
<P>Once all construction operations have been completed and constructor properties set, the constructed class method is called. </P>
<P>Objects which inherit from GObject are allowed to override this constructed class method. The example below shows how <SPAN class=type>ViewerFile</SPAN> overrides the parent's construction process: </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc ppc">#define VIEWER_TYPE_FILE viewer_file_get_type ()</SPAN>
<SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DECLARE-FINAL-TYPE:CAPS">G_DECLARE_FINAL_TYPE</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFile<SPAN class="gtkdoc opt">,</SPAN> viewer_file<SPAN class="gtkdoc opt">,</SPAN> VIEWER<SPAN class="gtkdoc opt">,</SPAN> <SPAN class="gtkdoc kwb">FILE</SPAN><SPAN class="gtkdoc opt">,</SPAN> GObject<SPAN class="gtkdoc opt">)</SPAN>

<SPAN class="gtkdoc kwb">struct</SPAN> _ViewerFile
<SPAN class="gtkdoc opt">{</SPAN>
  GObject parent_instance<SPAN class="gtkdoc opt">;</SPAN>

  <SPAN class=comment>/* instance members */</SPAN>
<SPAN class="gtkdoc opt">};</SPAN>

<SPAN class=comment>/* will create viewer_file_get_type and set viewer_file_parent_class */</SPAN>
<SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE:CAPS">G_DEFINE_TYPE</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFile<SPAN class="gtkdoc opt">,</SPAN> viewer_file<SPAN class="gtkdoc opt">,</SPAN> G_TYPE_OBJECT<SPAN class="gtkdoc opt">)</SPAN>

<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>viewer_file_constructed</SPAN> <SPAN class="gtkdoc opt">(</SPAN>GObject <SPAN class="gtkdoc opt">*</SPAN>obj<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class=comment>/* update the object state depending on constructor properties */</SPAN>

  <SPAN class=comment>/* Always chain up to the parent constructed function to complete object</SPAN>
<SPAN class=comment>   * initialisation. */</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#G-OBJECT-CLASS:CAPS">G_OBJECT_CLASS</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>viewer_file_parent_class<SPAN class="gtkdoc opt">)-&gt;</SPAN><SPAN class=function>constructed</SPAN> <SPAN class="gtkdoc opt">(</SPAN>obj<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>viewer_file_class_init</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFileClass <SPAN class="gtkdoc opt">*</SPAN>klass<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  GObjectClass <SPAN class="gtkdoc opt">*</SPAN>object_class <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#G-OBJECT-CLASS:CAPS">G_OBJECT_CLASS</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>klass<SPAN class="gtkdoc opt">);</SPAN>

  object_class<SPAN class="gtkdoc opt">-&gt;</SPAN>constructed <SPAN class="gtkdoc opt">=</SPAN> viewer_file_constructed<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>viewer_file_init</SPAN> <SPAN class="gtkdoc opt">(</SPAN>ViewerFile <SPAN class="gtkdoc opt">*</SPAN>self<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class=comment>/* initialize the object */</SPAN>
<SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P>If the user instantiates an object <SPAN class=type>ViewerFile</SPAN> with: </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting>ViewerFile <SPAN class="gtkdoc opt">*</SPAN>file <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#g-object-new">g_object_new</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>VIEWER_TYPE_FILE<SPAN class="gtkdoc opt">,</SPAN> NULL<SPAN class="gtkdoc opt">);</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P>If this is the first instantiation of such an object, the <CODE class=function>viewer_file_class_init</CODE> function will be invoked after any <CODE class=function>viewer_file_base_class_init</CODE> function. This will make sure the class structure of this new object is correctly initialized. Here, <CODE class=function>viewer_file_class_init</CODE> is expected to override the object's class methods and setup the class' own methods. In the example above, the constructor method is the only overridden method: it is set to <CODE class=function>viewer_file_constructor</CODE>. </P>
<P>Once <CODE class=function><A title=g_object_new&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#g-object-new">g_object_new</A></CODE> has obtained a reference to an initialized class structure, it invokes its constructor method to create an instance of the new object, if the constructor has been overridden in <CODE class=function>viewer_file_class_init</CODE>. Overridden constructors must chain up to their parent&#8217;s constructor. In order to find the parent class and chain up to the parent class constructor, we can use the <CODE class=literal>viewer_file_parent_class</CODE> pointer that has been set up for us by the <A title=G_DEFINE_TYPE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE:CAPS"><CODE class=literal>G_DEFINE_TYPE</CODE></A> macro. </P>
<P>Finally, at one point or another, <CODE class=function>g_object_constructor</CODE> is invoked by the last constructor in the chain. This function allocates the object's instance buffer through <CODE class=function><A title=g_type_create_instance&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-create-instance">g_type_create_instance</A></CODE> which means that the <CODE class=function>instance_init</CODE> function is invoked at this point if one was registered. After <CODE class=function>instance_init</CODE> returns, the object is fully initialized and should be ready to have its methods called by the user. When <CODE class=function><A title=g_type_create_instance&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-create-instance">g_type_create_instance</A></CODE> returns, <CODE class=function>g_object_constructor</CODE> sets the construction properties (i.e. the properties which were given to <CODE class=function><A title=g_object_new&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#g-object-new">g_object_new</A></CODE>) and returns to the user's constructor. </P>
<P>The process described above might seem a bit complicated, but it can be summarized easily by the table below which lists the functions invoked by <CODE class=function><A title=g_object_new&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#g-object-new">g_object_new</A></CODE> and their order of invocation: </P>
<P></P>
<DIV class=table><A name=gobject-construction-table></A>
<P class=title><B>Table&nbsp;4.&nbsp;<CODE class=function><A title=g_object_new&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#g-object-new">g_object_new</A></CODE></B></P>
<DIV class=table-contents>
<TABLE class=table summary=g_object_new border=1>
<COLGROUP>
<COL align=left>
<COL align=left>
<COL align=left></COLGROUP>
<THEAD>
<TR>
<TH align=left>Invocation time</TH>
<TH align=left>Function invoked</TH>
<TH align=left>Function's parameters</TH>
<TH>Remark</TH></TR></THEAD>
<TBODY>
<TR>
<TD rowSpan=4 align=left>First call to <CODE class=function><A title=g_object_new&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#g-object-new">g_object_new</A></CODE> for target type</TD>
<TD align=left>target type's <CODE class=function>base_init</CODE> function</TD>
<TD align=left>On the inheritance tree of classes from fundamental type to target type. <CODE class=function>base_init</CODE> is invoked once for each class structure.</TD>
<TD>Never used in practice. Unlikely you will need it.</TD></TR>
<TR>
<TD align=left>target type's <CODE class=function>class_init</CODE> function</TD>
<TD align=left>On target type's class structure</TD>
<TD>Here, you should make sure to initialize or override class methods (that is, assign to each class' method its function pointer) and create the signals and the properties associated to your object. </TD></TR>
<TR>
<TD align=left>interface's <CODE class=function>base_init</CODE> function</TD>
<TD align=left>On interface's vtable</TD>
<TD>&nbsp;</TD></TR>
<TR>
<TD align=left>interface's <CODE class=function>interface_init</CODE> function</TD>
<TD align=left>On interface's vtable</TD>
<TD>&nbsp;</TD></TR>
<TR>
<TD rowSpan=3 align=left>Each call to <CODE class=function><A title=g_object_new&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#g-object-new">g_object_new</A></CODE> for target type</TD>
<TD align=left>target type's class <CODE class=function>constructor</CODE> method: <CODE class=function>GObjectClass-&gt;constructor</CODE> </TD>
<TD align=left>On object's instance</TD>
<TD>If you need to handle construct properties in a custom way, or implement a singleton class, override the constructor method and make sure to chain up to the object's parent class before doing your own initialization. In doubt, do not override the constructor method. </TD></TR>
<TR>
<TD align=left>type's <CODE class=function>instance_init</CODE> function</TD>
<TD align=left>On the inheritance tree of classes from fundamental type to target type. the <CODE class=function>instance_init</CODE> provided for each type is invoked once for each instance structure.</TD>
<TD>Provide an <CODE class=function>instance_init</CODE> function to initialize your object before its construction properties are set. This is the preferred way to initialize a GObject instance. This function is equivalent to C++ constructors. </TD></TR>
<TR>
<TD align=left>target type's class <CODE class=function>constructed</CODE> method: <CODE class=function>GObjectClass-&gt;constructed</CODE> </TD>
<TD align=left>On object's instance</TD>
<TD>If you need to perform object initialization steps after all construct properties have been set. This is the final step in the object initialization process, and is only called if the <CODE class=function>constructor</CODE> method returned a new object instance (rather than, for example, an existing singleton). </TD></TR></TBODY></TABLE></DIV></DIV>
<P><BR class=table-break></P>
<P>Readers should feel concerned about one little twist in the order in which functions are invoked: while, technically, the class' constructor method is called <SPAN class=emphasis><EM>before</EM></SPAN> the GType's <CODE class=function>instance_init</CODE> function (since <CODE class=function><A title=g_type_create_instance&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-create-instance">g_type_create_instance</A></CODE> which calls <CODE class=function>instance_init</CODE> is called by <CODE class=function>g_object_constructor</CODE> which is the top-level class constructor method and to which users are expected to chain to), the user's code which runs in a user-provided constructor will always run <SPAN class=emphasis><EM>after</EM></SPAN> GType's <CODE class=function>instance_init</CODE> function since the user-provided constructor <SPAN class=emphasis><EM>must</EM></SPAN> (you've been warned) chain up <SPAN class=emphasis><EM>before</EM></SPAN> doing anything useful. </P></DIV>