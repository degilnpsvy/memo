<DIV class=titlepage>
<DIV>
<DIV>
<H2 class=title style="CLEAR: both">Exporting a C API</H2></DIV></DIV></DIV>
<P>C APIs are defined by a set of functions and global variables which are usually exported from a binary. C functions have an arbitrary number of arguments and one return value. Each function is thus uniquely identified by the function name and the set of C types which describe the function arguments and return value. The global variables exported by the API are similarly identified by their name and their type. </P>
<P>A C API is thus merely defined by a set of names to which a set of types are associated. If you know the function calling convention and the mapping of the C types to the machine types used by the platform you are on, you can resolve the name of each function to find where the code associated to this function is located in memory, and then construct a valid argument list for the function. Finally, all you have to do is trigger a call to the target C function with the argument list. </P>
<P>For the sake of discussion, here is a sample C function and the associated 32 bit x86 assembly code generated by GCC on a Linux computer: </P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>function_foo</SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class="gtkdoc kwb">int</SPAN> foo<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwb">int</SPAN>
<SPAN class=function>main</SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class="gtkdoc kwb">int</SPAN>   argc<SPAN class="gtkdoc opt">,</SPAN>
      <SPAN class="gtkdoc kwb">char</SPAN> <SPAN class="gtkdoc opt">*</SPAN>argv<SPAN class="gtkdoc opt">[])</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
	<SPAN class=function>function_foo</SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=number>10</SPAN><SPAN class="gtkdoc opt">);</SPAN>

	<SPAN class=keyword>return</SPAN> <SPAN class=number>0</SPAN><SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

push   $<SPAN class=number>0xa</SPAN>
call   <SPAN class=number>0x80482f4</SPAN> <SPAN class="gtkdoc opt">&lt;</SPAN>function_foo<SPAN class="gtkdoc opt">&gt;</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P>The assembly code shown above is pretty straightforward: the first instruction pushes the hexadecimal value 0xa (decimal value 10) as a 32-bit integer on the stack and calls <CODE class=function>function_foo</CODE>. As you can see, C function calls are implemented by GCC as native function calls (this is probably the fastest implementation possible). </P>
<P>Now, let's say we want to call the C function <CODE class=function>function_foo</CODE> from a Python program. To do this, the Python interpreter needs to: </P>
<DIV class=itemizedlist>
<UL class=itemizedlist style="LIST-STYLE-TYPE: disc">
<LI class=listitem>
<P>Find where the function is located. This probably means finding the binary generated by the C compiler which exports this function.</P>
<LI class=listitem>
<P>Load the code of the function in executable memory.</P>
<LI class=listitem>
<P>Convert the Python parameters to C-compatible parameters before calling the function.</P>
<LI class=listitem>
<P>Call the function with the right calling convention.</P>
<LI class=listitem>
<P>Convert the return values of the C function to Python-compatible variables to return them to the Python code.</P></LI></UL></DIV>
<P></P>
<P>The process described above is pretty complex and there are a lot of ways to make it entirely automatic and transparent to C and Python programmers: </P>
<DIV class=itemizedlist>
<UL class=itemizedlist style="LIST-STYLE-TYPE: disc">
<LI class=listitem>
<P>The first solution is to write by hand a lot of glue code, once for each function exported or imported, which does the Python-to-C parameter conversion and the C-to-Python return value conversion. This glue code is then linked with the interpreter which allows Python programs to call Python functions which delegate work to C functions.</P>
<LI class=listitem>
<P>Another, nicer solution is to automatically generate the glue code, once for each function exported or imported, with a special compiler which reads the original function signature.</P>
<LI class=listitem>
<P>The solution used by GLib is to use the GType library which holds at runtime a description of all the objects manipulated by the programmer. This so-called <SPAN class=emphasis><EM>dynamic type</EM></SPAN> <A class=footnote href="https://developer.gnome.org/gobject/stable/ch01s02.html#ftn.id-1.3.2.6.6.1.3.1.2" name=id-1.3.2.6.6.1.3.1.2><SUP class=footnote>[1]</SUP></A> library is then used by special generic glue code to automatically convert function parameters and function calling conventions between different runtime domains.</P></LI></UL></DIV>
<P>The greatest advantage of the solution implemented by GType is that the glue code sitting at the runtime domain boundaries is written once: the figure below states this more clearly. </P>
<DIV class=figure><A name=id-1.3.2.6.6.2></A>
<P class=title><B>Figure&nbsp;1.&nbsp;</B></P>
<DIV class=figure-contents>
<DIV class=mediaobject align=center><IMG src="https://developer.gnome.org/gobject/stable/glue.png" align=middle></DIV></DIV></DIV>
<P><BR class=figure-break>Currently, there exist at least Python and Perl generic glue code which makes it possible to use C objects written with GType directly in Python or Perl, with a minimum amount of work: there is no need to generate huge amounts of glue code either automatically or by hand. </P>
<P>Although that goal was arguably laudable, its pursuit has had a major influence on the whole GType/GObject library. C programmers are likely to be puzzled at the complexity of the features exposed in the following chapters if they forget that the GType/GObject library was not only designed to offer OO-like features to C programmers but also transparent cross-language interoperability. </P>
<DIV class=footnotes><BR>
<HR style="WIDTH: 100px; TEXT-ALIGN: left; MARGIN-LEFT: 0px">

<DIV id=ftn.id-1.3.2.6.6.1.3.1.2 class=footnote>
<P><A class=para href="https://developer.gnome.org/gobject/stable/ch01s02.html#id-1.3.2.6.6.1.3.1.2"><SUP class=para>[1] </SUP></A>There are numerous different implementations of dynamic type systems: all C++ compilers have one, Java and .NET have one too. A dynamic type system allows you to get information about every instantiated object at runtime. It can be implemented by a process-specific database: every new object created registers the characteristics of its associated type in the type system. It can also be implemented by introspection interfaces. The common point between all these different type systems and implementations is that they all allow you to query for object metadata at runtime. </P></DIV></DIV>