<DIV class=refnamediv>
<TABLE width="100%">
<TBODY>
<TR>
<TD vAlign=top>
<H2><SPAN class=refentrytitle>Type Information</SPAN></H2>
<P>Type Information &#8212; The GLib Runtime type identification and management system</P></TD>
<TD class=gallery_image vAlign=top align=right></TD></TR></TBODY></TABLE></DIV>
<DIV class=refsect1><A name=gobject-Type-Information.functions></A>
<H2>Functions</H2>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=functions_return width=150>
<COL class=functions_name></COLGROUP>
<TBODY>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_FUNDAMENTAL() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-FUNDAMENTAL:CAPS">G_TYPE_FUNDAMENTAL</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_MAKE_FUNDAMENTAL() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-MAKE-FUNDAMENTAL:CAPS">G_TYPE_MAKE_FUNDAMENTAL</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_IS_ABSTRACT() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-IS-ABSTRACT:CAPS">G_TYPE_IS_ABSTRACT</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_IS_DERIVED() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-IS-DERIVED:CAPS">G_TYPE_IS_DERIVED</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_IS_FUNDAMENTAL() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-IS-FUNDAMENTAL:CAPS">G_TYPE_IS_FUNDAMENTAL</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_IS_VALUE_TYPE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-IS-VALUE-TYPE:CAPS">G_TYPE_IS_VALUE_TYPE</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_HAS_VALUE_TABLE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-HAS-VALUE-TABLE:CAPS">G_TYPE_HAS_VALUE_TABLE</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_IS_CLASSED() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-IS-CLASSED:CAPS">G_TYPE_IS_CLASSED</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_IS_INSTANTIATABLE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-IS-INSTANTIATABLE:CAPS">G_TYPE_IS_INSTANTIATABLE</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_IS_DERIVABLE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-IS-DERIVABLE:CAPS">G_TYPE_IS_DERIVABLE</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_IS_DEEP_DERIVABLE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-IS-DEEP-DERIVABLE:CAPS">G_TYPE_IS_DEEP_DERIVABLE</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_IS_INTERFACE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-IS-INTERFACE:CAPS">G_TYPE_IS_INTERFACE</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_FROM_INSTANCE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-FROM-INSTANCE:CAPS">G_TYPE_FROM_INSTANCE</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_FROM_CLASS() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-FROM-CLASS:CAPS">G_TYPE_FROM_CLASS</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_FROM_INTERFACE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-FROM-INTERFACE:CAPS">G_TYPE_FROM_INTERFACE</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_INSTANCE_GET_CLASS() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-INSTANCE-GET-CLASS:CAPS">G_TYPE_INSTANCE_GET_CLASS</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_INSTANCE_GET_INTERFACE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-INSTANCE-GET-INTERFACE:CAPS">G_TYPE_INSTANCE_GET_INTERFACE</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_INSTANCE_GET_PRIVATE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-INSTANCE-GET-PRIVATE:CAPS">G_TYPE_INSTANCE_GET_PRIVATE</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_CLASS_GET_PRIVATE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-CLASS-GET-PRIVATE:CAPS">G_TYPE_CLASS_GET_PRIVATE</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_CHECK_INSTANCE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-CHECK-INSTANCE:CAPS">G_TYPE_CHECK_INSTANCE</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_CHECK_INSTANCE_CAST() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-CHECK-INSTANCE-CAST:CAPS">G_TYPE_CHECK_INSTANCE_CAST</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_CHECK_INSTANCE_TYPE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-CHECK-INSTANCE-TYPE:CAPS">G_TYPE_CHECK_INSTANCE_TYPE</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_CHECK_INSTANCE_FUNDAMENTAL_TYPE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-CHECK-INSTANCE-FUNDAMENTAL-TYPE:CAPS">G_TYPE_CHECK_INSTANCE_FUNDAMENTAL_TYPE</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_CHECK_CLASS_CAST() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-CHECK-CLASS-CAST:CAPS">G_TYPE_CHECK_CLASS_CAST</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_CHECK_CLASS_TYPE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-CHECK-CLASS-TYPE:CAPS">G_TYPE_CHECK_CLASS_TYPE</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_CHECK_VALUE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-CHECK-VALUE:CAPS">G_TYPE_CHECK_VALUE</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_CHECK_VALUE_TYPE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-CHECK-VALUE-TYPE:CAPS">G_TYPE_CHECK_VALUE_TYPE</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A title=g_type_init&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-init">g_type_init</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A title=g_type_init_with_debug_flags&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-init-with-debug-flags">g_type_init_with_debug_flags</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type>const <A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A title=g_type_name&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-name">g_type_name</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A href="https://developer.gnome.org/gobject/glib-Quarks.html#GQuark"><SPAN class=returnvalue>GQuark</SPAN></A> </TD>
<TD class=function_name><A title=g_type_qname&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-qname">g_type_qname</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=returnvalue>GType</SPAN></A> </TD>
<TD class=function_name><A title=g_type_from_name&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-from-name">g_type_from_name</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=returnvalue>GType</SPAN></A> </TD>
<TD class=function_name><A title=g_type_parent&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-parent">g_type_parent</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#guint"><SPAN class=returnvalue>guint</SPAN></A> </TD>
<TD class=function_name><A title=g_type_depth&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-depth">g_type_depth</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=returnvalue>GType</SPAN></A> </TD>
<TD class=function_name><A title=g_type_next_base&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-next-base">g_type_next_base</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><A title=g_type_is_a&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-is-a">g_type_is_a</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A> </TD>
<TD class=function_name><A title=g_type_class_ref&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-class-ref">g_type_class_ref</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A> </TD>
<TD class=function_name><A title=g_type_class_peek&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-class-peek">g_type_class_peek</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A> </TD>
<TD class=function_name><A title=g_type_class_peek_static&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-class-peek-static">g_type_class_peek_static</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A title=g_type_class_unref&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-class-unref">g_type_class_unref</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A> </TD>
<TD class=function_name><A title=g_type_class_peek_parent&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-class-peek-parent">g_type_class_peek_parent</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A title=g_type_class_add_private&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-class-add-private">g_type_class_add_private</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A title=g_type_add_class_private&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-add-class-private">g_type_add_class_private</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A> </TD>
<TD class=function_name><A title=g_type_interface_peek&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-interface-peek">g_type_interface_peek</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A> </TD>
<TD class=function_name><A title=g_type_interface_peek_parent&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-interface-peek-parent">g_type_interface_peek_parent</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A> </TD>
<TD class=function_name><A title=g_type_default_interface_ref&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-default-interface-ref">g_type_default_interface_ref</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A> </TD>
<TD class=function_name><A title=g_type_default_interface_peek&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-default-interface-peek">g_type_default_interface_peek</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A title=g_type_default_interface_unref&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-default-interface-unref">g_type_default_interface_unref</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=returnvalue>GType</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A title=g_type_children&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-children">g_type_children</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=returnvalue>GType</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A title=g_type_interfaces&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-interfaces">g_type_interfaces</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=returnvalue>GType</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A title=g_type_interface_prerequisites&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-interface-prerequisites">g_type_interface_prerequisites</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A title=g_type_set_qdata&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-set-qdata">g_type_set_qdata</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A> </TD>
<TD class=function_name><A title=g_type_get_qdata&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-get-qdata">g_type_get_qdata</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A title=g_type_query&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-query">g_type_query</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><SPAN class=c_punctuation>(</SPAN><A title=GBaseInitFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GBaseInitFunc">*GBaseInitFunc</A><SPAN class=c_punctuation>)</SPAN>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><SPAN class=c_punctuation>(</SPAN><A title=GBaseFinalizeFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GBaseFinalizeFunc">*GBaseFinalizeFunc</A><SPAN class=c_punctuation>)</SPAN>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><SPAN class=c_punctuation>(</SPAN><A title=GClassInitFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GClassInitFunc">*GClassInitFunc</A><SPAN class=c_punctuation>)</SPAN>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><SPAN class=c_punctuation>(</SPAN><A title=GClassFinalizeFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GClassFinalizeFunc">*GClassFinalizeFunc</A><SPAN class=c_punctuation>)</SPAN>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><SPAN class=c_punctuation>(</SPAN><A title=GInstanceInitFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GInstanceInitFunc">*GInstanceInitFunc</A><SPAN class=c_punctuation>)</SPAN>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><SPAN class=c_punctuation>(</SPAN><A title=GInterfaceInitFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GInterfaceInitFunc">*GInterfaceInitFunc</A><SPAN class=c_punctuation>)</SPAN>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><SPAN class=c_punctuation>(</SPAN><A title=GInterfaceFinalizeFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GInterfaceFinalizeFunc">*GInterfaceFinalizeFunc</A><SPAN class=c_punctuation>)</SPAN>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A> </TD>
<TD class=function_name><SPAN class=c_punctuation>(</SPAN><A title=GTypeClassCacheFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeClassCacheFunc">*GTypeClassCacheFunc</A><SPAN class=c_punctuation>)</SPAN>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=returnvalue>GType</SPAN></A> </TD>
<TD class=function_name><A title=g_type_register_static&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-register-static">g_type_register_static</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=returnvalue>GType</SPAN></A> </TD>
<TD class=function_name><A title=g_type_register_static_simple&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-register-static-simple">g_type_register_static_simple</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=returnvalue>GType</SPAN></A> </TD>
<TD class=function_name><A title=g_type_register_dynamic&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-register-dynamic">g_type_register_dynamic</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=returnvalue>GType</SPAN></A> </TD>
<TD class=function_name><A title=g_type_register_fundamental&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-register-fundamental">g_type_register_fundamental</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A title=g_type_add_interface_static&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-add-interface-static">g_type_add_interface_static</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A title=g_type_add_interface_dynamic&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-add-interface-dynamic">g_type_add_interface_dynamic</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A title=g_type_interface_add_prerequisite&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-interface-add-prerequisite">g_type_interface_add_prerequisite</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=GTypePlugin class=link href="https://developer.gnome.org/gobject/stable/GTypePlugin.html"><SPAN class=returnvalue>GTypePlugin</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A title=g_type_get_plugin&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-get-plugin">g_type_get_plugin</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=GTypePlugin class=link href="https://developer.gnome.org/gobject/stable/GTypePlugin.html"><SPAN class=returnvalue>GTypePlugin</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A title=g_type_interface_get_plugin&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-interface-get-plugin">g_type_interface_get_plugin</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=returnvalue>GType</SPAN></A> </TD>
<TD class=function_name><A title=g_type_fundamental_next&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-fundamental-next">g_type_fundamental_next</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=returnvalue>GType</SPAN></A> </TD>
<TD class=function_name><A title=g_type_fundamental&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-fundamental">g_type_fundamental</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title="struct GTypeInstance" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInstance"><SPAN class=returnvalue>GTypeInstance</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A title=g_type_create_instance&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-create-instance">g_type_create_instance</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A title=g_type_free_instance&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-free-instance">g_type_free_instance</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A title=g_type_add_class_cache_func&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-add-class-cache-func">g_type_add_class_cache_func</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A title=g_type_remove_class_cache_func&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-remove-class-cache-func">g_type_remove_class_cache_func</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A title=g_type_class_unref_uncached&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-class-unref-uncached">g_type_class_unref_uncached</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A title=g_type_add_interface_check&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-add-interface-check">g_type_add_interface_check</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A title=g_type_remove_interface_check&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-remove-interface-check">g_type_remove_interface_check</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><SPAN class=c_punctuation>(</SPAN><A title=GTypeInterfaceCheckFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInterfaceCheckFunc">*GTypeInterfaceCheckFunc</A><SPAN class=c_punctuation>)</SPAN>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A title="struct GTypeValueTable" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeValueTable"><SPAN class=returnvalue>GTypeValueTable</SPAN></A>&nbsp;* </TD>
<TD class=function_name><A title=g_type_value_table_peek&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-value-table-peek">g_type_value_table_peek</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>void</SPAN> </TD>
<TD class=function_name><A title=g_type_ensure&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-ensure">g_type_ensure</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#guint"><SPAN class=returnvalue>guint</SPAN></A> </TD>
<TD class=function_name><A title=g_type_get_type_registration_serial&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-get-type-registration-serial">g_type_get_type_registration_serial</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=function_type><SPAN class=returnvalue>int</SPAN> </TD>
<TD class=function_name><A title=g_type_get_instance_count&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-get-instance-count">g_type_get_instance_count</A>&nbsp;<SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_DECLARE_FINAL_TYPE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DECLARE-FINAL-TYPE:CAPS">G_DECLARE_FINAL_TYPE</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_DECLARE_DERIVABLE_TYPE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DECLARE-DERIVABLE-TYPE:CAPS">G_DECLARE_DERIVABLE_TYPE</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_DECLARE_INTERFACE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DECLARE-INTERFACE:CAPS">G_DECLARE_INTERFACE</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_DEFINE_TYPE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE:CAPS">G_DEFINE_TYPE</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_DEFINE_TYPE_WITH_PRIVATE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE-WITH-PRIVATE:CAPS">G_DEFINE_TYPE_WITH_PRIVATE</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_DEFINE_TYPE_WITH_CODE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE-WITH-CODE:CAPS">G_DEFINE_TYPE_WITH_CODE</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_DEFINE_ABSTRACT_TYPE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-ABSTRACT-TYPE:CAPS">G_DEFINE_ABSTRACT_TYPE</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_DEFINE_ABSTRACT_TYPE_WITH_PRIVATE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-ABSTRACT-TYPE-WITH-PRIVATE:CAPS">G_DEFINE_ABSTRACT_TYPE_WITH_PRIVATE</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_DEFINE_ABSTRACT_TYPE_WITH_CODE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-ABSTRACT-TYPE-WITH-CODE:CAPS">G_DEFINE_ABSTRACT_TYPE_WITH_CODE</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_ADD_PRIVATE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-ADD-PRIVATE:CAPS">G_ADD_PRIVATE</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_PRIVATE_OFFSET() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-PRIVATE-OFFSET:CAPS">G_PRIVATE_OFFSET</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_PRIVATE_FIELD() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-PRIVATE-FIELD:CAPS">G_PRIVATE_FIELD</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_PRIVATE_FIELD_P() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-PRIVATE-FIELD-P:CAPS">G_PRIVATE_FIELD_P</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_DEFINE_INTERFACE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-INTERFACE:CAPS">G_DEFINE_INTERFACE</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_DEFINE_INTERFACE_WITH_CODE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-INTERFACE-WITH-CODE:CAPS">G_DEFINE_INTERFACE_WITH_CODE</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_IMPLEMENT_INTERFACE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-IMPLEMENT-INTERFACE:CAPS">G_IMPLEMENT_INTERFACE</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_DEFINE_TYPE_EXTENDED() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE-EXTENDED:CAPS">G_DEFINE_TYPE_EXTENDED</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_DEFINE_BOXED_TYPE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-BOXED-TYPE:CAPS">G_DEFINE_BOXED_TYPE</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_DEFINE_BOXED_TYPE_WITH_CODE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-BOXED-TYPE-WITH-CODE:CAPS">G_DEFINE_BOXED_TYPE_WITH_CODE</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_DEFINE_POINTER_TYPE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-POINTER-TYPE:CAPS">G_DEFINE_POINTER_TYPE</A><SPAN class=c_punctuation>()</SPAN> </TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_DEFINE_POINTER_TYPE_WITH_CODE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-POINTER-TYPE-WITH-CODE:CAPS">G_DEFINE_POINTER_TYPE_WITH_CODE</A><SPAN class=c_punctuation>()</SPAN> </TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=gobject-Type-Information.other></A>
<H2>Types and Values</H2>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=name width=150>
<COL class=description></COLGROUP>
<TBODY>
<TR>
<TD class=typedef_keyword>typedef</TD>
<TD class=function_name><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType">GType</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_FUNDAMENTAL_MAX class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-FUNDAMENTAL-MAX:CAPS">G_TYPE_FUNDAMENTAL_MAX</A></TD></TR>
<TR>
<TD class=datatype_keyword>struct</TD>
<TD class=function_name><A title="struct GTypeInterface" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInterface">GTypeInterface</A></TD></TR>
<TR>
<TD class=datatype_keyword>struct</TD>
<TD class=function_name><A title="struct GTypeInstance" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInstance">GTypeInstance</A></TD></TR>
<TR>
<TD class=datatype_keyword>struct</TD>
<TD class=function_name><A title="struct GTypeClass" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeClass">GTypeClass</A></TD></TR>
<TR>
<TD class=datatype_keyword>struct</TD>
<TD class=function_name><A title="struct GTypeInfo" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInfo">GTypeInfo</A></TD></TR>
<TR>
<TD class=datatype_keyword>struct</TD>
<TD class=function_name><A title="struct GTypeFundamentalInfo" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeFundamentalInfo">GTypeFundamentalInfo</A></TD></TR>
<TR>
<TD class=datatype_keyword>struct</TD>
<TD class=function_name><A title="struct GInterfaceInfo" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GInterfaceInfo">GInterfaceInfo</A></TD></TR>
<TR>
<TD class=datatype_keyword>struct</TD>
<TD class=function_name><A title="struct GTypeValueTable" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeValueTable">GTypeValueTable</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_FLAG_RESERVED_ID_BIT class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-FLAG-RESERVED-ID-BIT:CAPS">G_TYPE_FLAG_RESERVED_ID_BIT</A></TD></TR>
<TR>
<TD class=datatype_keyword>enum</TD>
<TD class=function_name><A title="enum GTypeDebugFlags" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeDebugFlags">GTypeDebugFlags</A></TD></TR>
<TR>
<TD class=datatype_keyword>struct</TD>
<TD class=function_name><A title="struct GTypeQuery" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeQuery">GTypeQuery</A></TD></TR>
<TR>
<TD class=datatype_keyword>enum</TD>
<TD class=function_name><A title="enum GTypeFlags" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeFlags">GTypeFlags</A></TD></TR>
<TR>
<TD class=datatype_keyword>enum</TD>
<TD class=function_name><A title="enum GTypeFundamentalFlags" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeFundamentalFlags">GTypeFundamentalFlags</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_INVALID class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-INVALID:CAPS">G_TYPE_INVALID</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_NONE class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-NONE:CAPS">G_TYPE_NONE</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_INTERFACE class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-INTERFACE:CAPS">G_TYPE_INTERFACE</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_CHAR class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-CHAR:CAPS">G_TYPE_CHAR</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_UCHAR class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-UCHAR:CAPS">G_TYPE_UCHAR</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_BOOLEAN class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-BOOLEAN:CAPS">G_TYPE_BOOLEAN</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_INT class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-INT:CAPS">G_TYPE_INT</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_UINT class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-UINT:CAPS">G_TYPE_UINT</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_LONG class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-LONG:CAPS">G_TYPE_LONG</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_ULONG class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-ULONG:CAPS">G_TYPE_ULONG</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_INT64 class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-INT64:CAPS">G_TYPE_INT64</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_UINT64 class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-UINT64:CAPS">G_TYPE_UINT64</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_ENUM class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-ENUM:CAPS">G_TYPE_ENUM</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_FLAGS class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-FLAGS:CAPS">G_TYPE_FLAGS</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_FLOAT class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-FLOAT:CAPS">G_TYPE_FLOAT</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_DOUBLE class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-DOUBLE:CAPS">G_TYPE_DOUBLE</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_STRING class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-STRING:CAPS">G_TYPE_STRING</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_POINTER class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-POINTER:CAPS">G_TYPE_POINTER</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_BOXED class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-BOXED:CAPS">G_TYPE_BOXED</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_PARAM class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-PARAM:CAPS">G_TYPE_PARAM</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_OBJECT class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-OBJECT:CAPS">G_TYPE_OBJECT</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_GTYPE class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-GTYPE:CAPS">G_TYPE_GTYPE</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_VARIANT class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-VARIANT:CAPS">G_TYPE_VARIANT</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_CHECKSUM class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-CHECKSUM:CAPS">G_TYPE_CHECKSUM</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_RESERVED_GLIB_FIRST class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-RESERVED-GLIB-FIRST:CAPS">G_TYPE_RESERVED_GLIB_FIRST</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_RESERVED_GLIB_LAST class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-RESERVED-GLIB-LAST:CAPS">G_TYPE_RESERVED_GLIB_LAST</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_RESERVED_BSE_FIRST class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-RESERVED-BSE-FIRST:CAPS">G_TYPE_RESERVED_BSE_FIRST</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_RESERVED_BSE_LAST class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-RESERVED-BSE-LAST:CAPS">G_TYPE_RESERVED_BSE_LAST</A></TD></TR>
<TR>
<TD class=define_keyword>#define</TD>
<TD class=function_name><A title=G_TYPE_RESERVED_USER_FIRST class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-RESERVED-USER-FIRST:CAPS">G_TYPE_RESERVED_USER_FIRST</A></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect1><A name=gobject-Type-Information.includes></A>
<H2>Includes</H2><PRE class=synopsis>#include &lt;glib-object.h&gt;
</PRE></DIV>
<DIV class=refsect1><A name=gobject-Type-Information.description></A>
<H2>Description</H2>
<P>The GType API is the foundation of the GObject system. It provides the facilities for registering and managing all fundamental data types, user-defined object and interface types.</P>
<P>For type creation and registration purposes, all types fall into one of two categories: static or dynamic. Static types are never loaded or unloaded at run-time as dynamic types may be. Static types are created with <A title=g_type_register_static&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-register-static"><CODE class=function>g_type_register_static()</CODE></A> that gets type specific information passed in via a <A title="struct GTypeInfo" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInfo"><SPAN class=type>GTypeInfo</SPAN></A> structure.</P>
<P>Dynamic types are created with <A title=g_type_register_dynamic&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-register-dynamic"><CODE class=function>g_type_register_dynamic()</CODE></A> which takes a <A title=GTypePlugin class=link href="https://developer.gnome.org/gobject/stable/GTypePlugin.html"><SPAN class=type>GTypePlugin</SPAN></A> structure instead. The remaining type information (the <A title="struct GTypeInfo" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInfo"><SPAN class=type>GTypeInfo</SPAN></A> structure) is retrieved during runtime through <A title=GTypePlugin class=link href="https://developer.gnome.org/gobject/stable/GTypePlugin.html"><SPAN class=type>GTypePlugin</SPAN></A> and the g_type_plugin_*() API.</P>
<P>These registration functions are usually called only once from a function whose only purpose is to return the type identifier for a specific class. Once the type (or class or interface) is registered, it may be instantiated, inherited, or implemented depending on exactly what sort of type it is.</P>
<P>There is also a third registration function for registering fundamental types called <A title=g_type_register_fundamental&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-register-fundamental"><CODE class=function>g_type_register_fundamental()</CODE></A> which requires both a <A title="struct GTypeInfo" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInfo"><SPAN class=type>GTypeInfo</SPAN></A> structure and a <A title="struct GTypeFundamentalInfo" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeFundamentalInfo"><SPAN class=type>GTypeFundamentalInfo</SPAN></A> structure but it is seldom used since most fundamental types are predefined rather than user-defined.</P>
<P>Type instance and class structs are limited to a total of 64 KiB, including all parent types. Similarly, type instances' private data (as created by <A title=g_type_class_add_private&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-class-add-private"><CODE class=function>g_type_class_add_private()</CODE></A>) are limited to a total of 64 KiB. If a type instance needs a large static buffer, allocate it separately (typically by using <A href="https://developer.gnome.org/gobject/glib-Arrays.html#GArray"><SPAN class=type>GArray</SPAN></A> or <A href="https://developer.gnome.org/gobject/glib-Pointer-Arrays.html#GPtrArray"><SPAN class=type>GPtrArray</SPAN></A>) and put a pointer to the buffer in the structure.</P>
<P>As mentioned in the <A title=Conventions class=link href="https://developer.gnome.org/gobject/stable/gtype-conventions.html">GType conventions</A>, type names must be at least three characters long. There is no upper length limit. The first character must be a letter (a&#8211;z or A&#8211;Z) or an underscore (&#8216;_&#8217;). Subsequent characters can be letters, numbers or any of &#8216;-_+&#8217;.</P></DIV>
<DIV class=refsect1><A name=gobject-Type-Information.functions_details></A>
<H2>Functions</H2>
<DIV class=refsect2><A name=G-TYPE-FUNDAMENTAL:CAPS></A>
<H3>G_TYPE_FUNDAMENTAL()</H3><PRE class=programlisting>#define G_TYPE_FUNDAMENTAL(type)&nbsp;(g_type_fundamental (type))
</PRE>
<P>The fundamental type which is the ancestor of <EM class=parameter><CODE>type</CODE></EM> . Fundamental types are types that serve as ultimate bases for the derived types, thus they are the roots of distinct inheritance hierarchies.</P>
<DIV class=refsect3><A name=G-TYPE-FUNDAMENTAL.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>A <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> value.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-MAKE-FUNDAMENTAL:CAPS></A>
<H3>G_TYPE_MAKE_FUNDAMENTAL()</H3><PRE class=programlisting>#define&nbsp;G_TYPE_MAKE_FUNDAMENTAL(x)&nbsp;((GType) ((x) &lt;&lt; G_TYPE_FUNDAMENTAL_SHIFT))
</PRE>
<P>Get the type ID for the fundamental type number <EM class=parameter><CODE>x</CODE></EM> . Use <A title=g_type_fundamental_next&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-fundamental-next"><CODE class=function>g_type_fundamental_next()</CODE></A> instead of this macro to create new fundamental types.</P>
<DIV class=refsect3><A name=G-TYPE-MAKE-FUNDAMENTAL.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>x</P></TD>
<TD class=parameter_description>
<P>the fundamental type number.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=G-TYPE-MAKE-FUNDAMENTAL.returns></A>
<H4>Returns</H4>
<P>the GType</P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-IS-ABSTRACT:CAPS></A>
<H3>G_TYPE_IS_ABSTRACT()</H3><PRE class=programlisting>#define G_TYPE_IS_ABSTRACT(type)                (g_type_test_flags ((type), G_TYPE_FLAG_ABSTRACT))
</PRE>
<P>Checks if <EM class=parameter><CODE>type</CODE></EM> is an abstract type. An abstract type cannot be instantiated and is normally used as an abstract base class for derived classes.</P>
<DIV class=refsect3><A name=G-TYPE-IS-ABSTRACT.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>A <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> value</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=G-TYPE-IS-ABSTRACT.returns></A>
<H4>Returns</H4>
<P><A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> on success</P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-IS-DERIVED:CAPS></A>
<H3>G_TYPE_IS_DERIVED()</H3><PRE class=programlisting>#define G_TYPE_IS_DERIVED(type)                 ((type) &gt; G_TYPE_FUNDAMENTAL_MAX)
</PRE>
<P>Checks if <EM class=parameter><CODE>type</CODE></EM> is derived (or in object-oriented terminology: inherited) from another type (this holds true for all non-fundamental types).</P>
<DIV class=refsect3><A name=G-TYPE-IS-DERIVED.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>A <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> value</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=G-TYPE-IS-DERIVED.returns></A>
<H4>Returns</H4>
<P><A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> on success</P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-IS-FUNDAMENTAL:CAPS></A>
<H3>G_TYPE_IS_FUNDAMENTAL()</H3><PRE class=programlisting>#define G_TYPE_IS_FUNDAMENTAL(type)             ((type) &lt;= G_TYPE_FUNDAMENTAL_MAX)
</PRE>
<P>Checks if <EM class=parameter><CODE>type</CODE></EM> is a fundamental type.</P>
<DIV class=refsect3><A name=G-TYPE-IS-FUNDAMENTAL.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>A <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> value</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=G-TYPE-IS-FUNDAMENTAL.returns></A>
<H4>Returns</H4>
<P><A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> on success</P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-IS-VALUE-TYPE:CAPS></A>
<H3>G_TYPE_IS_VALUE_TYPE()</H3><PRE class=programlisting>#define G_TYPE_IS_VALUE_TYPE(type)              (g_type_check_is_value_type (type))
</PRE>
<P>Checks if <EM class=parameter><CODE>type</CODE></EM> is a value type and can be used with <A title=g_value_init&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Generic-values.html#g-value-init"><CODE class=function>g_value_init()</CODE></A>.</P>
<DIV class=refsect3><A name=G-TYPE-IS-VALUE-TYPE.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>A <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> value</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=G-TYPE-IS-VALUE-TYPE.returns></A>
<H4>Returns</H4>
<P><A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> on success</P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-HAS-VALUE-TABLE:CAPS></A>
<H3>G_TYPE_HAS_VALUE_TABLE()</H3><PRE class=programlisting>#define G_TYPE_HAS_VALUE_TABLE(type)            (g_type_value_table_peek (type) != NULL)
</PRE>
<P>Checks if <EM class=parameter><CODE>type</CODE></EM> has a <A title="struct GTypeValueTable" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeValueTable"><SPAN class=type>GTypeValueTable</SPAN></A>.</P>
<DIV class=refsect3><A name=G-TYPE-HAS-VALUE-TABLE.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>A <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> value</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=G-TYPE-HAS-VALUE-TABLE.returns></A>
<H4>Returns</H4>
<P><A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> on success</P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-IS-CLASSED:CAPS></A>
<H3>G_TYPE_IS_CLASSED()</H3><PRE class=programlisting>#define G_TYPE_IS_CLASSED(type)                 (g_type_test_flags ((type), G_TYPE_FLAG_CLASSED))
</PRE>
<P>Checks if <EM class=parameter><CODE>type</CODE></EM> is a classed type.</P>
<DIV class=refsect3><A name=G-TYPE-IS-CLASSED.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>A <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> value</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=G-TYPE-IS-CLASSED.returns></A>
<H4>Returns</H4>
<P><A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> on success</P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-IS-INSTANTIATABLE:CAPS></A>
<H3>G_TYPE_IS_INSTANTIATABLE()</H3><PRE class=programlisting>#define G_TYPE_IS_INSTANTIATABLE(type)          (g_type_test_flags ((type), G_TYPE_FLAG_INSTANTIATABLE))
</PRE>
<P>Checks if <EM class=parameter><CODE>type</CODE></EM> can be instantiated. Instantiation is the process of creating an instance (object) of this type.</P>
<DIV class=refsect3><A name=G-TYPE-IS-INSTANTIATABLE.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>A <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> value</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=G-TYPE-IS-INSTANTIATABLE.returns></A>
<H4>Returns</H4>
<P><A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> on success</P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-IS-DERIVABLE:CAPS></A>
<H3>G_TYPE_IS_DERIVABLE()</H3><PRE class=programlisting>#define G_TYPE_IS_DERIVABLE(type)               (g_type_test_flags ((type), G_TYPE_FLAG_DERIVABLE))
</PRE>
<P>Checks if <EM class=parameter><CODE>type</CODE></EM> is a derivable type. A derivable type can be used as the base class of a flat (single-level) class hierarchy.</P>
<DIV class=refsect3><A name=G-TYPE-IS-DERIVABLE.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>A <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> value</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=G-TYPE-IS-DERIVABLE.returns></A>
<H4>Returns</H4>
<P><A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> on success</P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-IS-DEEP-DERIVABLE:CAPS></A>
<H3>G_TYPE_IS_DEEP_DERIVABLE()</H3><PRE class=programlisting>#define G_TYPE_IS_DEEP_DERIVABLE(type)          (g_type_test_flags ((type), G_TYPE_FLAG_DEEP_DERIVABLE))
</PRE>
<P>Checks if <EM class=parameter><CODE>type</CODE></EM> is a deep derivable type. A deep derivable type can be used as the base class of a deep (multi-level) class hierarchy.</P>
<DIV class=refsect3><A name=G-TYPE-IS-DEEP-DERIVABLE.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>A <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> value</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=G-TYPE-IS-DEEP-DERIVABLE.returns></A>
<H4>Returns</H4>
<P><A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> on success</P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-IS-INTERFACE:CAPS></A>
<H3>G_TYPE_IS_INTERFACE()</H3><PRE class=programlisting>#define G_TYPE_IS_INTERFACE(type)               (G_TYPE_FUNDAMENTAL (type) == G_TYPE_INTERFACE)
</PRE>
<P>Checks if <EM class=parameter><CODE>type</CODE></EM> is an interface type. An interface type provides a pure API, the implementation of which is provided by another type (which is then said to conform to the interface). GLib interfaces are somewhat analogous to Java interfaces and C++ classes containing only pure virtual functions, with the difference that GType interfaces are not derivable (but see <A title=g_type_interface_add_prerequisite&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-interface-add-prerequisite"><CODE class=function>g_type_interface_add_prerequisite()</CODE></A> for an alternative).</P>
<DIV class=refsect3><A name=G-TYPE-IS-INTERFACE.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>A <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> value</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=G-TYPE-IS-INTERFACE.returns></A>
<H4>Returns</H4>
<P><A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> on success</P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-FROM-INSTANCE:CAPS></A>
<H3>G_TYPE_FROM_INSTANCE()</H3><PRE class=programlisting>#define G_TYPE_FROM_INSTANCE(instance)                          (G_TYPE_FROM_CLASS (((GTypeInstance*) (instance))-&gt;g_class))
</PRE>
<P>Get the type identifier from a given <EM class=parameter><CODE>instance</CODE></EM> structure. </P>
<P>This macro should only be used in type implementations.</P>
<DIV class=refsect3><A name=G-TYPE-FROM-INSTANCE.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>instance</P></TD>
<TD class=parameter_description>
<P>Location of a valid <A title="struct GTypeInstance" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInstance"><SPAN class=type>GTypeInstance</SPAN></A> structure</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=G-TYPE-FROM-INSTANCE.returns></A>
<H4>Returns</H4>
<P>the <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A></P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-FROM-CLASS:CAPS></A>
<H3>G_TYPE_FROM_CLASS()</H3><PRE class=programlisting>#define G_TYPE_FROM_CLASS(g_class)                              (((GTypeClass*) (g_class))-&gt;g_type)
</PRE>
<P>Get the type identifier from a given <EM class=parameter><CODE>class</CODE></EM> structure.</P>
<P>This macro should only be used in type implementations.</P>
<DIV class=refsect3><A name=G-TYPE-FROM-CLASS.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>g_class</P></TD>
<TD class=parameter_description>
<P>Location of a valid <A title="struct GTypeClass" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeClass"><SPAN class=type>GTypeClass</SPAN></A> structure</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=G-TYPE-FROM-CLASS.returns></A>
<H4>Returns</H4>
<P>the <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A></P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-FROM-INTERFACE:CAPS></A>
<H3>G_TYPE_FROM_INTERFACE()</H3><PRE class=programlisting>#define G_TYPE_FROM_INTERFACE(g_iface)                          (((GTypeInterface*) (g_iface))-&gt;g_type)
</PRE>
<P>Get the type identifier from a given <EM class=parameter><CODE>interface</CODE></EM> structure.</P>
<P>This macro should only be used in type implementations.</P>
<DIV class=refsect3><A name=G-TYPE-FROM-INTERFACE.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>g_iface</P></TD>
<TD class=parameter_description>
<P>Location of a valid <A title="struct GTypeInterface" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInterface"><SPAN class=type>GTypeInterface</SPAN></A> structure</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=G-TYPE-FROM-INTERFACE.returns></A>
<H4>Returns</H4>
<P>the <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A></P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-INSTANCE-GET-CLASS:CAPS></A>
<H3>G_TYPE_INSTANCE_GET_CLASS()</H3><PRE class=programlisting>#define G_TYPE_INSTANCE_GET_CLASS(instance, g_type, c_type)     (_G_TYPE_IGC ((instance), (g_type), c_type))
</PRE>
<P>Get the class structure of a given <EM class=parameter><CODE>instance</CODE></EM> , casted to a specified ancestor type <EM class=parameter><CODE>g_type</CODE></EM> of the instance.</P>
<P>Note that while calling a <A title=GInstanceInitFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GInstanceInitFunc"><CODE class=function>GInstanceInitFunc()</CODE></A>, the class pointer gets modified, so it might not always return the expected pointer.</P>
<P>This macro should only be used in type implementations.</P>
<DIV class=refsect3><A name=G-TYPE-INSTANCE-GET-CLASS.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>instance</P></TD>
<TD class=parameter_description>
<P>Location of the <A title="struct GTypeInstance" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInstance"><SPAN class=type>GTypeInstance</SPAN></A> structure</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>g_type</P></TD>
<TD class=parameter_description>
<P>The <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> of the class to be returned</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>c_type</P></TD>
<TD class=parameter_description>
<P>The C type of the class structure</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=G-TYPE-INSTANCE-GET-CLASS.returns></A>
<H4>Returns</H4>
<P>a pointer to the class structure</P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-INSTANCE-GET-INTERFACE:CAPS></A>
<H3>G_TYPE_INSTANCE_GET_INTERFACE()</H3><PRE class=programlisting>#define G_TYPE_INSTANCE_GET_INTERFACE(instance, g_type, c_type) (_G_TYPE_IGI ((instance), (g_type), c_type))
</PRE>
<P>Get the interface structure for interface <EM class=parameter><CODE>g_type</CODE></EM> of a given <EM class=parameter><CODE>instance</CODE></EM> .</P>
<P>This macro should only be used in type implementations.</P>
<DIV class=refsect3><A name=G-TYPE-INSTANCE-GET-INTERFACE.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>instance</P></TD>
<TD class=parameter_description>
<P>Location of the <A title="struct GTypeInstance" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInstance"><SPAN class=type>GTypeInstance</SPAN></A> structure</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>g_type</P></TD>
<TD class=parameter_description>
<P>The <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> of the interface to be returned</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>c_type</P></TD>
<TD class=parameter_description>
<P>The C type of the interface structure</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=G-TYPE-INSTANCE-GET-INTERFACE.returns></A>
<H4>Returns</H4>
<P>a pointer to the interface structure</P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-INSTANCE-GET-PRIVATE:CAPS></A>
<H3>G_TYPE_INSTANCE_GET_PRIVATE()</H3><PRE class=programlisting>#define G_TYPE_INSTANCE_GET_PRIVATE(instance, g_type, c_type)   ((c_type*) g_type_instance_get_private ((GTypeInstance*) (instance), (g_type)))
</PRE>
<P>Gets the private structure for a particular type. The private structure must have been registered in the class_init function with <A title=g_type_class_add_private&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-class-add-private"><CODE class=function>g_type_class_add_private()</CODE></A>.</P>
<P>This macro should only be used in type implementations.</P>
<DIV class=refsect3><A name=G-TYPE-INSTANCE-GET-PRIVATE.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>instance</P></TD>
<TD class=parameter_description>
<P>the instance of a type deriving from <EM class=parameter><CODE>private_type</CODE></EM> </P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>g_type</P></TD>
<TD class=parameter_description>
<P>the type identifying which private data to retrieve</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>c_type</P></TD>
<TD class=parameter_description>
<P>The C type for the private structure</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=G-TYPE-INSTANCE-GET-PRIVATE.returns></A>
<H4>Returns</H4>
<P>a pointer to the private data structure. </P>
<P><SPAN class=annotation>[<ACRONYM title="NULL must not be passed as the value in, out, in-out; or as a return value."><SPAN class=acronym>not nullable</SPAN></ACRONYM>]</SPAN></P></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-4.html#api-index-2.4">2.4</A></P></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-CLASS-GET-PRIVATE:CAPS></A>
<H3>G_TYPE_CLASS_GET_PRIVATE()</H3><PRE class=programlisting>#define G_TYPE_CLASS_GET_PRIVATE(klass, g_type, c_type)   ((c_type*) g_type_class_get_private ((GTypeClass*) (klass), (g_type)))
</PRE>
<P>Gets the private class structure for a particular type. The private structure must have been registered in the <CODE class=function>get_type()</CODE> function with <A title=g_type_add_class_private&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-add-class-private"><CODE class=function>g_type_add_class_private()</CODE></A>.</P>
<P>This macro should only be used in type implementations.</P>
<DIV class=refsect3><A name=G-TYPE-CLASS-GET-PRIVATE.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>klass</P></TD>
<TD class=parameter_description>
<P>the class of a type deriving from <EM class=parameter><CODE>private_type</CODE></EM> </P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>g_type</P></TD>
<TD class=parameter_description>
<P>the type identifying which private data to retrieve</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>c_type</P></TD>
<TD class=parameter_description>
<P>The C type for the private structure</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=G-TYPE-CLASS-GET-PRIVATE.returns></A>
<H4>Returns</H4>
<P>a pointer to the private data structure. </P>
<P><SPAN class=annotation>[<ACRONYM title="NULL must not be passed as the value in, out, in-out; or as a return value."><SPAN class=acronym>not nullable</SPAN></ACRONYM>]</SPAN></P></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-24.html#api-index-2.24">2.24</A></P></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-CHECK-INSTANCE:CAPS></A>
<H3>G_TYPE_CHECK_INSTANCE()</H3><PRE class=programlisting>#define G_TYPE_CHECK_INSTANCE(instance)				(_G_TYPE_CHI ((GTypeInstance*) (instance)))
</PRE>
<P>Checks if <EM class=parameter><CODE>instance</CODE></EM> is a valid <A title="struct GTypeInstance" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInstance"><SPAN class=type>GTypeInstance</SPAN></A> structure, otherwise issues a warning and returns <A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A>. <A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> is not a valid <A title="struct GTypeInstance" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInstance"><SPAN class=type>GTypeInstance</SPAN></A>.</P>
<P>This macro should only be used in type implementations.</P>
<DIV class=refsect3><A name=G-TYPE-CHECK-INSTANCE.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>instance</P></TD>
<TD class=parameter_description>
<P>Location of a <A title="struct GTypeInstance" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInstance"><SPAN class=type>GTypeInstance</SPAN></A> structure</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=G-TYPE-CHECK-INSTANCE.returns></A>
<H4>Returns</H4>
<P><A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> on success</P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-CHECK-INSTANCE-CAST:CAPS></A>
<H3>G_TYPE_CHECK_INSTANCE_CAST()</H3><PRE class=programlisting>#define G_TYPE_CHECK_INSTANCE_CAST(instance, g_type, c_type)    (_G_TYPE_CIC ((instance), (g_type), c_type))
</PRE>
<P>Checks that <EM class=parameter><CODE>instance</CODE></EM> is an instance of the type identified by <EM class=parameter><CODE>g_type</CODE></EM> and issues a warning if this is not the case. Returns <EM class=parameter><CODE>instance</CODE></EM> casted to a pointer to <EM class=parameter><CODE>c_type</CODE></EM> .</P>
<P>No warning will be issued if <EM class=parameter><CODE>instance</CODE></EM> is <A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>, and <A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> will be returned.</P>
<P>This macro should only be used in type implementations.</P>
<DIV class=refsect3><A name=G-TYPE-CHECK-INSTANCE-CAST.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>instance</P></TD>
<TD class=parameter_description>
<P>Location of a <A title="struct GTypeInstance" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInstance"><SPAN class=type>GTypeInstance</SPAN></A> structure. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="NULL may be passed as the value in, out, in-out; or as a return value."><SPAN class=acronym>nullable</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>g_type</P></TD>
<TD class=parameter_description>
<P>The type to be returned</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>c_type</P></TD>
<TD class=parameter_description>
<P>The corresponding C type of <EM class=parameter><CODE>g_type</CODE></EM> </P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-CHECK-INSTANCE-TYPE:CAPS></A>
<H3>G_TYPE_CHECK_INSTANCE_TYPE()</H3><PRE class=programlisting>#define G_TYPE_CHECK_INSTANCE_TYPE(instance, g_type)            (_G_TYPE_CIT ((instance), (g_type)))
</PRE>
<P>Checks if <EM class=parameter><CODE>instance</CODE></EM> is an instance of the type identified by <EM class=parameter><CODE>g_type</CODE></EM> . If <EM class=parameter><CODE>instance</CODE></EM> is <A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>, <A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> will be returned.</P>
<P>This macro should only be used in type implementations.</P>
<DIV class=refsect3><A name=G-TYPE-CHECK-INSTANCE-TYPE.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>instance</P></TD>
<TD class=parameter_description>
<P>Location of a <A title="struct GTypeInstance" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInstance"><SPAN class=type>GTypeInstance</SPAN></A> structure. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="NULL may be passed as the value in, out, in-out; or as a return value."><SPAN class=acronym>nullable</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>g_type</P></TD>
<TD class=parameter_description>
<P>The type to be checked</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=G-TYPE-CHECK-INSTANCE-TYPE.returns></A>
<H4>Returns</H4>
<P><A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> on success</P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-CHECK-INSTANCE-FUNDAMENTAL-TYPE:CAPS></A>
<H3>G_TYPE_CHECK_INSTANCE_FUNDAMENTAL_TYPE()</H3><PRE class=programlisting>#define G_TYPE_CHECK_INSTANCE_FUNDAMENTAL_TYPE(instance, g_type)            (_G_TYPE_CIFT ((instance), (g_type)))
</PRE>
<P>Checks if <EM class=parameter><CODE>instance</CODE></EM> is an instance of the fundamental type identified by <EM class=parameter><CODE>g_type</CODE></EM> . If <EM class=parameter><CODE>instance</CODE></EM> is <A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>, <A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> will be returned.</P>
<P>This macro should only be used in type implementations.</P>
<DIV class=refsect3><A name=G-TYPE-CHECK-INSTANCE-FUNDAMENTAL-TYPE.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>instance</P></TD>
<TD class=parameter_description>
<P>Location of a <A title="struct GTypeInstance" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInstance"><SPAN class=type>GTypeInstance</SPAN></A> structure. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="NULL may be passed as the value in, out, in-out; or as a return value."><SPAN class=acronym>nullable</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>g_type</P></TD>
<TD class=parameter_description>
<P>The fundamental type to be checked</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=G-TYPE-CHECK-INSTANCE-FUNDAMENTAL-TYPE.returns></A>
<H4>Returns</H4>
<P><A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> on success</P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-CHECK-CLASS-CAST:CAPS></A>
<H3>G_TYPE_CHECK_CLASS_CAST()</H3><PRE class=programlisting>#define G_TYPE_CHECK_CLASS_CAST(g_class, g_type, c_type)        (_G_TYPE_CCC ((g_class), (g_type), c_type))
</PRE>
<P>Checks that <EM class=parameter><CODE>g_class</CODE></EM> is a class structure of the type identified by <EM class=parameter><CODE>g_type</CODE></EM> and issues a warning if this is not the case. Returns <EM class=parameter><CODE>g_class</CODE></EM> casted to a pointer to <EM class=parameter><CODE>c_type</CODE></EM> . <A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> is not a valid class structure.</P>
<P>This macro should only be used in type implementations.</P>
<DIV class=refsect3><A name=G-TYPE-CHECK-CLASS-CAST.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>g_class</P></TD>
<TD class=parameter_description>
<P>Location of a <A title="struct GTypeClass" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeClass"><SPAN class=type>GTypeClass</SPAN></A> structure</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>g_type</P></TD>
<TD class=parameter_description>
<P>The type to be returned</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>c_type</P></TD>
<TD class=parameter_description>
<P>The corresponding C type of class structure of <EM class=parameter><CODE>g_type</CODE></EM> </P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-CHECK-CLASS-TYPE:CAPS></A>
<H3>G_TYPE_CHECK_CLASS_TYPE()</H3><PRE class=programlisting>#define G_TYPE_CHECK_CLASS_TYPE(g_class, g_type)                (_G_TYPE_CCT ((g_class), (g_type)))
</PRE>
<P>Checks if <EM class=parameter><CODE>g_class</CODE></EM> is a class structure of the type identified by <EM class=parameter><CODE>g_type</CODE></EM> . If <EM class=parameter><CODE>g_class</CODE></EM> is <A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>, <A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> will be returned.</P>
<P>This macro should only be used in type implementations.</P>
<DIV class=refsect3><A name=G-TYPE-CHECK-CLASS-TYPE.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>g_class</P></TD>
<TD class=parameter_description>
<P>Location of a <A title="struct GTypeClass" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeClass"><SPAN class=type>GTypeClass</SPAN></A> structure. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="NULL may be passed as the value in, out, in-out; or as a return value."><SPAN class=acronym>nullable</SPAN></ACRONYM>]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>g_type</P></TD>
<TD class=parameter_description>
<P>The type to be checked</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=G-TYPE-CHECK-CLASS-TYPE.returns></A>
<H4>Returns</H4>
<P><A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> on success</P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-CHECK-VALUE:CAPS></A>
<H3>G_TYPE_CHECK_VALUE()</H3><PRE class=programlisting>#define G_TYPE_CHECK_VALUE(value)				(_G_TYPE_CHV ((value)))
</PRE>
<P>Checks if <EM class=parameter><CODE>value</CODE></EM> has been initialized to hold values of a value type.</P>
<P>This macro should only be used in type implementations.</P>
<DIV class=refsect3><A name=G-TYPE-CHECK-VALUE.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>value</P></TD>
<TD class=parameter_description>
<P>a <A title=GValue class=link href="https://developer.gnome.org/gobject/stable/gobject-Generic-values.html#GValue"><SPAN class=type>GValue</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=G-TYPE-CHECK-VALUE.returns></A>
<H4>Returns</H4>
<P><A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> on success</P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-CHECK-VALUE-TYPE:CAPS></A>
<H3>G_TYPE_CHECK_VALUE_TYPE()</H3><PRE class=programlisting>#define G_TYPE_CHECK_VALUE_TYPE(value, g_type)			(_G_TYPE_CVH ((value), (g_type)))
</PRE>
<P>Checks if <EM class=parameter><CODE>value</CODE></EM> has been initialized to hold values of type <EM class=parameter><CODE>g_type</CODE></EM> . </P>
<P>This macro should only be used in type implementations.</P>
<DIV class=refsect3><A name=G-TYPE-CHECK-VALUE-TYPE.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>value</P></TD>
<TD class=parameter_description>
<P>a <A title=GValue class=link href="https://developer.gnome.org/gobject/stable/gobject-Generic-values.html#GValue"><SPAN class=type>GValue</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>g_type</P></TD>
<TD class=parameter_description>
<P>The type to be checked</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=G-TYPE-CHECK-VALUE-TYPE.returns></A>
<H4>Returns</H4>
<P><A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> on success</P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-init></A>
<H3>g_type_init&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_type_init (<EM class=parameter><CODE><SPAN class=type>void</SPAN></CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_type_init</CODE> has been deprecated since version 2.36 and should not be used in newly-written code.</P>
<P>the type system is now initialised automatically</P></DIV>
<P>This function used to initialise the type system. Since GLib 2.36, the type system is initialised automatically and this function does nothing.</P></DIV>
<HR>

<DIV class=refsect2><A name=g-type-init-with-debug-flags></A>
<H3>g_type_init_with_debug_flags&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_type_init_with_debug_flags (<EM class=parameter><CODE><A title="enum GTypeDebugFlags" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeDebugFlags"><SPAN class=type>GTypeDebugFlags</SPAN></A> debug_flags</CODE></EM>);</PRE>
<DIV class=warning>
<P><CODE class=literal>g_type_init_with_debug_flags</CODE> has been deprecated since version 2.36 and should not be used in newly-written code.</P>
<P>the type system is now initialised automatically</P></DIV>
<P>This function used to initialise the type system with debugging flags. Since GLib 2.36, the type system is initialised automatically and this function does nothing.</P>
<P>If you need to enable debugging features, use the GOBJECT_DEBUG environment variable.</P>
<DIV class=refsect3><A name=g-type-init-with-debug-flags.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>debug_flags</P></TD>
<TD class=parameter_description>
<P>bitwise combination of <A title="enum GTypeDebugFlags" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeDebugFlags"><SPAN class=type>GTypeDebugFlags</SPAN></A> values for debugging purposes</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-name></A>
<H3>g_type_name&nbsp;()</H3><PRE class=programlisting>const <A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gchar"><SPAN class=returnvalue>gchar</SPAN></A>&nbsp;*
g_type_name (<EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> type</CODE></EM>);</PRE>
<P>Get the unique name that is assigned to a type ID. Note that this function (like all other GType API) cannot cope with invalid type IDs. <A title=G_TYPE_INVALID class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-INVALID:CAPS"><CODE class=literal>G_TYPE_INVALID</CODE></A> may be passed to this function, as may be any other validly registered type ID, but randomized type IDs should not be passed in and will most likely lead to a crash.</P>
<DIV class=refsect3><A name=g-type-name.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>type to return name for</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=g-type-name.returns></A>
<H4>Returns</H4>
<P>static type name or <A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A></P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-qname></A>
<H3>g_type_qname&nbsp;()</H3><PRE class=programlisting><A href="https://developer.gnome.org/gobject/glib-Quarks.html#GQuark"><SPAN class=returnvalue>GQuark</SPAN></A>
g_type_qname (<EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> type</CODE></EM>);</PRE>
<P>Get the corresponding quark of the type IDs name.</P>
<DIV class=refsect3><A name=g-type-qname.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>type to return quark of type name for</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=g-type-qname.returns></A>
<H4>Returns</H4>
<P>the type names quark or 0</P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-from-name></A>
<H3>g_type_from_name&nbsp;()</H3><PRE class=programlisting><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=returnvalue>GType</SPAN></A>
g_type_from_name (<EM class=parameter><CODE>const <A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *name</CODE></EM>);</PRE>
<P>Lookup the type ID from a given type name, returning 0 if no type has been registered under this name (this is the preferred method to find out by name whether a specific type has been registered yet).</P>
<DIV class=refsect3><A name=g-type-from-name.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>name</P></TD>
<TD class=parameter_description>
<P>type name to lookup</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=g-type-from-name.returns></A>
<H4>Returns</H4>
<P>corresponding type ID or 0</P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-parent></A>
<H3>g_type_parent&nbsp;()</H3><PRE class=programlisting><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=returnvalue>GType</SPAN></A>
g_type_parent (<EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> type</CODE></EM>);</PRE>
<P>Return the direct parent type of the passed in type. If the passed in type has no parent, i.e. is a fundamental type, 0 is returned.</P>
<DIV class=refsect3><A name=g-type-parent.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>the derived type</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=g-type-parent.returns></A>
<H4>Returns</H4>
<P>the parent type</P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-depth></A>
<H3>g_type_depth&nbsp;()</H3><PRE class=programlisting><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#guint"><SPAN class=returnvalue>guint</SPAN></A>
g_type_depth (<EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> type</CODE></EM>);</PRE>
<P>Returns the length of the ancestry of the passed in type. This includes the type itself, so that e.g. a fundamental type has depth 1.</P>
<DIV class=refsect3><A name=g-type-depth.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>a <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=g-type-depth.returns></A>
<H4>Returns</H4>
<P>the depth of <EM class=parameter><CODE>type</CODE></EM> </P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-next-base></A>
<H3>g_type_next_base&nbsp;()</H3><PRE class=programlisting><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=returnvalue>GType</SPAN></A>
g_type_next_base (<EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> leaf_type</CODE></EM>,
                  <EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> root_type</CODE></EM>);</PRE>
<P>Given a <EM class=parameter><CODE>leaf_type</CODE></EM> and a <EM class=parameter><CODE>root_type</CODE></EM> which is contained in its anchestry, return the type that <EM class=parameter><CODE>root_type</CODE></EM> is the immediate parent of. In other words, this function determines the type that is derived directly from <EM class=parameter><CODE>root_type</CODE></EM> which is also a base class of <EM class=parameter><CODE>leaf_type</CODE></EM> . Given a root type and a leaf type, this function can be used to determine the types and order in which the leaf type is descended from the root type.</P>
<DIV class=refsect3><A name=g-type-next-base.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>leaf_type</P></TD>
<TD class=parameter_description>
<P>descendant of <EM class=parameter><CODE>root_type</CODE></EM> and the type to be returned</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>root_type</P></TD>
<TD class=parameter_description>
<P>immediate parent of the returned type</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=g-type-next-base.returns></A>
<H4>Returns</H4>
<P>immediate child of <EM class=parameter><CODE>root_type</CODE></EM> and anchestor of <EM class=parameter><CODE>leaf_type</CODE></EM> </P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-is-a></A>
<H3>g_type_is_a&nbsp;()</H3><PRE class=programlisting><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
g_type_is_a (<EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> type</CODE></EM>,
             <EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> is_a_type</CODE></EM>);</PRE>
<P>If <EM class=parameter><CODE>is_a_type</CODE></EM> is a derivable type, check whether <EM class=parameter><CODE>type</CODE></EM> is a descendant of <EM class=parameter><CODE>is_a_type</CODE></EM> . If <EM class=parameter><CODE>is_a_type</CODE></EM> is an interface, check whether <EM class=parameter><CODE>type</CODE></EM> conforms to it.</P>
<DIV class=refsect3><A name=g-type-is-a.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>type to check anchestry for</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>is_a_type</P></TD>
<TD class=parameter_description>
<P>possible anchestor of <EM class=parameter><CODE>type</CODE></EM> or interface that <EM class=parameter><CODE>type</CODE></EM> could conform to</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=g-type-is-a.returns></A>
<H4>Returns</H4>
<P><A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> if <EM class=parameter><CODE>type</CODE></EM> is a <EM class=parameter><CODE>is_a_type</CODE></EM> </P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-class-ref></A>
<H3>g_type_class_ref&nbsp;()</H3><PRE class=programlisting><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A>
g_type_class_ref (<EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> type</CODE></EM>);</PRE>
<P>Increments the reference count of the class structure belonging to <EM class=parameter><CODE>type</CODE></EM> . This function will demand-create the class if it doesn't exist already.</P>
<DIV class=refsect3><A name=g-type-class-ref.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>type ID of a classed type</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=g-type-class-ref.returns></A>
<H4>Returns</H4>
<P>the <A title="struct GTypeClass" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeClass"><SPAN class=type>GTypeClass</SPAN></A> structure for the given type ID. </P>
<P><SPAN class=annotation>[<ACRONYM title="Override the parsed C type with given type."><SPAN class=acronym>type</SPAN></ACRONYM> GObject.TypeClass][<ACRONYM title="Don't free data after the code is done."><SPAN class=acronym>transfer none</SPAN></ACRONYM>]</SPAN></P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-class-peek></A>
<H3>g_type_class_peek&nbsp;()</H3><PRE class=programlisting><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A>
g_type_class_peek (<EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> type</CODE></EM>);</PRE>
<P>This function is essentially the same as <A title=g_type_class_ref&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-class-ref"><CODE class=function>g_type_class_ref()</CODE></A>, except that the classes reference count isn't incremented. As a consequence, this function may return <A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> if the class of the type passed in does not currently exist (hasn't been referenced before).</P>
<DIV class=refsect3><A name=g-type-class-peek.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>type ID of a classed type</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=g-type-class-peek.returns></A>
<H4>Returns</H4>
<P>the <A title="struct GTypeClass" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeClass"><SPAN class=type>GTypeClass</SPAN></A> structure for the given type ID or <A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> if the class does not currently exist. </P>
<P><SPAN class=annotation>[<ACRONYM title="Override the parsed C type with given type."><SPAN class=acronym>type</SPAN></ACRONYM> GObject.TypeClass][<ACRONYM title="Don't free data after the code is done."><SPAN class=acronym>transfer none</SPAN></ACRONYM>]</SPAN></P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-class-peek-static></A>
<H3>g_type_class_peek_static&nbsp;()</H3><PRE class=programlisting><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A>
g_type_class_peek_static (<EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> type</CODE></EM>);</PRE>
<P>A more efficient version of <A title=g_type_class_peek&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-class-peek"><CODE class=function>g_type_class_peek()</CODE></A> which works only for static types.</P>
<DIV class=refsect3><A name=g-type-class-peek-static.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>type ID of a classed type</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=g-type-class-peek-static.returns></A>
<H4>Returns</H4>
<P>the <A title="struct GTypeClass" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeClass"><SPAN class=type>GTypeClass</SPAN></A> structure for the given type ID or <A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> if the class does not currently exist or is dynamically loaded. </P>
<P><SPAN class=annotation>[<ACRONYM title="Override the parsed C type with given type."><SPAN class=acronym>type</SPAN></ACRONYM> GObject.TypeClass][<ACRONYM title="Don't free data after the code is done."><SPAN class=acronym>transfer none</SPAN></ACRONYM>]</SPAN></P></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-4.html#api-index-2.4">2.4</A></P></DIV>
<HR>

<DIV class=refsect2><A name=g-type-class-unref></A>
<H3>g_type_class_unref&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_type_class_unref (<EM class=parameter><CODE><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> g_class</CODE></EM>);</PRE>
<P>Decrements the reference count of the class structure being passed in. Once the last reference count of a class has been released, classes may be finalized by the type system, so further dereferencing of a class pointer after <A title=g_type_class_unref&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-class-unref"><CODE class=function>g_type_class_unref()</CODE></A> are invalid.</P>
<DIV class=refsect3><A name=g-type-class-unref.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>g_class</P></TD>
<TD class=parameter_description>
<P>a <A title="struct GTypeClass" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeClass"><SPAN class=type>GTypeClass</SPAN></A> structure to unref. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Override the parsed C type with given type."><SPAN class=acronym>type</SPAN></ACRONYM> GObject.TypeClass]</SPAN></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-class-peek-parent></A>
<H3>g_type_class_peek_parent&nbsp;()</H3><PRE class=programlisting><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A>
g_type_class_peek_parent (<EM class=parameter><CODE><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> g_class</CODE></EM>);</PRE>
<P>This is a convenience function often needed in class initializers. It returns the class structure of the immediate parent type of the class passed in. Since derived classes hold a reference count on their parent classes as long as they are instantiated, the returned class will always exist.</P>
<P>This function is essentially equivalent to: g_type_class_peek (g_type_parent (G_TYPE_FROM_CLASS (g_class)))</P>
<DIV class=refsect3><A name=g-type-class-peek-parent.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>g_class</P></TD>
<TD class=parameter_description>
<P>the <A title="struct GTypeClass" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeClass"><SPAN class=type>GTypeClass</SPAN></A> structure to retrieve the parent class for. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Override the parsed C type with given type."><SPAN class=acronym>type</SPAN></ACRONYM> GObject.TypeClass]</SPAN></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=g-type-class-peek-parent.returns></A>
<H4>Returns</H4>
<P>the parent class of <EM class=parameter><CODE>g_class</CODE></EM> . </P>
<P><SPAN class=annotation>[<ACRONYM title="Override the parsed C type with given type."><SPAN class=acronym>type</SPAN></ACRONYM> GObject.TypeClass][<ACRONYM title="Don't free data after the code is done."><SPAN class=acronym>transfer none</SPAN></ACRONYM>]</SPAN></P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-class-add-private></A>
<H3>g_type_class_add_private&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_type_class_add_private (<EM class=parameter><CODE><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> g_class</CODE></EM>,
                          <EM class=parameter><CODE><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> private_size</CODE></EM>);</PRE>
<P>Registers a private structure for an instantiatable type.</P>
<P>When an object is allocated, the private structures for the type and all of its parent types are allocated sequentially in the same memory block as the public structures, and are zero-filled.</P>
<P>Note that the accumulated size of the private structures of a type and all its parent types cannot exceed 64 KiB.</P>
<P>This function should be called in the type's <CODE class=function>class_init()</CODE> function. The private structure can be retrieved using the <A title=G_TYPE_INSTANCE_GET_PRIVATE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-INSTANCE-GET-PRIVATE:CAPS"><CODE class=function>G_TYPE_INSTANCE_GET_PRIVATE()</CODE></A> macro.</P>
<P>The following example shows attaching a private structure MyObjectPrivate to an object MyObject defined in the standard GObject fashion in the type's <CODE class=function>class_init()</CODE> function.</P>
<P>Note the use of a structure member "priv" to avoid the overhead of repeatedly calling <CODE class=function>MY_OBJECT_GET_PRIVATE()</CODE>.</P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc kwc">typedef</SPAN> <SPAN class="gtkdoc kwb">struct</SPAN> _MyObject        MyObject<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc kwc">typedef</SPAN> <SPAN class="gtkdoc kwb">struct</SPAN> _MyObjectPrivate MyObjectPrivate<SPAN class="gtkdoc opt">;</SPAN>

<SPAN class="gtkdoc kwb">struct</SPAN> _MyObject <SPAN class="gtkdoc opt">{</SPAN>
 GObject parent<SPAN class="gtkdoc opt">;</SPAN>

 MyObjectPrivate <SPAN class="gtkdoc opt">*</SPAN>priv<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc opt">};</SPAN>

<SPAN class="gtkdoc kwb">struct</SPAN> _MyObjectPrivate <SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class="gtkdoc kwb">int</SPAN> some_field<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc opt">};</SPAN>

<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>my_object_class_init</SPAN> <SPAN class="gtkdoc opt">(</SPAN>MyObjectClass <SPAN class="gtkdoc opt">*</SPAN>klass<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-class-add-private">g_type_class_add_private</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>klass<SPAN class="gtkdoc opt">,</SPAN> <SPAN class=keyword>sizeof</SPAN> <SPAN class="gtkdoc opt">(</SPAN>MyObjectPrivate<SPAN class="gtkdoc opt">));</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>my_object_init</SPAN> <SPAN class="gtkdoc opt">(</SPAN>MyObject <SPAN class="gtkdoc opt">*</SPAN>my_object<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  my_object<SPAN class="gtkdoc opt">-&gt;</SPAN>priv <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-INSTANCE-GET-PRIVATE:CAPS">G_TYPE_INSTANCE_GET_PRIVATE</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>my_object<SPAN class="gtkdoc opt">,</SPAN>
                                                 MY_TYPE_OBJECT<SPAN class="gtkdoc opt">,</SPAN>
                                                 MyObjectPrivate<SPAN class="gtkdoc opt">);</SPAN>
  <SPAN class="gtkdoc slc">// my_object-&gt;priv-&gt;some_field will be automatically initialised to 0</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwb">static int</SPAN>
<SPAN class=function>my_object_get_some_field</SPAN> <SPAN class="gtkdoc opt">(</SPAN>MyObject <SPAN class="gtkdoc opt">*</SPAN>my_object<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  MyObjectPrivate <SPAN class="gtkdoc opt">*</SPAN>priv<SPAN class="gtkdoc opt">;</SPAN>

  <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Warnings-and-Assertions.html#g-return-val-if-fail">g_return_val_if_fail</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=function>MY_IS_OBJECT</SPAN> <SPAN class="gtkdoc opt">(</SPAN>my_object<SPAN class="gtkdoc opt">),</SPAN> <SPAN class=number>0</SPAN><SPAN class="gtkdoc opt">);</SPAN>

  priv <SPAN class="gtkdoc opt">=</SPAN> my_object<SPAN class="gtkdoc opt">-&gt;</SPAN>priv<SPAN class="gtkdoc opt">;</SPAN>

  <SPAN class=keyword>return</SPAN> priv<SPAN class="gtkdoc opt">-&gt;</SPAN>some_field<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<DIV class=refsect3><A name=g-type-class-add-private.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>g_class</P></TD>
<TD class=parameter_description>
<P>class structure for an instantiatable type. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Override the parsed C type with given type."><SPAN class=acronym>type</SPAN></ACRONYM> GObject.TypeClass]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>private_size</P></TD>
<TD class=parameter_description>
<P>size of private structure</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-4.html#api-index-2.4">2.4</A></P></DIV>
<HR>

<DIV class=refsect2><A name=g-type-add-class-private></A>
<H3>g_type_add_class_private&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_type_add_class_private (<EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> class_type</CODE></EM>,
                          <EM class=parameter><CODE><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gsize"><SPAN class=type>gsize</SPAN></A> private_size</CODE></EM>);</PRE>
<P>Registers a private class structure for a classed type; when the class is allocated, the private structures for the class and all of its parent types are allocated sequentially in the same memory block as the public structures, and are zero-filled.</P>
<P>This function should be called in the type's <CODE class=function>get_type()</CODE> function after the type is registered. The private structure can be retrieved using the <A title=G_TYPE_CLASS_GET_PRIVATE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-CLASS-GET-PRIVATE:CAPS"><CODE class=function>G_TYPE_CLASS_GET_PRIVATE()</CODE></A> macro.</P>
<DIV class=refsect3><A name=g-type-add-class-private.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>class_type</P></TD>
<TD class=parameter_description>
<P>GType of an classed type</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>private_size</P></TD>
<TD class=parameter_description>
<P>size of private structure</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-24.html#api-index-2.24">2.24</A></P></DIV>
<HR>

<DIV class=refsect2><A name=g-type-interface-peek></A>
<H3>g_type_interface_peek&nbsp;()</H3><PRE class=programlisting><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A>
g_type_interface_peek (<EM class=parameter><CODE><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> instance_class</CODE></EM>,
                       <EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> iface_type</CODE></EM>);</PRE>
<P>Returns the <A title="struct GTypeInterface" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInterface"><SPAN class=type>GTypeInterface</SPAN></A> structure of an interface to which the passed in class conforms.</P>
<DIV class=refsect3><A name=g-type-interface-peek.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>instance_class</P></TD>
<TD class=parameter_description>
<P>a <A title="struct GTypeClass" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeClass"><SPAN class=type>GTypeClass</SPAN></A> structure. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Override the parsed C type with given type."><SPAN class=acronym>type</SPAN></ACRONYM> GObject.TypeClass]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>iface_type</P></TD>
<TD class=parameter_description>
<P>an interface ID which this class conforms to</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=g-type-interface-peek.returns></A>
<H4>Returns</H4>
<P>the <A title="struct GTypeInterface" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInterface"><SPAN class=type>GTypeInterface</SPAN></A> structure of <EM class=parameter><CODE>iface_type</CODE></EM> if implemented by <EM class=parameter><CODE>instance_class</CODE></EM> , <A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> otherwise. </P>
<P><SPAN class=annotation>[<ACRONYM title="Override the parsed C type with given type."><SPAN class=acronym>type</SPAN></ACRONYM> GObject.TypeInterface][<ACRONYM title="Don't free data after the code is done."><SPAN class=acronym>transfer none</SPAN></ACRONYM>]</SPAN></P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-interface-peek-parent></A>
<H3>g_type_interface_peek_parent&nbsp;()</H3><PRE class=programlisting><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A>
g_type_interface_peek_parent (<EM class=parameter><CODE><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> g_iface</CODE></EM>);</PRE>
<P>Returns the corresponding <A title="struct GTypeInterface" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInterface"><SPAN class=type>GTypeInterface</SPAN></A> structure of the parent type of the instance type to which <EM class=parameter><CODE>g_iface</CODE></EM> belongs. This is useful when deriving the implementation of an interface from the parent type and then possibly overriding some methods.</P>
<DIV class=refsect3><A name=g-type-interface-peek-parent.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>g_iface</P></TD>
<TD class=parameter_description>
<P>a <A title="struct GTypeInterface" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInterface"><SPAN class=type>GTypeInterface</SPAN></A> structure. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Override the parsed C type with given type."><SPAN class=acronym>type</SPAN></ACRONYM> GObject.TypeInterface]</SPAN></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=g-type-interface-peek-parent.returns></A>
<H4>Returns</H4>
<P>the corresponding <A title="struct GTypeInterface" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInterface"><SPAN class=type>GTypeInterface</SPAN></A> structure of the parent type of the instance type to which <EM class=parameter><CODE>g_iface</CODE></EM> belongs, or <A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> if the parent type doesn't conform to the interface. </P>
<P><SPAN class=annotation>[<ACRONYM title="Don't free data after the code is done."><SPAN class=acronym>transfer none</SPAN></ACRONYM>][<ACRONYM title="Override the parsed C type with given type."><SPAN class=acronym>type</SPAN></ACRONYM> GObject.TypeInterface]</SPAN></P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-default-interface-ref></A>
<H3>g_type_default_interface_ref&nbsp;()</H3><PRE class=programlisting><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A>
g_type_default_interface_ref (<EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> g_type</CODE></EM>);</PRE>
<P>Increments the reference count for the interface type <EM class=parameter><CODE>g_type</CODE></EM> , and returns the default interface vtable for the type.</P>
<P>If the type is not currently in use, then the default vtable for the type will be created and initalized by calling the base interface init and default vtable init functions for the type (the <EM class=parameter><CODE>base_init</CODE></EM> and <EM class=parameter><CODE>class_init</CODE></EM> members of <A title="struct GTypeInfo" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInfo"><SPAN class=type>GTypeInfo</SPAN></A>). Calling <A title=g_type_default_interface_ref&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-default-interface-ref"><CODE class=function>g_type_default_interface_ref()</CODE></A> is useful when you want to make sure that signals and properties for an interface have been installed.</P>
<DIV class=refsect3><A name=g-type-default-interface-ref.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>g_type</P></TD>
<TD class=parameter_description>
<P>an interface type</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=g-type-default-interface-ref.returns></A>
<H4>Returns</H4>
<P>the default vtable for the interface; call <A title=g_type_default_interface_unref&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-default-interface-unref"><CODE class=function>g_type_default_interface_unref()</CODE></A> when you are done using the interface. </P>
<P><SPAN class=annotation>[<ACRONYM title="Override the parsed C type with given type."><SPAN class=acronym>type</SPAN></ACRONYM> GObject.TypeInterface][<ACRONYM title="Don't free data after the code is done."><SPAN class=acronym>transfer none</SPAN></ACRONYM>]</SPAN></P></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-4.html#api-index-2.4">2.4</A></P></DIV>
<HR>

<DIV class=refsect2><A name=g-type-default-interface-peek></A>
<H3>g_type_default_interface_peek&nbsp;()</H3><PRE class=programlisting><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A>
g_type_default_interface_peek (<EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> g_type</CODE></EM>);</PRE>
<P>If the interface type <EM class=parameter><CODE>g_type</CODE></EM> is currently in use, returns its default interface vtable.</P>
<DIV class=refsect3><A name=g-type-default-interface-peek.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>g_type</P></TD>
<TD class=parameter_description>
<P>an interface type</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=g-type-default-interface-peek.returns></A>
<H4>Returns</H4>
<P>the default vtable for the interface, or <A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> if the type is not currently in use. </P>
<P><SPAN class=annotation>[<ACRONYM title="Override the parsed C type with given type."><SPAN class=acronym>type</SPAN></ACRONYM> GObject.TypeInterface][<ACRONYM title="Don't free data after the code is done."><SPAN class=acronym>transfer none</SPAN></ACRONYM>]</SPAN></P></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-4.html#api-index-2.4">2.4</A></P></DIV>
<HR>

<DIV class=refsect2><A name=g-type-default-interface-unref></A>
<H3>g_type_default_interface_unref&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_type_default_interface_unref (<EM class=parameter><CODE><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> g_iface</CODE></EM>);</PRE>
<P>Decrements the reference count for the type corresponding to the interface default vtable <EM class=parameter><CODE>g_iface</CODE></EM> . If the type is dynamic, then when no one is using the interface and all references have been released, the finalize function for the interface's default vtable (the <EM class=parameter><CODE>class_finalize</CODE></EM> member of <A title="struct GTypeInfo" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInfo"><SPAN class=type>GTypeInfo</SPAN></A>) will be called.</P>
<DIV class=refsect3><A name=g-type-default-interface-unref.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>g_iface</P></TD>
<TD class=parameter_description>
<P>the default vtable structure for a interface, as returned by <A title=g_type_default_interface_ref&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-default-interface-ref"><CODE class=function>g_type_default_interface_ref()</CODE></A>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Override the parsed C type with given type."><SPAN class=acronym>type</SPAN></ACRONYM> GObject.TypeInterface]</SPAN></TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-4.html#api-index-2.4">2.4</A></P></DIV>
<HR>

<DIV class=refsect2><A name=g-type-children></A>
<H3>g_type_children&nbsp;()</H3><PRE class=programlisting><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=returnvalue>GType</SPAN></A>&nbsp;*
g_type_children (<EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> type</CODE></EM>,
                 <EM class=parameter><CODE><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#guint"><SPAN class=type>guint</SPAN></A> *n_children</CODE></EM>);</PRE>
<P>Return a newly allocated and 0-terminated array of type IDs, listing the child types of <EM class=parameter><CODE>type</CODE></EM> .</P>
<DIV class=refsect3><A name=g-type-children.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>the parent type</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>n_children</P></TD>
<TD class=parameter_description>
<P>location to store the length of the returned array, or <A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter for returning results. Default is transfer full."><SPAN class=acronym>out</SPAN></ACRONYM>][<ACRONYM title="NULL may be passed instead of a pointer to a location."><SPAN class=acronym>optional</SPAN></ACRONYM>]</SPAN></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=g-type-children.returns></A>
<H4>Returns</H4>
<P>Newly allocated and 0-terminated array of child types, free with <A href="https://developer.gnome.org/gobject/glib-Memory-Allocation.html#g-free"><CODE class=function>g_free()</CODE></A>. </P>
<P><SPAN class=annotation>[<ACRONYM title="Parameter points to an array of items."><SPAN class=acronym>array</SPAN></ACRONYM> length=n_children][<ACRONYM title="Free data after the code is done."><SPAN class=acronym>transfer full</SPAN></ACRONYM>]</SPAN></P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-interfaces></A>
<H3>g_type_interfaces&nbsp;()</H3><PRE class=programlisting><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=returnvalue>GType</SPAN></A>&nbsp;*
g_type_interfaces (<EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> type</CODE></EM>,
                   <EM class=parameter><CODE><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#guint"><SPAN class=type>guint</SPAN></A> *n_interfaces</CODE></EM>);</PRE>
<P>Return a newly allocated and 0-terminated array of type IDs, listing the interface types that <EM class=parameter><CODE>type</CODE></EM> conforms to.</P>
<DIV class=refsect3><A name=g-type-interfaces.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>the type to list interface types for</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>n_interfaces</P></TD>
<TD class=parameter_description>
<P>location to store the length of the returned array, or <A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter for returning results. Default is transfer full."><SPAN class=acronym>out</SPAN></ACRONYM>][<ACRONYM title="NULL may be passed instead of a pointer to a location."><SPAN class=acronym>optional</SPAN></ACRONYM>]</SPAN></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=g-type-interfaces.returns></A>
<H4>Returns</H4>
<P>Newly allocated and 0-terminated array of interface types, free with <A href="https://developer.gnome.org/gobject/glib-Memory-Allocation.html#g-free"><CODE class=function>g_free()</CODE></A>. </P>
<P><SPAN class=annotation>[<ACRONYM title="Parameter points to an array of items."><SPAN class=acronym>array</SPAN></ACRONYM> length=n_interfaces][<ACRONYM title="Free data after the code is done."><SPAN class=acronym>transfer full</SPAN></ACRONYM>]</SPAN></P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-interface-prerequisites></A>
<H3>g_type_interface_prerequisites&nbsp;()</H3><PRE class=programlisting><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=returnvalue>GType</SPAN></A>&nbsp;*
g_type_interface_prerequisites (<EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> interface_type</CODE></EM>,
                                <EM class=parameter><CODE><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#guint"><SPAN class=type>guint</SPAN></A> *n_prerequisites</CODE></EM>);</PRE>
<P>Returns the prerequisites of an interfaces type.</P>
<DIV class=refsect3><A name=g-type-interface-prerequisites.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>interface_type</P></TD>
<TD class=parameter_description>
<P>an interface type</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>n_prerequisites</P></TD>
<TD class=parameter_description>
<P>location to return the number of prerequisites, or <A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Parameter for returning results. Default is transfer full."><SPAN class=acronym>out</SPAN></ACRONYM>][<ACRONYM title="NULL may be passed instead of a pointer to a location."><SPAN class=acronym>optional</SPAN></ACRONYM>]</SPAN></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=g-type-interface-prerequisites.returns></A>
<H4>Returns</H4>
<P>a newly-allocated zero-terminated array of <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> containing the prerequisites of <EM class=parameter><CODE>interface_type</CODE></EM> . </P>
<P><SPAN class=annotation>[<ACRONYM title="Parameter points to an array of items."><SPAN class=acronym>array</SPAN></ACRONYM> length=n_prerequisites][<ACRONYM title="Free data after the code is done."><SPAN class=acronym>transfer full</SPAN></ACRONYM>]</SPAN></P></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-2.html#api-index-2.2">2.2</A></P></DIV>
<HR>

<DIV class=refsect2><A name=g-type-set-qdata></A>
<H3>g_type_set_qdata&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_type_set_qdata (<EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> type</CODE></EM>,
                  <EM class=parameter><CODE><A href="https://developer.gnome.org/gobject/glib-Quarks.html#GQuark"><SPAN class=type>GQuark</SPAN></A> quark</CODE></EM>,
                  <EM class=parameter><CODE><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> data</CODE></EM>);</PRE>
<P>Attaches arbitrary data to a type.</P>
<DIV class=refsect3><A name=g-type-set-qdata.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>a <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>quark</P></TD>
<TD class=parameter_description>
<P>a <A href="https://developer.gnome.org/gobject/glib-Quarks.html#GQuark"><SPAN class=type>GQuark</SPAN></A> id to identify the data</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>data</P></TD>
<TD class=parameter_description>
<P>the data</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-get-qdata></A>
<H3>g_type_get_qdata&nbsp;()</H3><PRE class=programlisting><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=returnvalue>gpointer</SPAN></A>
g_type_get_qdata (<EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> type</CODE></EM>,
                  <EM class=parameter><CODE><A href="https://developer.gnome.org/gobject/glib-Quarks.html#GQuark"><SPAN class=type>GQuark</SPAN></A> quark</CODE></EM>);</PRE>
<P>Obtains data which has previously been attached to <EM class=parameter><CODE>type</CODE></EM> with <A title=g_type_set_qdata&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-set-qdata"><CODE class=function>g_type_set_qdata()</CODE></A>.</P>
<P>Note that this does not take subtyping into account; data attached to one type with <A title=g_type_set_qdata&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-set-qdata"><CODE class=function>g_type_set_qdata()</CODE></A> cannot be retrieved from a subtype using <A title=g_type_get_qdata&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-get-qdata"><CODE class=function>g_type_get_qdata()</CODE></A>.</P>
<DIV class=refsect3><A name=g-type-get-qdata.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>a <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>quark</P></TD>
<TD class=parameter_description>
<P>a <A href="https://developer.gnome.org/gobject/glib-Quarks.html#GQuark"><SPAN class=type>GQuark</SPAN></A> id to identify the data</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=g-type-get-qdata.returns></A>
<H4>Returns</H4>
<P>the data, or <A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> if no data was found. </P>
<P><SPAN class=annotation>[<ACRONYM title="Don't free data after the code is done."><SPAN class=acronym>transfer none</SPAN></ACRONYM>]</SPAN></P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-query></A>
<H3>g_type_query&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_type_query (<EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> type</CODE></EM>,
              <EM class=parameter><CODE><A title="struct GTypeQuery" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeQuery"><SPAN class=type>GTypeQuery</SPAN></A> *query</CODE></EM>);</PRE>
<P>Queries the type system for information about a specific type. This function will fill in a user-provided structure to hold type-specific information. If an invalid <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> is passed in, the <EM class=parameter><CODE>type</CODE></EM> member of the <A title="struct GTypeQuery" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeQuery"><SPAN class=type>GTypeQuery</SPAN></A> is 0. All members filled into the <A title="struct GTypeQuery" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeQuery"><SPAN class=type>GTypeQuery</SPAN></A> structure should be considered constant and have to be left untouched.</P>
<DIV class=refsect3><A name=g-type-query.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> of a static, classed type</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>query</P></TD>
<TD class=parameter_description>
<P>a user provided structure that is filled in with constant values upon success. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Out parameter, where caller must allocate storage."><SPAN class=acronym>out caller-allocates</SPAN></ACRONYM>]</SPAN></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>

<DIV class=refsect2><A name=GBaseInitFunc></A>
<H3>GBaseInitFunc&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
<SPAN class=c_punctuation>(</SPAN>*GBaseInitFunc<SPAN class=c_punctuation>)</SPAN> (<EM class=parameter><CODE><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> g_class</CODE></EM>);</PRE>
<P>A callback function used by the type system to do base initialization of the class structures of derived types. It is called as part of the initialization process of all derived classes and should reallocate or reset all dynamic class members copied over from the parent class. For example, class members (such as strings) that are not sufficiently handled by a plain memory copy of the parent class into the derived class have to be altered. See <A title=GClassInitFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GClassInitFunc"><CODE class=function>GClassInitFunc()</CODE></A> for a discussion of the class initialization process.</P>
<DIV class=refsect3><A name=GBaseInitFunc.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>g_class</P></TD>
<TD class=parameter_description>
<P>The <A title="struct GTypeClass" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeClass"><SPAN class=type>GTypeClass</SPAN></A> structure to initialize. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Override the parsed C type with given type."><SPAN class=acronym>type</SPAN></ACRONYM> GObject.TypeClass]</SPAN></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>

<DIV class=refsect2><A name=GBaseFinalizeFunc></A>
<H3>GBaseFinalizeFunc&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
<SPAN class=c_punctuation>(</SPAN>*GBaseFinalizeFunc<SPAN class=c_punctuation>)</SPAN> (<EM class=parameter><CODE><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> g_class</CODE></EM>);</PRE>
<P>A callback function used by the type system to finalize those portions of a derived types class structure that were setup from the corresponding <A title=GBaseInitFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GBaseInitFunc"><CODE class=function>GBaseInitFunc()</CODE></A> function. Class finalization basically works the inverse way in which class initialization is performed. See <A title=GClassInitFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GClassInitFunc"><CODE class=function>GClassInitFunc()</CODE></A> for a discussion of the class initialization process.</P>
<DIV class=refsect3><A name=GBaseFinalizeFunc.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>g_class</P></TD>
<TD class=parameter_description>
<P>The <A title="struct GTypeClass" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeClass"><SPAN class=type>GTypeClass</SPAN></A> structure to finalize. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Override the parsed C type with given type."><SPAN class=acronym>type</SPAN></ACRONYM> GObject.TypeClass]</SPAN></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>

<DIV class=refsect2><A name=GClassInitFunc></A>
<H3>GClassInitFunc&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
<SPAN class=c_punctuation>(</SPAN>*GClassInitFunc<SPAN class=c_punctuation>)</SPAN> (<EM class=parameter><CODE><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> g_class</CODE></EM>,
                   <EM class=parameter><CODE><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> class_data</CODE></EM>);</PRE>
<P>A callback function used by the type system to initialize the class of a specific type. This function should initialize all static class members.</P>
<P>The initialization process of a class involves:</P>
<DIV class=itemizedlist>
<UL class=itemizedlist style="LIST-STYLE-TYPE: disc">
<LI class=listitem>
<P>Copying common members from the parent class over to the derived class structure.</P></LI>
<LI class=listitem>
<P>Zero initialization of the remaining members not copied over from the parent class.</P></LI>
<LI class=listitem>
<P>Invocation of the <A title=GBaseInitFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GBaseInitFunc"><CODE class=function>GBaseInitFunc()</CODE></A> initializers of all parent types and the class' type.</P></LI>
<LI class=listitem>
<P>Invocation of the class' <A title=GClassInitFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GClassInitFunc"><CODE class=function>GClassInitFunc()</CODE></A> initializer.</P></LI></UL></DIV>
<P>Since derived classes are partially initialized through a memory copy of the parent class, the general rule is that <A title=GBaseInitFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GBaseInitFunc"><CODE class=function>GBaseInitFunc()</CODE></A> and <A title=GBaseFinalizeFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GBaseFinalizeFunc"><CODE class=function>GBaseFinalizeFunc()</CODE></A> should take care of necessary reinitialization and release of those class members that were introduced by the type that specified these <A title=GBaseInitFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GBaseInitFunc"><CODE class=function>GBaseInitFunc()</CODE></A>/<A title=GBaseFinalizeFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GBaseFinalizeFunc"><CODE class=function>GBaseFinalizeFunc()</CODE></A>. <A title=GClassInitFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GClassInitFunc"><CODE class=function>GClassInitFunc()</CODE></A> should only care about initializing static class members, while dynamic class members (such as allocated strings or reference counted resources) are better handled by a <A title=GBaseInitFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GBaseInitFunc"><CODE class=function>GBaseInitFunc()</CODE></A> for this type, so proper initialization of the dynamic class members is performed for class initialization of derived types as well.</P>
<P>An example may help to correspond the intend of the different class initializers:</P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc kwc">typedef</SPAN> <SPAN class="gtkdoc kwb">struct</SPAN> <SPAN class="gtkdoc opt">{</SPAN>
  GObjectClass parent_class<SPAN class="gtkdoc opt">;</SPAN>
  gint         static_integer<SPAN class="gtkdoc opt">;</SPAN>
  gchar       <SPAN class="gtkdoc opt">*</SPAN>dynamic_string<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc opt">}</SPAN> TypeAClass<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>type_a_base_class_init</SPAN> <SPAN class="gtkdoc opt">(</SPAN>TypeAClass <SPAN class="gtkdoc opt">*</SPAN><SPAN class="gtkdoc kwc">class</SPAN><SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class="gtkdoc kwc">class</SPAN><SPAN class="gtkdoc opt">-&gt;</SPAN>dynamic_string <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-String-Utility-Functions.html#g-strdup">g_strdup</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"some string"</SPAN><SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>
<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>type_a_base_class_finalize</SPAN> <SPAN class="gtkdoc opt">(</SPAN>TypeAClass <SPAN class="gtkdoc opt">*</SPAN><SPAN class="gtkdoc kwc">class</SPAN><SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Memory-Allocation.html#g-free">g_free</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class="gtkdoc kwc">class</SPAN><SPAN class="gtkdoc opt">-&gt;</SPAN>dynamic_string<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>
<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>type_a_class_init</SPAN> <SPAN class="gtkdoc opt">(</SPAN>TypeAClass <SPAN class="gtkdoc opt">*</SPAN><SPAN class="gtkdoc kwc">class</SPAN><SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class="gtkdoc kwc">class</SPAN><SPAN class="gtkdoc opt">-&gt;</SPAN>static_integer <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=number>42</SPAN><SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwc">typedef</SPAN> <SPAN class="gtkdoc kwb">struct</SPAN> <SPAN class="gtkdoc opt">{</SPAN>
  TypeAClass   parent_class<SPAN class="gtkdoc opt">;</SPAN>
  gfloat       static_float<SPAN class="gtkdoc opt">;</SPAN>
  GString     <SPAN class="gtkdoc opt">*</SPAN>dynamic_gstring<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc opt">}</SPAN> TypeBClass<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>type_b_base_class_init</SPAN> <SPAN class="gtkdoc opt">(</SPAN>TypeBClass <SPAN class="gtkdoc opt">*</SPAN><SPAN class="gtkdoc kwc">class</SPAN><SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class="gtkdoc kwc">class</SPAN><SPAN class="gtkdoc opt">-&gt;</SPAN>dynamic_gstring <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Strings.html#g-string-new">g_string_new</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"some other string"</SPAN><SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>
<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>type_b_base_class_finalize</SPAN> <SPAN class="gtkdoc opt">(</SPAN>TypeBClass <SPAN class="gtkdoc opt">*</SPAN><SPAN class="gtkdoc kwc">class</SPAN><SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Strings.html#g-string-free">g_string_free</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class="gtkdoc kwc">class</SPAN><SPAN class="gtkdoc opt">-&gt;</SPAN>dynamic_gstring<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>
<SPAN class="gtkdoc kwb">static void</SPAN>
<SPAN class=function>type_b_class_init</SPAN> <SPAN class="gtkdoc opt">(</SPAN>TypeBClass <SPAN class="gtkdoc opt">*</SPAN><SPAN class="gtkdoc kwc">class</SPAN><SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class="gtkdoc kwc">class</SPAN><SPAN class="gtkdoc opt">-&gt;</SPAN>static_float <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=number>3.14159265358979323846</SPAN><SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P>Initialization of TypeBClass will first cause initialization of TypeAClass (derived classes reference their parent classes, see <A title=g_type_class_ref&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-class-ref"><CODE class=function>g_type_class_ref()</CODE></A> on this).</P>
<P>Initialization of TypeAClass roughly involves zero-initializing its fields, then calling its <A title=GBaseInitFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GBaseInitFunc"><CODE class=function>GBaseInitFunc()</CODE></A> <CODE class=function>type_a_base_class_init()</CODE> to allocate its dynamic members (dynamic_string), and finally calling its <A title=GClassInitFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GClassInitFunc"><CODE class=function>GClassInitFunc()</CODE></A> <CODE class=function>type_a_class_init()</CODE> to initialize its static members (static_integer). The first step in the initialization process of TypeBClass is then a plain memory copy of the contents of TypeAClass into TypeBClass and zero-initialization of the remaining fields in TypeBClass. The dynamic members of TypeAClass within TypeBClass now need reinitialization which is performed by calling <CODE class=function>type_a_base_class_init()</CODE> with an argument of TypeBClass.</P>
<P>After that, the <A title=GBaseInitFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GBaseInitFunc"><CODE class=function>GBaseInitFunc()</CODE></A> of TypeBClass, <CODE class=function>type_b_base_class_init()</CODE> is called to allocate the dynamic members of TypeBClass (dynamic_gstring), and finally the <A title=GClassInitFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GClassInitFunc"><CODE class=function>GClassInitFunc()</CODE></A> of TypeBClass, <CODE class=function>type_b_class_init()</CODE>, is called to complete the initialization process with the static members (static_float).</P>
<P>Corresponding finalization counter parts to the <A title=GBaseInitFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GBaseInitFunc"><CODE class=function>GBaseInitFunc()</CODE></A> functions have to be provided to release allocated resources at class finalization time.</P>
<DIV class=refsect3><A name=GClassInitFunc.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>g_class</P></TD>
<TD class=parameter_description>
<P>The <A title="struct GTypeClass" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeClass"><SPAN class=type>GTypeClass</SPAN></A> structure to initialize. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Override the parsed C type with given type."><SPAN class=acronym>type</SPAN></ACRONYM> GObject.TypeClass]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>class_data</P></TD>
<TD class=parameter_description>
<P>The <EM class=parameter><CODE>class_data</CODE></EM> member supplied via the <A title="struct GTypeInfo" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInfo"><SPAN class=type>GTypeInfo</SPAN></A> structure.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>

<DIV class=refsect2><A name=GClassFinalizeFunc></A>
<H3>GClassFinalizeFunc&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
<SPAN class=c_punctuation>(</SPAN>*GClassFinalizeFunc<SPAN class=c_punctuation>)</SPAN> (<EM class=parameter><CODE><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> g_class</CODE></EM>,
                       <EM class=parameter><CODE><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> class_data</CODE></EM>);</PRE>
<P>A callback function used by the type system to finalize a class. This function is rarely needed, as dynamically allocated class resources should be handled by <A title=GBaseInitFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GBaseInitFunc"><CODE class=function>GBaseInitFunc()</CODE></A> and <A title=GBaseFinalizeFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GBaseFinalizeFunc"><CODE class=function>GBaseFinalizeFunc()</CODE></A>. Also, specification of a <A title=GClassFinalizeFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GClassFinalizeFunc"><CODE class=function>GClassFinalizeFunc()</CODE></A> in the <A title="struct GTypeInfo" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInfo"><SPAN class=type>GTypeInfo</SPAN></A> structure of a static type is invalid, because classes of static types will never be finalized (they are artificially kept alive when their reference count drops to zero).</P>
<DIV class=refsect3><A name=GClassFinalizeFunc.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>g_class</P></TD>
<TD class=parameter_description>
<P>The <A title="struct GTypeClass" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeClass"><SPAN class=type>GTypeClass</SPAN></A> structure to finalize. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Override the parsed C type with given type."><SPAN class=acronym>type</SPAN></ACRONYM> GObject.TypeClass]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>class_data</P></TD>
<TD class=parameter_description>
<P>The <EM class=parameter><CODE>class_data</CODE></EM> member supplied via the <A title="struct GTypeInfo" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInfo"><SPAN class=type>GTypeInfo</SPAN></A> structure</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>

<DIV class=refsect2><A name=GInstanceInitFunc></A>
<H3>GInstanceInitFunc&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
<SPAN class=c_punctuation>(</SPAN>*GInstanceInitFunc<SPAN class=c_punctuation>)</SPAN> (<EM class=parameter><CODE><A title="struct GTypeInstance" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInstance"><SPAN class=type>GTypeInstance</SPAN></A> *instance</CODE></EM>,
                      <EM class=parameter><CODE><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> g_class</CODE></EM>);</PRE>
<P>A callback function used by the type system to initialize a new instance of a type. This function initializes all instance members and allocates any resources required by it.</P>
<P>Initialization of a derived instance involves calling all its parent types instance initializers, so the class member of the instance is altered during its initialization to always point to the class that belongs to the type the current initializer was introduced for.</P>
<P>The extended members of <EM class=parameter><CODE>instance</CODE></EM> are guaranteed to have been filled with zeros before this function is called.</P>
<DIV class=refsect3><A name=GInstanceInitFunc.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>instance</P></TD>
<TD class=parameter_description>
<P>The instance to initialize</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>g_class</P></TD>
<TD class=parameter_description>
<P>The class of the type the instance is created for. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Override the parsed C type with given type."><SPAN class=acronym>type</SPAN></ACRONYM> GObject.TypeClass]</SPAN></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>

<DIV class=refsect2><A name=GInterfaceInitFunc></A>
<H3>GInterfaceInitFunc&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
<SPAN class=c_punctuation>(</SPAN>*GInterfaceInitFunc<SPAN class=c_punctuation>)</SPAN> (<EM class=parameter><CODE><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> g_iface</CODE></EM>,
                       <EM class=parameter><CODE><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> iface_data</CODE></EM>);</PRE>
<P>A callback function used by the type system to initialize a new interface. This function should initialize all internal data and allocate any resources required by the interface.</P>
<P>The members of <EM class=parameter><CODE>iface_data</CODE></EM> are guaranteed to have been filled with zeros before this function is called.</P>
<DIV class=refsect3><A name=GInterfaceInitFunc.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>g_iface</P></TD>
<TD class=parameter_description>
<P>The interface structure to initialize. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Override the parsed C type with given type."><SPAN class=acronym>type</SPAN></ACRONYM> GObject.TypeInterface]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>iface_data</P></TD>
<TD class=parameter_description>
<P>The <EM class=parameter><CODE>interface_data</CODE></EM> supplied via the <A title="struct GInterfaceInfo" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GInterfaceInfo"><SPAN class=type>GInterfaceInfo</SPAN></A> structure</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>

<DIV class=refsect2><A name=GInterfaceFinalizeFunc></A>
<H3>GInterfaceFinalizeFunc&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
<SPAN class=c_punctuation>(</SPAN>*GInterfaceFinalizeFunc<SPAN class=c_punctuation>)</SPAN> (<EM class=parameter><CODE><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> g_iface</CODE></EM>,
                           <EM class=parameter><CODE><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> iface_data</CODE></EM>);</PRE>
<P>A callback function used by the type system to finalize an interface. This function should destroy any internal data and release any resources allocated by the corresponding <A title=GInterfaceInitFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GInterfaceInitFunc"><CODE class=function>GInterfaceInitFunc()</CODE></A> function.</P>
<DIV class=refsect3><A name=GInterfaceFinalizeFunc.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>g_iface</P></TD>
<TD class=parameter_description>
<P>The interface structure to finalize. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Override the parsed C type with given type."><SPAN class=acronym>type</SPAN></ACRONYM> GObject.TypeInterface]</SPAN></TD></TR>
<TR>
<TD class=parameter_name>
<P>iface_data</P></TD>
<TD class=parameter_description>
<P>The <EM class=parameter><CODE>interface_data</CODE></EM> supplied via the <A title="struct GInterfaceInfo" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GInterfaceInfo"><SPAN class=type>GInterfaceInfo</SPAN></A> structure</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>

<DIV class=refsect2><A name=GTypeClassCacheFunc></A>
<H3>GTypeClassCacheFunc&nbsp;()</H3><PRE class=programlisting><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gboolean"><SPAN class=returnvalue>gboolean</SPAN></A>
<SPAN class=c_punctuation>(</SPAN>*GTypeClassCacheFunc<SPAN class=c_punctuation>)</SPAN> (<EM class=parameter><CODE><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> cache_data</CODE></EM>,
                        <EM class=parameter><CODE><A title="struct GTypeClass" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeClass"><SPAN class=type>GTypeClass</SPAN></A> *g_class</CODE></EM>);</PRE>
<P>A callback function which is called when the reference count of a class drops to zero. It may use <A title=g_type_class_ref&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-class-ref"><CODE class=function>g_type_class_ref()</CODE></A> to prevent the class from being freed. You should not call <A title=g_type_class_unref&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-class-unref"><CODE class=function>g_type_class_unref()</CODE></A> from a <A title=GTypeClassCacheFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeClassCacheFunc"><SPAN class=type>GTypeClassCacheFunc</SPAN></A> function to prevent infinite recursion, use <A title=g_type_class_unref_uncached&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-class-unref-uncached"><CODE class=function>g_type_class_unref_uncached()</CODE></A> instead.</P>
<P>The functions have to check the class id passed in to figure whether they actually want to cache the class of this type, since all classes are routed through the same <A title=GTypeClassCacheFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeClassCacheFunc"><SPAN class=type>GTypeClassCacheFunc</SPAN></A> chain.</P>
<DIV class=refsect3><A name=GTypeClassCacheFunc.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>cache_data</P></TD>
<TD class=parameter_description>
<P>data that was given to the <A title=g_type_add_class_cache_func&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-add-class-cache-func"><CODE class=function>g_type_add_class_cache_func()</CODE></A> call</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>g_class</P></TD>
<TD class=parameter_description>
<P>The <A title="struct GTypeClass" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeClass"><SPAN class=type>GTypeClass</SPAN></A> structure which is unreferenced. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Override the parsed C type with given type."><SPAN class=acronym>type</SPAN></ACRONYM> GObject.TypeClass]</SPAN></TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=GTypeClassCacheFunc.returns></A>
<H4>Returns</H4>
<P><A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A> to stop further <A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeClassCacheFunc"><SPAN class=type>GTypeClassCacheFuncs</SPAN></A> from being called, <A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#FALSE:CAPS"><CODE class=literal>FALSE</CODE></A> to continue</P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-register-static></A>
<H3>g_type_register_static&nbsp;()</H3><PRE class=programlisting><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=returnvalue>GType</SPAN></A>
g_type_register_static (<EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> parent_type</CODE></EM>,
                        <EM class=parameter><CODE>const <A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *type_name</CODE></EM>,
                        <EM class=parameter><CODE>const <A title="struct GTypeInfo" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInfo"><SPAN class=type>GTypeInfo</SPAN></A> *info</CODE></EM>,
                        <EM class=parameter><CODE><A title="enum GTypeFlags" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeFlags"><SPAN class=type>GTypeFlags</SPAN></A> flags</CODE></EM>);</PRE>
<P>Registers <EM class=parameter><CODE>type_name</CODE></EM> as the name of a new static type derived from <EM class=parameter><CODE>parent_type</CODE></EM> . The type system uses the information contained in the <A title="struct GTypeInfo" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInfo"><SPAN class=type>GTypeInfo</SPAN></A> structure pointed to by <EM class=parameter><CODE>info</CODE></EM> to manage the type and its instances (if not abstract). The value of <EM class=parameter><CODE>flags</CODE></EM> determines the nature (e.g. abstract or not) of the type.</P>
<DIV class=refsect3><A name=g-type-register-static.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>parent_type</P></TD>
<TD class=parameter_description>
<P>type from which this type will be derived</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>type_name</P></TD>
<TD class=parameter_description>
<P>0-terminated string used as the name of the new type</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>info</P></TD>
<TD class=parameter_description>
<P><A title="struct GTypeInfo" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInfo"><SPAN class=type>GTypeInfo</SPAN></A> structure for this type</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>flags</P></TD>
<TD class=parameter_description>
<P>bitwise combination of <A title="enum GTypeFlags" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeFlags"><SPAN class=type>GTypeFlags</SPAN></A> values</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=g-type-register-static.returns></A>
<H4>Returns</H4>
<P>the new type identifier</P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-register-static-simple></A>
<H3>g_type_register_static_simple&nbsp;()</H3><PRE class=programlisting><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=returnvalue>GType</SPAN></A>
g_type_register_static_simple (<EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> parent_type</CODE></EM>,
                               <EM class=parameter><CODE>const <A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *type_name</CODE></EM>,
                               <EM class=parameter><CODE><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#guint"><SPAN class=type>guint</SPAN></A> class_size</CODE></EM>,
                               <EM class=parameter><CODE><A title=GClassInitFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GClassInitFunc"><SPAN class=type>GClassInitFunc</SPAN></A> class_init</CODE></EM>,
                               <EM class=parameter><CODE><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#guint"><SPAN class=type>guint</SPAN></A> instance_size</CODE></EM>,
                               <EM class=parameter><CODE><A title=GInstanceInitFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GInstanceInitFunc"><SPAN class=type>GInstanceInitFunc</SPAN></A> instance_init</CODE></EM>,
                               <EM class=parameter><CODE><A title="enum GTypeFlags" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeFlags"><SPAN class=type>GTypeFlags</SPAN></A> flags</CODE></EM>);</PRE>
<P>Registers <EM class=parameter><CODE>type_name</CODE></EM> as the name of a new static type derived from <EM class=parameter><CODE>parent_type</CODE></EM> . The value of <EM class=parameter><CODE>flags</CODE></EM> determines the nature (e.g. abstract or not) of the type. It works by filling a <A title="struct GTypeInfo" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInfo"><SPAN class=type>GTypeInfo</SPAN></A> struct and calling <A title=g_type_register_static&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-register-static"><CODE class=function>g_type_register_static()</CODE></A>.</P>
<P><SPAN class=annotation>[<ACRONYM title="Exposed in C code, not necessarily available in other languages."><SPAN class=acronym>skip</SPAN></ACRONYM>]</SPAN></P>
<DIV class=refsect3><A name=g-type-register-static-simple.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>parent_type</P></TD>
<TD class=parameter_description>
<P>type from which this type will be derived</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>type_name</P></TD>
<TD class=parameter_description>
<P>0-terminated string used as the name of the new type</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>class_size</P></TD>
<TD class=parameter_description>
<P>size of the class structure (see <A title="struct GTypeInfo" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInfo"><SPAN class=type>GTypeInfo</SPAN></A>)</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>class_init</P></TD>
<TD class=parameter_description>
<P>location of the class initialization function (see <A title="struct GTypeInfo" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInfo"><SPAN class=type>GTypeInfo</SPAN></A>)</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>instance_size</P></TD>
<TD class=parameter_description>
<P>size of the instance structure (see <A title="struct GTypeInfo" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInfo"><SPAN class=type>GTypeInfo</SPAN></A>)</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>instance_init</P></TD>
<TD class=parameter_description>
<P>location of the instance initialization function (see <A title="struct GTypeInfo" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInfo"><SPAN class=type>GTypeInfo</SPAN></A>)</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>flags</P></TD>
<TD class=parameter_description>
<P>bitwise combination of <A title="enum GTypeFlags" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeFlags"><SPAN class=type>GTypeFlags</SPAN></A> values</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=g-type-register-static-simple.returns></A>
<H4>Returns</H4>
<P>the new type identifier</P></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-12.html#api-index-2.12">2.12</A></P></DIV>
<HR>

<DIV class=refsect2><A name=g-type-register-dynamic></A>
<H3>g_type_register_dynamic&nbsp;()</H3><PRE class=programlisting><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=returnvalue>GType</SPAN></A>
g_type_register_dynamic (<EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> parent_type</CODE></EM>,
                         <EM class=parameter><CODE>const <A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *type_name</CODE></EM>,
                         <EM class=parameter><CODE><A title=GTypePlugin class=link href="https://developer.gnome.org/gobject/stable/GTypePlugin.html"><SPAN class=type>GTypePlugin</SPAN></A> *plugin</CODE></EM>,
                         <EM class=parameter><CODE><A title="enum GTypeFlags" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeFlags"><SPAN class=type>GTypeFlags</SPAN></A> flags</CODE></EM>);</PRE>
<P>Registers <EM class=parameter><CODE>type_name</CODE></EM> as the name of a new dynamic type derived from <EM class=parameter><CODE>parent_type</CODE></EM> . The type system uses the information contained in the <A title=GTypePlugin class=link href="https://developer.gnome.org/gobject/stable/GTypePlugin.html"><SPAN class=type>GTypePlugin</SPAN></A> structure pointed to by <EM class=parameter><CODE>plugin</CODE></EM> to manage the type and its instances (if not abstract). The value of <EM class=parameter><CODE>flags</CODE></EM> determines the nature (e.g. abstract or not) of the type.</P>
<DIV class=refsect3><A name=g-type-register-dynamic.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>parent_type</P></TD>
<TD class=parameter_description>
<P>type from which this type will be derived</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>type_name</P></TD>
<TD class=parameter_description>
<P>0-terminated string used as the name of the new type</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>plugin</P></TD>
<TD class=parameter_description>
<P><A title=GTypePlugin class=link href="https://developer.gnome.org/gobject/stable/GTypePlugin.html"><SPAN class=type>GTypePlugin</SPAN></A> structure to retrieve the <A title="struct GTypeInfo" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInfo"><SPAN class=type>GTypeInfo</SPAN></A> from</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>flags</P></TD>
<TD class=parameter_description>
<P>bitwise combination of <A title="enum GTypeFlags" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeFlags"><SPAN class=type>GTypeFlags</SPAN></A> values</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=g-type-register-dynamic.returns></A>
<H4>Returns</H4>
<P>the new type identifier or <A title=G_TYPE_INVALID class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-INVALID:CAPS"><SPAN class=type>G_TYPE_INVALID</SPAN></A> if registration failed</P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-register-fundamental></A>
<H3>g_type_register_fundamental&nbsp;()</H3><PRE class=programlisting><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=returnvalue>GType</SPAN></A>
g_type_register_fundamental (<EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> type_id</CODE></EM>,
                             <EM class=parameter><CODE>const <A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A> *type_name</CODE></EM>,
                             <EM class=parameter><CODE>const <A title="struct GTypeInfo" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInfo"><SPAN class=type>GTypeInfo</SPAN></A> *info</CODE></EM>,
                             <EM class=parameter><CODE>const <A title="struct GTypeFundamentalInfo" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeFundamentalInfo"><SPAN class=type>GTypeFundamentalInfo</SPAN></A> *finfo</CODE></EM>,
                             <EM class=parameter><CODE><A title="enum GTypeFlags" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeFlags"><SPAN class=type>GTypeFlags</SPAN></A> flags</CODE></EM>);</PRE>
<P>Registers <EM class=parameter><CODE>type_id</CODE></EM> as the predefined identifier and <EM class=parameter><CODE>type_name</CODE></EM> as the name of a fundamental type. If <EM class=parameter><CODE>type_id</CODE></EM> is already registered, or a type named <EM class=parameter><CODE>type_name</CODE></EM> is already registered, the behaviour is undefined. The type system uses the information contained in the <A title="struct GTypeInfo" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInfo"><SPAN class=type>GTypeInfo</SPAN></A> structure pointed to by <EM class=parameter><CODE>info</CODE></EM> and the <A title="struct GTypeFundamentalInfo" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeFundamentalInfo"><SPAN class=type>GTypeFundamentalInfo</SPAN></A> structure pointed to by <EM class=parameter><CODE>finfo</CODE></EM> to manage the type and its instances. The value of <EM class=parameter><CODE>flags</CODE></EM> determines additional characteristics of the fundamental type.</P>
<DIV class=refsect3><A name=g-type-register-fundamental.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type_id</P></TD>
<TD class=parameter_description>
<P>a predefined type identifier</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>type_name</P></TD>
<TD class=parameter_description>
<P>0-terminated string used as the name of the new type</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>info</P></TD>
<TD class=parameter_description>
<P><A title="struct GTypeInfo" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInfo"><SPAN class=type>GTypeInfo</SPAN></A> structure for this type</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>finfo</P></TD>
<TD class=parameter_description>
<P><A title="struct GTypeFundamentalInfo" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeFundamentalInfo"><SPAN class=type>GTypeFundamentalInfo</SPAN></A> structure for this type</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>flags</P></TD>
<TD class=parameter_description>
<P>bitwise combination of <A title="enum GTypeFlags" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeFlags"><SPAN class=type>GTypeFlags</SPAN></A> values</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=g-type-register-fundamental.returns></A>
<H4>Returns</H4>
<P>the predefined type identifier</P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-add-interface-static></A>
<H3>g_type_add_interface_static&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_type_add_interface_static (<EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> instance_type</CODE></EM>,
                             <EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> interface_type</CODE></EM>,
                             <EM class=parameter><CODE>const <A title="struct GInterfaceInfo" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GInterfaceInfo"><SPAN class=type>GInterfaceInfo</SPAN></A> *info</CODE></EM>);</PRE>
<P>Adds the static <EM class=parameter><CODE>interface_type</CODE></EM> to <EM class=parameter><CODE>instantiable_type</CODE></EM> . The information contained in the <A title="struct GInterfaceInfo" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GInterfaceInfo"><SPAN class=type>GInterfaceInfo</SPAN></A> structure pointed to by <EM class=parameter><CODE>info</CODE></EM> is used to manage the relationship.</P>
<DIV class=refsect3><A name=g-type-add-interface-static.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>instance_type</P></TD>
<TD class=parameter_description>
<P><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> value of an instantiable type</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>interface_type</P></TD>
<TD class=parameter_description>
<P><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> value of an interface type</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>info</P></TD>
<TD class=parameter_description>
<P><A title="struct GInterfaceInfo" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GInterfaceInfo"><SPAN class=type>GInterfaceInfo</SPAN></A> structure for this (<EM class=parameter><CODE>instance_type</CODE></EM> , <EM class=parameter><CODE>interface_type</CODE></EM> ) combination</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-add-interface-dynamic></A>
<H3>g_type_add_interface_dynamic&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_type_add_interface_dynamic (<EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> instance_type</CODE></EM>,
                              <EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> interface_type</CODE></EM>,
                              <EM class=parameter><CODE><A title=GTypePlugin class=link href="https://developer.gnome.org/gobject/stable/GTypePlugin.html"><SPAN class=type>GTypePlugin</SPAN></A> *plugin</CODE></EM>);</PRE>
<P>Adds the dynamic <EM class=parameter><CODE>interface_type</CODE></EM> to <EM class=parameter><CODE>instantiable_type</CODE></EM> . The information contained in the <A title=GTypePlugin class=link href="https://developer.gnome.org/gobject/stable/GTypePlugin.html"><SPAN class=type>GTypePlugin</SPAN></A> structure pointed to by <EM class=parameter><CODE>plugin</CODE></EM> is used to manage the relationship.</P>
<DIV class=refsect3><A name=g-type-add-interface-dynamic.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>instance_type</P></TD>
<TD class=parameter_description>
<P><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> value of an instantiable type</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>interface_type</P></TD>
<TD class=parameter_description>
<P><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> value of an interface type</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>plugin</P></TD>
<TD class=parameter_description>
<P><A title=GTypePlugin class=link href="https://developer.gnome.org/gobject/stable/GTypePlugin.html"><SPAN class=type>GTypePlugin</SPAN></A> structure to retrieve the <A title="struct GInterfaceInfo" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GInterfaceInfo"><SPAN class=type>GInterfaceInfo</SPAN></A> from</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-interface-add-prerequisite></A>
<H3>g_type_interface_add_prerequisite&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_type_interface_add_prerequisite (<EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> interface_type</CODE></EM>,
                                   <EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> prerequisite_type</CODE></EM>);</PRE>
<P>Adds <EM class=parameter><CODE>prerequisite_type</CODE></EM> to the list of prerequisites of <EM class=parameter><CODE>interface_type</CODE></EM> . This means that any type implementing <EM class=parameter><CODE>interface_type</CODE></EM> must also implement <EM class=parameter><CODE>prerequisite_type</CODE></EM> . Prerequisites can be thought of as an alternative to interface derivation (which GType doesn't support). An interface can have at most one instantiatable prerequisite type.</P>
<DIV class=refsect3><A name=g-type-interface-add-prerequisite.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>interface_type</P></TD>
<TD class=parameter_description>
<P><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> value of an interface type</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>prerequisite_type</P></TD>
<TD class=parameter_description>
<P><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> value of an interface or instantiatable type</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-get-plugin></A>
<H3>g_type_get_plugin&nbsp;()</H3><PRE class=programlisting><A title=GTypePlugin class=link href="https://developer.gnome.org/gobject/stable/GTypePlugin.html"><SPAN class=returnvalue>GTypePlugin</SPAN></A>&nbsp;*
g_type_get_plugin (<EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> type</CODE></EM>);</PRE>
<P>Returns the <A title=GTypePlugin class=link href="https://developer.gnome.org/gobject/stable/GTypePlugin.html"><SPAN class=type>GTypePlugin</SPAN></A> structure for <EM class=parameter><CODE>type</CODE></EM> .</P>
<DIV class=refsect3><A name=g-type-get-plugin.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> to retrieve the plugin for</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=g-type-get-plugin.returns></A>
<H4>Returns</H4>
<P>the corresponding plugin if <EM class=parameter><CODE>type</CODE></EM> is a dynamic type, <A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> otherwise. </P>
<P><SPAN class=annotation>[<ACRONYM title="Don't free data after the code is done."><SPAN class=acronym>transfer none</SPAN></ACRONYM>]</SPAN></P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-interface-get-plugin></A>
<H3>g_type_interface_get_plugin&nbsp;()</H3><PRE class=programlisting><A title=GTypePlugin class=link href="https://developer.gnome.org/gobject/stable/GTypePlugin.html"><SPAN class=returnvalue>GTypePlugin</SPAN></A>&nbsp;*
g_type_interface_get_plugin (<EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> instance_type</CODE></EM>,
                             <EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> interface_type</CODE></EM>);</PRE>
<P>Returns the <A title=GTypePlugin class=link href="https://developer.gnome.org/gobject/stable/GTypePlugin.html"><SPAN class=type>GTypePlugin</SPAN></A> structure for the dynamic interface <EM class=parameter><CODE>interface_type</CODE></EM> which has been added to <EM class=parameter><CODE>instance_type</CODE></EM> , or <A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> if <EM class=parameter><CODE>interface_type</CODE></EM> has not been added to <EM class=parameter><CODE>instance_type</CODE></EM> or does not have a <A title=GTypePlugin class=link href="https://developer.gnome.org/gobject/stable/GTypePlugin.html"><SPAN class=type>GTypePlugin</SPAN></A> structure. See <A title=g_type_add_interface_dynamic&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-add-interface-dynamic"><CODE class=function>g_type_add_interface_dynamic()</CODE></A>.</P>
<DIV class=refsect3><A name=g-type-interface-get-plugin.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>instance_type</P></TD>
<TD class=parameter_description>
<P><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> of an instantiatable type</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>interface_type</P></TD>
<TD class=parameter_description>
<P><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> of an interface type</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=g-type-interface-get-plugin.returns></A>
<H4>Returns</H4>
<P>the <A title=GTypePlugin class=link href="https://developer.gnome.org/gobject/stable/GTypePlugin.html"><SPAN class=type>GTypePlugin</SPAN></A> for the dynamic interface <EM class=parameter><CODE>interface_type</CODE></EM> of <EM class=parameter><CODE>instance_type</CODE></EM> . </P>
<P><SPAN class=annotation>[<ACRONYM title="Don't free data after the code is done."><SPAN class=acronym>transfer none</SPAN></ACRONYM>]</SPAN></P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-fundamental-next></A>
<H3>g_type_fundamental_next&nbsp;()</H3><PRE class=programlisting><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=returnvalue>GType</SPAN></A>
g_type_fundamental_next (<EM class=parameter><CODE><SPAN class=type>void</SPAN></CODE></EM>);</PRE>
<P>Returns the next free fundamental type id which can be used to register a new fundamental type with <A title=g_type_register_fundamental&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-register-fundamental"><CODE class=function>g_type_register_fundamental()</CODE></A>. The returned type ID represents the highest currently registered fundamental type identifier.</P>
<DIV class=refsect3><A name=g-type-fundamental-next.returns></A>
<H4>Returns</H4>
<P>the next available fundamental type ID to be registered, or 0 if the type system ran out of fundamental type IDs</P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-fundamental></A>
<H3>g_type_fundamental&nbsp;()</H3><PRE class=programlisting><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=returnvalue>GType</SPAN></A>
g_type_fundamental (<EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> type_id</CODE></EM>);</PRE>
<P>Internal function, used to extract the fundamental type ID portion. Use <A title=G_TYPE_FUNDAMENTAL() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-FUNDAMENTAL:CAPS"><CODE class=function>G_TYPE_FUNDAMENTAL()</CODE></A> instead.</P>
<DIV class=refsect3><A name=g-type-fundamental.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type_id</P></TD>
<TD class=parameter_description>
<P>valid type ID</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=g-type-fundamental.returns></A>
<H4>Returns</H4>
<P>fundamental type ID</P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-create-instance></A>
<H3>g_type_create_instance&nbsp;()</H3><PRE class=programlisting><A title="struct GTypeInstance" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInstance"><SPAN class=returnvalue>GTypeInstance</SPAN></A>&nbsp;*
g_type_create_instance (<EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> type</CODE></EM>);</PRE>
<P>Creates and initializes an instance of <EM class=parameter><CODE>type</CODE></EM> if <EM class=parameter><CODE>type</CODE></EM> is valid and can be instantiated. The type system only performs basic allocation and structure setups for instances: actual instance creation should happen through functions supplied by the type's fundamental type implementation. So use of <A title=g_type_create_instance&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-create-instance"><CODE class=function>g_type_create_instance()</CODE></A> is reserved for implementators of fundamental types only. E.g. instances of the <A class=link href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#GObject"><SPAN class=type>GObject</SPAN></A> hierarchy should be created via <A title=g_object_new&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#g-object-new"><CODE class=function>g_object_new()</CODE></A> and never directly through <A title=g_type_create_instance&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-create-instance"><CODE class=function>g_type_create_instance()</CODE></A> which doesn't handle things like singleton objects or object construction.</P>
<P>The extended members of the returned instance are guaranteed to be filled with zeros.</P>
<P>Note: Do not use this function, unless you're implementing a fundamental type. Also language bindings should not use this function, but <A title=g_object_new&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#g-object-new"><CODE class=function>g_object_new()</CODE></A> instead.</P>
<P><SPAN class=annotation>[<ACRONYM title="Exposed in C code, not necessarily available in other languages."><SPAN class=acronym>skip</SPAN></ACRONYM>]</SPAN></P>
<DIV class=refsect3><A name=g-type-create-instance.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>an instantiatable type to create an instance for</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=g-type-create-instance.returns></A>
<H4>Returns</H4>
<P>an allocated and initialized instance, subject to further treatment by the fundamental type implementation</P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-free-instance></A>
<H3>g_type_free_instance&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_type_free_instance (<EM class=parameter><CODE><A title="struct GTypeInstance" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInstance"><SPAN class=type>GTypeInstance</SPAN></A> *instance</CODE></EM>);</PRE>
<P>Frees an instance of a type, returning it to the instance pool for the type, if there is one.</P>
<P>Like <A title=g_type_create_instance&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-create-instance"><CODE class=function>g_type_create_instance()</CODE></A>, this function is reserved for implementors of fundamental types.</P>
<DIV class=refsect3><A name=g-type-free-instance.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>instance</P></TD>
<TD class=parameter_description>
<P>an instance of a type</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-add-class-cache-func></A>
<H3>g_type_add_class_cache_func&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_type_add_class_cache_func (<EM class=parameter><CODE><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> cache_data</CODE></EM>,
                             <EM class=parameter><CODE><A title=GTypeClassCacheFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeClassCacheFunc"><SPAN class=type>GTypeClassCacheFunc</SPAN></A> cache_func</CODE></EM>);</PRE>
<P>Adds a <A title=GTypeClassCacheFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeClassCacheFunc"><SPAN class=type>GTypeClassCacheFunc</SPAN></A> to be called before the reference count of a class goes from one to zero. This can be used to prevent premature class destruction. All installed <A title=GTypeClassCacheFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeClassCacheFunc"><SPAN class=type>GTypeClassCacheFunc</SPAN></A> functions will be chained until one of them returns <A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#TRUE:CAPS"><CODE class=literal>TRUE</CODE></A>. The functions have to check the class id passed in to figure whether they actually want to cache the class of this type, since all classes are routed through the same <A title=GTypeClassCacheFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeClassCacheFunc"><SPAN class=type>GTypeClassCacheFunc</SPAN></A> chain.</P>
<P><SPAN class=annotation>[<ACRONYM title="Exposed in C code, not necessarily available in other languages."><SPAN class=acronym>skip</SPAN></ACRONYM>]</SPAN></P>
<DIV class=refsect3><A name=g-type-add-class-cache-func.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>cache_data</P></TD>
<TD class=parameter_description>
<P>data to be passed to <EM class=parameter><CODE>cache_func</CODE></EM> </P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>cache_func</P></TD>
<TD class=parameter_description>
<P>a <A title=GTypeClassCacheFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeClassCacheFunc"><SPAN class=type>GTypeClassCacheFunc</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-remove-class-cache-func></A>
<H3>g_type_remove_class_cache_func&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_type_remove_class_cache_func (<EM class=parameter><CODE><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> cache_data</CODE></EM>,
                                <EM class=parameter><CODE><A title=GTypeClassCacheFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeClassCacheFunc"><SPAN class=type>GTypeClassCacheFunc</SPAN></A> cache_func</CODE></EM>);</PRE>
<P>Removes a previously installed <A title=GTypeClassCacheFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeClassCacheFunc"><SPAN class=type>GTypeClassCacheFunc</SPAN></A>. The cache maintained by <EM class=parameter><CODE>cache_func</CODE></EM> has to be empty when calling <A title=g_type_remove_class_cache_func&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-remove-class-cache-func"><CODE class=function>g_type_remove_class_cache_func()</CODE></A> to avoid leaks.</P>
<P><SPAN class=annotation>[<ACRONYM title="Exposed in C code, not necessarily available in other languages."><SPAN class=acronym>skip</SPAN></ACRONYM>]</SPAN></P>
<DIV class=refsect3><A name=g-type-remove-class-cache-func.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>cache_data</P></TD>
<TD class=parameter_description>
<P>data that was given when adding <EM class=parameter><CODE>cache_func</CODE></EM> </P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>cache_func</P></TD>
<TD class=parameter_description>
<P>a <A title=GTypeClassCacheFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeClassCacheFunc"><SPAN class=type>GTypeClassCacheFunc</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-class-unref-uncached></A>
<H3>g_type_class_unref_uncached&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_type_class_unref_uncached (<EM class=parameter><CODE><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> g_class</CODE></EM>);</PRE>
<P>A variant of <A title=g_type_class_unref&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-class-unref"><CODE class=function>g_type_class_unref()</CODE></A> for use in <A title=GTypeClassCacheFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeClassCacheFunc"><SPAN class=type>GTypeClassCacheFunc</SPAN></A> implementations. It unreferences a class without consulting the chain of <A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeClassCacheFunc"><SPAN class=type>GTypeClassCacheFuncs</SPAN></A>, avoiding the recursion which would occur otherwise.</P>
<P><SPAN class=annotation>[<ACRONYM title="Exposed in C code, not necessarily available in other languages."><SPAN class=acronym>skip</SPAN></ACRONYM>]</SPAN></P>
<DIV class=refsect3><A name=g-type-class-unref-uncached.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>g_class</P></TD>
<TD class=parameter_description>
<P>a <A title="struct GTypeClass" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeClass"><SPAN class=type>GTypeClass</SPAN></A> structure to unref. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Override the parsed C type with given type."><SPAN class=acronym>type</SPAN></ACRONYM> GObject.TypeClass]</SPAN></TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-add-interface-check></A>
<H3>g_type_add_interface_check&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_type_add_interface_check (<EM class=parameter><CODE><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> check_data</CODE></EM>,
                            <EM class=parameter><CODE><A title=GTypeInterfaceCheckFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInterfaceCheckFunc"><SPAN class=type>GTypeInterfaceCheckFunc</SPAN></A> check_func</CODE></EM>);</PRE>
<P>Adds a function to be called after an interface vtable is initialized for any class (i.e. after the <EM class=parameter><CODE>interface_init</CODE></EM> member of <A title="struct GInterfaceInfo" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GInterfaceInfo"><SPAN class=type>GInterfaceInfo</SPAN></A> has been called).</P>
<P>This function is useful when you want to check an invariant that depends on the interfaces of a class. For instance, the implementation of <A class=link href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#GObject"><SPAN class=type>GObject</SPAN></A> uses this facility to check that an object implements all of the properties that are defined on its interfaces.</P>
<P><SPAN class=annotation>[<ACRONYM title="Exposed in C code, not necessarily available in other languages."><SPAN class=acronym>skip</SPAN></ACRONYM>]</SPAN></P>
<DIV class=refsect3><A name=g-type-add-interface-check.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>check_data</P></TD>
<TD class=parameter_description>
<P>data to pass to <EM class=parameter><CODE>check_func</CODE></EM> </P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>check_func</P></TD>
<TD class=parameter_description>
<P>function to be called after each interface is initialized</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-4.html#api-index-2.4">2.4</A></P></DIV>
<HR>

<DIV class=refsect2><A name=g-type-remove-interface-check></A>
<H3>g_type_remove_interface_check&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_type_remove_interface_check (<EM class=parameter><CODE><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> check_data</CODE></EM>,
                               <EM class=parameter><CODE><A title=GTypeInterfaceCheckFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInterfaceCheckFunc"><SPAN class=type>GTypeInterfaceCheckFunc</SPAN></A> check_func</CODE></EM>);</PRE>
<P>Removes an interface check function added with <A title=g_type_add_interface_check&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-add-interface-check"><CODE class=function>g_type_add_interface_check()</CODE></A>.</P>
<P><SPAN class=annotation>[<ACRONYM title="Exposed in C code, not necessarily available in other languages."><SPAN class=acronym>skip</SPAN></ACRONYM>]</SPAN></P>
<DIV class=refsect3><A name=g-type-remove-interface-check.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>check_data</P></TD>
<TD class=parameter_description>
<P>callback data passed to <A title=g_type_add_interface_check&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-add-interface-check"><CODE class=function>g_type_add_interface_check()</CODE></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>check_func</P></TD>
<TD class=parameter_description>
<P>callback function passed to <A title=g_type_add_interface_check&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-add-interface-check"><CODE class=function>g_type_add_interface_check()</CODE></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-4.html#api-index-2.4">2.4</A></P></DIV>
<HR>

<DIV class=refsect2><A name=GTypeInterfaceCheckFunc></A>
<H3>GTypeInterfaceCheckFunc&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
<SPAN class=c_punctuation>(</SPAN>*GTypeInterfaceCheckFunc<SPAN class=c_punctuation>)</SPAN> (<EM class=parameter><CODE><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> check_data</CODE></EM>,
                            <EM class=parameter><CODE><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A> g_iface</CODE></EM>);</PRE>
<P>A callback called after an interface vtable is initialized. See <A title=g_type_add_interface_check&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-add-interface-check"><CODE class=function>g_type_add_interface_check()</CODE></A>.</P>
<DIV class=refsect3><A name=GTypeInterfaceCheckFunc.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>check_data</P></TD>
<TD class=parameter_description>
<P>data passed to <A title=g_type_add_interface_check&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-add-interface-check"><CODE class=function>g_type_add_interface_check()</CODE></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>g_iface</P></TD>
<TD class=parameter_description>
<P>the interface that has been initialized. </P></TD>
<TD class=parameter_annotations><SPAN class=annotation>[<ACRONYM title="Override the parsed C type with given type."><SPAN class=acronym>type</SPAN></ACRONYM> GObject.TypeInterface]</SPAN></TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-4.html#api-index-2.4">2.4</A></P></DIV>
<HR>

<DIV class=refsect2><A name=g-type-value-table-peek></A>
<H3>g_type_value_table_peek&nbsp;()</H3><PRE class=programlisting><A title="struct GTypeValueTable" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeValueTable"><SPAN class=returnvalue>GTypeValueTable</SPAN></A>&nbsp;*
g_type_value_table_peek (<EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> type</CODE></EM>);</PRE>
<P>Returns the location of the <A title="struct GTypeValueTable" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeValueTable"><SPAN class=type>GTypeValueTable</SPAN></A> associated with <EM class=parameter><CODE>type</CODE></EM> .</P>
<P>Note that this function should only be used from source code that implements or has internal knowledge of the implementation of <EM class=parameter><CODE>type</CODE></EM> .</P>
<P><SPAN class=annotation>[<ACRONYM title="Exposed in C code, not necessarily available in other languages."><SPAN class=acronym>skip</SPAN></ACRONYM>]</SPAN></P>
<DIV class=refsect3><A name=g-type-value-table-peek.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>a <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=g-type-value-table-peek.returns></A>
<H4>Returns</H4>
<P>location of the <A title="struct GTypeValueTable" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeValueTable"><SPAN class=type>GTypeValueTable</SPAN></A> associated with <EM class=parameter><CODE>type</CODE></EM> or <A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> if there is no <A title="struct GTypeValueTable" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeValueTable"><SPAN class=type>GTypeValueTable</SPAN></A> associated with <EM class=parameter><CODE>type</CODE></EM> </P></DIV></DIV>
<HR>

<DIV class=refsect2><A name=g-type-ensure></A>
<H3>g_type_ensure&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>void</SPAN>
g_type_ensure (<EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> type</CODE></EM>);</PRE>
<P>Ensures that the indicated <EM class=parameter><CODE>type</CODE></EM> has been registered with the type system, and its <CODE class=function>_class_init()</CODE> method has been run.</P>
<P>In theory, simply calling the type's <CODE class=function>_get_type()</CODE> method (or using the corresponding macro) is supposed take care of this. However, <CODE class=function>_get_type()</CODE> methods are often marked <A href="https://developer.gnome.org/gobject/glib-Miscellaneous-Macros.html#G-GNUC-CONST:CAPS"><CODE class=literal>G_GNUC_CONST</CODE></A> for performance reasons, even though this is technically incorrect (since <A href="https://developer.gnome.org/gobject/glib-Miscellaneous-Macros.html#G-GNUC-CONST:CAPS"><CODE class=literal>G_GNUC_CONST</CODE></A> requires that the function not have side effects, which <CODE class=function>_get_type()</CODE> methods do on the first call). As a result, if you write a bare call to a <CODE class=function>_get_type()</CODE> macro, it may get optimized out by the compiler. Using <A title=g_type_ensure&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-ensure"><CODE class=function>g_type_ensure()</CODE></A> guarantees that the type's <CODE class=function>_get_type()</CODE> method is called.</P>
<DIV class=refsect3><A name=g-type-ensure.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>a <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-34.html#api-index-2.34">2.34</A></P></DIV>
<HR>

<DIV class=refsect2><A name=g-type-get-type-registration-serial></A>
<H3>g_type_get_type_registration_serial&nbsp;()</H3><PRE class=programlisting><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#guint"><SPAN class=returnvalue>guint</SPAN></A>
g_type_get_type_registration_serial (<EM class=parameter><CODE><SPAN class=type>void</SPAN></CODE></EM>);</PRE>
<P>Returns an opaque serial number that represents the state of the set of registered types. Any time a type is registered this serial changes, which means you can cache information based on type lookups (such as <A title=g_type_from_name&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-from-name"><CODE class=function>g_type_from_name()</CODE></A>) and know if the cache is still valid at a later time by comparing the current serial with the one at the type lookup.</P>
<DIV class=refsect3><A name=g-type-get-type-registration-serial.returns></A>
<H4>Returns</H4>
<P>An unsigned int, representing the state of type registrations</P></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-36.html#api-index-2.36">2.36</A></P></DIV>
<HR>

<DIV class=refsect2><A name=g-type-get-instance-count></A>
<H3>g_type_get_instance_count&nbsp;()</H3><PRE class=programlisting><SPAN class=returnvalue>int</SPAN>
g_type_get_instance_count (<EM class=parameter><CODE><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> type</CODE></EM>);</PRE>
<P>Returns the number of instances allocated of the particular type; this is only available if GLib is built with debugging support and the instance_count debug flag is set (by setting the GOBJECT_DEBUG variable to include instance-count).</P>
<DIV class=refsect3><A name=g-type-get-instance-count.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>type</P></TD>
<TD class=parameter_description>
<P>a <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<DIV class=refsect3><A name=g-type-get-instance-count.returns></A>
<H4>Returns</H4>
<P>the number of instances allocated of the given type; if instance counts are not available, returns 0.</P></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-44.html#api-index-2.44">2.44</A></P></DIV>
<HR>

<DIV class=refsect2><A name=G-DECLARE-FINAL-TYPE:CAPS></A>
<H3>G_DECLARE_FINAL_TYPE()</H3><PRE class=programlisting>#define             G_DECLARE_FINAL_TYPE(ModuleObjName, module_obj_name, MODULE, OBJ_NAME, ParentName)</PRE>
<P>A convenience macro for emitting the usual declarations in the header file for a type which is not (at the present time) intended to be subclassed.</P>
<P>You might use it in a header as follows:</P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc ppc">#ifndef _myapp_window_h_</SPAN>
<SPAN class="gtkdoc ppc">#define _myapp_window_h_</SPAN>

<SPAN class="gtkdoc ppc">#include &lt;gtk/gtk.h&gt;</SPAN>

<SPAN class="gtkdoc ppc">#define MY_APP_TYPE_WINDOW my_app_window_get_type ()</SPAN>
<SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DECLARE-FINAL-TYPE:CAPS">G_DECLARE_FINAL_TYPE</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>MyAppWindow<SPAN class="gtkdoc opt">,</SPAN> my_app_window<SPAN class="gtkdoc opt">,</SPAN> MY_APP<SPAN class="gtkdoc opt">,</SPAN> WINDOW<SPAN class="gtkdoc opt">,</SPAN> GtkWindow<SPAN class="gtkdoc opt">)</SPAN>

MyAppWindow <SPAN class="gtkdoc opt">*</SPAN>    <SPAN class=function>my_app_window_new</SPAN>    <SPAN class="gtkdoc opt">(</SPAN><SPAN class="gtkdoc kwb">void</SPAN><SPAN class="gtkdoc opt">);</SPAN>

<SPAN class="gtkdoc opt">...</SPAN>

<SPAN class="gtkdoc ppc">#endif</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<P>This results in the following things happening:</P>
<DIV class=itemizedlist>
<UL class=itemizedlist style="LIST-STYLE-TYPE: disc">
<LI class=listitem>
<P>the usual <CODE class=function>my_app_window_get_type()</CODE> function is declared with a return type of <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A></P></LI>
<LI class=listitem>
<P>the MyAppWindow types is defined as a typedef of struct _MyAppWindow. The struct itself is not defined and should be defined from the .c file before <A title=G_DEFINE_TYPE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE:CAPS"><CODE class=function>G_DEFINE_TYPE()</CODE></A> is used.</P></LI>
<LI class=listitem>
<P>the <CODE class=function>MY_APP_WINDOW()</CODE> cast is emitted as static inline function along with the <CODE class=function>MY_APP_IS_WINDOW()</CODE> type checking function</P></LI>
<LI class=listitem>
<P>the MyAppWindowClass type is defined as a struct containing GtkWindowClass. This is done for the convenience of the person defining the type and should not be considered to be part of the ABI. In particular, without a firm declaration of the instance structure, it is not possible to subclass the type and therefore the fact that the size of the class structure is exposed is not a concern and it can be freely changed at any point in the future.</P></LI>
<LI class=listitem>
<P>g_autoptr() support being added for your type, based on the type of your parent class</P></LI></UL></DIV>
<P>You can only use this function if your parent type also supports <A href="https://developer.gnome.org/gobject/glib-Miscellaneous-Macros.html#g-autoptr"><CODE class=function>g_autoptr()</CODE></A>.</P>
<P>Because the type macro (MY_APP_TYPE_WINDOW in the above example) is not a callable, you must continue to manually define this as a macro for yourself.</P>
<P>The declaration of the <CODE class=function>_get_type()</CODE> function is the first thing emitted by the macro. This allows this macro to be used in the usual way with export control and API versioning macros.</P>
<P>If you want to declare your own class structure, use <A title=G_DECLARE_DERIVABLE_TYPE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DECLARE-DERIVABLE-TYPE:CAPS"><CODE class=function>G_DECLARE_DERIVABLE_TYPE()</CODE></A>.</P>
<P>If you are writing a library, it is important to note that it is possible to convert a type from using <A title=G_DECLARE_FINAL_TYPE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DECLARE-FINAL-TYPE:CAPS"><CODE class=function>G_DECLARE_FINAL_TYPE()</CODE></A> to <A title=G_DECLARE_DERIVABLE_TYPE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DECLARE-DERIVABLE-TYPE:CAPS"><CODE class=function>G_DECLARE_DERIVABLE_TYPE()</CODE></A> without breaking API or ABI. As a precaution, you should therefore use <A title=G_DECLARE_FINAL_TYPE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DECLARE-FINAL-TYPE:CAPS"><CODE class=function>G_DECLARE_FINAL_TYPE()</CODE></A> until you are sure that it makes sense for your class to be subclassed. Once a class structure has been exposed it is not possible to change its size or remove or reorder items without breaking the API and/or ABI.</P>
<DIV class=refsect3><A name=G-DECLARE-FINAL-TYPE.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>ModuleObjName</P></TD>
<TD class=parameter_description>
<P>The name of the new type, in camel case (like GtkWidget)</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>module_obj_name</P></TD>
<TD class=parameter_description>
<P>The name of the new type in lowercase, with words separated by '_' (like 'gtk_widget')</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>MODULE</P></TD>
<TD class=parameter_description>
<P>The name of the module, in all caps (like 'GTK')</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>OBJ_NAME</P></TD>
<TD class=parameter_description>
<P>The bare name of the type, in all caps (like 'WIDGET')</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>ParentName</P></TD>
<TD class=parameter_description>
<P>the name of the parent type, in camel case (like GtkWidget)</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-44.html#api-index-2.44">2.44</A></P></DIV>
<HR>

<DIV class=refsect2><A name=G-DECLARE-DERIVABLE-TYPE:CAPS></A>
<H3>G_DECLARE_DERIVABLE_TYPE()</H3><PRE class=programlisting>#define             G_DECLARE_DERIVABLE_TYPE(ModuleObjName, module_obj_name, MODULE, OBJ_NAME, ParentName)</PRE>
<P>A convenience macro for emitting the usual declarations in the header file for a type which will is intended to be subclassed.</P>
<P>You might use it in a header as follows:</P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc ppc">#ifndef _gtk_frobber_h_</SPAN>
<SPAN class="gtkdoc ppc">#define _gtk_frobber_h_</SPAN>

<SPAN class="gtkdoc ppc">#define GTK_TYPE_FROBBER gtk_frobber_get_type ()</SPAN>
GDK_AVAILABLE_IN_3_12
<SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DECLARE-DERIVABLE-TYPE:CAPS">G_DECLARE_DERIVABLE_TYPE</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>GtkFrobber<SPAN class="gtkdoc opt">,</SPAN> gtk_frobber<SPAN class="gtkdoc opt">,</SPAN> GTK<SPAN class="gtkdoc opt">,</SPAN> FROBBER<SPAN class="gtkdoc opt">,</SPAN> GtkWidget<SPAN class="gtkdoc opt">)</SPAN>

<SPAN class="gtkdoc kwb">struct</SPAN> _GtkFrobberClass
<SPAN class="gtkdoc opt">{</SPAN>
  GtkWidgetClass parent_class<SPAN class="gtkdoc opt">;</SPAN>

  <SPAN class="gtkdoc kwb">void</SPAN> <SPAN class="gtkdoc opt">(*</SPAN> handle_frob<SPAN class="gtkdoc opt">)  (</SPAN>GtkFrobber <SPAN class="gtkdoc opt">*</SPAN>frobber<SPAN class="gtkdoc opt">,</SPAN>
                         guint       n_frobs<SPAN class="gtkdoc opt">);</SPAN>

  gpointer padding<SPAN class="gtkdoc opt">[</SPAN><SPAN class=number>12</SPAN><SPAN class="gtkdoc opt">];</SPAN>
<SPAN class="gtkdoc opt">};</SPAN>

GtkWidget <SPAN class="gtkdoc opt">*</SPAN>    <SPAN class=function>gtk_frobber_new</SPAN>   <SPAN class="gtkdoc opt">(</SPAN><SPAN class="gtkdoc kwb">void</SPAN><SPAN class="gtkdoc opt">);</SPAN>

<SPAN class="gtkdoc opt">...</SPAN>

<SPAN class="gtkdoc ppc">#endif</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<P>This results in the following things happening:</P>
<DIV class=itemizedlist>
<UL class=itemizedlist style="LIST-STYLE-TYPE: disc">
<LI class=listitem>
<P>the usual <CODE class=function>gtk_frobber_get_type()</CODE> function is declared with a return type of <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A></P></LI>
<LI class=listitem>
<P>the GtkFrobber struct is created with GtkWidget as the first and only item. You are expected to use a private structure from your .c file to store your instance variables.</P></LI>
<LI class=listitem>
<P>the GtkFrobberClass type is defined as a typedef to struct _GtkFrobberClass, which is left undefined. You should do this from the header file directly after you use the macro.</P></LI>
<LI class=listitem>
<P>the <CODE class=function>GTK_FROBBER()</CODE> and <CODE class=function>GTK_FROBBER_CLASS()</CODE> casts are emitted as static inline functions along with the <CODE class=function>GTK_IS_FROBBER()</CODE> and <CODE class=function>GTK_IS_FROBBER_CLASS()</CODE> type checking functions and <CODE class=function>GTK_FROBBER_GET_CLASS()</CODE> function.</P></LI>
<LI class=listitem>
<P>g_autoptr() support being added for your type, based on the type of your parent class</P></LI></UL></DIV>
<P>You can only use this function if your parent type also supports <A href="https://developer.gnome.org/gobject/glib-Miscellaneous-Macros.html#g-autoptr"><CODE class=function>g_autoptr()</CODE></A>.</P>
<P>Because the type macro (GTK_TYPE_FROBBER in the above example) is not a callable, you must continue to manually define this as a macro for yourself.</P>
<P>The declaration of the <CODE class=function>_get_type()</CODE> function is the first thing emitted by the macro. This allows this macro to be used in the usual way with export control and API versioning macros.</P>
<P>If you are writing a library, it is important to note that it is possible to convert a type from using <A title=G_DECLARE_FINAL_TYPE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DECLARE-FINAL-TYPE:CAPS"><CODE class=function>G_DECLARE_FINAL_TYPE()</CODE></A> to <A title=G_DECLARE_DERIVABLE_TYPE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DECLARE-DERIVABLE-TYPE:CAPS"><CODE class=function>G_DECLARE_DERIVABLE_TYPE()</CODE></A> without breaking API or ABI. As a precaution, you should therefore use <A title=G_DECLARE_FINAL_TYPE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DECLARE-FINAL-TYPE:CAPS"><CODE class=function>G_DECLARE_FINAL_TYPE()</CODE></A> until you are sure that it makes sense for your class to be subclassed. Once a class structure has been exposed it is not possible to change its size or remove or reorder items without breaking the API and/or ABI. If you want to declare your own class structure, use <A title=G_DECLARE_DERIVABLE_TYPE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DECLARE-DERIVABLE-TYPE:CAPS"><CODE class=function>G_DECLARE_DERIVABLE_TYPE()</CODE></A>. If you want to declare a class without exposing the class or instance structures, use <A title=G_DECLARE_FINAL_TYPE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DECLARE-FINAL-TYPE:CAPS"><CODE class=function>G_DECLARE_FINAL_TYPE()</CODE></A>.</P>
<P>If you must use <A title=G_DECLARE_DERIVABLE_TYPE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DECLARE-DERIVABLE-TYPE:CAPS"><CODE class=function>G_DECLARE_DERIVABLE_TYPE()</CODE></A> you should be sure to include some padding at the bottom of your class structure to leave space for the addition of future virtual functions.</P>
<DIV class=refsect3><A name=G-DECLARE-DERIVABLE-TYPE.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>ModuleObjName</P></TD>
<TD class=parameter_description>
<P>The name of the new type, in camel case (like GtkWidget)</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>module_obj_name</P></TD>
<TD class=parameter_description>
<P>The name of the new type in lowercase, with words separated by '_' (like 'gtk_widget')</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>MODULE</P></TD>
<TD class=parameter_description>
<P>The name of the module, in all caps (like 'GTK')</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>OBJ_NAME</P></TD>
<TD class=parameter_description>
<P>The bare name of the type, in all caps (like 'WIDGET')</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>ParentName</P></TD>
<TD class=parameter_description>
<P>the name of the parent type, in camel case (like GtkWidget)</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-44.html#api-index-2.44">2.44</A></P></DIV>
<HR>

<DIV class=refsect2><A name=G-DECLARE-INTERFACE:CAPS></A>
<H3>G_DECLARE_INTERFACE()</H3><PRE class=programlisting>#define             G_DECLARE_INTERFACE(ModuleObjName, module_obj_name, MODULE, OBJ_NAME, PrerequisiteName)</PRE>
<P>A convenience macro for emitting the usual declarations in the header file for a GInterface type.</P>
<P>You might use it in a header as follows:</P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc ppc">#ifndef _my_model_h_</SPAN>
<SPAN class="gtkdoc ppc">#define _my_model_h_</SPAN>

<SPAN class="gtkdoc ppc">#define MY_TYPE_MODEL my_model_get_type ()</SPAN>
GDK_AVAILABLE_IN_3_12
<SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DECLARE-INTERFACE:CAPS">G_DECLARE_INTERFACE</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>MyModel<SPAN class="gtkdoc opt">,</SPAN> my_model<SPAN class="gtkdoc opt">,</SPAN> MY<SPAN class="gtkdoc opt">,</SPAN> MODEL<SPAN class="gtkdoc opt">,</SPAN> GObject<SPAN class="gtkdoc opt">)</SPAN>

<SPAN class="gtkdoc kwb">struct</SPAN> _MyModelInterface
<SPAN class="gtkdoc opt">{</SPAN>
  GTypeInterface g_iface<SPAN class="gtkdoc opt">;</SPAN>

  <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer">gpointer</A></SPAN> <SPAN class="gtkdoc opt">(*</SPAN> get_item<SPAN class="gtkdoc opt">)  (</SPAN>MyModel <SPAN class="gtkdoc opt">*</SPAN>model<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc opt">};</SPAN>

gpointer <SPAN class=function>my_model_get_item</SPAN> <SPAN class="gtkdoc opt">(</SPAN>MyModel <SPAN class="gtkdoc opt">*</SPAN>model<SPAN class="gtkdoc opt">);</SPAN>

<SPAN class="gtkdoc opt">...</SPAN>

<SPAN class="gtkdoc ppc">#endif</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<P>This results in the following things happening:</P>
<DIV class=itemizedlist>
<UL class=itemizedlist style="LIST-STYLE-TYPE: disc">
<LI class=listitem>
<P>the usual <CODE class=function>my_model_get_type()</CODE> function is declared with a return type of <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A></P></LI>
<LI class=listitem>
<P>the MyModelInterface type is defined as a typedef to struct _MyModelInterface, which is left undefined. You should do this from the header file directly after you use the macro.</P></LI>
<LI class=listitem>
<P>the <CODE class=function>MY_MODEL()</CODE> cast is emitted as static inline functions along with the <CODE class=function>MY_IS_MODEL()</CODE> type checking function and <CODE class=function>MY_MODEL_GET_IFACE()</CODE> function.</P></LI>
<LI class=listitem>
<P>g_autoptr() support being added for your type, based on your prerequisite type.</P></LI></UL></DIV>
<P>You can only use this function if your prerequisite type also supports <A href="https://developer.gnome.org/gobject/glib-Miscellaneous-Macros.html#g-autoptr"><CODE class=function>g_autoptr()</CODE></A>.</P>
<P>Because the type macro (MY_TYPE_MODEL in the above example) is not a callable, you must continue to manually define this as a macro for yourself.</P>
<P>The declaration of the <CODE class=function>_get_type()</CODE> function is the first thing emitted by the macro. This allows this macro to be used in the usual way with export control and API versioning macros.</P>
<DIV class=refsect3><A name=G-DECLARE-INTERFACE.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>ModuleObjName</P></TD>
<TD class=parameter_description>
<P>The name of the new type, in camel case (like GtkWidget)</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>module_obj_name</P></TD>
<TD class=parameter_description>
<P>The name of the new type in lowercase, with words separated by '_' (like 'gtk_widget')</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>MODULE</P></TD>
<TD class=parameter_description>
<P>The name of the module, in all caps (like 'GTK')</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>OBJ_NAME</P></TD>
<TD class=parameter_description>
<P>The bare name of the type, in all caps (like 'WIDGET')</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>PrerequisiteName</P></TD>
<TD class=parameter_description>
<P>the name of the prerequisite type, in camel case (like GtkWidget)</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-44.html#api-index-2.44">2.44</A></P></DIV>
<HR>

<DIV class=refsect2><A name=G-DEFINE-TYPE:CAPS></A>
<H3>G_DEFINE_TYPE()</H3><PRE class=programlisting>#define G_DEFINE_TYPE(TN, t_n, T_P)			    G_DEFINE_TYPE_EXTENDED (TN, t_n, T_P, 0, {})
</PRE>
<P>A convenience macro for type implementations, which declares a class initialization function, an instance initialization function (see <A title="struct GTypeInfo" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInfo"><SPAN class=type>GTypeInfo</SPAN></A> for information about these) and a static variable named <CODE class=literal>t_n_parent_class</CODE> pointing to the parent class. Furthermore, it defines a *_get_type() function. See <A title=G_DEFINE_TYPE_EXTENDED() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE-EXTENDED:CAPS"><CODE class=function>G_DEFINE_TYPE_EXTENDED()</CODE></A> for an example.</P>
<DIV class=refsect3><A name=G-DEFINE-TYPE.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>TN</P></TD>
<TD class=parameter_description>
<P>The name of the new type, in Camel case.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>t_n</P></TD>
<TD class=parameter_description>
<P>The name of the new type, in lowercase, with words separated by '_'.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>T_P</P></TD>
<TD class=parameter_description>
<P>The <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> of the parent type.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-4.html#api-index-2.4">2.4</A></P></DIV>
<HR>

<DIV class=refsect2><A name=G-DEFINE-TYPE-WITH-PRIVATE:CAPS></A>
<H3>G_DEFINE_TYPE_WITH_PRIVATE()</H3><PRE class=programlisting>#define G_DEFINE_TYPE_WITH_PRIVATE(TN, t_n, T_P)            G_DEFINE_TYPE_EXTENDED (TN, t_n, T_P, 0, G_ADD_PRIVATE (TN))
</PRE>
<P>A convenience macro for type implementations, which declares a class initialization function, an instance initialization function (see <A title="struct GTypeInfo" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInfo"><SPAN class=type>GTypeInfo</SPAN></A> for information about these), a static variable named <CODE class=literal>t_n_parent_class</CODE> pointing to the parent class, and adds private instance data to the type. Furthermore, it defines a *_get_type() function. See <A title=G_DEFINE_TYPE_EXTENDED() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE-EXTENDED:CAPS"><CODE class=function>G_DEFINE_TYPE_EXTENDED()</CODE></A> for an example.</P>
<P>Note that private structs added with this macros must have a struct name of the form <EM class=parameter><CODE>TN</CODE></EM> Private.</P>
<DIV class=refsect3><A name=G-DEFINE-TYPE-WITH-PRIVATE.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>TN</P></TD>
<TD class=parameter_description>
<P>The name of the new type, in Camel case.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>t_n</P></TD>
<TD class=parameter_description>
<P>The name of the new type, in lowercase, with words separated by '_'.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>T_P</P></TD>
<TD class=parameter_description>
<P>The <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> of the parent type.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-38.html#api-index-2.38">2.38</A></P></DIV>
<HR>

<DIV class=refsect2><A name=G-DEFINE-TYPE-WITH-CODE:CAPS></A>
<H3>G_DEFINE_TYPE_WITH_CODE()</H3><PRE class=programlisting>#define G_DEFINE_TYPE_WITH_CODE(TN, t_n, T_P, _C_)	    _G_DEFINE_TYPE_EXTENDED_BEGIN (TN, t_n, T_P, 0) {_C_;} _G_DEFINE_TYPE_EXTENDED_END()
</PRE>
<P>A convenience macro for type implementations. Similar to <A title=G_DEFINE_TYPE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE:CAPS"><CODE class=function>G_DEFINE_TYPE()</CODE></A>, but allows you to insert custom code into the *_get_type() function, e.g. interface implementations via <A title=G_IMPLEMENT_INTERFACE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-IMPLEMENT-INTERFACE:CAPS"><CODE class=function>G_IMPLEMENT_INTERFACE()</CODE></A>. See <A title=G_DEFINE_TYPE_EXTENDED() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE-EXTENDED:CAPS"><CODE class=function>G_DEFINE_TYPE_EXTENDED()</CODE></A> for an example.</P>
<DIV class=refsect3><A name=G-DEFINE-TYPE-WITH-CODE.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>TN</P></TD>
<TD class=parameter_description>
<P>The name of the new type, in Camel case.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>t_n</P></TD>
<TD class=parameter_description>
<P>The name of the new type in lowercase, with words separated by '_'.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>T_P</P></TD>
<TD class=parameter_description>
<P>The <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> of the parent type.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>_C_</P></TD>
<TD class=parameter_description>
<P>Custom code that gets inserted in the *_get_type() function.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-4.html#api-index-2.4">2.4</A></P></DIV>
<HR>

<DIV class=refsect2><A name=G-DEFINE-ABSTRACT-TYPE:CAPS></A>
<H3>G_DEFINE_ABSTRACT_TYPE()</H3><PRE class=programlisting>#define G_DEFINE_ABSTRACT_TYPE(TN, t_n, T_P)		    G_DEFINE_TYPE_EXTENDED (TN, t_n, T_P, G_TYPE_FLAG_ABSTRACT, {})
</PRE>
<P>A convenience macro for type implementations. Similar to <A title=G_DEFINE_TYPE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE:CAPS"><CODE class=function>G_DEFINE_TYPE()</CODE></A>, but defines an abstract type. See <A title=G_DEFINE_TYPE_EXTENDED() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE-EXTENDED:CAPS"><CODE class=function>G_DEFINE_TYPE_EXTENDED()</CODE></A> for an example.</P>
<DIV class=refsect3><A name=G-DEFINE-ABSTRACT-TYPE.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>TN</P></TD>
<TD class=parameter_description>
<P>The name of the new type, in Camel case.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>t_n</P></TD>
<TD class=parameter_description>
<P>The name of the new type, in lowercase, with words separated by '_'.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>T_P</P></TD>
<TD class=parameter_description>
<P>The <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> of the parent type.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-4.html#api-index-2.4">2.4</A></P></DIV>
<HR>

<DIV class=refsect2><A name=G-DEFINE-ABSTRACT-TYPE-WITH-PRIVATE:CAPS></A>
<H3>G_DEFINE_ABSTRACT_TYPE_WITH_PRIVATE()</H3><PRE class=programlisting>#define G_DEFINE_ABSTRACT_TYPE_WITH_PRIVATE(TN, t_n, T_P)   G_DEFINE_TYPE_EXTENDED (TN, t_n, T_P, G_TYPE_FLAG_ABSTRACT, G_ADD_PRIVATE (TN))
</PRE>
<P>Similar to <A title=G_DEFINE_TYPE_WITH_PRIVATE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE-WITH-PRIVATE:CAPS"><CODE class=function>G_DEFINE_TYPE_WITH_PRIVATE()</CODE></A>, but defines an abstract type. See <A title=G_DEFINE_TYPE_EXTENDED() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE-EXTENDED:CAPS"><CODE class=function>G_DEFINE_TYPE_EXTENDED()</CODE></A> for an example.</P>
<DIV class=refsect3><A name=G-DEFINE-ABSTRACT-TYPE-WITH-PRIVATE.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>TN</P></TD>
<TD class=parameter_description>
<P>The name of the new type, in Camel case.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>t_n</P></TD>
<TD class=parameter_description>
<P>The name of the new type, in lowercase, with words separated by '_'.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>T_P</P></TD>
<TD class=parameter_description>
<P>The <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> of the parent type.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-38.html#api-index-2.38">2.38</A></P></DIV>
<HR>

<DIV class=refsect2><A name=G-DEFINE-ABSTRACT-TYPE-WITH-CODE:CAPS></A>
<H3>G_DEFINE_ABSTRACT_TYPE_WITH_CODE()</H3><PRE class=programlisting>#define G_DEFINE_ABSTRACT_TYPE_WITH_CODE(TN, t_n, T_P, _C_) _G_DEFINE_TYPE_EXTENDED_BEGIN (TN, t_n, T_P, G_TYPE_FLAG_ABSTRACT) {_C_;} _G_DEFINE_TYPE_EXTENDED_END()
</PRE>
<P>A convenience macro for type implementations. Similar to <A title=G_DEFINE_TYPE_WITH_CODE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE-WITH-CODE:CAPS"><CODE class=function>G_DEFINE_TYPE_WITH_CODE()</CODE></A>, but defines an abstract type and allows you to insert custom code into the *_get_type() function, e.g. interface implementations via <A title=G_IMPLEMENT_INTERFACE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-IMPLEMENT-INTERFACE:CAPS"><CODE class=function>G_IMPLEMENT_INTERFACE()</CODE></A>. See <A title=G_DEFINE_TYPE_EXTENDED() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE-EXTENDED:CAPS"><CODE class=function>G_DEFINE_TYPE_EXTENDED()</CODE></A> for an example.</P>
<DIV class=refsect3><A name=G-DEFINE-ABSTRACT-TYPE-WITH-CODE.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>TN</P></TD>
<TD class=parameter_description>
<P>The name of the new type, in Camel case.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>t_n</P></TD>
<TD class=parameter_description>
<P>The name of the new type, in lowercase, with words separated by '_'.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>T_P</P></TD>
<TD class=parameter_description>
<P>The <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> of the parent type.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>_C_</P></TD>
<TD class=parameter_description>
<P>Custom code that gets inserted in the <EM class=parameter><CODE><CODE class=function>type_name_get_type()</CODE></CODE></EM> function.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-4.html#api-index-2.4">2.4</A></P></DIV>
<HR>

<DIV class=refsect2><A name=G-ADD-PRIVATE:CAPS></A>
<H3>G_ADD_PRIVATE()</H3><PRE class=programlisting>#define             G_ADD_PRIVATE(TypeName)</PRE>
<P>A convenience macro to ease adding private data to instances of a new type in the <EM class=parameter><CODE>_C_</CODE></EM> section of <A title=G_DEFINE_TYPE_WITH_CODE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE-WITH-CODE:CAPS"><CODE class=function>G_DEFINE_TYPE_WITH_CODE()</CODE></A> or <A title=G_DEFINE_ABSTRACT_TYPE_WITH_CODE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-ABSTRACT-TYPE-WITH-CODE:CAPS"><CODE class=function>G_DEFINE_ABSTRACT_TYPE_WITH_CODE()</CODE></A>.</P>
<P>For instance:</P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc kwc">typedef</SPAN> <SPAN class="gtkdoc kwb">struct</SPAN> _MyObject MyObject<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc kwc">typedef</SPAN> <SPAN class="gtkdoc kwb">struct</SPAN> _MyObjectClass MyObjectClass<SPAN class="gtkdoc opt">;</SPAN>

<SPAN class="gtkdoc kwc">typedef</SPAN> <SPAN class="gtkdoc kwb">struct</SPAN> <SPAN class="gtkdoc opt">{</SPAN>
  gint foo<SPAN class="gtkdoc opt">;</SPAN>
  gint bar<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc opt">}</SPAN> MyObjectPrivate<SPAN class="gtkdoc opt">;</SPAN>

<SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE-WITH-CODE:CAPS">G_DEFINE_TYPE_WITH_CODE</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>MyObject<SPAN class="gtkdoc opt">,</SPAN> my_object<SPAN class="gtkdoc opt">,</SPAN> G_TYPE_OBJECT<SPAN class="gtkdoc opt">,</SPAN>
                         <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-ADD-PRIVATE:CAPS">G_ADD_PRIVATE</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>MyObject<SPAN class="gtkdoc opt">))</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<P>Will add MyObjectPrivate as the private data to any instance of the MyObject type.</P>
<P>G_DEFINE_TYPE_* macros will automatically create a private function based on the arguments to this macro, which can be used to safely retrieve the private data from an instance of the type; for instance:</P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting>gint
<SPAN class=function>my_object_get_foo</SPAN> <SPAN class="gtkdoc opt">(</SPAN>MyObject <SPAN class="gtkdoc opt">*</SPAN>obj<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  MyObjectPrivate <SPAN class="gtkdoc opt">*</SPAN>priv <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function>my_object_get_instance_private</SPAN> <SPAN class="gtkdoc opt">(</SPAN>obj<SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Warnings-and-Assertions.html#g-return-val-if-fail">g_return_val_if_fail</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=function>MY_IS_OBJECT</SPAN> <SPAN class="gtkdoc opt">(</SPAN>obj<SPAN class="gtkdoc opt">),</SPAN> <SPAN class=number>0</SPAN><SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=keyword>return</SPAN> priv<SPAN class="gtkdoc opt">-&gt;</SPAN>foo<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

<SPAN class="gtkdoc kwb">void</SPAN>
<SPAN class=function>my_object_set_bar</SPAN> <SPAN class="gtkdoc opt">(</SPAN>MyObject <SPAN class="gtkdoc opt">*</SPAN>obj<SPAN class="gtkdoc opt">,</SPAN>
                   gint      bar<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  MyObjectPrivate <SPAN class="gtkdoc opt">*</SPAN>priv <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function>my_object_get_instance_private</SPAN> <SPAN class="gtkdoc opt">(</SPAN>obj<SPAN class="gtkdoc opt">);</SPAN>

  <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Warnings-and-Assertions.html#g-return-if-fail">g_return_if_fail</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=function>MY_IS_OBJECT</SPAN> <SPAN class="gtkdoc opt">(</SPAN>obj<SPAN class="gtkdoc opt">));</SPAN>

  <SPAN class=keyword>if</SPAN> <SPAN class="gtkdoc opt">(</SPAN>priv<SPAN class="gtkdoc opt">-&gt;</SPAN>bar <SPAN class="gtkdoc opt">!=</SPAN> bar<SPAN class="gtkdoc opt">)</SPAN>
    priv<SPAN class="gtkdoc opt">-&gt;</SPAN>bar <SPAN class="gtkdoc opt">=</SPAN> bar<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<P>Note that this macro can only be used together with the G_DEFINE_TYPE_* macros, since it depends on variable names from those macros.</P>
<P>Also note that private structs added with these macros must have a struct name of the form <CODE class=literal>TypeNamePrivate</CODE>.</P>
<P>It is safe to call _get_instance_private on <A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> or invalid object since it's only adding an offset to the instance pointer. In that case the returned pointer must not be dereferenced.</P>
<DIV class=refsect3><A name=G-ADD-PRIVATE.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>TypeName</P></TD>
<TD class=parameter_description>
<P>the name of the type in CamelCase</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-38.html#api-index-2.38">2.38</A></P></DIV>
<HR>

<DIV class=refsect2><A name=G-PRIVATE-OFFSET:CAPS></A>
<H3>G_PRIVATE_OFFSET()</H3><PRE class=programlisting>#define             G_PRIVATE_OFFSET(TypeName, field)</PRE>
<P>Evaluates to the offset of the <EM class=parameter><CODE>field</CODE></EM> inside the instance private data structure for <EM class=parameter><CODE>TypeName</CODE></EM> .</P>
<P>Note that this macro can only be used together with the G_DEFINE_TYPE_* and <A title=G_ADD_PRIVATE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-ADD-PRIVATE:CAPS"><CODE class=function>G_ADD_PRIVATE()</CODE></A> macros, since it depends on variable names from those macros.</P>
<DIV class=refsect3><A name=G-PRIVATE-OFFSET.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>TypeName</P></TD>
<TD class=parameter_description>
<P>the name of the type in CamelCase</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>field</P></TD>
<TD class=parameter_description>
<P>the name of the field in the private data structure</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-38.html#api-index-2.38">2.38</A></P></DIV>
<HR>

<DIV class=refsect2><A name=G-PRIVATE-FIELD:CAPS></A>
<H3>G_PRIVATE_FIELD()</H3><PRE class=programlisting>#define             G_PRIVATE_FIELD(TypeName, inst, field_type, field_name)</PRE>
<P>Evaluates to the <EM class=parameter><CODE>field_name</CODE></EM> inside the <EM class=parameter><CODE>inst</CODE></EM> private data structure for <EM class=parameter><CODE>TypeName</CODE></EM> .</P>
<P>Note that this macro can only be used together with the G_DEFINE_TYPE_* and <A title=G_ADD_PRIVATE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-ADD-PRIVATE:CAPS"><CODE class=function>G_ADD_PRIVATE()</CODE></A> macros, since it depends on variable names from those macros.</P>
<DIV class=refsect3><A name=G-PRIVATE-FIELD.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>TypeName</P></TD>
<TD class=parameter_description>
<P>the name of the type in CamelCase</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>inst</P></TD>
<TD class=parameter_description>
<P>the instance of <EM class=parameter><CODE>TypeName</CODE></EM> you wish to access</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>field_type</P></TD>
<TD class=parameter_description>
<P>the type of the field in the private data structure</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>field_name</P></TD>
<TD class=parameter_description>
<P>the name of the field in the private data structure</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-38.html#api-index-2.38">2.38</A></P></DIV>
<HR>

<DIV class=refsect2><A name=G-PRIVATE-FIELD-P:CAPS></A>
<H3>G_PRIVATE_FIELD_P()</H3><PRE class=programlisting>#define             G_PRIVATE_FIELD_P(TypeName, inst, field_name)</PRE>
<P>Evaluates to a pointer to the <EM class=parameter><CODE>field_name</CODE></EM> inside the <EM class=parameter><CODE>inst</CODE></EM> private data structure for <EM class=parameter><CODE>TypeName</CODE></EM> .</P>
<P>Note that this macro can only be used together with the G_DEFINE_TYPE_* and <A title=G_ADD_PRIVATE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-ADD-PRIVATE:CAPS"><CODE class=function>G_ADD_PRIVATE()</CODE></A> macros, since it depends on variable names from those macros.</P>
<DIV class=refsect3><A name=G-PRIVATE-FIELD-P.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>TypeName</P></TD>
<TD class=parameter_description>
<P>the name of the type in CamelCase</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>inst</P></TD>
<TD class=parameter_description>
<P>the instance of <EM class=parameter><CODE>TypeName</CODE></EM> you wish to access</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>field_name</P></TD>
<TD class=parameter_description>
<P>the name of the field in the private data structure</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-38.html#api-index-2.38">2.38</A></P></DIV>
<HR>

<DIV class=refsect2><A name=G-DEFINE-INTERFACE:CAPS></A>
<H3>G_DEFINE_INTERFACE()</H3><PRE class=programlisting>#define G_DEFINE_INTERFACE(TN, t_n, T_P)		    G_DEFINE_INTERFACE_WITH_CODE(TN, t_n, T_P, ;)
</PRE>
<P>A convenience macro for <A title="struct GTypeInterface" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInterface"><SPAN class=type>GTypeInterface</SPAN></A> definitions, which declares a default vtable initialization function and defines a *_get_type() function.</P>
<P>The macro expects the interface initialization function to have the name <CODE class=literal>t_n ## _default_init</CODE>, and the interface structure to have the name <CODE class=literal>TN ## Interface</CODE>.</P>
<DIV class=refsect3><A name=G-DEFINE-INTERFACE.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>TN</P></TD>
<TD class=parameter_description>
<P>The name of the new type, in Camel case.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>t_n</P></TD>
<TD class=parameter_description>
<P>The name of the new type, in lowercase, with words separated by '_'.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>T_P</P></TD>
<TD class=parameter_description>
<P>The <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> of the prerequisite type for the interface, or 0 (<A title=G_TYPE_INVALID class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-INVALID:CAPS"><CODE class=literal>G_TYPE_INVALID</CODE></A>) for no prerequisite type.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-24.html#api-index-2.24">2.24</A></P></DIV>
<HR>

<DIV class=refsect2><A name=G-DEFINE-INTERFACE-WITH-CODE:CAPS></A>
<H3>G_DEFINE_INTERFACE_WITH_CODE()</H3><PRE class=programlisting>#define G_DEFINE_INTERFACE_WITH_CODE(TN, t_n, T_P, _C_)     _G_DEFINE_INTERFACE_EXTENDED_BEGIN(TN, t_n, T_P) {_C_;} _G_DEFINE_INTERFACE_EXTENDED_END()
</PRE>
<P>A convenience macro for <A title="struct GTypeInterface" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInterface"><SPAN class=type>GTypeInterface</SPAN></A> definitions. Similar to <A title=G_DEFINE_INTERFACE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-INTERFACE:CAPS"><CODE class=function>G_DEFINE_INTERFACE()</CODE></A>, but allows you to insert custom code into the *_get_type() function, e.g. additional interface implementations via <A title=G_IMPLEMENT_INTERFACE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-IMPLEMENT-INTERFACE:CAPS"><CODE class=function>G_IMPLEMENT_INTERFACE()</CODE></A>, or additional prerequisite types. See <A title=G_DEFINE_TYPE_EXTENDED() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE-EXTENDED:CAPS"><CODE class=function>G_DEFINE_TYPE_EXTENDED()</CODE></A> for a similar example using <A title=G_DEFINE_TYPE_WITH_CODE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE-WITH-CODE:CAPS"><CODE class=function>G_DEFINE_TYPE_WITH_CODE()</CODE></A>.</P>
<DIV class=refsect3><A name=G-DEFINE-INTERFACE-WITH-CODE.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>TN</P></TD>
<TD class=parameter_description>
<P>The name of the new type, in Camel case.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>t_n</P></TD>
<TD class=parameter_description>
<P>The name of the new type, in lowercase, with words separated by '_'.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>T_P</P></TD>
<TD class=parameter_description>
<P>The <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> of the prerequisite type for the interface, or 0 (<A title=G_TYPE_INVALID class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-INVALID:CAPS"><CODE class=literal>G_TYPE_INVALID</CODE></A>) for no prerequisite type.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>_C_</P></TD>
<TD class=parameter_description>
<P>Custom code that gets inserted in the *_get_type() function.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-24.html#api-index-2.24">2.24</A></P></DIV>
<HR>

<DIV class=refsect2><A name=G-IMPLEMENT-INTERFACE:CAPS></A>
<H3>G_IMPLEMENT_INTERFACE()</H3><PRE class=programlisting>#define             G_IMPLEMENT_INTERFACE(TYPE_IFACE, iface_init)</PRE>
<P>A convenience macro to ease interface addition in the <CODE class=literal>_C_</CODE> section of <A title=G_DEFINE_TYPE_WITH_CODE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE-WITH-CODE:CAPS"><CODE class=function>G_DEFINE_TYPE_WITH_CODE()</CODE></A> or <A title=G_DEFINE_ABSTRACT_TYPE_WITH_CODE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-ABSTRACT-TYPE-WITH-CODE:CAPS"><CODE class=function>G_DEFINE_ABSTRACT_TYPE_WITH_CODE()</CODE></A>. See <A title=G_DEFINE_TYPE_EXTENDED() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE-EXTENDED:CAPS"><CODE class=function>G_DEFINE_TYPE_EXTENDED()</CODE></A> for an example.</P>
<P>Note that this macro can only be used together with the G_DEFINE_TYPE_* macros, since it depends on variable names from those macros.</P>
<DIV class=refsect3><A name=G-IMPLEMENT-INTERFACE.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>TYPE_IFACE</P></TD>
<TD class=parameter_description>
<P>The <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> of the interface to add</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>iface_init</P></TD>
<TD class=parameter_description>
<P>The interface init function</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-4.html#api-index-2.4">2.4</A></P></DIV>
<HR>

<DIV class=refsect2><A name=G-DEFINE-TYPE-EXTENDED:CAPS></A>
<H3>G_DEFINE_TYPE_EXTENDED()</H3><PRE class=programlisting>#define G_DEFINE_TYPE_EXTENDED(TN, t_n, T_P, _f_, _C_)	    _G_DEFINE_TYPE_EXTENDED_BEGIN (TN, t_n, T_P, _f_) {_C_;} _G_DEFINE_TYPE_EXTENDED_END()
</PRE>
<P>The most general convenience macro for type implementations, on which <A title=G_DEFINE_TYPE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE:CAPS"><CODE class=function>G_DEFINE_TYPE()</CODE></A>, etc are based.</P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE-EXTENDED:CAPS">G_DEFINE_TYPE_EXTENDED</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>GtkGadget<SPAN class="gtkdoc opt">,</SPAN>
                        gtk_gadget<SPAN class="gtkdoc opt">,</SPAN>
                        GTK_TYPE_WIDGET<SPAN class="gtkdoc opt">,</SPAN>
                        <SPAN class=number>0</SPAN><SPAN class="gtkdoc opt">,</SPAN>
                        <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-IMPLEMENT-INTERFACE:CAPS">G_IMPLEMENT_INTERFACE</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>TYPE_GIZMO<SPAN class="gtkdoc opt">,</SPAN>
                                               gtk_gadget_gizmo_init<SPAN class="gtkdoc opt">));</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P>expands to</P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc kwb">static void</SPAN>     <SPAN class=function>gtk_gadget_init</SPAN>       <SPAN class="gtkdoc opt">(</SPAN>GtkGadget      <SPAN class="gtkdoc opt">*</SPAN>self<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc kwb">static void</SPAN>     <SPAN class=function>gtk_gadget_class_init</SPAN> <SPAN class="gtkdoc opt">(</SPAN>GtkGadgetClass <SPAN class="gtkdoc opt">*</SPAN>klass<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc kwb">static</SPAN> gpointer gtk_gadget_parent_class <SPAN class="gtkdoc opt">=</SPAN> NULL<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc kwb">static void</SPAN>     <SPAN class=function>gtk_gadget_class_intern_init</SPAN> <SPAN class="gtkdoc opt">(</SPAN>gpointer klass<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  gtk_gadget_parent_class <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-class-peek-parent">g_type_class_peek_parent</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>klass<SPAN class="gtkdoc opt">);</SPAN>
  <SPAN class=function>gtk_gadget_class_init</SPAN> <SPAN class="gtkdoc opt">((</SPAN>GtkGadgetClass<SPAN class="gtkdoc opt">*)</SPAN> klass<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>

GType
<SPAN class=function>gtk_gadget_get_type</SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class="gtkdoc kwb">void</SPAN><SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
  <SPAN class="gtkdoc kwb">static</SPAN> <SPAN class="gtkdoc kwc">volatile</SPAN> gsize g_define_type_id__volatile <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=number>0</SPAN><SPAN class="gtkdoc opt">;</SPAN>
  <SPAN class=keyword>if</SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Threads.html#g-once-init-enter">g_once_init_enter</A></SPAN> <SPAN class="gtkdoc opt">(&amp;</SPAN>g_define_type_id__volatile<SPAN class="gtkdoc opt">))</SPAN>
    <SPAN class="gtkdoc opt">{</SPAN>
      GType g_define_type_id <SPAN class="gtkdoc opt">=</SPAN>
        <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-register-static-simple">g_type_register_static_simple</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>GTK_TYPE_WIDGET<SPAN class="gtkdoc opt">,</SPAN>
                                       <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Quarks.html#g-intern-static-string">g_intern_static_string</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"GtkGadget"</SPAN><SPAN class="gtkdoc opt">),</SPAN>
                                       <SPAN class=keyword>sizeof</SPAN> <SPAN class="gtkdoc opt">(</SPAN>GtkGadgetClass<SPAN class="gtkdoc opt">),</SPAN>
                                       <SPAN class="gtkdoc opt">(</SPAN>GClassInitFunc<SPAN class="gtkdoc opt">)</SPAN> gtk_gadget_class_intern_init<SPAN class="gtkdoc opt">,</SPAN>
                                       <SPAN class=keyword>sizeof</SPAN> <SPAN class="gtkdoc opt">(</SPAN>GtkGadget<SPAN class="gtkdoc opt">),</SPAN>
                                       <SPAN class="gtkdoc opt">(</SPAN>GInstanceInitFunc<SPAN class="gtkdoc opt">)</SPAN> gtk_gadget_init<SPAN class="gtkdoc opt">,</SPAN>
                                       <SPAN class=number>0</SPAN><SPAN class="gtkdoc opt">);</SPAN>
      <SPAN class="gtkdoc opt">{</SPAN>
        <SPAN class="gtkdoc kwb">const</SPAN> GInterfaceInfo g_implement_interface_info <SPAN class="gtkdoc opt">= {</SPAN>
          <SPAN class="gtkdoc opt">(</SPAN>GInterfaceInitFunc<SPAN class="gtkdoc opt">)</SPAN> gtk_gadget_gizmo_init
        <SPAN class="gtkdoc opt">};</SPAN>
        <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-add-interface-static">g_type_add_interface_static</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>g_define_type_id<SPAN class="gtkdoc opt">,</SPAN> TYPE_GIZMO<SPAN class="gtkdoc opt">, &amp;</SPAN>g_implement_interface_info<SPAN class="gtkdoc opt">);</SPAN>
      <SPAN class="gtkdoc opt">}</SPAN>
      <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Threads.html#g-once-init-leave">g_once_init_leave</A></SPAN> <SPAN class="gtkdoc opt">(&amp;</SPAN>g_define_type_id__volatile<SPAN class="gtkdoc opt">,</SPAN> g_define_type_id<SPAN class="gtkdoc opt">);</SPAN>
    <SPAN class="gtkdoc opt">}</SPAN>
  <SPAN class=keyword>return</SPAN> g_define_type_id__volatile<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P>The only pieces which have to be manually provided are the definitions of the instance and class structure and the definitions of the instance and class init functions.</P>
<DIV class=refsect3><A name=G-DEFINE-TYPE-EXTENDED.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>TN</P></TD>
<TD class=parameter_description>
<P>The name of the new type, in Camel case.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>t_n</P></TD>
<TD class=parameter_description>
<P>The name of the new type, in lowercase, with words separated by '_'.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>T_P</P></TD>
<TD class=parameter_description>
<P>The <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> of the parent type.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>_f_</P></TD>
<TD class=parameter_description>
<P><A title="enum GTypeFlags" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeFlags"><SPAN class=type>GTypeFlags</SPAN></A> to pass to <A title=g_type_register_static&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-register-static"><CODE class=function>g_type_register_static()</CODE></A></P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>_C_</P></TD>
<TD class=parameter_description>
<P>Custom code that gets inserted in the *_get_type() function.</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-4.html#api-index-2.4">2.4</A></P></DIV>
<HR>

<DIV class=refsect2><A name=G-DEFINE-BOXED-TYPE:CAPS></A>
<H3>G_DEFINE_BOXED_TYPE()</H3><PRE class=programlisting>#define G_DEFINE_BOXED_TYPE(TypeName, type_name, copy_func, free_func) G_DEFINE_BOXED_TYPE_WITH_CODE (TypeName, type_name, copy_func, free_func, {})
</PRE>
<P>A convenience macro for boxed type implementations, which defines a <CODE class=function>type_name_get_type()</CODE> function registering the boxed type.</P>
<DIV class=refsect3><A name=G-DEFINE-BOXED-TYPE.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>TypeName</P></TD>
<TD class=parameter_description>
<P>The name of the new type, in Camel case</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>type_name</P></TD>
<TD class=parameter_description>
<P>The name of the new type, in lowercase, with words separated by '_'</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>copy_func</P></TD>
<TD class=parameter_description>
<P>the <A title=GBoxedCopyFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Boxed-Types.html#GBoxedCopyFunc"><SPAN class=type>GBoxedCopyFunc</SPAN></A> for the new type</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>free_func</P></TD>
<TD class=parameter_description>
<P>the <A title=GBoxedFreeFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Boxed-Types.html#GBoxedFreeFunc"><SPAN class=type>GBoxedFreeFunc</SPAN></A> for the new type</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-26.html#api-index-2.26">2.26</A></P></DIV>
<HR>

<DIV class=refsect2><A name=G-DEFINE-BOXED-TYPE-WITH-CODE:CAPS></A>
<H3>G_DEFINE_BOXED_TYPE_WITH_CODE()</H3><PRE class=programlisting>#define G_DEFINE_BOXED_TYPE_WITH_CODE(TypeName, type_name, copy_func, free_func, _C_) _G_DEFINE_BOXED_TYPE_BEGIN (TypeName, type_name, copy_func, free_func) {_C_;} _G_DEFINE_TYPE_EXTENDED_END()
</PRE>
<P>A convenience macro for boxed type implementations. Similar to <A title=G_DEFINE_BOXED_TYPE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-BOXED-TYPE:CAPS"><CODE class=function>G_DEFINE_BOXED_TYPE()</CODE></A>, but allows to insert custom code into the <CODE class=function>type_name_get_type()</CODE> function, e.g. to register value transformations with <A title=g_value_register_transform_func&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Generic-values.html#g-value-register-transform-func"><CODE class=function>g_value_register_transform_func()</CODE></A>, for instance:</P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-BOXED-TYPE-WITH-CODE:CAPS">G_DEFINE_BOXED_TYPE_WITH_CODE</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>GdkRectangle<SPAN class="gtkdoc opt">,</SPAN> gdk_rectangle<SPAN class="gtkdoc opt">,</SPAN>
                               gdk_rectangle_copy<SPAN class="gtkdoc opt">,</SPAN>
                               gdk_rectangle_free<SPAN class="gtkdoc opt">,</SPAN>
                               <SPAN class=function>register_rectangle_transform_funcs</SPAN> <SPAN class="gtkdoc opt">(</SPAN>g_define_type_id<SPAN class="gtkdoc opt">))</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P>
<P>Similarly to the <A title=G_DEFINE_TYPE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-TYPE:CAPS"><CODE class=literal>G_DEFINE_TYPE</CODE></A> family of macros, the <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> of the newly defined boxed type is exposed in the <CODE class=literal>g_define_type_id</CODE> variable.</P>
<DIV class=refsect3><A name=G-DEFINE-BOXED-TYPE-WITH-CODE.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>TypeName</P></TD>
<TD class=parameter_description>
<P>The name of the new type, in Camel case</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>type_name</P></TD>
<TD class=parameter_description>
<P>The name of the new type, in lowercase, with words separated by '_'</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>copy_func</P></TD>
<TD class=parameter_description>
<P>the <A title=GBoxedCopyFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Boxed-Types.html#GBoxedCopyFunc"><SPAN class=type>GBoxedCopyFunc</SPAN></A> for the new type</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>free_func</P></TD>
<TD class=parameter_description>
<P>the <A title=GBoxedFreeFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Boxed-Types.html#GBoxedFreeFunc"><SPAN class=type>GBoxedFreeFunc</SPAN></A> for the new type</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>_C_</P></TD>
<TD class=parameter_description>
<P>Custom code that gets inserted in the *_get_type() function</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-26.html#api-index-2.26">2.26</A></P></DIV>
<HR>

<DIV class=refsect2><A name=G-DEFINE-POINTER-TYPE:CAPS></A>
<H3>G_DEFINE_POINTER_TYPE()</H3><PRE class=programlisting>#define G_DEFINE_POINTER_TYPE(TypeName, type_name) G_DEFINE_POINTER_TYPE_WITH_CODE (TypeName, type_name, {})
</PRE>
<P>A convenience macro for pointer type implementations, which defines a <CODE class=function>type_name_get_type()</CODE> function registering the pointer type.</P>
<DIV class=refsect3><A name=G-DEFINE-POINTER-TYPE.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>TypeName</P></TD>
<TD class=parameter_description>
<P>The name of the new type, in Camel case</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>type_name</P></TD>
<TD class=parameter_description>
<P>The name of the new type, in lowercase, with words separated by '_'</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-26.html#api-index-2.26">2.26</A></P></DIV>
<HR>

<DIV class=refsect2><A name=G-DEFINE-POINTER-TYPE-WITH-CODE:CAPS></A>
<H3>G_DEFINE_POINTER_TYPE_WITH_CODE()</H3><PRE class=programlisting>#define G_DEFINE_POINTER_TYPE_WITH_CODE(TypeName, type_name, _C_) _G_DEFINE_POINTER_TYPE_BEGIN (TypeName, type_name) {_C_;} _G_DEFINE_TYPE_EXTENDED_END()
</PRE>
<P>A convenience macro for pointer type implementations. Similar to <A title=G_DEFINE_POINTER_TYPE() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-DEFINE-POINTER-TYPE:CAPS"><CODE class=function>G_DEFINE_POINTER_TYPE()</CODE></A>, but allows to insert custom code into the <CODE class=function>type_name_get_type()</CODE> function.</P>
<DIV class=refsect3><A name=G-DEFINE-POINTER-TYPE-WITH-CODE.parameters></A>
<H4>Parameters</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=parameters_name width=150>
<COL class=parameters_description>
<COL class=parameters_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=parameter_name>
<P>TypeName</P></TD>
<TD class=parameter_description>
<P>The name of the new type, in Camel case</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>type_name</P></TD>
<TD class=parameter_description>
<P>The name of the new type, in lowercase, with words separated by '_'</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR>
<TR>
<TD class=parameter_name>
<P>_C_</P></TD>
<TD class=parameter_description>
<P>Custom code that gets inserted in the *_get_type() function</P></TD>
<TD class=parameter_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-26.html#api-index-2.26">2.26</A></P></DIV></DIV>
<DIV class=refsect1><A name=gobject-Type-Information.other_details></A>
<H2>Types and Values</H2>
<DIV class=refsect2><A name=GType></A>
<H3>GType</H3>
<P>A numerical value which represents the unique identifier of a registered type.</P></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-FUNDAMENTAL-MAX:CAPS></A>
<H3>G_TYPE_FUNDAMENTAL_MAX</H3><PRE class=programlisting>#define&nbsp;G_TYPE_FUNDAMENTAL_MAX		(255 &lt;&lt; G_TYPE_FUNDAMENTAL_SHIFT)
</PRE>
<P>An integer constant that represents the number of identifiers reserved for types that are assigned at compile-time.</P></DIV>
<HR>

<DIV class=refsect2><A name=GTypeInterface></A>
<H3>struct GTypeInterface</H3><PRE class=programlisting>struct GTypeInterface {
};
</PRE>
<P>An opaque structure used as the base of all interface types.</P></DIV>
<HR>

<DIV class=refsect2><A name=GTypeInstance></A>
<H3>struct GTypeInstance</H3><PRE class=programlisting>struct GTypeInstance {
};
</PRE>
<P>An opaque structure used as the base of all type instances.</P></DIV>
<HR>

<DIV class=refsect2><A name=GTypeClass></A>
<H3>struct GTypeClass</H3><PRE class=programlisting>struct GTypeClass {
};
</PRE>
<P>An opaque structure used as the base of all classes.</P></DIV>
<HR>

<DIV class=refsect2><A name=GTypeInfo></A>
<H3>struct GTypeInfo</H3><PRE class=programlisting>struct GTypeInfo {
  /* interface types, classed types, instantiated types */
  guint16                class_size;
  
  GBaseInitFunc          base_init;
  GBaseFinalizeFunc      base_finalize;
  
  /* interface types, classed types, instantiated types */
  GClassInitFunc         class_init;
  GClassFinalizeFunc     class_finalize;
  gconstpointer          class_data;
  
  /* instantiated types */
  guint16                instance_size;
  guint16                n_preallocs;
  GInstanceInitFunc      instance_init;
  
  /* value handling */
  const GTypeValueTable&nbsp;*value_table;
};
</PRE>
<P>This structure is used to provide the type system with the information required to initialize and destruct (finalize) a type's class and its instances.</P>
<P>The initialized structure is passed to the <A title=g_type_register_static&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-register-static"><CODE class=function>g_type_register_static()</CODE></A> function (or is copied into the provided <A title="struct GTypeInfo" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeInfo"><SPAN class=type>GTypeInfo</SPAN></A> structure in the <A title=g_type_plugin_complete_type_info&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/GTypePlugin.html#g-type-plugin-complete-type-info"><CODE class=function>g_type_plugin_complete_type_info()</CODE></A>). The type system will perform a deep copy of this structure, so its memory does not need to be persistent across invocation of <A title=g_type_register_static&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-register-static"><CODE class=function>g_type_register_static()</CODE></A>.</P>
<DIV class=refsect3><A name=GTypeInfo.members></A>
<H4>Members</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=struct_members_name width=300>
<COL class=struct_members_description>
<COL class=struct_members_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=struct_member_name>
<P><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#guint16"><SPAN class=type>guint16</SPAN></A>&nbsp;<EM class=structfield><CODE><A name=GTypeInfo.class-size></A>class_size</CODE></EM>;</P></TD>
<TD class=struct_member_description>
<P>Size of the class structure (required for interface, classed and instantiatable types)</P></TD>
<TD class=struct_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=struct_member_name>
<P><A title=GBaseInitFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GBaseInitFunc"><SPAN class=type>GBaseInitFunc</SPAN></A>&nbsp;<EM class=structfield><CODE><A name=GTypeInfo.base-init></A>base_init</CODE></EM>;</P></TD>
<TD class=struct_member_description>
<P>Location of the base initialization function (optional)</P></TD>
<TD class=struct_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=struct_member_name>
<P><A title=GBaseFinalizeFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GBaseFinalizeFunc"><SPAN class=type>GBaseFinalizeFunc</SPAN></A>&nbsp;<EM class=structfield><CODE><A name=GTypeInfo.base-finalize></A>base_finalize</CODE></EM>;</P></TD>
<TD class=struct_member_description>
<P>Location of the base finalization function (optional)</P></TD>
<TD class=struct_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=struct_member_name>
<P><A title=GClassInitFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GClassInitFunc"><SPAN class=type>GClassInitFunc</SPAN></A>&nbsp;<EM class=structfield><CODE><A name=GTypeInfo.class-init></A>class_init</CODE></EM>;</P></TD>
<TD class=struct_member_description>
<P>Location of the class initialization function for classed and instantiatable types. Location of the default vtable inititalization function for interface types. (optional) This function is used both to fill in virtual functions in the class or default vtable, and to do type-specific setup such as registering signals and object properties.</P></TD>
<TD class=struct_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=struct_member_name>
<P><A title=GClassFinalizeFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GClassFinalizeFunc"><SPAN class=type>GClassFinalizeFunc</SPAN></A>&nbsp;<EM class=structfield><CODE><A name=GTypeInfo.class-finalize></A>class_finalize</CODE></EM>;</P></TD>
<TD class=struct_member_description>
<P>Location of the class finalization function for classed and instantiatable types. Location of the default vtable finalization function for interface types. (optional)</P></TD>
<TD class=struct_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=struct_member_name>
<P><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gconstpointer"><SPAN class=type>gconstpointer</SPAN></A>&nbsp;<EM class=structfield><CODE><A name=GTypeInfo.class-data></A>class_data</CODE></EM>;</P></TD>
<TD class=struct_member_description>
<P>User-supplied data passed to the class init/finalize functions</P></TD>
<TD class=struct_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=struct_member_name>
<P><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#guint16"><SPAN class=type>guint16</SPAN></A>&nbsp;<EM class=structfield><CODE><A name=GTypeInfo.instance-size></A>instance_size</CODE></EM>;</P></TD>
<TD class=struct_member_description>
<P>Size of the instance (object) structure (required for instantiatable types only)</P></TD>
<TD class=struct_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=struct_member_name>
<P><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#guint16"><SPAN class=type>guint16</SPAN></A>&nbsp;<EM class=structfield><CODE><A name=GTypeInfo.n-preallocs></A>n_preallocs</CODE></EM>;</P></TD>
<TD class=struct_member_description>
<P>Prior to GLib 2.10, it specified the number of pre-allocated (cached) instances to reserve memory for (0 indicates no caching). Since GLib 2.10, it is ignored, since instances are allocated with the slice allocator now.</P></TD>
<TD class=struct_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=struct_member_name>
<P><A title=GInstanceInitFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GInstanceInitFunc"><SPAN class=type>GInstanceInitFunc</SPAN></A>&nbsp;<EM class=structfield><CODE><A name=GTypeInfo.instance-init></A>instance_init</CODE></EM>;</P></TD>
<TD class=struct_member_description>
<P>Location of the instance initialization function (optional, for instantiatable types only)</P></TD>
<TD class=struct_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=struct_member_name>
<P>const&nbsp;<A title="struct GTypeValueTable" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeValueTable"><SPAN class=type>GTypeValueTable</SPAN></A>&nbsp;*<EM class=structfield><CODE><A name=GTypeInfo.value-table></A>value_table</CODE></EM>;</P></TD>
<TD class=struct_member_description>
<P>A <A title="struct GTypeValueTable" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeValueTable"><SPAN class=type>GTypeValueTable</SPAN></A> function table for generic handling of GValues of this type (usually only useful for fundamental types)</P></TD>
<TD class=struct_member_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>

<DIV class=refsect2><A name=GTypeFundamentalInfo></A>
<H3>struct GTypeFundamentalInfo</H3><PRE class=programlisting>struct GTypeFundamentalInfo {
  GTypeFundamentalFlags  type_flags;
};
</PRE>
<P>A structure that provides information to the type system which is used specifically for managing fundamental types.</P>
<DIV class=refsect3><A name=GTypeFundamentalInfo.members></A>
<H4>Members</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=struct_members_name width=300>
<COL class=struct_members_description>
<COL class=struct_members_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=struct_member_name>
<P><A title="enum GTypeFundamentalFlags" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeFundamentalFlags"><SPAN class=type>GTypeFundamentalFlags</SPAN></A>&nbsp;<EM class=structfield><CODE><A name=GTypeFundamentalInfo.type-flags></A>type_flags</CODE></EM>;</P></TD>
<TD class=struct_member_description>
<P><A title="enum GTypeFundamentalFlags" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeFundamentalFlags"><SPAN class=type>GTypeFundamentalFlags</SPAN></A> describing the characteristics of the fundamental type</P></TD>
<TD class=struct_member_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>

<DIV class=refsect2><A name=GInterfaceInfo></A>
<H3>struct GInterfaceInfo</H3><PRE class=programlisting>struct GInterfaceInfo {
  GInterfaceInitFunc     interface_init;
  GInterfaceFinalizeFunc interface_finalize;
  gpointer               interface_data;
};
</PRE>
<P>A structure that provides information to the type system which is used specifically for managing interface types.</P>
<DIV class=refsect3><A name=GInterfaceInfo.members></A>
<H4>Members</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=struct_members_name width=300>
<COL class=struct_members_description>
<COL class=struct_members_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=struct_member_name>
<P><A title=GInterfaceInitFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GInterfaceInitFunc"><SPAN class=type>GInterfaceInitFunc</SPAN></A>&nbsp;<EM class=structfield><CODE><A name=GInterfaceInfo.interface-init></A>interface_init</CODE></EM>;</P></TD>
<TD class=struct_member_description>
<P>location of the interface initialization function</P></TD>
<TD class=struct_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=struct_member_name>
<P><A title=GInterfaceFinalizeFunc&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GInterfaceFinalizeFunc"><SPAN class=type>GInterfaceFinalizeFunc</SPAN></A>&nbsp;<EM class=structfield><CODE><A name=GInterfaceInfo.interface-finalize></A>interface_finalize</CODE></EM>;</P></TD>
<TD class=struct_member_description>
<P>location of the interface finalization function</P></TD>
<TD class=struct_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=struct_member_name>
<P><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A>&nbsp;<EM class=structfield><CODE><A name=GInterfaceInfo.interface-data></A>interface_data</CODE></EM>;</P></TD>
<TD class=struct_member_description>
<P>user-supplied data passed to the interface init/finalize functions</P></TD>
<TD class=struct_member_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>

<DIV class=refsect2><A name=GTypeValueTable></A>
<H3>struct GTypeValueTable</H3><PRE class=programlisting>struct GTypeValueTable {
  void     (*value_init)         (GValue       *value);
  void     (*value_free)         (GValue       *value);
  void     (*value_copy)         (const GValue *src_value,
				  GValue       *dest_value);
  /* varargs functionality (optional) */
  gpointer (*value_peek_pointer) (const GValue *value);
  const gchar *collect_format;
  gchar*   (*collect_value)      (GValue       *value,
				  guint         n_collect_values,
				  GTypeCValue  *collect_values,
				  guint		collect_flags);
  const gchar *lcopy_format;
  gchar*   (*lcopy_value)        (const GValue *value,
				  guint         n_collect_values,
				  GTypeCValue  *collect_values,
				  guint		collect_flags);
};
</PRE>
<P>The <A title="struct GTypeValueTable" class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GTypeValueTable"><SPAN class=type>GTypeValueTable</SPAN></A> provides the functions required by the <A title=GValue class=link href="https://developer.gnome.org/gobject/stable/gobject-Generic-values.html#GValue"><SPAN class=type>GValue</SPAN></A> implementation, to serve as a container for values of a type.</P>
<DIV class=refsect3><A name=GTypeValueTable.members></A>
<H4>Members</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=struct_members_name width=300>
<COL class=struct_members_description>
<COL class=struct_members_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=struct_member_name>
<P><EM class=structfield><CODE><A name=GTypeValueTable.value-init></A>value_init</CODE></EM>&nbsp;()</P></TD>
<TD class=struct_member_description>
<P>Default initialize <EM class=parameter><CODE>values</CODE></EM> contents by poking values directly into the value-&gt;data array. The data array of the <A title=GValue class=link href="https://developer.gnome.org/gobject/stable/gobject-Generic-values.html#GValue"><SPAN class=type>GValue</SPAN></A> passed into this function was zero-filled with <CODE class=literal><CODE class=function>memset()</CODE></CODE>, so no care has to be taken to free any old contents. E.g. for the implementation of a string value that may never be <A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>, the implementation might look like:</P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting>value<SPAN class="gtkdoc opt">-&gt;</SPAN>data<SPAN class="gtkdoc opt">[</SPAN><SPAN class=number>0</SPAN><SPAN class="gtkdoc opt">].</SPAN>v_pointer <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-String-Utility-Functions.html#g-strdup">g_strdup</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>""</SPAN><SPAN class="gtkdoc opt">);</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P></TD>
<TD class=struct_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=struct_member_name>
<P><EM class=structfield><CODE><A name=GTypeValueTable.value-free></A>value_free</CODE></EM>&nbsp;()</P></TD>
<TD class=struct_member_description>
<P>Free any old contents that might be left in the data array of the passed in <EM class=parameter><CODE>value</CODE></EM> . No resources may remain allocated through the <A title=GValue class=link href="https://developer.gnome.org/gobject/stable/gobject-Generic-values.html#GValue"><SPAN class=type>GValue</SPAN></A> contents after this function returns. E.g. for our above string type:</P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class="gtkdoc slc">// only free strings without a specific flag for static storage</SPAN>
<SPAN class=keyword>if</SPAN> <SPAN class="gtkdoc opt">(!(</SPAN>value<SPAN class="gtkdoc opt">-&gt;</SPAN>data<SPAN class="gtkdoc opt">[</SPAN><SPAN class=number>1</SPAN><SPAN class="gtkdoc opt">].</SPAN>v_uint <SPAN class="gtkdoc opt">&amp;</SPAN> G_VALUE_NOCOPY_CONTENTS<SPAN class="gtkdoc opt">))</SPAN>
<SPAN class=function><A href="https://developer.gnome.org/gobject/glib-Memory-Allocation.html#g-free">g_free</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>value<SPAN class="gtkdoc opt">-&gt;</SPAN>data<SPAN class="gtkdoc opt">[</SPAN><SPAN class=number>0</SPAN><SPAN class="gtkdoc opt">].</SPAN>v_pointer<SPAN class="gtkdoc opt">);</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P></TD>
<TD class=struct_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=struct_member_name>
<P><EM class=structfield><CODE><A name=GTypeValueTable.value-copy></A>value_copy</CODE></EM>&nbsp;()</P></TD>
<TD class=struct_member_description>
<P><EM class=parameter><CODE>dest_value</CODE></EM> is a <A title=GValue class=link href="https://developer.gnome.org/gobject/stable/gobject-Generic-values.html#GValue"><SPAN class=type>GValue</SPAN></A> with zero-filled data section and <EM class=parameter><CODE>src_value</CODE></EM> is a properly setup <A title=GValue class=link href="https://developer.gnome.org/gobject/stable/gobject-Generic-values.html#GValue"><SPAN class=type>GValue</SPAN></A> of same or derived type. The purpose of this function is to copy the contents of <EM class=parameter><CODE>src_value</CODE></EM> into <EM class=parameter><CODE>dest_value</CODE></EM> in a way, that even after <EM class=parameter><CODE>src_value</CODE></EM> has been freed, the contents of <EM class=parameter><CODE>dest_value</CODE></EM> remain valid. String type example:</P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting>dest_value<SPAN class="gtkdoc opt">-&gt;</SPAN>data<SPAN class="gtkdoc opt">[</SPAN><SPAN class=number>0</SPAN><SPAN class="gtkdoc opt">].</SPAN>v_pointer <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-String-Utility-Functions.html#g-strdup">g_strdup</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>src_value<SPAN class="gtkdoc opt">-&gt;</SPAN>data<SPAN class="gtkdoc opt">[</SPAN><SPAN class=number>0</SPAN><SPAN class="gtkdoc opt">].</SPAN>v_pointer<SPAN class="gtkdoc opt">);</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P></TD>
<TD class=struct_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=struct_member_name>
<P><EM class=structfield><CODE><A name=GTypeValueTable.value-peek-pointer></A>value_peek_pointer</CODE></EM>&nbsp;()</P></TD>
<TD class=struct_member_description>
<P>If the value contents fit into a pointer, such as objects or strings, return this pointer, so the caller can peek at the current contents. To extend on our above string example:</P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class=keyword>return</SPAN> value<SPAN class="gtkdoc opt">-&gt;</SPAN>data<SPAN class="gtkdoc opt">[</SPAN><SPAN class=number>0</SPAN><SPAN class="gtkdoc opt">].</SPAN>v_pointer<SPAN class="gtkdoc opt">;</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P></TD>
<TD class=struct_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=struct_member_name>
<P>const&nbsp;<A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A>&nbsp;*<EM class=structfield><CODE><A name=GTypeValueTable.collect-format></A>collect_format</CODE></EM>;</P></TD>
<TD class=struct_member_description>
<P>A string format describing how to collect the contents of this value bit-by-bit. Each character in the format represents an argument to be collected, and the characters themselves indicate the type of the argument. Currently supported arguments are:</P>
<DIV class=itemizedlist>
<UL class=itemizedlist style="LIST-STYLE-TYPE: disc">
<LI class=listitem>
<P>'i' - Integers. passed as collect_values[].v_int.</P></LI>
<LI class=listitem>
<P>'l' - Longs. passed as collect_values[].v_long.</P></LI>
<LI class=listitem>
<P>'d' - Doubles. passed as collect_values[].v_double.</P></LI>
<LI class=listitem>
<P>'p' - Pointers. passed as collect_values[].v_pointer. It should be noted that for variable argument list construction, ANSI C promotes every type smaller than an integer to an int, and floats to doubles. So for collection of short int or char, 'i' needs to be used, and for collection of floats 'd'.</P></LI></UL></DIV></TD>
<TD class=struct_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=struct_member_name>
<P><EM class=structfield><CODE><A name=GTypeValueTable.collect-value></A>collect_value</CODE></EM>&nbsp;()</P></TD>
<TD class=struct_member_description>
<P>The <CODE class=function>collect_value()</CODE> function is responsible for converting the values collected from a variable argument list into contents suitable for storage in a GValue. This function should setup <EM class=parameter><CODE>value</CODE></EM> similar to <CODE class=function>value_init()</CODE>; e.g. for a string value that does not allow <A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> pointers, it needs to either spew an error, or do an implicit conversion by storing an empty string. The <EM class=parameter><CODE>value</CODE></EM> passed in to this function has a zero-filled data array, so just like for <CODE class=function>value_init()</CODE> it is guaranteed to not contain any old contents that might need freeing. <EM class=parameter><CODE>n_collect_values</CODE></EM> is exactly the string length of <EM class=parameter><CODE>collect_format</CODE></EM> , and <EM class=parameter><CODE>collect_values</CODE></EM> is an array of unions <A title=GTypeCValue class=link href="https://developer.gnome.org/gobject/stable/gobject-Varargs-Value-Collection.html#GTypeCValue"><SPAN class=type>GTypeCValue</SPAN></A> with length <EM class=parameter><CODE>n_collect_values</CODE></EM> , containing the collected values according to <EM class=parameter><CODE>collect_format</CODE></EM> . <EM class=parameter><CODE>collect_flags</CODE></EM> is an argument provided as a hint by the caller. It may contain the flag <CODE class=literal>G_VALUE_NOCOPY_CONTENTS</CODE> indicating, that the collected value contents may be considered "static" for the duration of the <EM class=parameter><CODE>value</CODE></EM> lifetime. Thus an extra copy of the contents stored in <EM class=parameter><CODE>collect_values</CODE></EM> is not required for assignment to <EM class=parameter><CODE>value</CODE></EM> . For our above string example, we continue with:</P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class=keyword>if</SPAN> <SPAN class="gtkdoc opt">(!</SPAN>collect_values<SPAN class="gtkdoc opt">[</SPAN><SPAN class=number>0</SPAN><SPAN class="gtkdoc opt">].</SPAN>v_pointer<SPAN class="gtkdoc opt">)</SPAN>
value<SPAN class="gtkdoc opt">-&gt;</SPAN>data<SPAN class="gtkdoc opt">[</SPAN><SPAN class=number>0</SPAN><SPAN class="gtkdoc opt">].</SPAN>v_pointer <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-String-Utility-Functions.html#g-strdup">g_strdup</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>""</SPAN><SPAN class="gtkdoc opt">);</SPAN>
<SPAN class=keyword>else if</SPAN> <SPAN class="gtkdoc opt">(</SPAN>collect_flags <SPAN class="gtkdoc opt">&amp;</SPAN> G_VALUE_NOCOPY_CONTENTS<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
value<SPAN class="gtkdoc opt">-&gt;</SPAN>data<SPAN class="gtkdoc opt">[</SPAN><SPAN class=number>0</SPAN><SPAN class="gtkdoc opt">].</SPAN>v_pointer <SPAN class="gtkdoc opt">=</SPAN> collect_values<SPAN class="gtkdoc opt">[</SPAN><SPAN class=number>0</SPAN><SPAN class="gtkdoc opt">].</SPAN>v_pointer<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc slc">// keep a flag for the value_free() implementation to not free this string</SPAN>
value<SPAN class="gtkdoc opt">-&gt;</SPAN>data<SPAN class="gtkdoc opt">[</SPAN><SPAN class=number>1</SPAN><SPAN class="gtkdoc opt">].</SPAN>v_uint <SPAN class="gtkdoc opt">=</SPAN> G_VALUE_NOCOPY_CONTENTS<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>
<SPAN class=keyword>else</SPAN>
value<SPAN class="gtkdoc opt">-&gt;</SPAN>data<SPAN class="gtkdoc opt">[</SPAN><SPAN class=number>0</SPAN><SPAN class="gtkdoc opt">].</SPAN>v_pointer <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-String-Utility-Functions.html#g-strdup">g_strdup</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>collect_values<SPAN class="gtkdoc opt">[</SPAN><SPAN class=number>0</SPAN><SPAN class="gtkdoc opt">].</SPAN>v_pointer<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class=keyword>return</SPAN> NULL<SPAN class="gtkdoc opt">;</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P>It should be noted, that it is generally a bad idea to follow the <SPAN class=type>G_VALUE_NOCOPY_CONTENTS</SPAN> hint for reference counted types. Due to reentrancy requirements and reference count assertions performed by the signal emission code, reference counts should always be incremented for reference counted contents stored in the value-&gt;data array. To deviate from our string example for a moment, and taking a look at an exemplary implementation for <CODE class=function>collect_value()</CODE> of <A class=link href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#GObject"><SPAN class=type>GObject</SPAN></A>:</P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting><SPAN class=keyword>if</SPAN> <SPAN class="gtkdoc opt">(</SPAN>collect_values<SPAN class="gtkdoc opt">[</SPAN><SPAN class=number>0</SPAN><SPAN class="gtkdoc opt">].</SPAN>v_pointer<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">{</SPAN>
GObject <SPAN class="gtkdoc opt">*</SPAN>object <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#G-OBJECT:CAPS">G_OBJECT</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>collect_values<SPAN class="gtkdoc opt">[</SPAN><SPAN class=number>0</SPAN><SPAN class="gtkdoc opt">].</SPAN>v_pointer<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc slc">// never honour G_VALUE_NOCOPY_CONTENTS for ref-counted types</SPAN>
value<SPAN class="gtkdoc opt">-&gt;</SPAN>data<SPAN class="gtkdoc opt">[</SPAN><SPAN class=number>0</SPAN><SPAN class="gtkdoc opt">].</SPAN>v_pointer <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#g-object-ref">g_object_ref</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>object<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class=keyword>return</SPAN> NULL<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class="gtkdoc opt">}</SPAN>
<SPAN class=keyword>else</SPAN>
<SPAN class=keyword>return</SPAN> <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-String-Utility-Functions.html#g-strdup-printf">g_strdup_printf</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"Object passed as invalid NULL pointer"</SPAN><SPAN class="gtkdoc opt">);</SPAN>
<SPAN class="gtkdoc opt">}</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P>The reference count for valid objects is always incremented, regardless of <EM class=parameter><CODE>collect_flags</CODE></EM> . For invalid objects, the example returns a newly allocated string without altering <EM class=parameter><CODE>value</CODE></EM> . Upon success, <CODE class=function>collect_value()</CODE> needs to return <A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A>. If, however, an error condition occurred, <CODE class=function>collect_value()</CODE> may spew an error by returning a newly allocated non-<A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> string, giving a suitable description of the error condition. The calling code makes no assumptions about the <EM class=parameter><CODE>value</CODE></EM> contents being valid upon error returns, <EM class=parameter><CODE>value</CODE></EM> is simply thrown away without further freeing. As such, it is a good idea to not allocate <A title=GValue class=link href="https://developer.gnome.org/gobject/stable/gobject-Generic-values.html#GValue"><SPAN class=type>GValue</SPAN></A> contents, prior to returning an error, however, <CODE class=function>collect_values()</CODE> is not obliged to return a correctly setup <EM class=parameter><CODE>value</CODE></EM> for error returns, simply because any non-<A href="https://developer.gnome.org/gobject/glib-Standard-Macros.html#NULL:CAPS"><CODE class=literal>NULL</CODE></A> return is considered a fatal condition so further program behaviour is undefined.</P></TD>
<TD class=struct_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=struct_member_name>
<P>const&nbsp;<A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A>&nbsp;*<EM class=structfield><CODE><A name=GTypeValueTable.lcopy-format></A>lcopy_format</CODE></EM>;</P></TD>
<TD class=struct_member_description>
<P>Format description of the arguments to collect for <EM class=parameter><CODE>lcopy_value</CODE></EM> , analogous to <EM class=parameter><CODE>collect_format</CODE></EM> . Usually, <EM class=parameter><CODE>lcopy_format</CODE></EM> string consists only of 'p's to provide <CODE class=function>lcopy_value()</CODE> with pointers to storage locations.</P></TD>
<TD class=struct_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=struct_member_name>
<P><EM class=structfield><CODE><A name=GTypeValueTable.lcopy-value></A>lcopy_value</CODE></EM>&nbsp;()</P></TD>
<TD class=struct_member_description>
<P>This function is responsible for storing the <EM class=parameter><CODE>value</CODE></EM> contents into arguments passed through a variable argument list which got collected into <EM class=parameter><CODE>collect_values</CODE></EM> according to <EM class=parameter><CODE>lcopy_format</CODE></EM> . <EM class=parameter><CODE>n_collect_values</CODE></EM> equals the string length of <EM class=parameter><CODE>lcopy_format</CODE></EM> , and <EM class=parameter><CODE>collect_flags</CODE></EM> may contain <CODE class=literal>G_VALUE_NOCOPY_CONTENTS</CODE>. In contrast to <CODE class=function>collect_value()</CODE>, <CODE class=function>lcopy_value()</CODE> is obliged to always properly support <CODE class=literal>G_VALUE_NOCOPY_CONTENTS</CODE>. Similar to <CODE class=function>collect_value()</CODE> the function may prematurely abort by returning a newly allocated string describing an error condition. To complete the string example:</P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting>gchar <SPAN class="gtkdoc opt">**</SPAN>string_p <SPAN class="gtkdoc opt">=</SPAN> collect_values<SPAN class="gtkdoc opt">[</SPAN><SPAN class=number>0</SPAN><SPAN class="gtkdoc opt">].</SPAN>v_pointer<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class=keyword>if</SPAN> <SPAN class="gtkdoc opt">(!</SPAN>string_p<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class=keyword>return</SPAN> <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-String-Utility-Functions.html#g-strdup-printf">g_strdup_printf</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"string location passed as NULL"</SPAN><SPAN class="gtkdoc opt">);</SPAN>
<SPAN class=keyword>if</SPAN> <SPAN class="gtkdoc opt">(</SPAN>collect_flags <SPAN class="gtkdoc opt">&amp;</SPAN> G_VALUE_NOCOPY_CONTENTS<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">*</SPAN>string_p <SPAN class="gtkdoc opt">=</SPAN> value<SPAN class="gtkdoc opt">-&gt;</SPAN>data<SPAN class="gtkdoc opt">[</SPAN><SPAN class=number>0</SPAN><SPAN class="gtkdoc opt">].</SPAN>v_pointer<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class=keyword>else</SPAN>
<SPAN class="gtkdoc opt">*</SPAN>string_p <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-String-Utility-Functions.html#g-strdup">g_strdup</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>value<SPAN class="gtkdoc opt">-&gt;</SPAN>data<SPAN class="gtkdoc opt">[</SPAN><SPAN class=number>0</SPAN><SPAN class="gtkdoc opt">].</SPAN>v_pointer<SPAN class="gtkdoc opt">);</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P>And an illustrative version of <CODE class=function>lcopy_value()</CODE> for reference-counted types:</P>
<DIV class=informalexample>
<TABLE class=listing_frame cellSpacing=0 cellPadding=0 border=0>
<TBODY>
<TR>
<TD class=listing_code><PRE class=programlisting>GObject <SPAN class="gtkdoc opt">**</SPAN>object_p <SPAN class="gtkdoc opt">=</SPAN> collect_values<SPAN class="gtkdoc opt">[</SPAN><SPAN class=number>0</SPAN><SPAN class="gtkdoc opt">].</SPAN>v_pointer<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class=keyword>if</SPAN> <SPAN class="gtkdoc opt">(!</SPAN>object_p<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class=keyword>return</SPAN> <SPAN class=function><A href="https://developer.gnome.org/gobject/glib-String-Utility-Functions.html#g-strdup-printf">g_strdup_printf</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN><SPAN class=string>"object location passed as NULL"</SPAN><SPAN class="gtkdoc opt">);</SPAN>
<SPAN class=keyword>if</SPAN> <SPAN class="gtkdoc opt">(!</SPAN>value<SPAN class="gtkdoc opt">-&gt;</SPAN>data<SPAN class="gtkdoc opt">[</SPAN><SPAN class=number>0</SPAN><SPAN class="gtkdoc opt">].</SPAN>v_pointer<SPAN class="gtkdoc opt">)</SPAN>
<SPAN class="gtkdoc opt">*</SPAN>object_p <SPAN class="gtkdoc opt">=</SPAN> NULL<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class=keyword>else if</SPAN> <SPAN class="gtkdoc opt">(</SPAN>collect_flags <SPAN class="gtkdoc opt">&amp;</SPAN> G_VALUE_NOCOPY_CONTENTS<SPAN class="gtkdoc opt">)</SPAN> <SPAN class="gtkdoc slc">// always honour</SPAN>
<SPAN class="gtkdoc opt">*</SPAN>object_p <SPAN class="gtkdoc opt">=</SPAN> value<SPAN class="gtkdoc opt">-&gt;</SPAN>data<SPAN class="gtkdoc opt">[</SPAN><SPAN class=number>0</SPAN><SPAN class="gtkdoc opt">].</SPAN>v_pointer<SPAN class="gtkdoc opt">;</SPAN>
<SPAN class=keyword>else</SPAN>
<SPAN class="gtkdoc opt">*</SPAN>object_p <SPAN class="gtkdoc opt">=</SPAN> <SPAN class=function><A href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#g-object-ref">g_object_ref</A></SPAN> <SPAN class="gtkdoc opt">(</SPAN>value<SPAN class="gtkdoc opt">-&gt;</SPAN>data<SPAN class="gtkdoc opt">[</SPAN><SPAN class=number>0</SPAN><SPAN class="gtkdoc opt">].</SPAN>v_pointer<SPAN class="gtkdoc opt">);</SPAN>
<SPAN class=keyword>return</SPAN> NULL<SPAN class="gtkdoc opt">;</SPAN></PRE></TD></TR></TBODY></TABLE></DIV>
<P></P></TD>
<TD class=struct_member_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-FLAG-RESERVED-ID-BIT:CAPS></A>
<H3>G_TYPE_FLAG_RESERVED_ID_BIT</H3><PRE class=programlisting>#define&nbsp;G_TYPE_FLAG_RESERVED_ID_BIT&nbsp;((GType) (1 &lt;&lt; 0))
</PRE>
<P>A bit in the type number that's supposed to be left untouched.</P></DIV>
<HR>

<DIV class=refsect2><A name=GTypeDebugFlags></A>
<H3>enum GTypeDebugFlags</H3>
<DIV class=warning>
<P><CODE class=literal>GTypeDebugFlags</CODE> has been deprecated since version 2.36 and should not be used in newly-written code.</P>
<P>g_type_init() is now done automatically</P></DIV>
<P>These flags used to be passed to <A title=g_type_init_with_debug_flags&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-init-with-debug-flags"><CODE class=function>g_type_init_with_debug_flags()</CODE></A> which is now deprecated.</P>
<P>If you need to enable debugging features, use the GOBJECT_DEBUG environment variable.</P>
<DIV class=refsect3><A name=GTypeDebugFlags.members></A>
<H4>Members</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=enum_members_name width=300>
<COL class=enum_members_description>
<COL class=enum_members_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=enum_member_name>
<P><A name=G-TYPE-DEBUG-NONE:CAPS></A>G_TYPE_DEBUG_NONE</P></TD>
<TD class=enum_member_description>
<P>Print no messages</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-TYPE-DEBUG-OBJECTS:CAPS></A>G_TYPE_DEBUG_OBJECTS</P></TD>
<TD class=enum_member_description>
<P>Print messages about object bookkeeping</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-TYPE-DEBUG-SIGNALS:CAPS></A>G_TYPE_DEBUG_SIGNALS</P></TD>
<TD class=enum_member_description>
<P>Print messages about signal emissions</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-TYPE-DEBUG-INSTANCE-COUNT:CAPS></A>G_TYPE_DEBUG_INSTANCE_COUNT</P></TD>
<TD class=enum_member_description>
<P>Keep a count of instances of each type</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-TYPE-DEBUG-MASK:CAPS></A>G_TYPE_DEBUG_MASK</P></TD>
<TD class=enum_member_description>
<P>Mask covering all debug flags</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>

<DIV class=refsect2><A name=GTypeQuery></A>
<H3>struct GTypeQuery</H3><PRE class=programlisting>struct GTypeQuery {
  GType		type;
  const gchar  *type_name;
  guint		class_size;
  guint		instance_size;
};
</PRE>
<P>A structure holding information for a specific type. It is filled in by the <A title=g_type_query&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#g-type-query"><CODE class=function>g_type_query()</CODE></A> function.</P>
<DIV class=refsect3><A name=GTypeQuery.members></A>
<H4>Members</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=struct_members_name width=300>
<COL class=struct_members_description>
<COL class=struct_members_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=struct_member_name>
<P><A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A>&nbsp;<EM class=structfield><CODE><A name=GTypeQuery.type></A>type</CODE></EM>;</P></TD>
<TD class=struct_member_description>
<P>the <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> value of the type</P></TD>
<TD class=struct_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=struct_member_name>
<P>const&nbsp;<A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A>&nbsp;*<EM class=structfield><CODE><A name=GTypeQuery.type-name></A>type_name</CODE></EM>;</P></TD>
<TD class=struct_member_description>
<P>the name of the type</P></TD>
<TD class=struct_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=struct_member_name>
<P><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#guint"><SPAN class=type>guint</SPAN></A>&nbsp;<EM class=structfield><CODE><A name=GTypeQuery.class-size></A>class_size</CODE></EM>;</P></TD>
<TD class=struct_member_description>
<P>the size of the class structure</P></TD>
<TD class=struct_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=struct_member_name>
<P><A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#guint"><SPAN class=type>guint</SPAN></A>&nbsp;<EM class=structfield><CODE><A name=GTypeQuery.instance-size></A>instance_size</CODE></EM>;</P></TD>
<TD class=struct_member_description>
<P>the size of the instance structure</P></TD>
<TD class=struct_member_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>

<DIV class=refsect2><A name=GTypeFlags></A>
<H3>enum GTypeFlags</H3>
<P>Bit masks used to check or determine characteristics of a type.</P>
<DIV class=refsect3><A name=GTypeFlags.members></A>
<H4>Members</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=enum_members_name width=300>
<COL class=enum_members_description>
<COL class=enum_members_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=enum_member_name>
<P><A name=G-TYPE-FLAG-ABSTRACT:CAPS></A>G_TYPE_FLAG_ABSTRACT</P></TD>
<TD class=enum_member_description>
<P>Indicates an abstract type. No instances can be created for an abstract type</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-TYPE-FLAG-VALUE-ABSTRACT:CAPS></A>G_TYPE_FLAG_VALUE_ABSTRACT</P></TD>
<TD class=enum_member_description>
<P>Indicates an abstract value type, i.e. a type that introduces a value table, but can't be used for <A title=g_value_init&nbsp;() class=link href="https://developer.gnome.org/gobject/stable/gobject-Generic-values.html#g-value-init"><CODE class=function>g_value_init()</CODE></A></P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>

<DIV class=refsect2><A name=GTypeFundamentalFlags></A>
<H3>enum GTypeFundamentalFlags</H3>
<P>Bit masks used to check or determine specific characteristics of a fundamental type.</P>
<DIV class=refsect3><A name=GTypeFundamentalFlags.members></A>
<H4>Members</H4>
<DIV class=informaltable>
<TABLE class=informaltable width="100%" border=0>
<COLGROUP>
<COL class=enum_members_name width=300>
<COL class=enum_members_description>
<COL class=enum_members_annotations width=200></COLGROUP>
<TBODY>
<TR>
<TD class=enum_member_name>
<P><A name=G-TYPE-FLAG-CLASSED:CAPS></A>G_TYPE_FLAG_CLASSED</P></TD>
<TD class=enum_member_description>
<P>Indicates a classed type</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-TYPE-FLAG-INSTANTIATABLE:CAPS></A>G_TYPE_FLAG_INSTANTIATABLE</P></TD>
<TD class=enum_member_description>
<P>Indicates an instantiable type (implies classed)</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-TYPE-FLAG-DERIVABLE:CAPS></A>G_TYPE_FLAG_DERIVABLE</P></TD>
<TD class=enum_member_description>
<P>Indicates a flat derivable type</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR>
<TR>
<TD class=enum_member_name>
<P><A name=G-TYPE-FLAG-DEEP-DERIVABLE:CAPS></A>G_TYPE_FLAG_DEEP_DERIVABLE</P></TD>
<TD class=enum_member_description>
<P>Indicates a deep derivable type (implies derivable)</P></TD>
<TD class=enum_member_annotations>&nbsp;</TD></TR></TBODY></TABLE></DIV></DIV></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-INVALID:CAPS></A>
<H3>G_TYPE_INVALID</H3><PRE class=programlisting>#define G_TYPE_INVALID			G_TYPE_MAKE_FUNDAMENTAL (0)
</PRE>
<P>An invalid <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> used as error return value in some functions which return a <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A>.</P></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-NONE:CAPS></A>
<H3>G_TYPE_NONE</H3><PRE class=programlisting>#define G_TYPE_NONE			G_TYPE_MAKE_FUNDAMENTAL (1)
</PRE>
<P>A fundamental type which is used as a replacement for the C void return type.</P></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-INTERFACE:CAPS></A>
<H3>G_TYPE_INTERFACE</H3><PRE class=programlisting>#define G_TYPE_INTERFACE		G_TYPE_MAKE_FUNDAMENTAL (2)
</PRE>
<P>The fundamental type from which all interfaces are derived.</P></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-CHAR:CAPS></A>
<H3>G_TYPE_CHAR</H3><PRE class=programlisting>#define G_TYPE_CHAR			G_TYPE_MAKE_FUNDAMENTAL (3)
</PRE>
<P>The fundamental type corresponding to <A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gchar"><SPAN class=type>gchar</SPAN></A>. The type designated by G_TYPE_CHAR is unconditionally an 8-bit signed integer. This may or may not be the same type a the C type "gchar".</P></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-UCHAR:CAPS></A>
<H3>G_TYPE_UCHAR</H3><PRE class=programlisting>#define G_TYPE_UCHAR			G_TYPE_MAKE_FUNDAMENTAL (4)
</PRE>
<P>The fundamental type corresponding to <A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#guchar"><SPAN class=type>guchar</SPAN></A>.</P></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-BOOLEAN:CAPS></A>
<H3>G_TYPE_BOOLEAN</H3><PRE class=programlisting>#define G_TYPE_BOOLEAN			G_TYPE_MAKE_FUNDAMENTAL (5)
</PRE>
<P>The fundamental type corresponding to <A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gboolean"><SPAN class=type>gboolean</SPAN></A>.</P></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-INT:CAPS></A>
<H3>G_TYPE_INT</H3><PRE class=programlisting>#define G_TYPE_INT			G_TYPE_MAKE_FUNDAMENTAL (6)
</PRE>
<P>The fundamental type corresponding to <A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gint"><SPAN class=type>gint</SPAN></A>.</P></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-UINT:CAPS></A>
<H3>G_TYPE_UINT</H3><PRE class=programlisting>#define G_TYPE_UINT			G_TYPE_MAKE_FUNDAMENTAL (7)
</PRE>
<P>The fundamental type corresponding to <A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#guint"><SPAN class=type>guint</SPAN></A>.</P></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-LONG:CAPS></A>
<H3>G_TYPE_LONG</H3><PRE class=programlisting>#define G_TYPE_LONG			G_TYPE_MAKE_FUNDAMENTAL (8)
</PRE>
<P>The fundamental type corresponding to <A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#glong"><SPAN class=type>glong</SPAN></A>.</P></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-ULONG:CAPS></A>
<H3>G_TYPE_ULONG</H3><PRE class=programlisting>#define G_TYPE_ULONG			G_TYPE_MAKE_FUNDAMENTAL (9)
</PRE>
<P>The fundamental type corresponding to <A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gulong"><SPAN class=type>gulong</SPAN></A>.</P></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-INT64:CAPS></A>
<H3>G_TYPE_INT64</H3><PRE class=programlisting>#define G_TYPE_INT64			G_TYPE_MAKE_FUNDAMENTAL (10)
</PRE>
<P>The fundamental type corresponding to <A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gint64"><SPAN class=type>gint64</SPAN></A>.</P></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-UINT64:CAPS></A>
<H3>G_TYPE_UINT64</H3><PRE class=programlisting>#define G_TYPE_UINT64			G_TYPE_MAKE_FUNDAMENTAL (11)
</PRE>
<P>The fundamental type corresponding to <A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#guint64"><SPAN class=type>guint64</SPAN></A>.</P></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-ENUM:CAPS></A>
<H3>G_TYPE_ENUM</H3><PRE class=programlisting>#define G_TYPE_ENUM			G_TYPE_MAKE_FUNDAMENTAL (12)
</PRE>
<P>The fundamental type from which all enumeration types are derived.</P></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-FLAGS:CAPS></A>
<H3>G_TYPE_FLAGS</H3><PRE class=programlisting>#define G_TYPE_FLAGS			G_TYPE_MAKE_FUNDAMENTAL (13)
</PRE>
<P>The fundamental type from which all flags types are derived.</P></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-FLOAT:CAPS></A>
<H3>G_TYPE_FLOAT</H3><PRE class=programlisting>#define G_TYPE_FLOAT			G_TYPE_MAKE_FUNDAMENTAL (14)
</PRE>
<P>The fundamental type corresponding to <A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gfloat"><SPAN class=type>gfloat</SPAN></A>.</P></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-DOUBLE:CAPS></A>
<H3>G_TYPE_DOUBLE</H3><PRE class=programlisting>#define G_TYPE_DOUBLE			G_TYPE_MAKE_FUNDAMENTAL (15)
</PRE>
<P>The fundamental type corresponding to <A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gdouble"><SPAN class=type>gdouble</SPAN></A>.</P></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-STRING:CAPS></A>
<H3>G_TYPE_STRING</H3><PRE class=programlisting>#define G_TYPE_STRING			G_TYPE_MAKE_FUNDAMENTAL (16)
</PRE>
<P>The fundamental type corresponding to nul-terminated C strings.</P></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-POINTER:CAPS></A>
<H3>G_TYPE_POINTER</H3><PRE class=programlisting>#define G_TYPE_POINTER			G_TYPE_MAKE_FUNDAMENTAL (17)
</PRE>
<P>The fundamental type corresponding to <A href="https://developer.gnome.org/gobject/glib-Basic-Types.html#gpointer"><SPAN class=type>gpointer</SPAN></A>.</P></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-BOXED:CAPS></A>
<H3>G_TYPE_BOXED</H3><PRE class=programlisting>#define G_TYPE_BOXED			G_TYPE_MAKE_FUNDAMENTAL (18)
</PRE>
<P>The fundamental type from which all boxed types are derived.</P></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-PARAM:CAPS></A>
<H3>G_TYPE_PARAM</H3><PRE class=programlisting>#define G_TYPE_PARAM			G_TYPE_MAKE_FUNDAMENTAL (19)
</PRE>
<P>The fundamental type from which all <A title="struct GParamSpec" class=link href="https://developer.gnome.org/gobject/stable/gobject-GParamSpec.html#GParamSpec"><SPAN class=type>GParamSpec</SPAN></A> types are derived.</P></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-OBJECT:CAPS></A>
<H3>G_TYPE_OBJECT</H3><PRE class=programlisting>#define G_TYPE_OBJECT			G_TYPE_MAKE_FUNDAMENTAL (20)
</PRE>
<P>The fundamental type for <A class=link href="https://developer.gnome.org/gobject/stable/gobject-The-Base-Object-Type.html#GObject"><SPAN class=type>GObject</SPAN></A>.</P></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-GTYPE:CAPS></A>
<H3>G_TYPE_GTYPE</H3><PRE class=programlisting>#define&nbsp;G_TYPE_GTYPE			 (g_gtype_get_type())
</PRE>
<P>The type for <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A>.</P></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-VARIANT:CAPS></A>
<H3>G_TYPE_VARIANT</H3><PRE class=programlisting>#define&nbsp;G_TYPE_VARIANT                  G_TYPE_MAKE_FUNDAMENTAL (21)
</PRE>
<P>The fundamental type corresponding to <A href="https://developer.gnome.org/gobject/glib-GVariant.html#GVariant"><SPAN class=type>GVariant</SPAN></A>.</P>
<P>All floating <A href="https://developer.gnome.org/gobject/glib-GVariant.html#GVariant"><SPAN class=type>GVariant</SPAN></A> instances passed through the <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> system are consumed.</P>
<P>Note that callbacks in closures, and signal handlers for signals of return type <A title=G_TYPE_VARIANT class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-VARIANT:CAPS"><CODE class=literal>G_TYPE_VARIANT</CODE></A>, must never return floating variants.</P>
<P>Note: GLib 2.24 did include a boxed type with this name. It was replaced with this fundamental type in 2.26.</P>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-26.html#api-index-2.26">2.26</A></P></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-CHECKSUM:CAPS></A>
<H3>G_TYPE_CHECKSUM</H3><PRE class=programlisting>#define G_TYPE_CHECKSUM (g_checksum_get_type ())
</PRE>
<P>The <A title=GType class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#GType"><SPAN class=type>GType</SPAN></A> for a boxed type holding a <A href="https://developer.gnome.org/gobject/glib-Data-Checksums.html#GChecksum"><SPAN class=type>GChecksum</SPAN></A>.</P>
<P class=since>Since: <A class=link href="https://developer.gnome.org/gobject/stable/api-index-2-36.html#api-index-2.36">2.36</A></P></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-RESERVED-GLIB-FIRST:CAPS></A>
<H3>G_TYPE_RESERVED_GLIB_FIRST</H3><PRE class=programlisting>#define G_TYPE_RESERVED_GLIB_FIRST&nbsp;(22)
</PRE>
<P>First fundamental type number to create a new fundamental type id with <A title=G_TYPE_MAKE_FUNDAMENTAL() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-MAKE-FUNDAMENTAL:CAPS"><CODE class=function>G_TYPE_MAKE_FUNDAMENTAL()</CODE></A> reserved for GLib.</P></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-RESERVED-GLIB-LAST:CAPS></A>
<H3>G_TYPE_RESERVED_GLIB_LAST</H3><PRE class=programlisting>#define G_TYPE_RESERVED_GLIB_LAST&nbsp;(31)
</PRE>
<P>Last fundamental type number reserved for GLib.</P></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-RESERVED-BSE-FIRST:CAPS></A>
<H3>G_TYPE_RESERVED_BSE_FIRST</H3><PRE class=programlisting>#define G_TYPE_RESERVED_BSE_FIRST&nbsp;(32)
</PRE>
<P>First fundamental type number to create a new fundamental type id with <A title=G_TYPE_MAKE_FUNDAMENTAL() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-MAKE-FUNDAMENTAL:CAPS"><CODE class=function>G_TYPE_MAKE_FUNDAMENTAL()</CODE></A> reserved for BSE.</P></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-RESERVED-BSE-LAST:CAPS></A>
<H3>G_TYPE_RESERVED_BSE_LAST</H3><PRE class=programlisting>#define G_TYPE_RESERVED_BSE_LAST&nbsp;(48)
</PRE>
<P>Last fundamental type number reserved for BSE.</P></DIV>
<HR>

<DIV class=refsect2><A name=G-TYPE-RESERVED-USER-FIRST:CAPS></A>
<H3>G_TYPE_RESERVED_USER_FIRST</H3><PRE class=programlisting>#define G_TYPE_RESERVED_USER_FIRST&nbsp;(49)
</PRE>
<P>First available fundamental type number to create new fundamental type id with <A title=G_TYPE_MAKE_FUNDAMENTAL() class=link href="https://developer.gnome.org/gobject/stable/gobject-Type-Information.html#G-TYPE-MAKE-FUNDAMENTAL:CAPS"><CODE class=function>G_TYPE_MAKE_FUNDAMENTAL()</CODE></A>.</P></DIV></DIV>