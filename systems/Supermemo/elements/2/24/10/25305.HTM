/*<BR>&nbsp;* The first word is the work queue pointer and the flags rolled into<BR>&nbsp;* one<BR>&nbsp;*/<BR>#define work_data_bits(work) ((unsigned long *)(&amp;(work)-&gt;data))
<P></P>
<P>enum {<BR>&nbsp;WORK_STRUCT_PENDING_BIT&nbsp;= 0,&nbsp;/* work item is pending execution */<BR>&nbsp;WORK_STRUCT_DELAYED_BIT&nbsp;= 1,&nbsp;/* work item is delayed */<BR>&nbsp;WORK_STRUCT_PWQ_BIT&nbsp;= 2,&nbsp;/* data points to pwq */<BR>&nbsp;WORK_STRUCT_LINKED_BIT&nbsp;= 3,&nbsp;/* next work is linked to this one */<BR>#ifdef CONFIG_DEBUG_OBJECTS_WORK<BR>&nbsp;WORK_STRUCT_STATIC_BIT&nbsp;= 4,&nbsp;/* static initializer (debugobjects) */<BR>&nbsp;WORK_STRUCT_COLOR_SHIFT&nbsp;= 5,&nbsp;/* color for workqueue flushing */<BR>#else<BR>&nbsp;WORK_STRUCT_COLOR_SHIFT&nbsp;= 4,&nbsp;/* color for workqueue flushing */<BR>#endif</P>
<P>&nbsp;WORK_STRUCT_COLOR_BITS&nbsp;= 4,</P>
<P>&nbsp;WORK_STRUCT_PENDING&nbsp;= 1 &lt;&lt; WORK_STRUCT_PENDING_BIT,<BR>&nbsp;WORK_STRUCT_DELAYED&nbsp;= 1 &lt;&lt; WORK_STRUCT_DELAYED_BIT,<BR>&nbsp;WORK_STRUCT_PWQ&nbsp;&nbsp;= 1 &lt;&lt; WORK_STRUCT_PWQ_BIT,<BR>&nbsp;WORK_STRUCT_LINKED&nbsp;= 1 &lt;&lt; WORK_STRUCT_LINKED_BIT,<BR>#ifdef CONFIG_DEBUG_OBJECTS_WORK<BR>&nbsp;WORK_STRUCT_STATIC&nbsp;= 1 &lt;&lt; WORK_STRUCT_STATIC_BIT,<BR>#else<BR>&nbsp;WORK_STRUCT_STATIC&nbsp;= 0,<BR>#endif</P>
<P>&nbsp;/*<BR>&nbsp; * The last color is no color used for works which don't<BR>&nbsp; * participate in workqueue flushing.<BR>&nbsp; */<BR>&nbsp;WORK_NR_COLORS&nbsp;&nbsp;= (1 &lt;&lt; WORK_STRUCT_COLOR_BITS) - 1,<BR>&nbsp;WORK_NO_COLOR&nbsp;&nbsp;= WORK_NR_COLORS,</P>
<P>&nbsp;/* not bound to any CPU, prefer the local CPU */<BR>&nbsp;WORK_CPU_UNBOUND&nbsp;= NR_CPUS,</P>
<P>&nbsp;/*<BR>&nbsp; * Reserve 7 bits off of pwq pointer w/ debugobjects turned off.<BR>&nbsp; * This makes pwqs aligned to 256 bytes and allows 15 workqueue<BR>&nbsp; * flush colors.<BR>&nbsp; */<BR>&nbsp;WORK_STRUCT_FLAG_BITS&nbsp;= WORK_STRUCT_COLOR_SHIFT +<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; WORK_STRUCT_COLOR_BITS,</P>
<P>&nbsp;/* data contains off-queue information when !WORK_STRUCT_PWQ */<BR>&nbsp;WORK_OFFQ_FLAG_BASE&nbsp;= WORK_STRUCT_COLOR_SHIFT,</P>
<P>&nbsp;__WORK_OFFQ_CANCELING&nbsp;= WORK_OFFQ_FLAG_BASE,<BR>&nbsp;WORK_OFFQ_CANCELING&nbsp;= (1 &lt;&lt; __WORK_OFFQ_CANCELING),</P>
<P>&nbsp;/*<BR>&nbsp; * When a work item is off queue, its high bits point to the last<BR>&nbsp; * pool it was on.&nbsp; Cap at 31 bits and use the highest number to<BR>&nbsp; * indicate that no pool is associated.<BR>&nbsp; */<BR>&nbsp;WORK_OFFQ_FLAG_BITS&nbsp;= 1,<BR>&nbsp;WORK_OFFQ_POOL_SHIFT&nbsp;= WORK_OFFQ_FLAG_BASE + WORK_OFFQ_FLAG_BITS,<BR>&nbsp;WORK_OFFQ_LEFT&nbsp;&nbsp;= BITS_PER_LONG - WORK_OFFQ_POOL_SHIFT,<BR>&nbsp;WORK_OFFQ_POOL_BITS&nbsp;= WORK_OFFQ_LEFT &lt;= 31 ? WORK_OFFQ_LEFT : 31,<BR>&nbsp;WORK_OFFQ_POOL_NONE&nbsp;= (1LU &lt;&lt; WORK_OFFQ_POOL_BITS) - 1,</P>
<P>&nbsp;/* convenience constants */<BR>&nbsp;WORK_STRUCT_FLAG_MASK&nbsp;= (1UL &lt;&lt; WORK_STRUCT_FLAG_BITS) - 1,<BR>&nbsp;WORK_STRUCT_WQ_DATA_MASK = ~WORK_STRUCT_FLAG_MASK,<BR>&nbsp;WORK_STRUCT_NO_POOL&nbsp;= (unsigned long)WORK_OFFQ_POOL_NONE &lt;&lt; WORK_OFFQ_POOL_SHIFT,</P>
<P>&nbsp;/* bit mask for work_busy() return values */<BR>&nbsp;WORK_BUSY_PENDING&nbsp;= 1 &lt;&lt; 0,<BR>&nbsp;WORK_BUSY_RUNNING&nbsp;= 1 &lt;&lt; 1,</P>
<P>&nbsp;/* maximum string length for set_worker_desc() */<BR>&nbsp;WORKER_DESC_LEN&nbsp;&nbsp;= 24,<BR>};