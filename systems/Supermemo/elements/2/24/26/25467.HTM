#ifdef CONFIG_SYSFS<BR>/*<BR>&nbsp;* Workqueues with WQ_SYSFS flag set is visible to userland via<BR>&nbsp;* /sys/bus/workqueue/devices/WQ_NAME.&nbsp; All visible workqueues have the<BR>&nbsp;* following attributes.<BR>&nbsp;*<BR>&nbsp;*&nbsp; per_cpu&nbsp;RO bool&nbsp;: whether the workqueue is per-cpu or unbound<BR>&nbsp;*&nbsp; max_active&nbsp;RW int&nbsp;: maximum number of in-flight work items<BR>&nbsp;*<BR>&nbsp;* Unbound workqueues have the following extra attributes.<BR>&nbsp;*<BR>&nbsp;*&nbsp; id&nbsp;&nbsp;RO int&nbsp;: the associated pool ID<BR>&nbsp;*&nbsp; nice&nbsp;RW int&nbsp;: nice value of the workers<BR>&nbsp;*&nbsp; cpumask&nbsp;RW mask&nbsp;: bitmask of allowed CPUs for the workers<BR>&nbsp;*/<BR>struct wq_device {<BR>&nbsp;struct workqueue_struct&nbsp;&nbsp;*wq;<BR>&nbsp;struct device&nbsp;&nbsp;&nbsp;dev;<BR>};</P>
<P>static struct workqueue_struct *dev_to_wq(struct device *dev)<BR>{<BR>&nbsp;struct wq_device *wq_dev = container_of(dev, struct wq_device, dev);</P>
<P>&nbsp;return wq_dev-&gt;wq;<BR>}</P>
<P>static ssize_t per_cpu_show(struct device *dev, struct device_attribute *attr,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char *buf)<BR>{<BR>&nbsp;struct workqueue_struct *wq = dev_to_wq(dev);</P>
<P>&nbsp;return scnprintf(buf, PAGE_SIZE, "%d\n", (bool)!(wq-&gt;flags &amp; WQ_UNBOUND));<BR>}<BR>static DEVICE_ATTR_RO(per_cpu);</P>
<P>static ssize_t max_active_show(struct device *dev,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct device_attribute *attr, char *buf)<BR>{<BR>&nbsp;struct workqueue_struct *wq = dev_to_wq(dev);</P>
<P>&nbsp;return scnprintf(buf, PAGE_SIZE, "%d\n", wq-&gt;saved_max_active);<BR>}</P>
<P>static ssize_t max_active_store(struct device *dev,<BR>&nbsp;&nbsp;&nbsp;&nbsp;struct device_attribute *attr, const char *buf,<BR>&nbsp;&nbsp;&nbsp;&nbsp;size_t count)<BR>{<BR>&nbsp;struct workqueue_struct *wq = dev_to_wq(dev);<BR>&nbsp;int val;</P>
<P>&nbsp;if (sscanf(buf, "%d", &amp;val) != 1 || val &lt;= 0)<BR>&nbsp;&nbsp;return -EINVAL;</P>
<P>&nbsp;workqueue_set_max_active(wq, val);<BR>&nbsp;return count;<BR>}<BR>static DEVICE_ATTR_RW(max_active);</P>
<P>static struct attribute *wq_sysfs_attrs[] = {<BR>&nbsp;&amp;dev_attr_per_cpu.attr,<BR>&nbsp;&amp;dev_attr_max_active.attr,<BR>&nbsp;NULL,<BR>};<BR>ATTRIBUTE_GROUPS(wq_sysfs);</P>
<P>static ssize_t wq_pool_ids_show(struct device *dev,<BR>&nbsp;&nbsp;&nbsp;&nbsp;struct device_attribute *attr, char *buf)<BR>{<BR>&nbsp;struct workqueue_struct *wq = dev_to_wq(dev);<BR>&nbsp;const char *delim = "";<BR>&nbsp;int node, written = 0;</P>
<P>&nbsp;rcu_read_lock_sched();<BR>&nbsp;for_each_node(node) {<BR>&nbsp;&nbsp;written += scnprintf(buf + written, PAGE_SIZE - written,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "%s%d:%d", delim, node,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unbound_pwq_by_node(wq, node)-&gt;pool-&gt;id);<BR>&nbsp;&nbsp;delim = " ";<BR>&nbsp;}<BR>&nbsp;written += scnprintf(buf + written, PAGE_SIZE - written, "\n");<BR>&nbsp;rcu_read_unlock_sched();</P>
<P>&nbsp;return written;<BR>}</P>
<P>static ssize_t wq_nice_show(struct device *dev, struct device_attribute *attr,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char *buf)<BR>{<BR>&nbsp;struct workqueue_struct *wq = dev_to_wq(dev);<BR>&nbsp;int written;</P>
<P>&nbsp;mutex_lock(&amp;wq-&gt;mutex);<BR>&nbsp;written = scnprintf(buf, PAGE_SIZE, "%d\n", wq-&gt;unbound_attrs-&gt;nice);<BR>&nbsp;mutex_unlock(&amp;wq-&gt;mutex);</P>
<P>&nbsp;return written;<BR>}</P>
<P>/* prepare workqueue_attrs for sysfs store operations */<BR>static struct workqueue_attrs *wq_sysfs_prep_attrs(struct workqueue_struct *wq)<BR>{<BR>&nbsp;struct workqueue_attrs *attrs;</P>
<P>&nbsp;lockdep_assert_held(&amp;wq_pool_mutex);</P>
<P>&nbsp;attrs = alloc_workqueue_attrs(GFP_KERNEL);<BR>&nbsp;if (!attrs)<BR>&nbsp;&nbsp;return NULL;</P>
<P>&nbsp;copy_workqueue_attrs(attrs, wq-&gt;unbound_attrs);<BR>&nbsp;return attrs;<BR>}</P>
<P>static ssize_t wq_nice_store(struct device *dev, struct device_attribute *attr,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const char *buf, size_t count)<BR>{<BR>&nbsp;struct workqueue_struct *wq = dev_to_wq(dev);<BR>&nbsp;struct workqueue_attrs *attrs;<BR>&nbsp;int ret = -ENOMEM;</P>
<P>&nbsp;apply_wqattrs_lock();</P>
<P>&nbsp;attrs = wq_sysfs_prep_attrs(wq);<BR>&nbsp;if (!attrs)<BR>&nbsp;&nbsp;goto out_unlock;</P>
<P>&nbsp;if (sscanf(buf, "%d", &amp;attrs-&gt;nice) == 1 &amp;&amp;<BR>&nbsp;&nbsp;&nbsp;&nbsp; attrs-&gt;nice &gt;= MIN_NICE &amp;&amp; attrs-&gt;nice &lt;= MAX_NICE)<BR>&nbsp;&nbsp;ret = apply_workqueue_attrs_locked(wq, attrs);<BR>&nbsp;else<BR>&nbsp;&nbsp;ret = -EINVAL;</P>
<P>out_unlock:<BR>&nbsp;apply_wqattrs_unlock();<BR>&nbsp;free_workqueue_attrs(attrs);<BR>&nbsp;return ret ?: count;<BR>}</P>
<P>static ssize_t wq_cpumask_show(struct device *dev,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct device_attribute *attr, char *buf)<BR>{<BR>&nbsp;struct workqueue_struct *wq = dev_to_wq(dev);<BR>&nbsp;int written;</P>
<P>&nbsp;mutex_lock(&amp;wq-&gt;mutex);<BR>&nbsp;written = scnprintf(buf, PAGE_SIZE, "%*pb\n",<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cpumask_pr_args(wq-&gt;unbound_attrs-&gt;cpumask));<BR>&nbsp;mutex_unlock(&amp;wq-&gt;mutex);<BR>&nbsp;return written;<BR>}</P>
<P>static ssize_t wq_cpumask_store(struct device *dev,<BR>&nbsp;&nbsp;&nbsp;&nbsp;struct device_attribute *attr,<BR>&nbsp;&nbsp;&nbsp;&nbsp;const char *buf, size_t count)<BR>{<BR>&nbsp;struct workqueue_struct *wq = dev_to_wq(dev);<BR>&nbsp;struct workqueue_attrs *attrs;<BR>&nbsp;int ret = -ENOMEM;</P>
<P>&nbsp;apply_wqattrs_lock();</P>
<P>&nbsp;attrs = wq_sysfs_prep_attrs(wq);<BR>&nbsp;if (!attrs)<BR>&nbsp;&nbsp;goto out_unlock;</P>
<P>&nbsp;ret = cpumask_parse(buf, attrs-&gt;cpumask);<BR>&nbsp;if (!ret)<BR>&nbsp;&nbsp;ret = apply_workqueue_attrs_locked(wq, attrs);</P>
<P>out_unlock:<BR>&nbsp;apply_wqattrs_unlock();<BR>&nbsp;free_workqueue_attrs(attrs);<BR>&nbsp;return ret ?: count;<BR>}</P>
<P>static ssize_t wq_numa_show(struct device *dev, struct device_attribute *attr,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char *buf)<BR>{<BR>&nbsp;struct workqueue_struct *wq = dev_to_wq(dev);<BR>&nbsp;int written;</P>
<P>&nbsp;mutex_lock(&amp;wq-&gt;mutex);<BR>&nbsp;written = scnprintf(buf, PAGE_SIZE, "%d\n",<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; !wq-&gt;unbound_attrs-&gt;no_numa);<BR>&nbsp;mutex_unlock(&amp;wq-&gt;mutex);</P>
<P>&nbsp;return written;<BR>}</P>
<P>static ssize_t wq_numa_store(struct device *dev, struct device_attribute *attr,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const char *buf, size_t count)<BR>{<BR>&nbsp;struct workqueue_struct *wq = dev_to_wq(dev);<BR>&nbsp;struct workqueue_attrs *attrs;<BR>&nbsp;int v, ret = -ENOMEM;</P>
<P>&nbsp;apply_wqattrs_lock();</P>
<P>&nbsp;attrs = wq_sysfs_prep_attrs(wq);<BR>&nbsp;if (!attrs)<BR>&nbsp;&nbsp;goto out_unlock;</P>
<P>&nbsp;ret = -EINVAL;<BR>&nbsp;if (sscanf(buf, "%d", &amp;v) == 1) {<BR>&nbsp;&nbsp;attrs-&gt;no_numa = !v;<BR>&nbsp;&nbsp;ret = apply_workqueue_attrs_locked(wq, attrs);<BR>&nbsp;}</P>
<P>out_unlock:<BR>&nbsp;apply_wqattrs_unlock();<BR>&nbsp;free_workqueue_attrs(attrs);<BR>&nbsp;return ret ?: count;<BR>}</P>
<P>static struct device_attribute wq_sysfs_unbound_attrs[] = {<BR>&nbsp;__ATTR(pool_ids, 0444, wq_pool_ids_show, NULL),<BR>&nbsp;__ATTR(nice, 0644, wq_nice_show, wq_nice_store),<BR>&nbsp;__ATTR(cpumask, 0644, wq_cpumask_show, wq_cpumask_store),<BR>&nbsp;__ATTR(numa, 0644, wq_numa_show, wq_numa_store),<BR>&nbsp;__ATTR_NULL,<BR>};</P>
<P>static struct bus_type wq_subsys = {<BR>&nbsp;.name&nbsp;&nbsp;&nbsp;&nbsp;= "workqueue",<BR>&nbsp;.dev_groups&nbsp;&nbsp;&nbsp;= wq_sysfs_groups,<BR>};</P>
<P>static ssize_t wq_unbound_cpumask_show(struct device *dev,<BR>&nbsp;&nbsp;struct device_attribute *attr, char *buf)<BR>{<BR>&nbsp;int written;</P>
<P>&nbsp;mutex_lock(&amp;wq_pool_mutex);<BR>&nbsp;written = scnprintf(buf, PAGE_SIZE, "%*pb\n",<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cpumask_pr_args(wq_unbound_cpumask));<BR>&nbsp;mutex_unlock(&amp;wq_pool_mutex);</P>
<P>&nbsp;return written;<BR>}</P>
<P>static ssize_t wq_unbound_cpumask_store(struct device *dev,<BR>&nbsp;&nbsp;struct device_attribute *attr, const char *buf, size_t count)<BR>{<BR>&nbsp;cpumask_var_t cpumask;<BR>&nbsp;int ret;</P>
<P>&nbsp;if (!zalloc_cpumask_var(&amp;cpumask, GFP_KERNEL))<BR>&nbsp;&nbsp;return -ENOMEM;</P>
<P>&nbsp;ret = cpumask_parse(buf, cpumask);<BR>&nbsp;if (!ret)<BR>&nbsp;&nbsp;ret = workqueue_set_unbound_cpumask(cpumask);</P>
<P>&nbsp;free_cpumask_var(cpumask);<BR>&nbsp;return ret ? ret : count;<BR>}</P>
<P>static struct device_attribute wq_sysfs_cpumask_attr =<BR>&nbsp;__ATTR(cpumask, 0644, wq_unbound_cpumask_show,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wq_unbound_cpumask_store);</P>
<P>static int __init wq_sysfs_init(void)<BR>{<BR>&nbsp;int err;</P>
<P>&nbsp;err = subsys_virtual_register(&amp;wq_subsys, NULL);<BR>&nbsp;if (err)<BR>&nbsp;&nbsp;return err;</P>
<P>&nbsp;return device_create_file(wq_subsys.dev_root, &amp;wq_sysfs_cpumask_attr);<BR>}<BR>core_initcall(wq_sysfs_init);</P>
<P>static void wq_device_release(struct device *dev)<BR>{<BR>&nbsp;struct wq_device *wq_dev = container_of(dev, struct wq_device, dev);</P>
<P>&nbsp;kfree(wq_dev);<BR>}</P>
<P>/**<BR>&nbsp;* workqueue_sysfs_register - make a workqueue visible in sysfs<BR>&nbsp;* @wq: the workqueue to register<BR>&nbsp;*<BR>&nbsp;* Expose @wq in sysfs under /sys/bus/workqueue/devices.<BR>&nbsp;* alloc_workqueue*() automatically calls this function if WQ_SYSFS is set<BR>&nbsp;* which is the preferred method.<BR>&nbsp;*<BR>&nbsp;* Workqueue user should use this function directly iff it wants to apply<BR>&nbsp;* workqueue_attrs before making the workqueue visible in sysfs; otherwise,<BR>&nbsp;* apply_workqueue_attrs() may race against userland updating the<BR>&nbsp;* attributes.<BR>&nbsp;*<BR>&nbsp;* Return: 0 on success, -errno on failure.<BR>&nbsp;*/<BR>int workqueue_sysfs_register(struct workqueue_struct *wq)<BR>{<BR>&nbsp;struct wq_device *wq_dev;<BR>&nbsp;int ret;</P>
<P>&nbsp;/*<BR>&nbsp; * Adjusting max_active or creating new pwqs by applying<BR>&nbsp; * attributes breaks ordering guarantee.&nbsp; Disallow exposing ordered<BR>&nbsp; * workqueues.<BR>&nbsp; */<BR>&nbsp;if (WARN_ON(wq-&gt;flags &amp; __WQ_ORDERED))<BR>&nbsp;&nbsp;return -EINVAL;</P>
<P>&nbsp;wq-&gt;wq_dev = wq_dev = kzalloc(sizeof(*wq_dev), GFP_KERNEL);<BR>&nbsp;if (!wq_dev)<BR>&nbsp;&nbsp;return -ENOMEM;</P>
<P>&nbsp;wq_dev-&gt;wq = wq;<BR>&nbsp;wq_dev-&gt;dev.bus = &amp;wq_subsys;<BR>&nbsp;wq_dev-&gt;dev.init_name = wq-&gt;name;<BR>&nbsp;wq_dev-&gt;dev.release = wq_device_release;</P>
<P>&nbsp;/*<BR>&nbsp; * unbound_attrs are created separately.&nbsp; Suppress uevent until<BR>&nbsp; * everything is ready.<BR>&nbsp; */<BR>&nbsp;dev_set_uevent_suppress(&amp;wq_dev-&gt;dev, true);</P>
<P>&nbsp;ret = device_register(&amp;wq_dev-&gt;dev);<BR>&nbsp;if (ret) {<BR>&nbsp;&nbsp;kfree(wq_dev);<BR>&nbsp;&nbsp;wq-&gt;wq_dev = NULL;<BR>&nbsp;&nbsp;return ret;<BR>&nbsp;}</P>
<P>&nbsp;if (wq-&gt;flags &amp; WQ_UNBOUND) {<BR>&nbsp;&nbsp;struct device_attribute *attr;</P>
<P>&nbsp;&nbsp;for (attr = wq_sysfs_unbound_attrs; attr-&gt;attr.name; attr++) {<BR>&nbsp;&nbsp;&nbsp;ret = device_create_file(&amp;wq_dev-&gt;dev, attr);<BR>&nbsp;&nbsp;&nbsp;if (ret) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;device_unregister(&amp;wq_dev-&gt;dev);<BR>&nbsp;&nbsp;&nbsp;&nbsp;wq-&gt;wq_dev = NULL;<BR>&nbsp;&nbsp;&nbsp;&nbsp;return ret;<BR>&nbsp;&nbsp;&nbsp;}<BR>&nbsp;&nbsp;}<BR>&nbsp;}</P>
<P>&nbsp;dev_set_uevent_suppress(&amp;wq_dev-&gt;dev, false);<BR>&nbsp;kobject_uevent(&amp;wq_dev-&gt;dev.kobj, KOBJ_ADD);<BR>&nbsp;return 0;<BR>}</P>
<P>/**<BR>&nbsp;* workqueue_sysfs_unregister - undo workqueue_sysfs_register()<BR>&nbsp;* @wq: the workqueue to unregister<BR>&nbsp;*<BR>&nbsp;* If @wq is registered to sysfs by workqueue_sysfs_register(), unregister.<BR>&nbsp;*/<BR>static void workqueue_sysfs_unregister(struct workqueue_struct *wq)<BR>{<BR>&nbsp;struct wq_device *wq_dev = wq-&gt;wq_dev;</P>
<P>&nbsp;if (!wq-&gt;wq_dev)<BR>&nbsp;&nbsp;return;</P>
<P>&nbsp;wq-&gt;wq_dev = NULL;<BR>&nbsp;device_unregister(&amp;wq_dev-&gt;dev);<BR>}<BR>#else&nbsp;/* CONFIG_SYSFS */<BR>static void workqueue_sysfs_unregister(struct workqueue_struct *wq)&nbsp;{ }<BR>#endif&nbsp;/* CONFIG_SYSFS */