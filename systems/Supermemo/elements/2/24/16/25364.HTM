&nbsp;struct kset subsys;<BR>&nbsp;struct kset *devices_kset;<BR>&nbsp;struct list_head interfaces;<BR>&nbsp;struct mutex mutex; 
<P></P>
<P>&nbsp;struct kset *drivers_kset;<BR>&nbsp;struct klist klist_devices;<BR>&nbsp;struct klist klist_drivers;<BR>&nbsp;struct blocking_notifier_head bus_notifier;<BR>&nbsp;unsigned int drivers_autoprobe:1;<BR>&nbsp;struct bus_type *bus;</P>
<P>&nbsp;struct kset glue_dirs;<BR>&nbsp;struct class *class;
<P>/**<BR>&nbsp;* struct subsys_private - structure to hold the private to the driver core portions of the bus_type/class structure.<BR>&nbsp;*<BR>&nbsp;* @subsys - the struct kset that defines this subsystem<BR>&nbsp;* @devices_kset - the subsystem's 'devices' directory<BR>&nbsp;* @interfaces - list of subsystem interfaces associated<BR>&nbsp;* @mutex - protect the devices, and interfaces lists.<BR>&nbsp;*<BR>&nbsp;* @drivers_kset - the list of drivers associated<BR>&nbsp;* @klist_devices - the klist to iterate over the @devices_kset<BR>&nbsp;* @klist_drivers - the klist to iterate over the @drivers_kset<BR>&nbsp;* @bus_notifier - the bus notifier list for anything that cares about things<BR>&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; on this bus.<BR>&nbsp;* @bus - pointer back to the struct bus_type that this structure is associated<BR>&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; with.<BR>&nbsp;*<BR>&nbsp;* @glue_dirs - "glue" directory to put in-between the parent device to<BR>&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; avoid namespace conflicts<BR>&nbsp;* @class - pointer back to the struct class that this structure is associated<BR>&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; with.<BR>&nbsp;*<BR>&nbsp;* This structure is the one that is the actual kobject allowing struct<BR>&nbsp;* bus_type/class to be statically allocated safely.&nbsp; Nothing outside of the<BR>&nbsp;* driver core should ever touch these fields.<BR>&nbsp;*/<BR>#define to_subsys_private(obj) container_of(obj, struct subsys_private, subsys.kobj)