Attributes<BR>~~~~~~~~~~ 
<P></P>
<P>Attributes can be exported for kobjects in the form of regular files in<BR>the filesystem. Sysfs forwards file I/O operations to methods defined<BR>for the attributes, providing a means to read and write kernel<BR>attributes.</P>
<P>Attributes should be ASCII text files, preferably with only one value<BR>per file. It is noted that it may not be efficient to contain only one<BR>value per file, so it is socially acceptable to express an array of<BR>values of the same type. </P>
<P>Mixing types, expressing multiple lines of data, and doing fancy<BR>formatting of data is heavily frowned upon. Doing these things may get<BR>you publicly humiliated and your code rewritten without notice. </P>
<P><BR>An attribute definition is simply:</P><PRE style="BORDER-TOP: 0px; BORDER-RIGHT: 0px; FONT-VARIANT: normal; WORD-SPACING: 0px; BORDER-BOTTOM: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; MARGIN: 0px; BORDER-LEFT: 0px; LETTER-SPACING: normal; LINE-HEIGHT: normal; BACKGROUND-COLOR: rgb(255,255,255); TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><A class=l style="TEXT-DECORATION: none; WIDTH: 6ex; BACKGROUND: orange; COLOR: yellow; TEXT-ALIGN: right; DISPLAY: inline-block; PADDING-RIGHT: 0px; MARGIN-RIGHT: 0.5ex" href="http://172.21.12.145:8080/source/xref/linux-4.1/include/linux/sysfs.h#29" name=29><FONT size=4>29</FONT></A><FONT size=4><B>struct</B> </FONT><A class=xs style="TEXT-DECORATION: none; FONT-WEIGHT: bold; COLOR: rgb(153,0,153); FONT-STYLE: italic" name=attribute></A><A class=xs style="TEXT-DECORATION: none; FONT-WEIGHT: bold; COLOR: rgb(153,0,153); FONT-STYLE: italic" href="http://172.21.12.145:8080/source/s?refs=attribute&amp;project=linux-4.1"><FONT size=4>attribute</FONT></A><FONT size=4> {
</FONT><A class=hl style="TEXT-DECORATION: none; WIDTH: 6ex; COLOR: rgb(0,0,0); TEXT-ALIGN: right; DISPLAY: inline-block; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(221,221,221); MARGIN-RIGHT: 0.5ex" href="http://172.21.12.145:8080/source/xref/linux-4.1/include/linux/sysfs.h#30" name=30><FONT size=4>30</FONT></A><FONT size=4>	<B>const</B> <B>char</B>		*</FONT><A class=xmb style="TEXT-DECORATION: none; FONT-WEIGHT: bold; COLOR: rgb(0,153,0)" name=name></A><A class=xmb style="TEXT-DECORATION: none; FONT-WEIGHT: bold; COLOR: rgb(0,153,0)" href="http://172.21.12.145:8080/source/s?refs=name&amp;project=linux-4.1"><FONT size=4>name</FONT></A><FONT size=4>;
</FONT><A class=l style="TEXT-DECORATION: none; WIDTH: 6ex; COLOR: rgb(102,102,102); TEXT-ALIGN: right; DISPLAY: inline-block; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(221,221,221); MARGIN-RIGHT: 0.5ex" href="http://172.21.12.145:8080/source/xref/linux-4.1/include/linux/sysfs.h#31" name=31><FONT size=4>31</FONT></A><FONT size=4>	</FONT><A style="TEXT-DECORATION: none; COLOR: rgb(32,32,98)" href="http://172.21.12.145:8080/source/s?defs=umode_t&amp;project=linux-4.1"><FONT size=4>umode_t</FONT></A><FONT size=4>			</FONT><A class=xmb style="TEXT-DECORATION: none; FONT-WEIGHT: bold; COLOR: rgb(0,153,0)" name=mode></A><A class=xmb style="TEXT-DECORATION: none; FONT-WEIGHT: bold; COLOR: rgb(0,153,0)" href="http://172.21.12.145:8080/source/s?refs=mode&amp;project=linux-4.1"><FONT size=4>mode</FONT></A><FONT size=4>;
</FONT><A class=l style="TEXT-DECORATION: none; WIDTH: 6ex; COLOR: rgb(102,102,102); TEXT-ALIGN: right; DISPLAY: inline-block; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(221,221,221); MARGIN-RIGHT: 0.5ex" href="http://172.21.12.145:8080/source/xref/linux-4.1/include/linux/sysfs.h#32" name=32><FONT size=4>32</FONT></A><FONT size=4>#<B>ifdef</B> </FONT><A style="TEXT-DECORATION: none; COLOR: rgb(32,32,98)" href="http://172.21.12.145:8080/source/s?defs=CONFIG_DEBUG_LOCK_ALLOC&amp;project=linux-4.1"><FONT size=4>CONFIG_DEBUG_LOCK_ALLOC</FONT></A>
<A class=l style="TEXT-DECORATION: none; WIDTH: 6ex; COLOR: rgb(102,102,102); TEXT-ALIGN: right; DISPLAY: inline-block; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(221,221,221); MARGIN-RIGHT: 0.5ex" href="http://172.21.12.145:8080/source/xref/linux-4.1/include/linux/sysfs.h#33" name=33><FONT size=4>33</FONT></A><FONT size=4>	<B>bool</B>			</FONT><A class=xmb style="TEXT-DECORATION: none; FONT-WEIGHT: bold; COLOR: rgb(0,153,0)" name=ignore_lockdep></A><A class=xmb style="TEXT-DECORATION: underline; FONT-WEIGHT: bold; COLOR: rgb(0,153,0)" href="http://172.21.12.145:8080/source/s?refs=ignore_lockdep&amp;project=linux-4.1"><FONT size=4>ignore_lockdep</FONT></A><FONT size=4>:<SPAN class=n style="COLOR: rgb(165,42,42)">1</SPAN>;
</FONT><A class=l style="TEXT-DECORATION: none; WIDTH: 6ex; COLOR: rgb(102,102,102); TEXT-ALIGN: right; DISPLAY: inline-block; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(221,221,221); MARGIN-RIGHT: 0.5ex" href="http://172.21.12.145:8080/source/xref/linux-4.1/include/linux/sysfs.h#34" name=34><FONT size=4>34</FONT></A><FONT size=4>	<B>struct</B> </FONT><A style="TEXT-DECORATION: none; COLOR: rgb(32,32,98)" href="http://172.21.12.145:8080/source/s?defs=lock_class_key&amp;project=linux-4.1"><FONT size=4>lock_class_key</FONT></A><FONT size=4>	*</FONT><A class=xmb style="TEXT-DECORATION: none; FONT-WEIGHT: bold; COLOR: rgb(0,153,0)" name=key></A><A class=xmb style="TEXT-DECORATION: none; FONT-WEIGHT: bold; COLOR: rgb(0,153,0)" href="http://172.21.12.145:8080/source/s?refs=key&amp;project=linux-4.1"><FONT size=4>key</FONT></A><FONT size=4>;
</FONT><A class=l style="TEXT-DECORATION: none; WIDTH: 6ex; COLOR: rgb(102,102,102); TEXT-ALIGN: right; DISPLAY: inline-block; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(221,221,221); MARGIN-RIGHT: 0.5ex" href="http://172.21.12.145:8080/source/xref/linux-4.1/include/linux/sysfs.h#35" name=35><FONT size=4>35</FONT></A><FONT size=4>	<B>struct</B> </FONT><A style="TEXT-DECORATION: none; COLOR: rgb(32,32,98)" href="http://172.21.12.145:8080/source/s?defs=lock_class_key&amp;project=linux-4.1"><FONT size=4>lock_class_key</FONT></A><FONT size=4>	</FONT><A class=xmb style="TEXT-DECORATION: none; FONT-WEIGHT: bold; COLOR: rgb(0,153,0)" name=skey></A><A class=xmb style="TEXT-DECORATION: none; FONT-WEIGHT: bold; COLOR: rgb(0,153,0)" href="http://172.21.12.145:8080/source/s?refs=skey&amp;project=linux-4.1"><FONT size=4>skey</FONT></A><FONT size=4>;
</FONT><A class=l style="TEXT-DECORATION: none; WIDTH: 6ex; COLOR: rgb(102,102,102); TEXT-ALIGN: right; DISPLAY: inline-block; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(221,221,221); MARGIN-RIGHT: 0.5ex" href="http://172.21.12.145:8080/source/xref/linux-4.1/include/linux/sysfs.h#36" name=36><FONT size=4>36</FONT></A><FONT size=4>#<B>endif</B>
</FONT><A class=l style="TEXT-DECORATION: none; WIDTH: 6ex; COLOR: rgb(102,102,102); TEXT-ALIGN: right; DISPLAY: inline-block; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(221,221,221); MARGIN-RIGHT: 0.5ex" href="http://172.21.12.145:8080/source/xref/linux-4.1/include/linux/sysfs.h#37" name=37><FONT size=4>37</FONT></A><FONT size=4>};</FONT></PRE>
<P><BR>int sysfs_create_file(struct kobject * kobj, const struct attribute * attr);<BR>void sysfs_remove_file(struct kobject * kobj, const struct attribute * attr);</P>
<P><BR>A bare attribute contains no means to read or write the value of the<BR>attribute. Subsystems are encouraged to define their own attribute<BR>structure and wrapper functions for adding and removing attributes for<BR>a specific object type. </P>
<P>For example, the driver model defines struct device_attribute like:</P>
<P>struct device_attribute {<BR>&nbsp;struct attribute&nbsp;attr;<BR>&nbsp;ssize_t (*show)(struct device *dev, struct device_attribute *attr,<BR>&nbsp;&nbsp;&nbsp;char *buf);<BR>&nbsp;ssize_t (*store)(struct device *dev, struct device_attribute *attr,<BR>&nbsp;&nbsp;&nbsp; const char *buf, size_t count);<BR>};</P>
<P>int device_create_file(struct device *, const struct device_attribute *);<BR>void device_remove_file(struct device *, const struct device_attribute *);</P>
<P><FONT class=extract>It also defines this helper for defining device attributes: </FONT></P>
<P><FONT class=extract>#define DEVICE_ATTR(_name, _mode, _show, _store) \<BR>struct device_attribute dev_attr_##_name = __ATTR(_name, _mode, _show, _store)</FONT></P>
<P><FONT class=extract>For example, declaring</FONT></P>
<P><FONT class=extract>static DEVICE_ATTR(foo, S_IWUSR | S_IRUGO, show_foo, store_foo);</FONT></P>
<P><FONT class=extract>is equivalent to doing:</FONT></P>
<P><FONT class=extract>static struct device_attribute dev_attr_foo = {<BR>&nbsp;.attr = {<BR>&nbsp;&nbsp;.name = "foo",<BR>&nbsp;&nbsp;.mode = S_IWUSR | S_IRUGO,<BR>&nbsp;},<BR>&nbsp;.show = show_foo,<BR>&nbsp;.store = store_foo,<BR>};</FONT>