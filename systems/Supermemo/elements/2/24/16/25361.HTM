<FONT class=extract>/**<BR>&nbsp;* klist_add_head - Initialize a klist_node and add it to front.<BR>&nbsp;* @n: node we're adding.<BR>&nbsp;* @k: klist it's going on.<BR>&nbsp;*/<BR>void klist_add_head(struct klist_node *n, struct klist *k)<BR>{<BR>&nbsp;klist_node_init(k, n);<BR>&nbsp;add_head(k, n);<BR>}<BR>EXPORT_SYMBOL_GPL(klist_add_head);</FONT> 
<P></P>
<P><FONT class=extract>/**<BR>&nbsp;* klist_add_tail - Initialize a klist_node and add it to back.<BR>&nbsp;* @n: node we're adding.<BR>&nbsp;* @k: klist it's going on.<BR>&nbsp;*/<BR>void klist_add_tail(struct klist_node *n, struct klist *k)<BR>{<BR>&nbsp;klist_node_init(k, n);<BR>&nbsp;add_tail(k, n);<BR>}<BR>EXPORT_SYMBOL_GPL(klist_add_tail);</FONT></P>
<P><FONT class=extract>/**<BR>&nbsp;* klist_add_behind - Init a klist_node and add it after an existing node<BR>&nbsp;* @n: node we're adding.<BR>&nbsp;* @pos: node to put @n after<BR>&nbsp;*/<BR>void klist_add_behind(struct klist_node *n, struct klist_node *pos)<BR>{<BR>&nbsp;struct klist *k = knode_klist(pos);</FONT></P>
<P><FONT class=extract>&nbsp;klist_node_init(k, n);<BR>&nbsp;spin_lock(&amp;k-&gt;k_lock);<BR>&nbsp;list_add(&amp;n-&gt;n_node, &amp;pos-&gt;n_node);<BR>&nbsp;spin_unlock(&amp;k-&gt;k_lock);<BR>}<BR>EXPORT_SYMBOL_GPL(klist_add_behind);</FONT></P>
<P><FONT class=extract>/**<BR>&nbsp;* klist_add_before - Init a klist_node and add it before an existing node<BR>&nbsp;* @n: node we're adding.<BR>&nbsp;* @pos: node to put @n after<BR>&nbsp;*/<BR>void klist_add_before(struct klist_node *n, struct klist_node *pos)<BR>{<BR>&nbsp;struct klist *k = knode_klist(pos);</FONT></P>
<P><FONT class=extract>&nbsp;klist_node_init(k, n);<BR>&nbsp;spin_lock(&amp;k-&gt;k_lock);<BR>&nbsp;list_add_tail(&amp;n-&gt;n_node, &amp;pos-&gt;n_node);<BR>&nbsp;spin_unlock(&amp;k-&gt;k_lock);<BR>}<BR>EXPORT_SYMBOL_GPL(klist_add_before);</FONT>