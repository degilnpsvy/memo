/*<BR><FONT class=extract>&nbsp;* System-wide workqueues which are always present.<BR>&nbsp;*<BR>&nbsp;* system_wq is the one used by schedule[_delayed]_work[_on]().<BR>&nbsp;* Multi-CPU multi-threaded.&nbsp; There are users which expect relatively<BR>&nbsp;* short queue flush time.&nbsp; Don't queue works which can run for too<BR>&nbsp;* long.</FONT><BR>&nbsp;*<BR><FONT class=extract>&nbsp;* system_highpri_wq is similar to system_wq but for work items which<BR>&nbsp;* require WQ_HIGHPRI.</FONT><BR>&nbsp;*<BR><FONT class=extract>&nbsp;* system_long_wq is similar to system_wq but may host long running<BR>&nbsp;* works.&nbsp; Queue flushing might take relatively long.</FONT><BR>&nbsp;*<BR><FONT class=extract>&nbsp;* system_unbound_wq is unbound workqueue.&nbsp; Workers are not bound to<BR>&nbsp;* any specific CPU, not concurrency managed, and all queued works are<BR>&nbsp;* executed immediately as long as max_active limit is not reached and<BR>&nbsp;* resources are available.</FONT><BR>&nbsp;*<BR><FONT class=extract>&nbsp;* system_freezable_wq is equivalent to system_wq except that it's<BR>&nbsp;* freezable.</FONT><BR>&nbsp;*<BR><FONT class=extract>&nbsp;* *_power_efficient_wq are inclined towards saving power and converted<BR>&nbsp;* into WQ_UNBOUND variants if 'wq_power_efficient' is enabled; otherwise,<BR>&nbsp;* they are same as their non-power-efficient counterparts - e.g.<BR>&nbsp;* system_power_efficient_wq is identical to system_wq if<BR>&nbsp;* 'wq_power_efficient' is disabled.&nbsp; See WQ_POWER_EFFICIENT for more info.</FONT><BR>&nbsp;*/<BR>extern struct workqueue_struct *system_wq;<BR>extern struct workqueue_struct *system_highpri_wq;<BR>extern struct workqueue_struct *system_long_wq;<BR>extern struct workqueue_struct *system_unbound_wq;<BR>extern struct workqueue_struct *system_freezable_wq;<BR>extern struct workqueue_struct *system_power_efficient_wq;<BR>extern struct workqueue_struct *system_freezable_power_efficient_wq;