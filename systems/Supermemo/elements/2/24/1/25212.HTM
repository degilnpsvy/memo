/**<BR>&nbsp;* <FONT class=clozed>kset_find_obj</FONT> - search for object in kset.<BR>&nbsp;* @kset: kset we're looking in.<BR>&nbsp;* @name: object's name.<BR>&nbsp;*<BR>&nbsp;* Lock kset via @kset-&gt;subsys, and iterate over @kset-&gt;list,<BR>&nbsp;* looking for a matching kobject. If matching object is found<BR>&nbsp;* take a reference and return the object.<BR>&nbsp;*/<BR>struct kobject *kset_find_obj(struct kset *kset, const char *name)<BR>{<BR>&nbsp;struct kobject *k;<BR>&nbsp;struct kobject *ret = NULL; 
<P></P>
<P>&nbsp;<FONT class=clozed>spin_lock(&amp;kset-&gt;list_lock);</FONT></P>
<P><FONT class=clozed>&nbsp;list_for_each_entry(k, &amp;kset-&gt;list, entry) {<BR>&nbsp;&nbsp;if (kobject_name(k) &amp;&amp; !strcmp(kobject_name(k), name)) {<BR>&nbsp;&nbsp;&nbsp;ret = kobject_get_unless_zero(k);<BR>&nbsp;&nbsp;&nbsp;break;<BR>&nbsp;&nbsp;}<BR>&nbsp;}</FONT></P>
<P>&nbsp;spin_unlock(&amp;kset-&gt;list_lock);<BR>&nbsp;return ret;<BR>}