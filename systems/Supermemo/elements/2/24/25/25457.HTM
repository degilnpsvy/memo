/*<BR>&nbsp;*&nbsp;Atomic notifier chain routines.&nbsp; Registration and unregistration<BR>&nbsp;*&nbsp;use a spinlock, and call_chain is synchronized by RCU (no locks).<BR>&nbsp;*/
<P></P>
<P>/**<BR>&nbsp;*&nbsp;atomic_notifier_chain_register - Add notifier to an atomic notifier chain<BR>&nbsp;*&nbsp;@nh: Pointer to head of the atomic notifier chain<BR>&nbsp;*&nbsp;@n: New entry in notifier chain<BR>&nbsp;*<BR>&nbsp;*&nbsp;Adds a notifier to an atomic notifier chain.<BR>&nbsp;*<BR>&nbsp;*&nbsp;Currently always returns zero.<BR>&nbsp;*/<BR>int atomic_notifier_chain_register(struct atomic_notifier_head *nh,<BR>&nbsp;&nbsp;struct notifier_block *n)<BR>{<BR>&nbsp;unsigned long flags;<BR>&nbsp;int ret;</P>
<P>&nbsp;spin_lock_irqsave(&amp;nh-&gt;lock, flags);<BR>&nbsp;ret = notifier_chain_register(&amp;nh-&gt;head, n);<BR>&nbsp;spin_unlock_irqrestore(&amp;nh-&gt;lock, flags);<BR>&nbsp;return ret;<BR>}<BR>EXPORT_SYMBOL_GPL(atomic_notifier_chain_register);</P>
<P>/**<BR>&nbsp;*&nbsp;atomic_notifier_chain_unregister - Remove notifier from an atomic notifier chain<BR>&nbsp;*&nbsp;@nh: Pointer to head of the atomic notifier chain<BR>&nbsp;*&nbsp;@n: Entry to remove from notifier chain<BR>&nbsp;*<BR>&nbsp;*&nbsp;Removes a notifier from an atomic notifier chain.<BR>&nbsp;*<BR>&nbsp;*&nbsp;Returns zero on success or %-ENOENT on failure.<BR>&nbsp;*/<BR>int atomic_notifier_chain_unregister(struct atomic_notifier_head *nh,<BR>&nbsp;&nbsp;struct notifier_block *n)<BR>{<BR>&nbsp;unsigned long flags;<BR>&nbsp;int ret;</P>
<P>&nbsp;spin_lock_irqsave(&amp;nh-&gt;lock, flags);<BR>&nbsp;ret = notifier_chain_unregister(&amp;nh-&gt;head, n);<BR>&nbsp;spin_unlock_irqrestore(&amp;nh-&gt;lock, flags);<BR>&nbsp;synchronize_rcu();<BR>&nbsp;return ret;<BR>}<BR>EXPORT_SYMBOL_GPL(atomic_notifier_chain_unregister);