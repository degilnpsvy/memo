<FONT class=extract>/**<BR>&nbsp;* list_for_each&nbsp;-&nbsp;iterate over a list<BR>&nbsp;* @pos:&nbsp;the &amp;struct list_head to use as a loop cursor.<BR>&nbsp;* @head:&nbsp;the head for your list.<BR>&nbsp;*/<BR>#define list_for_each(pos, head) \<BR>&nbsp;for (pos = (head)-&gt;next; pos != (head); pos = pos-&gt;next)</FONT> 
<P></P>
<P><FONT class=extract>/**<BR>&nbsp;* list_for_each_prev&nbsp;-&nbsp;iterate over a list backwards<BR>&nbsp;* @pos:&nbsp;the &amp;struct list_head to use as a loop cursor.<BR>&nbsp;* @head:&nbsp;the head for your list.<BR>&nbsp;*/<BR>#define list_for_each_prev(pos, head) \<BR>&nbsp;for (pos = (head)-&gt;prev; pos != (head); pos = pos-&gt;prev)</FONT></P>
<P><FONT class=extract>/**<BR>&nbsp;* list_for_each_safe - iterate over a list safe against removal of list entry<BR>&nbsp;* @pos:&nbsp;the &amp;struct list_head to use as a loop cursor.<BR>&nbsp;* @n:&nbsp;&nbsp;another &amp;struct list_head to use as temporary storage<BR>&nbsp;* @head:&nbsp;the head for your list.<BR>&nbsp;*/<BR>#define list_for_each_safe(pos, n, head) \<BR>&nbsp;for (pos = (head)-&gt;next, n = pos-&gt;next; pos != (head); \<BR>&nbsp;&nbsp;pos = n, n = pos-&gt;next)</FONT></P>
<P><FONT class=extract>/**<BR>&nbsp;* list_for_each_prev_safe - iterate over a list backwards safe against removal of list entry<BR>&nbsp;* @pos:&nbsp;the &amp;struct list_head to use as a loop cursor.<BR>&nbsp;* @n:&nbsp;&nbsp;another &amp;struct list_head to use as temporary storage<BR>&nbsp;* @head:&nbsp;the head for your list.<BR>&nbsp;*/<BR>#define list_for_each_prev_safe(pos, n, head) \<BR>&nbsp;for (pos = (head)-&gt;prev, n = pos-&gt;prev; \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pos != (head); \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pos = n, n = pos-&gt;prev)</FONT></P>
<P><FONT class=extract>/**<BR>&nbsp;* list_for_each_entry&nbsp;-&nbsp;iterate over list of given type<BR>&nbsp;* @pos:&nbsp;the type * to use as a loop cursor.<BR>&nbsp;* @head:&nbsp;the head for your list.<BR>&nbsp;* @member:&nbsp;the name of the list_head within the struct.<BR>&nbsp;*/<BR>#define list_for_each_entry(pos, head, member)&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;for (pos = list_first_entry(head, typeof(*pos), member);&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;pos-&gt;member != (head);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pos = list_next_entry(pos, member))</FONT></P>
<P><FONT class=extract>/**<BR>&nbsp;* list_for_each_entry_reverse - iterate backwards over list of given type.<BR>&nbsp;* @pos:&nbsp;the type * to use as a loop cursor.<BR>&nbsp;* @head:&nbsp;the head for your list.<BR>&nbsp;* @member:&nbsp;the name of the list_head within the struct.<BR>&nbsp;*/<BR>#define list_for_each_entry_reverse(pos, head, member)&nbsp;&nbsp;&nbsp;\<BR>&nbsp;for (pos = list_last_entry(head, typeof(*pos), member);&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;pos-&gt;member != (head); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pos = list_prev_entry(pos, member))</FONT></P>
<P><FONT class=extract>/**<BR>&nbsp;* list_prepare_entry - prepare a pos entry for use in list_for_each_entry_continue()<BR>&nbsp;* @pos:&nbsp;the type * to use as a start point<BR>&nbsp;* @head:&nbsp;the head of the list<BR>&nbsp;* @member:&nbsp;the name of the list_head within the struct.<BR>&nbsp;*<BR>&nbsp;* Prepares a pos entry for use as a start point in list_for_each_entry_continue().<BR>&nbsp;*/<BR>#define list_prepare_entry(pos, head, member) \<BR>&nbsp;((pos) ? : list_entry(head, typeof(*pos), member))</FONT></P>
<P><FONT class=extract>/**<BR>&nbsp;* list_for_each_entry_continue - continue iteration over list of given type<BR>&nbsp;* @pos:&nbsp;the type * to use as a loop cursor.<BR>&nbsp;* @head:&nbsp;the head for your list.<BR>&nbsp;* @member:&nbsp;the name of the list_head within the struct.<BR>&nbsp;*<BR>&nbsp;* Continue to iterate over list of given type, continuing after<BR>&nbsp;* the current position.<BR>&nbsp;*/<BR>#define list_for_each_entry_continue(pos, head, member) &nbsp;&nbsp;\<BR>&nbsp;for (pos = list_next_entry(pos, member);&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;pos-&gt;member != (head);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pos = list_next_entry(pos, member))</FONT></P>
<P><FONT class=extract>/**<BR>&nbsp;* list_for_each_entry_continue_reverse - iterate backwards from the given point<BR>&nbsp;* @pos:&nbsp;the type * to use as a loop cursor.<BR>&nbsp;* @head:&nbsp;the head for your list.<BR>&nbsp;* @member:&nbsp;the name of the list_head within the struct.<BR>&nbsp;*<BR>&nbsp;* Start to iterate over list of given type backwards, continuing after<BR>&nbsp;* the current position.<BR>&nbsp;*/<BR>#define list_for_each_entry_continue_reverse(pos, head, member)&nbsp;&nbsp;\<BR>&nbsp;for (pos = list_prev_entry(pos, member);&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;pos-&gt;member != (head);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pos = list_prev_entry(pos, member))</FONT></P>
<P><FONT class=extract>/**<BR>&nbsp;* list_for_each_entry_from - iterate over list of given type from the current point<BR>&nbsp;* @pos:&nbsp;the type * to use as a loop cursor.<BR>&nbsp;* @head:&nbsp;the head for your list.<BR>&nbsp;* @member:&nbsp;the name of the list_head within the struct.<BR>&nbsp;*<BR>&nbsp;* Iterate over list of given type, continuing from current position.<BR>&nbsp;*/<BR>#define list_for_each_entry_from(pos, head, member) &nbsp;&nbsp;&nbsp;\<BR>&nbsp;for (; &amp;pos-&gt;member != (head);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pos = list_next_entry(pos, member))</FONT></P>
<P><FONT class=extract>/**<BR>&nbsp;* list_for_each_entry_safe - iterate over list of given type safe against removal of list entry<BR>&nbsp;* @pos:&nbsp;the type * to use as a loop cursor.<BR>&nbsp;* @n:&nbsp;&nbsp;another type * to use as temporary storage<BR>&nbsp;* @head:&nbsp;the head for your list.<BR>&nbsp;* @member:&nbsp;the name of the list_head within the struct.<BR>&nbsp;*/<BR>#define list_for_each_entry_safe(pos, n, head, member)&nbsp;&nbsp;&nbsp;\<BR>&nbsp;for (pos = list_first_entry(head, typeof(*pos), member),&nbsp;\<BR>&nbsp;&nbsp;n = list_next_entry(pos, member);&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;pos-&gt;member != (head); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pos = n, n = list_next_entry(n, member))</FONT></P>
<P><FONT class=extract>/**<BR>&nbsp;* list_for_each_entry_safe_continue - continue list iteration safe against removal<BR>&nbsp;* @pos:&nbsp;the type * to use as a loop cursor.<BR>&nbsp;* @n:&nbsp;&nbsp;another type * to use as temporary storage<BR>&nbsp;* @head:&nbsp;the head for your list.<BR>&nbsp;* @member:&nbsp;the name of the list_head within the struct.<BR>&nbsp;*<BR>&nbsp;* Iterate over list of given type, continuing after current point,<BR>&nbsp;* safe against removal of list entry.<BR>&nbsp;*/<BR>#define list_for_each_entry_safe_continue(pos, n, head, member) &nbsp;&nbsp;\<BR>&nbsp;for (pos = list_next_entry(pos, member), &nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;n = list_next_entry(pos, member);&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;pos-&gt;member != (head);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pos = n, n = list_next_entry(n, member))</FONT></P>
<P><FONT class=extract>/**<BR>&nbsp;* list_for_each_entry_safe_from - iterate over list from current point safe against removal<BR>&nbsp;* @pos:&nbsp;the type * to use as a loop cursor.<BR>&nbsp;* @n:&nbsp;&nbsp;another type * to use as temporary storage<BR>&nbsp;* @head:&nbsp;the head for your list.<BR>&nbsp;* @member:&nbsp;the name of the list_head within the struct.<BR>&nbsp;*<BR>&nbsp;* Iterate over list of given type from current point, safe against<BR>&nbsp;* removal of list entry.<BR>&nbsp;*/<BR>#define list_for_each_entry_safe_from(pos, n, head, member) &nbsp;&nbsp;&nbsp;\<BR>&nbsp;for (n = list_next_entry(pos, member);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;pos-&gt;member != (head);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pos = n, n = list_next_entry(n, member))</FONT></P>
<P><FONT class=extract>/**<BR>&nbsp;* list_for_each_entry_safe_reverse - iterate backwards over list safe against removal<BR>&nbsp;* @pos:&nbsp;the type * to use as a loop cursor.<BR>&nbsp;* @n:&nbsp;&nbsp;another type * to use as temporary storage<BR>&nbsp;* @head:&nbsp;the head for your list.<BR>&nbsp;* @member:&nbsp;the name of the list_head within the struct.<BR>&nbsp;*<BR>&nbsp;* Iterate backwards over list of given type, safe against removal<BR>&nbsp;* of list entry.<BR>&nbsp;*/<BR>#define list_for_each_entry_safe_reverse(pos, n, head, member)&nbsp;&nbsp;\<BR>&nbsp;for (pos = list_last_entry(head, typeof(*pos), member),&nbsp;&nbsp;\<BR>&nbsp;&nbsp;n = list_prev_entry(pos, member);&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;pos-&gt;member != (head); &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; pos = n, n = list_prev_entry(n, member))</FONT></P>
<P><FONT class=extract>/**<BR>&nbsp;* list_safe_reset_next - reset a stale list_for_each_entry_safe loop<BR>&nbsp;* @pos:&nbsp;the loop cursor used in the list_for_each_entry_safe loop<BR>&nbsp;* @n:&nbsp;&nbsp;temporary storage used in list_for_each_entry_safe<BR>&nbsp;* @member:&nbsp;the name of the list_head within the struct.<BR>&nbsp;*<BR>&nbsp;* list_safe_reset_next is not safe to use in general if the list may be<BR>&nbsp;* modified concurrently (eg. the lock is dropped in the loop body). An<BR>&nbsp;* exception to this is if the cursor element (pos) is pinned in the list,<BR>&nbsp;* and list_safe_reset_next is called after re-taking the lock and before<BR>&nbsp;* completing the current iteration of the loop body.<BR>&nbsp;*/<BR>#define list_safe_reset_next(pos, n, member)&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;n = list_next_entry(pos, member)</FONT>