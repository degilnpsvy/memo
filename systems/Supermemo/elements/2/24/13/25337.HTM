4. Application Programming Interface (API) 
<P></P>
<P>alloc_workqueue() allocates a wq.&nbsp; The original create_*workqueue()<BR>functions are deprecated and scheduled for removal.&nbsp; alloc_workqueue()<BR>takes three arguments - @name, @flags and @max_active.&nbsp; @name is the<BR>name of the wq and also used as the name of the rescuer thread if<BR>there is one.</P>
<P>A wq no longer manages execution resources but serves as a domain for<BR>forward progress guarantee, flush and work item attributes.&nbsp; @flags<BR>and @max_active control how work items are assigned execution<BR>resources, scheduled and executed.</P>
<P>@flags:</P>
<P>&nbsp; WQ_UNBOUND</P>
<P>&nbsp;Work items queued to an unbound wq are served by the special<BR>&nbsp;woker-pools which host workers which are not bound to any<BR>&nbsp;specific CPU.&nbsp; This makes the wq behave as a simple execution<BR>&nbsp;context provider without concurrency management.&nbsp; The unbound<BR>&nbsp;worker-pools try to start execution of work items as soon as<BR>&nbsp;possible.&nbsp; Unbound wq sacrifices locality but is useful for<BR>&nbsp;the following cases.</P>
<P>&nbsp;* Wide fluctuation in the concurrency level requirement is<BR>&nbsp;&nbsp; expected and using bound wq may end up creating large number<BR>&nbsp;&nbsp; of mostly unused workers across different CPUs as the issuer<BR>&nbsp;&nbsp; hops through different CPUs.</P>
<P>&nbsp;* Long running CPU intensive workloads which can be better<BR>&nbsp;&nbsp; managed by the system scheduler.</P>
<P>&nbsp; WQ_FREEZABLE</P>
<P>&nbsp;A freezable wq participates in the freeze phase of the system<BR>&nbsp;suspend operations.&nbsp; Work items on the wq are drained and no<BR>&nbsp;new work item starts execution until thawed.</P>
<P>&nbsp; WQ_MEM_RECLAIM</P>
<P>&nbsp;All wq which might be used in the memory reclaim paths _MUST_<BR>&nbsp;have this flag set.&nbsp; The wq is guaranteed to have at least one<BR>&nbsp;execution context regardless of memory pressure.</P>
<P>&nbsp; WQ_HIGHPRI</P>
<P>&nbsp;Work items of a highpri wq are queued to the highpri<BR>&nbsp;worker-pool of the target cpu.&nbsp; Highpri worker-pools are<BR>&nbsp;served by worker threads with elevated nice level.</P>
<P>&nbsp;Note that normal and highpri worker-pools don't interact with<BR>&nbsp;each other.&nbsp; Each maintain its separate pool of workers and<BR>&nbsp;implements concurrency management among its workers.</P>
<P>&nbsp; WQ_CPU_INTENSIVE</P>
<P>&nbsp;Work items of a CPU intensive wq do not contribute to the<BR>&nbsp;concurrency level.&nbsp; In other words, runnable CPU intensive<BR>&nbsp;work items will not prevent other work items in the same<BR>&nbsp;worker-pool from starting execution.&nbsp; This is useful for bound<BR>&nbsp;work items which are expected to hog CPU cycles so that their<BR>&nbsp;execution is regulated by the system scheduler.</P>
<P>&nbsp;Although CPU intensive work items don't contribute to the<BR>&nbsp;concurrency level, start of their executions is still<BR>&nbsp;regulated by the concurrency management and runnable<BR>&nbsp;non-CPU-intensive work items can delay execution of CPU<BR>&nbsp;intensive work items.</P>
<P>&nbsp;This flag is meaningless for unbound wq.</P>
<P>Note that the flag WQ_NON_REENTRANT no longer exists as all workqueues<BR>are now non-reentrant - any work item is guaranteed to be executed by<BR>at most one worker system-wide at any given time.</P>
<P>@max_active:</P>
<P>@max_active determines the maximum number of execution contexts per<BR>CPU which can be assigned to the work items of a wq.&nbsp; For example,<BR>with @max_active of 16, at most 16 work items of the wq can be<BR>executing at the same time per CPU.</P>
<P>Currently, for a bound wq, the maximum limit for @max_active is 512<BR>and the default value used when 0 is specified is 256.&nbsp; For an unbound<BR>wq, the limit is higher of 512 and 4 * num_possible_cpus().&nbsp; These<BR>values are chosen sufficiently high such that they are not the<BR>limiting factor while providing protection in runaway cases.</P>
<P>The number of active work items of a wq is usually regulated by the<BR>users of the wq, more specifically, by how many work items the users<BR>may queue at the same time.&nbsp; Unless there is a specific need for<BR>throttling the number of active work items, specifying '0' is<BR>recommended.</P>
<P>Some users depend on the strict execution ordering of ST wq.&nbsp; The<BR>combination of @max_active of 1 and WQ_UNBOUND is used to achieve this<BR>behavior.&nbsp; Work items on such wq are always queued to the unbound<BR>worker-pools and only one work item can be active at any given time thus<BR>achieving the same ordering property as ST wq.