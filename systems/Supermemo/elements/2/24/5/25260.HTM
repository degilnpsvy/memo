<FONT class=extract>static inline void __list_splice(const struct list_head *list,<BR>&nbsp;&nbsp;&nbsp;&nbsp; struct list_head *prev,<BR>&nbsp;&nbsp;&nbsp;&nbsp; struct list_head *next)<BR>{<BR>&nbsp;struct list_head *first = list-&gt;next;<BR>&nbsp;struct list_head *last = list-&gt;prev; </FONT>
<P></P>
<P><FONT class=extract>&nbsp;first-&gt;prev = prev;<BR>&nbsp;prev-&gt;next = first;</FONT></P>
<P><FONT class=extract>&nbsp;last-&gt;next = next;<BR>&nbsp;next-&gt;prev = last;<BR>}</FONT></P>
<P><FONT class=extract>/**<BR>&nbsp;* list_splice - join two lists, this is designed for stacks<BR>&nbsp;* @list: the new list to add.<BR>&nbsp;* @head: the place to add it in the first list.<BR>&nbsp;*/<BR>static inline void list_splice(const struct list_head *list,<BR>&nbsp;&nbsp;&nbsp;&nbsp;struct list_head *head)<BR>{<BR>&nbsp;if (!list_empty(list))<BR>&nbsp;&nbsp;__list_splice(list, head, head-&gt;next);<BR>}</FONT></P>
<P><FONT class=extract>/**<BR>&nbsp;* list_splice_tail - join two lists, each list being a queue<BR>&nbsp;* @list: the new list to add.<BR>&nbsp;* @head: the place to add it in the first list.<BR>&nbsp;*/<BR>static inline void list_splice_tail(struct list_head *list,<BR>&nbsp;&nbsp;&nbsp;&nbsp;struct list_head *head)<BR>{<BR>&nbsp;if (!list_empty(list))<BR>&nbsp;&nbsp;__list_splice(list, head-&gt;prev, head);<BR>}</FONT> 
<P><FONT class=extract>/**<BR>&nbsp;* list_splice_init - join two lists and reinitialise the emptied list.<BR>&nbsp;* @list: the new list to add.<BR>&nbsp;* @head: the place to add it in the first list.<BR>&nbsp;*<BR>&nbsp;* The list at @list is reinitialised<BR>&nbsp;*/<BR>static inline void list_splice_init(struct list_head *list,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct list_head *head)<BR>{<BR>&nbsp;if (!list_empty(list)) {<BR>&nbsp;&nbsp;__list_splice(list, head, head-&gt;next);<BR>&nbsp;&nbsp;INIT_LIST_HEAD(list);<BR>&nbsp;}<BR>}</FONT> 
<P></P>
<P><FONT class=extract>/**<BR>&nbsp;* list_splice_tail_init - join two lists and reinitialise the emptied list<BR>&nbsp;* @list: the new list to add.<BR>&nbsp;* @head: the place to add it in the first list.<BR>&nbsp;*<BR>&nbsp;* Each of the lists is a queue.<BR>&nbsp;* The list at @list is reinitialised<BR>&nbsp;*/<BR>static inline void list_splice_tail_init(struct list_head *list,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct list_head *head)<BR>{<BR>&nbsp;if (!list_empty(list)) {<BR>&nbsp;&nbsp;__list_splice(list, head-&gt;prev, head);<BR>&nbsp;&nbsp;INIT_LIST_HEAD(list);<BR>&nbsp;}<BR>}</FONT>