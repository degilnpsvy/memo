/*<BR>&nbsp;* initialize all of a work item in one go<BR>&nbsp;*<BR>&nbsp;* NOTE! No point in using "atomic_long_set()": using a direct<BR>&nbsp;* assignment of the work data initializer allows the compiler<BR>&nbsp;* to generate better code.<BR>&nbsp;*/<BR>#ifdef CONFIG_LOCKDEP<BR>#define __INIT_WORK(_work, _func, _onstack)&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;do {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;static struct lock_class_key __key;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;__init_work((_work), _onstack);&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;(_work)-&gt;data = (atomic_long_t) WORK_DATA_INIT();&nbsp;\<BR>&nbsp;&nbsp;lockdep_init_map(&amp;(_work)-&gt;lockdep_map, #_work, &amp;__key, 0); \<BR>&nbsp;&nbsp;INIT_LIST_HEAD(&amp;(_work)-&gt;entry);&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;(_work)-&gt;func = (_func);&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;} while (0)<BR>#else<BR>#define __INIT_WORK(_work, _func, _onstack)&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;do {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;__init_work((_work), _onstack);&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;(_work)-&gt;data = (atomic_long_t) WORK_DATA_INIT();&nbsp;\<BR>&nbsp;&nbsp;INIT_LIST_HEAD(&amp;(_work)-&gt;entry);&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;(_work)-&gt;func = (_func);&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;} while (0)<BR>#endif
<P></P>
<P>#define INIT_WORK(_work, _func)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;__INIT_WORK((_work), (_func), 0)</P>
<P>#define INIT_WORK_ONSTACK(_work, _func)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;__INIT_WORK((_work), (_func), 1)</P>
<P>#define __INIT_DELAYED_WORK(_work, _func, _tflags)&nbsp;&nbsp;&nbsp;\<BR>&nbsp;do {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;INIT_WORK(&amp;(_work)-&gt;work, (_func));&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;__setup_timer(&amp;(_work)-&gt;timer, delayed_work_timer_fn,&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (unsigned long)(_work),&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (_tflags) | TIMER_IRQSAFE);&nbsp;&nbsp;\<BR>&nbsp;} while (0)</P>
<P>#define __INIT_DELAYED_WORK_ONSTACK(_work, _func, _tflags)&nbsp;&nbsp;\<BR>&nbsp;do {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;INIT_WORK_ONSTACK(&amp;(_work)-&gt;work, (_func));&nbsp;&nbsp;\<BR>&nbsp;&nbsp;__setup_timer_on_stack(&amp;(_work)-&gt;timer,&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; delayed_work_timer_fn,&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (unsigned long)(_work),&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (_tflags) | TIMER_IRQSAFE);&nbsp;\<BR>&nbsp;} while (0)</P>
<P>#define INIT_DELAYED_WORK(_work, _func)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;__INIT_DELAYED_WORK(_work, _func, 0)</P>
<P>#define INIT_DELAYED_WORK_ONSTACK(_work, _func)&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;__INIT_DELAYED_WORK_ONSTACK(_work, _func, 0)</P>
<P>#define INIT_DEFERRABLE_WORK(_work, _func)&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;__INIT_DELAYED_WORK(_work, _func, TIMER_DEFERRABLE)</P>
<P>#define INIT_DEFERRABLE_WORK_ONSTACK(_work, _func)&nbsp;&nbsp;&nbsp;\<BR>&nbsp;__INIT_DELAYED_WORK_ONSTACK(_work, _func, TIMER_DEFERRABLE)