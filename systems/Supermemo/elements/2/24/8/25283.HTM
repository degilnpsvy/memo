/*<BR>&nbsp;* include/linux/irqflags.h<BR>&nbsp;*<BR>&nbsp;* IRQ flags tracing: follow the state of the hardirq and softirq flags and<BR>&nbsp;* provide callbacks for transitions between ON and OFF states.<BR>&nbsp;*<BR>&nbsp;* This file gets included from lowlevel asm headers too, to provide<BR>&nbsp;* wrapped versions of the local_irq_*() APIs, based on the<BR>&nbsp;* raw_local_irq_*() macros from the lowlevel headers.<BR>&nbsp;*/<BR>#ifndef _LINUX_TRACE_IRQFLAGS_H<BR>#define _LINUX_TRACE_IRQFLAGS_H
<P></P>
<P>#include &lt;linux/typecheck.h&gt;<BR>#include &lt;asm/irqflags.h&gt;</P>
<P>#ifdef CONFIG_TRACE_IRQFLAGS<BR>&nbsp; extern void trace_softirqs_on(unsigned long ip);<BR>&nbsp; extern void trace_softirqs_off(unsigned long ip);<BR>&nbsp; extern void trace_hardirqs_on(void);<BR>&nbsp; extern void trace_hardirqs_off(void);<BR># define trace_hardirq_context(p)&nbsp;((p)-&gt;hardirq_context)<BR># define trace_softirq_context(p)&nbsp;((p)-&gt;softirq_context)<BR># define trace_hardirqs_enabled(p)&nbsp;((p)-&gt;hardirqs_enabled)<BR># define trace_softirqs_enabled(p)&nbsp;((p)-&gt;softirqs_enabled)<BR># define trace_hardirq_enter()&nbsp;do { current-&gt;hardirq_context++; } while (0)<BR># define trace_hardirq_exit()&nbsp;do { current-&gt;hardirq_context--; } while (0)<BR># define lockdep_softirq_enter()&nbsp;do { current-&gt;softirq_context++; } while (0)<BR># define lockdep_softirq_exit()&nbsp;do { current-&gt;softirq_context--; } while (0)<BR># define INIT_TRACE_IRQFLAGS&nbsp;.softirqs_enabled = 1,<BR>#else<BR># define trace_hardirqs_on()&nbsp;&nbsp;do { } while (0)<BR># define trace_hardirqs_off()&nbsp;&nbsp;do { } while (0)<BR># define trace_softirqs_on(ip)&nbsp;&nbsp;do { } while (0)<BR># define trace_softirqs_off(ip)&nbsp;&nbsp;do { } while (0)<BR># define trace_hardirq_context(p)&nbsp;0<BR># define trace_softirq_context(p)&nbsp;0<BR># define trace_hardirqs_enabled(p)&nbsp;0<BR># define trace_softirqs_enabled(p)&nbsp;0<BR># define trace_hardirq_enter()&nbsp;&nbsp;do { } while (0)<BR># define trace_hardirq_exit()&nbsp;&nbsp;do { } while (0)<BR># define lockdep_softirq_enter()&nbsp;do { } while (0)<BR># define lockdep_softirq_exit()&nbsp;&nbsp;do { } while (0)<BR># define INIT_TRACE_IRQFLAGS<BR>#endif</P>
<P>#if defined(CONFIG_IRQSOFF_TRACER) || \<BR>&nbsp;defined(CONFIG_PREEMPT_TRACER)<BR>&nbsp;extern void stop_critical_timings(void);<BR>&nbsp;extern void start_critical_timings(void);<BR>#else<BR># define stop_critical_timings() do { } while (0)<BR># define start_critical_timings() do { } while (0)<BR>#endif</P>
<P>/*<BR>&nbsp;* Wrap the arch provided IRQ routines to provide appropriate checks.<BR>&nbsp;*/<BR>#define raw_local_irq_disable()&nbsp;&nbsp;arch_local_irq_disable()<BR>#define raw_local_irq_enable()&nbsp;&nbsp;arch_local_irq_enable()<BR>#define raw_local_irq_save(flags)&nbsp;&nbsp;&nbsp;\<BR>&nbsp;do {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;typecheck(unsigned long, flags);&nbsp;\<BR>&nbsp;&nbsp;flags = arch_local_irq_save();&nbsp;&nbsp;\<BR>&nbsp;} while (0)<BR>#define raw_local_irq_restore(flags)&nbsp;&nbsp;&nbsp;\<BR>&nbsp;do {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;typecheck(unsigned long, flags);&nbsp;\<BR>&nbsp;&nbsp;arch_local_irq_restore(flags);&nbsp;&nbsp;\<BR>&nbsp;} while (0)<BR>#define raw_local_save_flags(flags)&nbsp;&nbsp;&nbsp;\<BR>&nbsp;do {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;typecheck(unsigned long, flags);&nbsp;\<BR>&nbsp;&nbsp;flags = arch_local_save_flags();&nbsp;\<BR>&nbsp;} while (0)<BR>#define raw_irqs_disabled_flags(flags)&nbsp;&nbsp;&nbsp;\<BR>&nbsp;({&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;typecheck(unsigned long, flags);&nbsp;\<BR>&nbsp;&nbsp;arch_irqs_disabled_flags(flags);&nbsp;\<BR>&nbsp;})<BR>#define raw_irqs_disabled()&nbsp;&nbsp;(arch_irqs_disabled())<BR>#define raw_safe_halt()&nbsp;&nbsp;&nbsp;arch_safe_halt()</P>
<P>/*<BR>&nbsp;* The local_irq_*() APIs are equal to the raw_local_irq*()<BR>&nbsp;* if !TRACE_IRQFLAGS.<BR>&nbsp;*/<BR>#ifdef CONFIG_TRACE_IRQFLAGS<BR>#define local_irq_enable() \<BR>&nbsp;do { trace_hardirqs_on(); raw_local_irq_enable(); } while (0)<BR>#define local_irq_disable() \<BR>&nbsp;do { raw_local_irq_disable(); trace_hardirqs_off(); } while (0)<BR>#define local_irq_save(flags)&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;do {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;raw_local_irq_save(flags);&nbsp;&nbsp;\<BR>&nbsp;&nbsp;trace_hardirqs_off();&nbsp;&nbsp;&nbsp;\<BR>&nbsp;} while (0)</P>
<P><BR>#define local_irq_restore(flags)&nbsp;&nbsp;&nbsp;\<BR>&nbsp;do {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;if (raw_irqs_disabled_flags(flags)) {&nbsp;\<BR>&nbsp;&nbsp;&nbsp;raw_local_irq_restore(flags);&nbsp;\<BR>&nbsp;&nbsp;&nbsp;trace_hardirqs_off();&nbsp;&nbsp;\<BR>&nbsp;&nbsp;} else {&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;trace_hardirqs_on();&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;raw_local_irq_restore(flags);&nbsp;\<BR>&nbsp;&nbsp;}&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;} while (0)</P>
<P>#define safe_halt()&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;do {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;trace_hardirqs_on();&nbsp;&nbsp;\<BR>&nbsp;&nbsp;raw_safe_halt();&nbsp;&nbsp;\<BR>&nbsp;} while (0)</P>
<P><BR>#else /* !CONFIG_TRACE_IRQFLAGS */</P>
<P>#define local_irq_enable()&nbsp;do { raw_local_irq_enable(); } while (0)<BR>#define local_irq_disable()&nbsp;do { raw_local_irq_disable(); } while (0)<BR>#define local_irq_save(flags)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;do {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;raw_local_irq_save(flags);&nbsp;&nbsp;&nbsp;\<BR>&nbsp;} while (0)<BR>#define local_irq_restore(flags) do { raw_local_irq_restore(flags); } while (0)<BR>#define safe_halt()&nbsp;&nbsp;do { raw_safe_halt(); } while (0)</P>
<P>#endif /* CONFIG_TRACE_IRQFLAGS */</P>
<P>#define local_save_flags(flags)&nbsp;raw_local_save_flags(flags)</P>
<P>/*<BR>&nbsp;* Some architectures don't define arch_irqs_disabled(), so even if either<BR>&nbsp;* definition would be fine we need to use different ones for the time being<BR>&nbsp;* to avoid build issues.<BR>&nbsp;*/<BR>#ifdef CONFIG_TRACE_IRQFLAGS_SUPPORT<BR>#define irqs_disabled()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;({&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;unsigned long _flags;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;raw_local_save_flags(_flags);&nbsp;&nbsp;\<BR>&nbsp;&nbsp;raw_irqs_disabled_flags(_flags);&nbsp;\<BR>&nbsp;})<BR>#else /* !CONFIG_TRACE_IRQFLAGS_SUPPORT */<BR>#define irqs_disabled()&nbsp;raw_irqs_disabled()<BR>#endif /* CONFIG_TRACE_IRQFLAGS_SUPPORT */</P>
<P>#define irqs_disabled_flags(flags) raw_irqs_disabled_flags(flags)</P>
<P>#endif