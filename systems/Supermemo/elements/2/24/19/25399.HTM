/**<BR>&nbsp;* alloc_ordered_workqueue - allocate an ordered workqueue<BR>&nbsp;* @fmt: printf format for the name of the workqueue<BR>&nbsp;* @flags: WQ_* flags (only WQ_FREEZABLE and WQ_MEM_RECLAIM are meaningful)<BR>&nbsp;* @args: args for @fmt<BR>&nbsp;*<BR>&nbsp;* Allocate an ordered workqueue.&nbsp; <FONT class=extract>An ordered workqueue executes at<BR>&nbsp;* most one work item at any given time in the queued order.&nbsp; They are<BR>&nbsp;* implemented as unbound workqueues with @max_active of one.</FONT><BR>&nbsp;*<BR>&nbsp;* RETURNS:<BR>&nbsp;* Pointer to the allocated workqueue on success, %NULL on failure.<BR>&nbsp;*/<BR>#define alloc_ordered_workqueue(fmt, flags, args...)&nbsp;&nbsp;&nbsp;\<BR>&nbsp;alloc_workqueue(fmt, WQ_UNBOUND | __WQ_ORDERED | (flags), 1, ##args) 
<P></P>
<P>#define create_workqueue(name)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;alloc_workqueue("%s", WQ_MEM_RECLAIM, 1, (name))<BR>#define create_freezable_workqueue(name)&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;alloc_workqueue("%s", WQ_FREEZABLE | WQ_UNBOUND | WQ_MEM_RECLAIM, \<BR>&nbsp;&nbsp;&nbsp;1, (name))<BR>#define create_singlethread_workqueue(name)&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;alloc_ordered_workqueue("%s", WQ_MEM_RECLAIM, name)