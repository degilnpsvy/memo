# Documentation/cpuidle/driver.txt&nbsp; 
<P></P>
<P>&nbsp;&nbsp;Supporting multiple CPU idle levels in kernel</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;cpuidle drivers</P>
<P>&nbsp;</P>
<P><BR>cpuidle driver hooks into the cpuidle infrastructure and handles the<BR>architecture/platform dependent part of CPU idle states. Driver<BR>provides the platform idle state detection capability and also<BR>has mechanisms in place to support actual entry-exit into CPU idle states.</P>
<P>cpuidle driver initializes the cpuidle_device structure for each CPU device<BR>and registers with cpuidle using cpuidle_register_device.</P>
<P>If all the idle states are the same, the wrapper function cpuidle_register<BR>could be used instead.</P>
<P>It can also support the dynamic changes (like battery &lt;-&gt; AC), by using<BR>cpuidle_pause_and_lock, cpuidle_disable_device and cpuidle_enable_device,<BR>cpuidle_resume_and_unlock.</P>
<P>Interfaces:<BR>extern int cpuidle_register(struct cpuidle_driver *drv,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const struct cpumask *const coupled_cpus);<BR>extern int cpuidle_unregister(struct cpuidle_driver *drv);<BR>extern int cpuidle_register_driver(struct cpuidle_driver *drv);<BR>extern void cpuidle_unregister_driver(struct cpuidle_driver *drv);<BR>extern int cpuidle_register_device(struct cpuidle_device *dev);<BR>extern void cpuidle_unregister_device(struct cpuidle_device *dev);</P>
<P>extern void cpuidle_pause_and_lock(void);<BR>extern void cpuidle_resume_and_unlock(void);<BR>extern int cpuidle_enable_device(struct cpuidle_device *dev);<BR>extern void cpuidle_disable_device(struct cpuidle_device *dev);