# Documentation/development-process/5.Posting&nbsp; 
<P></P>
<P>5: POSTING PATCHES</P>
<P></P>
<P>Sooner or later, the time comes when your work is ready to be presented to<BR>the community for review and, eventually, inclusion into the mainline<BR>kernel.&nbsp; Unsurprisingly, the kernel development community has evolved a set<BR>of conventions and procedures which are used in the posting of patches;<BR>following them will make life much easier for everybody involved.&nbsp; This<BR>document will attempt to cover these expectations in reasonable detail;<BR>more information can also be found in the files SubmittingPatches,<BR>SubmittingDrivers, and SubmitChecklist in the kernel documentation<BR>directory.</P>
<P><BR>5.1: WHEN TO POST</P>
<P>There is a constant temptation to avoid posting patches before they are<BR>completely "ready."&nbsp; For simple patches, that is not a problem.&nbsp; If the<BR>work being done is complex, though, there is a lot to be gained by getting<BR>feedback from the community before the work is complete.&nbsp; So you should<BR>consider posting in-progress work, or even making a git tree available so<BR>that interested developers can catch up with your work at any time.</P>
<P>When posting code which is not yet considered ready for inclusion, it is a<BR>good idea to say so in the posting itself.&nbsp; Also mention any major work<BR>which remains to be done and any known problems.&nbsp; Fewer people will look at<BR>patches which are known to be half-baked, but those who do will come in<BR>with the idea that they can help you drive the work in the right direction.</P>
<P><BR>5.2: BEFORE CREATING PATCHES</P>
<P>There are a number of things which should be done before you consider<BR>sending patches to the development community.&nbsp; These include:</P>
<P>&nbsp;- Test the code to the extent that you can.&nbsp; Make use of the kernel's<BR>&nbsp;&nbsp; debugging tools, ensure that the kernel will build with all reasonable<BR>&nbsp;&nbsp; combinations of configuration options, use cross-compilers to build for<BR>&nbsp;&nbsp; different architectures, etc.</P>
<P>&nbsp;- Make sure your code is compliant with the kernel coding style<BR>&nbsp;&nbsp; guidelines.</P>
<P>&nbsp;- Does your change have performance implications?&nbsp; If so, you should run<BR>&nbsp;&nbsp; benchmarks showing what the impact (or benefit) of your change is; a<BR>&nbsp;&nbsp; summary of the results should be included with the patch.</P>
<P>&nbsp;- Be sure that you have the right to post the code.&nbsp; If this work was done<BR>&nbsp;&nbsp; for an employer, the employer likely has a right to the work and must be<BR>&nbsp;&nbsp; agreeable with its release under the GPL.</P>
<P>As a general rule, putting in some extra thought before posting code almost<BR>always pays back the effort in short order.</P>
<P><BR>5.3: PATCH PREPARATION</P>
<P>The preparation of patches for posting can be a surprising amount of work,<BR>but, once again, attempting to save time here is not generally advisable<BR>even in the short term.</P>
<P>Patches must be prepared against a specific version of the kernel.&nbsp; As a<BR>general rule, a patch should be based on the current mainline as found in<BR>Linus's git tree.&nbsp; When basing on mainline, start with a well-known release<BR>point - a stable or -rc release - rather than branching off the mainline at<BR>an arbitrary spot.</P>
<P>It may become necessary to make versions against -mm, linux-next, or a<BR>subsystem tree, though, to facilitate wider testing and review.&nbsp; Depending<BR>on the area of your patch and what is going on elsewhere, basing a patch<BR>against these other trees can require a significant amount of work<BR>resolving conflicts and dealing with API changes.</P>
<P>Only the most simple changes should be formatted as a single patch;<BR>everything else should be made as a logical series of changes.&nbsp; Splitting<BR>up patches is a bit of an art; some developers spend a long time figuring<BR>out how to do it in the way that the community expects.&nbsp; There are a few<BR>rules of thumb, however, which can help considerably:</P>
<P>&nbsp;- The patch series you post will almost certainly not be the series of<BR>&nbsp;&nbsp; changes found in your working revision control system.&nbsp; Instead, the<BR>&nbsp;&nbsp; changes you have made need to be considered in their final form, then<BR>&nbsp;&nbsp; split apart in ways which make sense.&nbsp; The developers are interested in<BR>&nbsp;&nbsp; discrete, self-contained changes, not the path you took to get to those<BR>&nbsp;&nbsp; changes.</P>
<P>&nbsp;- Each logically independent change should be formatted as a separate<BR>&nbsp;&nbsp; patch.&nbsp; These changes can be small ("add a field to this structure") or<BR>&nbsp;&nbsp; large (adding a significant new driver, for example), but they should be<BR>&nbsp;&nbsp; conceptually small and amenable to a one-line description.&nbsp; Each patch<BR>&nbsp;&nbsp; should make a specific change which can be reviewed on its own and<BR>&nbsp;&nbsp; verified to do what it says it does.</P>
<P>&nbsp;- As a way of restating the guideline above: do not mix different types of<BR>&nbsp;&nbsp; changes in the same patch.&nbsp; If a single patch fixes a critical security<BR>&nbsp;&nbsp; bug, rearranges a few structures, and reformats the code, there is a<BR>&nbsp;&nbsp; good chance that it will be passed over and the important fix will be<BR>&nbsp;&nbsp; lost.</P>
<P>&nbsp;- Each patch should yield a kernel which builds and runs properly; if your<BR>&nbsp;&nbsp; patch series is interrupted in the middle, the result should still be a<BR>&nbsp;&nbsp; working kernel.&nbsp; Partial application of a patch series is a common<BR>&nbsp;&nbsp; scenario when the "git bisect" tool is used to find regressions; if the<BR>&nbsp;&nbsp; result is a broken kernel, you will make life harder for developers and<BR>&nbsp;&nbsp; users who are engaging in the noble work of tracking down problems.</P>
<P>&nbsp;- Do not overdo it, though.&nbsp; One developer once posted a set of edits<BR>&nbsp;&nbsp; to a single file as 500 separate patches - an act which did not make him<BR>&nbsp;&nbsp; the most popular person on the kernel mailing list.&nbsp; A single patch can<BR>&nbsp;&nbsp; be reasonably large as long as it still contains a single *logical*<BR>&nbsp;&nbsp; change.</P>
<P>&nbsp;- It can be tempting to add a whole new infrastructure with a series of<BR>&nbsp;&nbsp; patches, but to leave that infrastructure unused until the final patch<BR>&nbsp;&nbsp; in the series enables the whole thing.&nbsp; This temptation should be<BR>&nbsp;&nbsp; avoided if possible; if that series adds regressions, bisection will<BR>&nbsp;&nbsp; finger the last patch as the one which caused the problem, even though<BR>&nbsp;&nbsp; the real bug is elsewhere.&nbsp; Whenever possible, a patch which adds new<BR>&nbsp;&nbsp; code should make that code active immediately.</P>
<P>Working to create the perfect patch series can be a frustrating process<BR>which takes quite a bit of time and thought after the "real work" has been<BR>done.&nbsp; When done properly, though, it is time well spent.</P>
<P><BR>5.4: PATCH FORMATTING AND CHANGELOGS</P>
<P>So now you have a perfect series of patches for posting, but the work is<BR>not done quite yet.&nbsp; Each patch needs to be formatted into a message which<BR>quickly and clearly communicates its purpose to the rest of the world.&nbsp; To<BR>that end, each patch will be composed of the following:</P>
<P>&nbsp;- An optional "From" line naming the author of the patch.&nbsp; This line is<BR>&nbsp;&nbsp; only necessary if you are passing on somebody else's patch via email,<BR>&nbsp;&nbsp; but it never hurts to add it when in doubt.</P>
<P>&nbsp;- A one-line description of what the patch does.&nbsp; This message should be<BR>&nbsp;&nbsp; enough for a reader who sees it with no other context to figure out the<BR>&nbsp;&nbsp; scope of the patch; it is the line that will show up in the "short form"<BR>&nbsp;&nbsp; changelogs.&nbsp; This message is usually formatted with the relevant<BR>&nbsp;&nbsp; subsystem name first, followed by the purpose of the patch.&nbsp; For<BR>&nbsp;&nbsp; example:</P>
<P>&nbsp;gpio: fix build on CONFIG_GPIO_SYSFS=n</P>
<P>&nbsp;- A blank line followed by a detailed description of the contents of the<BR>&nbsp;&nbsp; patch.&nbsp; This description can be as long as is required; it should say<BR>&nbsp;&nbsp; what the patch does and why it should be applied to the kernel.</P>
<P>&nbsp;- One or more tag lines, with, at a minimum, one Signed-off-by: line from<BR>&nbsp;&nbsp; the author of the patch.&nbsp; Tags will be described in more detail below.</P>
<P>The items above, together, form the changelog for the patch.&nbsp; Writing good<BR>changelogs is a crucial but often-neglected art; it's worth spending<BR>another moment discussing this issue.&nbsp; When writing a changelog, you should<BR>bear in mind that a number of different people will be reading your words.<BR>These include subsystem maintainers and reviewers who need to decide<BR>whether the patch should be included, distributors and other maintainers<BR>trying to decide whether a patch should be backported to other kernels, bug<BR>hunters wondering whether the patch is responsible for a problem they are<BR>chasing, users who want to know how the kernel has changed, and more.&nbsp; A<BR>good changelog conveys the needed information to all of these people in the<BR>most direct and concise way possible.</P>
<P>To that end, the summary line should describe the effects of and motivation<BR>for the change as well as possible given the one-line constraint.&nbsp; The<BR>detailed description can then amplify on those topics and provide any<BR>needed additional information.&nbsp; If the patch fixes a bug, cite the commit<BR>which introduced the bug if possible (and please provide both the commit ID<BR>and the title when citing commits).&nbsp; If a problem is associated with<BR>specific log or compiler output, include that output to help others<BR>searching for a solution to the same problem.&nbsp; If the change is meant to<BR>support other changes coming in later patch, say so.&nbsp; If internal APIs are<BR>changed, detail those changes and how other developers should respond.&nbsp; In<BR>general, the more you can put yourself into the shoes of everybody who will<BR>be reading your changelog, the better that changelog (and the kernel as a<BR>whole) will be.</P>
<P>Needless to say, the changelog should be the text used when committing the<BR>change to a revision control system.&nbsp; It will be followed by:</P>
<P>&nbsp;- The patch itself, in the unified ("-u") patch format.&nbsp; Using the "-p"<BR>&nbsp;&nbsp; option to diff will associate function names with changes, making the<BR>&nbsp;&nbsp; resulting patch easier for others to read.</P>
<P>You should avoid including changes to irrelevant files (those generated by<BR>the build process, for example, or editor backup files) in the patch.&nbsp; The<BR>file "dontdiff" in the Documentation directory can help in this regard;<BR>pass it to diff with the "-X" option.</P>
<P>The tags mentioned above are used to describe how various developers have<BR>been associated with the development of this patch.&nbsp; They are described in<BR>detail in the SubmittingPatches document; what follows here is a brief<BR>summary.&nbsp; Each of these lines has the format:</P>
<P>&nbsp;tag: Full Name &lt;email address&gt;&nbsp; optional-other-stuff</P>
<P>The tags in common use are:</P>
<P>&nbsp;- Signed-off-by: this is a developer's certification that he or she has<BR>&nbsp;&nbsp; the right to submit the patch for inclusion into the kernel.&nbsp; It is an<BR>&nbsp;&nbsp; agreement to the Developer's Certificate of Origin, the full text of<BR>&nbsp;&nbsp; which can be found in Documentation/SubmittingPatches.&nbsp; Code without a<BR>&nbsp;&nbsp; proper signoff cannot be merged into the mainline.</P>
<P>&nbsp;- Acked-by: indicates an agreement by another developer (often a<BR>&nbsp;&nbsp; maintainer of the relevant code) that the patch is appropriate for<BR>&nbsp;&nbsp; inclusion into the kernel.</P>
<P>&nbsp;- Tested-by: states that the named person has tested the patch and found<BR>&nbsp;&nbsp; it to work.</P>
<P>&nbsp;- Reviewed-by: the named developer has reviewed the patch for correctness;<BR>&nbsp;&nbsp; see the reviewer's statement in Documentation/SubmittingPatches for more<BR>&nbsp;&nbsp; detail.</P>
<P>&nbsp;- Reported-by: names a user who reported a problem which is fixed by this<BR>&nbsp;&nbsp; patch; this tag is used to give credit to the (often underappreciated)<BR>&nbsp;&nbsp; people who test our code and let us know when things do not work<BR>&nbsp;&nbsp; correctly.</P>
<P>&nbsp;- Cc: the named person received a copy of the patch and had the<BR>&nbsp;&nbsp; opportunity to comment on it.</P>
<P>Be careful in the addition of tags to your patches: only Cc: is appropriate<BR>for addition without the explicit permission of the person named.</P>
<P><BR>5.5: SENDING THE PATCH</P>
<P>Before you mail your patches, there are a couple of other things you should<BR>take care of:</P>
<P>&nbsp;- Are you sure that your mailer will not corrupt the patches?&nbsp; Patches<BR>&nbsp;&nbsp; which have had gratuitous white-space changes or line wrapping performed<BR>&nbsp;&nbsp; by the mail client will not apply at the other end, and often will not<BR>&nbsp;&nbsp; be examined in any detail.&nbsp; If there is any doubt at all, mail the patch<BR>&nbsp;&nbsp; to yourself and convince yourself that it shows up intact.</P>
<P>&nbsp;&nbsp; Documentation/email-clients.txt has some helpful hints on making<BR>&nbsp;&nbsp; specific mail clients work for sending patches.</P>
<P>&nbsp;- Are you sure your patch is free of silly mistakes?&nbsp; You should always<BR>&nbsp;&nbsp; run patches through scripts/checkpatch.pl and address the complaints it<BR>&nbsp;&nbsp; comes up with.&nbsp; Please bear in mind that checkpatch.pl, while being the<BR>&nbsp;&nbsp; embodiment of a fair amount of thought about what kernel patches should<BR>&nbsp;&nbsp; look like, is not smarter than you.&nbsp; If fixing a checkpatch.pl complaint<BR>&nbsp;&nbsp; would make the code worse, don't do it.</P>
<P>Patches should always be sent as plain text.&nbsp; Please do not send them as<BR>attachments; that makes it much harder for reviewers to quote sections of<BR>the patch in their replies.&nbsp; Instead, just put the patch directly into your<BR>message.</P>
<P>When mailing patches, it is important to send copies to anybody who might<BR>be interested in it.&nbsp; Unlike some other projects, the kernel encourages<BR>people to err on the side of sending too many copies; don't assume that the<BR>relevant people will see your posting on the mailing lists.&nbsp; In particular,<BR>copies should go to:</P>
<P>&nbsp;- The maintainer(s) of the affected subsystem(s).&nbsp; As described earlier,<BR>&nbsp;&nbsp; the MAINTAINERS file is the first place to look for these people.</P>
<P>&nbsp;- Other developers who have been working in the same area - especially<BR>&nbsp;&nbsp; those who might be working there now.&nbsp; Using git to see who else has<BR>&nbsp;&nbsp; modified the files you are working on can be helpful.</P>
<P>&nbsp;- If you are responding to a bug report or a feature request, copy the<BR>&nbsp;&nbsp; original poster as well.</P>
<P>&nbsp;- Send a copy to the relevant mailing list, or, if nothing else applies,<BR>&nbsp;&nbsp; the linux-kernel list.</P>
<P>&nbsp;- If you are fixing a bug, think about whether the fix should go into the<BR>&nbsp;&nbsp; next stable update.&nbsp; If so, <A href="mailto:stable@vger.kernel.org">stable@vger.kernel.org</A> should get a copy of<BR>&nbsp;&nbsp; the patch.&nbsp; Also add a "Cc: <A href="mailto:stable@vger.kernel.org">stable@vger.kernel.org</A>" to the tags within<BR>&nbsp;&nbsp; the patch itself; that will cause the stable team to get a notification<BR>&nbsp;&nbsp; when your fix goes into the mainline.</P>
<P>When selecting recipients for a patch, it is good to have an idea of who<BR>you think will eventually accept the patch and get it merged.&nbsp; While it<BR>is possible to send patches directly to Linus Torvalds and have him merge<BR>them, things are not normally done that way.&nbsp; Linus is busy, and there are<BR>subsystem maintainers who watch over specific parts of the kernel.&nbsp; Usually<BR>you will be wanting that maintainer to merge your patches.&nbsp; If there is no<BR>obvious maintainer, Andrew Morton is often the patch target of last resort.</P>
<P>Patches need good subject lines.&nbsp; The canonical format for a patch line is<BR>something like:</P>
<P>&nbsp;[PATCH nn/mm] subsys: one-line description of the patch</P>
<P>where "nn" is the ordinal number of the patch, "mm" is the total number of<BR>patches in the series, and "subsys" is the name of the affected subsystem.<BR>Clearly, nn/mm can be omitted for a single, standalone patch.</P>
<P>If you have a significant series of patches, it is customary to send an<BR>introductory description as part zero.&nbsp; This convention is not universally<BR>followed though; if you use it, remember that information in the<BR>introduction does not make it into the kernel changelogs.&nbsp; So please ensure<BR>that the patches, themselves, have complete changelog information.</P>
<P>In general, the second and following parts of a multi-part patch should be<BR>sent as a reply to the first part so that they all thread together at the<BR>receiving end.&nbsp; Tools like git and quilt have commands to mail out a set of<BR>patches with the proper threading.&nbsp; If you have a long series, though, and<BR>are using git, please stay away from the --chain-reply-to option to avoid<BR>creating exceptionally deep nesting.