# Documentation/development-process/1.Intro
<P></P>
<P>1: A GUIDE TO THE KERNEL DEVELOPMENT PROCESS </P>
<P></P>
<P>The purpose of this document is to help developers (and their managers)<BR>work with the development community with a minimum of frustration.&nbsp; It is<BR>an attempt to document how this community works in a way which is<BR>accessible to those who are not intimately familiar with Linux kernel<BR>development (or, indeed, free software development in general).&nbsp; While<BR>there is some technical material here, this is very much a process-oriented<BR>discussion which does not require a deep knowledge of kernel programming to<BR>understand.</P>
<P><BR>1.1: EXECUTIVE SUMMARY</P>
<P>The rest of this section covers the scope of the kernel development process<BR>and the kinds of frustrations that developers and their employers can<BR>encounter there.&nbsp; There are a great many reasons why kernel code should be<BR>merged into the official ("mainline") kernel, including automatic<BR>availability to users, community support in many forms, and the ability to<BR>influence the direction of kernel development.&nbsp; Code contributed to the<BR>Linux kernel must be made available under a GPL-compatible license.</P>
<P>Section 2 introduces the development process, the kernel release cycle, and<BR>the mechanics of the merge window.&nbsp; The various phases in the patch<BR>development, review, and merging cycle are covered.&nbsp; There is some<BR>discussion of tools and mailing lists.&nbsp; Developers wanting to get started<BR>with kernel development are encouraged to track down and fix bugs as an<BR>initial exercise.</P>
<P>Section 3 covers early-stage project planning, with an emphasis on<BR>involving the development community as soon as possible.</P>
<P>Section 4 is about the coding process; several pitfalls which have been<BR>encountered by other developers are discussed.&nbsp; Some requirements for<BR>patches are covered, and there is an introduction to some of the tools<BR>which can help to ensure that kernel patches are correct.</P>
<P>Section 5 talks about the process of posting patches for review.&nbsp; To be<BR>taken seriously by the development community, patches must be properly<BR>formatted and described, and they must be sent to the right place.<BR>Following the advice in this section should help to ensure the best<BR>possible reception for your work.</P>
<P>Section 6 covers what happens after posting patches; the job is far from<BR>done at that point.&nbsp; Working with reviewers is a crucial part of the<BR>development process; this section offers a number of tips on how to avoid<BR>problems at this important stage.&nbsp; Developers are cautioned against<BR>assuming that the job is done when a patch is merged into the mainline.</P>
<P>Section 7 introduces a couple of "advanced" topics: managing patches with<BR>git and reviewing patches posted by others.</P>
<P>Section 8 concludes the document with pointers to sources for more<BR>information on kernel development.</P>
<P><BR>1.2: WHAT THIS DOCUMENT IS ABOUT</P>
<P>The Linux kernel, at over 8 million lines of code and well over 1000<BR>contributors to each release, is one of the largest and most active free<BR>software projects in existence.&nbsp; Since its humble beginning in 1991, this<BR>kernel has evolved into a best-of-breed operating system component which<BR>runs on pocket-sized digital music players, desktop PCs, the largest<BR>supercomputers in existence, and all types of systems in between.&nbsp; It is a<BR>robust, efficient, and scalable solution for almost any situation.</P>
<P>With the growth of Linux has come an increase in the number of developers<BR>(and companies) wishing to participate in its development.&nbsp; Hardware<BR>vendors want to ensure that Linux supports their products well, making<BR>those products attractive to Linux users.&nbsp; Embedded systems vendors, who<BR>use Linux as a component in an integrated product, want Linux to be as<BR>capable and well-suited to the task at hand as possible.&nbsp; Distributors and<BR>other software vendors who base their products on Linux have a clear<BR>interest in the capabilities, performance, and reliability of the Linux<BR>kernel.&nbsp; And end users, too, will often wish to change Linux to make it<BR>better suit their needs.</P>
<P>One of the most compelling features of Linux is that it is accessible to<BR>these developers; anybody with the requisite skills can improve Linux and<BR>influence the direction of its development.&nbsp; Proprietary products cannot<BR>offer this kind of openness, which is a characteristic of the free software<BR>process.&nbsp; But, if anything, the kernel is even more open than most other<BR>free software projects.&nbsp; A typical three-month kernel development cycle can<BR>involve over 1000 developers working for more than 100 different companies<BR>(or for no company at all).</P>
<P>Working with the kernel development community is not especially hard.&nbsp; But,<BR>that notwithstanding, many potential contributors have experienced<BR>difficulties when trying to do kernel work.&nbsp; The kernel community has<BR>evolved its own distinct ways of operating which allow it to function<BR>smoothly (and produce a high-quality product) in an environment where<BR>thousands of lines of code are being changed every day.&nbsp; So it is not<BR>surprising that Linux kernel development process differs greatly from<BR>proprietary development methods.</P>
<P>The kernel's development process may come across as strange and<BR>intimidating to new developers, but there are good reasons and solid<BR>experience behind it.&nbsp; A developer who does not understand the kernel<BR>community's ways (or, worse, who tries to flout or circumvent them) will<BR>have a frustrating experience in store.&nbsp; The development community, while<BR>being helpful to those who are trying to learn, has little time for those<BR>who will not listen or who do not care about the development process.</P>
<P>It is hoped that those who read this document will be able to avoid that<BR>frustrating experience.&nbsp; There is a lot of material here, but the effort<BR>involved in reading it will be repaid in short order.&nbsp; The development<BR>community is always in need of developers who will help to make the kernel<BR>better; the following text should help you - or those who work for you -<BR>join our community.</P>
<P><BR>1.3: CREDITS</P>
<P>This document was written by Jonathan Corbet, <A href="mailto:corbet@lwn.net">corbet@lwn.net</A>.&nbsp; It has been<BR>improved by comments from Johannes Berg, James Berry, Alex Chiang, Roland<BR>Dreier, Randy Dunlap, Jake Edge, Jiri Kosina, Matt Mackall, Arthur Marsh,<BR>Amanda McPherson, Andrew Morton, Andrew Price, Tsugikazu Shibata, and<BR>Jochen Vo&#223;.</P>
<P>This work was supported by the Linux Foundation; thanks especially to<BR>Amanda McPherson, who saw the value of this effort and made it all happen.</P>
<P><BR>1.4: THE IMPORTANCE OF GETTING CODE INTO THE MAINLINE</P>
<P>Some companies and developers occasionally wonder why they should bother<BR>learning how to work with the kernel community and get their code into the<BR>mainline kernel (the "mainline" being the kernel maintained by Linus<BR>Torvalds and used as a base by Linux distributors).&nbsp; In the short term,<BR>contributing code can look like an avoidable expense; it seems easier to<BR>just keep the code separate and support users directly.&nbsp; The truth of the<BR>matter is that keeping code separate ("out of tree") is a false economy.</P>
<P>As a way of illustrating the costs of out-of-tree code, here are a few<BR>relevant aspects of the kernel development process; most of these will be<BR>discussed in greater detail later in this document.&nbsp; Consider:</P>
<P>- Code which has been merged into the mainline kernel is available to all<BR>&nbsp; Linux users.&nbsp; It will automatically be present on all distributions which<BR>&nbsp; enable it.&nbsp; There is no need for driver disks, downloads, or the hassles<BR>&nbsp; of supporting multiple versions of multiple distributions; it all just<BR>&nbsp; works, for the developer and for the user.&nbsp; Incorporation into the<BR>&nbsp; mainline solves a large number of distribution and support problems.</P>
<P>- While kernel developers strive to maintain a stable interface to user<BR>&nbsp; space, the internal kernel API is in constant flux.&nbsp; The lack of a stable<BR>&nbsp; internal interface is a deliberate design decision; it allows fundamental<BR>&nbsp; improvements to be made at any time and results in higher-quality code.<BR>&nbsp; But one result of that policy is that any out-of-tree code requires<BR>&nbsp; constant upkeep if it is to work with new kernels.&nbsp; Maintaining<BR>&nbsp; out-of-tree code requires significant amounts of work just to keep that<BR>&nbsp; code working.</P>
<P>&nbsp; Code which is in the mainline, instead, does not require this work as the<BR>&nbsp; result of a simple rule requiring any developer who makes an API change<BR>&nbsp; to also fix any code that breaks as the result of that change.&nbsp; So code<BR>&nbsp; which has been merged into the mainline has significantly lower<BR>&nbsp; maintenance costs.</P>
<P>- Beyond that, code which is in the kernel will often be improved by other<BR>&nbsp; developers.&nbsp; Surprising results can come from empowering your user<BR>&nbsp; community and customers to improve your product.</P>
<P>- Kernel code is subjected to review, both before and after merging into<BR>&nbsp; the mainline.&nbsp; No matter how strong the original developer's skills are,<BR>&nbsp; this review process invariably finds ways in which the code can be<BR>&nbsp; improved.&nbsp; Often review finds severe bugs and security problems.&nbsp; This is<BR>&nbsp; especially true for code which has been developed in a closed<BR>&nbsp; environment; such code benefits strongly from review by outside<BR>&nbsp; developers.&nbsp; Out-of-tree code is lower-quality code.</P>
<P>- Participation in the development process is your way to influence the<BR>&nbsp; direction of kernel development.&nbsp; Users who complain from the sidelines<BR>&nbsp; are heard, but active developers have a stronger voice - and the ability<BR>&nbsp; to implement changes which make the kernel work better for their needs.</P>
<P>- When code is maintained separately, the possibility that a third party<BR>&nbsp; will contribute a different implementation of a similar feature always<BR>&nbsp; exists.&nbsp; Should that happen, getting your code merged will become much<BR>&nbsp; harder - to the point of impossibility.&nbsp; Then you will be faced with the<BR>&nbsp; unpleasant alternatives of either (1) maintaining a nonstandard feature<BR>&nbsp; out of tree indefinitely, or (2) abandoning your code and migrating your<BR>&nbsp; users over to the in-tree version.</P>
<P>- Contribution of code is the fundamental action which makes the whole<BR>&nbsp; process work.&nbsp; By contributing your code you can add new functionality to<BR>&nbsp; the kernel and provide capabilities and examples which are of use to<BR>&nbsp; other kernel developers.&nbsp; If you have developed code for Linux (or are<BR>&nbsp; thinking about doing so), you clearly have an interest in the continued<BR>&nbsp; success of this platform; contributing code is one of the best ways to<BR>&nbsp; help ensure that success.</P>
<P>All of the reasoning above applies to any out-of-tree kernel code,<BR>including code which is distributed in proprietary, binary-only form.<BR>There are, however, additional factors which should be taken into account<BR>before considering any sort of binary-only kernel code distribution.&nbsp; These<BR>include:</P>
<P>- The legal issues around the distribution of proprietary kernel modules<BR>&nbsp; are cloudy at best; quite a few kernel copyright holders believe that<BR>&nbsp; most binary-only modules are derived products of the kernel and that, as<BR>&nbsp; a result, their distribution is a violation of the GNU General Public<BR>&nbsp; license (about which more will be said below).&nbsp; Your author is not a<BR>&nbsp; lawyer, and nothing in this document can possibly be considered to be<BR>&nbsp; legal advice.&nbsp; The true legal status of closed-source modules can only be<BR>&nbsp; determined by the courts.&nbsp; But the uncertainty which haunts those modules<BR>&nbsp; is there regardless.</P>
<P>- Binary modules greatly increase the difficulty of debugging kernel<BR>&nbsp; problems, to the point that most kernel developers will not even try.&nbsp; So<BR>&nbsp; the distribution of binary-only modules will make it harder for your<BR>&nbsp; users to get support from the community.</P>
<P>- Support is also harder for distributors of binary-only modules, who must<BR>&nbsp; provide a version of the module for every distribution and every kernel<BR>&nbsp; version they wish to support.&nbsp; Dozens of builds of a single module can<BR>&nbsp; be required to provide reasonably comprehensive coverage, and your users<BR>&nbsp; will have to upgrade your module separately every time they upgrade their<BR>&nbsp; kernel.</P>
<P>- Everything that was said above about code review applies doubly to<BR>&nbsp; closed-source code.&nbsp; Since this code is not available at all, it cannot<BR>&nbsp; have been reviewed by the community and will, beyond doubt, have serious<BR>&nbsp; problems.</P>
<P>Makers of embedded systems, in particular, may be tempted to disregard much<BR>of what has been said in this section in the belief that they are shipping<BR>a self-contained product which uses a frozen kernel version and requires no<BR>more development after its release.&nbsp; This argument misses the value of<BR>widespread code review and the value of allowing your users to add<BR>capabilities to your product.&nbsp; But these products, too, have a limited<BR>commercial life, after which a new version must be released.&nbsp; At that<BR>point, vendors whose code is in the mainline and well maintained will be<BR>much better positioned to get the new product ready for market quickly.</P>
<P><BR>1.5: LICENSING</P>
<P>Code is contributed to the Linux kernel under a number of licenses, but all<BR>code must be compatible with version 2 of the GNU General Public License<BR>(GPLv2), which is the license covering the kernel distribution as a whole.<BR>In practice, that means that all code contributions are covered either by<BR>GPLv2 (with, optionally, language allowing distribution under later<BR>versions of the GPL) or the three-clause BSD license.&nbsp; Any contributions<BR>which are not covered by a compatible license will not be accepted into the<BR>kernel.</P>
<P>Copyright assignments are not required (or requested) for code contributed<BR>to the kernel.&nbsp; All code merged into the mainline kernel retains its<BR>original ownership; as a result, the kernel now has thousands of owners.</P>
<P>One implication of this ownership structure is that any attempt to change<BR>the licensing of the kernel is doomed to almost certain failure.&nbsp; There are<BR>few practical scenarios where the agreement of all copyright holders could<BR>be obtained (or their code removed from the kernel).&nbsp; So, in particular,<BR>there is no prospect of a migration to version 3 of the GPL in the<BR>foreseeable future.</P>
<P>It is imperative that all code contributed to the kernel be legitimately<BR>free software.&nbsp; For that reason, code from anonymous (or pseudonymous)<BR>contributors will not be accepted.&nbsp; All contributors are required to "sign<BR>off" on their code, stating that the code can be distributed with the<BR>kernel under the GPL.&nbsp; Code which has not been licensed as free software by<BR>its owner, or which risks creating copyright-related problems for the<BR>kernel (such as code which derives from reverse-engineering efforts lacking<BR>proper safeguards) cannot be contributed.</P>
<P>Questions about copyright-related issues are common on Linux development<BR>mailing lists.&nbsp; Such questions will normally receive no shortage of<BR>answers, but one should bear in mind that the people answering those<BR>questions are not lawyers and cannot provide legal advice.&nbsp; If you have<BR>legal questions relating to Linux source code, there is no substitute for<BR>talking with a lawyer who understands this field.&nbsp; Relying on answers<BR>obtained on technical mailing lists is a risky affair.