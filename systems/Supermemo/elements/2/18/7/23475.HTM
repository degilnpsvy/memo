<HEAD></HEAD>
<BODY><B><SPAN lang=EN-US style='FONT-SIZE: 22pt; FONT-FAMILY: "Futura-CondensedBold","sans-serif"; mso-bidi-font-size: 11.5pt; mso-bidi-font-family: Futura-CondensedBold; mso-font-kerning: 0pt'>49.4.2 Shared File Mappings</SPAN></B> 
<P></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'><FONT class=extract>When multiple processes create shared mappings of the same file region, they all share the same physical pages of memory. In addition, modifications to the contents of the mapping are carried through to the file. In effect, the file is being treated as the paging store for this region of memory, as shown in Figure 49-2. (We simplify things in this diagram by omitting to show that the mapped pages are typically not contiguous in physical memory.)</FONT></SPAN></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'><FONT class=extract>Shared file mappings serve two purposes: memory-mapped I/O and IPC.</FONT> We consider each of these uses below.</SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 11.0pt; mso-no-proof: yes"><?xml:namespace prefix = "v" /><v:shapetype id=_x0000_t75 stroked="f" filled="f" path="m@4@5l@4@11@9@11@9@5xe" o:preferrelative="t" o:spt="75" coordsize="21600,21600"><v:stroke joinstyle="miter"></v:stroke><v:formulas><v:f eqn="if lineDrawn pixelLineWidth 0"></v:f><v:f eqn="sum @0 1 0"></v:f><v:f eqn="sum 0 0 @1"></v:f><v:f eqn="prod @2 1 2"></v:f><v:f eqn="prod @3 21600 pixelWidth"></v:f><v:f eqn="prod @3 21600 pixelHeight"></v:f><v:f eqn="sum @0 0 1"></v:f><v:f eqn="prod @6 1 2"></v:f><v:f eqn="prod @7 21600 pixelWidth"></v:f><v:f eqn="sum @8 21600 0"></v:f><v:f eqn="prod @7 21600 pixelHeight"></v:f><v:f eqn="sum @10 21600 0"></v:f></v:formulas><v:path o:connecttype="rect" gradientshapeok="t" o:extrusionok="f"></v:path><?xml:namespace prefix = "o" /><o:lock aspectratio="t" v:ext="edit"></o:lock></v:shapetype><v:shape id=&#22270;&#29255;_x0020_2 style="HEIGHT: 362.25pt; WIDTH: 400.5pt; VISIBILITY: visible" type="#_x0000_t75" o:spid="_x0000_i1025"><v:imagedata o:title="" src="file:///C:\Users\DONPOP~1\AppData\Local\Temp\msohtmlclip1\01\clip_image001.emz"></v:imagedata></v:shape></SPAN><SPAN lang=EN-US style="FONT-SIZE: 16.5pt; mso-bidi-font-size: 11.0pt"></SPAN></P>
<P><B><SPAN lang=EN-US style='FONT-SIZE: 16pt; FONT-FAMILY: "Futura-Heavy","sans-serif"; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: Futura-Heavy; mso-font-kerning: 0pt'>Figure 49-2: </SPAN></B><SPAN lang=EN-US style='FONT-SIZE: 16pt; FONT-FAMILY: "Futura-Book","sans-serif"; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: Futura-Book; mso-font-kerning: 0pt'>Two processes with a shared mapping of the same region of a file</SPAN></P>
<P><B><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "Futura-CondensedBold","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Futura-CondensedBold; mso-font-kerning: 0pt'><FONT class=extract>Memory-mapped I/O</FONT></SPAN></B></P>
<P><FONT class=extract><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'>Since the contents of the shared file mapping are initialized from the file, and any modifications to the contents of the mapping are automatically carried through to the file, we can perform file I/O simply by accessing bytes of memory, relying on the kernel to ensure that the changes to memory are propagated to the mapped file. (Typically, a program would define a structured data type that corresponds to the contents of the disk file, and then use that data type to cast the contents of the mapping.) This technique is referred to as </SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-RomanIta","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta; mso-font-kerning: 0pt'>memory-mapped I/O</SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'>, and is an alternative to using </SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-RomanIta","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta; mso-font-kerning: 0pt'>read() </SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'>and </SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-RomanIta","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta; mso-font-kerning: 0pt'>write() </SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'>to access the contents of a file.</SPAN></FONT></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'><FONT class=extract>Memory-mapped I/O has two potential advantages:</FONT></SPAN></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: Wingdings; mso-bidi-font-size: 6.0pt; mso-bidi-font-family: Wingdings; mso-font-kerning: 0pt">&#56256;&#56442; </SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'>By replacing </SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-RomanIta","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta; mso-font-kerning: 0pt'>read() </SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'>and </SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-RomanIta","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta; mso-font-kerning: 0pt'>write() </SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'>system calls with memory accesses, it can simplify the logic of some applications.</SPAN></FONT></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: Wingdings; mso-bidi-font-size: 6.0pt; mso-bidi-font-family: Wingdings; mso-font-kerning: 0pt">&#56256;&#56442; </SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'>It can, in some circumstances, provide better performance than file I/O carried out using the conventional I/O system calls.</SPAN></FONT></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'><FONT class=extract>The reasons that memory-mapped I/O can provide performance benefits are as follows:</FONT></SPAN></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: Wingdings; mso-bidi-font-size: 6.0pt; mso-bidi-font-family: Wingdings; mso-font-kerning: 0pt">&#56256;&#56442; </SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'>A normal </SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-RomanIta","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta; mso-font-kerning: 0pt'>read() </SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'>or </SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-RomanIta","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta; mso-font-kerning: 0pt'>write() </SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'>involves two transfers: one between the file and the kernel buffer cache, and the other between the buffer cache and a user-space buffer. Using </SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-RomanIta","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta; mso-font-kerning: 0pt'>mmap() </SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'>eliminates the second of these transfers. For input, the data is available to the user process as soon as the kernel has mapped the corresponding file blocks into memory. For output, the user process merely needs to modify the contents of the memory, and can then rely on the kernel memory manager to automatically update the underlying file.</SPAN></FONT></P>
<P><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: Wingdings; mso-bidi-font-size: 6.0pt; mso-bidi-font-family: Wingdings; mso-font-kerning: 0pt">&#56256;&#56442; </SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'>In addition to saving a transfer between kernel space and user space, </SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-RomanIta","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta; mso-font-kerning: 0pt'>mmap() </SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'>can also improve performance by lowering memory requirements. When using </SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-RomanIta","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta; mso-font-kerning: 0pt'>read() </SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'>or </SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-RomanIta","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta; mso-font-kerning: 0pt'>write()</SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'>, the data is maintained in two buffers: one in user space and the other in kernel space. When using </SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-RomanIta","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta; mso-font-kerning: 0pt'>mmap()</SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'>, a single buffer is shared between the kernel space and user space. Furthermore, if multiple processes are performing I/O on the same file, then, using </SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-RomanIta","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta; mso-font-kerning: 0pt'>mmap()</SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'>, they can all share the same kernel buffer, resulting in an additional memory saving.</SPAN></FONT></P>
<P><FONT class=extract><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'>Performance benefits from memory-mapped I/O are most likely to be realized when performing repeated random accesses in a large file. If we are performing sequential access of a file, then </SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-RomanIta","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta; mso-font-kerning: 0pt'>mmap() </SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'>will probably provide little or no gain over </SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-RomanIta","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta; mso-font-kerning: 0pt'>read() </SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'>and </SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-RomanIta","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta; mso-font-kerning: 0pt'>write()</SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'>, assuming that we perform I/O using buffer sizes big enough to avoid making a large number of I/O system calls. The reason that there is little performance benefit is that, regardless of which technique we use, the entire contents of the file will be transferred between disk and memory exactly once, and the efficiency gains of eliminating a data transfer between user space and kernel space and reducing memory usage are typically negligible compared to the time required for disk I/O.</SPAN></FONT></P>
<P><FONT class=extract><SPAN lang=EN-US style='FONT-SIZE: 16pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'>Memory-mapped I/O can also have disadvantages. For small I/Os, the cost of memory-mapped I/O (i.e., mapping, page faulting, unmapping, and updating the hardware memory management unit&#8217;s translation look-aside buffer) can actually be higher than for a simple </SPAN><SPAN lang=EN-US style='FONT-SIZE: 16pt; FONT-FAMILY: "NewBaskervilleEF-RomanIta","sans-serif"; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta; mso-font-kerning: 0pt'>read() </SPAN><SPAN lang=EN-US style='FONT-SIZE: 16pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'>or </SPAN><SPAN lang=EN-US style='FONT-SIZE: 16pt; FONT-FAMILY: "NewBaskervilleEF-RomanIta","sans-serif"; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta; mso-font-kerning: 0pt'>write()</SPAN><SPAN lang=EN-US style='FONT-SIZE: 16pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'>. In addition, it can sometimes be difficult for the kernel to efficiently handle write-back for writable mappings (the use of </SPAN><SPAN lang=EN-US style='FONT-SIZE: 16pt; FONT-FAMILY: "NewBaskervilleEF-RomanIta","sans-serif"; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta; mso-font-kerning: 0pt'>msync() </SPAN><SPAN lang=EN-US style='FONT-SIZE: 16pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'>or </SPAN><SPAN lang=EN-US style='FONT-SIZE: 16pt; FONT-FAMILY: "NewBaskervilleEF-RomanIta","sans-serif"; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta; mso-font-kerning: 0pt'>sync_file_range() </SPAN><SPAN lang=EN-US style='FONT-SIZE: 16pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'>can help improve efficiency in this case).</SPAN></FONT></P>
<P><B><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "Futura-CondensedBold","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Futura-CondensedBold; mso-font-kerning: 0pt'><FONT class=extract>IPC using a shared file mapping</FONT></SPAN></B></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'><FONT class=extract>Since all processes with a shared mapping of the same file region share the same physical pages of memory, the second use of a shared file mapping is as a method of (fast) IPC. The feature that distinguishes this type of shared memory region from a System V shared memory object (Chapter 48) is that modifications to the contents of the region are carried through to the underlying mapped file. This feature is useful in an application that requires the shared memory contents to persist across application or system restarts.</FONT></SPAN></P>
<P><B><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "Futura-CondensedBold","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Futura-CondensedBold; mso-font-kerning: 0pt'><FONT class=extract>Example program</FONT></SPAN></B></P>
<P><FONT class=extract><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'>Listing 49-2 provides a simple example of the use of </SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-RomanIta","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta; mso-font-kerning: 0pt'>mmap() </SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'>to create a shared file mapping. This program begins by mapping the file named in its first command-line argument. It then prints the value of the string lying at the start of the mapped region. Finally, if a second command-line argument is supplied, that string is copied into the shared memory region.</SPAN></FONT></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'><FONT class=extract>The following shell session log demonstrates the use of this program. We begin by creating a 1024-byte file that is populated with zeros:</FONT></SPAN></P>
<P><FONT face=Calibri><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMonoCondensed-Plain; mso-bidi-font-size: 8.5pt; mso-bidi-font-family: TheSansMonoCondensed-Plain; mso-font-kerning: 0pt; mso-hansi-font-family: NewBaskervilleEF-Roman">$ </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMonoCondensed-Bold; mso-bidi-font-size: 8.5pt; mso-bidi-font-family: TheSansMonoCondensed-Bold; mso-font-kerning: 0pt; mso-hansi-font-family: NewBaskervilleEF-Roman">dd if=/dev/zero of=s.txt bs=1 count=1024</SPAN></B></FONT></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMonoCondensed-Plain; mso-bidi-font-size: 8.5pt; mso-bidi-font-family: TheSansMonoCondensed-Plain; mso-font-kerning: 0pt; mso-hansi-font-family: NewBaskervilleEF-Roman"><FONT class=extract face=Calibri>1024+0 records in</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMonoCondensed-Plain; mso-bidi-font-size: 8.5pt; mso-bidi-font-family: TheSansMonoCondensed-Plain; mso-font-kerning: 0pt; mso-hansi-font-family: NewBaskervilleEF-Roman"><FONT class=extract face=Calibri>1024+0 records out</FONT></SPAN></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'><FONT class=extract>We then use our program to map the file and copy a string into the mapped region:</FONT></SPAN></P>
<P><FONT face=Calibri><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMonoCondensed-Plain; mso-bidi-font-size: 8.5pt; mso-bidi-font-family: TheSansMonoCondensed-Plain; mso-font-kerning: 0pt; mso-hansi-font-family: NewBaskervilleEF-Roman">$ </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMonoCondensed-Bold; mso-bidi-font-size: 8.5pt; mso-bidi-font-family: TheSansMonoCondensed-Bold; mso-font-kerning: 0pt; mso-hansi-font-family: NewBaskervilleEF-Roman">./t_mmap s.txt hello</SPAN></B></FONT></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMonoCondensed-Plain; mso-bidi-font-size: 8.5pt; mso-bidi-font-family: TheSansMonoCondensed-Plain; mso-font-kerning: 0pt; mso-hansi-font-family: NewBaskervilleEF-Roman"><FONT class=extract face=Calibri>Current string=</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMonoCondensed-Plain; mso-bidi-font-size: 8.5pt; mso-bidi-font-family: TheSansMonoCondensed-Plain; mso-font-kerning: 0pt; mso-hansi-font-family: NewBaskervilleEF-Roman"><FONT class=extract face=Calibri>Copied "hello" to shared memory</FONT></SPAN></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'><FONT class=extract>The program displayed nothing for the current string because the initial value of the mapped files began with a null byte (i.e., zero-length string).</FONT></SPAN></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'><FONT class=extract>Next, we use our program to again map the file and copy a new string into the mapped region:</FONT></SPAN></P>
<P><FONT face=Calibri><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMonoCondensed-Plain; mso-bidi-font-size: 8.5pt; mso-bidi-font-family: TheSansMonoCondensed-Plain; mso-font-kerning: 0pt; mso-hansi-font-family: NewBaskervilleEF-Roman">$ </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMonoCondensed-Bold; mso-bidi-font-size: 8.5pt; mso-bidi-font-family: TheSansMonoCondensed-Bold; mso-font-kerning: 0pt; mso-hansi-font-family: NewBaskervilleEF-Roman">./t_mmap s.txt goodbye</SPAN></B></FONT></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMonoCondensed-Plain; mso-bidi-font-size: 8.5pt; mso-bidi-font-family: TheSansMonoCondensed-Plain; mso-font-kerning: 0pt; mso-hansi-font-family: NewBaskervilleEF-Roman"><FONT class=extract face=Calibri>Current string=hello</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMonoCondensed-Plain; mso-bidi-font-size: 8.5pt; mso-bidi-font-family: TheSansMonoCondensed-Plain; mso-font-kerning: 0pt; mso-hansi-font-family: NewBaskervilleEF-Roman"><FONT class=extract face=Calibri>Copied "goodbye" to shared memory</FONT></SPAN></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'><FONT class=extract>Finally, we dump the contents of the file, 8 characters per line, to verify its contents:</FONT></SPAN></P>
<P><FONT face=Calibri><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMonoCondensed-Plain; mso-bidi-font-size: 8.5pt; mso-bidi-font-family: TheSansMonoCondensed-Plain; mso-font-kerning: 0pt; mso-hansi-font-family: NewBaskervilleEF-Roman">$ </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMonoCondensed-Bold; mso-bidi-font-size: 8.5pt; mso-bidi-font-family: TheSansMonoCondensed-Bold; mso-font-kerning: 0pt; mso-hansi-font-family: NewBaskervilleEF-Roman">od -c -w8 s.txt</SPAN></B></FONT></FONT></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMonoCondensed-Plain; mso-bidi-font-size: 8.5pt; mso-bidi-font-family: TheSansMonoCondensed-Plain; mso-font-kerning: 0pt; mso-hansi-font-family: NewBaskervilleEF-Roman"><FONT class=extract face=Calibri>0000000 g o o d b y e nul</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMonoCondensed-Plain; mso-bidi-font-size: 8.5pt; mso-bidi-font-family: TheSansMonoCondensed-Plain; mso-font-kerning: 0pt; mso-hansi-font-family: NewBaskervilleEF-Roman"><FONT class=extract face=Calibri>0000010 nul nul nul nul nul nul nul nul</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMonoCondensed-Plain; mso-bidi-font-size: 8.5pt; mso-bidi-font-family: TheSansMonoCondensed-Plain; mso-font-kerning: 0pt; mso-hansi-font-family: NewBaskervilleEF-Roman"><FONT class=extract face=Calibri>*</FONT></SPAN></P>
<P><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMonoCondensed-Plain; mso-bidi-font-size: 8.5pt; mso-bidi-font-family: TheSansMonoCondensed-Plain; mso-font-kerning: 0pt; mso-hansi-font-family: NewBaskervilleEF-Roman"><FONT class=extract face=Calibri>0002000</FONT></SPAN></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'><FONT class=extract>Our trivial program doesn&#8217;t use any mechanism to synchronize access by multiple processes to the mapped file. However, real-world applications typically need to synchronize access to shared mappings. This can be done using a variety of techniques, including semaphores (Chapters 47 and 53) and file locking (Chapter 55).</FONT></SPAN></P>
<P><FONT class=extract><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'>We explain the </SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-RomanIta","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta; mso-font-kerning: 0pt'>msync() </SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-Roman","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-Roman; mso-font-kerning: 0pt'>system call used in Listing 49-2 in Section 49.5.</SPAN></FONT></P>
<P><FONT class=extract><B><SPAN lang=EN-US style='FONT-SIZE: 16pt; FONT-FAMILY: "Futura-Heavy","sans-serif"; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: Futura-Heavy; mso-font-kerning: 0pt'>Listing 49-2: </SPAN></B><SPAN lang=EN-US style='FONT-SIZE: 16pt; FONT-FAMILY: "Futura-Book","sans-serif"; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: Futura-Book; mso-font-kerning: 0pt'>Using </SPAN><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskervilleEF-RomanIta","sans-serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskervilleEF-RomanIta; mso-font-kerning: 0pt'>mmap() </SPAN><SPAN lang=EN-US style='FONT-SIZE: 16pt; FONT-FAMILY: "Futura-Book","sans-serif"; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: Futura-Book; mso-font-kerning: 0pt'>to create a shared file mapping</SPAN></FONT></P>
<P><FONT class=extract><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskerville-Roman","serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskerville-Roman; mso-font-kerning: 0pt'>&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211; </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMonoCondensed-Bold; mso-bidi-font-size: 8.5pt; mso-bidi-font-family: TheSansMonoCondensed-Bold; mso-font-kerning: 0pt; mso-hansi-font-family: NewBaskervilleEF-Roman"><FONT face=Calibri>mmap/t_mmap.c</FONT></SPAN></B></FONT></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskerville-Roman","serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskerville-Roman; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-Plain'><FONT class=extract>#include &lt;sys/mman.h&gt;</FONT></SPAN></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskerville-Roman","serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskerville-Roman; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-Plain'><FONT class=extract>#include &lt;fcntl.h&gt;</FONT></SPAN></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskerville-Roman","serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskerville-Roman; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-Plain'><FONT class=extract>#include "tlpi_hdr.h"</FONT></SPAN></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskerville-Roman","serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskerville-Roman; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-Plain'><FONT class=extract>#define MEM_SIZE 10</FONT></SPAN></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskerville-Roman","serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskerville-Roman; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-Plain'><FONT class=extract>int</FONT></SPAN></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskerville-Roman","serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskerville-Roman; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-Plain'><FONT class=extract>main(int argc, char *argv[])</FONT></SPAN></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskerville-Roman","serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskerville-Roman; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-Plain'><FONT class=extract>{</FONT></SPAN></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskerville-Roman","serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskerville-Roman; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-Plain'><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>char *addr;</FONT></SPAN></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskerville-Roman","serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskerville-Roman; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-Plain'><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>int fd;</FONT></SPAN></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskerville-Roman","serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskerville-Roman; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-Plain'><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>if (argc &lt; 2 || strcmp(argv[1], "--help") == 0)</FONT></SPAN></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskerville-Roman","serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskerville-Roman; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-Plain'><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>usageErr("%s file [new-value]\n", argv[0]);</FONT></SPAN></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskerville-Roman","serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskerville-Roman; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-Plain'><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>fd = open(argv[1], O_RDWR);</FONT></SPAN></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskerville-Roman","serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskerville-Roman; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-Plain'><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>if (fd == -1)</FONT></SPAN></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskerville-Roman","serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskerville-Roman; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-Plain'><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>errExit("open");</FONT></SPAN></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskerville-Roman","serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskerville-Roman; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-Plain'><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>addr = mmap(NULL, MEM_SIZE, PROT_READ | PROT_WRITE, MAP_SHARED, fd, 0);</FONT></SPAN></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskerville-Roman","serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskerville-Roman; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-Plain'><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>if (addr == MAP_FAILED)</FONT></SPAN></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskerville-Roman","serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskerville-Roman; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-Plain'><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>errExit("mmap");</FONT></SPAN></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskerville-Roman","serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskerville-Roman; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-Plain'><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>if (close(fd) == -1) /* No longer need 'fd' */</FONT></SPAN></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskerville-Roman","serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskerville-Roman; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-Plain'><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>errExit("close");</FONT></SPAN></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskerville-Roman","serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskerville-Roman; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-Plain'><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>printf("Current string=%.*s\n", MEM_SIZE, addr);</FONT></SPAN></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskerville-Roman","serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskerville-Roman; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-Plain'><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>/* Secure practice: output at most MEM_SIZE bytes */</FONT></SPAN></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskerville-Roman","serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskerville-Roman; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-Plain'><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>if (argc &gt; 2) { /* Update contents of region */</FONT></SPAN></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskerville-Roman","serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskerville-Roman; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-Plain'><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>if (strlen(argv[2]) &gt;= MEM_SIZE)</FONT></SPAN></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskerville-Roman","serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskerville-Roman; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-Plain'><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>cmdLineErr("'new-value' too large\n");</FONT></SPAN></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskerville-Roman","serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskerville-Roman; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-Plain'><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>memset(addr, 0, MEM_SIZE); /* Zero out region */</FONT></SPAN></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskerville-Roman","serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskerville-Roman; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-Plain'><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>strncpy(addr, argv[2], MEM_SIZE - 1);</FONT></SPAN></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskerville-Roman","serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskerville-Roman; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-Plain'><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>if (msync(addr, MEM_SIZE, MS_SYNC) == -1)</FONT></SPAN></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskerville-Roman","serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskerville-Roman; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-Plain'><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>errExit("msync");</FONT></SPAN></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskerville-Roman","serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskerville-Roman; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-Plain'><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; </SPAN>printf("Copied \"%s\" to shared memory\n", argv[2]);</FONT></SPAN></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskerville-Roman","serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskerville-Roman; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-Plain'><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp; </SPAN><SPAN style="mso-spacerun: yes">&nbsp;</SPAN>}</FONT></SPAN></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskerville-Roman","serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskerville-Roman; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-Plain'><FONT class=extract><SPAN style="mso-spacerun: yes">&nbsp;&nbsp;&nbsp; </SPAN>exit(EXIT_SUCCESS);</FONT></SPAN></P>
<P><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskerville-Roman","serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskerville-Roman; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-Plain'><FONT class=extract>}</FONT></SPAN></P>
<P><FONT class=extract><SPAN lang=EN-US style='FONT-SIZE: 18pt; FONT-FAMILY: "NewBaskerville-Roman","serif"; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: NewBaskerville-Roman; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-Plain'>&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211;&#8211; </SPAN><B><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: TheSansMonoCondensed-Bold; mso-bidi-font-size: 8.5pt; mso-bidi-font-family: TheSansMonoCondensed-Bold; mso-font-kerning: 0pt"><FONT face=Calibri>mmap/t_mmap.c</FONT></SPAN></B></FONT></P></BODY>