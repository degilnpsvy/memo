Legacy Drivers:&nbsp; Device Probing<BR>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<BR>Some drivers are not fully converted to the driver model, because they take<BR>on a non-driver role:&nbsp; the driver registers its platform device, rather than<BR>leaving that for system infrastructure.&nbsp; Such drivers can't be hotplugged<BR>or coldplugged, since those mechanisms require device creation to be in a<BR>different system component than the driver. 
<P></P>
<P>The only "good" reason for this is to handle older system designs which, like<BR>original IBM PCs, rely on error-prone "probe-the-hardware" models for hardware<BR>configuration.&nbsp; Newer systems have largely abandoned that model, in favor of<BR>bus-level support for dynamic configuration (PCI, USB), or device tables<BR>provided by the boot firmware (e.g. PNPACPI on x86).&nbsp; There are too many<BR>conflicting options about what might be where, and even educated guesses by<BR>an operating system will be wrong often enough to make trouble.</P>
<P>This style of driver is discouraged.&nbsp; If you're updating such a driver,<BR>please try to move the device enumeration to a more appropriate location,<BR>outside the driver.&nbsp; This will usually be cleanup, since such drivers<BR>tend to already have "normal" modes, such as ones using device nodes that<BR>were created by PNP or by platform device setup.</P>
<P><FONT class=extract>None the less, there are some APIs to support such legacy drivers.&nbsp; Avoid<BR>using these calls except with such hotplug-deficient drivers.</FONT></P>
<P><FONT class=extract>&nbsp;struct platform_device *platform_device_alloc(<BR>&nbsp;&nbsp;&nbsp;const char *name, int id);</FONT></P>
<P><FONT class=extract>You can use platform_device_alloc() to dynamically allocate a device, which<BR>you will then initialize with resources and platform_device_register().<BR>A better solution is usually:</FONT></P>
<P><FONT class=extract>&nbsp;struct platform_device *platform_device_register_simple(<BR>&nbsp;&nbsp;&nbsp;const char *name, int id,<BR>&nbsp;&nbsp;&nbsp;struct resource *res, unsigned int nres);</FONT></P>
<P><FONT class=extract>You can use platform_device_register_simple() as a one-step call to allocate<BR>and register a device.</FONT>