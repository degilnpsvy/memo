Early Platform Devices and Drivers<BR>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<BR><FONT class=extract>The early platform interfaces provide platform data to platform device<BR>drivers early on during the system boot.</FONT> The code is built on top of the<BR>early_param() command line parsing and can be executed very early on. 
<P></P>
<P>Example: "earlyprintk" class early serial console in 6 steps</P>
<P>1. Registering early platform device data<BR>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<BR>The architecture code registers platform device data using the function<BR>early_platform_add_devices(). In the case of early serial console this<BR>should be hardware configuration for the serial port. Devices registered<BR>at this point will later on be matched against early platform drivers.</P>
<P>2. Parsing kernel command line<BR>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<BR>The architecture code calls parse_early_param() to parse the kernel<BR>command line. This will execute all matching early_param() callbacks.<BR>User specified early platform devices will be registered at this point.<BR>For the early serial console case the user can specify port on the<BR>kernel command line as "earlyprintk=serial.0" where "earlyprintk" is<BR>the class string, "serial" is the name of the platform driver and<BR>0 is the platform device id. If the id is -1 then the dot and the<BR>id can be omitted.</P>
<P>3. Installing early platform drivers belonging to a certain class<BR>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<BR>The architecture code may optionally force registration of all early<BR>platform drivers belonging to a certain class using the function<BR>early_platform_driver_register_all(). User specified devices from<BR>step 2 have priority over these. This step is omitted by the serial<BR>driver example since the early serial driver code should be disabled<BR>unless the user has specified port on the kernel command line.</P>
<P>4. Early platform driver registration<BR>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<BR>Compiled-in platform drivers making use of early_platform_init() are<BR>automatically registered during step 2 or 3. The serial driver example<BR>should use early_platform_init("earlyprintk", &amp;platform_driver).</P>
<P>5. Probing of early platform drivers belonging to a certain class<BR>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<BR>The architecture code calls early_platform_driver_probe() to match<BR>registered early platform devices associated with a certain class with<BR>registered early platform drivers. Matched devices will get probed().<BR>This step can be executed at any point during the early boot. As soon<BR>as possible may be good for the serial port case.</P>
<P>6. Inside the early platform driver probe()<BR>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<BR>The driver code needs to take special care during early boot, especially<BR>when it comes to memory allocation and interrupt registration. The code<BR>in the probe() function can use is_early_platform_device() to check if<BR>it is called at early platform device or at the regular platform device<BR>time. The early serial driver performs register_console() at this point.</P>
<P>For further information, see &lt;linux/platform_device.h&gt;.