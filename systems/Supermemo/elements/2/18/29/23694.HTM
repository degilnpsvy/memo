Linux kernel driver callbacks 
<P></P>
<P>&nbsp;</P>
<P>&nbsp;<FONT class=clozed>int&nbsp;(*probe)&nbsp;(struct device * dev);</FONT></P>
<P></P>
<P><FONT class=extract>The probe() entry is called in task context, with the bus's rwsem locked<BR>and the driver partially bound to the device.</FONT>&nbsp; <FONT class=extract>Drivers commonly use<BR>container_of() to convert "dev" to a bus-specific type, both in probe()<BR>and other routines.&nbsp; That type often provides device resource data, such<BR>as pci_dev.resource[] or platform_device.resources, which is used in<BR>addition to dev-&gt;platform_data to initialize the driver.</FONT></P>
<P>This callback holds the driver-specific logic to bind the driver to a<BR>given device.&nbsp; That includes verifying that the device is present, that<BR>it's a version the driver can handle, that driver data structures can<BR>be allocated and initialized, and that any hardware can be initialized.<BR><FONT class=extract>Drivers often store a pointer to their state with dev_set_drvdata().</FONT><BR>When the driver has successfully bound itself to that device, then probe()<BR>returns zero and the driver model code will finish its part of binding<BR>the driver to that device.</P>
<P>A driver's probe() may return a negative errno value to indicate that<BR>the driver did not bind to this device, in which case it should have<BR>released all resources it allocated.