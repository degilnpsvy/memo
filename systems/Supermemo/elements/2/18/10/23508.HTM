# Documentation/early-userspace/buffer-format.txt
<P></P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; initramfs buffer format<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -----------------------</P>
<P></P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Al Viro, H. Peter Anvin<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Last revision: 2002-01-13</P>
<P>Starting with kernel 2.5.x, the old "initial ramdisk" protocol is<BR>getting {replaced/complemented} with the new "initial ramfs"<BR>(initramfs) protocol.&nbsp; The initramfs contents is passed using the same<BR>memory buffer protocol used by the initrd protocol, but the contents<BR>is different.&nbsp; The initramfs buffer contains an archive which is<BR>expanded into a ramfs filesystem; this document details the format of<BR>the initramfs buffer format.</P>
<P>The initramfs buffer format is based around the "newc" or "crc" CPIO<BR>formats, and can be created with the cpio(1) utility.&nbsp; The cpio<BR>archive can be compressed using gzip(1).&nbsp; One valid version of an<BR>initramfs buffer is thus a single .cpio.gz file.</P>
<P>The full format of the initramfs buffer is defined by the following<BR>grammar, where:<BR>&nbsp;*&nbsp;is used to indicate "0 or more occurrences of"<BR>&nbsp;(|)&nbsp;indicates alternatives<BR>&nbsp;+&nbsp;indicates concatenation<BR>&nbsp;GZIP()&nbsp;indicates the gzip(1) of the operand<BR>&nbsp;ALGN(n)&nbsp;means padding with null bytes to an n-byte boundary</P>
<P>&nbsp;initramfs&nbsp; := ("\0" | cpio_archive | cpio_gzip_archive)*</P>
<P>&nbsp;cpio_gzip_archive := GZIP(cpio_archive)</P>
<P>&nbsp;cpio_archive := cpio_file* + (&lt;nothing&gt; | cpio_trailer)</P>
<P>&nbsp;cpio_file := ALGN(4) + cpio_header + filename + "\0" + ALGN(4) + data</P>
<P>&nbsp;cpio_trailer := ALGN(4) + cpio_header + "TRAILER!!!\0" + ALGN(4)</P>
<P><BR>In human terms, the initramfs buffer contains a collection of<BR>compressed and/or uncompressed cpio archives (in the "newc" or "crc"<BR>formats); arbitrary amounts zero bytes (for padding) can be added<BR>between members.</P>
<P>The cpio "TRAILER!!!" entry (cpio end-of-archive) is optional, but is<BR>not ignored; see "handling of hard links" below.</P>
<P>The structure of the cpio_header is as follows (all fields contain<BR>hexadecimal ASCII numbers fully padded with '0' on the left to the<BR>full width of the field, for example, the integer 4780 is represented<BR>by the ASCII string "000012ac"):</P>
<P>Field name&nbsp;&nbsp;&nbsp; Field size&nbsp; Meaning<BR>c_magic&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 6 bytes&nbsp;&nbsp; The string "070701" or "070702"<BR>c_ino&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8 bytes&nbsp;&nbsp; File inode number<BR>c_mode&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8 bytes&nbsp;&nbsp; File mode and permissions<BR>c_uid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8 bytes&nbsp;&nbsp; File uid<BR>c_gid&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8 bytes&nbsp;&nbsp; File gid<BR>c_nlink&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8 bytes&nbsp;&nbsp; Number of links<BR>c_mtime&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8 bytes&nbsp;&nbsp; Modification time<BR>c_filesize&nbsp;&nbsp;&nbsp; 8 bytes&nbsp;&nbsp; Size of data field<BR>c_maj&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8 bytes&nbsp;&nbsp; Major part of file device number<BR>c_min&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8 bytes&nbsp;&nbsp; Minor part of file device number<BR>c_rmaj&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8 bytes&nbsp;&nbsp; Major part of device node reference<BR>c_rmin&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8 bytes&nbsp;&nbsp; Minor part of device node reference<BR>c_namesize&nbsp;&nbsp;&nbsp; 8 bytes&nbsp;&nbsp; Length of filename, including final \0<BR>c_chksum&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8 bytes&nbsp;&nbsp; Checksum of data field if c_magic is 070702;<BR>&nbsp;&nbsp;&nbsp;&nbsp; otherwise zero</P>
<P>The c_mode field matches the contents of st_mode returned by stat(2)<BR>on Linux, and encodes the file type and file permissions.</P>
<P>The c_filesize should be zero for any file which is not a regular file<BR>or symlink.</P>
<P>The c_chksum field contains a simple 32-bit unsigned sum of all the<BR>bytes in the data field.&nbsp; cpio(1) refers to this as "crc", which is<BR>clearly incorrect (a cyclic redundancy check is a different and<BR>significantly stronger integrity check), however, this is the<BR>algorithm used.</P>
<P>If the filename is "TRAILER!!!" this is actually an end-of-archive<BR>marker; the c_filesize for an end-of-archive marker must be zero.</P>
<P><BR>*** Handling of hard links</P>
<P>When a nondirectory with c_nlink &gt; 1 is seen, the (c_maj,c_min,c_ino)<BR>tuple is looked up in a tuple buffer.&nbsp; If not found, it is entered in<BR>the tuple buffer and the entry is created as usual; if found, a hard<BR>link rather than a second copy of the file is created.&nbsp; It is not<BR>necessary (but permitted) to include a second copy of the file<BR>contents; if the file contents is not included, the c_filesize field<BR>should be set to zero to indicate no data section follows.&nbsp; If data is<BR>present, the previous instance of the file is overwritten; this allows<BR>the data-carrying instance of a file to occur anywhere in the sequence<BR>(GNU cpio is reported to attach the data to the last instance of a<BR>file only.)</P>
<P>c_filesize must not be zero for a symlink.</P>
<P>When a "TRAILER!!!" end-of-archive marker is seen, the tuple buffer is<BR>reset.&nbsp; This permits archives which are generated independently to be<BR>concatenated.</P>
<P>To combine file data from different sources (without having to<BR>regenerate the (c_maj,c_min,c_ino) fields), therefore, either one of<BR>the following techniques can be used:</P>
<P>a) Separate the different file data sources with a "TRAILER!!!"<BR>&nbsp;&nbsp; end-of-archive marker, or</P>
<P>b) Make sure c_nlink == 1 for all nondirectory entries.