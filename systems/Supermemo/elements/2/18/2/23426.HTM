# Documentation/flexible-arrays.txt
<P></P>
<P>Using flexible arrays in the kernel<BR>Last updated for 2.6.32<BR>Jonathan Corbet &lt;<A href="mailto:corbet@lwn.net">corbet@lwn.net</A>&gt;</P>
<P></P>
<P>Large contiguous memory allocations can be unreliable in the Linux kernel.<BR>Kernel programmers will sometimes respond to this problem by allocating<BR>pages with vmalloc().&nbsp; This solution not ideal, though.&nbsp; On 32-bit systems,<BR>memory from vmalloc() must be mapped into a relatively small address space;<BR>it's easy to run out.&nbsp; On SMP systems, the page table changes required by<BR>vmalloc() allocations can require expensive cross-processor interrupts on<BR>all CPUs.&nbsp; And, on all systems, use of space in the vmalloc() range<BR>increases pressure on the translation lookaside buffer (TLB), reducing the<BR>performance of the system.</P>
<P>In many cases, the need for memory from vmalloc() can be eliminated by<BR>piecing together an array from smaller parts; the flexible array library<BR>exists to make this task easier.</P>
<P>A flexible array holds an arbitrary (within limits) number of fixed-sized<BR>objects, accessed via an integer index.&nbsp; Sparse arrays are handled<BR>reasonably well.&nbsp; Only single-page allocations are made, so memory<BR>allocation failures should be relatively rare.&nbsp; The down sides are that the<BR>arrays cannot be indexed directly, individual object size cannot exceed the<BR>system page size, and putting data into a flexible array requires a copy<BR>operation.&nbsp; It's also worth noting that flexible arrays do no internal<BR>locking at all; if concurrent access to an array is possible, then the<BR>caller must arrange for appropriate mutual exclusion.</P>
<P>The creation of a flexible array is done with:</P>
<P>&nbsp;&nbsp;&nbsp; #include &lt;linux/flex_array.h&gt;</P>
<P>&nbsp;&nbsp;&nbsp; struct flex_array *flex_array_alloc(int element_size,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;unsigned int total,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;gfp_t flags);</P>
<P>The individual object size is provided by element_size, while total is the<BR>maximum number of objects which can be stored in the array.&nbsp; The flags<BR>argument is passed directly to the internal memory allocation calls.&nbsp; With<BR>the current code, using flags to ask for high memory is likely to lead to<BR>notably unpleasant side effects.</P>
<P>It is also possible to define flexible arrays at compile time with:</P>
<P>&nbsp;&nbsp;&nbsp; DEFINE_FLEX_ARRAY(name, element_size, total);</P>
<P>This macro will result in a definition of an array with the given name; the<BR>element size and total will be checked for validity at compile time.</P>
<P>Storing data into a flexible array is accomplished with a call to:</P>
<P>&nbsp;&nbsp;&nbsp; int flex_array_put(struct flex_array *array, unsigned int element_nr,<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; void *src, gfp_t flags);</P>
<P>This call will copy the data from src into the array, in the position<BR>indicated by element_nr (which must be less than the maximum specified when<BR>the array was created).&nbsp; If any memory allocations must be performed, flags<BR>will be used.&nbsp; The return value is zero on success, a negative error code<BR>otherwise.</P>
<P>There might possibly be a need to store data into a flexible array while<BR>running in some sort of atomic context; in this situation, sleeping in the<BR>memory allocator would be a bad thing.&nbsp; That can be avoided by using<BR>GFP_ATOMIC for the flags value, but, often, there is a better way.&nbsp; The<BR>trick is to ensure that any needed memory allocations are done before<BR>entering atomic context, using:</P>
<P>&nbsp;&nbsp;&nbsp; int flex_array_prealloc(struct flex_array *array, unsigned int start,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; unsigned int nr_elements, gfp_t flags);</P>
<P>This function will ensure that memory for the elements indexed in the range<BR>defined by start and nr_elements has been allocated.&nbsp; Thereafter, a<BR>flex_array_put() call on an element in that range is guaranteed not to<BR>block.</P>
<P>Getting data back out of the array is done with:</P>
<P>&nbsp;&nbsp;&nbsp; void *flex_array_get(struct flex_array *fa, unsigned int element_nr);</P>
<P>The return value is a pointer to the data element, or NULL if that<BR>particular element has never been allocated.</P>
<P>Note that it is possible to get back a valid pointer for an element which<BR>has never been stored in the array.&nbsp; Memory for array elements is allocated<BR>one page at a time; a single allocation could provide memory for several<BR>adjacent elements.&nbsp; Flexible array elements are normally initialized to the<BR>value FLEX_ARRAY_FREE (defined as 0x6c in &lt;linux/poison.h&gt;), so errors<BR>involving that number probably result from use of unstored array entries.<BR>Note that, if array elements are allocated with __GFP_ZERO, they will be<BR>initialized to zero and this poisoning will not happen.</P>
<P>Individual elements in the array can be cleared with:</P>
<P>&nbsp;&nbsp;&nbsp; int flex_array_clear(struct flex_array *array, unsigned int element_nr);</P>
<P>This function will set the given element to FLEX_ARRAY_FREE and return<BR>zero.&nbsp; If storage for the indicated element is not allocated for the array,<BR>flex_array_clear() will return -EINVAL instead.&nbsp; Note that clearing an<BR>element does not release the storage associated with it; to reduce the<BR>allocated size of an array, call:</P>
<P>&nbsp;&nbsp;&nbsp; int flex_array_shrink(struct flex_array *array);</P>
<P>The return value will be the number of pages of memory actually freed.<BR>This function works by scanning the array for pages containing nothing but<BR>FLEX_ARRAY_FREE bytes, so (1) it can be expensive, and (2) it will not work<BR>if the array's pages are allocated with __GFP_ZERO.</P>
<P>It is possible to remove all elements of an array with a call to:</P>
<P>&nbsp;&nbsp;&nbsp; void flex_array_free_parts(struct flex_array *array);</P>
<P>This call frees all elements, but leaves the array itself in place.<BR>Freeing the entire array is done with:</P>
<P>&nbsp;&nbsp;&nbsp; void flex_array_free(struct flex_array *array);</P>
<P>As of this writing, there are no users of flexible arrays in the mainline<BR>kernel.&nbsp; The functions described here are also not exported to modules;<BR>that will probably be fixed when somebody comes up with a need for it.