# Documentation/HOWTO.txt 
<P></P>
<P>HOWTO do Linux kernel development<BR>---------------------------------</P>
<P></P>
<P>This is the be-all, end-all document on this topic.&nbsp; It contains<BR>instructions on how to become a Linux kernel developer and how to learn<BR>to work with the Linux kernel development community.&nbsp; It tries to not<BR>contain anything related to the technical aspects of kernel programming,<BR>but will help point you in the right direction for that.</P>
<P>If anything in this document becomes out of date, please send in patches<BR>to the maintainer of this file, who is listed at the bottom of the<BR>document.</P>
<P><BR>Introduction<BR>------------</P>
<P>So, you want to learn how to become a Linux kernel developer?&nbsp; Or you<BR>have been told by your manager, "Go write a Linux driver for this<BR>device."&nbsp; This document's goal is to teach you everything you need to<BR>know to achieve this by describing the process you need to go through,<BR>and hints on how to work with the community.&nbsp; It will also try to<BR>explain some of the reasons why the community works like it does.</P>
<P>The kernel is written mostly in C, with some architecture-dependent<BR>parts written in assembly. A good understanding of C is required for<BR>kernel development.&nbsp; Assembly (any architecture) is not required unless<BR>you plan to do low-level development for that architecture.&nbsp; <FONT class=extract>Though they<BR>are not a good substitute for a solid C education and/or years of<BR>experience, the following books are good for, if anything, reference:<BR>&nbsp;- "The C Programming Language" by Kernighan and Ritchie [Prentice Hall]<BR>&nbsp;- "Practical C Programming" by Steve Oualline [O'Reilly]<BR>&nbsp;- "C:&nbsp; A Reference Manual" by Harbison and Steele [Prentice Hall]</FONT></P>
<P>The kernel is written using GNU C and the GNU toolchain.&nbsp; While it<BR>adheres to the ISO C89 standard, it uses a number of extensions that are<BR>not featured in the standard.&nbsp; The kernel is a freestanding C<BR>environment, with no reliance on the standard C library, so some<BR>portions of the C standard are not supported.&nbsp; Arbitrary long long<BR>divisions and floating point are not allowed.&nbsp; It can sometimes be<BR>difficult to understand the assumptions the kernel has on the toolchain<BR>and the extensions that it uses, and unfortunately there is no<BR>definitive reference for them.&nbsp; Please check the gcc info pages (`info<BR>gcc`) for some information on them.</P>
<P>Please remember that you are trying to learn how to work with the<BR>existing development community.&nbsp; It is a diverse group of people, with<BR>high standards for coding, style and procedure.&nbsp; These standards have<BR>been created over time based on what they have found to work best for<BR>such a large and geographically dispersed team.&nbsp; Try to learn as much as<BR>possible about these standards ahead of time, as they are well<BR>documented; do not expect people to adapt to you or your company's way<BR>of doing things.</P>
<P><BR>Legal Issues<BR>------------</P>
<P>The Linux kernel source code is released under the GPL.&nbsp; Please see the<BR>file, COPYING, in the main directory of the source tree, for details on<BR>the license.&nbsp; If you have further questions about the license, please<BR>contact a lawyer, and do not ask on the Linux kernel mailing list.&nbsp; The<BR>people on the mailing lists are not lawyers, and you should not rely on<BR>their statements on legal matters.</P>
<P>For common questions and answers about the GPL, please see:<BR>&nbsp;<A href="http://www.gnu.org/licenses/gpl-faq.html">http://www.gnu.org/licenses/gpl-faq.html</A></P>
<P><BR>Documentation<BR>------------</P>
<P>The Linux kernel source tree has a large range of documents that are<BR>invaluable for learning how to interact with the kernel community.&nbsp; When<BR>new features are added to the kernel, it is recommended that new<BR>documentation files are also added which explain how to use the feature.<BR>When a kernel change causes the interface that the kernel exposes to<BR>userspace to change, it is recommended that you send the information or<BR>a patch to the manual pages explaining the change to the manual pages<BR>maintainer at <A href="mailto:mtk.manpages@gmail.com">mtk.manpages@gmail.com</A>, and CC the list<BR><A href="mailto:linux-api@vger.kernel.org">linux-api@vger.kernel.org</A>.</P>
<P><FONT class=extract>Here is a list of files that are in the kernel source tree that are<BR>required reading:<BR>&nbsp; README<BR>&nbsp;&nbsp;&nbsp; This file gives a short background on the Linux kernel and describes<BR>&nbsp;&nbsp;&nbsp; what is necessary to do to configure and build the kernel.&nbsp; People<BR>&nbsp;&nbsp;&nbsp; who are new to the kernel should start here.</FONT></P>
<P><FONT class=extract>&nbsp; Documentation/Changes<BR>&nbsp;&nbsp;&nbsp; This file gives a list of the minimum levels of various software<BR>&nbsp;&nbsp;&nbsp; packages that are necessary to build and run the kernel<BR>&nbsp;&nbsp;&nbsp; successfully.</FONT></P>
<P><FONT class=extract>&nbsp; Documentation/CodingStyle<BR>&nbsp;&nbsp;&nbsp; This describes the Linux kernel coding style, and some of the<BR>&nbsp;&nbsp;&nbsp; rationale behind it. All new code is expected to follow the<BR>&nbsp;&nbsp;&nbsp; guidelines in this document. Most maintainers will only accept<BR>&nbsp;&nbsp;&nbsp; patches if these rules are followed, and many people will only<BR>&nbsp;&nbsp;&nbsp; review code if it is in the proper style.</FONT></P>
<P><FONT class=extract>&nbsp; Documentation/SubmittingPatches<BR>&nbsp; Documentation/SubmittingDrivers<BR>&nbsp;&nbsp;&nbsp; These files describe in explicit detail how to successfully create<BR>&nbsp;&nbsp;&nbsp; and send a patch, including (but not limited to):<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Email contents<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Email format<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Who to send it to<BR>&nbsp;&nbsp;&nbsp; Following these rules will not guarantee success (as all patches are<BR>&nbsp;&nbsp;&nbsp; subject to scrutiny for content and style), but not following them<BR>&nbsp;&nbsp;&nbsp; will almost always prevent it.</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; Other excellent descriptions of how to create patches properly are:<BR>&nbsp;"The Perfect Patch"<BR>&nbsp;&nbsp;</FONT><A href="http://userweb.kernel.org/~akpm/stuff/tpp.txt"><FONT class=extract>http://userweb.kernel.org/~akpm/stuff/tpp.txt</FONT></A><BR><FONT class=extract>&nbsp;"Linux kernel patch submission format"<BR>&nbsp;&nbsp;</FONT><A href="http://linux.yyz.us/patch-format.html"><FONT class=extract>http://linux.yyz.us/patch-format.html</FONT></A></P>
<P><FONT class=extract>&nbsp; Documentation/stable_api_nonsense.txt<BR>&nbsp;&nbsp;&nbsp; This file describes the rationale behind the conscious decision to<BR>&nbsp;&nbsp;&nbsp; not have a stable API within the kernel, including things like:<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Subsystem shim-layers (for compatibility?)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Driver portability between Operating Systems.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Mitigating rapid change within the kernel source tree (or<BR>&nbsp;preventing rapid change)<BR>&nbsp;&nbsp;&nbsp; This document is crucial for understanding the Linux development<BR>&nbsp;&nbsp;&nbsp; philosophy and is very important for people moving to Linux from<BR>&nbsp;&nbsp;&nbsp; development on other Operating Systems.</FONT></P>
<P><FONT class=extract>&nbsp; Documentation/SecurityBugs<BR>&nbsp;&nbsp;&nbsp; If you feel you have found a security problem in the Linux kernel,<BR>&nbsp;&nbsp;&nbsp; please follow the steps in this document to help notify the kernel<BR>&nbsp;&nbsp;&nbsp; developers, and help solve the issue.</FONT></P>
<P><FONT class=extract>&nbsp; Documentation/ManagementStyle<BR>&nbsp;&nbsp;&nbsp; This document describes how Linux kernel maintainers operate and the<BR>&nbsp;&nbsp;&nbsp; shared ethos behind their methodologies.&nbsp; This is important reading<BR>&nbsp;&nbsp;&nbsp; for anyone new to kernel development (or anyone simply curious about<BR>&nbsp;&nbsp;&nbsp; it), as it resolves a lot of common misconceptions and confusion<BR>&nbsp;&nbsp;&nbsp; about the unique behavior of kernel maintainers.</FONT></P>
<P><FONT class=extract>&nbsp; Documentation/stable_kernel_rules.txt<BR>&nbsp;&nbsp;&nbsp; This file describes the rules on how the stable kernel releases<BR>&nbsp;&nbsp;&nbsp; happen, and what to do if you want to get a change into one of these<BR>&nbsp;&nbsp;&nbsp; releases.</FONT></P>
<P><FONT class=extract>&nbsp; Documentation/kernel-docs.txt<BR>&nbsp;&nbsp;&nbsp; A list of external documentation that pertains to kernel<BR>&nbsp;&nbsp;&nbsp; development.&nbsp; Please consult this list if you do not find what you<BR>&nbsp;&nbsp;&nbsp; are looking for within the in-kernel documentation.</FONT></P>
<P><FONT class=extract>&nbsp; Documentation/applying-patches.txt<BR>&nbsp;&nbsp;&nbsp; A good introduction describing exactly what a patch is and how to<BR>&nbsp;&nbsp;&nbsp; apply it to the different development branches of the kernel.</FONT></P>
<P>The kernel also has a large number of documents that can be<BR>automatically generated from the source code itself.&nbsp; This includes a<BR>full description of the in-kernel API, and rules on how to handle<BR>locking properly.&nbsp; The documents will be created in the<BR>Documentation/DocBook/ directory and can be generated as PDF,<BR>Postscript, HTML, and man pages by running:<BR>&nbsp;make pdfdocs<BR>&nbsp;make psdocs<BR>&nbsp;make htmldocs<BR>&nbsp;make mandocs<BR>respectively from the main kernel source directory.</P>
<P><BR>Becoming A Kernel Developer<BR>---------------------------</P>
<P><FONT class=extract>If you do not know anything about Linux kernel development, you should<BR>look at the Linux KernelNewbies project:<BR>&nbsp;</FONT><A href="http://kernelnewbies.org"><FONT class=extract>http://kernelnewbies.org</FONT></A><BR><FONT class=extract>It consists of a helpful mailing list where you can ask almost any type<BR>of basic kernel development question (make sure to search the archives<BR>first, before asking something that has already been answered in the<BR>past.)&nbsp; It also has an IRC channel that you can use to ask questions in<BR>real-time, and a lot of helpful documentation that is useful for<BR>learning about Linux kernel development.</FONT></P>
<P><FONT class=extract>The website has basic information about code organization, subsystems,<BR>and current projects (both in-tree and out-of-tree). It also describes<BR>some basic logistical information, like how to compile a kernel and<BR>apply a patch.</FONT></P>
<P><FONT class=extract>If you do not know where you want to start, but you want to look for<BR>some task to start doing to join into the kernel development community,<BR>go to the Linux Kernel Janitor's project:<BR>&nbsp;</FONT><A href="http://kernelnewbies.org/KernelJanitors"><FONT class=extract>http://kernelnewbies.org/KernelJanitors</FONT></A><FONT class=extract>&nbsp;<BR>It is a great place to start.&nbsp; It describes a list of relatively simple<BR>problems that need to be cleaned up and fixed within the Linux kernel<BR>source tree.&nbsp; Working with the developers in charge of this project, you<BR>will learn the basics of getting your patch into the Linux kernel tree,<BR>and possibly be pointed in the direction of what to go work on next, if<BR>you do not already have an idea.</FONT></P>
<P><FONT class=extract>If you already have a chunk of code that you want to put into the kernel<BR>tree, but need some help getting it in the proper form, the<BR>kernel-mentors project was created to help you out with this.&nbsp; It is a<BR>mailing list, and can be found at:<BR>&nbsp;</FONT><A href="http://selenic.com/mailman/listinfo/kernel-mentors"><FONT class=extract>http://selenic.com/mailman/listinfo/kernel-mentors</FONT></A></P>
<P><FONT class=extract>Before making any actual modifications to the Linux kernel code, it is<BR>imperative to understand how the code in question works.&nbsp; For this<BR>purpose, nothing is better than reading through it directly (most tricky<BR>bits are commented well), perhaps even with the help of specialized<BR>tools.&nbsp; One such tool that is particularly recommended is the Linux<BR>Cross-Reference project, which is able to present source code in a<BR>self-referential, indexed webpage format. An excellent up-to-date<BR>repository of the kernel code may be found at:<BR>&nbsp;</FONT><A href="http://lxr.linux.no/+trees"><FONT class=extract>http://lxr.linux.no/+trees</FONT></A></P>
<P><BR>The development process<BR>-----------------------</P>
<P>Linux kernel development process currently consists of a few different<BR>main kernel "branches" and lots of different subsystem-specific kernel<BR>branches.&nbsp; These different branches are:<BR>&nbsp; - main 3.x kernel tree<BR>&nbsp; - 3.x.y -stable kernel tree<BR>&nbsp; - 3.x -git kernel patches<BR>&nbsp; - subsystem specific kernel trees and patches<BR>&nbsp; - the 3.x -next kernel tree for integration tests</P>
<P>3.x kernel tree<BR>-----------------<BR>3.x kernels are maintained by Linus Torvalds, and can be found on<BR>kernel.org in the pub/linux/kernel/v3.x/ directory.&nbsp; Its development<BR>process is as follows:<BR>&nbsp; - As soon as a new kernel is released a two weeks window is open,<BR>&nbsp;&nbsp;&nbsp; during this period of time maintainers can submit big diffs to<BR>&nbsp;&nbsp;&nbsp; Linus, usually the patches that have already been included in the<BR>&nbsp;&nbsp;&nbsp; -next kernel for a few weeks.&nbsp; The preferred way to submit big changes<BR>&nbsp;&nbsp;&nbsp; is using git (the kernel's source management tool, more information<BR>&nbsp;&nbsp;&nbsp; can be found at <A href="http://git-scm.com/">http://git-scm.com/</A>) but plain patches are also just<BR>&nbsp;&nbsp;&nbsp; fine.<BR>&nbsp; - After two weeks a -rc1 kernel is released it is now possible to push<BR>&nbsp;&nbsp;&nbsp; only patches that do not include new features that could affect the<BR>&nbsp;&nbsp;&nbsp; stability of the whole kernel.&nbsp; Please note that a whole new driver<BR>&nbsp;&nbsp;&nbsp; (or filesystem) might be accepted after -rc1 because there is no<BR>&nbsp;&nbsp;&nbsp; risk of causing regressions with such a change as long as the change<BR>&nbsp;&nbsp;&nbsp; is self-contained and does not affect areas outside of the code that<BR>&nbsp;&nbsp;&nbsp; is being added.&nbsp; git can be used to send patches to Linus after -rc1<BR>&nbsp;&nbsp;&nbsp; is released, but the patches need to also be sent to a public<BR>&nbsp;&nbsp;&nbsp; mailing list for review.<BR>&nbsp; - A new -rc is released whenever Linus deems the current git tree to<BR>&nbsp;&nbsp;&nbsp; be in a reasonably sane state adequate for testing.&nbsp; The goal is to<BR>&nbsp;&nbsp;&nbsp; release a new -rc kernel every week.<BR>&nbsp; - Process continues until the kernel is considered "ready", the<BR>&nbsp;&nbsp;&nbsp; process should last around 6 weeks.<BR>&nbsp; - Known regressions in each release are periodically posted to the <BR>&nbsp;&nbsp;&nbsp; linux-kernel mailing list.&nbsp; The goal is to reduce the length of <BR>&nbsp;&nbsp;&nbsp; that list to zero before declaring the kernel to be "ready," but, in<BR>&nbsp;&nbsp;&nbsp; the real world, a small number of regressions often remain at <BR>&nbsp;&nbsp;&nbsp; release time.</P>
<P>It is worth mentioning what Andrew Morton wrote on the linux-kernel<BR>mailing list about kernel releases:<BR>&nbsp;"Nobody knows when a kernel will be released, because it's<BR>&nbsp;released according to perceived bug status, not according to a<BR>&nbsp;preconceived timeline."</P>
<P>3.x.y -stable kernel tree<BR>---------------------------<BR>Kernels with 3-part versions are -stable kernels. They contain<BR>relatively small and critical fixes for security problems or significant<BR>regressions discovered in a given 3.x kernel.</P>
<P>This is the recommended branch for users who want the most recent stable<BR>kernel and are not interested in helping test development/experimental<BR>versions.</P>
<P>If no 3.x.y kernel is available, then the highest numbered 3.x<BR>kernel is the current stable kernel.</P>
<P>3.x.y are maintained by the "stable" team &lt;<A href="mailto:stable@vger.kernel.org">stable@vger.kernel.org</A>&gt;, and<BR>are released as needs dictate.&nbsp; The normal release period is approximately<BR>two weeks, but it can be longer if there are no pressing problems.&nbsp; A<BR>security-related problem, instead, can cause a release to happen almost<BR>instantly.</P>
<P>The file Documentation/stable_kernel_rules.txt in the kernel tree<BR>documents what kinds of changes are acceptable for the -stable tree, and<BR>how the release process works.</P>
<P>3.x -git patches<BR>------------------<BR>These are daily snapshots of Linus' kernel tree which are managed in a<BR>git repository (hence the name.) These patches are usually released<BR>daily and represent the current state of Linus' tree.&nbsp; They are more<BR>experimental than -rc kernels since they are generated automatically<BR>without even a cursory glance to see if they are sane.</P>
<P>Subsystem Specific kernel trees and patches<BR>-------------------------------------------<BR>The maintainers of the various kernel subsystems --- and also many<BR>kernel subsystem developers --- expose their current state of<BR>development in source repositories.&nbsp; That way, others can see what is<BR>happening in the different areas of the kernel.&nbsp; In areas where<BR>development is rapid, a developer may be asked to base his submissions<BR>onto such a subsystem kernel tree so that conflicts between the<BR>submission and other already ongoing work are avoided.</P>
<P>Most of these repositories are git trees, but there are also other SCMs<BR>in use, or patch queues being published as quilt series.&nbsp; Addresses of<BR>these subsystem repositories are listed in the MAINTAINERS file.&nbsp; Many<BR>of them can be browsed at <A href="http://git.kernel.org/">http://git.kernel.org/</A>.</P>
<P>Before a proposed patch is committed to such a subsystem tree, it is<BR>subject to review which primarily happens on mailing lists (see the<BR>respective section below).&nbsp; For several kernel subsystems, this review<BR>process is tracked with the tool patchwork.&nbsp; Patchwork offers a web<BR>interface which shows patch postings, any comments on a patch or<BR>revisions to it, and maintainers can mark patches as under review,<BR>accepted, or rejected.&nbsp; Most of these patchwork sites are listed at<BR><A href="http://patchwork.kernel.org/">http://patchwork.kernel.org/</A>.</P>
<P>3.x -next kernel tree for integration tests<BR>---------------------------------------------<BR>Before updates from subsystem trees are merged into the mainline 3.x<BR>tree, they need to be integration-tested.&nbsp; For this purpose, a special<BR>testing repository exists into which virtually all subsystem trees are<BR>pulled on an almost daily basis:<BR>&nbsp;<A href="http://git.kernel.org/?p=linux/kernel/git/next/linux-next.git">http://git.kernel.org/?p=linux/kernel/git/next/linux-next.git</A><BR>&nbsp;<A href="http://linux.f-seidel.de/linux-next/pmwiki/">http://linux.f-seidel.de/linux-next/pmwiki/</A></P>
<P>This way, the -next kernel gives a summary outlook onto what will be<BR>expected to go into the mainline kernel at the next merge period.<BR>Adventurous testers are very welcome to runtime-test the -next kernel.</P>
<P><BR>Bug Reporting<BR>-------------</P>
<P>bugzilla.kernel.org is where the Linux kernel developers track kernel<BR>bugs.&nbsp; Users are encouraged to report all bugs that they find in this<BR>tool.&nbsp; For details on how to use the kernel bugzilla, please see:<BR>&nbsp;<A href="http://bugzilla.kernel.org/page.cgi?id=faq.html">http://bugzilla.kernel.org/page.cgi?id=faq.html</A></P>
<P>The file REPORTING-BUGS in the main kernel source directory has a good<BR>template for how to report a possible kernel bug, and details what kind<BR>of information is needed by the kernel developers to help track down the<BR>problem.</P>
<P><BR>Managing bug reports<BR>--------------------</P>
<P>One of the best ways to put into practice your hacking skills is by fixing<BR>bugs reported by other people. Not only you will help to make the kernel<BR>more stable, you'll learn to fix real world problems and you will improve<BR>your skills, and other developers will be aware of your presence. Fixing<BR>bugs is one of the best ways to get merits among other developers, because<BR>not many people like wasting time fixing other people's bugs.</P>
<P>To work in the already reported bug reports, go to <A href="http://bugzilla.kernel.org">http://bugzilla.kernel.org</A>.<BR>If you want to be advised of the future bug reports, you can subscribe to the<BR>bugme-new mailing list (only new bug reports are mailed here) or to the<BR>bugme-janitor mailing list (every change in the bugzilla is mailed here)</P>
<P>&nbsp;<A href="http://lists.linux-foundation.org/mailman/listinfo/bugme-new">http://lists.linux-foundation.org/mailman/listinfo/bugme-new</A><BR>&nbsp;<A href="http://lists.linux-foundation.org/mailman/listinfo/bugme-janitors">http://lists.linux-foundation.org/mailman/listinfo/bugme-janitors</A></P>
<P>&nbsp;</P>
<P>Mailing lists<BR>-------------</P>
<P>As some of the above documents describe, the majority of the core kernel<BR>developers participate on the Linux Kernel Mailing list.&nbsp; Details on how<BR>to subscribe and unsubscribe from the list can be found at:<BR>&nbsp;<A href="http://vger.kernel.org/vger-lists.html#linux-kernel">http://vger.kernel.org/vger-lists.html#linux-kernel</A><BR>There are archives of the mailing list on the web in many different<BR>places.&nbsp; Use a search engine to find these archives.&nbsp; For example:<BR>&nbsp;<A href="http://dir.gmane.org/gmane.linux.kernel">http://dir.gmane.org/gmane.linux.kernel</A><BR>It is highly recommended that you search the archives about the topic<BR>you want to bring up, before you post it to the list. A lot of things<BR>already discussed in detail are only recorded at the mailing list<BR>archives.</P>
<P>Most of the individual kernel subsystems also have their own separate<BR>mailing list where they do their development efforts.&nbsp; See the<BR>MAINTAINERS file for a list of what these lists are for the different<BR>groups.</P>
<P>Many of the lists are hosted on kernel.org. Information on them can be<BR>found at:<BR>&nbsp;<A href="http://vger.kernel.org/vger-lists.html">http://vger.kernel.org/vger-lists.html</A></P>
<P>Please remember to follow good behavioral habits when using the lists.<BR>Though a bit cheesy, the following URL has some simple guidelines for<BR>interacting with the list (or any list):<BR>&nbsp;<A href="http://www.albion.com/netiquette/">http://www.albion.com/netiquette/</A></P>
<P>If multiple people respond to your mail, the CC: list of recipients may<BR>get pretty large. Don't remove anybody from the CC: list without a good<BR>reason, or don't reply only to the list address. Get used to receiving the<BR>mail twice, one from the sender and the one from the list, and don't try<BR>to tune that by adding fancy mail-headers, people will not like it.</P>
<P>Remember to keep the context and the attribution of your replies intact,<BR>keep the "John Kernelhacker wrote ...:" lines at the top of your reply, and<BR>add your statements between the individual quoted sections instead of<BR>writing at the top of the mail.</P>
<P>If you add patches to your mail, make sure they are plain readable text<BR>as stated in Documentation/SubmittingPatches. Kernel developers don't<BR>want to deal with attachments or compressed patches; they may want<BR>to comment on individual lines of your patch, which works only that way.<BR>Make sure you use a mail program that does not mangle spaces and tab<BR>characters. A good first test is to send the mail to yourself and try<BR>to apply your own patch by yourself. If that doesn't work, get your<BR>mail program fixed or change it until it works.</P>
<P>Above all, please remember to show respect to other subscribers.</P>
<P><BR>Working with the community<BR>--------------------------</P>
<P>The goal of the kernel community is to provide the best possible kernel<BR>there is.&nbsp; When you submit a patch for acceptance, it will be reviewed<BR>on its technical merits and those alone.&nbsp; So, what should you be<BR>expecting?<BR>&nbsp; - criticism<BR>&nbsp; - comments<BR>&nbsp; - requests for change<BR>&nbsp; - requests for justification<BR>&nbsp; - silence</P>
<P>Remember, this is part of getting your patch into the kernel.&nbsp; You have<BR>to be able to take criticism and comments about your patches, evaluate<BR>them at a technical level and either rework your patches or provide<BR>clear and concise reasoning as to why those changes should not be made.<BR>If there are no responses to your posting, wait a few days and try<BR>again, sometimes things get lost in the huge volume.</P>
<P>What should you not do?<BR>&nbsp; - expect your patch to be accepted without question<BR>&nbsp; - become defensive<BR>&nbsp; - ignore comments<BR>&nbsp; - resubmit the patch without making any of the requested changes</P>
<P>In a community that is looking for the best technical solution possible,<BR>there will always be differing opinions on how beneficial a patch is.<BR>You have to be cooperative, and willing to adapt your idea to fit within<BR>the kernel.&nbsp; Or at least be willing to prove your idea is worth it.<BR>Remember, being wrong is acceptable as long as you are willing to work<BR>toward a solution that is right.</P>
<P>It is normal that the answers to your first patch might simply be a list<BR>of a dozen things you should correct.&nbsp; This does _not_ imply that your<BR>patch will not be accepted, and it is _not_ meant against you<BR>personally.&nbsp; Simply correct all issues raised against your patch and<BR>resend it.</P>
<P><BR>Differences between the kernel community and corporate structures<BR>-----------------------------------------------------------------</P>
<P>The kernel community works differently than most traditional corporate<BR>development environments.&nbsp; Here are a list of things that you can try to<BR>do to avoid problems:<BR>&nbsp; Good things to say regarding your proposed changes:<BR>&nbsp;&nbsp;&nbsp; - "This solves multiple problems."<BR>&nbsp;&nbsp;&nbsp; - "This deletes 2000 lines of code."<BR>&nbsp;&nbsp;&nbsp; - "Here is a patch that explains what I am trying to describe."<BR>&nbsp;&nbsp;&nbsp; - "I tested it on 5 different architectures..."<BR>&nbsp;&nbsp;&nbsp; - "Here is a series of small patches that..."<BR>&nbsp;&nbsp;&nbsp; - "This increases performance on typical machines..."</P>
<P>&nbsp; Bad things you should avoid saying:<BR>&nbsp;&nbsp;&nbsp; - "We did it this way in AIX/ptx/Solaris, so therefore it must be<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; good..."<BR>&nbsp;&nbsp;&nbsp; - "I've being doing this for 20 years, so..."<BR>&nbsp;&nbsp;&nbsp; - "This is required for my company to make money"<BR>&nbsp;&nbsp;&nbsp; - "This is for our Enterprise product line."<BR>&nbsp;&nbsp;&nbsp; - "Here is my 1000 page design document that describes my idea"<BR>&nbsp;&nbsp;&nbsp; - "I've been working on this for 6 months..."<BR>&nbsp;&nbsp;&nbsp; - "Here's a 5000 line patch that..."<BR>&nbsp;&nbsp;&nbsp; - "I rewrote all of the current mess, and here it is..."<BR>&nbsp;&nbsp;&nbsp; - "I have a deadline, and this patch needs to be applied now."</P>
<P>Another way the kernel community is different than most traditional<BR>software engineering work environments is the faceless nature of<BR>interaction.&nbsp; One benefit of using email and irc as the primary forms of<BR>communication is the lack of discrimination based on gender or race.<BR>The Linux kernel work environment is accepting of women and minorities<BR>because all you are is an email address.&nbsp; The international aspect also<BR>helps to level the playing field because you can't guess gender based on<BR>a person's name. A man may be named Andrea and a woman may be named Pat.<BR>Most women who have worked in the Linux kernel and have expressed an<BR>opinion have had positive experiences.</P>
<P>The language barrier can cause problems for some people who are not<BR>comfortable with English.&nbsp; A good grasp of the language can be needed in<BR>order to get ideas across properly on mailing lists, so it is<BR>recommended that you check your emails to make sure they make sense in<BR>English before sending them.</P>
<P><BR>Break up your changes<BR>---------------------</P>
<P>The Linux kernel community does not gladly accept large chunks of code<BR>dropped on it all at once.&nbsp; The changes need to be properly introduced,<BR>discussed, and broken up into tiny, individual portions.&nbsp; This is almost<BR>the exact opposite of what companies are used to doing.&nbsp; Your proposal<BR>should also be introduced very early in the development process, so that<BR>you can receive feedback on what you are doing.&nbsp; It also lets the<BR>community feel that you are working with them, and not simply using them<BR>as a dumping ground for your feature.&nbsp; However, don't send 50 emails at<BR>one time to a mailing list, your patch series should be smaller than<BR>that almost all of the time.</P>
<P>The reasons for breaking things up are the following:</P>
<P>1) Small patches increase the likelihood that your patches will be<BR>&nbsp;&nbsp; applied, since they don't take much time or effort to verify for<BR>&nbsp;&nbsp; correctness.&nbsp; A 5 line patch can be applied by a maintainer with<BR>&nbsp;&nbsp; barely a second glance. However, a 500 line patch may take hours to<BR>&nbsp;&nbsp; review for correctness (the time it takes is exponentially<BR>&nbsp;&nbsp; proportional to the size of the patch, or something).</P>
<P>&nbsp;&nbsp; Small patches also make it very easy to debug when something goes<BR>&nbsp;&nbsp; wrong.&nbsp; It's much easier to back out patches one by one than it is<BR>&nbsp;&nbsp; to dissect a very large patch after it's been applied (and broken<BR>&nbsp;&nbsp; something).</P>
<P>2) It's important not only to send small patches, but also to rewrite<BR>&nbsp;&nbsp; and simplify (or simply re-order) patches before submitting them.</P>
<P>Here is an analogy from kernel developer Al Viro:<BR>&nbsp;"Think of a teacher grading homework from a math student.&nbsp; The<BR>&nbsp;teacher does not want to see the student's trials and errors<BR>&nbsp;before they came up with the solution. They want to see the<BR>&nbsp;cleanest, most elegant answer.&nbsp; A good student knows this, and<BR>&nbsp;would never submit her intermediate work before the final<BR>&nbsp;solution."</P>
<P>&nbsp;The same is true of kernel development. The maintainers and<BR>&nbsp;reviewers do not want to see the thought process behind the<BR>&nbsp;solution to the problem one is solving. They want to see a<BR>&nbsp;simple and elegant solution."</P>
<P>It may be challenging to keep the balance between presenting an elegant<BR>solution and working together with the community and discussing your<BR>unfinished work. Therefore it is good to get early in the process to<BR>get feedback to improve your work, but also keep your changes in small<BR>chunks that they may get already accepted, even when your whole task is<BR>not ready for inclusion now.</P>
<P>Also realize that it is not acceptable to send patches for inclusion<BR>that are unfinished and will be "fixed up later."</P>
<P><BR>Justify your change<BR>-------------------</P>
<P>Along with breaking up your patches, it is very important for you to let<BR>the Linux community know why they should add this change.&nbsp; New features<BR>must be justified as being needed and useful.</P>
<P><BR>Document your change<BR>--------------------</P>
<P>When sending in your patches, pay special attention to what you say in<BR>the text in your email.&nbsp; This information will become the ChangeLog<BR>information for the patch, and will be preserved for everyone to see for<BR>all time.&nbsp; It should describe the patch completely, containing:<BR>&nbsp; - why the change is necessary<BR>&nbsp; - the overall design approach in the patch<BR>&nbsp; - implementation details<BR>&nbsp; - testing results</P>
<P>For more details on what this should all look like, please see the<BR>ChangeLog section of the document:<BR>&nbsp; "The Perfect Patch"<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; <A href="http://userweb.kernel.org/~akpm/stuff/tpp.txt">http://userweb.kernel.org/~akpm/stuff/tpp.txt</A></P>
<P>&nbsp;</P>
<P><BR>All of these things are sometimes very hard to do. It can take years to<BR>perfect these practices (if at all). It's a continuous process of<BR>improvement that requires a lot of patience and determination. But<BR>don't give up, it's possible. Many have done it before, and each had to<BR>start exactly where you are now.</P>
<P>&nbsp;</P>
<P><BR>----------<BR>Thanks to Paolo Ciarrocchi who allowed the "Development Process"<BR>(<A href="http://lwn.net/Articles/94386/">http://lwn.net/Articles/94386/</A>) section<BR>to be based on text he had written, and to Randy Dunlap and Gerrit<BR>Huizenga for some of the list of things you should and should not say.<BR>Also thanks to Pat Mochel, Hanna Linder, Randy Dunlap, Kay Sievers,<BR>Vojtech Pavlik, Jan Kara, Josh Boyer, Kees Cook, Andrew Morton, Andi<BR>Kleen, Vadim Lobanov, Jesper Juhl, Adrian Bunk, Keri Harris, Frans Pop,<BR>David A. Wheeler, Junio Hamano, Michael Kerrisk, and Alex Shepard for<BR>their review, comments, and contributions.&nbsp; Without their help, this<BR>document would not have been possible.</P>
<P>&nbsp;</P>
<P>Maintainer: Greg Kroah-Hartman &lt;<A href="mailto:greg@kroah.com">greg@kroah.com</A>&gt;