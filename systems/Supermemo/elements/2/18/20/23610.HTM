# Documentation/ManagementStyle 
<P></P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Linux kernel management style</P>
<P></P>
<P>This is a short document describing the preferred (or made up, depending<BR>on who you ask) management style for the linux kernel.&nbsp; It's meant to<BR>mirror the CodingStyle document to some degree, and mainly written to<BR>avoid answering (*) the same (or similar) questions over and over again. </P>
<P>Management style is very personal and much harder to quantify than<BR>simple coding style rules, so this document may or may not have anything<BR>to do with reality.&nbsp; It started as a lark, but that doesn't mean that it<BR>might not actually be true. You'll have to decide for yourself.</P>
<P>Btw, when talking about "kernel manager", it's all about the technical<BR>lead persons, not the people who do traditional management inside<BR>companies.&nbsp; If you sign purchase orders or you have any clue about the<BR>budget of your group, you're almost certainly not a kernel manager. <BR>These suggestions may or may not apply to you. </P>
<P>First off, I'd suggest buying "Seven Habits of Highly Effective<BR>People", and NOT read it.&nbsp; Burn it, it's a great symbolic gesture. </P>
<P>(*) This document does so not so much by answering the question, but by<BR>making it painfully obvious to the questioner that we don't have a clue<BR>to what the answer is. </P>
<P>Anyway, here goes:</P>
<P><BR>&nbsp;&nbsp;Chapter 1: Decisions</P>
<P>Everybody thinks managers make decisions, and that decision-making is<BR>important.&nbsp; The bigger and more painful the decision, the bigger the<BR>manager must be to make it.&nbsp; That's very deep and obvious, but it's not<BR>actually true. </P>
<P>The name of the game is to _avoid_ having to make a decision.&nbsp; In<BR>particular, if somebody tells you "choose (a) or (b), we really need you<BR>to decide on this", you're in trouble as a manager.&nbsp; The people you<BR>manage had better know the details better than you, so if they come to<BR>you for a technical decision, you're screwed.&nbsp; You're clearly not<BR>competent to make that decision for them. </P>
<P>(Corollary:if the people you manage don't know the details better than<BR>you, you're also screwed, although for a totally different reason. <BR>Namely that you are in the wrong job, and that _they_ should be managing<BR>your brilliance instead). </P>
<P>So the name of the game is to _avoid_ decisions, at least the big and<BR>painful ones.&nbsp; Making small and non-consequential decisions is fine, and<BR>makes you look like you know what you're doing, so what a kernel manager<BR>needs to do is to turn the big and painful ones into small things where<BR>nobody really cares. </P>
<P>It helps to realize that the key difference between a big decision and a<BR>small one is whether you can fix your decision afterwards.&nbsp; Any decision<BR>can be made small by just always making sure that if you were wrong (and<BR>you _will_ be wrong), you can always undo the damage later by<BR>backtracking.&nbsp; Suddenly, you get to be doubly managerial for making<BR>_two_ inconsequential decisions - the wrong one _and_ the right one. </P>
<P>And people will even see that as true leadership (*cough* bullshit<BR>*cough*).</P>
<P>Thus the key to avoiding big decisions becomes to just avoiding to do<BR>things that can't be undone.&nbsp; Don't get ushered into a corner from which<BR>you cannot escape.&nbsp; A cornered rat may be dangerous - a cornered manager<BR>is just pitiful. </P>
<P>It turns out that since nobody would be stupid enough to ever really let<BR>a kernel manager have huge fiscal responsibility _anyway_, it's usually<BR>fairly easy to backtrack.&nbsp; Since you're not going to be able to waste<BR>huge amounts of money that you might not be able to repay, the only<BR>thing you can backtrack on is a technical decision, and there<BR>back-tracking is very easy: just tell everybody that you were an<BR>incompetent nincompoop, say you're sorry, and undo all the worthless<BR>work you had people work on for the last year.&nbsp; Suddenly the decision<BR>you made a year ago wasn't a big decision after all, since it could be<BR>easily undone. </P>
<P>It turns out that some people have trouble with this approach, for two<BR>reasons:<BR>&nbsp;- admitting you were an idiot is harder than it looks.&nbsp; We all like to<BR>&nbsp;&nbsp; maintain appearances, and coming out in public to say that you were<BR>&nbsp;&nbsp; wrong is sometimes very hard indeed. <BR>&nbsp;- having somebody tell you that what you worked on for the last year<BR>&nbsp;&nbsp; wasn't worthwhile after all can be hard on the poor lowly engineers<BR>&nbsp;&nbsp; too, and while the actual _work_ was easy enough to undo by just<BR>&nbsp;&nbsp; deleting it, you may have irrevocably lost the trust of that<BR>&nbsp;&nbsp; engineer.&nbsp; And remember: "irrevocable" was what we tried to avoid in<BR>&nbsp;&nbsp; the first place, and your decision ended up being a big one after<BR>&nbsp;&nbsp; all. </P>
<P>Happily, both of these reasons can be mitigated effectively by just<BR>admitting up-front that you don't have a friggin' clue, and telling<BR>people ahead of the fact that your decision is purely preliminary, and<BR>might be the wrong thing.&nbsp; You should always reserve the right to change<BR>your mind, and make people very _aware_ of that.&nbsp; And it's much easier<BR>to admit that you are stupid when you haven't _yet_ done the really<BR>stupid thing.</P>
<P>Then, when it really does turn out to be stupid, people just roll their<BR>eyes and say "Oops, he did it again".&nbsp; </P>
<P>This preemptive admission of incompetence might also make the people who<BR>actually do the work also think twice about whether it's worth doing or<BR>not.&nbsp; After all, if _they_ aren't certain whether it's a good idea, you<BR>sure as hell shouldn't encourage them by promising them that what they<BR>work on will be included.&nbsp; Make them at least think twice before they<BR>embark on a big endeavor. </P>
<P>Remember: they'd better know more about the details than you do, and<BR>they usually already think they have the answer to everything.&nbsp; The best<BR>thing you can do as a manager is not to instill confidence, but rather a<BR>healthy dose of critical thinking on what they do. </P>
<P>Btw, another way to avoid a decision is to plaintively just whine "can't<BR>we just do both?" and look pitiful.&nbsp; Trust me, it works.&nbsp; If it's not<BR>clear which approach is better, they'll eventually figure it out.&nbsp; The<BR>answer may end up being that both teams get so frustrated by the<BR>situation that they just give up. </P>
<P>That may sound like a failure, but it's usually a sign that there was<BR>something wrong with both projects, and the reason the people involved<BR>couldn't decide was that they were both wrong.&nbsp; You end up coming up<BR>smelling like roses, and you avoided yet another decision that you could<BR>have screwed up on. </P>
<P><BR>&nbsp;&nbsp;Chapter 2: People</P>
<P>Most people are idiots, and being a manager means you'll have to deal<BR>with it, and perhaps more importantly, that _they_ have to deal with<BR>_you_. </P>
<P>It turns out that while it's easy to undo technical mistakes, it's not<BR>as easy to undo personality disorders.&nbsp; You just have to live with<BR>theirs - and yours. </P>
<P>However, in order to prepare yourself as a kernel manager, it's best to<BR>remember not to burn any bridges, bomb any innocent villagers, or<BR>alienate too many kernel developers. It turns out that alienating people<BR>is fairly easy, and un-alienating them is hard. Thus "alienating"<BR>immediately falls under the heading of "not reversible", and becomes a<BR>no-no according to Chapter 1.</P>
<P>There's just a few simple rules here:<BR>&nbsp;(1) don't call people d*ckheads (at least not in public)<BR>&nbsp;(2) learn how to apologize when you forgot rule (1)</P>
<P>The problem with #1 is that it's very easy to do, since you can say<BR>"you're a d*ckhead" in millions of different ways (*), sometimes without<BR>even realizing it, and almost always with a white-hot conviction that<BR>you are right. </P>
<P>And the more convinced you are that you are right (and let's face it,<BR>you can call just about _anybody_ a d*ckhead, and you often _will_ be<BR>right), the harder it ends up being to apologize afterwards. </P>
<P>To solve this problem, you really only have two options:<BR>&nbsp;- get really good at apologies<BR>&nbsp;- spread the "love" out so evenly that nobody really ends up feeling<BR>&nbsp;&nbsp; like they get unfairly targeted.&nbsp; Make it inventive enough, and they<BR>&nbsp;&nbsp; might even be amused. </P>
<P>The option of being unfailingly polite really doesn't exist. Nobody will<BR>trust somebody who is so clearly hiding his true character.</P>
<P>(*) Paul Simon sang "Fifty Ways to Leave Your Lover", because quite<BR>frankly, "A Million Ways to Tell a Developer He Is a D*ckhead" doesn't<BR>scan nearly as well.&nbsp; But I'm sure he thought about it. </P>
<P><BR>&nbsp;&nbsp;Chapter 3: People II - the Good Kind</P>
<P>While it turns out that most people are idiots, the corollary to that is<BR>sadly that you are one too, and that while we can all bask in the secure<BR>knowledge that we're better than the average person (let's face it,<BR>nobody ever believes that they're average or below-average), we should<BR>also admit that we're not the sharpest knife around, and there will be<BR>other people that are less of an idiot than you are. </P>
<P>Some people react badly to smart people.&nbsp; Others take advantage of them. </P>
<P>Make sure that you, as a kernel maintainer, are in the second group. <BR>Suck up to them, because they are the people who will make your job<BR>easier. In particular, they'll be able to make your decisions for you,<BR>which is what the game is all about.</P>
<P>So when you find somebody smarter than you are, just coast along.&nbsp; Your<BR>management responsibilities largely become ones of saying "Sounds like a<BR>good idea - go wild", or "That sounds good, but what about xxx?".&nbsp; The<BR>second version in particular is a great way to either learn something<BR>new about "xxx" or seem _extra_ managerial by pointing out something the<BR>smarter person hadn't thought about.&nbsp; In either case, you win.</P>
<P>One thing to look out for is to realize that greatness in one area does<BR>not necessarily translate to other areas.&nbsp; So you might prod people in<BR>specific directions, but let's face it, they might be good at what they<BR>do, and suck at everything else.&nbsp; The good news is that people tend to<BR>naturally gravitate back to what they are good at, so it's not like you<BR>are doing something irreversible when you _do_ prod them in some<BR>direction, just don't push too hard.</P>
<P><BR>&nbsp;&nbsp;Chapter 4: Placing blame</P>
<P>Things will go wrong, and people want somebody to blame. Tag, you're it.</P>
<P>It's not actually that hard to accept the blame, especially if people<BR>kind of realize that it wasn't _all_ your fault.&nbsp; Which brings us to the<BR>best way of taking the blame: do it for another guy. You'll feel good<BR>for taking the fall, he'll feel good about not getting blamed, and the<BR>guy who lost his whole 36GB porn-collection because of your incompetence<BR>will grudgingly admit that you at least didn't try to weasel out of it.</P>
<P>Then make the developer who really screwed up (if you can find him) know<BR>_in_private_ that he screwed up.&nbsp; Not just so he can avoid it in the<BR>future, but so that he knows he owes you one.&nbsp; And, perhaps even more<BR>importantly, he's also likely the person who can fix it.&nbsp; Because, let's<BR>face it, it sure ain't you. </P>
<P>Taking the blame is also why you get to be manager in the first place. <BR>It's part of what makes people trust you, and allow you the potential<BR>glory, because you're the one who gets to say "I screwed up".&nbsp; And if<BR>you've followed the previous rules, you'll be pretty good at saying that<BR>by now. </P>
<P><BR>&nbsp;&nbsp;Chapter 5: Things to avoid</P>
<P>There's one thing people hate even more than being called "d*ckhead",<BR>and that is being called a "d*ckhead" in a sanctimonious voice.&nbsp; The<BR>first you can apologize for, the second one you won't really get the<BR>chance.&nbsp; They likely will no longer be listening even if you otherwise<BR>do a good job. </P>
<P>We all think we're better than anybody else, which means that when<BR>somebody else puts on airs, it _really_ rubs us the wrong way.&nbsp; You may<BR>be morally and intellectually superior to everybody around you, but<BR>don't try to make it too obvious unless you really _intend_ to irritate<BR>somebody (*). </P>
<P>Similarly, don't be too polite or subtle about things. Politeness easily<BR>ends up going overboard and hiding the problem, and as they say, "On the<BR>internet, nobody can hear you being subtle". Use a big blunt object to<BR>hammer the point in, because you can't really depend on people getting<BR>your point otherwise.</P>
<P>Some humor can help pad both the bluntness and the moralizing.&nbsp; Going<BR>overboard to the point of being ridiculous can drive a point home<BR>without making it painful to the recipient, who just thinks you're being<BR>silly.&nbsp; It can thus help get through the personal mental block we all<BR>have about criticism. </P>
<P>(*) Hint: internet newsgroups that are not directly related to your work<BR>are great ways to take out your frustrations at other people. Write<BR>insulting posts with a sneer just to get into a good flame every once in<BR>a while, and you'll feel cleansed. Just don't crap too close to home.</P>
<P><BR>&nbsp;&nbsp;Chapter 6: Why me?</P>
<P>Since your main responsibility seems to be to take the blame for other<BR>peoples mistakes, and make it painfully obvious to everybody else that<BR>you're incompetent, the obvious question becomes one of why do it in the<BR>first place?</P>
<P>First off, while you may or may not get screaming teenage girls (or<BR>boys, let's not be judgmental or sexist here) knocking on your dressing<BR>room door, you _will_ get an immense feeling of personal accomplishment<BR>for being "in charge".&nbsp; Never mind the fact that you're really leading<BR>by trying to keep up with everybody else and running after them as fast<BR>as you can.&nbsp; Everybody will still think you're the person in charge. </P>
<P>It's a great job if you can hack it.