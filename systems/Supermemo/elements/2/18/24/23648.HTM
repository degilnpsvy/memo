1. State Container<BR>~~~~~~~~~~~~~~~~~~
<P></P>
<P>While the kernel contains a few device drivers that assume that they will<BR>only be probed() once on a certain system (singletons), it is custom to assume<BR>that the device the driver binds to will appear in several instances. This<BR>means that the probe() function and all callbacks need to be reentrant.</P>
<P>The most common way to achieve this is to use the state container design<BR>pattern. It usually has this form:</P>
<P>struct foo {<BR>&nbsp;&nbsp;&nbsp; spinlock_t lock; /* Example member */<BR>&nbsp;&nbsp;&nbsp; (...)<BR>};</P>
<P>static int foo_probe(...)<BR>{<BR>&nbsp;&nbsp;&nbsp; struct foo *foo;</P>
<P>&nbsp;&nbsp;&nbsp; foo = devm_kzalloc(dev, sizeof(*foo), GFP_KERNEL);<BR>&nbsp;&nbsp;&nbsp; if (!foo)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; return -ENOMEM;<BR>&nbsp;&nbsp;&nbsp; spin_lock_init(&amp;foo-&gt;lock);<BR>&nbsp;&nbsp;&nbsp; (...)<BR>}</P>
<P>This will create an instance of struct foo in memory every time probe() is<BR>called. This is our state container for this instance of the device driver.<BR>Of course it is then necessary to always pass this instance of the<BR>state around to all functions that need access to the state and its members.</P>
<P>For example, if the driver is registering an interrupt handler, you would<BR>pass around a pointer to struct foo like this:</P>
<P>static irqreturn_t foo_handler(int irq, void *arg)<BR>{<BR>&nbsp;&nbsp;&nbsp; struct foo *foo = arg;<BR>&nbsp;&nbsp;&nbsp; (...)<BR>}</P>
<P>static int foo_probe(...)<BR>{<BR>&nbsp;&nbsp;&nbsp; struct foo *foo;</P>
<P>&nbsp;&nbsp;&nbsp; (...)<BR>&nbsp;&nbsp;&nbsp; ret = request_irq(irq, foo_handler, 0, "foo", foo);<BR>}</P>
<P>This way you always get a pointer back to the correct instance of foo in<BR>your interrupt handler.