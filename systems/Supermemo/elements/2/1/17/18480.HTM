<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.36.4 MeP Variable Attributes</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The MeP target has a number of addressing modes and busses. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>near</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>space spans the standard memory space's first 16 megabytes (24 bits). The<CODE>far</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>space spans the entire 32-bit memory space. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>based</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>space is a 128-byte region in the memory space that is addressed relative to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$tp</CODE>register. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tiny</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>space is a 65536-byte region relative to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$gp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>register. In addition to these memory regions, the MeP target has a separate 16-bit control bus which is specified with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cb</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attributes.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>based</CODE></DT>
<DD>Any variable with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>based</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute is assigned to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.based</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>section, and is accessed with relative to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$tp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>tiny</CODE></DT>
<DD>Likewise, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tiny</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute assigned variables to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.tiny</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>section, relative to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$gp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>near</CODE></DT>
<DD>Variables with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>near</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute are assumed to have addresses that fit in a 24-bit addressing mode. This is the default for large variables (<CODE>-mtiny=4</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the default) but this attribute can override<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-mtiny=</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for small variables, or override<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-ml</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>far</CODE></DT>
<DD>Variables with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>far</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute are addressed using a full 32-bit address. Since this covers the entire memory space, this allows modules to make no assumptions about where variables might be stored.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>io</CODE></DT>
<DT><CODE>io (</CODE><VAR>addr</VAR><CODE>)</CODE></DT>
<DD>Variables with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>io</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute are used to address memory-mapped peripherals. If an address is specified, the variable is assigned that address, else it is not assigned an address (it is assumed some other module assigns an address). Example:<PRE style="FONT-SIZE: smaller" class=smallexample>          int timer_count __attribute__((io(0x123)));
</PRE><BR></DD>
<DT><CODE>cb</CODE></DT>
<DT><CODE>cb (</CODE><VAR>addr</VAR><CODE>)</CODE></DT>
<DD>Variables with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cb</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute are used to access the control bus, using special instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>addr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>indicates the control bus address. Example:<PRE style="FONT-SIZE: smaller" class=smallexample>          int cpu_clock __attribute__((cb(0x123)));</PRE></DD></DL>