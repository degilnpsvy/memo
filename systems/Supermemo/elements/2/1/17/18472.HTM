<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>6.32 Prototypes and Old-Style Function Definitions</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-function-prototype-declarations-3015></A><A name=index-old-style-function-definitions-3016></A><A name=index-promotion-of-formal-parameters-3017></A>GNU C extends ISO C to allow a function prototype to override a later old-style non-prototype definition. Consider the following example:</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     /* <SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>Use prototypes unless the compiler is old-fashioned.</SPAN>  */
     #ifdef __STDC__
     #define P(x) x
     #else
     #define P(x) ()
     #endif
     
     /* <SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>Prototype function declaration.</SPAN>  */
     int isroot P((uid_t));
     
     /* <SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>Old-style function definition.</SPAN>  */
     int
     isroot (x)   /* <SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>??? lossage here ???</SPAN> */
          uid_t x;
     {
       return x == 0;
     }
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Suppose the type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>uid_t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>happens to be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>short</CODE>. ISO C does not allow this example, because subword arguments in old-style non-prototype definitions are promoted. Therefore in this example the function definition's argument is really an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int</CODE>, which does not match the prototype argument type of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>short</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This restriction of ISO C makes it hard to write code that is portable to traditional C compilers, because the programmer does not know whether the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>uid_t</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>type is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>short</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int</CODE>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long</CODE>. Therefore, in cases like these GNU C allows a prototype to override a later old-style definition. More precisely, in GNU C, a function prototype argument type overrides the argument type specified by a later old-style definition if the former type is the same as the latter type before promotion. Thus in GNU C the above example is equivalent to the following:</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     int isroot (uid_t);
     
     int
     isroot (uid_t x)
     {
       return x == 0;
     }
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=noindent>GNU C++ does not support old-style function definitions, so this extension is irrelevant.