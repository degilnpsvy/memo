<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>6.36 Specifying Attributes of Variables</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-attribute-of-variables-3024></A><A name=index-variable-attributes-3025></A>The keyword<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__attribute__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>allows you to specify special attributes of variables or structure fields. This keyword is followed by an attribute specification inside double parentheses. Some attributes are currently defined generically for variables. Other attributes are defined for variables on particular target systems. Other attributes are available for functions (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Function-Attributes.html#Function-Attributes">Function Attributes</A>) and for types (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Type-Attributes.html#Type-Attributes">Type Attributes</A>). Other front ends might define more attributes (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/C_002b_002b-Extensions.html#C_002b_002b-Extensions">Extensions to the C++ Language</A>).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">You may also specify attributes with &#8216;<SAMP><SPAN class=samp>__</SPAN></SAMP>&#8217; preceding and following each keyword. This allows you to use them in header files without being concerned about a possible macro of the same name. For example, you may use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__aligned__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>aligned</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Attribute-Syntax.html#Attribute-Syntax">Attribute Syntax</A>, for details of the exact syntax for using attributes.<A name=index-g_t_0040code_007baligned_007d-attribute-3026></A></P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>aligned (</CODE><VAR>alignment</VAR><CODE>)</CODE></DT>
<DD>This attribute specifies a minimum alignment for the variable or structure field, measured in bytes. For example, the declaration:<PRE style="FONT-SIZE: smaller" class=smallexample>          int x __attribute__ ((aligned (16))) = 0;
</PRE>
<P class=noindent>causes the compiler to allocate the global variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on a 16-byte boundary. On a 68040, this could be used in conjunction with an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asm</CODE>expression to access the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>move16</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction which requires 16-byte aligned operands.</P>
<P>You can also specify the alignment of structure fields. For example, to create a double-word aligned<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>pair, you could write:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          struct foo { int x[2] __attribute__ ((aligned (8))); };
</PRE>
<P class=noindent>This is an alternative to creating a union with a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>double</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>member, which forces the union to be double-word aligned.</P>
<P>As in the preceding examples, you can explicitly specify the alignment (in bytes) that you wish the compiler to use for a given variable or structure field. Alternatively, you can leave out the alignment factor and just ask the compiler to align a variable or field to the default alignment for the target architecture you are compiling for. The default alignment is sufficient for all scalar types, but may not be enough for all vector types on a target that supports vector operations. The default alignment is fixed for a particular target ABI.</P>
<P>GCC also provides a target specific macro<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__BIGGEST_ALIGNMENT__</CODE>, which is the largest alignment ever used for any data type on the target machine you are compiling for. For example, you could write:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          short array[3] __attribute__ ((aligned (__BIGGEST_ALIGNMENT__)));
</PRE>
<P>The compiler automatically sets the alignment for the declared variable or field to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__BIGGEST_ALIGNMENT__</CODE>. Doing this can often make copy operations more efficient, because the compiler can use whatever instructions copy the biggest chunks of memory when performing copies to or from the variables or fields that you have aligned this way. Note that the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__BIGGEST_ALIGNMENT__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may change depending on command-line options.</P>
<P>When used on a struct, or struct member, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>aligned</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute can only increase the alignment; in order to decrease it, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>packed</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute must be specified as well. When used as part of a typedef, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>aligned</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute can both increase and decrease alignment, and specifying the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>packed</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute generates a warning.</P>
<P>Note that the effectiveness of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>aligned</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attributes may be limited by inherent limitations in your linker. On many systems, the linker is only able to arrange for variables to be aligned up to a certain maximum alignment. (For some linkers, the maximum supported alignment may be very very small.) If your linker is only able to align variables up to a maximum of 8-byte alignment, then specifying<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>aligned(16)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in an<CODE>__attribute__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>still only provides you with 8-byte alignment. See your linker documentation for further information.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>aligned</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute can also be used for functions (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Function-Attributes.html#Function-Attributes">Function Attributes</A>.)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>cleanup (</CODE><VAR>cleanup_function</VAR><CODE>)</CODE></DT>
<DD><A name=index-g_t_0040code_007bcleanup_007d-attribute-3027></A>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cleanup</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute runs a function when the variable goes out of scope. This attribute can only be applied to auto function scope variables; it may not be applied to parameters or variables with static storage duration. The function must take one parameter, a pointer to a type compatible with the variable. The return value of the function (if any) is ignored.
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fexceptions</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is enabled, then<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cleanup_function</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is run during the stack unwinding that happens during the processing of the exception. Note that the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cleanup</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute does not allow the exception to be caught, only to perform an action. It is undefined what happens if<VAR>cleanup_function</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not return normally.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>common</CODE></DT>
<DT><CODE>nocommon</CODE></DT>
<DD><A name=index-g_t_0040code_007bcommon_007d-attribute-3028></A><A name=index-g_t_0040code_007bnocommon_007d-attribute-3029></A><A name=index-fcommon-3030></A><A name=index-fno-common-3031></A>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>common</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute requests GCC to place a variable in &#8220;common&#8221; storage. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nocommon</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute requests the opposite&#8212;to allocate space for it directly.
<P>These attributes override the default chosen by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fno-common</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fcommon</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>flags respectively.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>deprecated</CODE></DT>
<DT><CODE>deprecated (</CODE><VAR>msg</VAR><CODE>)</CODE></DT>
<DD><A name=index-g_t_0040code_007bdeprecated_007d-attribute-3032></A>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>deprecated</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute results in a warning if the variable is used anywhere in the source file. This is useful when identifying variables that are expected to be removed in a future version of a program. The warning also includes the location of the declaration of the deprecated variable, to enable users to easily find further information about why the variable is deprecated, or what they should do instead. Note that the warning only occurs for uses:<PRE style="FONT-SIZE: smaller" class=smallexample>          extern int old_var __attribute__ ((deprecated));
          extern int old_var;
          int new_fn () { return old_var; }
</PRE>
<P class=noindent>results in a warning on line 3 but not line 2. The optional<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>msg</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument, which must be a string, is printed in the warning if present.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>deprecated</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute can also be used for functions and types (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Function-Attributes.html#Function-Attributes">Function Attributes</A>, see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Type-Attributes.html#Type-Attributes">Type Attributes</A>.)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>mode (</CODE><VAR>mode</VAR><CODE>)</CODE></DT>
<DD><A name=index-g_t_0040code_007bmode_007d-attribute-3033></A>This attribute specifies the data type for the declaration&#8212;whichever type corresponds to the mode<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mode</VAR>. This in effect lets you request an integer or floating-point type according to its width.
<P>You may also specify a mode of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>byte</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__byte__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to indicate the mode corresponding to a one-byte integer,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>word</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__word__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for the mode of a one-word integer, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>pointer</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__pointer__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for the mode used to represent pointers.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>packed</CODE></DT>
<DD><A name=index-g_t_0040code_007bpacked_007d-attribute-3034></A>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>packed</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute specifies that a variable or structure field should have the smallest possible alignment&#8212;one byte for a variable, and one bit for a field, unless you specify a larger value with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>aligned</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute.
<P>Here is a structure in which the field<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is packed, so that it immediately follows<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>a</CODE>:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          struct foo
          {
            char a;
            int x[2] __attribute__ ((packed));
          };
</PRE>
<P><EM>Note:</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>The 4.1, 4.2 and 4.3 series of GCC ignore the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>packed</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute on bit-fields of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char</CODE>. This has been fixed in GCC 4.4 but the change can lead to differences in the structure layout. See the documentation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wpacked-bitfield-compat</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>for more information.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>section ("</CODE><VAR>section-name</VAR><CODE>")</CODE></DT>
<DD><A name=index-g_t_0040code_007bsection_007d-variable-attribute-3035></A>Normally, the compiler places the objects it generates in sections like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>data</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bss</CODE>. Sometimes, however, you need additional sections, or you need certain particular variables to appear in special sections, for example to map to special hardware. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>section</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute specifies that a variable (or function) lives in a particular section. For example, this small program uses several specific section names:<PRE style="FONT-SIZE: smaller" class=smallexample>          struct duart a __attribute__ ((section ("DUART_A"))) = { 0 };
          struct duart b __attribute__ ((section ("DUART_B"))) = { 0 };
          char stack[10000] __attribute__ ((section ("STACK"))) = { 0 };
          int init_data __attribute__ ((section ("INITDATA")));
          
          main()
          {
            /* <SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>Initialize stack pointer</SPAN> */
            init_sp (stack + sizeof (stack));
          
            /* <SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>Initialize initialized data</SPAN> */
            memcpy (&amp;init_data, &amp;data, &amp;edata - &amp;data);
          
            /* <SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>Turn on the serial ports</SPAN> */
            init_duart (&amp;a);
            init_duart (&amp;b);
          }
</PRE>
<P class=noindent>Use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>section</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute with<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>global</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>variables and not<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>local</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>variables, as shown in the example.</P>
<P>You may use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>section</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute with initialized or uninitialized global variables but the linker requires each object be defined once, with the exception that uninitialized variables tentatively go in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>common</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bss</CODE>) section and can be multiply &#8220;defined&#8221;. Using the<CODE>section</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute changes what section the variable goes into and may cause the linker to issue an error if an uninitialized variable has multiple definitions. You can force a variable to be initialized with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fno-common</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>flag or the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nocommon</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute.</P>
<P>Some file formats do not support arbitrary sections so the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>section</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute is not available on all platforms. If you need to map the entire contents of a module to a particular section, consider using the facilities of the linker instead.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>shared</CODE></DT>
<DD><A name=index-g_t_0040code_007bshared_007d-variable-attribute-3036></A>On Microsoft Windows, in addition to putting variable definitions in a named section, the section can also be shared among all running copies of an executable or DLL. For example, this small program defines shared data by putting it in a named section<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>shared</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and marking the section shareable:<PRE style="FONT-SIZE: smaller" class=smallexample>          int foo __attribute__((section ("shared"), shared)) = 0;
          
          int
          main()
          {
            /* <SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>Read and write foo.  All running
               copies see the same value.</SPAN>  */
            return 0;
          }
</PRE>
<P class=noindent>You may only use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>shared</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute along with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>section</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute with a fully-initialized global definition because of the way linkers work. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>section</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute for more information.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>shared</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute is only available on Microsoft Windows.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>tls_model ("</CODE><VAR>tls_model</VAR><CODE>")</CODE></DT>
<DD><A name=index-g_t_0040code_007btls_005fmodel_007d-attribute-3037></A>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tls_model</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute sets thread-local storage model (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Thread-Local.html#Thread-Local">Thread-Local</A>) of a particular<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__thread</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>variable, overriding<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ftls-model=</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>command-line switch on a per-variable basis. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>tls_model</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument should be one of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>global-dynamic</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>local-dynamic</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>initial-exec</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>local-exec</CODE>.
<P>Not all targets support this attribute.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>unused</CODE></DT>
<DD>This attribute, attached to a variable, means that the variable is meant to be possibly unused. GCC does not produce a warning for this variable.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>used</CODE></DT>
<DD>This attribute, attached to a variable with the static storage, means that the variable must be emitted even if it appears that the variable is not referenced.
<P>When applied to a static data member of a C++ class template, the attribute also means that the member is instantiated if the class itself is instantiated.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>vector_size (</CODE><VAR>bytes</VAR><CODE>)</CODE></DT>
<DD>This attribute specifies the vector size for the variable, measured in bytes. For example, the declaration:<PRE style="FONT-SIZE: smaller" class=smallexample>          int foo __attribute__ ((vector_size (16)));
</PRE>
<P class=noindent>causes the compiler to set the mode for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>foo</CODE>, to be 16 bytes, divided into<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>sized units. Assuming a 32-bit int (a vector of 4 units of 4 bytes), the corresponding mode of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>foo</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is V4SI.</P>
<P>This attribute is only applicable to integral and float scalars, although arrays, pointers, and function return values are allowed in conjunction with this construct.</P>
<P>Aggregates with this attribute are invalid, even if they are of the same size as a corresponding scalar. For example, the declaration:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          struct S { int a; };
          struct S  __attribute__ ((vector_size (16))) foo;
</PRE>
<P class=noindent>is invalid even if the size of the structure is the same as the size of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>selectany</CODE></DT>
<DD>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>selectany</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute causes an initialized global variable to have link-once semantics. When multiple definitions of the variable are encountered by the linker, the first is selected and the remainder are discarded. Following usage by the Microsoft compiler, the linker is told<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>not</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>to warn about size or content differences of the multiple definitions.
<P>Although the primary usage of this attribute is for POD types, the attribute can also be applied to global C++ objects that are initialized by a constructor. In this case, the static initialization and destruction code for the object is emitted in each translation defining the object, but the calls to the constructor and destructor are protected by a link-once guard variable.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>selectany</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute is only available on Microsoft Windows targets. You can use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__declspec (selectany)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a synonym for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__attribute__ ((selectany))</CODE>for compatibility with other compilers.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>weak</CODE></DT>
<DD>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>weak</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute is described in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Function-Attributes.html#Function-Attributes">Function Attributes</A>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>dllimport</CODE></DT>
<DD>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dllimport</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute is described in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Function-Attributes.html#Function-Attributes">Function Attributes</A>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>dllexport</CODE></DT>
<DD>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dllexport</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute is described in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Function-Attributes.html#Function-Attributes">Function Attributes</A>.</DD></DL>