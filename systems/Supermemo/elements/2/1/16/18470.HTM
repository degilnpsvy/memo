<H3 class=section style="FONT-FAMILY: Simsun; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">6.30 Declaring Attributes of Functions</H3>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><A name=index-function-attributes-2808></A><A name=index-declaring-attributes-of-functions-2809></A><A name=index-functions-that-never-return-2810></A><A name=index-functions-that-return-more-than-once-2811></A><A name=index-functions-that-have-no-side-effects-2812></A><A name=index-functions-in-arbitrary-sections-2813></A><A name=index-functions-that-behave-like-malloc-2814></A><A name=index-g_t_0040code_007bvolatile_007d-applied-to-function-2815></A><A name=index-g_t_0040code_007bconst_007d-applied-to-function-2816></A><A name=index-functions-with-_0040code_007bprintf_007d_002c-_0040code_007bscanf_007d_002c-_0040code_007bstrftime_007d-or-_0040code_007bstrfmon_007d-style-arguments-2817></A><A name=index-functions-with-non-null-pointer-arguments-2818></A><A name=index-functions-that-are-passed-arguments-in-registers-on-the-386-2819></A><A name=index-functions-that-pop-the-argument-stack-on-the-386-2820></A><A name=index-functions-that-do-not-pop-the-argument-stack-on-the-386-2821></A><A name=index-functions-that-have-different-compilation-options-on-the-386-2822></A><A name=index-functions-that-have-different-optimization-options-2823></A><A name=index-functions-that-are-dynamically-resolved-2824></A>In GNU C, you declare certain things about functions called in your program which help the compiler optimize function calls and check your code more carefully.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">The keyword<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__attribute__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>allows you to specify special attributes when making a declaration. This keyword is followed by an attribute specification inside double parentheses. The following attributes are currently defined for functions on all targets:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>aligned</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>alloc_size</CODE>,<CODE>alloc_align</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assume_aligned</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>noreturn</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>returns_twice</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>noinline</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>noclone</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>always_inline</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>flatten</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>pure</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>const</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nothrow</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sentinel</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>format</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>format_arg</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>no_instrument_function</CODE>,<CODE>no_split_stack</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>section</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>constructor</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>destructor</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>used</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unused</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>deprecated</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>weak</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>malloc</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>alias</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ifunc</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>warn_unused_result</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nonnull</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>returns_nonnull</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gnu_inline</CODE>,<CODE>externally_visible</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hot</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cold</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>artificial</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>no_sanitize_address</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>no_address_safety_analysis</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>no_sanitize_undefined</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>error</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>warning</CODE>. Several other attributes are defined for functions on particular target systems. Other attributes, including<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>section</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are supported for variables declarations (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Variable-Attributes.html#Variable-Attributes">Variable Attributes</A>) and for types (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Type-Attributes.html#Type-Attributes">Type Attributes</A>).</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">GCC plugins may provide their own attributes.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">You may also specify attributes with &#8216;<SAMP><SPAN class=samp>__</SPAN></SAMP>&#8217; preceding and following each keyword. This allows you to use them in header files without being concerned about a possible macro of the same name. For example, you may use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__noreturn__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>noreturn</CODE>.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Attribute-Syntax.html#Attribute-Syntax">Attribute Syntax</A>, for details of the exact syntax for using attributes.</P>
<DL style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>alias ("</CODE><VAR>target</VAR><CODE>")</CODE> 
<DD><A name=index-g_t_0040code_007balias_007d-attribute-2825></A>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>alias</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute causes the declaration to be emitted as an alias for another symbol, which must be specified. For instance,<PRE class=smallexample style="FONT-SIZE: smaller">          void __f () { /* <SPAN class=roman style="FONT-FAMILY: serif; FONT-WEIGHT: normal">Do something.</SPAN> */; }
          void f () __attribute__ ((weak, alias ("__f")));
</PRE>
<P class=noindent>defines &#8216;<SAMP><SPAN class=samp>f</SPAN></SAMP>&#8217; to be a weak alias for &#8216;<SAMP><SPAN class=samp>__f</SPAN></SAMP>&#8217;. In C++, the mangled name for the target must be used. It is an error if &#8216;<SAMP><SPAN class=samp>__f</SPAN></SAMP>&#8217; is not defined in the same translation unit.</P>
<P>Not all target machines support this attribute.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>aligned (</CODE><VAR>alignment</VAR><CODE>)</CODE> 
<DD><A name=index-g_t_0040code_007baligned_007d-attribute-2826></A>This attribute specifies a minimum alignment for the function, measured in bytes. 
<P>You cannot use this attribute to decrease the alignment of a function, only to increase it. However, when you explicitly specify a function alignment this overrides the effect of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-falign-functions</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Optimize-Options.html#Optimize-Options">Optimize Options</A>) option for this function.</P>
<P>Note that the effectiveness of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>aligned</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attributes may be limited by inherent limitations in your linker. On many systems, the linker is only able to arrange for functions to be aligned up to a certain maximum alignment. (For some linkers, the maximum supported alignment may be very very small.) See your linker documentation for further information.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>aligned</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute can also be used for variables and fields (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Variable-Attributes.html#Variable-Attributes">Variable Attributes</A>.)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>alloc_size</CODE> 
<DD><A name=index-g_t_0040code_007balloc_005fsize_007d-attribute-2827></A>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>alloc_size</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute is used to tell the compiler that the function return value points to memory, where the size is given by one or two of the functions parameters. GCC uses this information to improve the correctness of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_object_size</CODE>. 
<P>The function parameter(s) denoting the allocated size are specified by one or two integer arguments supplied to the attribute. The allocated size is either the value of the single function argument specified or the product of the two function arguments specified. Argument numbering starts at one.</P>
<P>For instance,</P><PRE class=smallexample style="FONT-SIZE: smaller">          void* my_calloc(size_t, size_t) __attribute__((alloc_size(1,2)))
          void* my_realloc(void*, size_t) __attribute__((alloc_size(2)))
</PRE>
<P class=noindent>declares that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>my_calloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns memory of the size given by the product of parameter 1 and 2 and that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>my_realloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns memory of the size given by parameter 2.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>alloc_align</CODE> 
<DD><A name=index-g_t_0040code_007balloc_005falign_007d-attribute-2828></A>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>alloc_align</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute is used to tell the compiler that the function return value points to memory, where the returned pointer minimum alignment is given by one of the functions parameters. GCC uses this information to improve pointer alignment analysis. 
<P>The function parameter denoting the allocated alignment is specified by one integer argument, whose number is the argument of the attribute. Argument numbering starts at one.</P>
<P>For instance,</P><PRE class=smallexample style="FONT-SIZE: smaller">          void* my_memalign(size_t, size_t) __attribute__((alloc_align(1)))
</PRE>
<P class=noindent>declares that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>my_memalign</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns memory with minimum alignment given by parameter 1.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>assume_aligned</CODE> 
<DD><A name=index-g_t_0040code_007bassume_005faligned_007d-attribute-2829></A>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>assume_aligned</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute is used to tell the compiler that the function return value points to memory, where the returned pointer minimum alignment is given by the first argument. If the attribute has two arguments, the second argument is misalignment offset. 
<P>For instance</P><PRE class=smallexample style="FONT-SIZE: smaller">          void* my_alloc1(size_t) __attribute__((assume_aligned(16)))
          void* my_alloc2(size_t) __attribute__((assume_aligned(32, 8)))
</PRE>
<P class=noindent>declares that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>my_alloc1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns 16-byte aligned pointer and that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>my_alloc2</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns a pointer whose value modulo 32 is equal to 8.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>always_inline</CODE> 
<DD><A name=index-g_t_0040code_007balways_005finline_007d-function-attribute-2830></A>Generally, functions are not inlined unless optimization is specified. For functions declared inline, this attribute inlines the function even if no optimization level is specified.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>gnu_inline</CODE> 
<DD><A name=index-g_t_0040code_007bgnu_005finline_007d-function-attribute-2831></A>This attribute should be used with a function that is also declared with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>inline</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword. It directs GCC to treat the function as if it were defined in gnu90 mode even when compiling in C99 or gnu99 mode. 
<P>If the function is declared<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>extern</CODE>, then this definition of the function is used only for inlining. In no case is the function compiled as a standalone function, not even if you take its address explicitly. Such an address becomes an external reference, as if you had only declared the function, and had not defined it. This has almost the effect of a macro. The way to use this is to put a function definition in a header file with this attribute, and put another copy of the function, without<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>extern</CODE>, in a library file. The definition in the header file causes most calls to the function to be inlined. If any uses of the function remain, they refer to the single copy in the library. Note that the two definitions of the functions need not be precisely the same, although if they do not have the same effect your program may behave oddly.</P>
<P>In C, if the function is neither<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>extern</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>nor<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>static</CODE>, then the function is compiled as a standalone function, as well as being inlined where possible.</P>
<P>This is how GCC traditionally handled functions declared<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>inline</CODE>. Since ISO C99 specifies a different semantics for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>inline</CODE>, this function attribute is provided as a transition measure and as a useful feature in its own right. This attribute is available in GCC 4.1.3 and later. It is available if either of the preprocessor macros<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__GNUC_GNU_INLINE__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__GNUC_STDC_INLINE__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are defined. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Inline.html#Inline">An Inline Function is As Fast As a Macro</A>.</P>
<P>In C++, this attribute does not depend on<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>extern</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in any way, but it still requires the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>inline</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword to enable its special behavior.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>artificial</CODE> 
<DD><A name=index-g_t_0040code_007bartificial_007d-function-attribute-2832></A>This attribute is useful for small inline wrappers that if possible should appear during debugging as a unit. Depending on the debug info format it either means marking the function as artificial or using the caller location for all instructions within the inlined body.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>bank_switch</CODE> 
<DD><A name=index-interrupt-handler-functions-2833></A>When added to an interrupt handler with the M32C port, causes the prologue and epilogue to use bank switching to preserve the registers rather than saving them on the stack.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>flatten</CODE> 
<DD><A name=index-g_t_0040code_007bflatten_007d-function-attribute-2834></A>Generally, inlining into a function is limited. For a function marked with this attribute, every call inside this function is inlined, if possible. Whether the function itself is considered for inlining depends on its size and the current inlining parameters.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>error ("</CODE><VAR>message</VAR><CODE>")</CODE> 
<DD><A name=index-g_t_0040code_007berror_007d-function-attribute-2835></A>If this attribute is used on a function declaration and a call to such a function is not eliminated through dead code elimination or other optimizations, an error that includes<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>message</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is diagnosed. This is useful for compile-time checking, especially together with<CODE>__builtin_constant_p</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and inline functions where checking the inline function arguments is not possible through<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>extern char [(condition) ? 1 : -1];</CODE>tricks. While it is possible to leave the function undefined and thus invoke a link failure, when using this attribute the problem is diagnosed earlier and with exact location of the call even in presence of inline functions or when not emitting debugging information.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>warning ("</CODE><VAR>message</VAR><CODE>")</CODE> 
<DD><A name=index-g_t_0040code_007bwarning_007d-function-attribute-2836></A>If this attribute is used on a function declaration and a call to such a function is not eliminated through dead code elimination or other optimizations, a warning that includes<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>message</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is diagnosed. This is useful for compile-time checking, especially together with<CODE>__builtin_constant_p</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and inline functions. While it is possible to define the function with a message in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.gnu.warning*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>section, when using this attribute the problem is diagnosed earlier and with exact location of the call even in presence of inline functions or when not emitting debugging information.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>cdecl</CODE> 
<DD><A name=index-functions-that-do-pop-the-argument-stack-on-the-386-2837></A><A name=index-mrtd-2838></A>On the Intel 386, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cdecl</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute causes the compiler to assume that the calling function pops off the stack space used to pass arguments. This is useful to override the effects of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mrtd</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>switch.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>const</CODE> 
<DD><A name=index-g_t_0040code_007bconst_007d-function-attribute-2839></A>Many functions do not examine any values except their arguments, and have no effects except the return value. Basically this is just slightly more strict class than the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>pure</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute below, since function is not allowed to read global memory. 
<P><A name=index-pointer-arguments-2840></A>Note that a function that has pointer arguments and examines the data pointed to must<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>not</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>be declared<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>const</CODE>. Likewise, a function that calls a non-<CODE>const</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function usually must not be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>const</CODE>. It does not make sense for a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>const</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function to return<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>void</CODE>.</P>
<P>The attribute<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>const</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not implemented in GCC versions earlier than 2.5. An alternative way to declare that a function has no side effects, which works in the current version and in some older versions, is as follows:</P><PRE class=smallexample style="FONT-SIZE: smaller">          typedef int intfn ();
          
          extern const intfn square;
</PRE>
<P class=noindent>This approach does not work in GNU C++ from 2.6.0 on, since the language specifies that the &#8216;<SAMP><SPAN class=samp>const</SPAN></SAMP>&#8217; must be attached to the return value.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>constructor</CODE> 
<DT><CODE>destructor</CODE> 
<DT><CODE>constructor (</CODE><VAR>priority</VAR><CODE>)</CODE> 
<DT><CODE>destructor (</CODE><VAR>priority</VAR><CODE>)</CODE> 
<DD><A name=index-g_t_0040code_007bconstructor_007d-function-attribute-2841></A><A name=index-g_t_0040code_007bdestructor_007d-function-attribute-2842></A>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>constructor</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute causes the function to be called automatically before execution enters<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>main ()</CODE>. Similarly, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>destructor</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute causes the function to be called automatically after<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>main ()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>completes or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>exit ()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called. Functions with these attributes are useful for initializing data that is used implicitly during the execution of the program. 
<P>You may provide an optional integer priority to control the order in which constructor and destructor functions are run. A constructor with a smaller priority number runs before a constructor with a larger priority number; the opposite relationship holds for destructors. So, if you have a constructor that allocates a resource and a destructor that deallocates the same resource, both functions typically have the same priority. The priorities for constructor and destructor functions are the same as those specified for namespace-scope C++ objects (see<A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/C_002b_002b-Attributes.html#C_002b_002b-Attributes">C++ Attributes</A>).</P>
<P>These attributes are not currently implemented for Objective-C.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>deprecated</CODE> 
<DT><CODE>deprecated (</CODE><VAR>msg</VAR><CODE>)</CODE> 
<DD><A name=index-g_t_0040code_007bdeprecated_007d-attribute_002e-2843></A>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>deprecated</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute results in a warning if the function is used anywhere in the source file. This is useful when identifying functions that are expected to be removed in a future version of a program. The warning also includes the location of the declaration of the deprecated function, to enable users to easily find further information about why the function is deprecated, or what they should do instead. Note that the warnings only occurs for uses:<PRE class=smallexample style="FONT-SIZE: smaller">          int old_fn () __attribute__ ((deprecated));
          int old_fn ();
          int (*fn_ptr)() = old_fn;
</PRE>
<P class=noindent>results in a warning on line 3 but not line 2. The optional<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>msg</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument, which must be a string, is printed in the warning if present.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>deprecated</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute can also be used for variables and types (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Variable-Attributes.html#Variable-Attributes">Variable Attributes</A>, see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Type-Attributes.html#Type-Attributes">Type Attributes</A>.)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>disinterrupt</CODE> 
<DD><A name=index-g_t_0040code_007bdisinterrupt_007d-attribute-2844></A>On Epiphany and MeP targets, this attribute causes the compiler to emit instructions to disable interrupts for the duration of the given function.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>dllexport</CODE> 
<DD><A name=index-g_t_0040code_007b_005f_005fdeclspec_0028dllexport_0029_007d-2845></A>On Microsoft Windows targets and Symbian OS targets the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dllexport</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute causes the compiler to provide a global pointer to a pointer in a DLL, so that it can be referenced with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dllimport</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute. On Microsoft Windows targets, the pointer name is formed by combining<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_imp__</CODE>and the function or variable name. 
<P>You can use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__declspec(dllexport)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a synonym for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__attribute__ ((dllexport))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for compatibility with other compilers.</P>
<P>On systems that support the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>visibility</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute, this attribute also implies &#8220;default&#8221; visibility. It is an error to explicitly specify any other visibility.</P>
<P>In previous versions of GCC, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dllexport</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute was ignored for inlined functions, unless the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fkeep-inline-functions</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>flag had been used. The default behavior now is to emit all dllexported inline functions; however, this can cause object file-size bloat, in which case the old behavior can be restored by using<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fno-keep-inline-dllexport</SPAN></SAMP>.</P>
<P>The attribute is also ignored for undefined symbols.</P>
<P>When applied to C++ classes, the attribute marks defined non-inlined member functions and static data members as exports. Static consts initialized in-class are not marked unless they are also defined out-of-class.</P>
<P>For Microsoft Windows targets there are alternative methods for including the symbol in the DLL's export table such as using a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.def</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>file with an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>EXPORTS</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>section or, with GNU ld, using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>--export-all</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>linker flag.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>dllimport</CODE> 
<DD><A name=index-g_t_0040code_007b_005f_005fdeclspec_0028dllimport_0029_007d-2846></A>On Microsoft Windows and Symbian OS targets, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dllimport</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute causes the compiler to reference a function or variable via a global pointer to a pointer that is set up by the DLL exporting the symbol. The attribute implies<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>extern</CODE>. On Microsoft Windows targets, the pointer name is formed by combining<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_imp__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the function or variable name. 
<P>You can use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__declspec(dllimport)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a synonym for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__attribute__ ((dllimport))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for compatibility with other compilers.</P>
<P>On systems that support the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>visibility</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute, this attribute also implies &#8220;default&#8221; visibility. It is an error to explicitly specify any other visibility.</P>
<P>Currently, the attribute is ignored for inlined functions. If the attribute is applied to a symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>definition</EM>, an error is reported. If a symbol previously declared<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dllimport</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is later defined, the attribute is ignored in subsequent references, and a warning is emitted. The attribute is also overridden by a subsequent declaration as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dllexport</CODE>.</P>
<P>When applied to C++ classes, the attribute marks non-inlined member functions and static data members as imports. However, the attribute is ignored for virtual methods to allow creation of vtables using thunks.</P>
<P>On the SH Symbian OS target the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dllimport</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute also has another affect&#8212;it can cause the vtable and run-time type information for a class to be exported. This happens when the class has a dllimported constructor or a non-inline, non-pure virtual function and, for either of those two conditions, the class also has an inline constructor or destructor and has a key function that is defined in the current translation unit.</P>
<P>For Microsoft Windows targets the use of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dllimport</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute on functions is not necessary, but provides a small performance benefit by eliminating a thunk in the DLL. The use of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dllimport</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute on imported variables was required on older versions of the GNU linker, but can now be avoided by passing the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>--enable-auto-import</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>switch to the GNU linker. As with functions, using the attribute for a variable eliminates a thunk in the DLL.</P>
<P>One drawback to using this attribute is that a pointer to a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>variable</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>marked as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dllimport</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>cannot be used as a constant address. However, a pointer to a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>function</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dllimport</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute can be used as a constant initializer; in this case, the address of a stub function in the import lib is referenced. On Microsoft Windows targets, the attribute can be disabled for functions by setting the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mnop-fun-dllimport</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>flag.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>eightbit_data</CODE> 
<DD><A name=index-eight-bit-data-on-the-H8_002f300_002c-H8_002f300H_002c-and-H8S-2847></A>Use this attribute on the H8/300, H8/300H, and H8S to indicate that the specified variable should be placed into the eight-bit data section. The compiler generates more efficient code for certain operations on data in the eight-bit data area. Note the eight-bit data area is limited to 256 bytes of data. 
<P>You must use GAS and GLD from GNU binutils version 2.7 or later for this attribute to work correctly.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>exception</CODE> 
<DD><A name=index-exception-handler-functions-2848></A>Use this attribute on the NDS32 target to indicate that the specified function is an exception handler. The compiler will generate corresponding sections for use in an exception handler.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>exception_handler</CODE> 
<DD><A name=index-exception-handler-functions-on-the-Blackfin-processor-2849></A>Use this attribute on the Blackfin to indicate that the specified function is an exception handler. The compiler generates function entry and exit sequences suitable for use in an exception handler when this attribute is present.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>externally_visible</CODE> 
<DD><A name=index-g_t_0040code_007bexternally_005fvisible_007d-attribute_002e-2850></A>This attribute, attached to a global variable or function, nullifies the effect of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fwhole-program</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>command-line option, so the object remains visible outside the current compilation unit. 
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fwhole-program</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used together with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-flto</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gold</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used as the linker plugin,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>externally_visible</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attributes are automatically added to functions (not variable yet due to a current<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gold</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>issue) that are accessed outside of LTO objects according to resolution file produced by<SAMP><SPAN class=command>gold</SPAN></SAMP>. For other linkers that cannot generate resolution file, explicit<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>externally_visible</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attributes are still necessary.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>far</CODE> 
<DD><A name=index-functions-that-handle-memory-bank-switching-2851></A>On 68HC11 and 68HC12 the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>far</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute causes the compiler to use a calling convention that takes care of switching memory banks when entering and leaving a function. This calling convention is also the default when using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mlong-calls</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option. 
<P>On 68HC12 the compiler uses the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>rtc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions to call and return from a function.</P>
<P>On 68HC11 the compiler generates a sequence of instructions to invoke a board-specific routine to switch the memory bank and call the real function. The board-specific routine simulates a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call</CODE>. At the end of a function, it jumps to a board-specific routine instead of using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>rts</CODE>. The board-specific return routine simulates the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>rtc</CODE>.</P>
<P>On MeP targets this causes the compiler to use a calling convention that assumes the called function is too far away for the built-in addressing modes.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>fast_interrupt</CODE> 
<DD><A name=index-interrupt-handler-functions-2852></A>Use this attribute on the M32C and RX ports to indicate that the specified function is a fast interrupt handler. This is just like the<CODE>interrupt</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute, except that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>freit</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used to return instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>reit</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>fastcall</CODE> 
<DD><A name=index-functions-that-pop-the-argument-stack-on-the-386-2853></A>On the Intel 386, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fastcall</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute causes the compiler to pass the first argument (if of integral type) in the register ECX and the second argument (if of integral type) in the register EDX. Subsequent and other typed arguments are passed on the stack. The called function pops the arguments off the stack. If the number of arguments is variable all arguments are pushed on the stack.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>thiscall</CODE> 
<DD><A name=index-functions-that-pop-the-argument-stack-on-the-386-2854></A>On the Intel 386, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>thiscall</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute causes the compiler to pass the first argument (if of integral type) in the register ECX. Subsequent and other typed arguments are passed on the stack. The called function pops the arguments off the stack. If the number of arguments is variable all arguments are pushed on the stack. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>thiscall</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute is intended for C++ non-static member functions. As a GCC extension, this calling convention can be used for C functions and for static member methods.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>format (</CODE><VAR>archetype</VAR><CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>string-index</VAR><CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>first-to-check</VAR><CODE>)</CODE> 
<DD><A name=index-g_t_0040code_007bformat_007d-function-attribute-2855></A><A name=index-Wformat-2856></A>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>format</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute specifies that a function takes<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>printf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scanf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strftime</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strfmon</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>style arguments that should be type-checked against a format string. For example, the declaration:<PRE class=smallexample style="FONT-SIZE: smaller">          extern int
          my_printf (void *my_object, const char *my_format, ...)
                __attribute__ ((format (printf, 2, 3)));
</PRE>
<P class=noindent>causes the compiler to check the arguments in calls to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>my_printf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for consistency with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>printf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>style format string argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>my_format</CODE>.</P>
<P>The parameter<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>archetype</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>determines how the format string is interpreted, and should be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>printf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scanf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strftime</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gnu_printf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gnu_scanf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gnu_strftime</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<CODE>strfmon</CODE>. (You can also use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__printf__</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__scanf__</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__strftime__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__strfmon__</CODE>.) On MinGW targets,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ms_printf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ms_scanf</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ms_strftime</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are also present.<VAR>archetype</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>values such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>printf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>refer to the formats accepted by the system's C runtime library, while values prefixed with &#8216;<SAMP><SPAN class=samp>gnu_</SPAN></SAMP>&#8217; always refer to the formats accepted by the GNU C Library. On Microsoft Windows targets, values prefixed with &#8216;<SAMP><SPAN class=samp>ms_</SPAN></SAMP>&#8217; refer to the formats accepted by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>msvcrt.dll</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>library. The parameter<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>string-index</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>specifies which argument is the format string argument (starting from 1), while<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>first-to-check</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the number of the first argument to check against the format string. For functions where the arguments are not available to be checked (such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vprintf</CODE>), specify the third parameter as zero. In this case the compiler only checks the format string for consistency. For<CODE>strftime</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>formats, the third parameter is required to be zero. Since non-static C++ methods have an implicit<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>this</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument, the arguments of such methods should be counted from two, not one, when giving values for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>string-index</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>first-to-check</VAR>.</P>
<P>In the example above, the format string (<CODE>my_format</CODE>) is the second argument of the function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>my_print</CODE>, and the arguments to check start with the third argument, so the correct parameters for the format attribute are 2 and 3.</P>
<P><A name=index-ffreestanding-2857></A><A name=index-fno-builtin-2858></A>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>format</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute allows you to identify your own functions that take format strings as arguments, so that GCC can check the calls to these functions for errors. The compiler always (unless<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ffreestanding</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fno-builtin</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used) checks formats for the standard library functions<CODE>printf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scanf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fscanf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sscanf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strftime</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vfprintf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vsprintf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>whenever such warnings are requested (using<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wformat</SPAN></SAMP>), so there is no need to modify the header file<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>stdio.h</SPAN></SAMP>. In C99 mode, the functions<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>snprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vsnprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vscanf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vfscanf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vsscanf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are also checked. Except in strictly conforming C standard modes, the X/Open function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strfmon</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is also checked as are<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>printf_unlocked</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fprintf_unlocked</CODE>. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/C-Dialect-Options.html#C-Dialect-Options">Options Controlling C Dialect</A>.</P>
<P>For Objective-C dialects,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NSString</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__NSString__</CODE>) is recognized in the same context. Declarations including these format attributes are parsed for correct syntax, however the result of checking of such format strings is not yet defined, and is not carried out by this version of the compiler.</P>
<P>The target may also provide additional types of format checks. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Target-Format-Checks.html#Target-Format-Checks">Format Checks Specific to Particular Target Machines</A>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>format_arg (</CODE><VAR>string-index</VAR><CODE>)</CODE> 
<DD><A name=index-g_t_0040code_007bformat_005farg_007d-function-attribute-2859></A><A name=index-Wformat-nonliteral-2860></A>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>format_arg</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute specifies that a function takes a format string for a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>printf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scanf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strftime</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strfmon</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>style function and modifies it (for example, to translate it into another language), so the result can be passed to a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>printf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scanf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strftime</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strfmon</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>style function (with the remaining arguments to the format function the same as they would have been for the unmodified string). For example, the declaration:<PRE class=smallexample style="FONT-SIZE: smaller">          extern char *
          my_dgettext (char *my_domain, const char *my_format)
                __attribute__ ((format_arg (2)));
</PRE>
<P class=noindent>causes the compiler to check the arguments in calls to a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>printf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scanf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strftime</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strfmon</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>type function, whose format string argument is a call to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>my_dgettext</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function, for consistency with the format string argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>my_format</CODE>. If the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>format_arg</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute had not been specified, all the compiler could tell in such calls to format functions would be that the format string argument is not constant; this would generate a warning when<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wformat-nonliteral</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used, but the calls could not be checked without the attribute.</P>
<P>The parameter<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>string-index</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>specifies which argument is the format string argument (starting from one). Since non-static C++ methods have an implicit<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>this</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument, the arguments of such methods should be counted from two.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>format_arg</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute allows you to identify your own functions that modify format strings, so that GCC can check the calls to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>printf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scanf</CODE>,<CODE>strftime</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strfmon</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>type function whose operands are a call to one of your own function. The compiler always treats<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gettext</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dgettext</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dcgettext</CODE>in this manner except when strict ISO C support is requested by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ansi</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or an appropriate<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-std</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ffreestanding</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fno-builtin</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used. See<A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/C-Dialect-Options.html#C-Dialect-Options">Options Controlling C Dialect</A>.</P>
<P>For Objective-C dialects, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>format-arg</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute may refer to an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NSString</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>reference for compatibility with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>format</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute above.</P>
<P>The target may also allow additional types in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>format-arg</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attributes. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Target-Format-Checks.html#Target-Format-Checks">Format Checks Specific to Particular Target Machines</A>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>function_vector</CODE> 
<DD><A name=index-calling-functions-through-the-function-vector-on-H8_002f300_002c-M16C_002c-M32C-and-SH2A-processors-2861></A>Use this attribute on the H8/300, H8/300H, and H8S to indicate that the specified function should be called through the function vector. Calling a function through the function vector reduces code size, however; the function vector has a limited size (maximum 128 entries on the H8/300 and 64 entries on the H8/300H and H8S) and shares space with the interrupt vector. 
<P>On SH2A targets, this attribute declares a function to be called using the TBR relative addressing mode. The argument to this attribute is the entry number of the same function in a vector table containing all the TBR relative addressable functions. For correct operation the TBR must be setup accordingly to point to the start of the vector table before any functions with this attribute are invoked. Usually a good place to do the initialization is the startup routine. The TBR relative vector table can have at max 256 function entries. The jumps to these functions are generated using a SH2A specific, non delayed branch instruction JSR/N @(disp8,TBR). You must use GAS and GLD from GNU binutils version 2.7 or later for this attribute to work correctly.</P>
<P>Please refer the example of M16C target, to see the use of this attribute while declaring a function,</P>
<P>In an application, for a function being called once, this attribute saves at least 8 bytes of code; and if other successive calls are being made to the same function, it saves 2 bytes of code per each of these calls.</P>
<P>On M16C/M32C targets, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>function_vector</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute declares a special page subroutine call function. Use of this attribute reduces the code size by 2 bytes for each call generated to the subroutine. The argument to the attribute is the vector number entry from the special page vector table which contains the 16 low-order bits of the subroutine's entry address. Each vector table has special page number (18 to 255) that is used in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>jsrs</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions. Jump addresses of the routines are generated by adding 0x0F0000 (in case of M16C targets) or 0xFF0000 (in case of M32C targets), to the 2-byte addresses set in the vector table. Therefore you need to ensure that all the special page vector routines should get mapped within the address range 0x0F0000 to 0x0FFFFF (for M16C) and 0xFF0000 to 0xFFFFFF (for M32C).</P>
<P>In the following example 2 bytes are saved for each call to function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>foo</CODE>.</P><PRE class=smallexample style="FONT-SIZE: smaller">          void foo (void) __attribute__((function_vector(0x18)));
          void foo (void)
          {
          }
          
          void bar (void)
          {
              foo();
          }
</PRE>
<P>If functions are defined in one file and are called in another file, then be sure to write this declaration in both files.</P>
<P>This attribute is ignored for R8C target.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>ifunc ("</CODE><VAR>resolver</VAR><CODE>")</CODE> 
<DD><A name=index-g_t_0040code_007bifunc_007d-attribute-2862></A>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ifunc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute is used to mark a function as an indirect function using the STT_GNU_IFUNC symbol type extension to the ELF standard. This allows the resolution of the symbol value to be determined dynamically at load time, and an optimized version of the routine can be selected for the particular processor or other system characteristics determined then. To use this attribute, first define the implementation functions available, and a resolver function that returns a pointer to the selected implementation function. The implementation functions' declarations must match the API of the function being implemented, the resolver's declaration is be a function returning pointer to void function returning void:<PRE class=smallexample style="FONT-SIZE: smaller">          void *my_memcpy (void *dst, const void *src, size_t len)
          {
            ...
          }
          
          static void (*resolve_memcpy (void)) (void)
          {
            return my_memcpy; // we'll just always select this routine
          }
</PRE>
<P class=noindent>The exported header file declaring the function the user calls would contain:</P><PRE class=smallexample style="FONT-SIZE: smaller">          extern void *memcpy (void *, const void *, size_t);
</PRE>
<P class=noindent>allowing the user to call this as a regular function, unaware of the implementation. Finally, the indirect function needs to be defined in the same translation unit as the resolver function:</P><PRE class=smallexample style="FONT-SIZE: smaller">          void *memcpy (void *, const void *, size_t)
               __attribute__ ((ifunc ("resolve_memcpy")));
</PRE>
<P>Indirect functions cannot be weak, and require a recent binutils (at least version 2.20.1), and GNU C library (at least version 2.11.1).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>interrupt</CODE> 
<DD><A name=index-interrupt-handler-functions-2863></A>Use this attribute on the ARC, ARM, AVR, CR16, Epiphany, M32C, M32R/D, m68k, MeP, MIPS, MSP430, RL78, RX and Xstormy16 ports to indicate that the specified function is an interrupt handler. The compiler generates function entry and exit sequences suitable for use in an interrupt handler when this attribute is present. With Epiphany targets it may also generate a special section with code to initialize the interrupt vector table. 
<P>Note, interrupt handlers for the Blackfin, H8/300, H8/300H, H8S, MicroBlaze, and SH processors can be specified via the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>interrupt_handler</CODE>attribute.</P>
<P>Note, on the ARC, you must specify the kind of interrupt to be handled in a parameter to the interrupt attribute like this:</P><PRE class=smallexample style="FONT-SIZE: smaller">          void f () __attribute__ ((interrupt ("ilink1")));
</PRE>
<P>Permissible values for this parameter are:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ilink1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ilink2</CODE>.</P>
<P>Note, on the AVR, the hardware globally disables interrupts when an interrupt is executed. The first instruction of an interrupt handler declared with this attribute is a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SEI</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction to re-enable interrupts. See also the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>signal</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function attribute that does not insert a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SEI</CODE>instruction. If both<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>signal</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>interrupt</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are specified for the same function,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>signal</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is silently ignored.</P>
<P>Note, for the ARM, you can specify the kind of interrupt to be handled by adding an optional parameter to the interrupt attribute like this:</P><PRE class=smallexample style="FONT-SIZE: smaller">          void f () __attribute__ ((interrupt ("IRQ")));
</PRE>
<P class=noindent>Permissible values for this parameter are:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>IRQ</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>FIQ</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SWI</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ABORT</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>UNDEF</CODE>.</P>
<P>On ARMv7-M the interrupt type is ignored, and the attribute means the function may be called with a word-aligned stack pointer.</P>
<P>Note, for the MSP430 you can provide an argument to the interrupt attribute which specifies a name or number. If the argument is a number it indicates the slot in the interrupt vector table (0 - 31) to which this handler should be assigned. If the argument is a name it is treated as a symbolic name for the vector slot. These names should match up with appropriate entries in the linker script. By default the names<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>watchdog</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for vector 26,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nmi</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for vector 30 and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>reset</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for vector 31 are recognised.</P>
<P>You can also use the following function attributes to modify how normal functions interact with interrupt functions:</P>
<DL>
<DT><CODE>critical</CODE> 
<DD><A name=index-g_t_0040code_007bcritical_007d-attribute-2864></A>Critical functions disable interrupts upon entry and restore the previous interrupt state upon exit. Critical functions cannot also have the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>naked</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>reentrant</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attributes. They can have the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>interrupt</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>reentrant</CODE> 
<DD><A name=index-g_t_0040code_007breentrant_007d-attribute-2865></A>Reentrant functions disable interrupts upon entry and enable them upon exit. Reentrant functions cannot also have the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>naked</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>critical</CODE>attributes. They can have the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>interrupt</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>wakeup</CODE> 
<DD><A name=index-g_t_0040code_007bwakeup_007d-attribute-2866></A>This attribute only applies to interrupt functions. It is silently ignored if applied to a non-interrupt function. A wakeup interrupt function will rouse the processor from any low-power state that it might be in when the function exits.</DD></DL>
<P>On Epiphany targets one or more optional parameters can be added like this:</P><PRE class=smallexample style="FONT-SIZE: smaller">          void __attribute__ ((interrupt ("dma0, dma1"))) universal_dma_handler ();
</PRE>
<P>Permissible values for these parameters are:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>reset</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>software_exception</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>page_miss</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>timer0</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>timer1</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>message</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dma0</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dma1</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>wand</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>swi</CODE>. Multiple parameters indicate that multiple entries in the interrupt vector table should be initialized for this function, i.e. for each parameter<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>, a jump to the function is emitted in the section ivt_entry_<VAR>name</VAR>. The parameter(s) may be omitted entirely, in which case no interrupt vector table entry is provided.</P>
<P>Note, on Epiphany targets, interrupts are enabled inside the function unless the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>disinterrupt</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute is also specified.</P>
<P>On Epiphany targets, you can also use the following attribute to modify the behavior of an interrupt handler:</P>
<DL>
<DT><CODE>forwarder_section</CODE> 
<DD><A name=index-g_t_0040code_007bforwarder_005fsection_007d-attribute-2867></A>The interrupt handler may be in external memory which cannot be reached by a branch instruction, so generate a local memory trampoline to transfer control. The single parameter identifies the section where the trampoline is placed.</DD></DL>
<P>The following examples are all valid uses of these attributes on Epiphany targets:</P><PRE class=smallexample style="FONT-SIZE: smaller">          void __attribute__ ((interrupt)) universal_handler ();
          void __attribute__ ((interrupt ("dma1"))) dma1_handler ();
          void __attribute__ ((interrupt ("dma0, dma1"))) universal_dma_handler ();
          void __attribute__ ((interrupt ("timer0"), disinterrupt))
            fast_timer_handler ();
          void __attribute__ ((interrupt ("dma0, dma1"), forwarder_section ("tramp")))
            external_dma_handler ();
</PRE>
<P>On MIPS targets, you can use the following attributes to modify the behavior of an interrupt handler:</P>
<DL>
<DT><CODE>use_shadow_register_set</CODE> 
<DD><A name=index-g_t_0040code_007buse_005fshadow_005fregister_005fset_007d-attribute-2868></A>Assume that the handler uses a shadow register set, instead of the main general-purpose registers.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>keep_interrupts_masked</CODE> 
<DD><A name=index-g_t_0040code_007bkeep_005finterrupts_005fmasked_007d-attribute-2869></A>Keep interrupts masked for the whole function. Without this attribute, GCC tries to reenable interrupts for as much of the function as it can.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>use_debug_exception_return</CODE> 
<DD><A name=index-g_t_0040code_007buse_005fdebug_005fexception_005freturn_007d-attribute-2870></A>Return using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>deret</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction. Interrupt handlers that don't have this attribute return using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>eret</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead.</DD></DL>
<P>You can use any combination of these attributes, as shown below:</P><PRE class=smallexample style="FONT-SIZE: smaller">          void __attribute__ ((interrupt)) v0 ();
          void __attribute__ ((interrupt, use_shadow_register_set)) v1 ();
          void __attribute__ ((interrupt, keep_interrupts_masked)) v2 ();
          void __attribute__ ((interrupt, use_debug_exception_return)) v3 ();
          void __attribute__ ((interrupt, use_shadow_register_set,
                               keep_interrupts_masked)) v4 ();
          void __attribute__ ((interrupt, use_shadow_register_set,
                               use_debug_exception_return)) v5 ();
          void __attribute__ ((interrupt, keep_interrupts_masked,
                               use_debug_exception_return)) v6 ();
          void __attribute__ ((interrupt, use_shadow_register_set,
                               keep_interrupts_masked,
                               use_debug_exception_return)) v7 ();
</PRE>
<P>On NDS32 target, this attribute is to indicate that the specified function is an interrupt handler. The compiler will generate corresponding sections for use in an interrupt handler. You can use the following attributes to modify the behavior:</P>
<DL>
<DT><CODE>nested</CODE> 
<DD><A name=index-g_t_0040code_007bnested_007d-attribute-2871></A>This interrupt service routine is interruptible.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>not_nested</CODE> 
<DD><A name=index-g_t_0040code_007bnot_005fnested_007d-attribute-2872></A>This interrupt service routine is not interruptible.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>nested_ready</CODE> 
<DD><A name=index-g_t_0040code_007bnested_005fready_007d-attribute-2873></A>This interrupt service routine is interruptible after<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>PSW.GIE</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(global interrupt enable) is set. This allows interrupt service routine to finish some short critical code before enabling interrupts.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>save_all</CODE> 
<DD><A name=index-g_t_0040code_007bsave_005fall_007d-attribute-2874></A>The system will help save all registers into stack before entering interrupt handler.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>partial_save</CODE> 
<DD><A name=index-g_t_0040code_007bpartial_005fsave_007d-attribute-2875></A>The system will help save caller registers into stack before entering interrupt handler.</DD></DL>
<P>On RL78, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>brk_interrupt</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>interrupt</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for handlers intended to be used with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>BRK</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>opcode (i.e. those that must end with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>RETB</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>RETI</CODE>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>interrupt_handler</CODE> 
<DD><A name=index-interrupt-handler-functions-on-the-Blackfin_002c-m68k_002c-H8_002f300-and-SH-processors-2876></A>Use this attribute on the Blackfin, m68k, H8/300, H8/300H, H8S, and SH to indicate that the specified function is an interrupt handler. The compiler generates function entry and exit sequences suitable for use in an interrupt handler when this attribute is present.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>interrupt_thread</CODE> 
<DD><A name=index-interrupt-thread-functions-on-fido-2877></A>Use this attribute on fido, a subarchitecture of the m68k, to indicate that the specified function is an interrupt handler that is designed to run as a thread. The compiler omits generate prologue/epilogue sequences and replaces the return instruction with a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sleep</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction. This attribute is available only on fido.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>isr</CODE> 
<DD><A name=index-interrupt-service-routines-on-ARM-2878></A>Use this attribute on ARM to write Interrupt Service Routines. This is an alias to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>interrupt</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute above.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>kspisusp</CODE> 
<DD><A name=index-User-stack-pointer-in-interrupts-on-the-Blackfin-2879></A>When used together with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>interrupt_handler</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>exception_handler</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nmi_handler</CODE>, code is generated to load the stack pointer from the USP register in the function prologue.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>l1_text</CODE> 
<DD><A name=index-g_t_0040code_007bl1_005ftext_007d-function-attribute-2880></A>This attribute specifies a function to be placed into L1 Instruction SRAM. The function is put into a specific section named<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.l1.text</CODE>. With<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mfdpic</SPAN></SAMP>, function calls with a such function as the callee or caller uses inlined PLT.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>l2</CODE> 
<DD><A name=index-g_t_0040code_007bl2_007d-function-attribute-2881></A>On the Blackfin, this attribute specifies a function to be placed into L2 SRAM. The function is put into a specific section named<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.l1.text</CODE>. With<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mfdpic</SPAN></SAMP>, callers of such functions use an inlined PLT.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>leaf</CODE> 
<DD><A name=index-g_t_0040code_007bleaf_007d-function-attribute-2882></A>Calls to external functions with this attribute must return to the current compilation unit only by return or by exception handling. In particular, leaf functions are not allowed to call callback function passed to it from the current compilation unit or directly call functions exported by the unit or longjmp into the unit. Leaf function might still call functions from other compilation units and thus they are not necessarily leaf in the sense that they contain no function calls at all. 
<P>The attribute is intended for library functions to improve dataflow analysis. The compiler takes the hint that any data not escaping the current compilation unit can not be used or modified by the leaf function. For example, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sin</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function is a leaf function, but<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>qsort</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not.</P>
<P>Note that leaf functions might invoke signals and signal handlers might be defined in the current compilation unit and use static variables. The only compliant way to write such a signal handler is to declare such variables<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>volatile</CODE>.</P>
<P>The attribute has no effect on functions defined within the current compilation unit. This is to allow easy merging of multiple compilation units into one, for example, by using the link-time optimization. For this reason the attribute is not allowed on types to annotate indirect calls.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>long_call/medium_call/short_call</CODE> 
<DD><A name=index-indirect-calls-on-ARC-2883></A><A name=index-indirect-calls-on-ARM-2884></A><A name=index-indirect-calls-on-Epiphany-2885></A>These attributes specify how a particular function is called on ARC, ARM and Epiphany - with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>medium_call</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>being specific to ARC. These attributes override the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mlong-calls</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/ARM-Options.html#ARM-Options">ARM Options</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/ARC-Options.html#ARC-Options">ARC Options</A>) and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mmedium-calls</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/ARC-Options.html#ARC-Options">ARC Options</A>) command-line switches and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#pragma long_calls</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>settings. For ARM, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long_call</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute indicates that the function might be far away from the call site and require a different (more expensive) calling sequence. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>short_call</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute always places the offset to the function from the call site into the &#8216;<SAMP><SPAN class=samp>BL</SPAN></SAMP>&#8217; instruction directly. 
<P>For ARC, a function marked with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long_call</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute is always called using register-indirect jump-and-link instructions, thereby enabling the called function to be placed anywhere within the 32-bit address space. A function marked with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>medium_call</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute will always be close enough to be called with an unconditional branch-and-link instruction, which has a 25-bit offset from the call site. A function marked with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>short_call</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute will always be close enough to be called with a conditional branch-and-link instruction, which has a 21-bit offset from the call site.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>longcall/shortcall</CODE> 
<DD><A name=index-functions-called-via-pointer-on-the-RS_002f6000-and-PowerPC-2886></A>On the Blackfin, RS/6000 and PowerPC, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>longcall</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute indicates that the function might be far away from the call site and require a different (more expensive) calling sequence. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>shortcall</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute indicates that the function is always close enough for the shorter calling sequence to be used. These attributes override both the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mlongcall</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>switch and, on the RS/6000 and PowerPC, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#pragma longcall</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>setting. 
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/RS_002f6000-and-PowerPC-Options.html#RS_002f6000-and-PowerPC-Options">RS/6000 and PowerPC Options</A>, for more information on whether long calls are necessary.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>long_call/near/far</CODE> 
<DD><A name=index-indirect-calls-on-MIPS-2887></A>These attributes specify how a particular function is called on MIPS. The attributes override the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mlong-calls</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/MIPS-Options.html#MIPS-Options">MIPS Options</A>) command-line switch. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long_call</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>far</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attributes are synonyms, and cause the compiler to always call the function by first loading its address into a register, and then using the contents of that register. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>near</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute has the opposite effect; it specifies that non-PIC calls should be made using the more efficient<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>jal</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>malloc</CODE> 
<DD><A name=index-g_t_0040code_007bmalloc_007d-attribute-2888></A>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>malloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute is used to tell the compiler that a function may be treated as if any non-<CODE>NULL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>pointer it returns cannot alias any other pointer valid when the function returns and that the memory has undefined content. This often improves optimization. Standard functions with this property include<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>malloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>calloc</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>realloc</CODE>-like functions do not have this property as the memory pointed to does not have undefined content.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>mips16/nomips16</CODE> 
<DD><A name=index-g_t_0040code_007bmips16_007d-attribute-2889></A><A name=index-g_t_0040code_007bnomips16_007d-attribute-2890></A>On MIPS targets, you can use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mips16</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nomips16</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function attributes to locally select or turn off MIPS16 code generation. A function with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mips16</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute is emitted as MIPS16 code, while MIPS16 code generation is disabled for functions with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nomips16</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute. These attributes override the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mips16</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-mips16</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options on the command line (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/MIPS-Options.html#MIPS-Options">MIPS Options</A>). 
<P>When compiling files containing mixed MIPS16 and non-MIPS16 code, the preprocessor symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__mips16</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>reflects the setting on the command line, not that within individual functions. Mixed MIPS16 and non-MIPS16 code may interact badly with some GCC extensions such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_apply</CODE>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Constructing-Calls.html#Constructing-Calls">Constructing Calls</A>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>micromips/nomicromips</CODE> 
<DD><A name=index-g_t_0040code_007bmicromips_007d-attribute-2891></A><A name=index-g_t_0040code_007bnomicromips_007d-attribute-2892></A>On MIPS targets, you can use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>micromips</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nomicromips</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function attributes to locally select or turn off microMIPS code generation. A function with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>micromips</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute is emitted as microMIPS code, while microMIPS code generation is disabled for functions with the<CODE>nomicromips</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute. These attributes override the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mmicromips</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-micromips</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options on the command line (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/MIPS-Options.html#MIPS-Options">MIPS Options</A>). 
<P>When compiling files containing mixed microMIPS and non-microMIPS code, the preprocessor symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__mips_micromips</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>reflects the setting on the command line, not that within individual functions. Mixed microMIPS and non-microMIPS code may interact badly with some GCC extensions such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_apply</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Constructing-Calls.html#Constructing-Calls">Constructing Calls</A>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>model (</CODE><VAR>model-name</VAR><CODE>)</CODE> 
<DD><A name=index-function-addressability-on-the-M32R_002fD-2893></A><A name=index-variable-addressability-on-the-IA-64-2894></A>On the M32R/D, use this attribute to set the addressability of an object, and of the code generated for a function. The identifier<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>model-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is one of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>small</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>medium</CODE>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>large</CODE>, representing each of the code models. 
<P>Small model objects live in the lower 16MB of memory (so that their addresses can be loaded with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ld24</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction), and are callable with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bl</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction.</P>
<P>Medium model objects may live anywhere in the 32-bit address space (the compiler generates<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>seth/add3</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions to load their addresses), and are callable with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bl</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction.</P>
<P>Large model objects may live anywhere in the 32-bit address space (the compiler generates<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>seth/add3</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions to load their addresses), and may not be reachable with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bl</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction (the compiler generates the much slower<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>seth/add3/jl</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction sequence).</P>
<P>On IA-64, use this attribute to set the addressability of an object. At present, the only supported identifier for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>model-name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>small</CODE>, indicating addressability via &#8220;small&#8221; (22-bit) addresses (so that their addresses can be loaded with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>addl</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction). Caveat: such addressing is by definition not position independent and hence this attribute must not be used for objects defined by shared libraries.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>ms_abi/sysv_abi</CODE> 
<DD><A name=index-g_t_0040code_007bms_005fabi_007d-attribute-2895></A><A name=index-g_t_0040code_007bsysv_005fabi_007d-attribute-2896></A>On 32-bit and 64-bit (i?86|x86_64)-*-* targets, you can use an ABI attribute to indicate which calling convention should be used for a function. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ms_abi</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute tells the compiler to use the Microsoft ABI, while the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sysv_abi</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute tells the compiler to use the ABI used on GNU/Linux and other systems. The default is to use the Microsoft ABI when targeting Windows. On all other systems, the default is the x86/AMD ABI. 
<P>Note, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ms_abi</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute for Microsoft Windows 64-bit targets currently requires the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-maccumulate-outgoing-args</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>callee_pop_aggregate_return (</CODE><VAR>number</VAR><CODE>)</CODE> 
<DD><A name=index-g_t_0040code_007bcallee_005fpop_005faggregate_005freturn_007d-attribute-2897></A>On 32-bit i?86-*-* targets, you can use this attribute to control how aggregates are returned in memory. If the caller is responsible for popping the hidden pointer together with the rest of the arguments, specify<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>number</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>equal to zero. If callee is responsible for popping the hidden pointer, specify<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>number</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>equal to one. 
<P>The default i386 ABI assumes that the callee pops the stack for hidden pointer. However, on 32-bit i386 Microsoft Windows targets, the compiler assumes that the caller pops the stack for hidden pointer.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>ms_hook_prologue</CODE> 
<DD><A name=index-g_t_0040code_007bms_005fhook_005fprologue_007d-attribute-2898></A>On 32-bit i[34567]86-*-* targets and 64-bit x86_64-*-* targets, you can use this function attribute to make GCC generate the &#8220;hot-patching&#8221; function prologue used in Win32 API functions in Microsoft Windows XP Service Pack 2 and newer.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>hotpatch [(</CODE><VAR>prologue-halfwords</VAR><CODE>)]</CODE> 
<DD><A name=index-g_t_0040code_007bhotpatch_007d-attribute-2899></A>On S/390 System z targets, you can use this function attribute to make GCC generate a &#8220;hot-patching&#8221; function prologue. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hotpatch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>has no effect on funtions that are explicitly inline. If the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mhotpatch</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-hotpatch</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>command-line option is used at the same time, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hotpatch</CODE>attribute takes precedence. If an argument is given, the maximum allowed value is 1000000.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>naked</CODE> 
<DD><A name=index-function-without-a-prologue_002fepilogue-code-2900></A>Use this attribute on the ARM, AVR, MCORE, MSP430, NDS32, RL78, RX and SPU ports to indicate that the specified function does not need prologue/epilogue sequences generated by the compiler. It is up to the programmer to provide these sequences. The only statements that can be safely included in naked functions are<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>statements that do not have operands. All other statements, including declarations of local variables,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>if</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>statements, and so forth, should be avoided. Naked functions should be used to implement the body of an assembly function, while allowing the compiler to construct the requisite function declaration for the assembler.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>near</CODE> 
<DD><A name=index-functions-that-do-not-handle-memory-bank-switching-on-68HC11_002f68HC12-2901></A>On 68HC11 and 68HC12 the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>near</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute causes the compiler to use the normal calling convention based on<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>jsr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>rts</CODE>. This attribute can be used to cancel the effect of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mlong-calls</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option. 
<P>On MeP targets this attribute causes the compiler to assume the called function is close enough to use the normal calling convention, overriding the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mtf</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>command-line option.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>nesting</CODE> 
<DD><A name=index-Allow-nesting-in-an-interrupt-handler-on-the-Blackfin-processor_002e-2902></A>Use this attribute together with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>interrupt_handler</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>exception_handler</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nmi_handler</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to indicate that the function entry code should enable nested interrupts or exceptions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>nmi_handler</CODE> 
<DD><A name=index-NMI-handler-functions-on-the-Blackfin-processor-2903></A>Use this attribute on the Blackfin to indicate that the specified function is an NMI handler. The compiler generates function entry and exit sequences suitable for use in an NMI handler when this attribute is present.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>nocompression</CODE> 
<DD><A name=index-g_t_0040code_007bnocompression_007d-attribute-2904></A>On MIPS targets, you can use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nocompression</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function attribute to locally turn off MIPS16 and microMIPS code generation. This attribute overrides the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mips16</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mmicromips</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options on the command line (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/MIPS-Options.html#MIPS-Options">MIPS Options</A>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>no_instrument_function</CODE> 
<DD><A name=index-g_t_0040code_007bno_005finstrument_005ffunction_007d-function-attribute-2905></A><A name=index-finstrument-functions-2906></A>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-finstrument-functions</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is given, profiling function calls are generated at entry and exit of most user-compiled functions. Functions with this attribute are not so instrumented.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>no_split_stack</CODE> 
<DD><A name=index-g_t_0040code_007bno_005fsplit_005fstack_007d-function-attribute-2907></A><A name=index-fsplit-stack-2908></A>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fsplit-stack</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is given, functions have a small prologue which decides whether to split the stack. Functions with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>no_split_stack</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute do not have that prologue, and thus may run with only a small amount of stack space available.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>noinline</CODE> 
<DD><A name=index-g_t_0040code_007bnoinline_007d-function-attribute-2909></A>This function attribute prevents a function from being considered for inlining.<SPAN class=Apple-converted-space>&nbsp;</SPAN>If the function does not have side-effects, there are optimizations other than inlining that cause function calls to be optimized away, although the function call is live. To keep such calls from being optimized away, put<PRE class=smallexample style="FONT-SIZE: smaller">          asm ("");
</PRE>
<P class=noindent>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Extended-Asm.html#Extended-Asm">Extended Asm</A>) in the called function, to serve as a special side-effect.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>noclone</CODE> 
<DD><A name=index-g_t_0040code_007bnoclone_007d-function-attribute-2910></A>This function attribute prevents a function from being considered for cloning&#8212;a mechanism that produces specialized copies of functions and which is (currently) performed by interprocedural constant propagation.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>nonnull (</CODE><VAR>arg-index</VAR><CODE>, ...)</CODE> 
<DD><A name=index-g_t_0040code_007bnonnull_007d-function-attribute-2911></A>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nonnull</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute specifies that some function parameters should be non-null pointers. For instance, the declaration:<PRE class=smallexample style="FONT-SIZE: smaller">          extern void *
          my_memcpy (void *dest, const void *src, size_t len)
                  __attribute__((nonnull (1, 2)));
</PRE>
<P class=noindent>causes the compiler to check that, in calls to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>my_memcpy</CODE>, arguments<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dest</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>src</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are non-null. If the compiler determines that a null pointer is passed in an argument slot marked as non-null, and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wnonnull</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is enabled, a warning is issued. The compiler may also choose to make optimizations based on the knowledge that certain function arguments will never be null.</P>
<P>If no argument index list is given to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nonnull</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute, all pointer arguments are marked as non-null. To illustrate, the following declaration is equivalent to the previous example:</P><PRE class=smallexample style="FONT-SIZE: smaller">          extern void *
          my_memcpy (void *dest, const void *src, size_t len)
                  __attribute__((nonnull));
</PRE><BR>
<DT><CODE>returns_nonnull</CODE> 
<DD><A name=index-g_t_0040code_007breturns_005fnonnull_007d-function-attribute-2912></A>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>returns_nonnull</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute specifies that the function return value should be a non-null pointer. For instance, the declaration:<PRE class=smallexample style="FONT-SIZE: smaller">          extern void *
          mymalloc (size_t len) __attribute__((returns_nonnull));
</PRE>
<P class=noindent>lets the compiler optimize callers based on the knowledge that the return value will never be null.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>noreturn</CODE> 
<DD><A name=index-g_t_0040code_007bnoreturn_007d-function-attribute-2913></A>A few standard library functions, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>abort</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>exit</CODE>, cannot return. GCC knows this automatically. Some programs define their own functions that never return. You can declare them<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>noreturn</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to tell the compiler this fact. For example,<PRE class=smallexample style="FONT-SIZE: smaller">          void fatal () __attribute__ ((noreturn));
          
          void
          fatal (/* <SPAN class=roman style="FONT-FAMILY: serif; FONT-WEIGHT: normal">...</SPAN> */)
          {
            /* <SPAN class=roman style="FONT-FAMILY: serif; FONT-WEIGHT: normal">...</SPAN> */ /* <SPAN class=roman style="FONT-FAMILY: serif; FONT-WEIGHT: normal">Print error message.</SPAN> */ /* <SPAN class=roman style="FONT-FAMILY: serif; FONT-WEIGHT: normal">...</SPAN> */
            exit (1);
          }
</PRE>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>noreturn</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword tells the compiler to assume that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fatal</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>cannot return. It can then optimize without regard to what would happen if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fatal</CODE>ever did return. This makes slightly better code. More importantly, it helps avoid spurious warnings of uninitialized variables.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>noreturn</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword does not affect the exceptional path when that applies: a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>noreturn</CODE>-marked function may still return to the caller by throwing an exception or calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>longjmp</CODE>.</P>
<P>Do not assume that registers saved by the calling function are restored before calling the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>noreturn</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function.</P>
<P>It does not make sense for a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>noreturn</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function to have a return type other than<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>void</CODE>.</P>
<P>The attribute<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>noreturn</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not implemented in GCC versions earlier than 2.5. An alternative way to declare that a function does not return, which works in the current version and in some older versions, is as follows:</P><PRE class=smallexample style="FONT-SIZE: smaller">          typedef void voidfn ();
          
          volatile voidfn fatal;
</PRE>
<P class=noindent>This approach does not work in GNU C++.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>nothrow</CODE> 
<DD><A name=index-g_t_0040code_007bnothrow_007d-function-attribute-2914></A>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nothrow</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute is used to inform the compiler that a function cannot throw an exception. For example, most functions in the standard C library can be guaranteed not to throw an exception with the notable exceptions of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>qsort</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bsearch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that take function pointer arguments. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nothrow</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute is not implemented in GCC versions earlier than 3.3.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>nosave_low_regs</CODE> 
<DD><A name=index-g_t_0040code_007bnosave_005flow_005fregs_007d-attribute-2915></A>Use this attribute on SH targets to indicate that an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>interrupt_handler</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function should not save and restore registers R0..R7. This can be used on SH3* and SH4* targets that have a second R0..R7 register bank for non-reentrant interrupt handlers.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>optimize</CODE> 
<DD><A name=index-g_t_0040code_007boptimize_007d-function-attribute-2916></A>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>optimize</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute is used to specify that a function is to be compiled with different optimization options than specified on the command line. Arguments can either be numbers or strings. Numbers are assumed to be an optimization level. Strings that begin with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>O</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are assumed to be an optimization option, while other options are assumed to be used with a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>prefix. You can also use the &#8216;<SAMP><SPAN class=samp>#pragma GCC optimize</SPAN></SAMP>&#8217; pragma to set the optimization options that affect more than one function. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Function-Specific-Option-Pragmas.html#Function-Specific-Option-Pragmas">Function Specific Option Pragmas</A>, for details about the &#8216;<SAMP><SPAN class=samp>#pragma GCC optimize</SPAN></SAMP>&#8217; pragma. 
<P>This can be used for instance to have frequently-executed functions compiled with more aggressive optimization options that produce faster and larger code, while other functions can be compiled with less aggressive options.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>OS_main/OS_task</CODE> 
<DD><A name=index-g_t_0040code_007bOS_005fmain_007d-AVR-function-attribute-2917></A><A name=index-g_t_0040code_007bOS_005ftask_007d-AVR-function-attribute-2918></A>On AVR, functions with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>OS_main</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>OS_task</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute do not save/restore any call-saved register in their prologue/epilogue. 
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>OS_main</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute can be used when there<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>is guarantee</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>that interrupts are disabled at the time when the function is entered. This saves resources when the stack pointer has to be changed to set up a frame for local variables.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>OS_task</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute can be used when there is<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>no guarantee</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>that interrupts are disabled at that time when the function is entered like for, e.g. task functions in a multi-threading operating system. In that case, changing the stack pointer register is guarded by save/clear/restore of the global interrupt enable flag.</P>
<P>The differences to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>naked</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function attribute are:</P>
<UL>
<LI><CODE>naked</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>functions do not have a return instruction whereas<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>OS_main</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>OS_task</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>functions have a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>RET</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>RETI</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>return instruction. 
<LI><CODE>naked</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>functions do not set up a frame for local variables or a frame pointer whereas<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>OS_main</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>OS_task</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>do this as needed.</LI></UL><BR>
<DT><CODE>pcs</CODE> 
<DD><A name=index-g_t_0040code_007bpcs_007d-function-attribute-2919></A>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>pcs</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute can be used to control the calling convention used for a function on ARM. The attribute takes an argument that specifies the calling convention to use. 
<P>When compiling using the AAPCS ABI (or a variant of it) then valid values for the argument are<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"aapcs"</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"aapcs-vfp"</CODE>. In order to use a variant other than<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"aapcs"</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>then the compiler must be permitted to use the appropriate co-processor registers (i.e., the VFP registers must be available in order to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"aapcs-vfp"</CODE>). For example,</P><PRE class=smallexample style="FONT-SIZE: smaller">          /* Argument passed in r0, and result returned in r0+r1.  */
          double f2d (float) __attribute__((pcs("aapcs")));
</PRE>
<P>Variadic functions always use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>"aapcs"</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>calling convention and the compiler rejects attempts to specify an alternative.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>pure</CODE> 
<DD><A name=index-g_t_0040code_007bpure_007d-function-attribute-2920></A>Many functions have no effects except the return value and their return value depends only on the parameters and/or global variables. Such a function can be subject to common subexpression elimination and loop optimization just as an arithmetic operator would be. These functions should be declared with the attribute<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>pure</CODE>. For example,<PRE class=smallexample style="FONT-SIZE: smaller">          int square (int) __attribute__ ((pure));
</PRE>
<P class=noindent>says that the hypothetical function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>square</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is safe to call fewer times than the program says.</P>
<P>Some of common examples of pure functions are<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strlen</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>memcmp</CODE>. Interesting non-pure functions are functions with infinite loops or those depending on volatile memory or other system resource, that may change between two consecutive calls (such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>feof</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in a multithreading environment).</P>
<P>The attribute<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>pure</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not implemented in GCC versions earlier than 2.96.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>hot</CODE> 
<DD><A name=index-g_t_0040code_007bhot_007d-function-attribute-2921></A>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hot</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute on a function is used to inform the compiler that the function is a hot spot of the compiled program. The function is optimized more aggressively and on many target it is placed into special subsection of the text section so all hot functions appears close together improving locality. 
<P>When profile feedback is available, via<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fprofile-use</SPAN></SAMP>, hot functions are automatically detected and this attribute is ignored.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hot</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute on functions is not implemented in GCC versions earlier than 4.3.</P>
<P><A name=index-g_t_0040code_007bhot_007d-label-attribute-2922></A>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hot</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute on a label is used to inform the compiler that path following the label are more likely than paths that are not so annotated. This attribute is used in cases where<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_expect</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>cannot be used, for instance with computed goto or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asm goto</CODE>.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hot</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute on labels is not implemented in GCC versions earlier than 4.8.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>cold</CODE> 
<DD><A name=index-g_t_0040code_007bcold_007d-function-attribute-2923></A>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cold</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute on functions is used to inform the compiler that the function is unlikely to be executed. The function is optimized for size rather than speed and on many targets it is placed into special subsection of the text section so all cold functions appears close together improving code locality of non-cold parts of program. The paths leading to call of cold functions within code are marked as unlikely by the branch prediction mechanism. It is thus useful to mark functions used to handle unlikely conditions, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>perror</CODE>, as cold to improve optimization of hot functions that do call marked functions in rare occasions. 
<P>When profile feedback is available, via<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fprofile-use</SPAN></SAMP>, cold functions are automatically detected and this attribute is ignored.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cold</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute on functions is not implemented in GCC versions earlier than 4.3.</P>
<P><A name=index-g_t_0040code_007bcold_007d-label-attribute-2924></A>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cold</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute on labels is used to inform the compiler that the path following the label is unlikely to be executed. This attribute is used in cases where<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_expect</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>cannot be used, for instance with computed goto or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asm goto</CODE>.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cold</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute on labels is not implemented in GCC versions earlier than 4.8.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>no_sanitize_address</CODE> 
<DT><CODE>no_address_safety_analysis</CODE> 
<DD><A name=index-g_t_0040code_007bno_005fsanitize_005faddress_007d-function-attribute-2925></A>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>no_sanitize_address</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute on functions is used to inform the compiler that it should not instrument memory accesses in the function when compiling with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fsanitize=address</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>no_address_safety_analysis</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a deprecated alias of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>no_sanitize_address</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute, new code should use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>no_sanitize_address</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>no_sanitize_undefined</CODE> 
<DD><A name=index-g_t_0040code_007bno_005fsanitize_005fundefined_007d-function-attribute-2926></A>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>no_sanitize_undefined</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute on functions is used to inform the compiler that it should not check for undefined behavior in the function when compiling with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fsanitize=undefined</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>regparm (</CODE><VAR>number</VAR><CODE>)</CODE> 
<DD><A name=index-g_t_0040code_007bregparm_007d-attribute-2927></A><A name=index-functions-that-are-passed-arguments-in-registers-on-the-386-2928></A>On the Intel 386, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>regparm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute causes the compiler to pass arguments number one to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>number</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>if they are of integral type in registers EAX, EDX, and ECX instead of on the stack. Functions that take a variable number of arguments continue to be passed all of their arguments on the stack. 
<P>Beware that on some ELF systems this attribute is unsuitable for global functions in shared libraries with lazy binding (which is the default). Lazy binding sends the first call via resolving code in the loader, which might assume EAX, EDX and ECX can be clobbered, as per the standard calling conventions. Solaris 8 is affected by this. Systems with the GNU C Library version 2.1 or higher and FreeBSD are believed to be safe since the loaders there save EAX, EDX and ECX. (Lazy binding can be disabled with the linker or the loader if desired, to avoid the problem.)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>reset</CODE> 
<DD><A name=index-reset-handler-functions-2929></A>Use this attribute on the NDS32 target to indicate that the specified function is a reset handler. The compiler will generate corresponding sections for use in a reset handler. You can use the following attributes to provide extra exception handling: 
<DL>
<DT><CODE>nmi</CODE> 
<DD><A name=index-g_t_0040code_007bnmi_007d-attribute-2930></A>Provide a user-defined function to handle NMI exception.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>warm</CODE> 
<DD><A name=index-g_t_0040code_007bwarm_007d-attribute-2931></A>Provide a user-defined function to handle warm reset exception.</DD></DL><BR>
<DT><CODE>sseregparm</CODE> 
<DD><A name=index-g_t_0040code_007bsseregparm_007d-attribute-2932></A>On the Intel 386 with SSE support, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sseregparm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute causes the compiler to pass up to 3 floating-point arguments in SSE registers instead of on the stack. Functions that take a variable number of arguments continue to pass all of their floating-point arguments on the stack.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>force_align_arg_pointer</CODE> 
<DD><A name=index-g_t_0040code_007bforce_005falign_005farg_005fpointer_007d-attribute-2933></A>On the Intel x86, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>force_align_arg_pointer</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute may be applied to individual function definitions, generating an alternate prologue and epilogue that realigns the run-time stack if necessary. This supports mixing legacy codes that run with a 4-byte aligned stack with modern codes that keep a 16-byte stack for SSE compatibility.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>renesas</CODE> 
<DD><A name=index-g_t_0040code_007brenesas_007d-attribute-2934></A>On SH targets this attribute specifies that the function or struct follows the Renesas ABI.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>resbank</CODE> 
<DD><A name=index-g_t_0040code_007bresbank_007d-attribute-2935></A>On the SH2A target, this attribute enables the high-speed register saving and restoration using a register bank for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>interrupt_handler</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>routines. Saving to the bank is performed automatically after the CPU accepts an interrupt that uses a register bank. 
<P>The nineteen 32-bit registers comprising general register R0 to R14, control register GBR, and system registers MACH, MACL, and PR and the vector table address offset are saved into a register bank. Register banks are stacked in first-in last-out (FILO) sequence. Restoration from the bank is executed by issuing a RESBANK instruction.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>returns_twice</CODE> 
<DD><A name=index-g_t_0040code_007breturns_005ftwice_007d-attribute-2936></A>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>returns_twice</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute tells the compiler that a function may return more than one time. The compiler ensures that all registers are dead before calling such a function and emits a warning about the variables that may be clobbered after the second return from the function. Examples of such functions are<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setjmp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vfork</CODE>. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>longjmp</CODE>-like counterpart of such function, if any, might need to be marked with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>noreturn</CODE>attribute.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>saveall</CODE> 
<DD><A name=index-save-all-registers-on-the-Blackfin_002c-H8_002f300_002c-H8_002f300H_002c-and-H8S-2937></A>Use this attribute on the Blackfin, H8/300, H8/300H, and H8S to indicate that all registers except the stack pointer should be saved in the prologue regardless of whether they are used or not.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>save_volatiles</CODE> 
<DD><A name=index-save-volatile-registers-on-the-MicroBlaze-2938></A>Use this attribute on the MicroBlaze to indicate that the function is an interrupt handler. All volatile registers (in addition to non-volatile registers) are saved in the function prologue. If the function is a leaf function, only volatiles used by the function are saved. A normal function return is generated instead of a return from interrupt.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>section ("</CODE><VAR>section-name</VAR><CODE>")</CODE> 
<DD><A name=index-g_t_0040code_007bsection_007d-function-attribute-2939></A>Normally, the compiler places the code it generates in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>text</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>section. Sometimes, however, you need additional sections, or you need certain particular functions to appear in special sections. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>section</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute specifies that a function lives in a particular section. For example, the declaration:<PRE class=smallexample style="FONT-SIZE: smaller">          extern void foobar (void) __attribute__ ((section ("bar")));
</PRE>
<P class=noindent>puts the function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>foobar</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bar</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>section.</P>
<P>Some file formats do not support arbitrary sections so the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>section</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute is not available on all platforms. If you need to map the entire contents of a module to a particular section, consider using the facilities of the linker instead.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>sentinel</CODE> 
<DD><A name=index-g_t_0040code_007bsentinel_007d-function-attribute-2940></A>This function attribute ensures that a parameter in a function call is an explicit<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE>. The attribute is only valid on variadic functions. By default, the sentinel is located at position zero, the last parameter of the function call. If an optional integer position argument P is supplied to the attribute, the sentinel must be located at position P counting backwards from the end of the argument list.<PRE class=smallexample style="FONT-SIZE: smaller">          __attribute__ ((sentinel))
          is equivalent to
          __attribute__ ((sentinel(0)))
</PRE>
<P>The attribute is automatically set with a position of 0 for the built-in functions<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>execl</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>execlp</CODE>. The built-in function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>execle</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>has the attribute set with a position of 1.</P>
<P>A valid<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in this context is defined as zero with any pointer type. If your system defines the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>macro with an integer type then you need to add an explicit cast. GCC replaces<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stddef.h</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with a copy that redefines NULL appropriately.</P>
<P>The warnings for missing or incorrect sentinels are enabled with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wformat</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>short_call</CODE> 
<DD>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long_call/short_call</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>shortcall</CODE> 
<DD>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>longcall/shortcall</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>signal</CODE> 
<DD><A name=index-interrupt-handler-functions-on-the-AVR-processors-2941></A>Use this attribute on the AVR to indicate that the specified function is an interrupt handler. The compiler generates function entry and exit sequences suitable for use in an interrupt handler when this attribute is present. 
<P>See also the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>interrupt</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function attribute.</P>
<P>The AVR hardware globally disables interrupts when an interrupt is executed. Interrupt handler functions defined with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>signal</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute do not re-enable interrupts. It is save to enable interrupts in a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>signal</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>handler. This &#8220;save&#8221; only applies to the code generated by the compiler and not to the IRQ layout of the application which is responsibility of the application.</P>
<P>If both<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>signal</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>interrupt</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are specified for the same function,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>signal</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is silently ignored.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>sp_switch</CODE> 
<DD><A name=index-g_t_0040code_007bsp_005fswitch_007d-attribute-2942></A>Use this attribute on the SH to indicate an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>interrupt_handler</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function should switch to an alternate stack. It expects a string argument that names a global variable holding the address of the alternate stack.<PRE class=smallexample style="FONT-SIZE: smaller">          void *alt_stack;
          void f () __attribute__ ((interrupt_handler,
                                    sp_switch ("alt_stack")));
</PRE><BR>
<DT><CODE>stdcall</CODE> 
<DD><A name=index-functions-that-pop-the-argument-stack-on-the-386-2943></A>On the Intel 386, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stdcall</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute causes the compiler to assume that the called function pops off the stack space used to pass arguments, unless it takes a variable number of arguments.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>syscall_linkage</CODE> 
<DD><A name=index-g_t_0040code_007bsyscall_005flinkage_007d-attribute-2944></A>This attribute is used to modify the IA-64 calling convention by marking all input registers as live at all function exits. This makes it possible to restart a system call after an interrupt without having to save/restore the input registers. This also prevents kernel data from leaking into application code.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>target</CODE> 
<DD><A name=index-g_t_0040code_007btarget_007d-function-attribute-2945></A>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>target</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute is used to specify that a function is to be compiled with different target options than specified on the command line. This can be used for instance to have functions compiled with a different ISA (instruction set architecture) than the default. You can also use the &#8216;<SAMP><SPAN class=samp>#pragma GCC target</SPAN></SAMP>&#8217; pragma to set more than one function to be compiled with specific target options. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Function-Specific-Option-Pragmas.html#Function-Specific-Option-Pragmas">Function Specific Option Pragmas</A>, for details about the &#8216;<SAMP><SPAN class=samp>#pragma GCC target</SPAN></SAMP>&#8217; pragma. 
<P>For instance on a 386, you could compile one function with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>target("sse4.1,arch=core2")</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and another with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>target("sse4a,arch=amdfam10")</CODE>. This is equivalent to compiling the first function with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-msse4.1</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march=core2</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options, and the second function with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-msse4a</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march=amdfam10</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options. It is up to the user to make sure that a function is only invoked on a machine that supports the particular ISA it is compiled for (for example by using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cpuid</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on 386 to determine what feature bits and architecture family are used).</P><PRE class=smallexample style="FONT-SIZE: smaller">          int core2_func (void) __attribute__ ((__target__ ("arch=core2")));
          int sse3_func (void) __attribute__ ((__target__ ("sse3")));
</PRE>
<P>You can either use multiple strings to specify multiple options, or separate the options with a comma (&#8216;<SAMP><SPAN class=samp>,</SPAN></SAMP>&#8217;).</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>target</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute is presently implemented for i386/x86_64, PowerPC, and Nios II targets only. The options supported are specific to each target.</P>
<P>On the 386, the following options are allowed:</P>
<DL>
<DT>&#8216;<SAMP><SPAN class=samp>abm</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-abm</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022abm_0022_0029_007d-attribute-2946></A>Enable/disable the generation of the advanced bit instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>aes</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-aes</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022aes_0022_0029_007d-attribute-2947></A>Enable/disable the generation of the AES instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>default</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022default_0022_0029_007d-attribute-2948></A>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Function-Multiversioning.html#Function-Multiversioning">Function Multiversioning</A>, where it is used to specify the default function version.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>mmx</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-mmx</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022mmx_0022_0029_007d-attribute-2949></A>Enable/disable the generation of the MMX instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>pclmul</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-pclmul</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022pclmul_0022_0029_007d-attribute-2950></A>Enable/disable the generation of the PCLMUL instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>popcnt</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-popcnt</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022popcnt_0022_0029_007d-attribute-2951></A>Enable/disable the generation of the POPCNT instruction.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>sse</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-sse</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022sse_0022_0029_007d-attribute-2952></A>Enable/disable the generation of the SSE instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>sse2</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-sse2</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022sse2_0022_0029_007d-attribute-2953></A>Enable/disable the generation of the SSE2 instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>sse3</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-sse3</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022sse3_0022_0029_007d-attribute-2954></A>Enable/disable the generation of the SSE3 instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>sse4</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-sse4</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022sse4_0022_0029_007d-attribute-2955></A>Enable/disable the generation of the SSE4 instructions (both SSE4.1 and SSE4.2).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>sse4.1</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-sse4.1</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022sse4_002e1_0022_0029_007d-attribute-2956></A>Enable/disable the generation of the sse4.1 instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>sse4.2</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-sse4.2</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022sse4_002e2_0022_0029_007d-attribute-2957></A>Enable/disable the generation of the sse4.2 instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>sse4a</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-sse4a</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022sse4a_0022_0029_007d-attribute-2958></A>Enable/disable the generation of the SSE4A instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>fma4</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-fma4</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022fma4_0022_0029_007d-attribute-2959></A>Enable/disable the generation of the FMA4 instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>xop</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-xop</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022xop_0022_0029_007d-attribute-2960></A>Enable/disable the generation of the XOP instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>lwp</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-lwp</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022lwp_0022_0029_007d-attribute-2961></A>Enable/disable the generation of the LWP instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>ssse3</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-ssse3</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022ssse3_0022_0029_007d-attribute-2962></A>Enable/disable the generation of the SSSE3 instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>cld</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-cld</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022cld_0022_0029_007d-attribute-2963></A>Enable/disable the generation of the CLD before string moves.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>fancy-math-387</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-fancy-math-387</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022fancy-math-387_0022_0029_007d-attribute-2964></A>Enable/disable the generation of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sin</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cos</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sqrt</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions on the 387 floating-point unit.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>fused-madd</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-fused-madd</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022fused-madd_0022_0029_007d-attribute-2965></A>Enable/disable the generation of the fused multiply/add instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>ieee-fp</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-ieee-fp</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022ieee-fp_0022_0029_007d-attribute-2966></A>Enable/disable the generation of floating point that depends on IEEE arithmetic.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>inline-all-stringops</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-inline-all-stringops</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022inline-all-stringops_0022_0029_007d-attribute-2967></A>Enable/disable inlining of string operations.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>inline-stringops-dynamically</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-inline-stringops-dynamically</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022inline-stringops-dynamically_0022_0029_007d-attribute-2968></A>Enable/disable the generation of the inline code to do small string operations and calling the library routines for large operations.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>align-stringops</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-align-stringops</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022align-stringops_0022_0029_007d-attribute-2969></A>Do/do not align destination of inlined string operations.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>recip</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-recip</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022recip_0022_0029_007d-attribute-2970></A>Enable/disable the generation of RCPSS, RCPPS, RSQRTSS and RSQRTPS instructions followed an additional Newton-Raphson step instead of doing a floating-point division.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>arch=</SPAN><VAR>ARCH</VAR></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022arch_003d_0040var_007bARCH_007d_0022_0029_007d-attribute-2971></A>Specify the architecture to generate code for in compiling the function.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>tune=</SPAN><VAR>TUNE</VAR></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022tune_003d_0040var_007bTUNE_007d_0022_0029_007d-attribute-2972></A>Specify the architecture to tune for in compiling the function.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>fpmath=</SPAN><VAR>FPMATH</VAR></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022fpmath_003d_0040var_007bFPMATH_007d_0022_0029_007d-attribute-2973></A>Specify which floating-point unit to use. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>target("fpmath=sse,387")</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>option must be specified as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>target("fpmath=sse+387")</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>because the comma would separate different options.</DD></DL>
<P>On the PowerPC, the following options are allowed:</P>
<DL>
<DT>&#8216;<SAMP><SPAN class=samp>altivec</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-altivec</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022altivec_0022_0029_007d-attribute-2974></A>Generate code that uses (does not use) AltiVec instructions. In 32-bit code, you cannot enable AltiVec instructions unless<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mabi=altivec</SPAN></SAMP>is used on the command line.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>cmpb</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-cmpb</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022cmpb_0022_0029_007d-attribute-2975></A>Generate code that uses (does not use) the compare bytes instruction implemented on the POWER6 processor and other processors that support the PowerPC V2.05 architecture.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>dlmzb</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-dlmzb</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022dlmzb_0022_0029_007d-attribute-2976></A>Generate code that uses (does not use) the string-search &#8216;<SAMP><SPAN class=samp>dlmzb</SPAN></SAMP>&#8217; instruction on the IBM 405, 440, 464 and 476 processors. This instruction is generated by default when targeting those processors.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>fprnd</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-fprnd</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022fprnd_0022_0029_007d-attribute-2977></A>Generate code that uses (does not use) the FP round to integer instructions implemented on the POWER5+ processor and other processors that support the PowerPC V2.03 architecture.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>hard-dfp</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-hard-dfp</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022hard-dfp_0022_0029_007d-attribute-2978></A>Generate code that uses (does not use) the decimal floating-point instructions implemented on some POWER processors.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>isel</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-isel</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022isel_0022_0029_007d-attribute-2979></A>Generate code that uses (does not use) ISEL instruction.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>mfcrf</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-mfcrf</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022mfcrf_0022_0029_007d-attribute-2980></A>Generate code that uses (does not use) the move from condition register field instruction implemented on the POWER4 processor and other processors that support the PowerPC V2.01 architecture.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>mfpgpr</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-mfpgpr</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022mfpgpr_0022_0029_007d-attribute-2981></A>Generate code that uses (does not use) the FP move to/from general purpose register instructions implemented on the POWER6X processor and other processors that support the extended PowerPC V2.05 architecture.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>mulhw</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-mulhw</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022mulhw_0022_0029_007d-attribute-2982></A>Generate code that uses (does not use) the half-word multiply and multiply-accumulate instructions on the IBM 405, 440, 464 and 476 processors. These instructions are generated by default when targeting those processors.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>multiple</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-multiple</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022multiple_0022_0029_007d-attribute-2983></A>Generate code that uses (does not use) the load multiple word instructions and the store multiple word instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>update</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-update</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022update_0022_0029_007d-attribute-2984></A>Generate code that uses (does not use) the load or store instructions that update the base register to the address of the calculated memory location.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>popcntb</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-popcntb</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022popcntb_0022_0029_007d-attribute-2985></A>Generate code that uses (does not use) the popcount and double-precision FP reciprocal estimate instruction implemented on the POWER5 processor and other processors that support the PowerPC V2.02 architecture.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>popcntd</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-popcntd</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022popcntd_0022_0029_007d-attribute-2986></A>Generate code that uses (does not use) the popcount instruction implemented on the POWER7 processor and other processors that support the PowerPC V2.06 architecture.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>powerpc-gfxopt</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-powerpc-gfxopt</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022powerpc-gfxopt_0022_0029_007d-attribute-2987></A>Generate code that uses (does not use) the optional PowerPC architecture instructions in the Graphics group, including floating-point select.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>powerpc-gpopt</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-powerpc-gpopt</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022powerpc-gpopt_0022_0029_007d-attribute-2988></A>Generate code that uses (does not use) the optional PowerPC architecture instructions in the General Purpose group, including floating-point square root.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>recip-precision</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-recip-precision</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022recip-precision_0022_0029_007d-attribute-2989></A>Assume (do not assume) that the reciprocal estimate instructions provide higher-precision estimates than is mandated by the powerpc ABI.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>string</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-string</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022string_0022_0029_007d-attribute-2990></A>Generate code that uses (does not use) the load string instructions and the store string word instructions to save multiple registers and do small block moves.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>vsx</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-vsx</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022vsx_0022_0029_007d-attribute-2991></A>Generate code that uses (does not use) vector/scalar (VSX) instructions, and also enable the use of built-in functions that allow more direct access to the VSX instruction set. In 32-bit code, you cannot enable VSX or AltiVec instructions unless<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mabi=altivec</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used on the command line.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>friz</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-friz</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022friz_0022_0029_007d-attribute-2992></A>Generate (do not generate) the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>friz</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction when the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-funsafe-math-optimizations</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is used to optimize rounding a floating-point value to 64-bit integer and back to floating point. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>friz</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction does not return the same value if the floating-point number is too large to fit in an integer.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>avoid-indexed-addresses</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-avoid-indexed-addresses</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022avoid-indexed-addresses_0022_0029_007d-attribute-2993></A>Generate code that tries to avoid (not avoid) the use of indexed load or store instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>paired</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-paired</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022paired_0022_0029_007d-attribute-2994></A>Generate code that uses (does not use) the generation of PAIRED simd instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>longcall</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-longcall</SPAN></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022longcall_0022_0029_007d-attribute-2995></A>Generate code that assumes (does not assume) that all calls are far away so that a longer more expensive calling sequence is required.<BR>
<DT>&#8216;<SAMP><SPAN class=samp>cpu=</SPAN><VAR>CPU</VAR></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022cpu_003d_0040var_007bCPU_007d_0022_0029_007d-attribute-2996></A>Specify the architecture to generate code for when compiling the function. If you select the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>target("cpu=power7")</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute when generating 32-bit code, VSX and AltiVec instructions are not generated unless you use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mabi=altivec</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option on the command line.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>tune=</SPAN><VAR>TUNE</VAR></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022tune_003d_0040var_007bTUNE_007d_0022_0029_007d-attribute-2997></A>Specify the architecture to tune for when compiling the function. If you do not specify the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>target("tune=</CODE><VAR>TUNE</VAR><CODE>")</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute and you do specify the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>target("cpu=</CODE><VAR>CPU</VAR><CODE>")</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute, compilation tunes for the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>CPU</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>architecture, and not the default tuning specified on the command line.</DD></DL>
<P>When compiling for Nios II, the following options are allowed:</P>
<DL>
<DT>&#8216;<SAMP><SPAN class=samp>custom-</SPAN><VAR>insn</VAR><SPAN class=samp>=</SPAN><VAR>N</VAR></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>no-custom-</SPAN><VAR>insn</VAR></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022custom-_0040var_007binsn_007d_003d_0040var_007bN_007d_0022_0029_007d-attribute-2998></A><A name=index-g_t_0040code_007btarget_0028_0022no-custom-_0040var_007binsn_007d_0022_0029_007d-attribute-2999></A>Each &#8216;<SAMP><SPAN class=samp>custom-</SPAN><VAR>insn</VAR><SPAN class=samp>=</SPAN><VAR>N</VAR></SAMP>&#8217; attribute locally enables use of a custom instruction with encoding<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>N</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>when generating code that uses<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>insn</VAR>. Similarly, &#8216;<SAMP><SPAN class=samp>no-custom-</SPAN><VAR>insn</VAR></SAMP>&#8217; locally inhibits use of the custom instruction<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>insn</VAR>. These target attributes correspond to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mcustom-</SPAN><VAR>insn</VAR><SPAN class=option>=</SPAN><VAR>N</VAR></SAMP>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-custom-</SPAN><VAR>insn</VAR></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>command-line options, and support the same set of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>insn</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>keywords. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Nios-II-Options.html#Nios-II-Options">Nios II Options</A>, for more information.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>custom-fpu-cfg=</SPAN><VAR>name</VAR></SAMP>&#8217; 
<DD><A name=index-g_t_0040code_007btarget_0028_0022custom-fpu-cfg_003d_0040var_007bname_007d_0022_0029_007d-attribute-3000></A>This attribute corresponds to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mcustom-fpu-cfg=</SPAN><VAR>name</VAR></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>command-line option, to select a predefined set of custom instructions named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Nios-II-Options.html#Nios-II-Options">Nios II Options</A>, for more information.</DD></DL>
<P>On the 386/x86_64 and PowerPC back ends, the inliner does not inline a function that has different target options than the caller, unless the callee has a subset of the target options of the caller. For example a function declared with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>target("sse3")</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can inline a function with<CODE>target("sse2")</CODE>, since<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-msse3</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>implies<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-msse2</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>tiny_data</CODE> 
<DD><A name=index-tiny-data-section-on-the-H8_002f300H-and-H8S-3001></A>Use this attribute on the H8/300H and H8S to indicate that the specified variable should be placed into the tiny data section. The compiler generates more efficient code for loads and stores on data in the tiny data section. Note the tiny data area is limited to slightly under 32KB of data.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>trap_exit</CODE> 
<DD><A name=index-g_t_0040code_007btrap_005fexit_007d-attribute-3002></A>Use this attribute on the SH for an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>interrupt_handler</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to return using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>trapa</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>rte</CODE>. This attribute expects an integer argument specifying the trap number to be used.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>trapa_handler</CODE> 
<DD><A name=index-g_t_0040code_007btrapa_005fhandler_007d-attribute-3003></A>On SH targets this function attribute is similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>interrupt_handler</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>but it does not save and restore all registers.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>unused</CODE> 
<DD><A name=index-g_t_0040code_007bunused_007d-attribute_002e-3004></A>This attribute, attached to a function, means that the function is meant to be possibly unused. GCC does not produce a warning for this function.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>used</CODE> 
<DD><A name=index-g_t_0040code_007bused_007d-attribute_002e-3005></A>This attribute, attached to a function, means that code must be emitted for the function even if it appears that the function is not referenced. This is useful, for example, when the function is referenced only in inline assembly. 
<P>When applied to a member function of a C++ class template, the attribute also means that the function is instantiated if the class itself is instantiated.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>version_id</CODE> 
<DD><A name=index-g_t_0040code_007bversion_005fid_007d-attribute-3006></A>This IA-64 HP-UX attribute, attached to a global variable or function, renames a symbol to contain a version string, thus allowing for function level versioning. HP-UX system header files may use function level versioning for some system calls.<PRE class=smallexample style="FONT-SIZE: smaller">          extern int foo () __attribute__((version_id ("20040821")));
</PRE>
<P class=noindent>Calls to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>foo</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are mapped to calls to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>foo{20040821}</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>visibility ("</CODE><VAR>visibility_type</VAR><CODE>")</CODE> 
<DD><A name=index-g_t_0040code_007bvisibility_007d-attribute-3007></A>This attribute affects the linkage of the declaration to which it is attached. There are four supported<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>visibility_type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>values: default, hidden, protected or internal visibility.<PRE class=smallexample style="FONT-SIZE: smaller">          void __attribute__ ((visibility ("protected")))
          f () { /* <SPAN class=roman style="FONT-FAMILY: serif; FONT-WEIGHT: normal">Do something.</SPAN> */; }
          int i __attribute__ ((visibility ("hidden")));
</PRE>
<P>The possible values of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>visibility_type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>correspond to the visibility settings in the ELF gABI.</P>
<DL>
<DT><DFN>default</DFN> 
<DD>Default visibility is the normal case for the object file format. This value is available for the visibility attribute to override other options that may change the assumed visibility of entities. 
<P>On ELF, default visibility means that the declaration is visible to other modules and, in shared libraries, means that the declared entity may be overridden.</P>
<P>On Darwin, default visibility means that the declaration is visible to other modules.</P>
<P>Default visibility corresponds to &#8220;external linkage&#8221; in the language.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><DFN>hidden</DFN> 
<DD>Hidden visibility indicates that the entity declared has a new form of linkage, which we call &#8220;hidden linkage&#8221;. Two declarations of an object with hidden linkage refer to the same object if they are in the same shared object.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><DFN>internal</DFN> 
<DD>Internal visibility is like hidden visibility, but with additional processor specific semantics. Unless otherwise specified by the psABI, GCC defines internal visibility to mean that a function is<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>never</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>called from another module. Compare this with hidden functions which, while they cannot be referenced directly by other modules, can be referenced indirectly via function pointers. By indicating that a function cannot be called from outside the module, GCC may for instance omit the load of a PIC register since it is known that the calling function loaded the correct value.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><DFN>protected</DFN> 
<DD>Protected visibility is like default visibility except that it indicates that references within the defining module bind to the definition in that module. That is, the declared entity cannot be overridden by another module.</DD></DL>
<P>All visibilities are supported on many, but not all, ELF targets (supported when the assembler supports the &#8216;<SAMP><SPAN class=samp>.visibility</SPAN></SAMP>&#8217; pseudo-op). Default visibility is supported everywhere. Hidden visibility is supported on Darwin targets.</P>
<P>The visibility attribute should be applied only to declarations that would otherwise have external linkage. The attribute should be applied consistently, so that the same entity should not be declared with different settings of the attribute.</P>
<P>In C++, the visibility attribute applies to types as well as functions and objects, because in C++ types have linkage. A class must not have greater visibility than its non-static data member types and bases, and class members default to the visibility of their class. Also, a declaration without explicit visibility is limited to the visibility of its type.</P>
<P>In C++, you can mark member functions and static member variables of a class with the visibility attribute. This is useful if you know a particular method or static member variable should only be used from one shared object; then you can mark it hidden while the rest of the class has default visibility. Care must be taken to avoid breaking the One Definition Rule; for example, it is usually not useful to mark an inline method as hidden without marking the whole class as hidden.</P>
<P>A C++ namespace declaration can also have the visibility attribute.</P><PRE class=smallexample style="FONT-SIZE: smaller">          namespace nspace1 __attribute__ ((visibility ("protected")))
          { /* <SPAN class=roman style="FONT-FAMILY: serif; FONT-WEIGHT: normal">Do something.</SPAN> */; }
</PRE>
<P>This attribute applies only to the particular namespace body, not to other definitions of the same namespace; it is equivalent to using &#8216;<SAMP><SPAN class=samp>#pragma GCC visibility</SPAN></SAMP>&#8217; before and after the namespace definition (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Visibility-Pragmas.html#Visibility-Pragmas">Visibility Pragmas</A>).</P>
<P>In C++, if a template argument has limited visibility, this restriction is implicitly propagated to the template instantiation. Otherwise, template instantiations and specializations default to the visibility of their template.</P>
<P>If both the template and enclosing class have explicit visibility, the visibility from the template is used.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>vliw</CODE> 
<DD><A name=index-g_t_0040code_007bvliw_007d-attribute-3008></A>On MeP, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vliw</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute tells the compiler to emit instructions in VLIW mode instead of core mode. Note that this attribute is not allowed unless a VLIW coprocessor has been configured and enabled through command-line options.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>warn_unused_result</CODE> 
<DD><A name=index-g_t_0040code_007bwarn_005funused_005fresult_007d-attribute-3009></A>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>warn_unused_result</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute causes a warning to be emitted if a caller of the function with this attribute does not use its return value. This is useful for functions where not checking the result is either a security problem or always a bug, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>realloc</CODE>.<PRE class=smallexample style="FONT-SIZE: smaller">          int fn () __attribute__ ((warn_unused_result));
          int foo ()
          {
            if (fn () &lt; 0) return -1;
            fn ();
            return 0;
          }
</PRE>
<P class=noindent>results in warning on line 5.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>weak</CODE> 
<DD><A name=index-g_t_0040code_007bweak_007d-attribute-3010></A>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>weak</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute causes the declaration to be emitted as a weak symbol rather than a global. This is primarily useful in defining library functions that can be overridden in user code, though it can also be used with non-function declarations. Weak symbols are supported for ELF targets, and also for a.out targets when using the GNU assembler and linker.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>weakref</CODE> 
<DT><CODE>weakref ("</CODE><VAR>target</VAR><CODE>")</CODE> 
<DD><A name=index-g_t_0040code_007bweakref_007d-attribute-3011></A>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>weakref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute marks a declaration as a weak reference. Without arguments, it should be accompanied by an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>alias</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute naming the target symbol. Optionally, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>target</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be given as an argument to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>weakref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>itself. In either case,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>weakref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>implicitly marks the declaration as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>weak</CODE>. Without a<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>target</VAR>, given as an argument to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>weakref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>alias</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>weakref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>weak</CODE>.<PRE class=smallexample style="FONT-SIZE: smaller">          static int x() __attribute__ ((weakref ("y")));
          /* is equivalent to... */
          static int x() __attribute__ ((weak, weakref, alias ("y")));
          /* and to... */
          static int x() __attribute__ ((weakref));
          static int x() __attribute__ ((alias ("y")));
</PRE>
<P>A weak reference is an alias that does not by itself require a definition to be given for the target symbol. If the target symbol is only referenced through weak references, then it becomes a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>weak</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>undefined symbol. If it is directly referenced, however, then such strong references prevail, and a definition is required for the symbol, not necessarily in the same translation unit.</P>
<P>The effect is equivalent to moving all references to the alias to a separate translation unit, renaming the alias to the aliased symbol, declaring it as weak, compiling the two separate translation units and performing a reloadable link on them.</P>
<P>At present, a declaration to which<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>weakref</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is attached can only be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>static</CODE>.</P></DD></DL>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">You can specify multiple attributes in a declaration by separating them by commas within the double parentheses or by immediately following an attribute declaration with another attribute declaration.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><A name=index-g_t_0040code_007b_0023pragma_007d_002c-reason-for-not-using-3012></A><A name=index-pragma_002c-reason-for-not-using-3013></A>Some people object to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__attribute__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>feature, suggesting that ISO C's<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#pragma</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be used instead. At the time<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__attribute__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>was designed, there were two reasons for not doing this.</P>
<OL style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px" type=1>
<LI>It is impossible to generate<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#pragma</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>commands from a macro. 
<LI>There is no telling what the same<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#pragma</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>might mean in another compiler.</LI></OL>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">These two reasons applied to almost any application that might have been proposed for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#pragma</CODE>. It was basically a mistake to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#pragma</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for<EM>anything</EM>.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">The ISO C99 standard includes<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_Pragma</CODE>, which now allows pragmas to be generated from macros. In addition, a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#pragma GCC</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>namespace is now in use for GCC-specific pragmas. However, it has been found convenient to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__attribute__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to achieve a natural attachment of attributes to their corresponding declarations, whereas<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#pragma GCC</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is of use for constructs that do not naturally form part of the grammar. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Pragmas.html#Pragmas">Pragmas Accepted by GCC</A>.