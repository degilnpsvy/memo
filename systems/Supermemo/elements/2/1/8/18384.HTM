<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>3.17.28 MMIX Options</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-MMIX-Options-2000></A>These options are defined for the MMIX:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>-mlibfuncs</CODE></DT>
<DT><CODE>-mno-libfuncs</CODE></DT>
<DD><A name=index-mlibfuncs-2001></A><A name=index-mno-libfuncs-2002></A>Specify that intrinsic library functions are being compiled, passing all values in registers, no matter the size.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mepsilon</CODE></DT>
<DT><CODE>-mno-epsilon</CODE></DT>
<DD><A name=index-mepsilon-2003></A><A name=index-mno-epsilon-2004></A>Generate floating-point comparison instructions that compare with respect to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>rE</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>epsilon register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mabi=mmixware</CODE></DT>
<DT><CODE>-mabi=gnu</CODE></DT>
<DD><A name=index-mabi_003dmmixware-2005></A><A name=index-mabi_003dgnu-2006></A>Generate code that passes function parameters and return values that (in the called function) are seen as registers<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and up, as opposed to the GNU ABI which uses global registers<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$231</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and up.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mzero-extend</CODE></DT>
<DT><CODE>-mno-zero-extend</CODE></DT>
<DD><A name=index-mzero-extend-2007></A><A name=index-mno-zero-extend-2008></A>When reading data from memory in sizes shorter than 64 bits, use (do not use) zero-extending load instructions by default, rather than sign-extending ones.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mknuthdiv</CODE></DT>
<DT><CODE>-mno-knuthdiv</CODE></DT>
<DD><A name=index-mknuthdiv-2009></A><A name=index-mno-knuthdiv-2010></A>Make the result of a division yielding a remainder have the same sign as the divisor. With the default,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-knuthdiv</SPAN></SAMP>, the sign of the remainder follows the sign of the dividend. Both methods are arithmetically valid, the latter being almost exclusively used.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mtoplevel-symbols</CODE></DT>
<DT><CODE>-mno-toplevel-symbols</CODE></DT>
<DD><A name=index-mtoplevel-symbols-2011></A><A name=index-mno-toplevel-symbols-2012></A>Prepend (do not prepend) a &#8216;<SAMP><SPAN class=samp>:</SPAN></SAMP>&#8217; to all global symbols, so the assembly code can be used with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>PREFIX</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>assembly directive.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-melf</CODE></DT>
<DD><A name=index-melf-2013></A>Generate an executable in the ELF format, rather than the default &#8216;<SAMP><SPAN class=samp>mmo</SPAN></SAMP>&#8217; format used by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>mmix</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>simulator.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mbranch-predict</CODE></DT>
<DT><CODE>-mno-branch-predict</CODE></DT>
<DD><A name=index-mbranch-predict-2014></A><A name=index-mno-branch-predict-2015></A>Use (do not use) the probable-branch instructions, when static branch prediction indicates a probable branch.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mbase-addresses</CODE></DT>
<DT><CODE>-mno-base-addresses</CODE></DT>
<DD><A name=index-mbase-addresses-2016></A><A name=index-mno-base-addresses-2017></A>Generate (do not generate) code that uses<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>base addresses</EM>. Using a base address automatically generates a request (handled by the assembler and the linker) for a constant to be set up in a global register. The register is used for one or more base address requests within the range 0 to 255 from the value held in the register. The generally leads to short and fast code, but the number of different data items that can be addressed is limited. This means that a program that uses lots of static data may require<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-base-addresses</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msingle-exit</CODE></DT>
<DT><CODE>-mno-single-exit</CODE></DT>
<DD><A name=index-msingle-exit-2018></A><A name=index-mno-single-exit-2019></A>Force (do not force) generated code to have a single exit point in each function.</DD></DL>