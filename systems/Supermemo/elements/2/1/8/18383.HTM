<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>3.17.27 MIPS Options</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-MIPS-options-1873></A></P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>-EB</CODE></DT>
<DD><A name=index-EB-1874></A>Generate big-endian code.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-EL</CODE></DT>
<DD><A name=index-EL-1875></A>Generate little-endian code. This is the default for &#8216;<SAMP><SPAN class=samp>mips*el-*-*</SPAN></SAMP>&#8217; configurations.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-march=</CODE><VAR>arch</VAR></DT>
<DD><A name=index-march-1876></A>Generate code that runs on<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arch</VAR>, which can be the name of a generic MIPS ISA, or the name of a particular processor. The ISA names are: &#8216;<SAMP><SPAN class=samp>mips1</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>mips2</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>mips3</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>mips4</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>mips32</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>mips32r2</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>mips64</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>mips64r2</SPAN></SAMP>&#8217;. The processor names are: &#8216;<SAMP><SPAN class=samp>4kc</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>4km</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>4kp</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>4ksc</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>4kec</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>4kem</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>4kep</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>4ksd</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>5kc</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>5kf</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>20kc</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>24kc</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>24kf2_1</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>24kf1_1</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>24kec</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>24kef2_1</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>24kef1_1</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>34kc</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>34kf2_1</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>34kf1_1</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>34kn</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>74kc</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>74kf2_1</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>74kf1_1</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>74kf3_2</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>1004kc</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>1004kf2_1</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>1004kf1_1</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>loongson2e</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>loongson2f</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>loongson3a</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>m4k</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>m14k</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>m14kc</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>m14ke</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>m14kec</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>octeon</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>octeon+</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>octeon2</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>orion</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>r2000</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>r3000</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>r3900</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>r4000</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>r4400</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>r4600</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>r4650</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>r4700</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>r6000</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>r8000</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>rm7000</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>rm9000</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>r10000</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>r12000</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>r14000</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>r16000</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>sb1</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>sr71000</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>vr4100</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>vr4111</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>vr4120</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>vr4130</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>vr4300</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>vr5000</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>vr5400</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>vr5500</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>xlr</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>xlp</SPAN></SAMP>&#8217;. The special value &#8216;<SAMP><SPAN class=samp>from-abi</SPAN></SAMP>&#8217; selects the most compatible architecture for the selected ABI (that is, &#8216;<SAMP><SPAN class=samp>mips1</SPAN></SAMP>&#8217; for 32-bit ABIs and &#8216;<SAMP><SPAN class=samp>mips3</SPAN></SAMP>&#8217; for 64-bit ABIs).
<P>The native Linux/GNU toolchain also supports the value &#8216;<SAMP><SPAN class=samp>native</SPAN></SAMP>&#8217;, which selects the best architecture option for the host processor.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march=native</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>has no effect if GCC does not recognize the processor.</P>
<P>In processor names, a final &#8216;<SAMP><SPAN class=samp>000</SPAN></SAMP>&#8217; can be abbreviated as &#8216;<SAMP><SPAN class=samp>k</SPAN></SAMP>&#8217; (for example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march=r2k</SPAN></SAMP>). Prefixes are optional, and &#8216;<SAMP><SPAN class=samp>vr</SPAN></SAMP>&#8217; may be written &#8216;<SAMP><SPAN class=samp>r</SPAN></SAMP>&#8217;.</P>
<P>Names of the form &#8216;<SAMP><VAR>n</VAR><SPAN class=samp>f2_1</SPAN></SAMP>&#8217; refer to processors with FPUs clocked at half the rate of the core, names of the form &#8216;<SAMP><VAR>n</VAR><SPAN class=samp>f1_1</SPAN></SAMP>&#8217; refer to processors with FPUs clocked at the same rate as the core, and names of the form &#8216;<SAMP><VAR>n</VAR><SPAN class=samp>f3_2</SPAN></SAMP>&#8217; refer to processors with FPUs clocked a ratio of 3:2 with respect to the core. For compatibility reasons, &#8216;<SAMP><VAR>n</VAR><SPAN class=samp>f</SPAN></SAMP>&#8217; is accepted as a synonym for &#8216;<SAMP><VAR>n</VAR><SPAN class=samp>f2_1</SPAN></SAMP>&#8217; while &#8216;<SAMP><VAR>n</VAR><SPAN class=samp>x</SPAN></SAMP>&#8217; and &#8216;<SAMP><VAR>b</VAR><SPAN class=samp>fx</SPAN></SAMP>&#8217; are accepted as synonyms for &#8216;<SAMP><VAR>n</VAR><SPAN class=samp>f1_1</SPAN></SAMP>&#8217;.</P>
<P>GCC defines two macros based on the value of this option. The first is &#8216;<SAMP><SPAN class=samp>_MIPS_ARCH</SPAN></SAMP>&#8217;, which gives the name of target architecture, as a string. The second has the form &#8216;<SAMP><SPAN class=samp>_MIPS_ARCH_</SPAN><VAR>foo</VAR></SAMP>&#8217;, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>foo</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the capitalized value of &#8216;<SAMP><SPAN class=samp>_MIPS_ARCH</SPAN></SAMP>&#8217;. For example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march=r2000</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>sets &#8216;<SAMP><SPAN class=samp>_MIPS_ARCH</SPAN></SAMP>&#8217; to &#8216;<SAMP><SPAN class=samp>"r2000"</SPAN></SAMP>&#8217; and defines the macro &#8216;<SAMP><SPAN class=samp>_MIPS_ARCH_R2000</SPAN></SAMP>&#8217;.</P>
<P>Note that the &#8216;<SAMP><SPAN class=samp>_MIPS_ARCH</SPAN></SAMP>&#8217; macro uses the processor names given above. In other words, it has the full prefix and does not abbreviate &#8216;<SAMP><SPAN class=samp>000</SPAN></SAMP>&#8217; as &#8216;<SAMP><SPAN class=samp>k</SPAN></SAMP>&#8217;. In the case of &#8216;<SAMP><SPAN class=samp>from-abi</SPAN></SAMP>&#8217;, the macro names the resolved architecture (either &#8216;<SAMP><SPAN class=samp>"mips1"</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>"mips3"</SPAN></SAMP>&#8217;). It names the default architecture when no<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is given.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mtune=</CODE><VAR>arch</VAR></DT>
<DD><A name=index-mtune-1877></A>Optimize for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arch</VAR>. Among other things, this option controls the way instructions are scheduled, and the perceived cost of arithmetic operations. The list of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arch</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>values is the same as for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march</SPAN></SAMP>.
<P>When this option is not used, GCC optimizes for the processor specified by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march</SPAN></SAMP>. By using<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mtune</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>together, it is possible to generate code that runs on a family of processors, but optimize the code for one particular member of that family.</P>
<P><SAMP><SPAN class=option>-mtune</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>defines the macros &#8216;<SAMP><SPAN class=samp>_MIPS_TUNE</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>_MIPS_TUNE_</SPAN><VAR>foo</VAR></SAMP>&#8217;, which work in the same way as the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>ones described above.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mips1</CODE></DT>
<DD><A name=index-mips1-1878></A>Equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march=mips1</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mips2</CODE></DT>
<DD><A name=index-mips2-1879></A>Equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march=mips2</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mips3</CODE></DT>
<DD><A name=index-mips3-1880></A>Equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march=mips3</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mips4</CODE></DT>
<DD><A name=index-mips4-1881></A>Equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march=mips4</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mips32</CODE></DT>
<DD><A name=index-mips32-1882></A>Equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march=mips32</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mips32r2</CODE></DT>
<DD><A name=index-mips32r2-1883></A>Equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march=mips32r2</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mips64</CODE></DT>
<DD><A name=index-mips64-1884></A>Equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march=mips64</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mips64r2</CODE></DT>
<DD><A name=index-mips64r2-1885></A>Equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march=mips64r2</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mips16</CODE></DT>
<DT><CODE>-mno-mips16</CODE></DT>
<DD><A name=index-mips16-1886></A><A name=index-mno-mips16-1887></A>Generate (do not generate) MIPS16 code. If GCC is targeting a MIPS32 or MIPS64 architecture, it makes use of the MIPS16e ASE.
<P>MIPS16 code generation can also be controlled on a per-function basis by means of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mips16</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nomips16</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attributes. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Function-Attributes.html#Function-Attributes">Function Attributes</A>, for more information.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mflip-mips16</CODE></DT>
<DD><A name=index-mflip-mips16-1888></A>Generate MIPS16 code on alternating functions. This option is provided for regression testing of mixed MIPS16/non-MIPS16 code generation, and is not intended for ordinary use in compiling user code.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-minterlink-compressed</CODE><BR></DT>
<DT><CODE>-mno-interlink-compressed</CODE></DT>
<DD><A name=index-minterlink-compressed-1889></A><A name=index-mno-interlink-compressed-1890></A>Require (do not require) that code using the standard (uncompressed) MIPS ISA be link-compatible with MIPS16 and microMIPS code, and vice versa.
<P>For example, code using the standard ISA encoding cannot jump directly to MIPS16 or microMIPS code; it must either use a call or an indirect jump.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-minterlink-compressed</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>therefore disables direct jumps unless GCC knows that the target of the jump is not compressed.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-minterlink-mips16</CODE></DT>
<DT><CODE>-mno-interlink-mips16</CODE></DT>
<DD><A name=index-minterlink-mips16-1891></A><A name=index-mno-interlink-mips16-1892></A>Aliases of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-minterlink-compressed</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-interlink-compressed</SPAN></SAMP>. These options predate the microMIPS ASE and are retained for backwards compatibility.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mabi=32</CODE></DT>
<DT><CODE>-mabi=o64</CODE></DT>
<DT><CODE>-mabi=n32</CODE></DT>
<DT><CODE>-mabi=64</CODE></DT>
<DT><CODE>-mabi=eabi</CODE></DT>
<DD><A name=index-mabi_003d32-1893></A><A name=index-mabi_003do64-1894></A><A name=index-mabi_003dn32-1895></A><A name=index-mabi_003d64-1896></A><A name=index-mabi_003deabi-1897></A>Generate code for the given ABI.
<P>Note that the EABI has a 32-bit and a 64-bit variant. GCC normally generates 64-bit code when you select a 64-bit architecture, but you can use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mgp32</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to get 32-bit code instead.</P>
<P>For information about the O64 ABI, see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://gcc.gnu.org/projects/mipso64-abi.html">http://gcc.gnu.org/projects/mipso64-abi.html</A>.</P>
<P>GCC supports a variant of the o32 ABI in which floating-point registers are 64 rather than 32 bits wide. You can select this combination with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mabi=32</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mfp64</SPAN></SAMP>. This ABI relies on the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mthc1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mfhc1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions and is therefore only supported for MIPS32R2 processors.</P>
<P>The register assignments for arguments and return values remain the same, but each scalar value is passed in a single 64-bit register rather than a pair of 32-bit registers. For example, scalar floating-point values are returned in &#8216;<SAMP><SPAN class=samp>$f0</SPAN></SAMP>&#8217; only, not a &#8216;<SAMP><SPAN class=samp>$f0</SPAN></SAMP>&#8217;/&#8216;<SAMP><SPAN class=samp>$f1</SPAN></SAMP>&#8217; pair. The set of call-saved registers also remains the same, but all 64 bits are saved.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mabicalls</CODE></DT>
<DT><CODE>-mno-abicalls</CODE></DT>
<DD><A name=index-mabicalls-1898></A><A name=index-mno-abicalls-1899></A>Generate (do not generate) code that is suitable for SVR4-style dynamic objects.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mabicalls</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the default for SVR4-based systems.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mshared</CODE></DT>
<DT><CODE>-mno-shared</CODE></DT>
<DD>Generate (do not generate) code that is fully position-independent, and that can therefore be linked into shared libraries. This option only affects<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mabicalls</SPAN></SAMP>.
<P>All<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mabicalls</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>code has traditionally been position-independent, regardless of options like<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fPIC</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fpic</SPAN></SAMP>. However, as an extension, the GNU toolchain allows executables to use absolute accesses for locally-binding symbols. It can also use shorter GP initialization sequences and generate direct calls to locally-defined functions. This mode is selected by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-shared</SPAN></SAMP>.</P>
<P><SAMP><SPAN class=option>-mno-shared</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>depends on binutils 2.16 or higher and generates objects that can only be linked by the GNU linker. However, the option does not affect the ABI of the final executable; it only affects the ABI of relocatable objects. Using<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-shared</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>generally makes executables both smaller and quicker.</P>
<P><SAMP><SPAN class=option>-mshared</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the default.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mplt</CODE></DT>
<DT><CODE>-mno-plt</CODE></DT>
<DD><A name=index-mplt-1900></A><A name=index-mno-plt-1901></A>Assume (do not assume) that the static and dynamic linkers support PLTs and copy relocations. This option only affects<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-shared -mabicalls</SPAN></SAMP>. For the n64 ABI, this option has no effect without<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-msym32</SPAN></SAMP>.
<P>You can make<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mplt</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>the default by configuring GCC with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>--with-mips-plt</SPAN></SAMP>. The default is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-plt</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>otherwise.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mxgot</CODE></DT>
<DT><CODE>-mno-xgot</CODE></DT>
<DD><A name=index-mxgot-1902></A><A name=index-mno-xgot-1903></A>Lift (do not lift) the usual restrictions on the size of the global offset table.
<P>GCC normally uses a single instruction to load values from the GOT. While this is relatively efficient, it only works if the GOT is smaller than about 64k. Anything larger causes the linker to report an error such as:</P>
<P><A name=index-relocation-truncated-to-fit-_0028MIPS_0029-1904></A></P><PRE style="FONT-SIZE: smaller" class=smallexample>          relocation truncated to fit: R_MIPS_GOT16 foobar
</PRE>
<P>If this happens, you should recompile your code with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mxgot</SPAN></SAMP>. This works with very large GOTs, although the code is also less efficient, since it takes three instructions to fetch the value of a global symbol.</P>
<P>Note that some linkers can create multiple GOTs. If you have such a linker, you should only need to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mxgot</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>when a single object file accesses more than 64k's worth of GOT entries. Very few do.</P>
<P>These options have no effect unless GCC is generating position independent code.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mgp32</CODE></DT>
<DD><A name=index-mgp32-1905></A>Assume that general-purpose registers are 32 bits wide.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mgp64</CODE></DT>
<DD><A name=index-mgp64-1906></A>Assume that general-purpose registers are 64 bits wide.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mfp32</CODE></DT>
<DD><A name=index-mfp32-1907></A>Assume that floating-point registers are 32 bits wide.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mfp64</CODE></DT>
<DD><A name=index-mfp64-1908></A>Assume that floating-point registers are 64 bits wide.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mhard-float</CODE></DT>
<DD><A name=index-mhard-float-1909></A>Use floating-point coprocessor instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msoft-float</CODE></DT>
<DD><A name=index-msoft-float-1910></A>Do not use floating-point coprocessor instructions. Implement floating-point calculations using library calls instead.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mno-float</CODE></DT>
<DD><A name=index-mno-float-1911></A>Equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-msoft-float</SPAN></SAMP>, but additionally asserts that the program being compiled does not perform any floating-point operations. This option is presently supported only by some bare-metal MIPS configurations, where it may select a special set of libraries that lack all floating-point support (including, for example, the floating-point<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>printf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>formats). If code compiled with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-mno-float</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>accidentally contains floating-point operations, it is likely to suffer a link-time or run-time failure.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msingle-float</CODE></DT>
<DD><A name=index-msingle-float-1912></A>Assume that the floating-point coprocessor only supports single-precision operations.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mdouble-float</CODE></DT>
<DD><A name=index-mdouble-float-1913></A>Assume that the floating-point coprocessor supports double-precision operations. This is the default.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mabs=2008</CODE></DT>
<DT><CODE>-mabs=legacy</CODE></DT>
<DD><A name=index-mabs_003d2008-1914></A><A name=index-mabs_003dlegacy-1915></A>These options control the treatment of the special not-a-number (NaN) IEEE 754 floating-point data with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>abs.</CODE><I>fmt</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>neg.</CODE><I>fmt</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>machine instructions.
<P>By default or when the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mabs=legacy</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used the legacy treatment is selected. In this case these instructions are considered arithmetic and avoided where correct operation is required and the input operand might be a NaN. A longer sequence of instructions that manipulate the sign bit of floating-point datum manually is used instead unless the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ffinite-math-only</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option has also been specified.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mabs=2008</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option selects the IEEE 754-2008 treatment. In this case these instructions are considered non-arithmetic and therefore operating correctly in all cases, including in particular where the input operand is a NaN. These instructions are therefore always used for the respective operations.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mnan=2008</CODE></DT>
<DT><CODE>-mnan=legacy</CODE></DT>
<DD><A name=index-mnan_003d2008-1916></A><A name=index-mnan_003dlegacy-1917></A>These options control the encoding of the special not-a-number (NaN) IEEE 754 floating-point data.
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mnan=legacy</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option selects the legacy encoding. In this case quiet NaNs (qNaNs) are denoted by the first bit of their trailing significand field being 0, whereas signalling NaNs (sNaNs) are denoted by the first bit of their trailing significand field being 1.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mnan=2008</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option selects the IEEE 754-2008 encoding. In this case qNaNs are denoted by the first bit of their trailing significand field being 1, whereas sNaNs are denoted by the first bit of their trailing significand field being 0.</P>
<P>The default is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mnan=legacy</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>unless GCC has been configured with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>--with-nan=2008</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mllsc</CODE></DT>
<DT><CODE>-mno-llsc</CODE></DT>
<DD><A name=index-mllsc-1918></A><A name=index-mno-llsc-1919></A>Use (do not use) &#8216;<SAMP><SPAN class=samp>ll</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>sc</SPAN></SAMP>&#8217;, and &#8216;<SAMP><SPAN class=samp>sync</SPAN></SAMP>&#8217; instructions to implement atomic memory built-in functions. When neither option is specified, GCC uses the instructions if the target architecture supports them.
<P><SAMP><SPAN class=option>-mllsc</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is useful if the runtime environment can emulate the instructions and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-llsc</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be useful when compiling for nonstandard ISAs. You can make either option the default by configuring GCC with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>--with-llsc</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>--without-llsc</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>respectively.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>--with-llsc</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the default for some configurations; see the installation documentation for details.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mdsp</CODE></DT>
<DT><CODE>-mno-dsp</CODE></DT>
<DD><A name=index-mdsp-1920></A><A name=index-mno-dsp-1921></A>Use (do not use) revision 1 of the MIPS DSP ASE. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/MIPS-DSP-Built-in-Functions.html#MIPS-DSP-Built-in-Functions">MIPS DSP Built-in Functions</A>. This option defines the preprocessor macro &#8216;<SAMP><SPAN class=samp>__mips_dsp</SPAN></SAMP>&#8217;. It also defines &#8216;<SAMP><SPAN class=samp>__mips_dsp_rev</SPAN></SAMP>&#8217; to 1.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mdspr2</CODE></DT>
<DT><CODE>-mno-dspr2</CODE></DT>
<DD><A name=index-mdspr2-1922></A><A name=index-mno-dspr2-1923></A>Use (do not use) revision 2 of the MIPS DSP ASE. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/MIPS-DSP-Built-in-Functions.html#MIPS-DSP-Built-in-Functions">MIPS DSP Built-in Functions</A>. This option defines the preprocessor macros &#8216;<SAMP><SPAN class=samp>__mips_dsp</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>__mips_dspr2</SPAN></SAMP>&#8217;. It also defines &#8216;<SAMP><SPAN class=samp>__mips_dsp_rev</SPAN></SAMP>&#8217; to 2.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msmartmips</CODE></DT>
<DT><CODE>-mno-smartmips</CODE></DT>
<DD><A name=index-msmartmips-1924></A><A name=index-mno-smartmips-1925></A>Use (do not use) the MIPS SmartMIPS ASE.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mpaired-single</CODE></DT>
<DT><CODE>-mno-paired-single</CODE></DT>
<DD><A name=index-mpaired-single-1926></A><A name=index-mno-paired-single-1927></A>Use (do not use) paired-single floating-point instructions. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/MIPS-Paired-Single-Support.html#MIPS-Paired-Single-Support">MIPS Paired-Single Support</A>. This option requires hardware floating-point support to be enabled.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mdmx</CODE></DT>
<DT><CODE>-mno-mdmx</CODE></DT>
<DD><A name=index-mdmx-1928></A><A name=index-mno-mdmx-1929></A>Use (do not use) MIPS Digital Media Extension instructions. This option can only be used when generating 64-bit code and requires hardware floating-point support to be enabled.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mips3d</CODE></DT>
<DT><CODE>-mno-mips3d</CODE></DT>
<DD><A name=index-mips3d-1930></A><A name=index-mno-mips3d-1931></A>Use (do not use) the MIPS-3D ASE. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/MIPS-3D-Built-in-Functions.html#MIPS-3D-Built-in-Functions">MIPS-3D Built-in Functions</A>. The option<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mips3d</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>implies<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mpaired-single</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mmicromips</CODE></DT>
<DT><CODE>-mno-micromips</CODE></DT>
<DD><A name=index-mmicromips-1932></A><A name=index-mno-mmicromips-1933></A>Generate (do not generate) microMIPS code.
<P>MicroMIPS code generation can also be controlled on a per-function basis by means of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>micromips</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nomicromips</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attributes. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Function-Attributes.html#Function-Attributes">Function Attributes</A>, for more information.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mmt</CODE></DT>
<DT><CODE>-mno-mt</CODE></DT>
<DD><A name=index-mmt-1934></A><A name=index-mno-mt-1935></A>Use (do not use) MT Multithreading instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mmcu</CODE></DT>
<DT><CODE>-mno-mcu</CODE></DT>
<DD><A name=index-mmcu-1936></A><A name=index-mno-mcu-1937></A>Use (do not use) the MIPS MCU ASE instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-meva</CODE></DT>
<DT><CODE>-mno-eva</CODE></DT>
<DD><A name=index-meva-1938></A><A name=index-mno-eva-1939></A>Use (do not use) the MIPS Enhanced Virtual Addressing instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mvirt</CODE></DT>
<DT><CODE>-mno-virt</CODE></DT>
<DD><A name=index-mvirt-1940></A><A name=index-mno-virt-1941></A>Use (do not use) the MIPS Virtualization Application Specific instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mlong64</CODE></DT>
<DD><A name=index-mlong64-1942></A>Force<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>types to be 64 bits wide. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mlong32</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>for an explanation of the default and the way that the pointer size is determined.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mlong32</CODE></DT>
<DD><A name=index-mlong32-1943></A>Force<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int</CODE>, and pointer types to be 32 bits wide.
<P>The default size of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int</CODE>s,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long</CODE>s and pointers depends on the ABI. All the supported ABIs use 32-bit<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int</CODE>s. The n64 ABI uses 64-bit<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long</CODE>s, as does the 64-bit EABI; the others use 32-bit<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long</CODE>s. Pointers are the same size as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long</CODE>s, or the same size as integer registers, whichever is smaller.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-msym32</CODE></DT>
<DT><CODE>-mno-sym32</CODE></DT>
<DD><A name=index-msym32-1944></A><A name=index-mno-sym32-1945></A>Assume (do not assume) that all symbols have 32-bit values, regardless of the selected ABI. This option is useful in combination with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mabi=64</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-abicalls</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>because it allows GCC to generate shorter and faster references to symbolic addresses.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-G<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>num</VAR></DT>
<DD><A name=index-G-1946></A>Put definitions of externally-visible data in a small data section if that data is no bigger than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>num</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes. GCC can then generate more efficient accesses to the data; see<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mgpopt</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>for details.
<P>The default<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-G</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option depends on the configuration.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mlocal-sdata</CODE></DT>
<DT><CODE>-mno-local-sdata</CODE></DT>
<DD><A name=index-mlocal-sdata-1947></A><A name=index-mno-local-sdata-1948></A>Extend (do not extend) the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-G</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>behavior to local data too, such as to static variables in C.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mlocal-sdata</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the default for all configurations.
<P>If the linker complains that an application is using too much small data, you might want to try rebuilding the less performance-critical parts with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-local-sdata</SPAN></SAMP>. You might also want to build large libraries with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-local-sdata</SPAN></SAMP>, so that the libraries leave more room for the main program.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mextern-sdata</CODE></DT>
<DT><CODE>-mno-extern-sdata</CODE></DT>
<DD><A name=index-mextern-sdata-1949></A><A name=index-mno-extern-sdata-1950></A>Assume (do not assume) that externally-defined data is in a small data section if the size of that data is within the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-G</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>limit.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mextern-sdata</SPAN></SAMP>is the default for all configurations.
<P>If you compile a module<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>Mod</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mextern-sdata</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-G<SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN><VAR>num</VAR></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mgpopt</SPAN></SAMP>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>Mod</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>references a variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>Var</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>that is no bigger than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>num</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes, you must make sure that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>Var</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is placed in a small data section. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>Var</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is defined by another module, you must either compile that module with a high-enough<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-G</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>setting or attach a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>section</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>Var</VAR>'s definition. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>Var</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is common, you must link the application with a high-enough<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-G</SPAN></SAMP>setting.</P>
<P>The easiest way of satisfying these restrictions is to compile and link every module with the same<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-G</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option. However, you may wish to build a library that supports several different small data limits. You can do this by compiling the library with the highest supported<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-G</SPAN></SAMP>setting and additionally using<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-extern-sdata</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to stop the library from making assumptions about externally-defined data.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mgpopt</CODE></DT>
<DT><CODE>-mno-gpopt</CODE></DT>
<DD><A name=index-mgpopt-1951></A><A name=index-mno-gpopt-1952></A>Use (do not use) GP-relative accesses for symbols that are known to be in a small data section; see<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-G</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mlocal-sdata</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mextern-sdata</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mgpopt</SPAN></SAMP>is the default for all configurations.
<P><SAMP><SPAN class=option>-mno-gpopt</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is useful for cases where the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$gp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>register might not hold the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_gp</CODE>. For example, if the code is part of a library that might be used in a boot monitor, programs that call boot monitor routines pass an unknown value in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$gp</CODE>. (In such situations, the boot monitor itself is usually compiled with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-G0</SPAN></SAMP>.)</P>
<P><SAMP><SPAN class=option>-mno-gpopt</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>implies<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-local-sdata</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-extern-sdata</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-membedded-data</CODE></DT>
<DT><CODE>-mno-embedded-data</CODE></DT>
<DD><A name=index-membedded-data-1953></A><A name=index-mno-embedded-data-1954></A>Allocate variables to the read-only data section first if possible, then next in the small data section if possible, otherwise in data. This gives slightly slower code than the default, but reduces the amount of RAM required when executing, and thus may be preferred for some embedded systems.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-muninit-const-in-rodata</CODE></DT>
<DT><CODE>-mno-uninit-const-in-rodata</CODE></DT>
<DD><A name=index-muninit-const-in-rodata-1955></A><A name=index-mno-uninit-const-in-rodata-1956></A>Put uninitialized<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>const</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>variables in the read-only data section. This option is only meaningful in conjunction with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-membedded-data</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mcode-readable=</CODE><VAR>setting</VAR></DT>
<DD><A name=index-mcode-readable-1957></A>Specify whether GCC may generate code that reads from executable sections. There are three possible settings:
<DL>
<DT><CODE>-mcode-readable=yes</CODE></DT>
<DD>Instructions may freely access executable sections. This is the default setting.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mcode-readable=pcrel</CODE></DT>
<DD>MIPS16 PC-relative load instructions can access executable sections, but other instructions must not do so. This option is useful on 4KSc and 4KSd processors when the code TLBs have the Read Inhibit bit set. It is also useful on processors that can be configured to have a dual instruction/data SRAM interface and that, like the M4K, automatically redirect PC-relative loads to the instruction RAM.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mcode-readable=no</CODE></DT>
<DD>Instructions must not access executable sections. This option can be useful on targets that are configured to have a dual instruction/data SRAM interface but that (unlike the M4K) do not automatically redirect PC-relative loads to the instruction RAM.</DD></DL><BR></DD>
<DT><CODE>-msplit-addresses</CODE></DT>
<DT><CODE>-mno-split-addresses</CODE></DT>
<DD><A name=index-msplit-addresses-1958></A><A name=index-mno-split-addresses-1959></A>Enable (disable) use of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%hi()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%lo()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>assembler relocation operators. This option has been superseded by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mexplicit-relocs</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>but is retained for backwards compatibility.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mexplicit-relocs</CODE></DT>
<DT><CODE>-mno-explicit-relocs</CODE></DT>
<DD><A name=index-mexplicit-relocs-1960></A><A name=index-mno-explicit-relocs-1961></A>Use (do not use) assembler relocation operators when dealing with symbolic addresses. The alternative, selected by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-explicit-relocs</SPAN></SAMP>, is to use assembler macros instead.
<P><SAMP><SPAN class=option>-mexplicit-relocs</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the default if GCC was configured to use an assembler that supports relocation operators.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mcheck-zero-division</CODE></DT>
<DT><CODE>-mno-check-zero-division</CODE></DT>
<DD><A name=index-mcheck-zero-division-1962></A><A name=index-mno-check-zero-division-1963></A>Trap (do not trap) on integer division by zero.
<P>The default is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mcheck-zero-division</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mdivide-traps</CODE></DT>
<DT><CODE>-mdivide-breaks</CODE></DT>
<DD><A name=index-mdivide-traps-1964></A><A name=index-mdivide-breaks-1965></A>MIPS systems check for division by zero by generating either a conditional trap or a break instruction. Using traps results in smaller code, but is only supported on MIPS II and later. Also, some versions of the Linux kernel have a bug that prevents trap from generating the proper signal (<CODE>SIGFPE</CODE>). Use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mdivide-traps</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to allow conditional traps on architectures that support them and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mdivide-breaks</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to force the use of breaks.
<P>The default is usually<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mdivide-traps</SPAN></SAMP>, but this can be overridden at configure time using<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>--with-divide=breaks</SPAN></SAMP>. Divide-by-zero checks can be completely disabled using<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-check-zero-division</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mmemcpy</CODE></DT>
<DT><CODE>-mno-memcpy</CODE></DT>
<DD><A name=index-mmemcpy-1966></A><A name=index-mno-memcpy-1967></A>Force (do not force) the use of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>memcpy()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for non-trivial block moves. The default is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-memcpy</SPAN></SAMP>, which allows GCC to inline most constant-sized copies.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mlong-calls</CODE></DT>
<DT><CODE>-mno-long-calls</CODE></DT>
<DD><A name=index-mlong-calls-1968></A><A name=index-mno-long-calls-1969></A>Disable (do not disable) use of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>jal</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction. Calling functions using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>jal</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is more efficient but requires the caller and callee to be in the same 256 megabyte segment.
<P>This option has no effect on abicalls code. The default is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-long-calls</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mmad</CODE></DT>
<DT><CODE>-mno-mad</CODE></DT>
<DD><A name=index-mmad-1970></A><A name=index-mno-mad-1971></A>Enable (disable) use of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mad</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>madu</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mul</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions, as provided by the R4650 ISA.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mimadd</CODE></DT>
<DT><CODE>-mno-imadd</CODE></DT>
<DD><A name=index-mimadd-1972></A><A name=index-mno-imadd-1973></A>Enable (disable) use of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>madd</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>msub</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>integer instructions. The default is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mimadd</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>on architectures that support<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>madd</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>msub</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>except for the 74k architecture where it was found to generate slower code.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mfused-madd</CODE></DT>
<DT><CODE>-mno-fused-madd</CODE></DT>
<DD><A name=index-mfused-madd-1974></A><A name=index-mno-fused-madd-1975></A>Enable (disable) use of the floating-point multiply-accumulate instructions, when they are available. The default is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mfused-madd</SPAN></SAMP>.
<P>On the R8000 CPU when multiply-accumulate instructions are used, the intermediate product is calculated to infinite precision and is not subject to the FCSR Flush to Zero bit. This may be undesirable in some circumstances. On other processors the result is numerically identical to the equivalent computation using separate multiply, add, subtract and negate instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-nocpp</CODE></DT>
<DD><A name=index-nocpp-1976></A>Tell the MIPS assembler to not run its preprocessor over user assembler files (with a &#8216;<SAMP><SPAN class=samp>.s</SPAN></SAMP>&#8217; suffix) when assembling them.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mfix-24k</CODE><BR></DT>
<DT><CODE>-mno-fix-24k</CODE></DT>
<DD><A name=index-mfix-24k-1977></A><A name=index-mno-fix-24k-1978></A>Work around the 24K E48 (lost data on stores during refill) errata. The workarounds are implemented by the assembler rather than by GCC.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mfix-r4000</CODE></DT>
<DT><CODE>-mno-fix-r4000</CODE></DT>
<DD><A name=index-mfix-r4000-1979></A><A name=index-mno-fix-r4000-1980></A>Work around certain R4000 CPU errata:
<UL>
<LI>A double-word or a variable shift may give an incorrect result if executed immediately after starting an integer division.</LI>
<LI>A double-word or a variable shift may give an incorrect result if executed while an integer multiplication is in progress.</LI>
<LI>An integer division may give an incorrect result if started in a delay slot of a taken branch or a jump.</LI></UL><BR></DD>
<DT><CODE>-mfix-r4400</CODE></DT>
<DT><CODE>-mno-fix-r4400</CODE></DT>
<DD><A name=index-mfix-r4400-1981></A><A name=index-mno-fix-r4400-1982></A>Work around certain R4400 CPU errata:
<UL>
<LI>A double-word or a variable shift may give an incorrect result if executed immediately after starting an integer division.</LI></UL><BR></DD>
<DT><CODE>-mfix-r10000</CODE></DT>
<DT><CODE>-mno-fix-r10000</CODE></DT>
<DD><A name=index-mfix-r10000-1983></A><A name=index-mno-fix-r10000-1984></A>Work around certain R10000 errata:
<UL>
<LI><CODE>ll</CODE>/<CODE>sc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>sequences may not behave atomically on revisions prior to 3.0. They may deadlock on revisions 2.6 and earlier.</LI></UL>
<P>This option can only be used if the target architecture supports branch-likely instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mfix-r10000</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the default when<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march=r10000</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used;<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-fix-r10000</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the default otherwise.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mfix-rm7000</CODE></DT>
<DT><CODE>-mno-fix-rm7000</CODE></DT>
<DD><A name=index-mfix-rm7000-1985></A>Work around the RM7000<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dmult</CODE>/<CODE>dmultu</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>errata. The workarounds are implemented by the assembler rather than by GCC.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mfix-vr4120</CODE></DT>
<DT><CODE>-mno-fix-vr4120</CODE></DT>
<DD><A name=index-mfix-vr4120-1986></A>Work around certain VR4120 errata:
<UL>
<LI><CODE>dmultu</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not always produce the correct result.</LI>
<LI><CODE>div</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ddiv</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>do not always produce the correct result if one of the operands is negative.</LI></UL>The workarounds for the division errata rely on special functions in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libgcc.a</SPAN></SAMP>. At present, these functions are only provided by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mips64vr*-elf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>configurations.
<P>Other VR4120 errata require a NOP to be inserted between certain pairs of instructions. These errata are handled by the assembler, not by GCC itself.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mfix-vr4130</CODE></DT>
<DD><A name=index-mfix-vr4130-1987></A>Work around the VR4130<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mflo</CODE>/<CODE>mfhi</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>errata. The workarounds are implemented by the assembler rather than by GCC, although GCC avoids using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mflo</CODE>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mfhi</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the VR4130<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>macc</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>macchi</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dmacc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dmacchi</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions are available instead.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mfix-sb1</CODE></DT>
<DT><CODE>-mno-fix-sb1</CODE></DT>
<DD><A name=index-mfix-sb1-1988></A>Work around certain SB-1 CPU core errata. (This flag currently works around the SB-1 revision 2 &#8220;F1&#8221; and &#8220;F2&#8221; floating-point errata.)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mr10k-cache-barrier=</CODE><VAR>setting</VAR></DT>
<DD><A name=index-mr10k-cache-barrier-1989></A>Specify whether GCC should insert cache barriers to avoid the side-effects of speculation on R10K processors.
<P>In common with many processors, the R10K tries to predict the outcome of a conditional branch and speculatively executes instructions from the &#8220;taken&#8221; branch. It later aborts these instructions if the predicted outcome is wrong. However, on the R10K, even aborted instructions can have side effects.</P>
<P>This problem only affects kernel stores and, depending on the system, kernel loads. As an example, a speculatively-executed store may load the target memory into cache and mark the cache line as dirty, even if the store itself is later aborted. If a DMA operation writes to the same area of memory before the &#8220;dirty&#8221; line is flushed, the cached data overwrites the DMA-ed data. See the R10K processor manual for a full description, including other potential problems.</P>
<P>One workaround is to insert cache barrier instructions before every memory access that might be speculatively executed and that might have side effects even if aborted.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mr10k-cache-barrier=</SPAN><VAR>setting</VAR></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>controls GCC's implementation of this workaround. It assumes that aborted accesses to any byte in the following regions does not have side effects:</P>
<OL type=1>
<LI>the memory occupied by the current function's stack frame;</LI>
<LI>the memory occupied by an incoming stack argument;</LI>
<LI>the memory occupied by an object with a link-time-constant address.</LI></OL>
<P>It is the kernel's responsibility to ensure that speculative accesses to these regions are indeed safe.</P>
<P>If the input program contains a function declaration such as:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          void foo (void);
</PRE>
<P>then the implementation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>foo</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>must allow<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>j foo</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>jal foo</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to be executed speculatively. GCC honors this restriction for functions it compiles itself. It expects non-GCC functions (such as hand-written assembly code) to do the same.</P>
<P>The option has three forms:</P>
<DL>
<DT><CODE>-mr10k-cache-barrier=load-store</CODE></DT>
<DD>Insert a cache barrier before a load or store that might be speculatively executed and that might have side effects even if aborted.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mr10k-cache-barrier=store</CODE></DT>
<DD>Insert a cache barrier before a store that might be speculatively executed and that might have side effects even if aborted.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mr10k-cache-barrier=none</CODE></DT>
<DD>Disable the insertion of cache barriers. This is the default setting.</DD></DL><BR></DD>
<DT><CODE>-mflush-func=</CODE><VAR>func</VAR></DT>
<DT><CODE>-mno-flush-func</CODE></DT>
<DD><A name=index-mflush-func-1990></A>Specifies the function to call to flush the I and D caches, or to not call any such function. If called, the function must take the same arguments as the common<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_flush_func()</CODE>, that is, the address of the memory range for which the cache is being flushed, the size of the memory range, and the number 3 (to flush both caches). The default depends on the target GCC was configured for, but commonly is either &#8216;<SAMP><SPAN class=samp>_flush_func</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>__cpu_flush</SPAN></SAMP>&#8217;.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>mbranch-cost=</CODE><VAR>num</VAR></DT>
<DD><A name=index-mbranch-cost-1991></A>Set the cost of branches to roughly<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>num</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8220;simple&#8221; instructions. This cost is only a heuristic and is not guaranteed to produce consistent results across releases. A zero cost redundantly selects the default, which is based on the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mtune</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>setting.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mbranch-likely</CODE></DT>
<DT><CODE>-mno-branch-likely</CODE></DT>
<DD><A name=index-mbranch-likely-1992></A><A name=index-mno-branch-likely-1993></A>Enable or disable use of Branch Likely instructions, regardless of the default for the selected architecture. By default, Branch Likely instructions may be generated if they are supported by the selected architecture. An exception is for the MIPS32 and MIPS64 architectures and processors that implement those architectures; for those, Branch Likely instructions are not be generated by default because the MIPS32 and MIPS64 architectures specifically deprecate their use.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mfp-exceptions</CODE></DT>
<DT><CODE>-mno-fp-exceptions</CODE></DT>
<DD><A name=index-mfp-exceptions-1994></A>Specifies whether FP exceptions are enabled. This affects how FP instructions are scheduled for some processors. The default is that FP exceptions are enabled.
<P>For instance, on the SB-1, if FP exceptions are disabled, and we are emitting 64-bit code, then we can use both FP pipes. Otherwise, we can only use one FP pipe.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mvr4130-align</CODE></DT>
<DT><CODE>-mno-vr4130-align</CODE></DT>
<DD><A name=index-mvr4130-align-1995></A>The VR4130 pipeline is two-way superscalar, but can only issue two instructions together if the first one is 8-byte aligned. When this option is enabled, GCC aligns pairs of instructions that it thinks should execute in parallel.
<P>This option only has an effect when optimizing for the VR4130. It normally makes code faster, but at the expense of making it bigger. It is enabled by default at optimization level<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-O3</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-msynci</CODE></DT>
<DT><CODE>-mno-synci</CODE></DT>
<DD><A name=index-msynci-1996></A>Enable (disable) generation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>synci</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions on architectures that support it. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>synci</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions (if enabled) are generated when<CODE>__builtin___clear_cache()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is compiled.
<P>This option defaults to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-mno-synci</CODE>, but the default can be overridden by configuring with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>--with-synci</CODE>.</P>
<P>When compiling code for single processor systems, it is generally safe to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>synci</CODE>. However, on many multi-core (SMP) systems, it does not invalidate the instruction caches on all cores and may lead to undefined behavior.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mrelax-pic-calls</CODE></DT>
<DT><CODE>-mno-relax-pic-calls</CODE></DT>
<DD><A name=index-mrelax-pic-calls-1997></A>Try to turn PIC calls that are normally dispatched via register<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$25</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>into direct calls. This is only possible if the linker can resolve the destination at link-time and if the destination is within range for a direct call.
<P><SAMP><SPAN class=option>-mrelax-pic-calls</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the default if GCC was configured to use an assembler and a linker that support the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.reloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>assembly directive and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-mexplicit-relocs</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is in effect. With<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-mno-explicit-relocs</CODE>, this optimization can be performed by the assembler and the linker alone without help from the compiler.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mmcount-ra-address</CODE></DT>
<DT><CODE>-mno-mcount-ra-address</CODE></DT>
<DD><A name=index-mmcount-ra-address-1998></A><A name=index-mno-mcount-ra-address-1999></A>Emit (do not emit) code that allows<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_mcount</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to modify the calling function's return address. When enabled, this option extends the usual<CODE>_mcount</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>interface with a new<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ra-address</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>parameter, which has type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>intptr_t *</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and is passed in register<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$12</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_mcount</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can then modify the return address by doing both of the following:
<UL>
<LI>Returning the new address in register<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$31</CODE>.</LI>
<LI>Storing the new address in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*</CODE><VAR>ra-address</VAR>, if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ra-address</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is nonnull.</LI></UL>
<P>The default is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-mcount-ra-address</SPAN></SAMP>.</P></DD></DL>