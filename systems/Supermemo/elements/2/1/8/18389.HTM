<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>3.17.33 Nios II Options</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-Nios-II-options-2071></A><A name=index-Altera-Nios-II-options-2072></A>These are the options defined for the Altera Nios II processor.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>-G<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>num</VAR></DT>
<DD><A name=index-G-2073></A><A name=index-smaller-data-references-2074></A>Put global and static objects less than or equal to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>num</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes into the small data or BSS sections instead of the normal data or BSS sections. The default value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>num</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 8.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mgpopt</CODE></DT>
<DT><CODE>-mno-gpopt</CODE></DT>
<DD><A name=index-mgpopt-2075></A><A name=index-mno-gpopt-2076></A>Generate (do not generate) GP-relative accesses for objects in the small data or BSS sections. The default is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mgpopt</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>except when<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fpic</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fPIC</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified to generate position-independent code. Note that the Nios II ABI does not permit GP-relative accesses from shared libraries.
<P>You may need to specify<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-gpopt</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>explicitly when building programs that include large amounts of small data, including large GOT data sections. In this case, the 16-bit offset for GP-relative addressing may not be large enough to allow access to the entire small data section.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mel</CODE></DT>
<DT><CODE>-meb</CODE></DT>
<DD><A name=index-mel-2077></A><A name=index-meb-2078></A>Generate little-endian (default) or big-endian (experimental) code, respectively.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mbypass-cache</CODE></DT>
<DT><CODE>-mno-bypass-cache</CODE></DT>
<DD><A name=index-mno-bypass-cache-2079></A><A name=index-mbypass-cache-2080></A>Force all load and store instructions to always bypass cache by using I/O variants of the instructions. The default is not to bypass the cache.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mno-cache-volatile</CODE></DT>
<DT><CODE>-mcache-volatile</CODE></DT>
<DD><A name=index-mcache-volatile-2081></A><A name=index-mno-cache-volatile-2082></A>Volatile memory access bypass the cache using the I/O variants of the load and store instructions. The default is not to bypass the cache.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mno-fast-sw-div</CODE></DT>
<DT><CODE>-mfast-sw-div</CODE></DT>
<DD><A name=index-mno-fast-sw-div-2083></A><A name=index-mfast-sw-div-2084></A>Do not use table-based fast divide for small numbers. The default is to use the fast divide at<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-O3</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and above.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mno-hw-mul</CODE></DT>
<DT><CODE>-mhw-mul</CODE></DT>
<DT><CODE>-mno-hw-mulx</CODE></DT>
<DT><CODE>-mhw-mulx</CODE></DT>
<DT><CODE>-mno-hw-div</CODE></DT>
<DT><CODE>-mhw-div</CODE></DT>
<DD><A name=index-mno-hw-mul-2085></A><A name=index-mhw-mul-2086></A><A name=index-mno-hw-mulx-2087></A><A name=index-mhw-mulx-2088></A><A name=index-mno-hw-div-2089></A><A name=index-mhw-div-2090></A>Enable or disable emitting<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mul</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mulx</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>div</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>family of instructions by the compiler. The default is to emit<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mul</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and not emit<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>div</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mulx</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mcustom-</CODE><VAR>insn</VAR><CODE>=</CODE><VAR>N</VAR></DT>
<DT><CODE>-mno-custom-</CODE><VAR>insn</VAR></DT>
<DD><A name=index-mcustom-_0040var_007binsn_007d-2091></A><A name=index-mno-custom-_0040var_007binsn_007d-2092></A>Each<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mcustom-</SPAN><VAR>insn</VAR><SPAN class=option>=</SPAN><VAR>N</VAR></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option enables use of a custom instruction with encoding<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>N</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>when generating code that uses<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>insn</VAR>. For example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-mcustom-fadds=253</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>generates custom instruction 253 for single-precision floating-point add operations instead of the default behavior of using a library call.
<P>The following values of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>insn</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are supported. Except as otherwise noted, floating-point operations are expected to be implemented with normal IEEE 754 semantics and correspond directly to the C operators or the equivalent GCC built-in functions (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Other-Builtins.html#Other-Builtins">Other Builtins</A>).</P>
<P>Single-precision floating point:</P>
<DL>
<DT>&#8216;<SAMP><SPAN class=samp>fadds</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>fsubs</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>fdivs</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>fmuls</SPAN></SAMP>&#8217;</DT>
<DD>Binary arithmetic operations.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>fnegs</SPAN></SAMP>&#8217;</DT>
<DD>Unary negation.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>fabss</SPAN></SAMP>&#8217;</DT>
<DD>Unary absolute value.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>fcmpeqs</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>fcmpges</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>fcmpgts</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>fcmples</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>fcmplts</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>fcmpnes</SPAN></SAMP>&#8217;</DT>
<DD>Comparison operations.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>fmins</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>fmaxs</SPAN></SAMP>&#8217;</DT>
<DD>Floating-point minimum and maximum. These instructions are only generated if<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ffinite-math-only</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>fsqrts</SPAN></SAMP>&#8217;</DT>
<DD>Unary square root operation.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>fcoss</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>fsins</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>ftans</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>fatans</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>fexps</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>flogs</SPAN></SAMP>&#8217;</DT>
<DD>Floating-point trigonometric and exponential functions. These instructions are only generated if<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-funsafe-math-optimizations</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is also specified.</DD></DL>
<P>Double-precision floating point:</P>
<DL>
<DT>&#8216;<SAMP><SPAN class=samp>faddd</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>fsubd</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>fdivd</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>fmuld</SPAN></SAMP>&#8217;</DT>
<DD>Binary arithmetic operations.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>fnegd</SPAN></SAMP>&#8217;</DT>
<DD>Unary negation.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>fabsd</SPAN></SAMP>&#8217;</DT>
<DD>Unary absolute value.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>fcmpeqd</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>fcmpged</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>fcmpgtd</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>fcmpled</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>fcmpltd</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>fcmpned</SPAN></SAMP>&#8217;</DT>
<DD>Comparison operations.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>fmind</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>fmaxd</SPAN></SAMP>&#8217;</DT>
<DD>Double-precision minimum and maximum. These instructions are only generated if<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ffinite-math-only</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>fsqrtd</SPAN></SAMP>&#8217;</DT>
<DD>Unary square root operation.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>fcosd</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>fsind</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>ftand</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>fatand</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>fexpd</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>flogd</SPAN></SAMP>&#8217;</DT>
<DD>Double-precision trigonometric and exponential functions. These instructions are only generated if<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-funsafe-math-optimizations</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is also specified.</DD></DL>
<P>Conversions:</P>
<DL>
<DT>&#8216;<SAMP><SPAN class=samp>fextsd</SPAN></SAMP>&#8217;</DT>
<DD>Conversion from single precision to double precision.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>ftruncds</SPAN></SAMP>&#8217;</DT>
<DD>Conversion from double precision to single precision.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>fixsi</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>fixsu</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>fixdi</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>fixdu</SPAN></SAMP>&#8217;</DT>
<DD>Conversion from floating point to signed or unsigned integer types, with truncation towards zero.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>floatis</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>floatus</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>floatid</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>floatud</SPAN></SAMP>&#8217;</DT>
<DD>Conversion from signed or unsigned integer types to floating-point types.</DD></DL>
<P>In addition, all of the following transfer instructions for internal registers X and Y must be provided to use any of the double-precision floating-point instructions. Custom instructions taking two double-precision source operands expect the first operand in the 64-bit register X. The other operand (or only operand of a unary operation) is given to the custom arithmetic instruction with the least significant half in source register<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>src1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the most significant half in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>src2</VAR>. A custom instruction that returns a double-precision result returns the most significant 32 bits in the destination register and the other half in 32-bit register Y. GCC automatically generates the necessary code sequences to write register X and/or read register Y when double-precision floating-point instructions are used.</P>
<DL>
<DT>&#8216;<SAMP><SPAN class=samp>fwrx</SPAN></SAMP>&#8217;</DT>
<DD>Write<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>src1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>into the least significant half of X and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>src2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>into the most significant half of X.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>fwry</SPAN></SAMP>&#8217;</DT>
<DD>Write<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>src1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>into Y.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>frdxhi</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>frdxlo</SPAN></SAMP>&#8217;</DT>
<DD>Read the most or least (respectively) significant half of X and store it in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dest</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>frdy</SPAN></SAMP>&#8217;</DT>
<DD>Read the value of Y and store it into<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dest</VAR>.</DD></DL>
<P>Note that you can gain more local control over generation of Nios II custom instructions by using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>target("custom-</CODE><VAR>insn</VAR><CODE>=</CODE><VAR>N</VAR><CODE>")</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>target("no-custom-</CODE><VAR>insn</VAR><CODE>")</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function attributes (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Function-Attributes.html#Function-Attributes">Function Attributes</A>) or pragmas (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Function-Specific-Option-Pragmas.html#Function-Specific-Option-Pragmas">Function Specific Option Pragmas</A>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mcustom-fpu-cfg=</CODE><VAR>name</VAR></DT>
<DD><A name=index-mcustom-fpu-cfg-2093></A>This option enables a predefined, named set of custom instruction encodings (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mcustom-</SPAN><VAR>insn</VAR></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>above). Currently, the following sets are defined:
<P><SAMP><SPAN class=option>-mcustom-fpu-cfg=60-1</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is equivalent to:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          -mcustom-fmuls=252 
          -mcustom-fadds=253 
          -mcustom-fsubs=254 
          -fsingle-precision-constant
</PRE>
<P><SAMP><SPAN class=option>-mcustom-fpu-cfg=60-2</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is equivalent to:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          -mcustom-fmuls=252 
          -mcustom-fadds=253 
          -mcustom-fsubs=254 
          -mcustom-fdivs=255 
          -fsingle-precision-constant
</PRE>
<P><SAMP><SPAN class=option>-mcustom-fpu-cfg=72-3</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is equivalent to:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          -mcustom-floatus=243 
          -mcustom-fixsi=244 
          -mcustom-floatis=245 
          -mcustom-fcmpgts=246 
          -mcustom-fcmples=249 
          -mcustom-fcmpeqs=250 
          -mcustom-fcmpnes=251 
          -mcustom-fmuls=252 
          -mcustom-fadds=253 
          -mcustom-fsubs=254 
          -mcustom-fdivs=255 
          -fsingle-precision-constant
</PRE>
<P>Custom instruction assignments given by individual<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mcustom-</SPAN><VAR>insn</VAR><SPAN class=option>=</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options override those given by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mcustom-fpu-cfg=</SPAN></SAMP>, regardless of the order of the options on the command line.</P>
<P>Note that you can gain more local control over selection of a FPU configuration by using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>target("custom-fpu-cfg=</CODE><VAR>name</VAR><CODE>")</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function attribute (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Function-Attributes.html#Function-Attributes">Function Attributes</A>) or pragma (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Function-Specific-Option-Pragmas.html#Function-Specific-Option-Pragmas">Function Specific Option Pragmas</A>).</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">These additional &#8216;<SAMP><SPAN class=samp>-m</SPAN></SAMP>&#8217; options are available for the Altera Nios II ELF (bare-metal) target:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>-mhal</CODE></DT>
<DD><A name=index-mhal-2094></A>Link with HAL BSP. This suppresses linking with the GCC-provided C runtime startup and termination code, and is typically used in conjunction with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-msys-crt0=</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to specify the location of the alternate startup code provided by the HAL BSP.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msmallc</CODE></DT>
<DD><A name=index-msmallc-2095></A>Link with a limited version of the C library,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-lsmallc</SPAN></SAMP>, rather than Newlib.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msys-crt0=</CODE><VAR>startfile</VAR></DT>
<DD><A name=index-msys-crt0-2096></A><VAR>startfile</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the file name of the startfile (crt0) to use when linking. This option is only useful in conjunction with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mhal</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msys-lib=</CODE><VAR>systemlib</VAR></DT>
<DD><A name=index-msys-lib-2097></A><VAR>systemlib</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the library name of the library that provides low-level system calls required by the C library, e.g.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>read</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>write</CODE>. This option is typically used to link with a library provided by a HAL BSP.</DD></DL>