<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>3.17.31 MSP430 Options</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-MSP430-Options-2039></A>These options are defined for the MSP430:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>-masm-hex</CODE></DT>
<DD><A name=index-masm-hex-2040></A>Force assembly output to always use hex constants. Normally such constants are signed decimals, but this option is available for testsuite and/or aesthetic purposes.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mmcu=</CODE></DT>
<DD><A name=index-mmcu_003d-2041></A>Select the MCU to target. This is used to create a C preprocessor symbol based upon the MCU name, converted to upper case and pre- and post- fixed with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__</CODE>. This in turn will be used by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>msp430.h</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>header file to select an MCU specific supplimentary header file.
<P>The option also sets the ISA to use. If the MCU name is one that is known to only support the 430 ISA then that is selected, otherwise the 430X ISA is selected. A generic MCU name of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>msp430</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can also be used to select the 430 ISA. Similarly the generic<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>msp430x</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>MCU name will select the 430X ISA.</P>
<P>In addition an MCU specific linker script will be added to the linker command line. The script's name is the name of the MCU with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.ld</CODE>appended. Thus specifying<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mmcu=xxx</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>on the gcc command line will define the C preprocessor symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__XXX__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and cause the linker to search for a script called<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>xxx.ld</SPAN></SAMP>.</P>
<P>This option is also passed on to the assembler.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mcpu=</CODE></DT>
<DD><A name=index-g_t-mcpu_003d-2042></A>Specifies the ISA to use. Accepted values are<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>msp430</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>msp430x</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>msp430xv2</CODE>. This option is deprecated. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mmcu=</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option should be used to select the ISA.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msim</CODE></DT>
<DD><A name=index-msim-2043></A>Link to the simulator runtime libraries and linker script. Overrides any scripts that would be selected by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mmcu=</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mlarge</CODE></DT>
<DD><A name=index-mlarge-2044></A>Use large-model addressing (20-bit pointers, 32-bit<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>size_t</CODE>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msmall</CODE></DT>
<DD><A name=index-msmall-2045></A>Use small-model addressing (16-bit pointers, 16-bit<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>size_t</CODE>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mrelax</CODE></DT>
<DD><A name=index-mrelax-2046></A>This option is passed to the assembler and linker, and allows the linker to perform certain optimizations that cannot be done until the final link.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>mhwmult=</CODE></DT>
<DD><A name=index-mhwmult_003d-2047></A>Describes the type of hardware multiply supported by the target. Accepted values are<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>none</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for no hardware multiply,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>16bit</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for the original 16-bit-only multiply supported by early MCUs.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>32bit</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for the 16/32-bit multiply supported by later MCUs and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>f5series</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for the 16/32-bit multiply supported by F5-series MCUs. A value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>auto</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can also be given. This tells GCC to deduce the hardware multiply support based upon the MCU name provided by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mmcu</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option. If no<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mmcu</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is specified then<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>32bit</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>hardware multiply support is assumed.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>auto</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the default setting.
<P>Hardware multiplies are normally performed by calling a library routine. This saves space in the generated code. When compiling at<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-O3</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or higher however the hardware multiplier is invoked inline. This makes for bigger, but faster code.</P>
<P>The hardware multiply routines disable interrupts whilst running and restore the previous interrupt state when they finish. This makes them safe to use inside interrupt handlers as well as in normal code.</P></DD></DL>