<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>3.17.3 ARC Options</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-ARC-options-1169></A>The following options control the architecture variant for which code is being compiled:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>-mbarrel-shifter</CODE></DT>
<DD><A name=index-mbarrel-shifter-1170></A>Generate instructions supported by barrel shifter. This is the default unless &#8216;<SAMP><SPAN class=samp>-mcpu=ARC601</SPAN></SAMP>&#8217; is in effect.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mcpu=</CODE><VAR>cpu</VAR></DT>
<DD><A name=index-mcpu-1171></A>Set architecture type, register usage, and instruction scheduling parameters for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cpu</VAR>. There are also shortcut alias options available for backward compatibility and convenience. Supported values for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cpu</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are<A name=index-mA6-1172></A><A name=index-mARC600-1173></A>
<DL>
<DT>&#8216;<SAMP><SPAN class=samp>ARC600</SPAN></SAMP>&#8217;</DT>
<DD>Compile for ARC600. Aliases:<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mA6</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mARC600</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>ARC601</SPAN></SAMP>&#8217;</DT>
<DD><A name=index-mARC601-1174></A>Compile for ARC601. Alias:<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mARC601</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>ARC700</SPAN></SAMP>&#8217;</DT>
<DD><A name=index-mA7-1175></A><A name=index-mARC700-1176></A>Compile for ARC700. Aliases:<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mA7</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mARC700</SPAN></SAMP>. This is the default when configured with &#8216;<SAMP><SPAN class=samp>--with-cpu=arc700</SPAN></SAMP>&#8217;.</DD></DL><BR></DD>
<DT><CODE>-mdpfp</CODE></DT>
<DD><A name=index-mdpfp-1177></A></DD>
<DT><CODE>-mdpfp-compact</CODE></DT>
<DD><A name=index-mdpfp-compact-1178></A>FPX: Generate Double Precision FPX instructions, tuned for the compact implementation.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mdpfp-fast</CODE></DT>
<DD><A name=index-mdpfp-fast-1179></A>FPX: Generate Double Precision FPX instructions, tuned for the fast implementation.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mno-dpfp-lrsr</CODE></DT>
<DD><A name=index-mno-dpfp-lrsr-1180></A>Disable LR and SR instructions from using FPX extension aux registers.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mea</CODE></DT>
<DD><A name=index-mea-1181></A>Generate Extended arithmetic instructions. Currently only<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>divaw</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>adds</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>subs</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sat16</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are supported. This is always enabled for &#8216;<SAMP><SPAN class=samp>-mcpu=ARC700</SPAN></SAMP>&#8217;.<BR></DD>
<DT><CODE>-mno-mpy</CODE></DT>
<DD><A name=index-mno-mpy-1182></A>Do not generate mpy instructions for ARC700.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mmul32x16</CODE></DT>
<DD><A name=index-mmul32x16-1183></A>Generate 32x16 bit multiply and mac instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mmul64</CODE></DT>
<DD><A name=index-mmul64-1184></A>Generate mul64 and mulu64 instructions. Only valid for &#8216;<SAMP><SPAN class=samp>-mcpu=ARC600</SPAN></SAMP>&#8217;.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mnorm</CODE></DT>
<DD><A name=index-mnorm-1185></A>Generate norm instruction. This is the default if &#8216;<SAMP><SPAN class=samp>-mcpu=ARC700</SPAN></SAMP>&#8217; is in effect.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mspfp</CODE></DT>
<DD><A name=index-mspfp-1186></A></DD>
<DT><CODE>-mspfp-compact</CODE></DT>
<DD><A name=index-mspfp-compact-1187></A>FPX: Generate Single Precision FPX instructions, tuned for the compact implementation.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mspfp-fast</CODE></DT>
<DD><A name=index-mspfp-fast-1188></A>FPX: Generate Single Precision FPX instructions, tuned for the fast implementation.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msimd</CODE></DT>
<DD><A name=index-msimd-1189></A>Enable generation of ARC SIMD instructions via target-specific builtins. Only valid for &#8216;<SAMP><SPAN class=samp>-mcpu=ARC700</SPAN></SAMP>&#8217;.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msoft-float</CODE></DT>
<DD><A name=index-msoft-float-1190></A>This option ignored; it is provided for compatibility purposes only. Software floating point code is emitted by default, and this default can overridden by FPX options; &#8216;<SAMP><SPAN class=samp>mspfp</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>mspfp-compact</SPAN></SAMP>&#8217;, or &#8216;<SAMP><SPAN class=samp>mspfp-fast</SPAN></SAMP>&#8217; for single precision, and &#8216;<SAMP><SPAN class=samp>mdpfp</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>mdpfp-compact</SPAN></SAMP>&#8217;, or &#8216;<SAMP><SPAN class=samp>mdpfp-fast</SPAN></SAMP>&#8217; for double precision.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mswap</CODE></DT>
<DD><A name=index-mswap-1191></A>Generate swap instructions.</DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following options are passed through to the assembler, and also define preprocessor macro symbols.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>-mdsp-packa</CODE></DT>
<DD><A name=index-mdsp-packa-1192></A>Passed down to the assembler to enable the DSP Pack A extensions. Also sets the preprocessor symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__Xdsp_packa</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mdvbf</CODE></DT>
<DD><A name=index-mdvbf-1193></A>Passed down to the assembler to enable the dual viterbi butterfly extension. Also sets the preprocessor symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__Xdvbf</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mlock</CODE></DT>
<DD><A name=index-mlock-1194></A>Passed down to the assembler to enable the Locked Load/Store Conditional extension. Also sets the preprocessor symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__Xlock</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mmac-d16</CODE></DT>
<DD><A name=index-mmac-d16-1195></A>Passed down to the assembler. Also sets the preprocessor symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__Xxmac_d16</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mmac-24</CODE></DT>
<DD><A name=index-mmac-24-1196></A>Passed down to the assembler. Also sets the preprocessor symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__Xxmac_24</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mrtsc</CODE></DT>
<DD><A name=index-mrtsc-1197></A>Passed down to the assembler to enable the 64-bit Time-Stamp Counter extension instruction. Also sets the preprocessor symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__Xrtsc</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mswape</CODE></DT>
<DD><A name=index-mswape-1198></A>Passed down to the assembler to enable the swap byte ordering extension instruction. Also sets the preprocessor symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__Xswape</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mtelephony</CODE></DT>
<DD><A name=index-mtelephony-1199></A>Passed down to the assembler to enable dual and single operand instructions for telephony. Also sets the preprocessor symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__Xtelephony</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mxy</CODE></DT>
<DD><A name=index-mxy-1200></A>Passed down to the assembler to enable the XY Memory extension. Also sets the preprocessor symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__Xxy</CODE>.</DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following options control how the assembly code is annotated:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>-misize</CODE></DT>
<DD><A name=index-misize-1201></A>Annotate assembler instructions with estimated addresses.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mannotate-align</CODE></DT>
<DD><A name=index-mannotate-align-1202></A>Explain what alignment considerations lead to the decision to make an instruction short or long.</DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following options are passed through to the linker:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>-marclinux</CODE></DT>
<DD><A name=index-marclinux-1203></A>Passed through to the linker, to specify use of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>arclinux</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>emulation. This option is enabled by default in tool chains built for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>arc-linux-uclibc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>arceb-linux-uclibc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>targets when profiling is not requested.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-marclinux_prof</CODE></DT>
<DD><A name=index-marclinux_005fprof-1204></A>Passed through to the linker, to specify use of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>arclinux_prof</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>emulation. This option is enabled by default in tool chains built for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>arc-linux-uclibc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>arceb-linux-uclibc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>targets when profiling is requested.</DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following options control the semantics of generated code:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>-mepilogue-cfi</CODE></DT>
<DD><A name=index-mepilogue-cfi-1205></A>Enable generation of call frame information for epilogues.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mno-epilogue-cfi</CODE></DT>
<DD><A name=index-mno-epilogue-cfi-1206></A>Disable generation of call frame information for epilogues.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mlong-calls</CODE></DT>
<DD><A name=index-mlong-calls-1207></A>Generate call insns as register indirect calls, thus providing access to the full 32-bit address range.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mmedium-calls</CODE></DT>
<DD><A name=index-mmedium-calls-1208></A>Don't use less than 25 bit addressing range for calls, which is the offset available for an unconditional branch-and-link instruction. Conditional execution of function calls is suppressed, to allow use of the 25-bit range, rather than the 21-bit range with conditional branch-and-link. This is the default for tool chains built for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>arc-linux-uclibc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>arceb-linux-uclibc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>targets.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mno-sdata</CODE></DT>
<DD><A name=index-mno-sdata-1209></A>Do not generate sdata references. This is the default for tool chains built for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>arc-linux-uclibc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>arceb-linux-uclibc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>targets.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mucb-mcount</CODE></DT>
<DD><A name=index-mucb-mcount-1210></A>Instrument with mcount calls as used in UCB code. I.e. do the counting in the callee, not the caller. By default ARC instrumentation counts in the caller.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mvolatile-cache</CODE></DT>
<DD><A name=index-mvolatile-cache-1211></A>Use ordinarily cached memory accesses for volatile references. This is the default.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mno-volatile-cache</CODE></DT>
<DD><A name=index-mno-volatile-cache-1212></A>Enable cache bypass for volatile references.</DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following options fine tune code generation:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>-malign-call</CODE></DT>
<DD><A name=index-malign-call-1213></A>Do alignment optimizations for call instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mauto-modify-reg</CODE></DT>
<DD><A name=index-mauto-modify-reg-1214></A>Enable the use of pre/post modify with register displacement.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mbbit-peephole</CODE></DT>
<DD><A name=index-mbbit-peephole-1215></A>Enable bbit peephole2.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mno-brcc</CODE></DT>
<DD><A name=index-mno-brcc-1216></A>This option disables a target-specific pass in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>arc_reorg</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to generate<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>BRcc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions. It has no effect on<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>BRcc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>generation driven by the combiner pass.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mcase-vector-pcrel</CODE></DT>
<DD><A name=index-mcase-vector-pcrel-1217></A>Use pc-relative switch case tables - this enables case table shortening. This is the default for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Os</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mcompact-casesi</CODE></DT>
<DD><A name=index-mcompact-casesi-1218></A>Enable compact casesi pattern. This is the default for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Os</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mno-cond-exec</CODE></DT>
<DD><A name=index-mno-cond-exec-1219></A>Disable ARCompact specific pass to generate conditional execution instructions. Due to delay slot scheduling and interactions between operand numbers, literal sizes, instruction lengths, and the support for conditional execution, the target-independent pass to generate conditional execution is often lacking, so the ARC port has kept a special pass around that tries to find more conditional execution generating opportunities after register allocation, branch shortening, and delay slot scheduling have been done. This pass generally, but not always, improves performance and code size, at the cost of extra compilation time, which is why there is an option to switch it off. If you have a problem with call instructions exceeding their allowable offset range because they are conditionalized, you should consider using<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mmedium-calls</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mearly-cbranchsi</CODE></DT>
<DD><A name=index-mearly-cbranchsi-1220></A>Enable pre-reload use of the cbranchsi pattern.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mexpand-adddi</CODE></DT>
<DD><A name=index-mexpand-adddi-1221></A>Expand<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>adddi3</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>subdi3</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>at rtl generation time into<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>add.f</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>adc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>etc.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mindexed-loads</CODE></DT>
<DD><A name=index-mindexed-loads-1222></A>Enable the use of indexed loads. This can be problematic because some optimizers will then assume the that indexed stores exist, which is not the case.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mlra</CODE></DT>
<DD><A name=index-mlra-1223></A>Enable Local Register Allocation. This is still experimental for ARC, so by default the compiler uses standard reload (i.e. &#8216;<SAMP><SPAN class=samp>-mno-lra</SPAN></SAMP>&#8217;).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mlra-priority-none</CODE></DT>
<DD><A name=index-mlra-priority-none-1224></A>Don't indicate any priority for target registers.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mlra-priority-compact</CODE></DT>
<DD><A name=index-mlra-priority-compact-1225></A>Indicate target register priority for r0..r3 / r12..r15.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mlra-priority-noncompact</CODE></DT>
<DD><A name=index-mlra-priority-noncompact-1226></A>Reduce target regsiter priority for r0..r3 / r12..r15.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mno-millicode</CODE></DT>
<DD><A name=index-mno-millicode-1227></A>When optimizing for size (using<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Os</SPAN></SAMP>), prologues and epilogues that have to save or restore a large number of registers are often shortened by using call to a special function in libgcc; this is referred to as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>millicode</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>call. As these calls can pose performance issues, and/or cause linking issues when linking in a nonstandard way, this option is provided to turn off millicode call generation.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mmixed-code</CODE></DT>
<DD><A name=index-mmixed-code-1228></A>Tweak register allocation to help 16-bit instruction generation. This generally has the effect of decreasing the average instruction size while increasing the instruction count.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mq-class</CODE></DT>
<DD><A name=index-mq-class-1229></A>Enable 'q' instruction alternatives. This is the default for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Os</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mRcq</CODE></DT>
<DD><A name=index-mRcq-1230></A>Enable Rcq constraint handling - most short code generation depends on this. This is the default.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mRcw</CODE></DT>
<DD><A name=index-mRcw-1231></A>Enable Rcw constraint handling - ccfsm condexec mostly depends on this. This is the default.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msize-level=</CODE><VAR>level</VAR></DT>
<DD><A name=index-msize-level-1232></A>Fine-tune size optimization with regards to instruction lengths and alignment. The recognized values for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>level</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are:
<DL>
<DT>&#8216;<SAMP><SPAN class=samp>0</SPAN></SAMP>&#8217;</DT>
<DD>No size optimization. This level is deprecated and treated like &#8216;<SAMP><SPAN class=samp>1</SPAN></SAMP>&#8217;.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>1</SPAN></SAMP>&#8217;</DT>
<DD>Short instructions are used opportunistically.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>2</SPAN></SAMP>&#8217;</DT>
<DD>In addition, alignment of loops and of code after barriers are dropped.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>3</SPAN></SAMP>&#8217;</DT>
<DD>In addition, optional data alignment is dropped, and the option<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>Os</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is enabled.</DD></DL>
<P>This defaults to &#8216;<SAMP><SPAN class=samp>3</SPAN></SAMP>&#8217; when<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Os</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is in effect. Otherwise, the behavior when this is not set is equivalent to level &#8216;<SAMP><SPAN class=samp>1</SPAN></SAMP>&#8217;.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mtune=</CODE><VAR>cpu</VAR></DT>
<DD><A name=index-mtune-1233></A>Set instruction scheduling parameters for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cpu</VAR>, overriding any implied by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mcpu=</SPAN></SAMP>.
<P>Supported values for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cpu</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are</P>
<DL>
<DT>&#8216;<SAMP><SPAN class=samp>ARC600</SPAN></SAMP>&#8217;</DT>
<DD>Tune for ARC600 cpu.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>ARC601</SPAN></SAMP>&#8217;</DT>
<DD>Tune for ARC601 cpu.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>ARC700</SPAN></SAMP>&#8217;</DT>
<DD>Tune for ARC700 cpu with standard multiplier block.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>ARC700-xmac</SPAN></SAMP>&#8217;</DT>
<DD>Tune for ARC700 cpu with XMAC block.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>ARC725D</SPAN></SAMP>&#8217;</DT>
<DD>Tune for ARC725D cpu.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>ARC750D</SPAN></SAMP>&#8217;</DT>
<DD>Tune for ARC750D cpu.</DD></DL><BR></DD>
<DT><CODE>-mmultcost=</CODE><VAR>num</VAR></DT>
<DD><A name=index-mmultcost-1234></A>Cost to assume for a multiply instruction, with &#8216;<SAMP><SPAN class=samp>4</SPAN></SAMP>&#8217; being equal to a normal instruction.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-munalign-prob-threshold=</CODE><VAR>probability</VAR></DT>
<DD><A name=index-munalign-prob-threshold-1235></A>Set probability threshold for unaligning branches. When tuning for &#8216;<SAMP><SPAN class=samp>ARC700</SPAN></SAMP>&#8217; and optimizing for speed, branches without filled delay slot are preferably emitted unaligned and long, unless profiling indicates that the probability for the branch to be taken is below<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>probability</VAR>. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Cross-profiling.html#Cross-profiling">Cross-profiling</A>. The default is (REG_BR_PROB_BASE/2), i.e. 5000.</DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following options are maintained for backward compatibility, but are now deprecated and will be removed in a future release:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>-margonaut</CODE></DT>
<DD><A name=index-margonaut-1236></A>Obsolete FPX.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mbig-endian</CODE></DT>
<DD><A name=index-mbig-endian-1237></A></DD>
<DT><CODE>-EB</CODE></DT>
<DD><A name=index-EB-1238></A>Compile code for big endian targets. Use of these options is now deprecated. Users wanting big-endian code, should use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>arceb-elf32</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<CODE>arceb-linux-uclibc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>targets when building the tool chain, for which big-endian is the default.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mlittle-endian</CODE></DT>
<DD><A name=index-mlittle-endian-1239></A></DD>
<DT><CODE>-EL</CODE></DT>
<DD><A name=index-EL-1240></A>Compile code for little endian targets. Use of these options is now deprecated. Users wanting little-endian code should use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>arc-elf32</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<CODE>arc-linux-uclibc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>targets when building the tool chain, for which little-endian is the default.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mbarrel_shifter</CODE></DT>
<DD><A name=index-mbarrel_005fshifter-1241></A>Replaced by &#8216;<SAMP><SPAN class=samp>-mbarrel-shifter</SPAN></SAMP>&#8217;<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mdpfp_compact</CODE></DT>
<DD><A name=index-mdpfp_005fcompact-1242></A>Replaced by &#8216;<SAMP><SPAN class=samp>-mdpfp-compact</SPAN></SAMP>&#8217;<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mdpfp_fast</CODE></DT>
<DD><A name=index-mdpfp_005ffast-1243></A>Replaced by &#8216;<SAMP><SPAN class=samp>-mdpfp-fast</SPAN></SAMP>&#8217;<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mdsp_packa</CODE></DT>
<DD><A name=index-mdsp_005fpacka-1244></A>Replaced by &#8216;<SAMP><SPAN class=samp>-mdsp-packa</SPAN></SAMP>&#8217;<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mEA</CODE></DT>
<DD><A name=index-mEA-1245></A>Replaced by &#8216;<SAMP><SPAN class=samp>-mea</SPAN></SAMP>&#8217;<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mmac_24</CODE></DT>
<DD><A name=index-mmac_005f24-1246></A>Replaced by &#8216;<SAMP><SPAN class=samp>-mmac-24</SPAN></SAMP>&#8217;<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mmac_d16</CODE></DT>
<DD><A name=index-mmac_005fd16-1247></A>Replaced by &#8216;<SAMP><SPAN class=samp>-mmac-d16</SPAN></SAMP>&#8217;<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mspfp_compact</CODE></DT>
<DD><A name=index-mspfp_005fcompact-1248></A>Replaced by &#8216;<SAMP><SPAN class=samp>-mspfp-compact</SPAN></SAMP>&#8217;<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mspfp_fast</CODE></DT>
<DD><A name=index-mspfp_005ffast-1249></A>Replaced by &#8216;<SAMP><SPAN class=samp>-mspfp-fast</SPAN></SAMP>&#8217;<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mtune=</CODE><VAR>cpu</VAR></DT>
<DD><A name=index-mtune-1250></A>Values &#8216;<SAMP><SPAN class=samp>arc600</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>arc601</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>arc700</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>arc700-xmac</SPAN></SAMP>&#8217; for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cpu</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are replaced by &#8216;<SAMP><SPAN class=samp>ARC600</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>ARC601</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>ARC700</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>ARC700-xmac</SPAN></SAMP>&#8217; respectively<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-multcost=</CODE><VAR>num</VAR></DT>
<DD><A name=index-multcost-1251></A>Replaced by &#8216;<SAMP><SPAN class=samp>-mmultcost</SPAN></SAMP>&#8217;.</DD></DL>