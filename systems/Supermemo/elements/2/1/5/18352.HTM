<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>3.13 Options for Linking</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-link-options-1070></A><A name=index-options_002c-linking-1071></A>These options come into play when the compiler links object files into an executable output file. They are meaningless if the compiler is not doing a link step.<A name=index-file-names-1072></A></P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><VAR>object-file-name</VAR></DT>
<DD>A file name that does not end in a special recognized suffix is considered to name an object file or library. (Object files are distinguished from libraries by the linker according to the file contents.) If linking is done, these object files are used as input to the linker.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-c</CODE></DT>
<DT><CODE>-S</CODE></DT>
<DT><CODE>-E</CODE></DT>
<DD><A name=index-c-1073></A><A name=index-S-1074></A><A name=index-E-1075></A>If any of these options is used, then the linker is not run, and object file names should not be used as arguments. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Overall-Options.html#Overall-Options">Overall Options</A>.
<P><A name=index-Libraries-1076></A><BR></P></DD>
<DT><CODE>-l</CODE><VAR>library</VAR></DT>
<DT><CODE>-l<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>library</VAR></DT>
<DD><A name=index-l-1077></A>Search the library named<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>library</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>when linking. (The second alternative with the library as a separate argument is only for POSIX compliance and is not recommended.)
<P>It makes a difference where in the command you write this option; the linker searches and processes libraries and object files in the order they are specified. Thus, &#8216;<SAMP><SPAN class=samp>foo.o -lz bar.o</SPAN></SAMP>&#8217; searches library &#8216;<SAMP><SPAN class=samp>z</SPAN></SAMP>&#8217; after file<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>foo.o</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>but before<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>bar.o</SPAN></SAMP>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>bar.o</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>refers to functions in &#8216;<SAMP><SPAN class=samp>z</SPAN></SAMP>&#8217;, those functions may not be loaded.</P>
<P>The linker searches a standard list of directories for the library, which is actually a file named<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>lib</SPAN><VAR>library</VAR><SPAN class=file>.a</SPAN></SAMP>. The linker then uses this file as if it had been specified precisely by name.</P>
<P>The directories searched include several standard system directories plus any that you specify with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-L</SPAN></SAMP>.</P>
<P>Normally the files found this way are library files&#8212;archive files whose members are object files. The linker handles an archive file by scanning through it for members which define symbols that have so far been referenced but not defined. But if the file that is found is an ordinary object file, it is linked in the usual fashion. The only difference between using an<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-l</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option and specifying a file name is that<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-l</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>surrounds<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>library</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with &#8216;<SAMP><SPAN class=samp>lib</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>.a</SPAN></SAMP>&#8217; and searches several directories.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-lobjc</CODE></DT>
<DD><A name=index-lobjc-1078></A>You need this special case of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-l</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option in order to link an Objective-C or Objective-C++ program.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-nostartfiles</CODE></DT>
<DD><A name=index-nostartfiles-1079></A>Do not use the standard system startup files when linking. The standard system libraries are used normally, unless<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-nostdlib</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-nodefaultlibs</SPAN></SAMP>is used.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-nodefaultlibs</CODE></DT>
<DD><A name=index-nodefaultlibs-1080></A>Do not use the standard system libraries when linking. Only the libraries you specify are passed to the linker, and options specifying linkage of the system libraries, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-static-libgcc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-shared-libgcc</CODE>, are ignored. The standard startup files are used normally, unless<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-nostartfiles</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used.
<P>The compiler may generate calls to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>memcmp</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>memset</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>memcpy</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>memmove</CODE>. These entries are usually resolved by entries in libc. These entry points should be supplied through some other mechanism when this option is specified.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-nostdlib</CODE></DT>
<DD><A name=index-nostdlib-1081></A>Do not use the standard system startup files or libraries when linking. No startup files and only the libraries you specify are passed to the linker, and options specifying linkage of the system libraries, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-static-libgcc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-shared-libgcc</CODE>, are ignored.
<P>The compiler may generate calls to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>memcmp</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>memset</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>memcpy</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>memmove</CODE>. These entries are usually resolved by entries in libc. These entry points should be supplied through some other mechanism when this option is specified.</P>
<P><A name=index-g_t_0040option_007b-lgcc_007d_002c-use-with-_0040option_007b-nostdlib_007d-1082></A><A name=index-g_t_0040option_007b-nostdlib_007d-and-unresolved-references-1083></A><A name=index-unresolved-references-and-_0040option_007b-nostdlib_007d-1084></A><A name=index-g_t_0040option_007b-lgcc_007d_002c-use-with-_0040option_007b-nodefaultlibs_007d-1085></A><A name=index-g_t_0040option_007b-nodefaultlibs_007d-and-unresolved-references-1086></A><A name=index-unresolved-references-and-_0040option_007b-nodefaultlibs_007d-1087></A>One of the standard libraries bypassed by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-nostdlib</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-nodefaultlibs</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libgcc.a</SPAN></SAMP>, a library of internal subroutines which GCC uses to overcome shortcomings of particular machines, or special needs for some languages. (See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gccint/Interface.html#Interface">Interfacing to GCC Output</A>, for more discussion of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libgcc.a</SPAN></SAMP>.) In most cases, you need<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libgcc.a</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>even when you want to avoid other standard libraries. In other words, when you specify<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-nostdlib</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-nodefaultlibs</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>you should usually specify<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-lgcc</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>as well. This ensures that you have no unresolved references to internal GCC library subroutines. (An example of such an internal subroutine is &#8216;<SAMP><SPAN class=samp>__main</SPAN></SAMP>&#8217;, used to ensure C++ constructors are called; see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gccint/Collect2.html#Collect2"><CODE>collect2</CODE></A>.)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-pie</CODE></DT>
<DD><A name=index-pie-1088></A>Produce a position independent executable on targets that support it. For predictable results, you must also specify the same set of options used for compilation (<SAMP><SPAN class=option>-fpie</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fPIE</SPAN></SAMP>, or model suboptions) when you specify this linker option.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-rdynamic</CODE></DT>
<DD><A name=index-rdynamic-1089></A>Pass the flag<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-export-dynamic</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the ELF linker, on targets that support it. This instructs the linker to add all symbols, not only used ones, to the dynamic symbol table. This option is needed for some uses of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dlopen</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or to allow obtaining backtraces from within a program.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-s</CODE></DT>
<DD><A name=index-s-1090></A>Remove all symbol table and relocation information from the executable.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-static</CODE></DT>
<DD><A name=index-static-1091></A>On systems that support dynamic linking, this prevents linking with the shared libraries. On other systems, this option has no effect.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-shared</CODE></DT>
<DD><A name=index-shared-1092></A>Produce a shared object which can then be linked with other objects to form an executable. Not all systems support this option. For predictable results, you must also specify the same set of options used for compilation (<SAMP><SPAN class=option>-fpic</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fPIC</SPAN></SAMP>, or model suboptions) when you specify this linker option.<A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Link-Options.html#fn-1" name=fnd-1 rel=footnote><SUP>1</SUP></A><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-shared-libgcc</CODE></DT>
<DT><CODE>-static-libgcc</CODE></DT>
<DD><A name=index-shared-libgcc-1093></A><A name=index-static-libgcc-1094></A>On systems that provide<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libgcc</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a shared library, these options force the use of either the shared or static version, respectively. If no shared version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libgcc</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>was built when the compiler was configured, these options have no effect.
<P>There are several situations in which an application should use the shared<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libgcc</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead of the static version. The most common of these is when the application wishes to throw and catch exceptions across different shared libraries. In that case, each of the libraries as well as the application itself should use the shared<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libgcc</SPAN></SAMP>.</P>
<P>Therefore, the G++ and GCJ drivers automatically add<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-shared-libgcc</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>whenever you build a shared library or a main executable, because C++ and Java programs typically use exceptions, so this is the right thing to do.</P>
<P>If, instead, you use the GCC driver to create shared libraries, you may find that they are not always linked with the shared<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libgcc</SPAN></SAMP>. If GCC finds, at its configuration time, that you have a non-GNU linker or a GNU linker that does not support option<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>--eh-frame-hdr</SPAN></SAMP>, it links the shared version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libgcc</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>into shared libraries by default. Otherwise, it takes advantage of the linker and optimizes away the linking with the shared version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libgcc</SPAN></SAMP>, linking with the static version of libgcc by default. This allows exceptions to propagate through such shared libraries, without incurring relocation costs at library load time.</P>
<P>However, if a library or main executable is supposed to throw or catch exceptions, you must link it using the G++ or GCJ driver, as appropriate for the languages used in the program, or using the option<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-shared-libgcc</SPAN></SAMP>, such that it is linked with the shared<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libgcc</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-static-libasan</CODE></DT>
<DD><A name=index-static-libasan-1095></A>When the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fsanitize=address</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is used to link a program, the GCC driver automatically links against<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>libasan</SPAN></SAMP>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libasan</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is available as a shared library, and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-static</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is not used, then this links against the shared version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libasan</SPAN></SAMP>. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-static-libasan</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option directs the GCC driver to link<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libasan</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>statically, without necessarily linking other libraries statically.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-static-libtsan</CODE></DT>
<DD><A name=index-static-libtsan-1096></A>When the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fsanitize=thread</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is used to link a program, the GCC driver automatically links against<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>libtsan</SPAN></SAMP>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libtsan</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is available as a shared library, and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-static</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is not used, then this links against the shared version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libtsan</SPAN></SAMP>. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-static-libtsan</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option directs the GCC driver to link<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libtsan</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>statically, without necessarily linking other libraries statically.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-static-liblsan</CODE></DT>
<DD><A name=index-static-liblsan-1097></A>When the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fsanitize=leak</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is used to link a program, the GCC driver automatically links against<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>liblsan</SPAN></SAMP>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>liblsan</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is available as a shared library, and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-static</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is not used, then this links against the shared version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>liblsan</SPAN></SAMP>. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-static-liblsan</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option directs the GCC driver to link<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>liblsan</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>statically, without necessarily linking other libraries statically.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-static-libubsan</CODE></DT>
<DD><A name=index-static-libubsan-1098></A>When the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fsanitize=undefined</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is used to link a program, the GCC driver automatically links against<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>libubsan</SPAN></SAMP>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libubsan</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is available as a shared library, and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-static</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is not used, then this links against the shared version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libubsan</SPAN></SAMP>. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-static-libubsan</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option directs the GCC driver to link<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libubsan</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>statically, without necessarily linking other libraries statically.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-static-libstdc++</CODE></DT>
<DD><A name=index-static-libstdc_002b_002b-1099></A>When the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>g++</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>program is used to link a C++ program, it normally automatically links against<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>libstdc++</SPAN></SAMP>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libstdc++</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is available as a shared library, and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-static</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is not used, then this links against the shared version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libstdc++</SPAN></SAMP>. That is normally fine. However, it is sometimes useful to freeze the version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libstdc++</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>used by the program without going all the way to a fully static link. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-static-libstdc++</SPAN></SAMP>option directs the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>g++</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>driver to link<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libstdc++</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>statically, without necessarily linking other libraries statically.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-symbolic</CODE></DT>
<DD><A name=index-symbolic-1100></A>Bind references to global symbols when building a shared object. Warn about any unresolved references (unless overridden by the link editor option<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Xlinker -z -Xlinker defs</SPAN></SAMP>). Only a few systems support this option.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-T<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>script</VAR></DT>
<DD><A name=index-T-1101></A><A name=index-linker-script-1102></A>Use<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>script</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the linker script. This option is supported by most systems using the GNU linker. On some targets, such as bare-board targets without an operating system, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-T</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option may be required when linking to avoid references to undefined symbols.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-Xlinker<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>option</VAR></DT>
<DD><A name=index-Xlinker-1103></A>Pass<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>option</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as an option to the linker. You can use this to supply system-specific linker options that GCC does not recognize.
<P>If you want to pass an option that takes a separate argument, you must use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Xlinker</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>twice, once for the option and once for the argument. For example, to pass<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-assert definitions</SPAN></SAMP>, you must write<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Xlinker -assert -Xlinker definitions</SPAN></SAMP>. It does not work to write<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Xlinker "-assert definitions"</SPAN></SAMP>, because this passes the entire string as a single argument, which is not what the linker expects.</P>
<P>When using the GNU linker, it is usually more convenient to pass arguments to linker options using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><VAR>option</VAR><SPAN class=option>=</SPAN><VAR>value</VAR></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>syntax than as separate arguments. For example, you can specify<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Xlinker -Map=output.map</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>rather than<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Xlinker -Map -Xlinker output.map</SPAN></SAMP>. Other linkers may not support this syntax for command-line options.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-Wl,</CODE><VAR>option</VAR></DT>
<DD><A name=index-Wl-1104></A>Pass<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>option</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as an option to the linker. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>option</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>contains commas, it is split into multiple options at the commas. You can use this syntax to pass an argument to the option. For example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wl,-Map,output.map</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>passes<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Map output.map</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the linker. When using the GNU linker, you can also get the same effect with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wl,-Map=output.map</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-u<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>symbol</VAR></DT>
<DD><A name=index-u-1105></A>Pretend the symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>symbol</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is undefined, to force linking of library modules to define it. You can use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-u</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>multiple times with different symbols to force loading of additional library modules.</DD></DL>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=footnote>
<HR>

<H4>Footnotes</H4>
<P class=footnote><SMALL>[<A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Link-Options.html#fnd-1" name=fn-1>1</A>]</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>On some systems, &#8216;<SAMP><SPAN class=samp>gcc -shared</SPAN></SAMP>&#8217; needs to build supplementary stub code for constructors to work. On multi-libbed systems, &#8216;<SAMP><SPAN class=samp>gcc -shared</SPAN></SAMP>&#8217; must select the correct support libraries to link against. Failing to supply the correct flags may lead to subtle defects. Supplying them in cases where they are not necessary is innocuous.</P></DIV><BR class=Apple-interchange-newline>