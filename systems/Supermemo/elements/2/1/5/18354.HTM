<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>3.15 Specifying subprocesses and the switches to pass to them</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-Spec-Files-1118></A><SAMP><SPAN class=command>gcc</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a driver program. It performs its job by invoking a sequence of other programs to do the work of compiling, assembling and linking. GCC interprets its command-line parameters and uses these to deduce which programs it should invoke, and which command-line options it ought to place on their command lines. This behavior is controlled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><DFN>spec strings</DFN>. In most cases there is one spec string for each program that GCC can invoke, but a few programs have multiple spec strings to control their behavior. The spec strings built into GCC can be overridden by using the<SAMP><SPAN class=option>-specs=</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>command-line switch to specify a spec file.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><DFN>Spec files</DFN><SPAN class=Apple-converted-space>&nbsp;</SPAN>are plaintext files that are used to construct spec strings. They consist of a sequence of directives separated by blank lines. The type of directive is determined by the first non-whitespace character on the line, which can be one of the following:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>%</CODE><VAR>command</VAR></DT>
<DD>Issues a<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>command</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the spec file processor. The commands that can appear here are:
<DL>
<DT><CODE>%include &lt;</CODE><VAR>file</VAR><CODE>&gt;</CODE></DT>
<DD><A name=index-g_t_0040code_007b_0025include_007d-1119></A>Search for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and insert its text at the current point in the specs file.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%include_noerr &lt;</CODE><VAR>file</VAR><CODE>&gt;</CODE></DT>
<DD><A name=index-g_t_0040code_007b_0025include_005fnoerr_007d-1120></A>Just like &#8216;<SAMP><SPAN class=samp>%include</SPAN></SAMP>&#8217;, but do not generate an error message if the include file cannot be found.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%rename<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>old_name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>new_name</VAR></DT>
<DD><A name=index-g_t_0040code_007b_0025rename_007d-1121></A>Rename the spec string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>old_name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>new_name</VAR>.</DD></DL><BR></DD>
<DT><CODE>*[</CODE><VAR>spec_name</VAR><CODE>]:</CODE></DT>
<DD>This tells the compiler to create, override or delete the named spec string. All lines after this directive up to the next directive or blank line are considered to be the text for the spec string. If this results in an empty string then the spec is deleted. (Or, if the spec did not exist, then nothing happens.) Otherwise, if the spec does not currently exist a new spec is created. If the spec does exist then its contents are overridden by the text of this directive, unless the first character of that text is the &#8216;<SAMP><SPAN class=samp>+</SPAN></SAMP>&#8217; character, in which case the text is appended to the spec.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>[</CODE><VAR>suffix</VAR><CODE>]:</CODE></DT>
<DD>Creates a new &#8216;<SAMP><SPAN class=samp>[</SPAN><VAR>suffix</VAR><SPAN class=samp>] spec</SPAN></SAMP>&#8217; pair. All lines after this directive and up to the next directive or blank line are considered to make up the spec string for the indicated suffix. When the compiler encounters an input file with the named suffix, it processes the spec string in order to work out how to compile that file. For example:<PRE style="FONT-SIZE: smaller" class=smallexample>          .ZZ:
          z-compile -input %i
</PRE>
<P>This says that any input file whose name ends in &#8216;<SAMP><SPAN class=samp>.ZZ</SPAN></SAMP>&#8217; should be passed to the program &#8216;<SAMP><SPAN class=samp>z-compile</SPAN></SAMP>&#8217;, which should be invoked with the command-line switch<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-input</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and with the result of performing the &#8216;<SAMP><SPAN class=samp>%i</SPAN></SAMP>&#8217; substitution. (See below.)</P>
<P>As an alternative to providing a spec string, the text following a suffix directive can be one of the following:</P>
<DL>
<DT><CODE>@</CODE><VAR>language</VAR></DT>
<DD>This says that the suffix is an alias for a known<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>language</VAR>. This is similar to using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-x</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>command-line switch to GCC to specify a language explicitly. For example:<PRE style="FONT-SIZE: smaller" class=smallexample>               .ZZ:
               @c++
</PRE>
<P>Says that .ZZ files are, in fact, C++ source files.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>#</CODE><VAR>name</VAR></DT>
<DD>This causes an error messages saying:<PRE style="FONT-SIZE: smaller" class=smallexample>               <VAR>name</VAR> compiler not installed on this system.
</PRE></DD></DL>
<P>GCC already has an extensive list of suffixes built into it. This directive adds an entry to the end of the list of suffixes, but since the list is searched from the end backwards, it is effectively possible to override earlier entries using this technique.</P></DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">GCC has the following spec strings built into it. Spec files can override these strings or create their own. Note that individual targets can also add their own spec strings to this list.</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     asm          Options to pass to the assembler
     asm_final    Options to pass to the assembler post-processor
     cpp          Options to pass to the C preprocessor
     cc1          Options to pass to the C compiler
     cc1plus      Options to pass to the C++ compiler
     endfile      Object files to include at the end of the link
     link         Options to pass to the linker
     lib          Libraries to include on the command line to the linker
     libgcc       Decides which GCC support library to pass to the linker
     linker       Sets the name of the linker
     predefines   Defines to be passed to the C preprocessor
     signed_char  Defines to pass to CPP to say whether <CODE>char</CODE> is signed
                  by default
     startfile    Object files to include at the start of the link
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here is a small example of a spec file:</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     %rename lib                 old_lib
     
     *lib:
     --start-group -lgcc -lc -leval1 --end-group %(old_lib)
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This example renames the spec called &#8216;<SAMP><SPAN class=samp>lib</SPAN></SAMP>&#8217; to &#8216;<SAMP><SPAN class=samp>old_lib</SPAN></SAMP>&#8217; and then overrides the previous definition of &#8216;<SAMP><SPAN class=samp>lib</SPAN></SAMP>&#8217; with a new one. The new definition adds in some extra command-line options before including the text of the old definition.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><DFN>Spec strings</DFN><SPAN class=Apple-converted-space>&nbsp;</SPAN>are a list of command-line options to be passed to their corresponding program. In addition, the spec strings can contain &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217;-prefixed sequences to substitute variable text or to conditionally insert text into the command line. Using these constructs it is possible to generate quite complex command lines.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here is a table of all defined &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217;-sequences for spec strings. Note that spaces are not generated automatically around the results of expanding these sequences. Therefore you can concatenate them together or combine them with constant text in a single argument.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>%%</CODE></DT>
<DD>Substitute one &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; into the program name or argument.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%i</CODE></DT>
<DD>Substitute the name of the input file being processed.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%b</CODE></DT>
<DD>Substitute the basename of the input file being processed. This is the substring up to (and not including) the last period and not including the directory.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%B</CODE></DT>
<DD>This is the same as &#8216;<SAMP><SPAN class=samp>%b</SPAN></SAMP>&#8217;, but include the file suffix (text after the last period).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%d</CODE></DT>
<DD>Marks the argument containing or following the &#8216;<SAMP><SPAN class=samp>%d</SPAN></SAMP>&#8217; as a temporary file name, so that that file is deleted if GCC exits successfully. Unlike &#8216;<SAMP><SPAN class=samp>%g</SPAN></SAMP>&#8217;, this contributes no text to the argument.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%g</CODE><VAR>suffix</VAR></DT>
<DD>Substitute a file name that has suffix<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>suffix</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and is chosen once per compilation, and mark the argument in the same way as &#8216;<SAMP><SPAN class=samp>%d</SPAN></SAMP>&#8217;. To reduce exposure to denial-of-service attacks, the file name is now chosen in a way that is hard to predict even when previously chosen file names are known. For example, &#8216;<SAMP><SPAN class=samp>%g.s ... %g.o ... %g.s</SPAN></SAMP>&#8217; might turn into &#8216;<SAMP><SPAN class=samp>ccUVUUAU.s ccXYAXZ12.o ccUVUUAU.s</SPAN></SAMP>&#8217;.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>suffix</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>matches the regexp &#8216;<SAMP><SPAN class=samp>[.A-Za-z]*</SPAN></SAMP>&#8217; or the special string &#8216;<SAMP><SPAN class=samp>%O</SPAN></SAMP>&#8217;, which is treated exactly as if &#8216;<SAMP><SPAN class=samp>%O</SPAN></SAMP>&#8217; had been preprocessed. Previously, &#8216;<SAMP><SPAN class=samp>%g</SPAN></SAMP>&#8217; was simply substituted with a file name chosen once per compilation, without regard to any appended suffix (which was therefore treated just like ordinary text), making such attacks more likely to succeed.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%u</CODE><VAR>suffix</VAR></DT>
<DD>Like &#8216;<SAMP><SPAN class=samp>%g</SPAN></SAMP>&#8217;, but generates a new temporary file name each time it appears instead of once per compilation.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%U</CODE><VAR>suffix</VAR></DT>
<DD>Substitutes the last file name generated with &#8216;<SAMP><SPAN class=samp>%u</SPAN><VAR>suffix</VAR></SAMP>&#8217;, generating a new one if there is no such last file name. In the absence of any &#8216;<SAMP><SPAN class=samp>%u</SPAN><VAR>suffix</VAR></SAMP>&#8217;, this is just like &#8216;<SAMP><SPAN class=samp>%g</SPAN><VAR>suffix</VAR></SAMP>&#8217;, except they don't share the same suffix<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>space</EM>, so &#8216;<SAMP><SPAN class=samp>%g.s ... %U.s ... %g.s ... %U.s</SPAN></SAMP>&#8217; involves the generation of two distinct file names, one for each &#8216;<SAMP><SPAN class=samp>%g.s</SPAN></SAMP>&#8217; and another for each &#8216;<SAMP><SPAN class=samp>%U.s</SPAN></SAMP>&#8217;. Previously, &#8216;<SAMP><SPAN class=samp>%U</SPAN></SAMP>&#8217; was simply substituted with a file name chosen for the previous &#8216;<SAMP><SPAN class=samp>%u</SPAN></SAMP>&#8217;, without regard to any appended suffix.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%j</CODE><VAR>suffix</VAR></DT>
<DD>Substitutes the name of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>HOST_BIT_BUCKET</CODE>, if any, and if it is writable, and if<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-save-temps</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not used; otherwise, substitute the name of a temporary file, just like &#8216;<SAMP><SPAN class=samp>%u</SPAN></SAMP>&#8217;. This temporary file is not meant for communication between processes, but rather as a junk disposal mechanism.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%|</CODE><VAR>suffix</VAR></DT>
<DT><CODE>%m</CODE><VAR>suffix</VAR></DT>
<DD>Like &#8216;<SAMP><SPAN class=samp>%g</SPAN></SAMP>&#8217;, except if<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-pipe</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is in effect. In that case &#8216;<SAMP><SPAN class=samp>%|</SPAN></SAMP>&#8217; substitutes a single dash and &#8216;<SAMP><SPAN class=samp>%m</SPAN></SAMP>&#8217; substitutes nothing at all. These are the two most common ways to instruct a program that it should read from standard input or write to standard output. If you need something more elaborate you can use an &#8216;<SAMP><SPAN class=samp>%{pipe:</SPAN><CODE>X</CODE><SPAN class=samp>}</SPAN></SAMP>&#8217; construct: see for example<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>f/lang-specs.h</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%.</CODE><VAR>SUFFIX</VAR></DT>
<DD>Substitutes<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>.SUFFIX</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>for the suffixes of a matched switch's args when it is subsequently output with &#8216;<SAMP><SPAN class=samp>%*</SPAN></SAMP>&#8217;.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>SUFFIX</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is terminated by the next space or %.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%w</CODE></DT>
<DD>Marks the argument containing or following the &#8216;<SAMP><SPAN class=samp>%w</SPAN></SAMP>&#8217; as the designated output file of this compilation. This puts the argument into the sequence of arguments that &#8216;<SAMP><SPAN class=samp>%o</SPAN></SAMP>&#8217; substitutes.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%o</CODE></DT>
<DD>Substitutes the names of all the output files, with spaces automatically placed around them. You should write spaces around the &#8216;<SAMP><SPAN class=samp>%o</SPAN></SAMP>&#8217; as well or the results are undefined. &#8216;<SAMP><SPAN class=samp>%o</SPAN></SAMP>&#8217; is for use in the specs for running the linker. Input files whose names have no recognized suffix are not compiled at all, but they are included among the output files, so they are linked.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%O</CODE></DT>
<DD>Substitutes the suffix for object files. Note that this is handled specially when it immediately follows &#8216;<SAMP><SPAN class=samp>%g, %u, or %U</SPAN></SAMP>&#8217;, because of the need for those to form complete file names. The handling is such that &#8216;<SAMP><SPAN class=samp>%O</SPAN></SAMP>&#8217; is treated exactly as if it had already been substituted, except that &#8216;<SAMP><SPAN class=samp>%g, %u, and %U</SPAN></SAMP>&#8217; do not currently support additional<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>suffix</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>characters following &#8216;<SAMP><SPAN class=samp>%O</SPAN></SAMP>&#8217; as they do following, for example, &#8216;<SAMP><SPAN class=samp>.o</SPAN></SAMP>&#8217;.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%p</CODE></DT>
<DD>Substitutes the standard macro predefinitions for the current target machine. Use this when running<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cpp</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%P</CODE></DT>
<DD>Like &#8216;<SAMP><SPAN class=samp>%p</SPAN></SAMP>&#8217;, but puts &#8216;<SAMP><SPAN class=samp>__</SPAN></SAMP>&#8217; before and after the name of each predefined macro, except for macros that start with &#8216;<SAMP><SPAN class=samp>__</SPAN></SAMP>&#8217; or with &#8216;<SAMP><SPAN class=samp>_</SPAN><VAR>L</VAR></SAMP>&#8217;, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>L</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an uppercase letter. This is for ISO C.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%I</CODE></DT>
<DD>Substitute any of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-iprefix</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>(made from<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=env>GCC_EXEC_PREFIX</SPAN></SAMP>),<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-isysroot</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>(made from<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=env>TARGET_SYSTEM_ROOT</SPAN></SAMP>),<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-isystem</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>(made from<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=env>COMPILER_PATH</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-B</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options) and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-imultilib</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>as necessary.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%s</CODE></DT>
<DD>Current argument is the name of a library or startup file of some sort. Search for that file in a standard list of directories and substitute the full name found. The current working directory is included in the list of directories scanned.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%T</CODE></DT>
<DD>Current argument is the name of a linker script. Search for that file in the current list of directories to scan for libraries. If the file is located insert a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>--script</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option into the command line followed by the full path name found. If the file is not found then generate an error message. Note: the current working directory is not searched.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%e</CODE><VAR>str</VAR></DT>
<DD>Print<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as an error message.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>str</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is terminated by a newline. Use this when inconsistent options are detected.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%(</CODE><VAR>name</VAR><CODE>)</CODE></DT>
<DD>Substitute the contents of spec string<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>at this point.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%x{</CODE><VAR>option</VAR><CODE>}</CODE></DT>
<DD>Accumulate an option for &#8216;<SAMP><SPAN class=samp>%X</SPAN></SAMP>&#8217;.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%X</CODE></DT>
<DD>Output the accumulated linker options specified by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wl</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or a &#8216;<SAMP><SPAN class=samp>%x</SPAN></SAMP>&#8217; spec string.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%Y</CODE></DT>
<DD>Output the accumulated assembler options specified by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wa</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%Z</CODE></DT>
<DD>Output the accumulated preprocessor options specified by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wp</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%a</CODE></DT>
<DD>Process the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>spec. This is used to compute the switches to be passed to the assembler.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%A</CODE></DT>
<DD>Process the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asm_final</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>spec. This is a spec string for passing switches to an assembler post-processor, if such a program is needed.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%l</CODE></DT>
<DD>Process the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>link</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>spec. This is the spec for computing the command line passed to the linker. Typically it makes use of the &#8216;<SAMP><SPAN class=samp>%L %G %S %D and %E</SPAN></SAMP>&#8217; sequences.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%D</CODE></DT>
<DD>Dump out a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-L</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option for each directory that GCC believes might contain startup files. If the target supports multilibs then the current multilib directory is prepended to each of these paths.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%L</CODE></DT>
<DD>Process the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lib</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>spec. This is a spec string for deciding which libraries are included on the command line to the linker.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%G</CODE></DT>
<DD>Process the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>libgcc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>spec. This is a spec string for deciding which GCC support library is included on the command line to the linker.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%S</CODE></DT>
<DD>Process the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>startfile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>spec. This is a spec for deciding which object files are the first ones passed to the linker. Typically this might be a file named<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>crt0.o</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%E</CODE></DT>
<DD>Process the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>endfile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>spec. This is a spec string that specifies the last object files that are passed to the linker.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%C</CODE></DT>
<DD>Process the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cpp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>spec. This is used to construct the arguments to be passed to the C preprocessor.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%1</CODE></DT>
<DD>Process the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cc1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>spec. This is used to construct the options to be passed to the actual C compiler (&#8216;<SAMP><SPAN class=samp>cc1</SPAN></SAMP>&#8217;).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%2</CODE></DT>
<DD>Process the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cc1plus</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>spec. This is used to construct the options to be passed to the actual C++ compiler (&#8216;<SAMP><SPAN class=samp>cc1plus</SPAN></SAMP>&#8217;).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%*</CODE></DT>
<DD>Substitute the variable part of a matched option. See below. Note that each comma in the substituted string is replaced by a single space.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%&lt;S</CODE></DT>
<DD>Remove all occurrences of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-S</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>from the command line. Note&#8212;this command is position dependent. &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; commands in the spec string before this one see<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-S</CODE>, &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; commands in the spec string after this one do not.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%:</CODE><VAR>function</VAR><CODE>(</CODE><VAR>args</VAR><CODE>)</CODE></DT>
<DD>Call the named function<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>function</VAR>, passing it<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>args</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>args</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is first processed as a nested spec string, then split into an argument vector in the usual fashion. The function returns a string which is processed as if it had appeared literally as part of the current spec.
<P>The following built-in spec functions are provided:</P>
<DL>
<DT><CODE>getenv</CODE></DT>
<DD>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getenv</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>spec function takes two arguments: an environment variable name and a string. If the environment variable is not defined, a fatal error is issued. Otherwise, the return value is the value of the environment variable concatenated with the string. For example, if<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=env>TOPDIR</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is defined as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>/path/to/top</SPAN></SAMP>, then:<PRE style="FONT-SIZE: smaller" class=smallexample>               %:getenv(TOPDIR /include)
</PRE>
<P>expands to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>/path/to/top/include</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>if-exists</CODE></DT>
<DD>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>if-exists</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>spec function takes one argument, an absolute pathname to a file. If the file exists,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>if-exists</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the pathname. Here is a small example of its usage:<PRE style="FONT-SIZE: smaller" class=smallexample>               *startfile:
               crt0%O%s %:if-exists(crti%O%s) crtbegin%O%s
</PRE><BR></DD>
<DT><CODE>if-exists-else</CODE></DT>
<DD>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>if-exists-else</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>spec function is similar to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>if-exists</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>spec function, except that it takes two arguments. The first argument is an absolute pathname to a file. If the file exists,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>if-exists-else</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the pathname. If it does not exist, it returns the second argument. This way,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>if-exists-else</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be used to select one file or another, based on the existence of the first. Here is a small example of its usage:<PRE style="FONT-SIZE: smaller" class=smallexample>               *startfile:
               crt0%O%s %:if-exists(crti%O%s) \
               %:if-exists-else(crtbeginT%O%s crtbegin%O%s)
</PRE><BR></DD>
<DT><CODE>replace-outfile</CODE></DT>
<DD>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>replace-outfile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>spec function takes two arguments. It looks for the first argument in the outfiles array and replaces it with the second argument. Here is a small example of its usage:<PRE style="FONT-SIZE: smaller" class=smallexample>               %{fgnu-runtime:%:replace-outfile(-lobjc -lobjc-gnu)}
</PRE><BR></DD>
<DT><CODE>remove-outfile</CODE></DT>
<DD>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>remove-outfile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>spec function takes one argument. It looks for the first argument in the outfiles array and removes it. Here is a small example its usage:<PRE style="FONT-SIZE: smaller" class=smallexample>               %:remove-outfile(-lm)
</PRE><BR></DD>
<DT><CODE>pass-through-libs</CODE></DT>
<DD>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>pass-through-libs</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>spec function takes any number of arguments. It finds any<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-l</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options and any non-options ending in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.a</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>(which it assumes are the names of linker input library archive files) and returns a result containing all the found arguments each prepended by<SAMP><SPAN class=option>-plugin-opt=-pass-through=</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and joined by spaces. This list is intended to be passed to the LTO linker plugin.<PRE style="FONT-SIZE: smaller" class=smallexample>               %:pass-through-libs(%G %L %G)
</PRE><BR></DD>
<DT><CODE>print-asm-header</CODE></DT>
<DD>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>print-asm-header</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function takes no arguments and simply prints a banner like:<PRE style="FONT-SIZE: smaller" class=smallexample>               Assembler options
               =================
               
               Use "-Wa,OPTION" to pass "OPTION" to the assembler.
</PRE>
<P>It is used to separate compiler options from assembler options in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>--target-help</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>output.</P></DD></DL><BR></DD>
<DT><CODE>%{S}</CODE></DT>
<DD>Substitutes the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-S</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>switch, if that switch is given to GCC. If that switch is not specified, this substitutes nothing. Note that the leading dash is omitted when specifying this option, and it is automatically inserted if the substitution is performed. Thus the spec string &#8216;<SAMP><SPAN class=samp>%{foo}</SPAN></SAMP>&#8217; matches the command-line option<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-foo</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and outputs the command-line option<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-foo</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%W{S}</CODE></DT>
<DD>Like %{<CODE>S</CODE>} but mark last argument supplied within as a file to be deleted on failure.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%{S*}</CODE></DT>
<DD>Substitutes all the switches specified to GCC whose names start with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-S</CODE>, but which also take an argument. This is used for switches like<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-o</SPAN></SAMP>,<SAMP><SPAN class=option>-D</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-I</SPAN></SAMP>, etc. GCC considers<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-o foo</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>as being one switch whose name starts with &#8216;<SAMP><SPAN class=samp>o</SPAN></SAMP>&#8217;. %{o*} substitutes this text, including the space. Thus two arguments are generated.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%{S*&amp;T*}</CODE></DT>
<DD>Like %{<CODE>S</CODE>*}, but preserve order of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>S</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>T</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>options (the order of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>S</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>T</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the spec is not significant). There can be any number of ampersand-separated variables; for each the wild card is optional. Useful for CPP as &#8216;<SAMP><SPAN class=samp>%{D*&amp;U*&amp;A*}</SPAN></SAMP>&#8217;.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%{S:X}</CODE></DT>
<DD>Substitutes<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>X</CODE>, if the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-S</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>switch is given to GCC.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%{!S:X}</CODE></DT>
<DD>Substitutes<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>X</CODE>, if the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-S</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>switch is<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>not</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>given to GCC.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%{S*:X}</CODE></DT>
<DD>Substitutes<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>X</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if one or more switches whose names start with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-S</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are specified to GCC. Normally<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>X</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is substituted only once, no matter how many such switches appeared. However, if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>appears somewhere in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>X</CODE>, then<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>X</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is substituted once for each matching switch, with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%*</CODE>replaced by the part of that switch matching the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*</CODE>.
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>appears as the last part of a spec sequence then a space will be added after the end of the last substitution. If there is more text in the sequence however then a space will not be generated. This allows the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>substitution to be used as part of a larger string. For example, a spec string like this:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          %{mcu=*:--script=%*/memory.ld}
</PRE>
<P>when matching an option like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-mcu=newchip</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will produce:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          --script=newchip/memory.ld
</PRE><BR></DD>
<DT><CODE>%{.S:X}</CODE></DT>
<DD>Substitutes<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>X</CODE>, if processing a file with suffix<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>S</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%{!.S:X}</CODE></DT>
<DD>Substitutes<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>X</CODE>, if<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>not</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>processing a file with suffix<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>S</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%{,S:X}</CODE></DT>
<DD>Substitutes<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>X</CODE>, if processing a file for language<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>S</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%{!,S:X}</CODE></DT>
<DD>Substitutes<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>X</CODE>, if not processing a file for language<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>S</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>%{S|P:X}</CODE></DT>
<DD>Substitutes<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>X</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if either<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-S</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-P</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is given to GCC. This may be combined with &#8216;<SAMP><SPAN class=samp>!</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>.</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>,</SPAN></SAMP>&#8217;, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>sequences as well, although they have a stronger binding than the &#8216;<SAMP><SPAN class=samp>|</SPAN></SAMP>&#8217;. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>appears in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>X</CODE>, all of the alternatives must be starred, and only the first matching alternative is substituted.
<P>For example, a spec string like this:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          %{.c:-foo} %{!.c:-bar} %{.c|d:-baz} %{!.c|d:-boggle}
</PRE>
<P class=noindent>outputs the following command-line options from the following input command-line options:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          fred.c        -foo -baz
          jim.d         -bar -boggle
          -d fred.c     -foo -baz -boggle
          -d jim.d      -bar -baz -boggle
</PRE><BR></DD>
<DT><CODE>%{S:X; T:Y; :D}</CODE></DT>
<DD>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>S</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is given to GCC, substitutes<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>X</CODE>; else if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>T</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is given to GCC, substitutes<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>Y</CODE>; else substitutes<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>D</CODE>. There can be as many clauses as you need. This may be combined with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>,</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>!</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>|</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as needed.</DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The conditional text<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>X</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in a %{<CODE>S</CODE>:<CODE>X</CODE>} or similar construct may contain other nested &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; constructs or spaces, or even newlines. They are processed as usual, as described above. Trailing white space in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>X</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is ignored. White space may also appear anywhere on the left side of the colon in these constructs, except between<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the corresponding word.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-O</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-f</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-m</SPAN></SAMP>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-W</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>switches are handled specifically in these constructs. If another value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-O</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or the negated form of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-f</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-m</SPAN></SAMP>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-W</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>switch is found later in the command line, the earlier switch value is ignored, except with {<CODE>S</CODE>*} where<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>S</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is just one letter, which passes all matching options.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The character &#8216;<SAMP><SPAN class=samp>|</SPAN></SAMP>&#8217; at the beginning of the predicate text is used to indicate that a command should be piped to the following command, but only if<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-pipe</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">It is built into GCC which switches take arguments and which do not. (You might think it would be useful to generalize this to allow each compiler's spec to say which switches take arguments. But this cannot be done in a consistent fashion. GCC cannot even decide which input files have been specified without knowing which switches take arguments, and it must know which input files to compile in order to tell which compilers to run).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">GCC also knows implicitly that arguments starting in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-l</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>are to be treated as compiler output files, and passed to the linker in their proper position among the other output files.