<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>3.5 Options Controlling C++ Dialect</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-compiler-options_002c-C_002b_002b-141></A><A name=index-C_002b_002b-options_002c-command-line-142></A><A name=index-options_002c-C_002b_002b-143></A>This section describes the command-line options that are only meaningful for C++ programs. You can also use most of the GNU compiler options regardless of what language your program is in. For example, you might compile a file<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>firstClass.C</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>like this:</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     g++ -g -frepo -O -c firstClass.C
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=noindent>In this example, only<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-frepo</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an option meant only for C++ programs; you can use the other options with any language supported by GCC.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here is a list of options that are<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>only</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>for compiling C++ programs:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>-fabi-version=</CODE><VAR>n</VAR></DT>
<DD><A name=index-fabi-version-144></A>Use version<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the C++ ABI. The default is version 2.
<P>Version 0 refers to the version conforming most closely to the C++ ABI specification. Therefore, the ABI obtained using version 0 will change in different versions of G++ as ABI bugs are fixed.</P>
<P>Version 1 is the version of the C++ ABI that first appeared in G++ 3.2.</P>
<P>Version 2 is the version of the C++ ABI that first appeared in G++ 3.4.</P>
<P>Version 3 corrects an error in mangling a constant address as a template argument.</P>
<P>Version 4, which first appeared in G++ 4.5, implements a standard mangling for vector types.</P>
<P>Version 5, which first appeared in G++ 4.6, corrects the mangling of attribute const/volatile on function pointer types, decltype of a plain decl, and use of a function parameter in the declaration of another parameter.</P>
<P>Version 6, which first appeared in G++ 4.7, corrects the promotion behavior of C++11 scoped enums and the mangling of template argument packs, const/static_cast, prefix ++ and &#8211;, and a class scope function used as a template argument.</P>
<P>See also<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wabi</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-fno-access-control</CODE></DT>
<DD><A name=index-fno-access-control-145></A>Turn off all access checking. This switch is mainly useful for working around bugs in the access control code.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fcheck-new</CODE></DT>
<DD><A name=index-fcheck-new-146></A>Check that the pointer returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>operator new</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is non-null before attempting to modify the storage allocated. This check is normally unnecessary because the C++ standard specifies that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>operator new</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>only returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if it is declared &#8216;<SAMP><SPAN class=samp>throw()</SPAN></SAMP>&#8217;, in which case the compiler always checks the return value even without this option. In all other cases, when<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>operator new</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>has a non-empty exception specification, memory exhaustion is signalled by throwing<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>std::bad_alloc</CODE>. See also &#8216;<SAMP><SPAN class=samp>new (nothrow)</SPAN></SAMP>&#8217;.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fconstexpr-depth=</CODE><VAR>n</VAR></DT>
<DD><A name=index-fconstexpr-depth-147></A>Set the maximum nested evaluation depth for C++11 constexpr functions to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>. A limit is needed to detect endless recursion during constant expression evaluation. The minimum specified by the standard is 512.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdeduce-init-list</CODE></DT>
<DD><A name=index-fdeduce-init-list-148></A>Enable deduction of a template type parameter as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>std::initializer_list</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>from a brace-enclosed initializer list, i.e.<PRE style="FONT-SIZE: smaller" class=smallexample>          template &lt;class T&gt; auto forward(T t) -&gt; decltype (realfn (t))
          {
            return realfn (t);
          }
          
          void f()
          {
            forward({1,2}); // call forward&lt;std::initializer_list&lt;int&gt;&gt;
          }
</PRE>
<P>This deduction was implemented as a possible extension to the originally proposed semantics for the C++11 standard, but was not part of the final standard, so it is disabled by default. This option is deprecated, and may be removed in a future version of G++.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-ffriend-injection</CODE></DT>
<DD><A name=index-ffriend-injection-149></A>Inject friend functions into the enclosing namespace, so that they are visible outside the scope of the class in which they are declared. Friend functions were documented to work this way in the old Annotated C++ Reference Manual, and versions of G++ before 4.1 always worked that way. However, in ISO C++ a friend function that is not declared in an enclosing scope can only be found using argument dependent lookup. This option causes friends to be injected as they were in earlier releases.
<P>This option is for compatibility, and may be removed in a future release of G++.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-fno-elide-constructors</CODE></DT>
<DD><A name=index-fno-elide-constructors-150></A>The C++ standard allows an implementation to omit creating a temporary that is only used to initialize another object of the same type. Specifying this option disables that optimization, and forces G++ to call the copy constructor in all cases.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fno-enforce-eh-specs</CODE></DT>
<DD><A name=index-fno-enforce-eh-specs-151></A>Don't generate code to check for violation of exception specifications at run time. This option violates the C++ standard, but may be useful for reducing code size in production builds, much like defining &#8216;<SAMP><SPAN class=samp>NDEBUG</SPAN></SAMP>&#8217;. This does not give user code permission to throw exceptions in violation of the exception specifications; the compiler still optimizes based on the specifications, so throwing an unexpected exception results in undefined behavior at run time.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fextern-tls-init</CODE></DT>
<DT><CODE>-fno-extern-tls-init</CODE></DT>
<DD><A name=index-fextern-tls-init-152></A><A name=index-fno-extern-tls-init-153></A>The C++11 and OpenMP standards allow &#8216;<SAMP><SPAN class=samp>thread_local</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>threadprivate</SPAN></SAMP>&#8217; variables to have dynamic (runtime) initialization. To support this, any use of such a variable goes through a wrapper function that performs any necessary initialization. When the use and definition of the variable are in the same translation unit, this overhead can be optimized away, but when the use is in a different translation unit there is significant overhead even if the variable doesn't actually need dynamic initialization. If the programmer can be sure that no use of the variable in a non-defining TU needs to trigger dynamic initialization (either because the variable is statically initialized, or a use of the variable in the defining TU will be executed before any uses in another TU), they can avoid this overhead with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fno-extern-tls-init</SPAN></SAMP>option.
<P>On targets that support symbol aliases, the default is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fextern-tls-init</SPAN></SAMP>. On targets that do not support symbol aliases, the default is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fno-extern-tls-init</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-ffor-scope</CODE></DT>
<DT><CODE>-fno-for-scope</CODE></DT>
<DD><A name=index-ffor-scope-154></A><A name=index-fno-for-scope-155></A>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ffor-scope</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified, the scope of variables declared in a<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>for-init-statement</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>is limited to the &#8216;<SAMP><SPAN class=samp>for</SPAN></SAMP>&#8217; loop itself, as specified by the C++ standard. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fno-for-scope</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified, the scope of variables declared in a<SPAN class=Apple-converted-space>&nbsp;</SPAN><I>for-init-statement</I><SPAN class=Apple-converted-space>&nbsp;</SPAN>extends to the end of the enclosing scope, as was the case in old versions of G++, and other (traditional) implementations of C++.
<P>If neither flag is given, the default is to follow the standard, but to allow and give a warning for old-style code that would otherwise be invalid, or have different behavior.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-fno-gnu-keywords</CODE></DT>
<DD><A name=index-fno-gnu-keywords-156></A>Do not recognize<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>typeof</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a keyword, so that code can use this word as an identifier. You can use the keyword<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__typeof__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ansi</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>implies<SAMP><SPAN class=option>-fno-gnu-keywords</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fno-implicit-templates</CODE></DT>
<DD><A name=index-fno-implicit-templates-157></A>Never emit code for non-inline templates that are instantiated implicitly (i.e. by use); only emit code for explicit instantiations. See<A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Template-Instantiation.html#Template-Instantiation">Template Instantiation</A>, for more information.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fno-implicit-inline-templates</CODE></DT>
<DD><A name=index-fno-implicit-inline-templates-158></A>Don't emit code for implicit instantiations of inline templates, either. The default is to handle inlines differently so that compiles with and without optimization need the same set of explicit instantiations.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fno-implement-inlines</CODE></DT>
<DD><A name=index-fno-implement-inlines-159></A>To save space, do not emit out-of-line copies of inline functions controlled by &#8216;<SAMP><SPAN class=samp>#pragma implementation</SPAN></SAMP>&#8217;. This causes linker errors if these functions are not inlined everywhere they are called.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fms-extensions</CODE></DT>
<DD><A name=index-fms-extensions-160></A>Disable Wpedantic warnings about constructs used in MFC, such as implicit int and getting a pointer to member function via non-standard syntax.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fno-nonansi-builtins</CODE></DT>
<DD><A name=index-fno-nonansi-builtins-161></A>Disable built-in declarations of functions that are not mandated by ANSI/ISO C. These include<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ffs</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>alloca</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_exit</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>index</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bzero</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>conjf</CODE>, and other related functions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fnothrow-opt</CODE></DT>
<DD><A name=index-fnothrow-opt-162></A>Treat a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>throw()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>exception specification as if it were a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>noexcept</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>specification to reduce or eliminate the text size overhead relative to a function with no exception specification. If the function has local variables of types with non-trivial destructors, the exception specification actually makes the function smaller because the EH cleanups for those variables can be optimized away. The semantic effect is that an exception thrown out of a function with such an exception specification results in a call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>terminate</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>rather than<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unexpected</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fno-operator-names</CODE></DT>
<DD><A name=index-fno-operator-names-163></A>Do not treat the operator name keywords<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>and</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bitand</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bitor</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>compl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>not</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>or</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>xor</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as synonyms as keywords.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fno-optional-diags</CODE></DT>
<DD><A name=index-fno-optional-diags-164></A>Disable diagnostics that the standard says a compiler does not need to issue. Currently, the only such diagnostic issued by G++ is the one for a name having multiple meanings within a class.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fpermissive</CODE></DT>
<DD><A name=index-fpermissive-165></A>Downgrade some diagnostics about nonconformant code from errors to warnings. Thus, using<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fpermissive</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>allows some nonconforming code to compile.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fno-pretty-templates</CODE></DT>
<DD><A name=index-fno-pretty-templates-166></A>When an error message refers to a specialization of a function template, the compiler normally prints the signature of the template followed by the template arguments and any typedefs or typenames in the signature (e.g.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>void f(T) [with T = int]</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>rather than<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>void f(int)</CODE>) so that it's clear which template is involved. When an error message refers to a specialization of a class template, the compiler omits any template arguments that match the default template arguments for that template. If either of these behaviors make it harder to understand the error message rather than easier, you can use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fno-pretty-templates</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to disable them.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-frepo</CODE></DT>
<DD><A name=index-frepo-167></A>Enable automatic template instantiation at link time. This option also implies<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fno-implicit-templates</SPAN></SAMP>. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Template-Instantiation.html#Template-Instantiation">Template Instantiation</A>, for more information.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fno-rtti</CODE></DT>
<DD><A name=index-fno-rtti-168></A>Disable generation of information about every class with virtual functions for use by the C++ run-time type identification features (&#8216;<SAMP><SPAN class=samp>dynamic_cast</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>typeid</SPAN></SAMP>&#8217;). If you don't use those parts of the language, you can save some space by using this flag. Note that exception handling uses the same information, but G++ generates it as needed. The &#8216;<SAMP><SPAN class=samp>dynamic_cast</SPAN></SAMP>&#8217; operator can still be used for casts that do not require run-time type information, i.e. casts to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>void *</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or to unambiguous base classes.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fstats</CODE></DT>
<DD><A name=index-fstats-169></A>Emit statistics about front-end processing at the end of the compilation. This information is generally only useful to the G++ development team.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fstrict-enums</CODE></DT>
<DD><A name=index-fstrict-enums-170></A>Allow the compiler to optimize using the assumption that a value of enumerated type can only be one of the values of the enumeration (as defined in the C++ standard; basically, a value that can be represented in the minimum number of bits needed to represent all the enumerators). This assumption may not be valid if the program uses a cast to convert an arbitrary integer value to the enumerated type.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-ftemplate-backtrace-limit=</CODE><VAR>n</VAR></DT>
<DD><A name=index-ftemplate-backtrace-limit-171></A>Set the maximum number of template instantiation notes for a single warning or error to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>. The default value is 10.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-ftemplate-depth=</CODE><VAR>n</VAR></DT>
<DD><A name=index-ftemplate-depth-172></A>Set the maximum instantiation depth for template classes to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>. A limit on the template instantiation depth is needed to detect endless recursions during template class instantiation. ANSI/ISO C++ conforming programs must not rely on a maximum depth greater than 17 (changed to 1024 in C++11). The default value is 900, as the compiler can run out of stack space before hitting 1024 in some situations.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fno-threadsafe-statics</CODE></DT>
<DD><A name=index-fno-threadsafe-statics-173></A>Do not emit the extra code to use the routines specified in the C++ ABI for thread-safe initialization of local statics. You can use this option to reduce code size slightly in code that doesn't need to be thread-safe.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fuse-cxa-atexit</CODE></DT>
<DD><A name=index-fuse-cxa-atexit-174></A>Register destructors for objects with static storage duration with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__cxa_atexit</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function rather than the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atexit</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function. This option is required for fully standards-compliant handling of static destructors, but only works if your C library supports<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__cxa_atexit</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fno-use-cxa-get-exception-ptr</CODE></DT>
<DD><A name=index-fno-use-cxa-get-exception-ptr-175></A>Don't use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__cxa_get_exception_ptr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>runtime routine. This causes<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>std::uncaught_exception</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to be incorrect, but is necessary if the runtime routine is not available.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fvisibility-inlines-hidden</CODE></DT>
<DD><A name=index-fvisibility-inlines-hidden-176></A>This switch declares that the user does not attempt to compare pointers to inline functions or methods where the addresses of the two functions are taken in different shared objects.
<P>The effect of this is that GCC may, effectively, mark inline methods with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__attribute__ ((visibility ("hidden")))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>so that they do not appear in the export table of a DSO and do not require a PLT indirection when used within the DSO. Enabling this option can have a dramatic effect on load and link times of a DSO as it massively reduces the size of the dynamic export table when the library makes heavy use of templates.</P>
<P>The behavior of this switch is not quite the same as marking the methods as hidden directly, because it does not affect static variables local to the function or cause the compiler to deduce that the function is defined in only one shared object.</P>
<P>You may mark a method as having a visibility explicitly to negate the effect of the switch for that method. For example, if you do want to compare pointers to a particular inline method, you might mark it as having default visibility. Marking the enclosing class with explicit visibility has no effect.</P>
<P>Explicitly instantiated inline methods are unaffected by this option as their linkage might otherwise cross a shared library boundary. See<A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Template-Instantiation.html#Template-Instantiation">Template Instantiation</A>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-fvisibility-ms-compat</CODE></DT>
<DD><A name=index-fvisibility-ms-compat-177></A>This flag attempts to use visibility settings to make GCC's C++ linkage model compatible with that of Microsoft Visual Studio.
<P>The flag makes these changes to GCC's linkage model:</P>
<OL type=1>
<LI>It sets the default visibility to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hidden</CODE>, like<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fvisibility=hidden</SPAN></SAMP>.</LI>
<LI>Types, but not their members, are not hidden by default.</LI>
<LI>The One Definition Rule is relaxed for types without explicit visibility specifications that are defined in more than one shared object: those declarations are permitted if they are permitted when this option is not used.</LI></OL>
<P>In new code it is better to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fvisibility=hidden</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and export those classes that are intended to be externally visible. Unfortunately it is possible for code to rely, perhaps accidentally, on the Visual Studio behavior.</P>
<P>Among the consequences of these changes are that static data members of the same type with the same name but defined in different shared objects are different, so changing one does not change the other; and that pointers to function members defined in different shared objects may not compare equal. When this flag is given, it is a violation of the ODR to define types with the same name differently.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-fvtable-verify=</CODE><VAR>std|preinit|none</VAR></DT>
<DD><A name=index-fvtable-verify-178></A>Turn on (or off, if using<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fvtable-verify=none</SPAN></SAMP>) the security feature that verifies at runtime, for every virtual call that is made, that the vtable pointer through which the call is made is valid for the type of the object, and has not been corrupted or overwritten. If an invalid vtable pointer is detected (at runtime), an error is reported and execution of the program is immediately halted.
<P>This option causes runtime data structures to be built, at program start up, for verifying the vtable pointers. The options<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>std</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>preinit</CODE>control the timing of when these data structures are built. In both cases the data structures are built before execution reaches 'main'. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fvtable-verify=std</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>causes these data structure to be built after the shared libraries have been loaded and initialized.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fvtable-verify=preinit</SPAN></SAMP>causes them to be built before the shared libraries have been loaded and initialized.</P>
<P>If this option appears multiple times in the compiler line, with different values specified, 'none' will take highest priority over both 'std' and 'preinit'; 'preinit' will take priority over 'std'.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-fvtv-debug</CODE></DT>
<DD><A name=index-g_t_0028fvtv-debug_0029-179></A>Causes debug versions of the runtime functions for the vtable verification feature to be called. This assumes the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fvtable-verify=std</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fvtable-verify=preinit</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>has been used. This flag will also cause the compiler to keep track of which vtable pointers it found for each class, and record that information in the file &#8220;vtv_set_ptr_data.log&#8221;, in the dump file directory on the user's machine.
<P>Note: This feature APPENDS data to the log file. If you want a fresh log file, be sure to delete any existing one.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-fvtv-counts</CODE></DT>
<DD><A name=index-fvtv-counts-180></A>This is a debugging flag. When used in conjunction with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fvtable-verify=std</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fvtable-verify=preinit</SPAN></SAMP>, this causes the compiler to keep track of the total number of virtual calls it encountered and the number of verifications it inserted. It also counts the number of calls to certain runtime library functions that it inserts. This information, for each compilation unit, is written to a file named &#8220;vtv_count_data.log&#8221;, in the dump_file directory on the user's machine. It also counts the size of the vtable pointer sets for each class, and writes this information to &#8220;vtv_class_set_sizes.log&#8221; in the same directory.
<P>Note: This feature APPENDS data to the log files. To get a fresh log files, be sure to delete any existing ones.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-fno-weak</CODE></DT>
<DD><A name=index-fno-weak-181></A>Do not use weak symbol support, even if it is provided by the linker. By default, G++ uses weak symbols if they are available. This option exists only for testing, and should not be used by end-users; it results in inferior code and has no benefits. This option may be removed in a future release of G++.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-nostdinc++</CODE></DT>
<DD><A name=index-nostdinc_002b_002b-182></A>Do not search for header files in the standard directories specific to C++, but do still search the other standard directories. (This option is used when building the C++ library.)</DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In addition, these optimization, warning, and code generation options have meanings only for C++ programs:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>-Wabi<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C, Objective-C, C++ and Objective-C++ only)</SPAN></DT>
<DD><A name=index-Wabi-183></A><A name=index-Wno-abi-184></A>Warn when G++ generates code that is probably not compatible with the vendor-neutral C++ ABI. Although an effort has been made to warn about all such cases, there are probably some cases that are not warned about, even though G++ is generating incompatible code. There may also be cases where warnings are emitted even though the code that is generated is compatible.
<P>You should rewrite your code to avoid these warnings if you are concerned about the fact that code generated by G++ may not be binary compatible with code generated by other compilers.</P>
<P>The known incompatibilities in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fabi-version=2</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>(the default) include:</P>
<UL>
<LI>A template with a non-type template parameter of reference type is mangled incorrectly:<PRE style="FONT-SIZE: smaller" class=smallexample>               extern int N;
               template &lt;int &amp;&gt; struct S {};
               void n (S&lt;N&gt;) {2}
</PRE>
<P>This is fixed in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fabi-version=3</SPAN></SAMP>.</P></LI>
<LI>SIMD vector types declared using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__attribute ((vector_size))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are mangled in a non-standard way that does not allow for overloading of functions taking vectors of different sizes.
<P>The mangling is changed in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fabi-version=4</SPAN></SAMP>.</P></LI></UL>
<P>The known incompatibilities in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fabi-version=1</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>include:</P>
<UL>
<LI>Incorrect handling of tail-padding for bit-fields. G++ may attempt to pack data into the same byte as a base class. For example:<PRE style="FONT-SIZE: smaller" class=smallexample>               struct A { virtual void f(); int f1 : 1; };
               struct B : public A { int f2 : 1; };
</PRE>
<P class=noindent>In this case, G++ places<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>B::f2</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>into the same byte as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>A::f1</CODE>; other compilers do not. You can avoid this problem by explicitly padding<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>A</CODE>so that its size is a multiple of the byte size on your platform; that causes G++ and other compilers to lay out<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>B</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>identically.</P></LI>
<LI>Incorrect handling of tail-padding for virtual bases. G++ does not use tail padding when laying out virtual bases. For example:<PRE style="FONT-SIZE: smaller" class=smallexample>               struct A { virtual void f(); char c1; };
               struct B { B(); char c2; };
               struct C : public A, public virtual B {};
</PRE>
<P class=noindent>In this case, G++ does not place<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>B</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>into the tail-padding for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>A</CODE>; other compilers do. You can avoid this problem by explicitly padding<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>A</CODE>so that its size is a multiple of its alignment (ignoring virtual base classes); that causes G++ and other compilers to lay out<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>C</CODE>identically.</P></LI>
<LI>Incorrect handling of bit-fields with declared widths greater than that of their underlying types, when the bit-fields appear in a union. For example:<PRE style="FONT-SIZE: smaller" class=smallexample>               union U { int i : 4096; };
</PRE>
<P class=noindent>Assuming that an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not have 4096 bits, G++ makes the union too small by the number of bits in an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int</CODE>.</P></LI>
<LI>Empty classes can be placed at incorrect offsets. For example:<PRE style="FONT-SIZE: smaller" class=smallexample>               struct A {};
               
               struct B {
                 A a;
                 virtual void f ();
               };
               
               struct C : public B, public A {};
</PRE>
<P class=noindent>G++ places the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>A</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>base class of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>C</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>at a nonzero offset; it should be placed at offset zero. G++ mistakenly believes that the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>A</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>data member of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>B</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is already at offset zero.</P></LI>
<LI>Names of template functions whose types involve<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>typename</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or template template parameters can be mangled incorrectly.<PRE style="FONT-SIZE: smaller" class=smallexample>               template &lt;typename Q&gt;
               void f(typename Q::X) {}
               
               template &lt;template &lt;typename&gt; class Q&gt;
               void f(typename Q&lt;int&gt;::X) {}
</PRE>
<P class=noindent>Instantiations of these templates may be mangled incorrectly.</P></LI></UL>
<P>It also warns about psABI-related changes. The known psABI changes at this point include:</P>
<UL>
<LI>For SysV/x86-64, unions with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long double</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>members are passed in memory as specified in psABI. For example:<PRE style="FONT-SIZE: smaller" class=smallexample>               union U {
                 long double ld;
                 int i;
               };
</PRE>
<P class=noindent><CODE>union U</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is always passed in memory.</P></LI></UL><BR></DD>
<DT><CODE>-Wctor-dtor-privacy<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C++ and Objective-C++ only)</SPAN></DT>
<DD><A name=index-Wctor-dtor-privacy-185></A><A name=index-Wno-ctor-dtor-privacy-186></A>Warn when a class seems unusable because all the constructors or destructors in that class are private, and it has neither friends nor public static member functions. Also warn if there are no non-private methods, and there's at least one private member function that isn't a constructor or destructor.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-Wdelete-non-virtual-dtor<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C++ and Objective-C++ only)</SPAN></DT>
<DD><A name=index-Wdelete-non-virtual-dtor-187></A><A name=index-Wno-delete-non-virtual-dtor-188></A>Warn when &#8216;<SAMP><SPAN class=samp>delete</SPAN></SAMP>&#8217; is used to destroy an instance of a class that has virtual functions and non-virtual destructor. It is unsafe to delete an instance of a derived class through a pointer to a base class if the base class does not have a virtual destructor. This warning is enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-Wliteral-suffix<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C++ and Objective-C++ only)</SPAN></DT>
<DD><A name=index-Wliteral-suffix-189></A><A name=index-Wno-literal-suffix-190></A>Warn when a string or character literal is followed by a ud-suffix which does not begin with an underscore. As a conforming extension, GCC treats such suffixes as separate preprocessing tokens in order to maintain backwards compatibility with code that uses formatting macros from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;inttypes.h&gt;</CODE>. For example:<PRE style="FONT-SIZE: smaller" class=smallexample>          #define __STDC_FORMAT_MACROS
          #include &lt;inttypes.h&gt;
          #include &lt;stdio.h&gt;
          
          int main() {
            int64_t i64 = 123;
            printf("My int64: %"PRId64"\n", i64);
          }
</PRE>
<P>In this case,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>PRId64</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is treated as a separate preprocessing token.</P>
<P>This warning is enabled by default.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-Wnarrowing<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C++ and Objective-C++ only)</SPAN></DT>
<DD><A name=index-Wnarrowing-191></A><A name=index-Wno-narrowing-192></A>Warn when a narrowing conversion prohibited by C++11 occurs within &#8216;<SAMP><SPAN class=samp>{ }</SPAN></SAMP>&#8217;, e.g.<PRE style="FONT-SIZE: smaller" class=smallexample>          int i = { 2.2 }; // error: narrowing from double to int
</PRE>
<P>This flag is included in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wc++11-compat</SPAN></SAMP>.</P>
<P>With<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-std=c++11</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wno-narrowing</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>suppresses the diagnostic required by the standard. Note that this does not affect the meaning of well-formed code; narrowing conversions are still considered ill-formed in SFINAE context.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-Wnoexcept<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C++ and Objective-C++ only)</SPAN></DT>
<DD><A name=index-Wnoexcept-193></A><A name=index-Wno-noexcept-194></A>Warn when a noexcept-expression evaluates to false because of a call to a function that does not have a non-throwing exception specification (i.e. &#8216;<SAMP><SPAN class=samp>throw()</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>noexcept</SPAN></SAMP>&#8217;) but is known by the compiler to never throw an exception.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-Wnon-virtual-dtor<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C++ and Objective-C++ only)</SPAN></DT>
<DD><A name=index-Wnon-virtual-dtor-195></A><A name=index-Wno-non-virtual-dtor-196></A>Warn when a class has virtual functions and an accessible non-virtual destructor itself or in an accessible polymorphic base class, in which case it is possible but unsafe to delete an instance of a derived class through a pointer to the class itself or base class. This warning is automatically enabled if<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Weffc++</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-Wreorder<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C++ and Objective-C++ only)</SPAN></DT>
<DD><A name=index-Wreorder-197></A><A name=index-Wno-reorder-198></A><A name=index-reordering_002c-warning-199></A><A name=index-warning-for-reordering-of-member-initializers-200></A>Warn when the order of member initializers given in the code does not match the order in which they must be executed. For instance:<PRE style="FONT-SIZE: smaller" class=smallexample>          struct A {
            int i;
            int j;
            A(): j (0), i (1) { }
          };
</PRE>
<P class=noindent>The compiler rearranges the member initializers for &#8216;<SAMP><SPAN class=samp>i</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>j</SPAN></SAMP>&#8217; to match the declaration order of the members, emitting a warning to that effect. This warning is enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-fext-numeric-literals<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C++ and Objective-C++ only)</SPAN></DT>
<DD><A name=index-fext-numeric-literals-201></A><A name=index-fno-ext-numeric-literals-202></A>Accept imaginary, fixed-point, or machine-defined literal number suffixes as GNU extensions. When this option is turned off these suffixes are treated as C++11 user-defined literal numeric suffixes. This is on by default for all pre-C++11 dialects and all GNU dialects:<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-std=c++98</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-std=gnu++98</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-std=gnu++11</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-std=gnu++1y</SPAN></SAMP>. This option is off by default for ISO C++11 onwards (<SAMP><SPAN class=option>-std=c++11</SPAN></SAMP>, ...).</DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-W...</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options are not affected by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>-Weffc++<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C++ and Objective-C++ only)</SPAN></DT>
<DD><A name=index-Weffc_002b_002b-203></A><A name=index-Wno-effc_002b_002b-204></A>Warn about violations of the following style guidelines from Scott Meyers'<SPAN class=Apple-converted-space>&nbsp;</SPAN><CITE>Effective C++</CITE><SPAN class=Apple-converted-space>&nbsp;</SPAN>series of books:
<UL>
<LI>Define a copy constructor and an assignment operator for classes with dynamically-allocated memory.</LI>
<LI>Prefer initialization to assignment in constructors.</LI>
<LI>Have<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>operator=</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>return a reference to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*this</CODE>.</LI>
<LI>Don't try to return a reference when you must return an object.</LI>
<LI>Distinguish between prefix and postfix forms of increment and decrement operators.</LI>
<LI>Never overload<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;&amp;</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>||</CODE>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>,</CODE>.</LI></UL>
<P>This option also enables<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wnon-virtual-dtor</SPAN></SAMP>, which is also one of the effective C++ recommendations. However, the check is extended to warn about the lack of virtual destructor in accessible non-polymorphic bases classes too.</P>
<P>When selecting this option, be aware that the standard library headers do not obey all of these guidelines; use &#8216;<SAMP><SPAN class=samp>grep -v</SPAN></SAMP>&#8217; to filter out those warnings.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-Wstrict-null-sentinel<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C++ and Objective-C++ only)</SPAN></DT>
<DD><A name=index-Wstrict-null-sentinel-205></A><A name=index-Wno-strict-null-sentinel-206></A>Warn about the use of an uncasted<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as sentinel. When compiling only with GCC this is a valid sentinel, as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is defined to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__null</CODE>. Although it is a null pointer constant rather than a null pointer, it is guaranteed to be of the same size as a pointer. But this use is not portable across different compilers.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-Wno-non-template-friend<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C++ and Objective-C++ only)</SPAN></DT>
<DD><A name=index-Wno-non-template-friend-207></A><A name=index-Wnon-template-friend-208></A>Disable warnings when non-templatized friend functions are declared within a template. Since the advent of explicit template specification support in G++, if the name of the friend is an unqualified-id (i.e., &#8216;<SAMP><SPAN class=samp>friend foo(int)</SPAN></SAMP>&#8217;), the C++ language specification demands that the friend declare or define an ordinary, nontemplate function. (Section 14.5.3). Before G++ implemented explicit specification, unqualified-ids could be interpreted as a particular specialization of a templatized function. Because this non-conforming behavior is no longer the default behavior for G++,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wnon-template-friend</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>allows the compiler to check existing code for potential trouble spots and is on by default. This new compiler behavior can be turned off with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wno-non-template-friend</SPAN></SAMP>, which keeps the conformant compiler code but disables the helpful warning.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-Wold-style-cast<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C++ and Objective-C++ only)</SPAN></DT>
<DD><A name=index-Wold-style-cast-209></A><A name=index-Wno-old-style-cast-210></A>Warn if an old-style (C-style) cast to a non-void type is used within a C++ program. The new-style casts (&#8216;<SAMP><SPAN class=samp>dynamic_cast</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>static_cast</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>reinterpret_cast</SPAN></SAMP>&#8217;, and &#8216;<SAMP><SPAN class=samp>const_cast</SPAN></SAMP>&#8217;) are less vulnerable to unintended effects and much easier to search for.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-Woverloaded-virtual<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C++ and Objective-C++ only)</SPAN></DT>
<DD><A name=index-Woverloaded-virtual-211></A><A name=index-Wno-overloaded-virtual-212></A><A name=index-overloaded-virtual-function_002c-warning-213></A><A name=index-warning-for-overloaded-virtual-function-214></A>Warn when a function declaration hides virtual functions from a base class. For example, in:<PRE style="FONT-SIZE: smaller" class=smallexample>          struct A {
            virtual void f();
          };
          
          struct B: public A {
            void f(int);
          };
</PRE>
<P>the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>A</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>class version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is hidden in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>B</CODE>, and code like:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          B* b;
          b-&gt;f();
</PRE>
<P class=noindent>fails to compile.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-Wno-pmf-conversions<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C++ and Objective-C++ only)</SPAN></DT>
<DD><A name=index-Wno-pmf-conversions-215></A><A name=index-Wpmf-conversions-216></A>Disable the diagnostic for converting a bound pointer to member function to a plain pointer.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-Wsign-promo<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C++ and Objective-C++ only)</SPAN></DT>
<DD><A name=index-Wsign-promo-217></A><A name=index-Wno-sign-promo-218></A>Warn when overload resolution chooses a promotion from unsigned or enumerated type to a signed type, over a conversion to an unsigned type of the same size. Previous versions of G++ tried to preserve unsignedness, but the standard mandates the current behavior.</DD></DL>