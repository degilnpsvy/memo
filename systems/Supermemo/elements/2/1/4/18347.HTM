<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>3.8 Options to Request or Suppress Warnings</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-options-to-control-warnings-265></A><A name=index-warning-messages-266></A><A name=index-messages_002c-warning-267></A><A name=index-suppressing-warnings-268></A>Warnings are diagnostic messages that report constructions that are not inherently erroneous but that are risky or suggest there may have been an error.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The following language-independent options do not enable specific warnings but control the kinds of diagnostics produced by GCC.<A name=index-syntax-checking-269></A></P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>-fsyntax-only</CODE> 
<DD><A name=index-fsyntax-only-270></A>Check the code for syntax errors, but don't do anything beyond that.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-fmax-errors=</CODE><VAR>n</VAR> 
<DD><A name=index-fmax-errors-271></A>Limits the maximum number of error messages to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>, at which point GCC bails out rather than attempting to continue processing the source code. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 0 (the default), there is no limit on the number of error messages produced. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wfatal-errors</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is also specified, then<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wfatal-errors</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>takes precedence over this option.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-w</CODE> 
<DD><A name=index-w-272></A>Inhibit all warning messages.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Werror</CODE> 
<DD><A name=index-Werror-273></A><A name=index-Wno-error-274></A>Make all warnings into errors.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Werror=</CODE> 
<DD><A name=index-Werror_003d-275></A><A name=index-Wno-error_003d-276></A>Make the specified warning into an error. The specifier for a warning is appended; for example<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Werror=switch</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>turns the warnings controlled by<SAMP><SPAN class=option>-Wswitch</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>into errors. This switch takes a negative form, to be used to negate<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Werror</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>for specific warnings; for example<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wno-error=switch</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>makes<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wswitch</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>warnings not be errors, even when<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Werror</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is in effect. 
<P>The warning message for each controllable warning includes the option that controls the warning. That option can then be used with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Werror=</SPAN></SAMP>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wno-error=</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>as described above. (Printing of the option in the warning message can be disabled using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fno-diagnostics-show-option</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>flag.)</P>
<P>Note that specifying<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Werror=</SPAN></SAMP><VAR>foo</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>automatically implies<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-W</SPAN></SAMP><VAR>foo</VAR>. However,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wno-error=</SPAN></SAMP><VAR>foo</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not imply anything.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-Wfatal-errors</CODE> 
<DD><A name=index-Wfatal-errors-277></A><A name=index-Wno-fatal-errors-278></A>This option causes the compiler to abort compilation on the first error occurred rather than trying to keep going and printing further error messages.</DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">You can request many specific warnings with options beginning with &#8216;<SAMP><SPAN class=samp>-W</SPAN></SAMP>&#8217;, for example<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wimplicit</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to request warnings on implicit declarations. Each of these specific warning options also has a negative form beginning &#8216;<SAMP><SPAN class=samp>-Wno-</SPAN></SAMP>&#8217; to turn off warnings; for example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wno-implicit</SPAN></SAMP>. This manual lists only one of the two forms, whichever is not the default. For further language-specific options also refer to<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/C_002b_002b-Dialect-Options.html#C_002b_002b-Dialect-Options">C++ Dialect Options</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Objective-C-and-Objective-C_002b_002b-Dialect-Options.html#Objective-C-and-Objective-C_002b_002b-Dialect-Options">Objective-C and Objective-C++ Dialect Options</A>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When an unrecognized warning option is requested (e.g.,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wunknown-warning</SPAN></SAMP>), GCC emits a diagnostic stating that the option is not recognized. However, if the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wno-</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>form is used, the behavior is slightly different: no diagnostic is produced for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wno-unknown-warning</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>unless other diagnostics are being produced. This allows the use of new<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wno-</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options with old compilers, but if something goes wrong, the compiler warns that an unrecognized option is present.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>-Wpedantic</CODE> 
<DT><CODE>-pedantic</CODE> 
<DD><A name=index-pedantic-279></A><A name=index-Wpedantic-280></A>Issue all the warnings demanded by strict ISO C and ISO C++; reject all programs that use forbidden extensions, and some other programs that do not follow ISO C and ISO C++. For ISO C, follows the version of the ISO C standard specified by any<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-std</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option used. 
<P>Valid ISO C and ISO C++ programs should compile properly with or without this option (though a rare few require<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ansi</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-std</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option specifying the required version of ISO C). However, without this option, certain GNU extensions and traditional C and C++ features are supported as well. With this option, they are rejected.</P>
<P><SAMP><SPAN class=option>-Wpedantic</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not cause warning messages for use of the alternate keywords whose names begin and end with &#8216;<SAMP><SPAN class=samp>__</SPAN></SAMP>&#8217;. Pedantic warnings are also disabled in the expression that follows<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__extension__</CODE>. However, only system header files should use these escape routes; application programs should avoid them. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Alternate-Keywords.html#Alternate-Keywords">Alternate Keywords</A>.</P>
<P>Some users try to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wpedantic</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to check programs for strict ISO C conformance. They soon find that it does not do quite what they want: it finds some non-ISO practices, but not all&#8212;only those for which ISO C<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>requires</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>a diagnostic, and some others for which diagnostics have been added.</P>
<P>A feature to report any failure to conform to ISO C might be useful in some instances, but would require considerable additional work and would be quite different from<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wpedantic</SPAN></SAMP>. We don't have plans to support such a feature in the near future.</P>
<P>Where the standard specified with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-std</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>represents a GNU extended dialect of C, such as &#8216;<SAMP><SPAN class=samp>gnu90</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>gnu99</SPAN></SAMP>&#8217;, there is a corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><DFN>base standard</DFN>, the version of ISO C on which the GNU extended dialect is based. Warnings from<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wpedantic</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>are given where they are required by the base standard. (It does not make sense for such warnings to be given only for features not in the specified GNU C dialect, since by definition the GNU dialects of C include all features the compiler supports with the given option, and there would be nothing to warn about.)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-pedantic-errors</CODE> 
<DD><A name=index-pedantic-errors-281></A>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wpedantic</SPAN></SAMP>, except that errors are produced rather than warnings.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wall</CODE> 
<DD><A name=index-Wall-282></A><A name=index-Wno-all-283></A>This enables all the warnings about constructions that some users consider questionable, and that are easy to avoid (or modify to prevent the warning), even in conjunction with macros. This also enables some language-specific warnings described in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/C_002b_002b-Dialect-Options.html#C_002b_002b-Dialect-Options">C++ Dialect Options</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Objective-C-and-Objective-C_002b_002b-Dialect-Options.html#Objective-C-and-Objective-C_002b_002b-Dialect-Options">Objective-C and Objective-C++ Dialect Options</A>. 
<P><SAMP><SPAN class=option>-Wall</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>turns on the following warning flags:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          -Waddress   
          -Warray-bounds <SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(only with</SPAN> <SAMP><SPAN class=option>-O2</SPAN></SAMP><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>)</SPAN>  
          -Wc++11-compat  
          -Wchar-subscripts  
          -Wenum-compare <SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(in C/ObjC; this is on by default in C++)</SPAN> 
          -Wimplicit-int <SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C and Objective-C only)</SPAN> 
          -Wimplicit-function-declaration <SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C and Objective-C only)</SPAN> 
          -Wcomment  
          -Wformat   
          -Wmain <SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(only for C/ObjC and unless</SPAN> <SAMP><SPAN class=option>-ffreestanding</SPAN></SAMP><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>)</SPAN>  
          -Wmaybe-uninitialized 
          -Wmissing-braces <SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(only for C/ObjC)</SPAN> 
          -Wnonnull  
          -Wopenmp-simd 
          -Wparentheses  
          -Wpointer-sign  
          -Wreorder   
          -Wreturn-type  
          -Wsequence-point  
          -Wsign-compare <SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(only in C++)</SPAN>  
          -Wstrict-aliasing  
          -Wstrict-overflow=1  
          -Wswitch  
          -Wtrigraphs  
          -Wuninitialized  
          -Wunknown-pragmas  
          -Wunused-function  
          -Wunused-label     
          -Wunused-value     
          -Wunused-variable  
          -Wvolatile-register-var 
          
</PRE>
<P>Note that some warning flags are not implied by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP>. Some of them warn about constructions that users generally do not consider questionable, but which occasionally you might wish to check for; others warn about constructions that are necessary or hard to avoid in some cases, and there is no simple way to modify the code to suppress the warning. Some of them are enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wextra</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>but many of them must be enabled individually.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-Wextra</CODE> 
<DD><A name=index-W-284></A><A name=index-Wextra-285></A><A name=index-Wno-extra-286></A>This enables some extra warning flags that are not enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP>. (This option used to be called<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-W</SPAN></SAMP>. The older name is still supported, but the newer name is more descriptive.)<PRE style="FONT-SIZE: smaller" class=smallexample>          -Wclobbered  
          -Wempty-body  
          -Wignored-qualifiers 
          -Wmissing-field-initializers  
          -Wmissing-parameter-type <SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C only)</SPAN>  
          -Wold-style-declaration <SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C only)</SPAN>  
          -Woverride-init  
          -Wsign-compare  
          -Wtype-limits  
          -Wuninitialized  
          -Wunused-parameter <SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(only with</SPAN> <SAMP><SPAN class=option>-Wunused</SPAN></SAMP> <SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>or</SPAN> <SAMP><SPAN class=option>-Wall</SPAN></SAMP><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>)</SPAN> 
          -Wunused-but-set-parameter <SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(only with</SPAN> <SAMP><SPAN class=option>-Wunused</SPAN></SAMP> <SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>or</SPAN> <SAMP><SPAN class=option>-Wall</SPAN></SAMP><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>)</SPAN>  
          
</PRE>
<P>The option<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wextra</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>also prints warning messages for the following cases:</P>
<UL>
<LI>A pointer is compared against integer zero with &#8216;<SAMP><SPAN class=samp>&lt;</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>&lt;=</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>&gt;</SPAN></SAMP>&#8217;, or &#8216;<SAMP><SPAN class=samp>&gt;=</SPAN></SAMP>&#8217;. 
<LI>(C++ only) An enumerator and a non-enumerator both appear in a conditional expression. 
<LI>(C++ only) Ambiguous virtual bases. 
<LI>(C++ only) Subscripting an array that has been declared &#8216;<SAMP><SPAN class=samp>register</SPAN></SAMP>&#8217;. 
<LI>(C++ only) Taking the address of a variable that has been declared &#8216;<SAMP><SPAN class=samp>register</SPAN></SAMP>&#8217;. 
<LI>(C++ only) A base class is not initialized in a derived class's copy constructor.</LI></UL><BR>
<DT><CODE>-Wchar-subscripts</CODE> 
<DD><A name=index-Wchar-subscripts-287></A><A name=index-Wno-char-subscripts-288></A>Warn if an array subscript has type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char</CODE>. This is a common cause of error, as programmers often forget that this type is signed on some machines. This warning is enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wcomment</CODE> 
<DD><A name=index-Wcomment-289></A><A name=index-Wno-comment-290></A>Warn whenever a comment-start sequence &#8216;<SAMP><SPAN class=samp>/*</SPAN></SAMP>&#8217; appears in a &#8216;<SAMP><SPAN class=samp>/*</SPAN></SAMP>&#8217; comment, or whenever a Backslash-Newline appears in a &#8216;<SAMP><SPAN class=samp>//</SPAN></SAMP>&#8217; comment. This warning is enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wno-coverage-mismatch</CODE> 
<DD><A name=index-Wno-coverage-mismatch-291></A>Warn if feedback profiles do not match when using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fprofile-use</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option. If a source file is changed between compiling with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fprofile-gen</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fprofile-use</SPAN></SAMP>, the files with the profile feedback can fail to match the source file and GCC cannot use the profile feedback information. By default, this warning is enabled and is treated as an error.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wno-coverage-mismatch</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be used to disable the warning or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wno-error=coverage-mismatch</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be used to disable the error. Disabling the error for this warning can result in poorly optimized code and is useful only in the case of very minor changes such as bug fixes to an existing code-base. Completely disabling the warning is not recommended.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wno-cpp</CODE> 
<DD><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C, Objective-C, C++, Objective-C++ and Fortran only)</SPAN> 
<P>Suppress warning messages emitted by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#warning</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>directives.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-Wdouble-promotion<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C, C++, Objective-C and Objective-C++ only)</SPAN> 
<DD><A name=index-Wdouble-promotion-292></A><A name=index-Wno-double-promotion-293></A>Give a warning when a value of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>float</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is implicitly promoted to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>double</CODE>. CPUs with a 32-bit &#8220;single-precision&#8221; floating-point unit implement<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>float</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in hardware, but emulate<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>double</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in software. On such a machine, doing computations using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>double</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>values is much more expensive because of the overhead required for software emulation. 
<P>It is easy to accidentally do computations with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>double</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>because floating-point literals are implicitly of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>double</CODE>. For example, in:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          float area(float radius)
          {
             return 3.14159 * radius * radius;
          }
</PRE>
<P>the compiler performs the entire computation with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>double</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>because the floating-point literal is a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>double</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-Wformat</CODE> 
<DT><CODE>-Wformat=</CODE><VAR>n</VAR> 
<DD><A name=index-Wformat-294></A><A name=index-Wno-format-295></A><A name=index-ffreestanding-296></A><A name=index-fno-builtin-297></A><A name=index-Wformat_003d-298></A>Check calls to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>printf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scanf</CODE>, etc., to make sure that the arguments supplied have types appropriate to the format string specified, and that the conversions specified in the format string make sense. This includes standard functions, and others specified by format attributes (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Function-Attributes.html#Function-Attributes">Function Attributes</A>), in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>printf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scanf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strftime</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strfmon</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(an X/Open extension, not in the C standard) families (or other target-specific families). Which functions are checked without format attributes having been specified depends on the standard version selected, and such checks of functions without the attribute specified are disabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ffreestanding</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fno-builtin</SPAN></SAMP>. 
<P>The formats are checked against the format features supported by GNU libc version 2.2. These include all ISO C90 and C99 features, as well as features from the Single Unix Specification and some BSD and GNU extensions. Other library implementations may not support all these features; GCC does not support warning about features that go beyond a particular library's limitations. However, if<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wpedantic</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used with<SAMP><SPAN class=option>-Wformat</SPAN></SAMP>, warnings are given about format features not in the selected standard version (but not for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strfmon</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>formats, since those are not in any version of the C standard). See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/C-Dialect-Options.html#C-Dialect-Options">Options Controlling C Dialect</A>.</P>
<DL>
<DT><CODE>-Wformat=1</CODE> 
<DT><CODE>-Wformat</CODE> 
<DD><A name=index-Wformat-299></A><A name=index-Wformat_003d1-300></A>Option<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wformat</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wformat=1</SPAN></SAMP>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wno-format</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wformat=0</SPAN></SAMP>. Since<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wformat</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>also checks for null format arguments for several functions,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wformat</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>also implies<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wnonnull</SPAN></SAMP>. Some aspects of this level of format checking can be disabled by the options:<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wno-format-contains-nul</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wno-format-extra-args</SPAN></SAMP>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wno-format-zero-length</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wformat</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wno-format-contains-nul</CODE> 
<DD><A name=index-Wno-format-contains-nul-301></A><A name=index-Wformat-contains-nul-302></A>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wformat</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified, do not warn about format strings that contain NUL bytes.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wno-format-extra-args</CODE> 
<DD><A name=index-Wno-format-extra-args-303></A><A name=index-Wformat-extra-args-304></A>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wformat</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified, do not warn about excess arguments to a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>printf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scanf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>format function. The C standard specifies that such arguments are ignored. 
<P>Where the unused arguments lie between used arguments that are specified with &#8216;<SAMP><SPAN class=samp>$</SPAN></SAMP>&#8217; operand number specifications, normally warnings are still given, since the implementation could not know what type to pass to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>va_arg</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to skip the unused arguments. However, in the case of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scanf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>formats, this option suppresses the warning if the unused arguments are all pointers, since the Single Unix Specification says that such unused arguments are allowed.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-Wno-format-zero-length</CODE> 
<DD><A name=index-Wno-format-zero-length-305></A><A name=index-Wformat-zero-length-306></A>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wformat</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified, do not warn about zero-length formats. The C standard specifies that zero-length formats are allowed.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wformat=2</CODE> 
<DD><A name=index-Wformat_003d2-307></A>Enable<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wformat</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>plus additional format checks. Currently equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wformat -Wformat-nonliteral -Wformat-security -Wformat-y2k</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wformat-nonliteral</CODE> 
<DD><A name=index-Wformat-nonliteral-308></A><A name=index-Wno-format-nonliteral-309></A>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wformat</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified, also warn if the format string is not a string literal and so cannot be checked, unless the format function takes its format arguments as a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>va_list</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wformat-security</CODE> 
<DD><A name=index-Wformat-security-310></A><A name=index-Wno-format-security-311></A>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wformat</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified, also warn about uses of format functions that represent possible security problems. At present, this warns about calls to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>printf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scanf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>functions where the format string is not a string literal and there are no format arguments, as in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>printf (foo);</CODE>. This may be a security hole if the format string came from untrusted input and contains &#8216;<SAMP><SPAN class=samp>%n</SPAN></SAMP>&#8217;. (This is currently a subset of what<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wformat-nonliteral</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>warns about, but in future warnings may be added to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wformat-security</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>that are not included in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wformat-nonliteral</SPAN></SAMP>.)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wformat-y2k</CODE> 
<DD><A name=index-Wformat-y2k-312></A><A name=index-Wno-format-y2k-313></A>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wformat</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified, also warn about<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strftime</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>formats that may yield only a two-digit year.</DD></DL><BR>
<DT><CODE>-Wnonnull</CODE> 
<DD><A name=index-Wnonnull-314></A><A name=index-Wno-nonnull-315></A>Warn about passing a null pointer for arguments marked as requiring a non-null value by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nonnull</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function attribute. 
<P><SAMP><SPAN class=option>-Wnonnull</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is included in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wformat</SPAN></SAMP>. It can be disabled with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wno-nonnull</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-Winit-self<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C, C++, Objective-C and Objective-C++ only)</SPAN> 
<DD><A name=index-Winit-self-316></A><A name=index-Wno-init-self-317></A>Warn about uninitialized variables that are initialized with themselves. Note this option can only be used with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wuninitialized</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option. 
<P>For example, GCC warns about<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>i</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>being uninitialized in the following snippet only when<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Winit-self</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>has been specified:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          int f()
          {
            int i = i;
            return i;
          }
</PRE>
<P>This warning is enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>in C++.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-Wimplicit-int<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C and Objective-C only)</SPAN> 
<DD><A name=index-Wimplicit-int-318></A><A name=index-Wno-implicit-int-319></A>Warn when a declaration does not specify a type. This warning is enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wimplicit-function-declaration<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C and Objective-C only)</SPAN> 
<DD><A name=index-Wimplicit-function-declaration-320></A><A name=index-Wno-implicit-function-declaration-321></A>Give a warning whenever a function is used before being declared. In C99 mode (<SAMP><SPAN class=option>-std=c99</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-std=gnu99</SPAN></SAMP>), this warning is enabled by default and it is made into an error by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-pedantic-errors</SPAN></SAMP>. This warning is also enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wimplicit<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C and Objective-C only)</SPAN> 
<DD><A name=index-Wimplicit-322></A><A name=index-Wno-implicit-323></A>Same as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wimplicit-int</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wimplicit-function-declaration</SPAN></SAMP>. This warning is enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wignored-qualifiers<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C and C++ only)</SPAN> 
<DD><A name=index-Wignored-qualifiers-324></A><A name=index-Wno-ignored-qualifiers-325></A>Warn if the return type of a function has a type qualifier such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>const</CODE>. For ISO C such a type qualifier has no effect, since the value returned by a function is not an lvalue. For C++, the warning is only emitted for scalar types or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>void</CODE>. ISO C prohibits qualified<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>void</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>return types on function definitions, so such return types always receive a warning even without this option. 
<P>This warning is also enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wextra</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-Wmain</CODE> 
<DD><A name=index-Wmain-326></A><A name=index-Wno-main-327></A>Warn if the type of &#8216;<SAMP><SPAN class=samp>main</SPAN></SAMP>&#8217; is suspicious. &#8216;<SAMP><SPAN class=samp>main</SPAN></SAMP>&#8217; should be a function with external linkage, returning int, taking either zero arguments, two, or three arguments of appropriate types. This warning is enabled by default in C++ and is enabled by either<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wpedantic</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wmissing-braces</CODE> 
<DD><A name=index-Wmissing-braces-328></A><A name=index-Wno-missing-braces-329></A>Warn if an aggregate or union initializer is not fully bracketed. In the following example, the initializer for &#8216;<SAMP><SPAN class=samp>a</SPAN></SAMP>&#8217; is not fully bracketed, but that for &#8216;<SAMP><SPAN class=samp>b</SPAN></SAMP>&#8217; is fully bracketed. This warning is enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>in C.<PRE style="FONT-SIZE: smaller" class=smallexample>          int a[2][2] = { 0, 1, 2, 3 };
          int b[2][2] = { { 0, 1 }, { 2, 3 } };
</PRE>
<P>This warning is enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-Wmissing-include-dirs<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C, C++, Objective-C and Objective-C++ only)</SPAN> 
<DD><A name=index-Wmissing-include-dirs-330></A><A name=index-Wno-missing-include-dirs-331></A>Warn if a user-supplied include directory does not exist.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wparentheses</CODE> 
<DD><A name=index-Wparentheses-332></A><A name=index-Wno-parentheses-333></A>Warn if parentheses are omitted in certain contexts, such as when there is an assignment in a context where a truth value is expected, or when operators are nested whose precedence people often get confused about. 
<P>Also warn if a comparison like &#8216;<SAMP><SPAN class=samp>x&lt;=y&lt;=z</SPAN></SAMP>&#8217; appears; this is equivalent to &#8216;<SAMP><SPAN class=samp>(x&lt;=y ? 1 : 0) &lt;= z</SPAN></SAMP>&#8217;, which is a different interpretation from that of ordinary mathematical notation.</P>
<P>Also warn about constructions where there may be confusion to which<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>if</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>statement an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>else</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>branch belongs. Here is an example of such a case:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          {
            if (a)
              if (b)
                foo ();
            else
              bar ();
          }
</PRE>
<P>In C/C++, every<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>else</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>branch belongs to the innermost possible<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>if</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>statement, which in this example is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>if (b)</CODE>. This is often not what the programmer expected, as illustrated in the above example by indentation the programmer chose. When there is the potential for this confusion, GCC issues a warning when this flag is specified. To eliminate the warning, add explicit braces around the innermost<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>if</CODE>statement so there is no way the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>else</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can belong to the enclosing<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>if</CODE>. The resulting code looks like this:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          {
            if (a)
              {
                if (b)
                  foo ();
                else
                  bar ();
              }
          }
</PRE>
<P>Also warn for dangerous uses of the GNU extension to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>?:</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with omitted middle operand. When the condition in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>?</CODE>: operator is a boolean expression, the omitted value is always 1. Often programmers expect it to be a value computed inside the conditional expression instead.</P>
<P>This warning is enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-Wsequence-point</CODE> 
<DD><A name=index-Wsequence-point-334></A><A name=index-Wno-sequence-point-335></A>Warn about code that may have undefined semantics because of violations of sequence point rules in the C and C++ standards. 
<P>The C and C++ standards define the order in which expressions in a C/C++ program are evaluated in terms of<SPAN class=Apple-converted-space>&nbsp;</SPAN><DFN>sequence points</DFN>, which represent a partial ordering between the execution of parts of the program: those executed before the sequence point, and those executed after it. These occur after the evaluation of a full expression (one which is not part of a larger expression), after the evaluation of the first operand of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&amp;&amp;</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>||</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>? :</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>,</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(comma) operator, before a function is called (but after the evaluation of its arguments and the expression denoting the called function), and in certain other places. Other than as expressed by the sequence point rules, the order of evaluation of subexpressions of an expression is not specified. All these rules describe only a partial order rather than a total order, since, for example, if two functions are called within one expression with no sequence point between them, the order in which the functions are called is not specified. However, the standards committee have ruled that function calls do not overlap.</P>
<P>It is not specified when between sequence points modifications to the values of objects take effect. Programs whose behavior depends on this have undefined behavior; the C and C++ standards specify that &#8220;Between the previous and next sequence point an object shall have its stored value modified at most once by the evaluation of an expression. Furthermore, the prior value shall be read only to determine the value to be stored.&#8221;. If a program breaks these rules, the results on any particular implementation are entirely unpredictable.</P>
<P>Examples of code with undefined behavior are<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>a = a++;</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>a[n] = b[n++]</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>a[i++] = i;</CODE>. Some more complicated cases are not diagnosed by this option, and it may give an occasional false positive result, but in general it has been found fairly effective at detecting this sort of problem in programs.</P>
<P>The standard is worded confusingly, therefore there is some debate over the precise meaning of the sequence point rules in subtle cases. Links to discussions of the problem, including proposed formal definitions, may be found on the GCC readings page, at<A href="http://gcc.gnu.org/readings.html">http://gcc.gnu.org/readings.html</A>.</P>
<P>This warning is enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>for C and C++.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-Wno-return-local-addr</CODE> 
<DD><A name=index-Wno-return-local-addr-336></A><A name=index-Wreturn-local-addr-337></A>Do not warn about returning a pointer (or in C++, a reference) to a variable that goes out of scope after the function returns.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wreturn-type</CODE> 
<DD><A name=index-Wreturn-type-338></A><A name=index-Wno-return-type-339></A>Warn whenever a function is defined with a return type that defaults to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int</CODE>. Also warn about any<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>return</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>statement with no return value in a function whose return type is not<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>void</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(falling off the end of the function body is considered returning without a value), and about a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>return</CODE>statement with an expression in a function whose return type is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>void</CODE>. 
<P>For C++, a function without return type always produces a diagnostic message, even when<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wno-return-type</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified. The only exceptions are &#8216;<SAMP><SPAN class=samp>main</SPAN></SAMP>&#8217; and functions defined in system headers.</P>
<P>This warning is enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-Wswitch</CODE> 
<DD><A name=index-Wswitch-340></A><A name=index-Wno-switch-341></A>Warn whenever a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>switch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>statement has an index of enumerated type and lacks a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>case</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for one or more of the named codes of that enumeration. (The presence of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>default</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>label prevents this warning.)<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>case</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>labels outside the enumeration range also provoke warnings when this option is used (even if there is a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>default</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>label). This warning is enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wswitch-default</CODE> 
<DD><A name=index-Wswitch-default-342></A><A name=index-Wno-switch-default-343></A>Warn whenever a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>switch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>statement does not have a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>default</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>case.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wswitch-enum</CODE> 
<DD><A name=index-Wswitch-enum-344></A><A name=index-Wno-switch-enum-345></A>Warn whenever a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>switch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>statement has an index of enumerated type and lacks a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>case</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for one or more of the named codes of that enumeration.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>case</CODE>labels outside the enumeration range also provoke warnings when this option is used. The only difference between<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wswitch</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and this option is that this option gives a warning about an omitted enumeration code even if there is a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>default</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>label.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wsync-nand<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C and C++ only)</SPAN> 
<DD><A name=index-Wsync-nand-346></A><A name=index-Wno-sync-nand-347></A>Warn when<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__sync_fetch_and_nand</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__sync_nand_and_fetch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>built-in functions are used. These functions changed semantics in GCC 4.4.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wtrigraphs</CODE> 
<DD><A name=index-Wtrigraphs-348></A><A name=index-Wno-trigraphs-349></A>Warn if any trigraphs are encountered that might change the meaning of the program (trigraphs within comments are not warned about). This warning is enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wunused-but-set-parameter</CODE> 
<DD><A name=index-Wunused-but-set-parameter-350></A><A name=index-Wno-unused-but-set-parameter-351></A>Warn whenever a function parameter is assigned to, but otherwise unused (aside from its declaration). 
<P>To suppress this warning use the &#8216;<SAMP><SPAN class=samp>unused</SPAN></SAMP>&#8217; attribute (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Variable-Attributes.html#Variable-Attributes">Variable Attributes</A>).</P>
<P>This warning is also enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wunused</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>together with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wextra</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><FONT class=extract><CODE>-Wunused-but-set-variable</CODE> </FONT>
<DD><A name=index-Wunused-but-set-variable-352></A><A name=index-Wno-unused-but-set-variable-353></A><FONT class=extract>Warn whenever a local variable is assigned to, but otherwise unused (aside from its declaration). This warning is enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP>. </FONT>
<P><FONT class=extract>To suppress this warning use the &#8216;<SAMP><SPAN class=samp>unused</SPAN></SAMP>&#8217; attribute (see<SPAN class=Apple-converted-space>&nbsp;</SPAN></FONT><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Variable-Attributes.html#Variable-Attributes"><FONT class=extract>Variable Attributes</FONT></A><FONT class=extract>).</FONT></P>
<P><FONT class=extract>This warning is also enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wunused</SPAN></SAMP>, which is enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></FONT></P>
<DT><CODE>-Wunused-function</CODE> 
<DD><A name=index-Wunused-function-354></A><A name=index-Wno-unused-function-355></A>Warn whenever a static function is declared but not defined or a non-inline static function is unused. This warning is enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wunused-label</CODE> 
<DD><A name=index-Wunused-label-356></A><A name=index-Wno-unused-label-357></A>Warn whenever a label is declared but not used. This warning is enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP>. 
<P>To suppress this warning use the &#8216;<SAMP><SPAN class=samp>unused</SPAN></SAMP>&#8217; attribute (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Variable-Attributes.html#Variable-Attributes">Variable Attributes</A>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-Wunused-local-typedefs<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C, Objective-C, C++ and Objective-C++ only)</SPAN> 
<DD><A name=index-Wunused-local-typedefs-358></A>Warn when a typedef locally defined in a function is not used. This warning is enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wunused-parameter</CODE> 
<DD><A name=index-Wunused-parameter-359></A><A name=index-Wno-unused-parameter-360></A>Warn whenever a function parameter is unused aside from its declaration. 
<P>To suppress this warning use the &#8216;<SAMP><SPAN class=samp>unused</SPAN></SAMP>&#8217; attribute (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Variable-Attributes.html#Variable-Attributes">Variable Attributes</A>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-Wno-unused-result</CODE> 
<DD><A name=index-Wunused-result-361></A><A name=index-Wno-unused-result-362></A>Do not warn if a caller of a function marked with attribute<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>warn_unused_result</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Function-Attributes.html#Function-Attributes">Function Attributes</A>) does not use its return value. The default is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wunused-result</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wunused-variable</CODE> 
<DD><A name=index-Wunused-variable-363></A><A name=index-Wno-unused-variable-364></A>Warn whenever a local variable or non-constant static variable is unused aside from its declaration. This warning is enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP>. 
<P>To suppress this warning use the &#8216;<SAMP><SPAN class=samp>unused</SPAN></SAMP>&#8217; attribute (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Variable-Attributes.html#Variable-Attributes">Variable Attributes</A>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-Wunused-value</CODE> 
<DD><A name=index-Wunused-value-365></A><A name=index-Wno-unused-value-366></A>Warn whenever a statement computes a result that is explicitly not used. To suppress this warning cast the unused expression to &#8216;<SAMP><SPAN class=samp>void</SPAN></SAMP>&#8217;. This includes an expression-statement or the left-hand side of a comma expression that contains no side effects. For example, an expression such as &#8216;<SAMP><SPAN class=samp>x[i,j]</SPAN></SAMP>&#8217; causes a warning, while &#8216;<SAMP><SPAN class=samp>x[(void)i,j]</SPAN></SAMP>&#8217; does not. 
<P>This warning is enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-Wunused</CODE> 
<DD><A name=index-Wunused-367></A><A name=index-Wno-unused-368></A>All the above<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wunused</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options combined. 
<P>In order to get a warning about an unused function parameter, you must either specify<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wextra -Wunused</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>(note that<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>implies<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wunused</SPAN></SAMP>), or separately specify<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wunused-parameter</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-Wuninitialized</CODE> 
<DD><A name=index-Wuninitialized-369></A><A name=index-Wno-uninitialized-370></A>Warn if an automatic variable is used without first being initialized or if a variable may be clobbered by a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setjmp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>call. In C++, warn if a non-static reference or non-static &#8216;<SAMP><SPAN class=samp>const</SPAN></SAMP>&#8217; member appears in a class without constructors. 
<P>If you want to warn about code that uses the uninitialized value of the variable in its own initializer, use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Winit-self</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option.</P>
<P>These warnings occur for individual uninitialized or clobbered elements of structure, union or array variables as well as for variables that are uninitialized or clobbered as a whole. They do not occur for variables or elements declared<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>volatile</CODE>. Because these warnings depend on optimization, the exact variables or elements for which there are warnings depends on the precise optimization options and version of GCC used.</P>
<P>Note that there may be no warning about a variable that is used only to compute a value that itself is never used, because such computations may be deleted by data flow analysis before the warnings are printed.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-Wmaybe-uninitialized</CODE> 
<DD><A name=index-Wmaybe-uninitialized-371></A><A name=index-Wno-maybe-uninitialized-372></A>For an automatic variable, if there exists a path from the function entry to a use of the variable that is initialized, but there exist some other paths for which the variable is not initialized, the compiler emits a warning if it cannot prove the uninitialized paths are not executed at run time. These warnings are made optional because GCC is not smart enough to see all the reasons why the code might be correct in spite of appearing to have an error. Here is one example of how this can happen:<PRE style="FONT-SIZE: smaller" class=smallexample>          {
            int x;
            switch (y)
              {
              case 1: x = 1;
                break;
              case 2: x = 4;
                break;
              case 3: x = 5;
              }
            foo (x);
          }
</PRE>
<P class=noindent>If the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>y</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is always 1, 2 or 3, then<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is always initialized, but GCC doesn't know this. To suppress the warning, you need to provide a default case with assert(0) or similar code.</P>
<P><A name=index-g_t_0040code_007blongjmp_007d-warnings-373></A>This option also warns when a non-volatile automatic variable might be changed by a call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>longjmp</CODE>. These warnings as well are possible only in optimizing compilation.</P>
<P>The compiler sees only the calls to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setjmp</CODE>. It cannot know where<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>longjmp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be called; in fact, a signal handler could call it at any point in the code. As a result, you may get a warning even when there is in fact no problem because<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>longjmp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>cannot in fact be called at the place that would cause a problem.</P>
<P>Some spurious warnings can be avoided if you declare all the functions you use that never return as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>noreturn</CODE>. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Function-Attributes.html#Function-Attributes">Function Attributes</A>.</P>
<P>This warning is enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wextra</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-Wunknown-pragmas</CODE> 
<DD><A name=index-Wunknown-pragmas-374></A><A name=index-Wno-unknown-pragmas-375></A><A name=index-warning-for-unknown-pragmas-376></A><A name=index-unknown-pragmas_002c-warning-377></A><A name=index-pragmas_002c-warning-of-unknown-378></A>Warn when a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#pragma</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>directive is encountered that is not understood by GCC. If this command-line option is used, warnings are even issued for unknown pragmas in system header files. This is not the case if the warnings are only enabled by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>command-line option.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wno-pragmas</CODE> 
<DD><A name=index-Wno-pragmas-379></A><A name=index-Wpragmas-380></A>Do not warn about misuses of pragmas, such as incorrect parameters, invalid syntax, or conflicts between pragmas. See also<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wunknown-pragmas</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wstrict-aliasing</CODE> 
<DD><A name=index-Wstrict-aliasing-381></A><A name=index-Wno-strict-aliasing-382></A>This option is only active when<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fstrict-aliasing</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is active. It warns about code that might break the strict aliasing rules that the compiler is using for optimization. The warning does not catch all cases, but does attempt to catch the more common pitfalls. It is included in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP>. It is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wstrict-aliasing=3</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wstrict-aliasing=n</CODE> 
<DD><A name=index-Wstrict-aliasing_003dn-383></A>This option is only active when<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fstrict-aliasing</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is active. It warns about code that might break the strict aliasing rules that the compiler is using for optimization. Higher levels correspond to higher accuracy (fewer false positives). Higher levels also correspond to more effort, similar to the way<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-O</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>works.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wstrict-aliasing</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wstrict-aliasing=3</SPAN></SAMP>. 
<P>Level 1: Most aggressive, quick, least accurate. Possibly useful when higher levels do not warn but<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fstrict-aliasing</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>still breaks the code, as it has very few false negatives. However, it has many false positives. Warns for all pointer conversions between possibly incompatible types, even if never dereferenced. Runs in the front end only.</P>
<P>Level 2: Aggressive, quick, not too precise. May still have many false positives (not as many as level 1 though), and few false negatives (but possibly more than level 1). Unlike level 1, it only warns when an address is taken. Warns about incomplete types. Runs in the front end only.</P>
<P>Level 3 (default for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wstrict-aliasing</SPAN></SAMP>): Should have very few false positives and few false negatives. Slightly slower than levels 1 or 2 when optimization is enabled. Takes care of the common pun+dereference pattern in the front end:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*(int*)&amp;some_float</CODE>. If optimization is enabled, it also runs in the back end, where it deals with multiple statement cases using flow-sensitive points-to information. Only warns when the converted pointer is dereferenced. Does not warn about incomplete types.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-Wstrict-overflow</CODE> 
<DT><CODE>-Wstrict-overflow=</CODE><VAR>n</VAR> 
<DD><A name=index-Wstrict-overflow-384></A><A name=index-Wno-strict-overflow-385></A>This option is only active when<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fstrict-overflow</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is active. It warns about cases where the compiler optimizes based on the assumption that signed overflow does not occur. Note that it does not warn about all cases where the code might overflow: it only warns about cases where the compiler implements some optimization. Thus this warning depends on the optimization level. 
<P>An optimization that assumes that signed overflow does not occur is perfectly safe if the values of the variables involved are such that overflow never does, in fact, occur. Therefore this warning can easily give a false positive: a warning about code that is not actually a problem. To help focus on important issues, several warning levels are defined. No warnings are issued for the use of undefined signed overflow when estimating how many iterations a loop requires, in particular when determining whether a loop will be executed at all.</P>
<DL>
<DT><CODE>-Wstrict-overflow=1</CODE> 
<DD>Warn about cases that are both questionable and easy to avoid. For example, with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fstrict-overflow</SPAN></SAMP>, the compiler simplifies<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x + 1 &gt; x</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>1</CODE>. This level of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wstrict-overflow</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP>; higher levels are not, and must be explicitly requested.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wstrict-overflow=2</CODE> 
<DD>Also warn about other cases where a comparison is simplified to a constant. For example:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>abs (x) &gt;= 0</CODE>. This can only be simplified when<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fstrict-overflow</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is in effect, because<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>abs (INT_MIN)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>overflows to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>INT_MIN</CODE>, which is less than zero.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wstrict-overflow</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>(with no level) is the same as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wstrict-overflow=2</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wstrict-overflow=3</CODE> 
<DD>Also warn about other cases where a comparison is simplified. For example:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x + 1 &gt; 1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is simplified to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x &gt; 0</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wstrict-overflow=4</CODE> 
<DD>Also warn about other simplifications not covered by the above cases. For example:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(x * 10) / 5</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is simplified to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x * 2</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wstrict-overflow=5</CODE> 
<DD>Also warn about cases where the compiler reduces the magnitude of a constant involved in a comparison. For example:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x + 2 &gt; y</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is simplified to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x + 1 &gt;= y</CODE>. This is reported only at the highest warning level because this simplification applies to many comparisons, so this warning level gives a very large number of false positives.</DD></DL><BR>
<DT><CODE>-Wsuggest-attribute=</CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>[</SPAN><CODE>pure</CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>|</SPAN><CODE>const</CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>|</SPAN><CODE>noreturn</CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>|</SPAN><CODE>format</CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>]</SPAN> 
<DD><A name=index-Wsuggest-attribute_003d-386></A><A name=index-Wno-suggest-attribute_003d-387></A>Warn for cases where adding an attribute may be beneficial. The attributes currently supported are listed below. 
<DL>
<DT><CODE>-Wsuggest-attribute=pure</CODE> 
<DT><CODE>-Wsuggest-attribute=const</CODE> 
<DT><CODE>-Wsuggest-attribute=noreturn</CODE> 
<DD><A name=index-Wsuggest-attribute_003dpure-388></A><A name=index-Wno-suggest-attribute_003dpure-389></A><A name=index-Wsuggest-attribute_003dconst-390></A><A name=index-Wno-suggest-attribute_003dconst-391></A><A name=index-Wsuggest-attribute_003dnoreturn-392></A><A name=index-Wno-suggest-attribute_003dnoreturn-393></A>Warn about functions that might be candidates for attributes<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>pure</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>const</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>noreturn</CODE>. The compiler only warns for functions visible in other compilation units or (in the case of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>pure</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>const</CODE>) if it cannot prove that the function returns normally. A function returns normally if it doesn't contain an infinite loop or return abnormally by throwing, calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>abort()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or trapping. This analysis requires option<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fipa-pure-const</SPAN></SAMP>, which is enabled by default at<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-O</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and higher. Higher optimization levels improve the accuracy of the analysis.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wsuggest-attribute=format</CODE> 
<DT><CODE>-Wmissing-format-attribute</CODE> 
<DD><A name=index-Wsuggest-attribute_003dformat-394></A><A name=index-Wmissing-format-attribute-395></A><A name=index-Wno-suggest-attribute_003dformat-396></A><A name=index-Wno-missing-format-attribute-397></A><A name=index-Wformat-398></A><A name=index-Wno-format-399></A>Warn about function pointers that might be candidates for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>format</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attributes. Note these are only possible candidates, not absolute ones. GCC guesses that function pointers with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>format</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attributes that are used in assignment, initialization, parameter passing or return statements should have a corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>format</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute in the resulting type. I.e. the left-hand side of the assignment or initialization, the type of the parameter variable, or the return type of the containing function respectively should also have a<CODE>format</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute to avoid the warning. 
<P>GCC also warns about function definitions that might be candidates for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>format</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attributes. Again, these are only possible candidates. GCC guesses that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>format</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attributes might be appropriate for any function that calls a function like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vprintf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vscanf</CODE>, but this might not always be the case, and some functions for which<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>format</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attributes are appropriate may not be detected.</P></DD></DL><BR>
<DT><CODE>-Warray-bounds</CODE> 
<DD><A name=index-Wno-array-bounds-400></A><A name=index-Warray-bounds-401></A>This option is only active when<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ftree-vrp</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is active (default for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-O2</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and above). It warns about subscripts to arrays that are always out of bounds. This warning is enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wno-div-by-zero</CODE> 
<DD><A name=index-Wno-div-by-zero-402></A><A name=index-Wdiv-by-zero-403></A>Do not warn about compile-time integer division by zero. Floating-point division by zero is not warned about, as it can be a legitimate way of obtaining infinities and NaNs.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wsystem-headers</CODE> 
<DD><A name=index-Wsystem-headers-404></A><A name=index-Wno-system-headers-405></A><A name=index-warnings-from-system-headers-406></A><A name=index-system-headers_002c-warnings-from-407></A>Print warning messages for constructs found in system header files. Warnings from system headers are normally suppressed, on the assumption that they usually do not indicate real problems and would only make the compiler output harder to read. Using this command-line option tells GCC to emit warnings from system headers as if they occurred in user code. However, note that using<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>in conjunction with this option does<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>not</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>warn about unknown pragmas in system headers&#8212;for that,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wunknown-pragmas</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>must also be used.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wtrampolines</CODE> 
<DD><A name=index-Wtrampolines-408></A><A name=index-Wno-trampolines-409></A>Warn about trampolines generated for pointers to nested functions. 
<P>A trampoline is a small piece of data or code that is created at run time on the stack when the address of a nested function is taken, and is used to call the nested function indirectly. For some targets, it is made up of data only and thus requires no special treatment. But, for most targets, it is made up of code and thus requires the stack to be made executable in order for the program to work properly.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-Wfloat-equal</CODE> 
<DD><A name=index-Wfloat-equal-410></A><A name=index-Wno-float-equal-411></A>Warn if floating-point values are used in equality comparisons. 
<P>The idea behind this is that sometimes it is convenient (for the programmer) to consider floating-point values as approximations to infinitely precise real numbers. If you are doing this, then you need to compute (by analyzing the code, or in some other way) the maximum or likely maximum error that the computation introduces, and allow for it when performing comparisons (and when producing output, but that's a different problem). In particular, instead of testing for equality, you should check to see whether the two values have ranges that overlap; and this is done with the relational operators, so equality comparisons are probably mistaken.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-Wtraditional<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C and Objective-C only)</SPAN> 
<DD><A name=index-Wtraditional-412></A><A name=index-Wno-traditional-413></A>Warn about certain constructs that behave differently in traditional and ISO C. Also warn about ISO C constructs that have no traditional C equivalent, and/or problematic constructs that should be avoided. 
<UL>
<LI>Macro parameters that appear within string literals in the macro body. In traditional C macro replacement takes place within string literals, but in ISO C it does not. 
<LI>In traditional C, some preprocessor directives did not exist. Traditional preprocessors only considered a line to be a directive if the &#8216;<SAMP><SPAN class=samp>#</SPAN></SAMP>&#8217; appeared in column 1 on the line. Therefore<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wtraditional</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>warns about directives that traditional C understands but ignores because the &#8216;<SAMP><SPAN class=samp>#</SPAN></SAMP>&#8217; does not appear as the first character on the line. It also suggests you hide directives like &#8216;<SAMP><SPAN class=samp>#pragma</SPAN></SAMP>&#8217; not understood by traditional C by indenting them. Some traditional implementations do not recognize &#8216;<SAMP><SPAN class=samp>#elif</SPAN></SAMP>&#8217;, so this option suggests avoiding it altogether. 
<LI>A function-like macro that appears without arguments. 
<LI>The unary plus operator. 
<LI>The &#8216;<SAMP><SPAN class=samp>U</SPAN></SAMP>&#8217; integer constant suffix, or the &#8216;<SAMP><SPAN class=samp>F</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>L</SPAN></SAMP>&#8217; floating-point constant suffixes. (Traditional C does support the &#8216;<SAMP><SPAN class=samp>L</SPAN></SAMP>&#8217; suffix on integer constants.) Note, these suffixes appear in macros defined in the system headers of most modern systems, e.g. the &#8216;<SAMP><SPAN class=samp>_MIN</SPAN></SAMP>&#8217;/&#8216;<SAMP><SPAN class=samp>_MAX</SPAN></SAMP>&#8217; macros in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>&lt;limits.h&gt;</CODE>. Use of these macros in user code might normally lead to spurious warnings, however GCC's integrated preprocessor has enough context to avoid warning in these cases. 
<LI>A function declared external in one block and then used after the end of the block. 
<LI>A<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>switch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>statement has an operand of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long</CODE>. 
<LI>A non-<CODE>static</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function declaration follows a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>static</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>one. This construct is not accepted by some traditional C compilers. 
<LI>The ISO type of an integer constant has a different width or signedness from its traditional type. This warning is only issued if the base of the constant is ten. I.e. hexadecimal or octal values, which typically represent bit patterns, are not warned about. 
<LI>Usage of ISO string concatenation is detected. 
<LI>Initialization of automatic aggregates. 
<LI>Identifier conflicts with labels. Traditional C lacks a separate namespace for labels. 
<LI>Initialization of unions. If the initializer is zero, the warning is omitted. This is done under the assumption that the zero initializer in user code appears conditioned on e.g.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__STDC__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to avoid missing initializer warnings and relies on default initialization to zero in the traditional C case. 
<LI>Conversions by prototypes between fixed/floating-point values and vice versa. The absence of these prototypes when compiling with traditional C causes serious problems. This is a subset of the possible conversion warnings; for the full set use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wtraditional-conversion</SPAN></SAMP>. 
<LI>Use of ISO C style function definitions. This warning intentionally is<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>not</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>issued for prototype declarations or variadic functions because these ISO C features appear in your code when using libiberty's traditional C compatibility macros,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>PARAMS</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>VPARAMS</CODE>. This warning is also bypassed for nested functions because that feature is already a GCC extension and thus not relevant to traditional C compatibility.</LI></UL><BR>
<DT><CODE>-Wtraditional-conversion<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C and Objective-C only)</SPAN> 
<DD><A name=index-Wtraditional-conversion-414></A><A name=index-Wno-traditional-conversion-415></A>Warn if a prototype causes a type conversion that is different from what would happen to the same argument in the absence of a prototype. This includes conversions of fixed point to floating and vice versa, and conversions changing the width or signedness of a fixed-point argument except when the same as the default promotion.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wdeclaration-after-statement<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C and Objective-C only)</SPAN> 
<DD><A name=index-Wdeclaration-after-statement-416></A><A name=index-Wno-declaration-after-statement-417></A>Warn when a declaration is found after a statement in a block. This construct, known from C++, was introduced with ISO C99 and is by default allowed in GCC. It is not supported by ISO C90 and was not supported by GCC versions before GCC 3.0. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Mixed-Declarations.html#Mixed-Declarations">Mixed Declarations</A>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wundef</CODE> 
<DD><A name=index-Wundef-418></A><A name=index-Wno-undef-419></A>Warn if an undefined identifier is evaluated in an &#8216;<SAMP><SPAN class=samp>#if</SPAN></SAMP>&#8217; directive.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wno-endif-labels</CODE> 
<DD><A name=index-Wno-endif-labels-420></A><A name=index-Wendif-labels-421></A>Do not warn whenever an &#8216;<SAMP><SPAN class=samp>#else</SPAN></SAMP>&#8217; or an &#8216;<SAMP><SPAN class=samp>#endif</SPAN></SAMP>&#8217; are followed by text.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wshadow</CODE> 
<DD><A name=index-Wshadow-422></A><A name=index-Wno-shadow-423></A>Warn whenever a local variable or type declaration shadows another variable, parameter, type, or class member (in C++), or whenever a built-in function is shadowed. Note that in C++, the compiler warns if a local variable shadows an explicit typedef, but not if it shadows a struct/class/enum.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wlarger-than=</CODE><VAR>len</VAR> 
<DD><A name=index-Wlarger-than_003d_0040var_007blen_007d-424></A><A name=index-Wlarger-than-_0040var_007blen_007d-425></A>Warn whenever an object of larger than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>len</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes is defined.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wframe-larger-than=</CODE><VAR>len</VAR> 
<DD><A name=index-Wframe-larger-than-426></A>Warn if the size of a function frame is larger than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>len</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes. The computation done to determine the stack frame size is approximate and not conservative. The actual requirements may be somewhat greater than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>len</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>even if you do not get a warning. In addition, any space allocated via<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>alloca</CODE>, variable-length arrays, or related constructs is not included by the compiler when determining whether or not to issue a warning.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wno-free-nonheap-object</CODE> 
<DD><A name=index-Wno-free-nonheap-object-427></A><A name=index-Wfree-nonheap-object-428></A>Do not warn when attempting to free an object that was not allocated on the heap.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wstack-usage=</CODE><VAR>len</VAR> 
<DD><A name=index-Wstack-usage-429></A>Warn if the stack usage of a function might be larger than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>len</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes. The computation done to determine the stack usage is conservative. Any space allocated via<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>alloca</CODE>, variable-length arrays, or related constructs is included by the compiler when determining whether or not to issue a warning. 
<P>The message is in keeping with the output of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fstack-usage</SPAN></SAMP>.</P>
<UL>
<LI>If the stack usage is fully static but exceeds the specified amount, it's:<PRE style="FONT-SIZE: smaller" class=smallexample>                 warning: stack usage is 1120 bytes
</PRE>
<LI>If the stack usage is (partly) dynamic but bounded, it's:<PRE style="FONT-SIZE: smaller" class=smallexample>                 warning: stack usage might be 1648 bytes
</PRE>
<LI>If the stack usage is (partly) dynamic and not bounded, it's:<PRE style="FONT-SIZE: smaller" class=smallexample>                 warning: stack usage might be unbounded
</PRE></LI></UL><BR>
<DT><CODE>-Wunsafe-loop-optimizations</CODE> 
<DD><A name=index-Wunsafe-loop-optimizations-430></A><A name=index-Wno-unsafe-loop-optimizations-431></A>Warn if the loop cannot be optimized because the compiler cannot assume anything on the bounds of the loop indices. With<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-funsafe-loop-optimizations</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>warn if the compiler makes such assumptions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wno-pedantic-ms-format<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(MinGW targets only)</SPAN> 
<DD><A name=index-Wno-pedantic-ms-format-432></A><A name=index-Wpedantic-ms-format-433></A>When used in combination with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wformat</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-pedantic</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>without GNU extensions, this option disables the warnings about non-ISO<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>printf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>/<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scanf</CODE>format width specifiers<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>I32</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>I64</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>I</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>used on Windows targets, which depend on the MS runtime.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wpointer-arith</CODE> 
<DD><A name=index-Wpointer-arith-434></A><A name=index-Wno-pointer-arith-435></A>Warn about anything that depends on the &#8220;size of&#8221; a function type or of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>void</CODE>. GNU C assigns these types a size of 1, for convenience in calculations with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>void *</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>pointers and pointers to functions. In C++, warn also when an arithmetic operation involves<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE>. This warning is also enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wpedantic</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wtype-limits</CODE> 
<DD><A name=index-Wtype-limits-436></A><A name=index-Wno-type-limits-437></A>Warn if a comparison is always true or always false due to the limited range of the data type, but do not warn for constant expressions. For example, warn if an unsigned variable is compared against zero with &#8216;<SAMP><SPAN class=samp>&lt;</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>&gt;=</SPAN></SAMP>&#8217;. This warning is also enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wextra</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wbad-function-cast<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C and Objective-C only)</SPAN> 
<DD><A name=index-Wbad-function-cast-438></A><A name=index-Wno-bad-function-cast-439></A>Warn whenever a function call is cast to a non-matching type. For example, warn if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int malloc()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is cast to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>anything *</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wc++-compat<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C and Objective-C only)</SPAN> 
<DD>Warn about ISO C constructs that are outside of the common subset of ISO C and ISO C++, e.g. request for implicit conversion from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>void *</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to a pointer to non-<CODE>void</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>type.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wc++11-compat<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C++ and Objective-C++ only)</SPAN> 
<DD>Warn about C++ constructs whose meaning differs between ISO C++ 1998 and ISO C++ 2011, e.g., identifiers in ISO C++ 1998 that are keywords in ISO C++ 2011. This warning turns on<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wnarrowing</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and is enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wcast-qual</CODE> 
<DD><A name=index-Wcast-qual-440></A><A name=index-Wno-cast-qual-441></A>Warn whenever a pointer is cast so as to remove a type qualifier from the target type. For example, warn if a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>const char *</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is cast to an ordinary<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char *</CODE>. 
<P>Also warn when making a cast that introduces a type qualifier in an unsafe way. For example, casting<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char **</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>const char **</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is unsafe, as in this example:</P><PRE style="FONT-SIZE: smaller" class=smallexample>            /* p is char ** value.  */
            const char **q = (const char **) p;
            /* Assignment of readonly string to const char * is OK.  */
            *q = "string";
            /* Now char** pointer points to read-only memory.  */
            **p = 'b';
</PRE><BR>
<DT><CODE>-Wcast-align</CODE> 
<DD><A name=index-Wcast-align-442></A><A name=index-Wno-cast-align-443></A>Warn whenever a pointer is cast such that the required alignment of the target is increased. For example, warn if a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char *</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is cast to an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int *</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on machines where integers can only be accessed at two- or four-byte boundaries.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wwrite-strings</CODE> 
<DD><A name=index-Wwrite-strings-444></A><A name=index-Wno-write-strings-445></A>When compiling C, give string constants the type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>const char[</CODE><VAR>length</VAR><CODE>]</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>so that copying the address of one into a non-<CODE>const</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char *</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>pointer produces a warning. These warnings help you find at compile time code that can try to write into a string constant, but only if you have been very careful about using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>const</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in declarations and prototypes. Otherwise, it is just a nuisance. This is why we did not make<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>request these warnings. 
<P>When compiling C++, warn about the deprecated conversion from string literals to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char *</CODE>. This warning is enabled by default for C++ programs.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-Wclobbered</CODE> 
<DD><A name=index-Wclobbered-446></A><A name=index-Wno-clobbered-447></A>Warn for variables that might be changed by &#8216;<SAMP><SPAN class=samp>longjmp</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>vfork</SPAN></SAMP>&#8217;. This warning is also enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wextra</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wconditionally-supported<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C++ and Objective-C++ only)</SPAN> 
<DD><A name=index-Wconditionally-supported-448></A><A name=index-Wno-conditionally-supported-449></A>Warn for conditionally-supported (C++11 [intro.defs]) constructs.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wconversion</CODE> 
<DD><A name=index-Wconversion-450></A><A name=index-Wno-conversion-451></A>Warn for implicit conversions that may alter a value. This includes conversions between real and integer, like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>abs (x)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>when<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>double</CODE>; conversions between signed and unsigned, like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unsigned ui = -1</CODE>; and conversions to smaller types, like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sqrtf (M_PI)</CODE>. Do not warn for explicit casts like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>abs ((int) x)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ui = (unsigned) -1</CODE>, or if the value is not changed by the conversion like in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>abs (2.0)</CODE>. Warnings about conversions between signed and unsigned integers can be disabled by using<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wno-sign-conversion</SPAN></SAMP>. 
<P>For C++, also warn for confusing overload resolution for user-defined conversions; and conversions that never use a type conversion operator: conversions to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>void</CODE>, the same type, a base class or a reference to them. Warnings about conversions between signed and unsigned integers are disabled by default in C++ unless<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wsign-conversion</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is explicitly enabled.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-Wno-conversion-null<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C++ and Objective-C++ only)</SPAN> 
<DD><A name=index-Wconversion-null-452></A><A name=index-Wno-conversion-null-453></A>Do not warn for conversions between<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>NULL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and non-pointer types.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wconversion-null</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is enabled by default.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wzero-as-null-pointer-constant<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C++ and Objective-C++ only)</SPAN> 
<DD><A name=index-Wzero-as-null-pointer-constant-454></A><A name=index-Wno-zero-as-null-pointer-constant-455></A>Warn when a literal '0' is used as null pointer constant. This can be useful to facilitate the conversion to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nullptr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in C++11.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wdate-time</CODE> 
<DD><A name=index-Wdate-time-456></A><A name=index-Wno-date-time-457></A>Warn when macros<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__TIME__</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__DATE__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__TIMESTAMP__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are encountered as they might prevent bit-wise-identical reproducible compilations.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wdelete-incomplete<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C++ and Objective-C++ only)</SPAN> 
<DD><A name=index-Wdelete-incomplete-458></A><A name=index-Wno-delete-incomplete-459></A>Warn when deleting a pointer to incomplete type, which may cause undefined behavior at runtime. This warning is enabled by default.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wuseless-cast<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C++ and Objective-C++ only)</SPAN> 
<DD><A name=index-Wuseless-cast-460></A><A name=index-Wno-useless-cast-461></A>Warn when an expression is casted to its own type.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wempty-body</CODE> 
<DD><A name=index-Wempty-body-462></A><A name=index-Wno-empty-body-463></A>Warn if an empty body occurs in an &#8216;<SAMP><SPAN class=samp>if</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>else</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>do while</SPAN></SAMP>&#8217; statement. This warning is also enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wextra</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wenum-compare</CODE> 
<DD><A name=index-Wenum-compare-464></A><A name=index-Wno-enum-compare-465></A>Warn about a comparison between values of different enumerated types. In C++ enumeral mismatches in conditional expressions are also diagnosed and the warning is enabled by default. In C this warning is enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wjump-misses-init<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C, Objective-C only)</SPAN> 
<DD><A name=index-Wjump-misses-init-466></A><A name=index-Wno-jump-misses-init-467></A>Warn if a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>goto</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>statement or a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>switch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>statement jumps forward across the initialization of a variable, or jumps backward to a label after the variable has been initialized. This only warns about variables that are initialized when they are declared. This warning is only supported for C and Objective-C; in C++ this sort of branch is an error in any case. 
<P><SAMP><SPAN class=option>-Wjump-misses-init</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is included in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wc++-compat</SPAN></SAMP>. It can be disabled with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wno-jump-misses-init</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-Wsign-compare</CODE> 
<DD><A name=index-Wsign-compare-468></A><A name=index-Wno-sign-compare-469></A><A name=index-warning-for-comparison-of-signed-and-unsigned-values-470></A><A name=index-comparison-of-signed-and-unsigned-values_002c-warning-471></A><A name=index-signed-and-unsigned-values_002c-comparison-warning-472></A>Warn when a comparison between signed and unsigned values could produce an incorrect result when the signed value is converted to unsigned. This warning is also enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wextra</SPAN></SAMP>; to get the other warnings of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wextra</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>without this warning, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wextra -Wno-sign-compare</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wsign-conversion</CODE> 
<DD><A name=index-Wsign-conversion-473></A><A name=index-Wno-sign-conversion-474></A>Warn for implicit conversions that may change the sign of an integer value, like assigning a signed integer expression to an unsigned integer variable. An explicit cast silences the warning. In C, this option is enabled also by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wconversion</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wfloat-conversion</CODE> 
<DD><A name=index-Wfloat-conversion-475></A><A name=index-Wno-float-conversion-476></A>Warn for implicit conversions that reduce the precision of a real value. This includes conversions from real to integer, and from higher precision real to lower precision real values. This option is also enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wconversion</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wsizeof-pointer-memaccess</CODE> 
<DD><A name=index-Wsizeof-pointer-memaccess-477></A><A name=index-Wno-sizeof-pointer-memaccess-478></A>Warn for suspicious length parameters to certain string and memory built-in functions if the argument uses<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sizeof</CODE>. This warning warns e.g. about<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>memset (ptr, 0, sizeof (ptr));</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ptr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not an array, but a pointer, and suggests a possible fix, or about<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>memcpy (&amp;foo, ptr, sizeof (&amp;foo));</CODE>. This warning is enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Waddress</CODE> 
<DD><A name=index-Waddress-479></A><A name=index-Wno-address-480></A>Warn about suspicious uses of memory addresses. These include using the address of a function in a conditional expression, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>void func(void); if (func)</CODE>, and comparisons against the memory address of a string literal, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>if (x == "abc")</CODE>. Such uses typically indicate a programmer error: the address of a function always evaluates to true, so their use in a conditional usually indicate that the programmer forgot the parentheses in a function call; and comparisons against string literals result in unspecified behavior and are not portable in C, so they usually indicate that the programmer intended to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strcmp</CODE>. This warning is enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wlogical-op</CODE> 
<DD><A name=index-Wlogical-op-481></A><A name=index-Wno-logical-op-482></A>Warn about suspicious uses of logical operators in expressions. This includes using logical operators in contexts where a bit-wise operator is likely to be expected.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Waggregate-return</CODE> 
<DD><A name=index-Waggregate-return-483></A><A name=index-Wno-aggregate-return-484></A>Warn if any functions that return structures or unions are defined or called. (In languages where you can return an array, this also elicits a warning.)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wno-aggressive-loop-optimizations</CODE> 
<DD><A name=index-Wno-aggressive-loop-optimizations-485></A><A name=index-Waggressive-loop-optimizations-486></A>Warn if in a loop with constant number of iterations the compiler detects undefined behavior in some statement during one or more of the iterations.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wno-attributes</CODE> 
<DD><A name=index-Wno-attributes-487></A><A name=index-Wattributes-488></A>Do not warn if an unexpected<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__attribute__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used, such as unrecognized attributes, function attributes applied to variables, etc. This does not stop errors for incorrect use of supported attributes.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wno-builtin-macro-redefined</CODE> 
<DD><A name=index-Wno-builtin-macro-redefined-489></A><A name=index-Wbuiltin-macro-redefined-490></A>Do not warn if certain built-in macros are redefined. This suppresses warnings for redefinition of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__TIMESTAMP__</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__TIME__</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__DATE__</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__FILE__</CODE>, and<CODE>__BASE_FILE__</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wstrict-prototypes<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C and Objective-C only)</SPAN> 
<DD><A name=index-Wstrict-prototypes-491></A><A name=index-Wno-strict-prototypes-492></A>Warn if a function is declared or defined without specifying the argument types. (An old-style function definition is permitted without a warning if preceded by a declaration that specifies the argument types.)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wold-style-declaration<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C and Objective-C only)</SPAN> 
<DD><A name=index-Wold-style-declaration-493></A><A name=index-Wno-old-style-declaration-494></A>Warn for obsolescent usages, according to the C Standard, in a declaration. For example, warn if storage-class specifiers like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>static</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are not the first things in a declaration. This warning is also enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wextra</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wold-style-definition<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C and Objective-C only)</SPAN> 
<DD><A name=index-Wold-style-definition-495></A><A name=index-Wno-old-style-definition-496></A>Warn if an old-style function definition is used. A warning is given even if there is a previous prototype.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wmissing-parameter-type<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C and Objective-C only)</SPAN> 
<DD><A name=index-Wmissing-parameter-type-497></A><A name=index-Wno-missing-parameter-type-498></A>A function parameter is declared without a type specifier in K&amp;R-style functions:<PRE style="FONT-SIZE: smaller" class=smallexample>          void foo(bar) { }
</PRE>
<P>This warning is also enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wextra</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-Wmissing-prototypes<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C and Objective-C only)</SPAN> 
<DD><A name=index-Wmissing-prototypes-499></A><A name=index-Wno-missing-prototypes-500></A>Warn if a global function is defined without a previous prototype declaration. This warning is issued even if the definition itself provides a prototype. Use this option to detect global functions that do not have a matching prototype declaration in a header file. This option is not valid for C++ because all function declarations provide prototypes and a non-matching declaration will declare an overload rather than conflict with an earlier declaration. Use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wmissing-declarations</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to detect missing declarations in C++.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wmissing-declarations</CODE> 
<DD><A name=index-Wmissing-declarations-501></A><A name=index-Wno-missing-declarations-502></A>Warn if a global function is defined without a previous declaration. Do so even if the definition itself provides a prototype. Use this option to detect global functions that are not declared in header files. In C, no warnings are issued for functions with previous non-prototype declarations; use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wmissing-prototype</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to detect missing prototypes. In C++, no warnings are issued for function templates, or for inline functions, or for functions in anonymous namespaces.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wmissing-field-initializers</CODE> 
<DD><A name=index-Wmissing-field-initializers-503></A><A name=index-Wno-missing-field-initializers-504></A><A name=index-W-505></A><A name=index-Wextra-506></A><A name=index-Wno-extra-507></A>Warn if a structure's initializer has some fields missing. For example, the following code causes such a warning, because<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x.h</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is implicitly zero:<PRE style="FONT-SIZE: smaller" class=smallexample>          struct s { int f, g, h; };
          struct s x = { 3, 4 };
</PRE>
<P>This option does not warn about designated initializers, so the following modification does not trigger a warning:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          struct s { int f, g, h; };
          struct s x = { .f = 3, .g = 4 };
</PRE>
<P>This warning is included in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wextra</SPAN></SAMP>. To get other<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wextra</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>warnings without this one, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wextra -Wno-missing-field-initializers</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-Wno-multichar</CODE> 
<DD><A name=index-Wno-multichar-508></A><A name=index-Wmultichar-509></A>Do not warn if a multicharacter constant (&#8216;<SAMP><SPAN class=samp>'FOOF'</SPAN></SAMP>&#8217;) is used. Usually they indicate a typo in the user's code, as they have implementation-defined values, and should not be used in portable code.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wnormalized=&lt;none|id|nfc|nfkc&gt;</CODE> 
<DD><A name=index-Wnormalized_003d-510></A><A name=index-NFC-511></A><A name=index-NFKC-512></A><A name=index-character-set_002c-input-normalization-513></A>In ISO C and ISO C++, two identifiers are different if they are different sequences of characters. However, sometimes when characters outside the basic ASCII character set are used, you can have two different character sequences that look the same. To avoid confusion, the ISO 10646 standard sets out some<SPAN class=Apple-converted-space>&nbsp;</SPAN><DFN>normalization rules</DFN><SPAN class=Apple-converted-space>&nbsp;</SPAN>which when applied ensure that two sequences that look the same are turned into the same sequence. GCC can warn you if you are using identifiers that have not been normalized; this option controls that warning. 
<P>There are four levels of warning supported by GCC. The default is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wnormalized=nfc</SPAN></SAMP>, which warns about any identifier that is not in the ISO 10646 &#8220;C&#8221; normalized form,<SPAN class=Apple-converted-space>&nbsp;</SPAN><DFN>NFC</DFN>. NFC is the recommended form for most uses.</P>
<P>Unfortunately, there are some characters allowed in identifiers by ISO C and ISO C++ that, when turned into NFC, are not allowed in identifiers. That is, there's no way to use these symbols in portable ISO C or C++ and have all your identifiers in NFC.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wnormalized=id</SPAN></SAMP>suppresses the warning for these characters. It is hoped that future versions of the standards involved will correct this, which is why this option is not the default.</P>
<P>You can switch the warning off for all characters by writing<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wnormalized=none</SPAN></SAMP>. You should only do this if you are using some other normalization scheme (like &#8220;D&#8221;), because otherwise you can easily create bugs that are literally impossible to see.</P>
<P>Some characters in ISO 10646 have distinct meanings but look identical in some fonts or display methodologies, especially once formatting has been applied. For instance<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>\u207F</CODE>, &#8220;SUPERSCRIPT LATIN SMALL LETTER N&#8221;, displays just like a regular<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>n</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that has been placed in a superscript. ISO 10646 defines the<SPAN class=Apple-converted-space>&nbsp;</SPAN><DFN>NFKC</DFN><SPAN class=Apple-converted-space>&nbsp;</SPAN>normalization scheme to convert all these into a standard form as well, and GCC warns if your code is not in NFKC if you use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wnormalized=nfkc</SPAN></SAMP>. This warning is comparable to warning about every identifier that contains the letter O because it might be confused with the digit 0, and so is not the default, but may be useful as a local coding convention if the programming environment cannot be fixed to display these characters distinctly.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-Wno-deprecated</CODE> 
<DD><A name=index-Wno-deprecated-514></A><A name=index-Wdeprecated-515></A>Do not warn about usage of deprecated features. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Deprecated-Features.html#Deprecated-Features">Deprecated Features</A>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wno-deprecated-declarations</CODE> 
<DD><A name=index-Wno-deprecated-declarations-516></A><A name=index-Wdeprecated-declarations-517></A>Do not warn about uses of functions (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Function-Attributes.html#Function-Attributes">Function Attributes</A>), variables (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Variable-Attributes.html#Variable-Attributes">Variable Attributes</A>), and types (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Type-Attributes.html#Type-Attributes">Type Attributes</A>) marked as deprecated by using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>deprecated</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wno-overflow</CODE> 
<DD><A name=index-Wno-overflow-518></A><A name=index-Woverflow-519></A>Do not warn about compile-time overflow in constant expressions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wopenmp-simd</CODE> 
<DD><A name=index-Wopenm-simd-520></A>Warn if the vectorizer cost model overrides the OpenMP or the Cilk Plus simd directive set by user. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fsimd-cost-model=unlimited</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be used to relax the cost model.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Woverride-init<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C and Objective-C only)</SPAN> 
<DD><A name=index-Woverride-init-521></A><A name=index-Wno-override-init-522></A><A name=index-W-523></A><A name=index-Wextra-524></A><A name=index-Wno-extra-525></A>Warn if an initialized field without side effects is overridden when using designated initializers (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Designated-Inits.html#Designated-Inits">Designated Initializers</A>). 
<P>This warning is included in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wextra</SPAN></SAMP>. To get other<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wextra</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>warnings without this one, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wextra -Wno-override-init</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-Wpacked</CODE> 
<DD><A name=index-Wpacked-526></A><A name=index-Wno-packed-527></A>Warn if a structure is given the packed attribute, but the packed attribute has no effect on the layout or size of the structure. Such structures may be mis-aligned for little benefit. For instance, in this code, the variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>f.x</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct bar</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is misaligned even though<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>struct bar</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not itself have the packed attribute:<PRE style="FONT-SIZE: smaller" class=smallexample>          struct foo {
            int x;
            char a, b, c, d;
          } __attribute__((packed));
          struct bar {
            char z;
            struct foo f;
          };
</PRE><BR>
<DT><CODE>-Wpacked-bitfield-compat</CODE> 
<DD><A name=index-Wpacked-bitfield-compat-528></A><A name=index-Wno-packed-bitfield-compat-529></A>The 4.1, 4.2 and 4.3 series of GCC ignore the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>packed</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute on bit-fields of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char</CODE>. This has been fixed in GCC 4.4 but the change can lead to differences in the structure layout. GCC informs you when the offset of such a field has changed in GCC 4.4. For example there is no longer a 4-bit padding between field<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>a</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>b</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in this structure:<PRE style="FONT-SIZE: smaller" class=smallexample>          struct foo
          {
            char a:4;
            char b:8;
          } __attribute__ ((packed));
</PRE>
<P>This warning is enabled by default. Use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wno-packed-bitfield-compat</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to disable this warning.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-Wpadded</CODE> 
<DD><A name=index-Wpadded-530></A><A name=index-Wno-padded-531></A>Warn if padding is included in a structure, either to align an element of the structure or to align the whole structure. Sometimes when this happens it is possible to rearrange the fields of the structure to reduce the padding and so make the structure smaller.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wredundant-decls</CODE> 
<DD><A name=index-Wredundant-decls-532></A><A name=index-Wno-redundant-decls-533></A>Warn if anything is declared more than once in the same scope, even in cases where multiple declaration is valid and changes nothing.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wnested-externs<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C and Objective-C only)</SPAN> 
<DD><A name=index-Wnested-externs-534></A><A name=index-Wno-nested-externs-535></A>Warn if an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>extern</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>declaration is encountered within a function.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wno-inherited-variadic-ctor</CODE> 
<DD><A name=index-Winherited-variadic-ctor-536></A><A name=index-Wno-inherited-variadic-ctor-537></A>Suppress warnings about use of C++11 inheriting constructors when the base class inherited from has a C variadic constructor; the warning is on by default because the ellipsis is not inherited.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Winline</CODE> 
<DD><A name=index-Winline-538></A><A name=index-Wno-inline-539></A>Warn if a function that is declared as inline cannot be inlined. Even with this option, the compiler does not warn about failures to inline functions declared in system headers. 
<P>The compiler uses a variety of heuristics to determine whether or not to inline a function. For example, the compiler takes into account the size of the function being inlined and the amount of inlining that has already been done in the current function. Therefore, seemingly insignificant changes in the source program can cause the warnings produced by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Winline</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to appear or disappear.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-Wno-invalid-offsetof<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C++ and Objective-C++ only)</SPAN> 
<DD><A name=index-Wno-invalid-offsetof-540></A><A name=index-Winvalid-offsetof-541></A>Suppress warnings from applying the &#8216;<SAMP><SPAN class=samp>offsetof</SPAN></SAMP>&#8217; macro to a non-POD type. According to the 1998 ISO C++ standard, applying &#8216;<SAMP><SPAN class=samp>offsetof</SPAN></SAMP>&#8217; to a non-POD type is undefined. In existing C++ implementations, however, &#8216;<SAMP><SPAN class=samp>offsetof</SPAN></SAMP>&#8217; typically gives meaningful results even when applied to certain kinds of non-POD types (such as a simple &#8216;<SAMP><SPAN class=samp>struct</SPAN></SAMP>&#8217; that fails to be a POD type only by virtue of having a constructor). This flag is for users who are aware that they are writing nonportable code and who have deliberately chosen to ignore the warning about it. 
<P>The restrictions on &#8216;<SAMP><SPAN class=samp>offsetof</SPAN></SAMP>&#8217; may be relaxed in a future version of the C++ standard.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-Wno-int-to-pointer-cast</CODE> 
<DD><A name=index-Wno-int-to-pointer-cast-542></A><A name=index-Wint-to-pointer-cast-543></A>Suppress warnings from casts to pointer type of an integer of a different size. In C++, casting to a pointer type of smaller size is an error.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>Wint-to-pointer-cast</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is enabled by default.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wno-pointer-to-int-cast<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C and Objective-C only)</SPAN> 
<DD><A name=index-Wno-pointer-to-int-cast-544></A><A name=index-Wpointer-to-int-cast-545></A>Suppress warnings from casts from a pointer to an integer type of a different size.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Winvalid-pch</CODE> 
<DD><A name=index-Winvalid-pch-546></A><A name=index-Wno-invalid-pch-547></A>Warn if a precompiled header (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Precompiled-Headers.html#Precompiled-Headers">Precompiled Headers</A>) is found in the search path but can't be used.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wlong-long</CODE> 
<DD><A name=index-Wlong-long-548></A><A name=index-Wno-long-long-549></A>Warn if &#8216;<SAMP><SPAN class=samp>long long</SPAN></SAMP>&#8217; type is used. This is enabled by either<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wpedantic</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wtraditional</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>in ISO C90 and C++98 modes. To inhibit the warning messages, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wno-long-long</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wvariadic-macros</CODE> 
<DD><A name=index-Wvariadic-macros-550></A><A name=index-Wno-variadic-macros-551></A>Warn if variadic macros are used in pedantic ISO C90 mode, or the GNU alternate syntax when in pedantic ISO C99 mode. This is default. To inhibit the warning messages, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wno-variadic-macros</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wvarargs</CODE> 
<DD><A name=index-Wvarargs-552></A><A name=index-Wno-varargs-553></A>Warn upon questionable usage of the macros used to handle variable arguments like &#8216;<SAMP><SPAN class=samp>va_start</SPAN></SAMP>&#8217;. This is default. To inhibit the warning messages, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wno-varargs</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wvector-operation-performance</CODE> 
<DD><A name=index-Wvector-operation-performance-554></A><A name=index-Wno-vector-operation-performance-555></A>Warn if vector operation is not implemented via SIMD capabilities of the architecture. Mainly useful for the performance tuning. Vector operation can be implemented<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>piecewise</CODE>, which means that the scalar operation is performed on every vector element;<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>in parallel</CODE>, which means that the vector operation is implemented using scalars of wider type, which normally is more performance efficient; and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>as a single scalar</CODE>, which means that vector fits into a scalar type.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wno-virtual-move-assign</CODE> 
<DD><A name=index-Wvirtual-move-assign-556></A><A name=index-Wno-virtual-move-assign-557></A>Suppress warnings about inheriting from a virtual base with a non-trivial C++11 move assignment operator. This is dangerous because if the virtual base is reachable along more than one path, it will be moved multiple times, which can mean both objects end up in the moved-from state. If the move assignment operator is written to avoid moving from a moved-from object, this warning can be disabled.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wvla</CODE> 
<DD><A name=index-Wvla-558></A><A name=index-Wno-vla-559></A>Warn if variable length array is used in the code.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wno-vla</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>prevents the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wpedantic</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>warning of the variable length array.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wvolatile-register-var</CODE> 
<DD><A name=index-Wvolatile-register-var-560></A><A name=index-Wno-volatile-register-var-561></A>Warn if a register variable is declared volatile. The volatile modifier does not inhibit all optimizations that may eliminate reads and/or writes to register variables. This warning is enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wdisabled-optimization</CODE> 
<DD><A name=index-Wdisabled-optimization-562></A><A name=index-Wno-disabled-optimization-563></A>Warn if a requested optimization pass is disabled. This warning does not generally indicate that there is anything wrong with your code; it merely indicates that GCC's optimizers are unable to handle the code effectively. Often, the problem is that your code is too big or too complex; GCC refuses to optimize programs when the optimization itself is likely to take inordinate amounts of time.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wpointer-sign<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C and Objective-C only)</SPAN> 
<DD><A name=index-Wpointer-sign-564></A><A name=index-Wno-pointer-sign-565></A>Warn for pointer argument passing or assignment with different signedness. This option is only supported for C and Objective-C. It is implied by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wpedantic</SPAN></SAMP>, which can be disabled with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wno-pointer-sign</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Wstack-protector</CODE> 
<DD><A name=index-Wstack-protector-566></A><A name=index-Wno-stack-protector-567></A>This option is only active when<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fstack-protector</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is active. It warns about functions that are not protected against stack smashing.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-Woverlength-strings</CODE> 
<DD><A name=index-Woverlength-strings-568></A><A name=index-Wno-overlength-strings-569></A>Warn about string constants that are longer than the &#8220;minimum maximum&#8221; length specified in the C standard. Modern compilers generally allow string constants that are much longer than the standard's minimum limit, but very portable programs should avoid using longer strings. 
<P>The limit applies<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>after</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>string constant concatenation, and does not count the trailing NUL. In C90, the limit was 509 characters; in C99, it was raised to 4095. C++98 does not specify a normative minimum maximum, so we do not diagnose overlength strings in C++.</P>
<P>This option is implied by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wpedantic</SPAN></SAMP>, and can be disabled with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wno-overlength-strings</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-Wunsuffixed-float-constants<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C and Objective-C only)</SPAN> 
<DD><A name=index-Wunsuffixed-float-constants-570></A>Issue a warning for any floating constant that does not have a suffix. When used together with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wsystem-headers</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>it warns about such constants in system header files. This can be useful when preparing code to use with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>FLOAT_CONST_DECIMAL64</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>pragma from the decimal floating-point extension to C99.</DD></DL>