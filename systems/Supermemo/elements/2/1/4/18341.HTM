<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>3.2 Options Controlling the Kind of Output</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Compilation can involve up to four stages: preprocessing, compilation proper, assembly and linking, always in that order. GCC is capable of preprocessing and compiling several files either into several assembler input files, or into one assembler input file; then each assembler input file produces an object file, and linking combines all the object files (those newly compiled, and those specified as input) into an executable file.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-file-name-suffix-76></A>For any given input file, the file name suffix determines what kind of compilation is done:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><VAR>file</VAR><CODE>.c</CODE></DT>
<DD>C source code that must be preprocessed.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><VAR>file</VAR><CODE>.i</CODE></DT>
<DD>C source code that should not be preprocessed.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><VAR>file</VAR><CODE>.ii</CODE></DT>
<DD>C++ source code that should not be preprocessed.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><VAR>file</VAR><CODE>.m</CODE></DT>
<DD>Objective-C source code. Note that you must link with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libobjc</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>library to make an Objective-C program work.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><VAR>file</VAR><CODE>.mi</CODE></DT>
<DD>Objective-C source code that should not be preprocessed.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><VAR>file</VAR><CODE>.mm</CODE></DT>
<DT><VAR>file</VAR><CODE>.M</CODE></DT>
<DD>Objective-C++ source code. Note that you must link with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libobjc</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>library to make an Objective-C++ program work. Note that &#8216;<SAMP><SPAN class=samp>.M</SPAN></SAMP>&#8217; refers to a literal capital M.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><VAR>file</VAR><CODE>.mii</CODE></DT>
<DD>Objective-C++ source code that should not be preprocessed.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><VAR>file</VAR><CODE>.h</CODE></DT>
<DD>C, C++, Objective-C or Objective-C++ header file to be turned into a precompiled header (default), or C, C++ header file to be turned into an Ada spec (via the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fdump-ada-spec</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>switch).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><VAR>file</VAR><CODE>.cc</CODE></DT>
<DT><VAR>file</VAR><CODE>.cp</CODE></DT>
<DT><VAR>file</VAR><CODE>.cxx</CODE></DT>
<DT><VAR>file</VAR><CODE>.cpp</CODE></DT>
<DT><VAR>file</VAR><CODE>.CPP</CODE></DT>
<DT><VAR>file</VAR><CODE>.c++</CODE></DT>
<DT><VAR>file</VAR><CODE>.C</CODE></DT>
<DD>C++ source code that must be preprocessed. Note that in &#8216;<SAMP><SPAN class=samp>.cxx</SPAN></SAMP>&#8217;, the last two letters must both be literally &#8216;<SAMP><SPAN class=samp>x</SPAN></SAMP>&#8217;. Likewise, &#8216;<SAMP><SPAN class=samp>.C</SPAN></SAMP>&#8217; refers to a literal capital C.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><VAR>file</VAR><CODE>.mm</CODE></DT>
<DT><VAR>file</VAR><CODE>.M</CODE></DT>
<DD>Objective-C++ source code that must be preprocessed.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><VAR>file</VAR><CODE>.mii</CODE></DT>
<DD>Objective-C++ source code that should not be preprocessed.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><VAR>file</VAR><CODE>.hh</CODE></DT>
<DT><VAR>file</VAR><CODE>.H</CODE></DT>
<DT><VAR>file</VAR><CODE>.hp</CODE></DT>
<DT><VAR>file</VAR><CODE>.hxx</CODE></DT>
<DT><VAR>file</VAR><CODE>.hpp</CODE></DT>
<DT><VAR>file</VAR><CODE>.HPP</CODE></DT>
<DT><VAR>file</VAR><CODE>.h++</CODE></DT>
<DT><VAR>file</VAR><CODE>.tcc</CODE></DT>
<DD>C++ header file to be turned into a precompiled header or Ada spec.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><VAR>file</VAR><CODE>.f</CODE></DT>
<DT><VAR>file</VAR><CODE>.for</CODE></DT>
<DT><VAR>file</VAR><CODE>.ftn</CODE></DT>
<DD>Fixed form Fortran source code that should not be preprocessed.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><VAR>file</VAR><CODE>.F</CODE></DT>
<DT><VAR>file</VAR><CODE>.FOR</CODE></DT>
<DT><VAR>file</VAR><CODE>.fpp</CODE></DT>
<DT><VAR>file</VAR><CODE>.FPP</CODE></DT>
<DT><VAR>file</VAR><CODE>.FTN</CODE></DT>
<DD>Fixed form Fortran source code that must be preprocessed (with the traditional preprocessor).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><VAR>file</VAR><CODE>.f90</CODE></DT>
<DT><VAR>file</VAR><CODE>.f95</CODE></DT>
<DT><VAR>file</VAR><CODE>.f03</CODE></DT>
<DT><VAR>file</VAR><CODE>.f08</CODE></DT>
<DD>Free form Fortran source code that should not be preprocessed.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><VAR>file</VAR><CODE>.F90</CODE></DT>
<DT><VAR>file</VAR><CODE>.F95</CODE></DT>
<DT><VAR>file</VAR><CODE>.F03</CODE></DT>
<DT><VAR>file</VAR><CODE>.F08</CODE></DT>
<DD>Free form Fortran source code that must be preprocessed (with the traditional preprocessor).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><VAR>file</VAR><CODE>.go</CODE></DT>
<DD>Go source code.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><VAR>file</VAR><CODE>.ads</CODE></DT>
<DD>Ada source code file that contains a library unit declaration (a declaration of a package, subprogram, or generic, or a generic instantiation), or a library unit renaming declaration (a package, generic, or subprogram renaming declaration). Such files are also called<DFN>specs</DFN>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><VAR>file</VAR><CODE>.adb</CODE></DT>
<DD>Ada source code file containing a library unit body (a subprogram or package body). Such files are also called<SPAN class=Apple-converted-space>&nbsp;</SPAN><DFN>bodies</DFN>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><VAR>file</VAR><CODE>.s</CODE></DT>
<DD>Assembler code.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><VAR>file</VAR><CODE>.S</CODE></DT>
<DT><VAR>file</VAR><CODE>.sx</CODE></DT>
<DD>Assembler code that must be preprocessed.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><VAR>other</VAR></DT>
<DD>An object file to be fed straight into linking. Any file name with no recognized suffix is treated this way.</DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-x-77></A>You can specify the input language explicitly with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-x</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>-x<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>language</VAR></DT>
<DD>Specify explicitly the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>language</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>for the following input files (rather than letting the compiler choose a default based on the file name suffix). This option applies to all following input files until the next<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-x</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option. Possible values for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>language</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are:<PRE style="FONT-SIZE: smaller" class=smallexample>          c  c-header  cpp-output
          c++  c++-header  c++-cpp-output
          objective-c  objective-c-header  objective-c-cpp-output
          objective-c++ objective-c++-header objective-c++-cpp-output
          assembler  assembler-with-cpp
          ada
          f77  f77-cpp-input f95  f95-cpp-input
          go
          java
</PRE><BR></DD>
<DT><CODE>-x none</CODE></DT>
<DD>Turn off any specification of a language, so that subsequent files are handled according to their file name suffixes (as they are if<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-x</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>has not been used at all).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-pass-exit-codes</CODE></DT>
<DD><A name=index-pass-exit-codes-78></A>Normally the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gcc</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>program exits with the code of 1 if any phase of the compiler returns a non-success return code. If you specify<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-pass-exit-codes</SPAN></SAMP>, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gcc</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>program instead returns with the numerically highest error produced by any phase returning an error indication. The C, C++, and Fortran front ends return 4 if an internal compiler error is encountered.</DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If you only want some of the stages of compilation, you can use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-x</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>(or filename suffixes) to tell<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gcc</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>where to start, and one of the options<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-c</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-S</SPAN></SAMP>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-E</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to say where<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gcc</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is to stop. Note that some combinations (for example, &#8216;<SAMP><SPAN class=samp>-x cpp-output -E</SPAN></SAMP>&#8217;) instruct<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gcc</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to do nothing at all.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>-c</CODE></DT>
<DD><A name=index-c-79></A>Compile or assemble the source files, but do not link. The linking stage simply is not done. The ultimate output is in the form of an object file for each source file.
<P>By default, the object file name for a source file is made by replacing the suffix &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>.i</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>.s</SPAN></SAMP>&#8217;, etc., with &#8216;<SAMP><SPAN class=samp>.o</SPAN></SAMP>&#8217;.</P>
<P>Unrecognized input files, not requiring compilation or assembly, are ignored.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-S</CODE></DT>
<DD><A name=index-S-80></A>Stop after the stage of compilation proper; do not assemble. The output is in the form of an assembler code file for each non-assembler input file specified.
<P>By default, the assembler file name for a source file is made by replacing the suffix &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>.i</SPAN></SAMP>&#8217;, etc., with &#8216;<SAMP><SPAN class=samp>.s</SPAN></SAMP>&#8217;.</P>
<P>Input files that don't require compilation are ignored.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-E</CODE></DT>
<DD><A name=index-E-81></A>Stop after the preprocessing stage; do not run the compiler proper. The output is in the form of preprocessed source code, which is sent to the standard output.
<P>Input files that don't require preprocessing are ignored.</P>
<P><A name=index-output-file-option-82></A><BR></P></DD>
<DT><CODE>-o<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>file</VAR></DT>
<DD><A name=index-o-83></A>Place output in file<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file</VAR>. This applies to whatever sort of output is being produced, whether it be an executable file, an object file, an assembler file or preprocessed C code.
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-o</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not specified, the default is to put an executable file in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>a.out</SPAN></SAMP>, the object file for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><VAR>source</VAR><SPAN class=file>.</SPAN><VAR>suffix</VAR></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><VAR>source</VAR><SPAN class=file>.o</SPAN></SAMP>, its assembler file in<SAMP><VAR>source</VAR><SPAN class=file>.s</SPAN></SAMP>, a precompiled header file in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><VAR>source</VAR><SPAN class=file>.</SPAN><VAR>suffix</VAR><SPAN class=file>.gch</SPAN></SAMP>, and all preprocessed C source on standard output.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-v</CODE></DT>
<DD><A name=index-v-84></A>Print (on standard error output) the commands executed to run the stages of compilation. Also print the version number of the compiler driver program and of the preprocessor and the compiler proper.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-###</CODE></DT>
<DD><A name=index-g_t_0023_0023_0023-85></A>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-v</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>except the commands are not executed and arguments are quoted unless they contain only alphanumeric characters or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>./-_</CODE>. This is useful for shell scripts to capture the driver-generated command lines.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-pipe</CODE></DT>
<DD><A name=index-pipe-86></A>Use pipes rather than temporary files for communication between the various stages of compilation. This fails to work on some systems where the assembler is unable to read from a pipe; but the GNU assembler has no trouble.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>--help</CODE></DT>
<DD><A name=index-help-87></A>Print (on the standard output) a description of the command-line options understood by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gcc</SPAN></SAMP>. If the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-v</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is also specified then<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>--help</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is also passed on to the various processes invoked by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gcc</SPAN></SAMP>, so that they can display the command-line options they accept. If the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wextra</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option has also been specified (prior to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>--help</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option), then command-line options that have no documentation associated with them are also displayed.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>--target-help</CODE></DT>
<DD><A name=index-target-help-88></A>Print (on the standard output) a description of target-specific command-line options for each tool. For some targets extra target-specific information may also be printed.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>--help={</CODE><VAR>class</VAR><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>|[</SPAN><CODE>^</CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>]</SPAN><VAR>qualifier</VAR><CODE>}</CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>[</SPAN><CODE>,...</CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>]</SPAN></DT>
<DD>Print (on the standard output) a description of the command-line options understood by the compiler that fit into all specified classes and qualifiers. These are the supported classes:
<DL>
<DT>&#8216;<SAMP><SPAN class=samp>optimizers</SPAN></SAMP>&#8217;</DT>
<DD>Display all of the optimization options supported by the compiler.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>warnings</SPAN></SAMP>&#8217;</DT>
<DD>Display all of the options controlling warning messages produced by the compiler.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>target</SPAN></SAMP>&#8217;</DT>
<DD>Display target-specific options. Unlike the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>--target-help</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option however, target-specific options of the linker and assembler are not displayed. This is because those tools do not currently support the extended<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>--help=</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>syntax.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>params</SPAN></SAMP>&#8217;</DT>
<DD>Display the values recognized by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>--param</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><VAR>language</VAR></DT>
<DD>Display the options supported for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>language</VAR>, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>language</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the name of one of the languages supported in this version of GCC.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>common</SPAN></SAMP>&#8217;</DT>
<DD>Display the options that are common to all languages.</DD></DL>
<P>These are the supported qualifiers:</P>
<DL>
<DT>&#8216;<SAMP><SPAN class=samp>undocumented</SPAN></SAMP>&#8217;</DT>
<DD>Display only those options that are undocumented.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>joined</SPAN></SAMP>&#8217;</DT>
<DD>Display options taking an argument that appears after an equal sign in the same continuous piece of text, such as: &#8216;<SAMP><SPAN class=samp>--help=target</SPAN></SAMP>&#8217;.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>separate</SPAN></SAMP>&#8217;</DT>
<DD>Display options taking an argument that appears as a separate word following the original option, such as: &#8216;<SAMP><SPAN class=samp>-o output-file</SPAN></SAMP>&#8217;.</DD></DL>
<P>Thus for example to display all the undocumented target-specific switches supported by the compiler, use:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          --help=target,undocumented
</PRE>
<P>The sense of a qualifier can be inverted by prefixing it with the &#8216;<SAMP><SPAN class=samp>^</SPAN></SAMP>&#8217; character, so for example to display all binary warning options (i.e., ones that are either on or off and that do not take an argument) that have a description, use:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          --help=warnings,^joined,^undocumented
</PRE>
<P>The argument to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>--help=</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>should not consist solely of inverted qualifiers.</P>
<P>Combining several classes is possible, although this usually restricts the output so much that there is nothing to display. One case where it does work, however, is when one of the classes is<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>target</VAR>. For example, to display all the target-specific optimization options, use:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          --help=target,optimizers
</PRE>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>--help=</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option can be repeated on the command line. Each successive use displays its requested class of options, skipping those that have already been displayed.</P>
<P>If the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Q</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option appears on the command line before the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>--help=</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option, then the descriptive text displayed by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>--help=</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is changed. Instead of describing the displayed options, an indication is given as to whether the option is enabled, disabled or set to a specific value (assuming that the compiler knows this at the point where the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>--help=</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is used).</P>
<P>Here is a truncated example from the ARM port of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gcc</SPAN></SAMP>:</P><PRE style="FONT-SIZE: smaller" class=smallexample>            % gcc -Q -mabi=2 --help=target -c
            The following options are target specific:
            -mabi=                                2
            -mabort-on-noreturn                   [disabled]
            -mapcs                                [disabled]
</PRE>
<P>The output is sensitive to the effects of previous command-line options, so for example it is possible to find out which optimizations are enabled at<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-O2</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>by using:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          -Q -O2 --help=optimizers
</PRE>
<P>Alternatively you can discover which binary optimizations are enabled by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-O3</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>by using:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          gcc -c -Q -O3 --help=optimizers &gt; /tmp/O3-opts
          gcc -c -Q -O2 --help=optimizers &gt; /tmp/O2-opts
          diff /tmp/O2-opts /tmp/O3-opts | grep enabled
</PRE><BR></DD>
<DT><CODE>-no-canonical-prefixes</CODE></DT>
<DD><A name=index-no-canonical-prefixes-89></A>Do not expand any symbolic links, resolve references to &#8216;<SAMP><SPAN class=samp>/../</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>/./</SPAN></SAMP>&#8217;, or make the path absolute when generating a relative prefix.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>--version</CODE></DT>
<DD><A name=index-version-90></A>Display the version number and copyrights of the invoked GCC.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-wrapper</CODE></DT>
<DD><A name=index-wrapper-91></A>Invoke all subcommands under a wrapper program. The name of the wrapper program and its parameters are passed as a comma separated list.<PRE style="FONT-SIZE: smaller" class=smallexample>          gcc -c t.c -wrapper gdb,--args
</PRE>
<P class=noindent>This invokes all subprograms of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gcc</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>under &#8216;<SAMP><SPAN class=samp>gdb --args</SPAN></SAMP>&#8217;, thus the invocation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>cc1</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is &#8216;<SAMP><SPAN class=samp>gdb --args cc1 ...</SPAN></SAMP>&#8217;.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-fplugin=</CODE><VAR>name</VAR><CODE>.so</CODE></DT>
<DD><A name=index-fplugin-92></A>Load the plugin code in file<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>.so, assumed to be a shared object to be dlopen'd by the compiler. The base name of the shared object file is used to identify the plugin for the purposes of argument parsing (See<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fplugin-arg-</SPAN><VAR>name</VAR><SPAN class=option>-</SPAN><VAR>key</VAR><SPAN class=option>=</SPAN><VAR>value</VAR></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>below). Each plugin should define the callback functions specified in the Plugins API.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fplugin-arg-</CODE><VAR>name</VAR><CODE>-</CODE><VAR>key</VAR><CODE>=</CODE><VAR>value</VAR></DT>
<DD><A name=index-fplugin-arg-93></A>Define an argument called<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>key</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with a value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>for the plugin called<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-ada-spec</CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>[</SPAN><CODE>-slim</CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>]</SPAN></DT>
<DD><A name=index-fdump-ada-spec-94></A>For C and C++ source and include files, generate corresponding Ada specs. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gnat_ugn/Generating-Ada-Bindings-for-C-and-C_002b_002b-headers.html#Generating-Ada-Bindings-for-C-and-C_002b_002b-headers">Generating Ada Bindings for C and C++ headers</A>, which provides detailed documentation on this feature.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fada-spec-parent=</CODE><VAR>unit</VAR></DT>
<DD><A name=index-fada-spec-parent-95></A>In conjunction with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fdump-ada-spec[-slim]</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>above, generate Ada specs as child units of parent<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>unit</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-go-spec=</CODE><VAR>file</VAR></DT>
<DD><A name=index-fdump-go-spec-96></A>For input files in any language, generate corresponding Go declarations in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file</VAR>. This generates Go<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>const</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>type</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>var</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>func</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>declarations which may be a useful way to start writing a Go interface to code written in some other language.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>@</CODE><VAR>file</VAR></DT>
<DD>Read command-line options from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file</VAR>. The options read are inserted in place of the original @<VAR>file</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>option. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not exist, or cannot be read, then the option will be treated literally, and not removed.
<P>Options in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are separated by whitespace. A whitespace character may be included in an option by surrounding the entire option in either single or double quotes. Any character (including a backslash) may be included by prefixing the character to be included with a backslash. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may itself contain additional @<VAR>file</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>options; any such options will be processed recursively.</P></DD></DL>