<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>3.11 Options Controlling the Preprocessor</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-preprocessor-options-983></A><A name=index-options_002c-preprocessor-984></A>These options control the C preprocessor, which is run on each C source file before actual compilation.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If you use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-E</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option, nothing is done except preprocessing. Some of these options make sense only together with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-E</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>because they cause the preprocessor output to be unsuitable for actual compilation.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>-Wp,</CODE><VAR>option</VAR></DT>
<DD><A name=index-Wp-985></A>You can use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wp,</SPAN><VAR>option</VAR></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to bypass the compiler driver and pass<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>option</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>directly through to the preprocessor. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>option</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>contains commas, it is split into multiple options at the commas. However, many options are modified, translated or interpreted by the compiler driver before being passed to the preprocessor, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wp</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>forcibly bypasses this phase. The preprocessor's direct interface is undocumented and subject to change, so whenever possible you should avoid using<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wp</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and let the driver handle the options instead.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-Xpreprocessor<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>option</VAR></DT>
<DD><A name=index-Xpreprocessor-986></A>Pass<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>option</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as an option to the preprocessor. You can use this to supply system-specific preprocessor options that GCC does not recognize.
<P>If you want to pass an option that takes an argument, you must use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Xpreprocessor</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>twice, once for the option and once for the argument.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-no-integrated-cpp</CODE></DT>
<DD><A name=index-no-integrated-cpp-987></A>Perform preprocessing as a separate pass before compilation. By default, GCC performs preprocessing as an integrated part of input tokenization and parsing. If this option is provided, the appropriate language front end (<SAMP><SPAN class=command>cc1</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>cc1plus</SPAN></SAMP>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>cc1obj</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>for C, C++, and Objective-C, respectively) is instead invoked twice, once for preprocessing only and once for actual compilation of the preprocessed input. This option may be useful in conjunction with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-B</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-wrapper</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options to specify an alternate preprocessor or perform additional processing of the program source between normal preprocessing and compilation.</DD></DL>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>-D<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>name</VAR></DT>
<DD><A name=index-D-988></A>Predefine<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a macro, with definition<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>1</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-D<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>name</VAR><CODE>=</CODE><VAR>definition</VAR></DT>
<DD>The contents of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>definition</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are tokenized and processed as if they appeared during translation phase three in a &#8216;<SAMP><SPAN class=samp>#define</SPAN></SAMP>&#8217; directive. In particular, the definition will be truncated by embedded newline characters.
<P>If you are invoking the preprocessor from a shell or shell-like program you may need to use the shell's quoting syntax to protect characters such as spaces that have a meaning in the shell syntax.</P>
<P>If you wish to define a function-like macro on the command line, write its argument list with surrounding parentheses before the equals sign (if any). Parentheses are meaningful to most shells, so you will need to quote the option. With<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>sh</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>csh</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-D'</SPAN><VAR>name</VAR><SPAN class=option>(</SPAN><VAR>args<SMALL class=dots>...</SMALL></VAR><SPAN class=option>)=</SPAN><VAR>definition</VAR><SPAN class=option>'</SPAN></SAMP>works.</P>
<P><SAMP><SPAN class=option>-D</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-U</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options are processed in the order they are given on the command line. All<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-imacros<SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN><VAR>file</VAR></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-include<SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN><VAR>file</VAR></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options are processed after all<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-D</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-U</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-U<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>name</VAR></DT>
<DD><A name=index-U-989></A>Cancel any previous definition of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>, either built in or provided with a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-D</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-undef</CODE></DT>
<DD><A name=index-undef-990></A>Do not predefine any system-specific or GCC-specific macros. The standard predefined macros remain defined.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-I<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>dir</VAR></DT>
<DD><A name=index-I-991></A>Add the directory<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dir</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the list of directories to be searched for header files. Directories named by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-I</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>are searched before the standard system include directories. If the directory<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dir</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a standard system include directory, the option is ignored to ensure that the default search order for system directories and the special treatment of system headers are not defeated . If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dir</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>begins with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>=</CODE>, then the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>=</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be replaced by the sysroot prefix; see<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>--sysroot</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-isysroot</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-o<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>file</VAR></DT>
<DD><A name=index-o-992></A>Write output to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file</VAR>. This is the same as specifying<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the second non-option argument to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>cpp</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gcc</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>has a different interpretation of a second non-option argument, so you must use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-o</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to specify the output file.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-Wall</CODE></DT>
<DD><A name=index-Wall-993></A>Turns on all optional warnings which are desirable for normal code. At present this is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wcomment</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wtrigraphs</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wmultichar</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and a warning about integer promotion causing a change of sign in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#if</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expressions. Note that many of the preprocessor's warnings are on by default and have no options to control them.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-Wcomment</CODE></DT>
<DT><CODE>-Wcomments</CODE></DT>
<DD><A name=index-Wcomment-994></A><A name=index-Wcomments-995></A>Warn whenever a comment-start sequence &#8216;<SAMP><SPAN class=samp>/*</SPAN></SAMP>&#8217; appears in a &#8216;<SAMP><SPAN class=samp>/*</SPAN></SAMP>&#8217; comment, or whenever a backslash-newline appears in a &#8216;<SAMP><SPAN class=samp>//</SPAN></SAMP>&#8217; comment. (Both forms have the same effect.)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-Wtrigraphs</CODE></DT>
<DD><A name=index-Wtrigraphs-996></A><A name=Wtrigraphs></A>Most trigraphs in comments cannot affect the meaning of the program. However, a trigraph that would form an escaped newline (&#8216;<SAMP><SPAN class=samp>??/</SPAN></SAMP>&#8217; at the end of a line) can, by changing where the comment begins or ends. Therefore, only trigraphs that would form escaped newlines produce warnings inside a comment.
<P>This option is implied by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not given, this option is still enabled unless trigraphs are enabled. To get trigraph conversion without warnings, but get the other<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wall</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>warnings, use &#8216;<SAMP><SPAN class=samp>-trigraphs -Wall -Wno-trigraphs</SPAN></SAMP>&#8217;.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-Wtraditional</CODE></DT>
<DD><A name=index-Wtraditional-997></A>Warn about certain constructs that behave differently in traditional and ISO C. Also warn about ISO C constructs that have no traditional C equivalent, and problematic constructs which should be avoided.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-Wundef</CODE></DT>
<DD><A name=index-Wundef-998></A>Warn whenever an identifier which is not a macro is encountered in an &#8216;<SAMP><SPAN class=samp>#if</SPAN></SAMP>&#8217; directive, outside of &#8216;<SAMP><SPAN class=samp>defined</SPAN></SAMP>&#8217;. Such identifiers are replaced with zero.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-Wunused-macros</CODE></DT>
<DD><A name=index-Wunused-macros-999></A>Warn about macros defined in the main file that are unused. A macro is<SPAN class=Apple-converted-space>&nbsp;</SPAN><DFN>used</DFN><SPAN class=Apple-converted-space>&nbsp;</SPAN>if it is expanded or tested for existence at least once. The preprocessor will also warn if the macro has not been used at the time it is redefined or undefined.
<P>Built-in macros, macros defined on the command line, and macros defined in include files are not warned about.</P>
<P><EM>Note:</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>If a macro is actually used, but only used in skipped conditional blocks, then CPP will report it as unused. To avoid the warning in such a case, you might improve the scope of the macro's definition by, for example, moving it into the first skipped block. Alternatively, you could provide a dummy use with something like:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          #if defined the_macro_causing_the_warning
          #endif
</PRE><BR></DD>
<DT><CODE>-Wendif-labels</CODE></DT>
<DD><A name=index-Wendif-labels-1000></A>Warn whenever an &#8216;<SAMP><SPAN class=samp>#else</SPAN></SAMP>&#8217; or an &#8216;<SAMP><SPAN class=samp>#endif</SPAN></SAMP>&#8217; are followed by text. This usually happens in code of the form<PRE style="FONT-SIZE: smaller" class=smallexample>          #if FOO
          ...
          #else FOO
          ...
          #endif FOO
</PRE>
<P class=noindent>The second and third<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>FOO</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be in comments, but often are not in older programs. This warning is on by default.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-Werror</CODE></DT>
<DD><A name=index-Werror-1001></A>Make all warnings into hard errors. Source code which triggers warnings will be rejected.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-Wsystem-headers</CODE></DT>
<DD><A name=index-Wsystem-headers-1002></A>Issue warnings for code in system headers. These are normally unhelpful in finding bugs in your own code, therefore suppressed. If you are responsible for the system library, you may want to see them.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-w</CODE></DT>
<DD><A name=index-w-1003></A>Suppress all warnings, including those which GNU CPP issues by default.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-pedantic</CODE></DT>
<DD><A name=index-pedantic-1004></A>Issue all the mandatory diagnostics listed in the C standard. Some of them are left out by default, since they trigger frequently on harmless code.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-pedantic-errors</CODE></DT>
<DD><A name=index-pedantic-errors-1005></A>Issue all the mandatory diagnostics, and make all mandatory diagnostics into errors. This includes mandatory diagnostics that GCC issues without &#8216;<SAMP><SPAN class=samp>-pedantic</SPAN></SAMP>&#8217; but treats as warnings.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-M</CODE></DT>
<DD><A name=index-M-1006></A><A name=index-g_t_0040command_007bmake_007d-1007></A><A name=index-dependencies_002c-_0040command_007bmake_007d-1008></A>Instead of outputting the result of preprocessing, output a rule suitable for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>make</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>describing the dependencies of the main source file. The preprocessor outputs one<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>make</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>rule containing the object file name for that source file, a colon, and the names of all the included files, including those coming from<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-include</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-imacros</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>command line options.
<P>Unless specified explicitly (with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-MT</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-MQ</SPAN></SAMP>), the object file name consists of the name of the source file with any suffix replaced with object file suffix and with any leading directory parts removed. If there are many included files then the rule is split into several lines using &#8216;<SAMP><SPAN class=samp>\</SPAN></SAMP>&#8217;-newline. The rule has no commands.</P>
<P>This option does not suppress the preprocessor's debug output, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-dM</SPAN></SAMP>. To avoid mixing such debug output with the dependency rules you should explicitly specify the dependency output file with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-MF</SPAN></SAMP>, or use an environment variable like<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=env>DEPENDENCIES_OUTPUT</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Environment-Variables.html#Environment-Variables">Environment Variables</A>). Debug output will still be sent to the regular output stream as normal.</P>
<P>Passing<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-M</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the driver implies<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-E</SPAN></SAMP>, and suppresses warnings with an implicit<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-w</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-MM</CODE></DT>
<DD><A name=index-MM-1009></A>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-M</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>but do not mention header files that are found in system header directories, nor header files that are included, directly or indirectly, from such a header.
<P>This implies that the choice of angle brackets or double quotes in an &#8216;<SAMP><SPAN class=samp>#include</SPAN></SAMP>&#8217; directive does not in itself determine whether that header will appear in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-MM</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>dependency output. This is a slight change in semantics from GCC versions 3.0 and earlier.</P>
<P><A name=dashMF></A><BR></P></DD>
<DT><CODE>-MF<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>file</VAR></DT>
<DD><A name=index-MF-1010></A>When used with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-M</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-MM</SPAN></SAMP>, specifies a file to write the dependencies to. If no<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-MF</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>switch is given the preprocessor sends the rules to the same place it would have sent preprocessed output.
<P>When used with the driver options<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-MD</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-MMD</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-MF</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>overrides the default dependency output file.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-MG</CODE></DT>
<DD><A name=index-MG-1011></A>In conjunction with an option such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-M</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>requesting dependency generation,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-MG</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>assumes missing header files are generated files and adds them to the dependency list without raising an error. The dependency filename is taken directly from the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#include</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>directive without prepending any path.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-MG</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>also suppresses preprocessed output, as a missing header file renders this useless.
<P>This feature is used in automatic updating of makefiles.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-MP</CODE></DT>
<DD><A name=index-MP-1012></A>This option instructs CPP to add a phony target for each dependency other than the main file, causing each to depend on nothing. These dummy rules work around errors<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>make</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>gives if you remove header files without updating the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>Makefile</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to match.
<P>This is typical output:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          test.o: test.c test.h
          
          test.h:
</PRE><BR></DD>
<DT><CODE>-MT<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>target</VAR></DT>
<DD><A name=index-MT-1013></A>Change the target of the rule emitted by dependency generation. By default CPP takes the name of the main input file, deletes any directory components and any file suffix such as &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217;, and appends the platform's usual object suffix. The result is the target.
<P>An<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-MT</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option will set the target to be exactly the string you specify. If you want multiple targets, you can specify them as a single argument to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-MT</SPAN></SAMP>, or use multiple<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-MT</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options.</P>
<P>For example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-MT&nbsp;'$(objpfx)foo.o'</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>might give</P><PRE style="FONT-SIZE: smaller" class=smallexample>          $(objpfx)foo.o: foo.c
</PRE><BR></DD>
<DT><CODE>-MQ<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>target</VAR></DT>
<DD><A name=index-MQ-1014></A>Same as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-MT</SPAN></SAMP>, but it quotes any characters which are special to Make.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-MQ&nbsp;'$(objpfx)foo.o'</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>gives<PRE style="FONT-SIZE: smaller" class=smallexample>          $$(objpfx)foo.o: foo.c
</PRE>
<P>The default target is automatically quoted, as if it were given with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-MQ</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-MD</CODE></DT>
<DD><A name=index-MD-1015></A><SAMP><SPAN class=option>-MD</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-M -MF<SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN><VAR>file</VAR></SAMP>, except that<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-E</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not implied. The driver determines<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>based on whether an<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-o</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is given. If it is, the driver uses its argument but with a suffix of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.d</SPAN></SAMP>, otherwise it takes the name of the input file, removes any directory components and suffix, and applies a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.d</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>suffix.
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-MD</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used in conjunction with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-E</SPAN></SAMP>, any<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-o</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>switch is understood to specify the dependency output file (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/dashMF.html#dashMF">-MF</A>), but if used without<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-E</SPAN></SAMP>, each<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-o</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is understood to specify a target object file.</P>
<P>Since<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-E</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not implied,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-MD</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be used to generate a dependency output file as a side-effect of the compilation process.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-MMD</CODE></DT>
<DD><A name=index-MMD-1016></A>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-MD</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>except mention only user header files, not system header files.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fpch-deps</CODE></DT>
<DD><A name=index-fpch-deps-1017></A>When using precompiled headers (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Precompiled-Headers.html#Precompiled-Headers">Precompiled Headers</A>), this flag will cause the dependency-output flags to also list the files from the precompiled header's dependencies. If not specified only the precompiled header would be listed and not the files that were used to create it because those files are not consulted when a precompiled header is used.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fpch-preprocess</CODE></DT>
<DD><A name=index-fpch-preprocess-1018></A>This option allows use of a precompiled header (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Precompiled-Headers.html#Precompiled-Headers">Precompiled Headers</A>) together with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-E</SPAN></SAMP>. It inserts a special<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#pragma</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#pragma GCC pch_preprocess "</CODE><VAR>filename</VAR><CODE>"</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the output to mark the place where the precompiled header was found, and its<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>filename</VAR>. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fpreprocessed</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is in use, GCC recognizes this<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#pragma</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and loads the PCH.
<P>This option is off by default, because the resulting preprocessed output is only really suitable as input to GCC. It is switched on by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-save-temps</SPAN></SAMP>.</P>
<P>You should not write this<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#pragma</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in your own code, but it is safe to edit the filename if the PCH file is available in a different location. The filename may be absolute or it may be relative to GCC's current directory.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-x c</CODE></DT>
<DT><CODE>-x c++</CODE></DT>
<DT><CODE>-x objective-c</CODE></DT>
<DT><CODE>-x assembler-with-cpp</CODE></DT>
<DD><A name=index-x-1019></A>Specify the source language: C, C++, Objective-C, or assembly. This has nothing to do with standards conformance or extensions; it merely selects which base syntax to expect. If you give none of these options, cpp will deduce the language from the extension of the source file: &#8216;<SAMP><SPAN class=samp>.c</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>.cc</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>.m</SPAN></SAMP>&#8217;, or &#8216;<SAMP><SPAN class=samp>.S</SPAN></SAMP>&#8217;. Some other common extensions for C++ and assembly are also recognized. If cpp does not recognize the extension, it will treat the file as C; this is the most generic mode.
<P><EM>Note:</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>Previous versions of cpp accepted a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-lang</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option which selected both the language and the standards conformance level. This option has been removed, because it conflicts with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-l</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-std=</CODE><VAR>standard</VAR></DT>
<DT><CODE>-ansi</CODE></DT>
<DD><A name=index-ansi-1020></A><A name=index-std_003d-1021></A>Specify the standard to which the code should conform. Currently CPP knows about C and C++ standards; others may be added in the future.
<P><VAR>standard</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be one of:</P>
<DL>
<DT><CODE>c90</CODE></DT>
<DT><CODE>c89</CODE></DT>
<DT><CODE>iso9899:1990</CODE></DT>
<DD>The ISO C standard from 1990. &#8216;<SAMP><SPAN class=samp>c90</SPAN></SAMP>&#8217; is the customary shorthand for this version of the standard.
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ansi</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-std=c90</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>iso9899:199409</CODE></DT>
<DD>The 1990 C standard, as amended in 1994.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>iso9899:1999</CODE></DT>
<DT><CODE>c99</CODE></DT>
<DT><CODE>iso9899:199x</CODE></DT>
<DT><CODE>c9x</CODE></DT>
<DD>The revised ISO C standard, published in December 1999. Before publication, this was known as C9X.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>iso9899:2011</CODE></DT>
<DT><CODE>c11</CODE></DT>
<DT><CODE>c1x</CODE></DT>
<DD>The revised ISO C standard, published in December 2011. Before publication, this was known as C1X.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>gnu90</CODE></DT>
<DT><CODE>gnu89</CODE></DT>
<DD>The 1990 C standard plus GNU extensions. This is the default.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>gnu99</CODE></DT>
<DT><CODE>gnu9x</CODE></DT>
<DD>The 1999 C standard plus GNU extensions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>gnu11</CODE></DT>
<DT><CODE>gnu1x</CODE></DT>
<DD>The 2011 C standard plus GNU extensions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>c++98</CODE></DT>
<DD>The 1998 ISO C++ standard plus amendments.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>gnu++98</CODE></DT>
<DD>The same as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-std=c++98</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>plus GNU extensions. This is the default for C++ code.</DD></DL><BR></DD>
<DT><CODE>-I-</CODE></DT>
<DD><A name=index-I--1022></A>Split the include path. Any directories specified with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-I</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options before<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-I-</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>are searched only for headers requested with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#include&nbsp;"</CODE><VAR>file</VAR><CODE>"</CODE>; they are not searched for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#include&nbsp;&lt;</CODE><VAR>file</VAR><CODE>&gt;</CODE>. If additional directories are specified with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-I</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options after the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-I-</SPAN></SAMP>, those directories are searched for all &#8216;<SAMP><SPAN class=samp>#include</SPAN></SAMP>&#8217; directives.
<P>In addition,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-I-</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>inhibits the use of the directory of the current file directory as the first search directory for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#include&nbsp;"</CODE><VAR>file</VAR><CODE>"</CODE>. This option has been deprecated.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-nostdinc</CODE></DT>
<DD><A name=index-nostdinc-1023></A>Do not search the standard system directories for header files. Only the directories you have specified with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-I</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options (and the directory of the current file, if appropriate) are searched.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-nostdinc++</CODE></DT>
<DD><A name=index-nostdinc_002b_002b-1024></A>Do not search for header files in the C++-specific standard directories, but do still search the other standard directories. (This option is used when building the C++ library.)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-include<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>file</VAR></DT>
<DD><A name=index-include-1025></A>Process<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#include "file"</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>appeared as the first line of the primary source file. However, the first directory searched for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the preprocessor's working directory<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>instead of</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>the directory containing the main source file. If not found there, it is searched for in the remainder of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#include "..."</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>search chain as normal.
<P>If multiple<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-include</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options are given, the files are included in the order they appear on the command line.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-imacros<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>file</VAR></DT>
<DD><A name=index-imacros-1026></A>Exactly like<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-include</SPAN></SAMP>, except that any output produced by scanning<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is thrown away. Macros it defines remain defined. This allows you to acquire all the macros from a header without also processing its declarations.
<P>All files specified by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-imacros</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>are processed before all files specified by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-include</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-idirafter<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>dir</VAR></DT>
<DD><A name=index-idirafter-1027></A>Search<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dir</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>for header files, but do it<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>after</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>all directories specified with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-I</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the standard system directories have been exhausted.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dir</VAR>is treated as a system include directory. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dir</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>begins with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>=</CODE>, then the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>=</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be replaced by the sysroot prefix; see<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>--sysroot</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-isysroot</SPAN></SAMP>.<BR></DD>
<DT><CODE>-iprefix<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>prefix</VAR></DT>
<DD><A name=index-iprefix-1028></A>Specify<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>prefix</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the prefix for subsequent<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-iwithprefix</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options. If the prefix represents a directory, you should include the final &#8216;<SAMP><SPAN class=samp>/</SPAN></SAMP>&#8217;.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-iwithprefix<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>dir</VAR></DT>
<DT><CODE>-iwithprefixbefore<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>dir</VAR></DT>
<DD><A name=index-iwithprefix-1029></A><A name=index-iwithprefixbefore-1030></A>Append<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dir</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the prefix specified previously with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-iprefix</SPAN></SAMP>, and add the resulting directory to the include search path.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-iwithprefixbefore</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>puts it in the same place<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-I</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>would;<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-iwithprefix</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>puts it where<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-idirafter</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>would.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-isysroot<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>dir</VAR></DT>
<DD><A name=index-isysroot-1031></A>This option is like the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>--sysroot</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option, but applies only to header files (except for Darwin targets, where it applies to both header files and libraries). See the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>--sysroot</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option for more information.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-imultilib<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>dir</VAR></DT>
<DD><A name=index-imultilib-1032></A>Use<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dir</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a subdirectory of the directory containing target-specific C++ headers.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-isystem<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>dir</VAR></DT>
<DD><A name=index-isystem-1033></A>Search<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dir</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>for header files, after all directories specified by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-I</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>but before the standard system directories. Mark it as a system directory, so that it gets the same special treatment as is applied to the standard system directories. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dir</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>begins with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>=</CODE>, then the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>=</CODE>will be replaced by the sysroot prefix; see<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>--sysroot</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-isysroot</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-iquote<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>dir</VAR></DT>
<DD><A name=index-iquote-1034></A>Search<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dir</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>only for header files requested with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#include&nbsp;"</CODE><VAR>file</VAR><CODE>"</CODE>; they are not searched for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#include&nbsp;&lt;</CODE><VAR>file</VAR><CODE>&gt;</CODE>, before all directories specified by<SAMP><SPAN class=option>-I</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and before the standard system directories. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dir</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>begins with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>=</CODE>, then the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>=</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be replaced by the sysroot prefix; see<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>--sysroot</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-isysroot</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdirectives-only</CODE></DT>
<DD><A name=index-fdirectives-only-1035></A>When preprocessing, handle directives, but do not expand macros.
<P>The option's behavior depends on the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-E</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fpreprocessed</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options.</P>
<P>With<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-E</SPAN></SAMP>, preprocessing is limited to the handling of directives such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#define</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#ifdef</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#error</CODE>. Other preprocessor operations, such as macro expansion and trigraph conversion are not performed. In addition, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-dD</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is implicitly enabled.</P>
<P>With<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fpreprocessed</SPAN></SAMP>, predefinition of command line and most builtin macros is disabled. Macros such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__LINE__</CODE>, which are contextually dependent, are handled normally. This enables compilation of files previously preprocessed with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-E -fdirectives-only</CODE>.</P>
<P>With both<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-E</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fpreprocessed</SPAN></SAMP>, the rules for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fpreprocessed</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>take precedence. This enables full preprocessing of files previously preprocessed with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-E -fdirectives-only</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-fdollars-in-identifiers</CODE></DT>
<DD><A name=index-fdollars-in-identifiers-1036></A><A name=fdollars-in-identifiers></A>Accept &#8216;<SAMP><SPAN class=samp>$</SPAN></SAMP>&#8217; in identifiers.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fextended-identifiers</CODE></DT>
<DD><A name=index-fextended-identifiers-1037></A>Accept universal character names in identifiers. This option is experimental; in a future version of GCC, it will be enabled by default for C99 and C++.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fno-canonical-system-headers</CODE></DT>
<DD><A name=index-fno-canonical-system-headers-1038></A>When preprocessing, do not shorten system header paths with canonicalization.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fpreprocessed</CODE></DT>
<DD><A name=index-fpreprocessed-1039></A>Indicate to the preprocessor that the input file has already been preprocessed. This suppresses things like macro expansion, trigraph conversion, escaped newline splicing, and processing of most directives. The preprocessor still recognizes and removes comments, so that you can pass a file preprocessed with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-C</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the compiler without problems. In this mode the integrated preprocessor is little more than a tokenizer for the front ends.
<P><SAMP><SPAN class=option>-fpreprocessed</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is implicit if the input file has one of the extensions &#8216;<SAMP><SPAN class=samp>.i</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>.ii</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>.mi</SPAN></SAMP>&#8217;. These are the extensions that GCC uses for preprocessed files created by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-save-temps</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-ftabstop=</CODE><VAR>width</VAR></DT>
<DD><A name=index-ftabstop-1040></A>Set the distance between tab stops. This helps the preprocessor report correct column numbers in warnings or errors, even if tabs appear on the line. If the value is less than 1 or greater than 100, the option is ignored. The default is 8.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdebug-cpp</CODE></DT>
<DD><A name=index-fdebug-cpp-1041></A>This option is only useful for debugging GCC. When used with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-E</SPAN></SAMP>, dumps debugging information about location maps. Every token in the output is preceded by the dump of the map its location belongs to. The dump of the map holding the location of a token would be:<PRE style="FONT-SIZE: smaller" class=smallexample>          {&#8216;<SAMP><SPAN class=samp>P</SPAN></SAMP>&#8217;:<SAMP><SPAN class=file>/file/path</SPAN></SAMP>;&#8216;<SAMP><SPAN class=samp>F</SPAN></SAMP>&#8217;:<SAMP><SPAN class=file>/includer/path</SPAN></SAMP>;&#8216;<SAMP><SPAN class=samp>L</SPAN></SAMP>&#8217;:<VAR>line_num</VAR>;&#8216;<SAMP><SPAN class=samp>C</SPAN></SAMP>&#8217;:<VAR>col_num</VAR>;&#8216;<SAMP><SPAN class=samp>S</SPAN></SAMP>&#8217;:<VAR>system_header_p</VAR>;&#8216;<SAMP><SPAN class=samp>M</SPAN></SAMP>&#8217;:<VAR>map_address</VAR>;&#8216;<SAMP><SPAN class=samp>E</SPAN></SAMP>&#8217;:<VAR>macro_expansion_p</VAR>,&#8216;<SAMP><SPAN class=samp>loc</SPAN></SAMP>&#8217;:<VAR>location</VAR>}
</PRE>
<P>When used without<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-E</SPAN></SAMP>, this option has no effect.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-ftrack-macro-expansion</CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>[</SPAN><CODE>=</CODE><VAR>level</VAR><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>]</SPAN></DT>
<DD><A name=index-ftrack-macro-expansion-1042></A>Track locations of tokens across macro expansions. This allows the compiler to emit diagnostic about the current macro expansion stack when a compilation error occurs in a macro expansion. Using this option makes the preprocessor and the compiler consume more memory. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>level</VAR>parameter can be used to choose the level of precision of token location tracking thus decreasing the memory consumption if necessary. Value &#8216;<SAMP><SPAN class=samp>0</SPAN></SAMP>&#8217; of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>level</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>de-activates this option just as if no<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ftrack-macro-expansion</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>was present on the command line. Value &#8216;<SAMP><SPAN class=samp>1</SPAN></SAMP>&#8217; tracks tokens locations in a degraded mode for the sake of minimal memory overhead. In this mode all tokens resulting from the expansion of an argument of a function-like macro have the same location. Value &#8216;<SAMP><SPAN class=samp>2</SPAN></SAMP>&#8217; tracks tokens locations completely. This value is the most memory hungry. When this option is given no argument, the default parameter value is &#8216;<SAMP><SPAN class=samp>2</SPAN></SAMP>&#8217;.
<P>Note that -ftrack-macro-expansion=2 is activated by default.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-fexec-charset=</CODE><VAR>charset</VAR></DT>
<DD><A name=index-fexec-charset-1043></A><A name=index-character-set_002c-execution-1044></A>Set the execution character set, used for string and character constants. The default is UTF-8.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>charset</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be any encoding supported by the system's<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>iconv</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>library routine.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fwide-exec-charset=</CODE><VAR>charset</VAR></DT>
<DD><A name=index-fwide-exec-charset-1045></A><A name=index-character-set_002c-wide-execution-1046></A>Set the wide execution character set, used for wide string and character constants. The default is UTF-32 or UTF-16, whichever corresponds to the width of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>wchar_t</CODE>. As with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fexec-charset</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>charset</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be any encoding supported by the system's<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>iconv</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>library routine; however, you will have problems with encodings that do not fit exactly in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>wchar_t</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-finput-charset=</CODE><VAR>charset</VAR></DT>
<DD><A name=index-finput-charset-1047></A><A name=index-character-set_002c-input-1048></A>Set the input character set, used for translation from the character set of the input file to the source character set used by GCC. If the locale does not specify, or GCC cannot get this information from the locale, the default is UTF-8. This can be overridden by either the locale or this command line option. Currently the command line option takes precedence if there's a conflict.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>charset</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be any encoding supported by the system's<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>iconv</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>library routine.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fworking-directory</CODE></DT>
<DD><A name=index-fworking-directory-1049></A><A name=index-fno-working-directory-1050></A>Enable generation of linemarkers in the preprocessor output that will let the compiler know the current working directory at the time of preprocessing. When this option is enabled, the preprocessor will emit, after the initial linemarker, a second linemarker with the current working directory followed by two slashes. GCC will use this directory, when it's present in the preprocessed input, as the directory emitted as the current working directory in some debugging information formats. This option is implicitly enabled if debugging information is enabled, but this can be inhibited with the negated form<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fno-working-directory</SPAN></SAMP>. If the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-P</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>flag is present in the command line, this option has no effect, since no<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#line</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>directives are emitted whatsoever.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fno-show-column</CODE></DT>
<DD><A name=index-fno-show-column-1051></A>Do not print column numbers in diagnostics. This may be necessary if diagnostics are being scanned by a program that does not understand the column numbers, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>dejagnu</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-A<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>predicate</VAR><CODE>=</CODE><VAR>answer</VAR></DT>
<DD><A name=index-A-1052></A>Make an assertion with the predicate<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>predicate</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and answer<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>answer</VAR>. This form is preferred to the older form<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-A<SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN><VAR>predicate</VAR><SPAN class=option>(</SPAN><VAR>answer</VAR><SPAN class=option>)</SPAN></SAMP>, which is still supported, because it does not use shell special characters.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-A -</CODE><VAR>predicate</VAR><CODE>=</CODE><VAR>answer</VAR></DT>
<DD>Cancel an assertion with the predicate<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>predicate</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and answer<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>answer</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-dCHARS</CODE></DT>
<DD><VAR>CHARS</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a sequence of one or more of the following characters, and must not be preceded by a space. Other characters are interpreted by the compiler proper, or reserved for future versions of GCC, and so are silently ignored. If you specify characters whose behavior conflicts, the result is undefined.
<DL>
<DT>&#8216;<SAMP><SPAN class=samp>M</SPAN></SAMP>&#8217;</DT>
<DD><A name=index-dM-1053></A>Instead of the normal output, generate a list of &#8216;<SAMP><SPAN class=samp>#define</SPAN></SAMP>&#8217; directives for all the macros defined during the execution of the preprocessor, including predefined macros. This gives you a way of finding out what is predefined in your version of the preprocessor. Assuming you have no file<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>foo.h</SPAN></SAMP>, the command<PRE style="FONT-SIZE: smaller" class=smallexample>               touch foo.h; cpp -dM foo.h
</PRE>
<P class=noindent>will show all the predefined macros.</P>
<P>If you use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-dM</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>without the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-E</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-dM</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is interpreted as a synonym for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fdump-rtl-mach</SPAN></SAMP>. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Debugging-Options.html#Debugging-Options">Debugging Options</A>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT>&#8216;<SAMP><SPAN class=samp>D</SPAN></SAMP>&#8217;</DT>
<DD><A name=index-dD-1054></A>Like &#8216;<SAMP><SPAN class=samp>M</SPAN></SAMP>&#8217; except in two respects: it does<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>not</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>include the predefined macros, and it outputs<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>both</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>the &#8216;<SAMP><SPAN class=samp>#define</SPAN></SAMP>&#8217; directives and the result of preprocessing. Both kinds of output go to the standard output file.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>N</SPAN></SAMP>&#8217;</DT>
<DD><A name=index-dN-1055></A>Like &#8216;<SAMP><SPAN class=samp>D</SPAN></SAMP>&#8217;, but emit only the macro names, not their expansions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>I</SPAN></SAMP>&#8217;</DT>
<DD><A name=index-dI-1056></A>Output &#8216;<SAMP><SPAN class=samp>#include</SPAN></SAMP>&#8217; directives in addition to the result of preprocessing.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>U</SPAN></SAMP>&#8217;</DT>
<DD><A name=index-dU-1057></A>Like &#8216;<SAMP><SPAN class=samp>D</SPAN></SAMP>&#8217; except that only macros that are expanded, or whose definedness is tested in preprocessor directives, are output; the output is delayed until the use or test of the macro; and &#8216;<SAMP><SPAN class=samp>#undef</SPAN></SAMP>&#8217; directives are also output for macros tested but undefined at the time.</DD></DL><BR></DD>
<DT><CODE>-P</CODE></DT>
<DD><A name=index-P-1058></A>Inhibit generation of linemarkers in the output from the preprocessor. This might be useful when running the preprocessor on something that is not C code, and will be sent to a program which might be confused by the linemarkers.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-C</CODE></DT>
<DD><A name=index-C-1059></A>Do not discard comments. All comments are passed through to the output file, except for comments in processed directives, which are deleted along with the directive.
<P>You should be prepared for side effects when using<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-C</SPAN></SAMP>; it causes the preprocessor to treat comments as tokens in their own right. For example, comments appearing at the start of what would be a directive line have the effect of turning that line into an ordinary source line, since the first token on the line is no longer a &#8216;<SAMP><SPAN class=samp>#</SPAN></SAMP>&#8217;.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-CC</CODE></DT>
<DD>Do not discard comments, including during macro expansion. This is like<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-C</SPAN></SAMP>, except that comments contained within macros are also passed through to the output file where the macro is expanded.
<P>In addition to the side-effects of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-C</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-CC</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option causes all C++-style comments inside a macro to be converted to C-style comments. This is to prevent later use of that macro from inadvertently commenting out the remainder of the source line.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-CC</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is generally used to support lint comments.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-traditional-cpp</CODE></DT>
<DD><A name=index-traditional-cpp-1060></A>Try to imitate the behavior of old-fashioned C preprocessors, as opposed to ISO C preprocessors.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-trigraphs</CODE></DT>
<DD><A name=index-trigraphs-1061></A>Process trigraph sequences. These are three-character sequences, all starting with &#8216;<SAMP><SPAN class=samp>??</SPAN></SAMP>&#8217;, that are defined by ISO C to stand for single characters. For example, &#8216;<SAMP><SPAN class=samp>??/</SPAN></SAMP>&#8217; stands for &#8216;<SAMP><SPAN class=samp>\</SPAN></SAMP>&#8217;, so &#8216;<SAMP><SPAN class=samp>'??/n'</SPAN></SAMP>&#8217; is a character constant for a newline. By default, GCC ignores trigraphs, but in standard-conforming modes it converts them. See the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-std</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ansi</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options.
<P>The nine trigraphs and their replacements are</P><PRE style="FONT-SIZE: smaller" class=smallexample>          Trigraph:       ??(  ??)  ??&lt;  ??&gt;  ??=  ??/  ??'  ??!  ??-
          Replacement:      [    ]    {    }    #    \    ^    |    ~
</PRE><BR></DD>
<DT><CODE>-remap</CODE></DT>
<DD><A name=index-remap-1062></A>Enable special code to work around file systems which only permit very short file names, such as MS-DOS.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>--help</CODE></DT>
<DT><CODE>--target-help</CODE></DT>
<DD><A name=index-help-1063></A><A name=index-target-help-1064></A>Print text describing all the command line options instead of preprocessing anything.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-v</CODE></DT>
<DD><A name=index-v-1065></A>Verbose mode. Print out GNU CPP's version number at the beginning of execution, and report the final form of the include path.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-H</CODE></DT>
<DD><A name=index-H-1066></A>Print the name of each header file used, in addition to other normal activities. Each name is indented to show how deep in the &#8216;<SAMP><SPAN class=samp>#include</SPAN></SAMP>&#8217; stack it is. Precompiled header files are also printed, even if they are found to be invalid; an invalid precompiled header file is printed with &#8216;<SAMP><SPAN class=samp>...x</SPAN></SAMP>&#8217; and a valid one with &#8216;<SAMP><SPAN class=samp>...!</SPAN></SAMP>&#8217; .<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-version</CODE></DT>
<DT><CODE>--version</CODE></DT>
<DD><A name=index-version-1067></A>Print out GNU CPP's version number. With one dash, proceed to preprocess as normal. With two dashes, exit immediately.</DD></DL>