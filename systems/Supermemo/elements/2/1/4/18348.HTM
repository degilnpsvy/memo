<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>3.9 Options for Debugging Your Program or GCC</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-options_002c-debugging-571></A><A name=index-debugging-information-options-572></A>GCC has various special options that are used for debugging either your program or GCC:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>-g</CODE></DT>
<DD><A name=index-g-573></A>Produce debugging information in the operating system's native format (stabs, COFF, XCOFF, or DWARF 2). GDB can work with this debugging information.
<P>On most systems that use stabs format,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-g</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>enables use of extra debugging information that only GDB can use; this extra information makes debugging work better in GDB but probably makes other debuggers crash or refuse to read the program. If you want to control for certain whether to generate the extra information, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-gstabs+</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-gstabs</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-gxcoff+</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-gxcoff</SPAN></SAMP>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-gvms</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see below).</P>
<P>GCC allows you to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-g</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-O</SPAN></SAMP>. The shortcuts taken by optimized code may occasionally produce surprising results: some variables you declared may not exist at all; flow of control may briefly move where you did not expect it; some statements may not be executed because they compute constant results or their values are already at hand; some statements may execute in different places because they have been moved out of loops.</P>
<P>Nevertheless it proves possible to debug optimized output. This makes it reasonable to use the optimizer for programs that might have bugs.</P>
<P>The following options are useful when GCC is generated with the capability for more than one debugging format.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-gsplit-dwarf</CODE></DT>
<DD><A name=index-gsplit-dwarf-574></A>Separate as much dwarf debugging information as possible into a separate output file with the extension .dwo. This option allows the build system to avoid linking files with debug information. To be useful, this option requires a debugger capable of reading .dwo files.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-ggdb</CODE></DT>
<DD><A name=index-ggdb-575></A>Produce debugging information for use by GDB. This means to use the most expressive format available (DWARF 2, stabs, or the native format if neither of those are supported), including GDB extensions if at all possible.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-gpubnames</CODE></DT>
<DD><A name=index-gpubnames-576></A>Generate dwarf .debug_pubnames and .debug_pubtypes sections.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-ggnu-pubnames</CODE></DT>
<DD><A name=index-ggnu-pubnames-577></A>Generate .debug_pubnames and .debug_pubtypes sections in a format suitable for conversion into a GDB index. This option is only useful with a linker that can produce GDB index version 7.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-gstabs</CODE></DT>
<DD><A name=index-gstabs-578></A>Produce debugging information in stabs format (if that is supported), without GDB extensions. This is the format used by DBX on most BSD systems. On MIPS, Alpha and System V Release 4 systems this option produces stabs debugging output that is not understood by DBX or SDB. On System V Release 4 systems this option requires the GNU assembler.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-feliminate-unused-debug-symbols</CODE></DT>
<DD><A name=index-feliminate-unused-debug-symbols-579></A>Produce debugging information in stabs format (if that is supported), for only symbols that are actually used.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-femit-class-debug-always</CODE></DT>
<DD>Instead of emitting debugging information for a C++ class in only one object file, emit it in all object files using the class. This option should be used only with debuggers that are unable to handle the way GCC normally emits debugging information for classes because using this option increases the size of debugging information by as much as a factor of two.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdebug-types-section</CODE></DT>
<DD><A name=index-fdebug-types-section-580></A><A name=index-fno-debug-types-section-581></A>When using DWARF Version 4 or higher, type DIEs can be put into their own<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.debug_types</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>section instead of making them part of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.debug_info</CODE>section. It is more efficient to put them in a separate comdat sections since the linker can then remove duplicates. But not all DWARF consumers support<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.debug_types</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>sections yet and on some objects<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.debug_types</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>produces larger instead of smaller debugging information.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-gstabs+</CODE></DT>
<DD><A name=index-gstabs_002b-582></A>Produce debugging information in stabs format (if that is supported), using GNU extensions understood only by the GNU debugger (GDB). The use of these extensions is likely to make other debuggers crash or refuse to read the program.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-gcoff</CODE></DT>
<DD><A name=index-gcoff-583></A>Produce debugging information in COFF format (if that is supported). This is the format used by SDB on most System V systems prior to System V Release 4.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-gxcoff</CODE></DT>
<DD><A name=index-gxcoff-584></A>Produce debugging information in XCOFF format (if that is supported). This is the format used by the DBX debugger on IBM RS/6000 systems.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-gxcoff+</CODE></DT>
<DD><A name=index-gxcoff_002b-585></A>Produce debugging information in XCOFF format (if that is supported), using GNU extensions understood only by the GNU debugger (GDB). The use of these extensions is likely to make other debuggers crash or refuse to read the program, and may cause assemblers other than the GNU assembler (GAS) to fail with an error.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-gdwarf-</CODE><VAR>version</VAR></DT>
<DD><A name=index-gdwarf-_0040var_007bversion_007d-586></A>Produce debugging information in DWARF format (if that is supported). The value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>version</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be either 2, 3 or 4; the default version for most targets is 4.
<P>Note that with DWARF Version 2, some ports require and always use some non-conflicting DWARF 3 extensions in the unwind tables.</P>
<P>Version 4 may require GDB 7.0 and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fvar-tracking-assignments</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>for maximum benefit.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-grecord-gcc-switches</CODE></DT>
<DD><A name=index-grecord-gcc-switches-587></A>This switch causes the command-line options used to invoke the compiler that may affect code generation to be appended to the DW_AT_producer attribute in DWARF debugging information. The options are concatenated with spaces separating them from each other and from the compiler version. See also<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-frecord-gcc-switches</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>for another way of storing compiler options into the object file. This is the default.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-gno-record-gcc-switches</CODE></DT>
<DD><A name=index-gno-record-gcc-switches-588></A>Disallow appending command-line options to the DW_AT_producer attribute in DWARF debugging information.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-gstrict-dwarf</CODE></DT>
<DD><A name=index-gstrict-dwarf-589></A>Disallow using extensions of later DWARF standard version than selected with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-gdwarf-</SPAN><VAR>version</VAR></SAMP>. On most targets using non-conflicting DWARF extensions from later standard versions is allowed.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-gno-strict-dwarf</CODE></DT>
<DD><A name=index-gno-strict-dwarf-590></A>Allow using extensions of later DWARF standard version than selected with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-gdwarf-</SPAN><VAR>version</VAR></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-gvms</CODE></DT>
<DD><A name=index-gvms-591></A>Produce debugging information in Alpha/VMS debug format (if that is supported). This is the format used by DEBUG on Alpha/VMS systems.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-g</CODE><VAR>level</VAR></DT>
<DT><CODE>-ggdb</CODE><VAR>level</VAR></DT>
<DT><CODE>-gstabs</CODE><VAR>level</VAR></DT>
<DT><CODE>-gcoff</CODE><VAR>level</VAR></DT>
<DT><CODE>-gxcoff</CODE><VAR>level</VAR></DT>
<DT><CODE>-gvms</CODE><VAR>level</VAR></DT>
<DD>Request debugging information and also use<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>level</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to specify how much information. The default level is 2.
<P>Level 0 produces no debug information at all. Thus,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-g0</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>negates<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-g</SPAN></SAMP>.</P>
<P>Level 1 produces minimal information, enough for making backtraces in parts of the program that you don't plan to debug. This includes descriptions of functions and external variables, and line number tables, but no information about local variables.</P>
<P>Level 3 includes extra information, such as all the macro definitions present in the program. Some debuggers support macro expansion when you use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-g3</SPAN></SAMP>.</P>
<P><SAMP><SPAN class=option>-gdwarf-2</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not accept a concatenated debug level, because GCC used to support an option<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-gdwarf</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>that meant to generate debug information in version 1 of the DWARF format (which is very different from version 2), and it would have been too confusing. That debug format is long obsolete, but the option cannot be changed now. Instead use an additional<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-g</SPAN><VAR>level</VAR></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option to change the debug level for DWARF.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-gtoggle</CODE></DT>
<DD><A name=index-gtoggle-592></A>Turn off generation of debug info, if leaving out this option generates it, or turn it on at level 2 otherwise. The position of this argument in the command line does not matter; it takes effect after all other options are processed, and it does so only once, no matter how many times it is given. This is mainly intended to be used with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fcompare-debug</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fsanitize=address</CODE></DT>
<DD><A name=index-fsanitize_003daddress-593></A>Enable AddressSanitizer, a fast memory error detector. Memory access instructions will be instrumented to detect out-of-bounds and use-after-free bugs. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://code.google.com/p/address-sanitizer/">http://code.google.com/p/address-sanitizer/</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>for more details. The run-time behavior can be influenced using the<SAMP><SPAN class=env>ASAN_OPTIONS</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>environment variable; see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://code.google.com/p/address-sanitizer/wiki/Flags#Run-time_flags">https://code.google.com/p/address-sanitizer/wiki/Flags#Run-time_flags</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>for a list of supported options.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fsanitize=thread</CODE></DT>
<DD><A name=index-fsanitize_003dthread-594></A>Enable ThreadSanitizer, a fast data race detector. Memory access instructions will be instrumented to detect data race bugs. See<A href="http://code.google.com/p/thread-sanitizer/">http://code.google.com/p/thread-sanitizer/</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>for more details. The run-time behavior can be influenced using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=env>TSAN_OPTIONS</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>environment variable; see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://code.google.com/p/thread-sanitizer/wiki/Flags">https://code.google.com/p/thread-sanitizer/wiki/Flags</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>for a list of supported options.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fsanitize=leak</CODE></DT>
<DD><A name=index-fsanitize_003dleak-595></A>Enable LeakSanitizer, a memory leak detector. This option only matters for linking of executables and if neither<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fsanitize=address</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>nor<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fsanitize=thread</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used. In that case it will link the executable against a library that overrides<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>malloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and other allocator functions. See<A href="https://code.google.com/p/address-sanitizer/wiki/LeakSanitizer">https://code.google.com/p/address-sanitizer/wiki/LeakSanitizer</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>for more details. The run-time behavior can be influenced using the<SAMP><SPAN class=env>LSAN_OPTIONS</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>environment variable.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fsanitize=undefined</CODE></DT>
<DD><A name=index-fsanitize_003dundefined-596></A>Enable UndefinedBehaviorSanitizer, a fast undefined behavior detector. Various computations will be instrumented to detect undefined behavior at runtime. Current suboptions are:
<DL>
<DT><CODE>-fsanitize=shift</CODE></DT>
<DD><A name=index-fsanitize_003dshift-597></A>This option enables checking that the result of a shift operation is not undefined. Note that what exactly is considered undefined differs slightly between C and C++, as well as between ISO C90 and C99, etc.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fsanitize=integer-divide-by-zero</CODE></DT>
<DD><A name=index-fsanitize_003dinteger-divide-by-zero-598></A>Detect integer division by zero as well as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>INT_MIN / -1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>division.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fsanitize=unreachable</CODE></DT>
<DD><A name=index-fsanitize_003dunreachable-599></A>With this option, the compiler will turn the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_unreachable</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>call into a diagnostics message call instead. When reaching the<CODE>__builtin_unreachable</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>call, the behavior is undefined.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fsanitize=vla-bound</CODE></DT>
<DD><A name=index-fsanitize_003dvla-bound-600></A>This option instructs the compiler to check that the size of a variable length array is positive. This option does not have any effect in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-std=c++1y</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>mode, as the standard requires the exception be thrown instead.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fsanitize=null</CODE></DT>
<DD><A name=index-fsanitize_003dnull-601></A>This option enables pointer checking. Particularly, the application built with this option turned on will issue an error message when it tries to dereference a NULL pointer, or if a reference (possibly an rvalue reference) is bound to a NULL pointer.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fsanitize=return</CODE></DT>
<DD><A name=index-fsanitize_003dreturn-602></A>This option enables return statement checking. Programs built with this option turned on will issue an error message when the end of a non-void function is reached without actually returning a value. This option works in C++ only.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fsanitize=signed-integer-overflow</CODE></DT>
<DD><A name=index-fsanitize_003dsigned-integer-overflow-603></A>This option enables signed integer overflow checking. We check that the result of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>*</CODE>, and both unary and binary<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not overflow in the signed arithmetics. Note, integer promotion rules must be taken into account. That is, the following is not an overflow:<PRE style="FONT-SIZE: smaller" class=smallexample>               signed char a = SCHAR_MAX;
               a++;
</PRE></DD></DL>
<P>While<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ftrapv</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>causes traps for signed overflows to be emitted,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fsanitize=undefined</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>gives a diagnostic message. This currently works only for the C family of languages.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-fdump-final-insns</CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>[</SPAN><CODE>=</CODE><VAR>file</VAR><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>]</SPAN></DT>
<DD><A name=index-fdump-final-insns-604></A>Dump the final internal representation (RTL) to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file</VAR>. If the optional argument is omitted (or if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>file</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.</CODE>), the name of the dump file is determined by appending<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.gkd</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the compilation output file name.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fcompare-debug</CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>[</SPAN><CODE>=</CODE><VAR>opts</VAR><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>]</SPAN></DT>
<DD><A name=index-fcompare-debug-605></A><A name=index-fno-compare-debug-606></A>If no error occurs during compilation, run the compiler a second time, adding<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>opts</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fcompare-debug-second</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the arguments passed to the second compilation. Dump the final internal representation in both compilations, and print an error if they differ.
<P>If the equal sign is omitted, the default<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-gtoggle</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used.</P>
<P>The environment variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=env>GCC_COMPARE_DEBUG</SPAN></SAMP>, if defined, non-empty and nonzero, implicitly enables<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fcompare-debug</SPAN></SAMP>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=env>GCC_COMPARE_DEBUG</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is defined to a string starting with a dash, then it is used for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>opts</VAR>, otherwise the default<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-gtoggle</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used.</P>
<P><SAMP><SPAN class=option>-fcompare-debug=</SPAN></SAMP>, with the equal sign but without<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>opts</VAR>, is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fno-compare-debug</SPAN></SAMP>, which disables the dumping of the final representation and the second compilation, preventing even<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=env>GCC_COMPARE_DEBUG</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>from taking effect.</P>
<P>To verify full coverage during<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fcompare-debug</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>testing, set<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=env>GCC_COMPARE_DEBUG</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to say &#8216;<SAMP><SPAN class=samp>-fcompare-debug-not-overridden</SPAN></SAMP>&#8217;, which GCC rejects as an invalid option in any actual compilation (rather than preprocessing, assembly or linking). To get just a warning, setting<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=env>GCC_COMPARE_DEBUG</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to &#8216;<SAMP><SPAN class=samp>-w%n-fcompare-debug not overridden</SPAN></SAMP>&#8217; will do.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-fcompare-debug-second</CODE></DT>
<DD><A name=index-fcompare-debug-second-607></A>This option is implicitly passed to the compiler for the second compilation requested by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fcompare-debug</SPAN></SAMP>, along with options to silence warnings, and omitting other options that would cause side-effect compiler outputs to files or to the standard output. Dump files and preserved temporary files are renamed so as to contain the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.gk</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>additional extension during the second compilation, to avoid overwriting those generated by the first.
<P>When this option is passed to the compiler driver, it causes the<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>first</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>compilation to be skipped, which makes it useful for little other than debugging the compiler proper.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-feliminate-dwarf2-dups</CODE></DT>
<DD><A name=index-feliminate-dwarf2-dups-608></A>Compress DWARF 2 debugging information by eliminating duplicated information about each symbol. This option only makes sense when generating DWARF 2 debugging information with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-gdwarf-2</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-femit-struct-debug-baseonly</CODE></DT>
<DD><A name=index-femit-struct-debug-baseonly-609></A>Emit debug information for struct-like types only when the base name of the compilation source file matches the base name of file in which the struct is defined.
<P>This option substantially reduces the size of debugging information, but at significant potential loss in type information to the debugger. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-femit-struct-debug-reduced</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>for a less aggressive option. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-femit-struct-debug-detailed</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>for more detailed control.</P>
<P>This option works only with DWARF 2.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-femit-struct-debug-reduced</CODE></DT>
<DD><A name=index-femit-struct-debug-reduced-610></A>Emit debug information for struct-like types only when the base name of the compilation source file matches the base name of file in which the type is defined, unless the struct is a template or defined in a system header.
<P>This option significantly reduces the size of debugging information, with some potential loss in type information to the debugger. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-femit-struct-debug-baseonly</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>for a more aggressive option. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-femit-struct-debug-detailed</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>for more detailed control.</P>
<P>This option works only with DWARF 2.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-femit-struct-debug-detailed</CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>[</SPAN><CODE>=</CODE><VAR>spec-list</VAR><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>]</SPAN></DT>
<DD>Specify the struct-like types for which the compiler generates debug information. The intent is to reduce duplicate struct debug information between different object files within the same program.
<P>This option is a detailed version of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-femit-struct-debug-reduced</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-femit-struct-debug-baseonly</SPAN></SAMP>, which serves for most needs.</P>
<P>A specification has the syntax<BR>[&#8216;<SAMP><SPAN class=samp>dir:</SPAN></SAMP>&#8217;|&#8216;<SAMP><SPAN class=samp>ind:</SPAN></SAMP>&#8217;][&#8216;<SAMP><SPAN class=samp>ord:</SPAN></SAMP>&#8217;|&#8216;<SAMP><SPAN class=samp>gen:</SPAN></SAMP>&#8217;](&#8216;<SAMP><SPAN class=samp>any</SPAN></SAMP>&#8217;|&#8216;<SAMP><SPAN class=samp>sys</SPAN></SAMP>&#8217;|&#8216;<SAMP><SPAN class=samp>base</SPAN></SAMP>&#8217;|&#8216;<SAMP><SPAN class=samp>none</SPAN></SAMP>&#8217;)</P>
<P>The optional first word limits the specification to structs that are used directly (&#8216;<SAMP><SPAN class=samp>dir:</SPAN></SAMP>&#8217;) or used indirectly (&#8216;<SAMP><SPAN class=samp>ind:</SPAN></SAMP>&#8217;). A struct type is used directly when it is the type of a variable, member. Indirect uses arise through pointers to structs. That is, when use of an incomplete struct is valid, the use is indirect. An example is &#8216;<SAMP><SPAN class=samp>struct one direct; struct two * indirect;</SPAN></SAMP>&#8217;.</P>
<P>The optional second word limits the specification to ordinary structs (&#8216;<SAMP><SPAN class=samp>ord:</SPAN></SAMP>&#8217;) or generic structs (&#8216;<SAMP><SPAN class=samp>gen:</SPAN></SAMP>&#8217;). Generic structs are a bit complicated to explain. For C++, these are non-explicit specializations of template classes, or non-template classes within the above. Other programming languages have generics, but<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-femit-struct-debug-detailed</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not yet implement them.</P>
<P>The third word specifies the source files for those structs for which the compiler should emit debug information. The values &#8216;<SAMP><SPAN class=samp>none</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>any</SPAN></SAMP>&#8217; have the normal meaning. The value &#8216;<SAMP><SPAN class=samp>base</SPAN></SAMP>&#8217; means that the base of name of the file in which the type declaration appears must match the base of the name of the main compilation file. In practice, this means that when compiling<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>foo.c</SPAN></SAMP>, debug information is generated for types declared in that file and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>foo.h</SPAN></SAMP>, but not other header files. The value &#8216;<SAMP><SPAN class=samp>sys</SPAN></SAMP>&#8217; means those types satisfying &#8216;<SAMP><SPAN class=samp>base</SPAN></SAMP>&#8217; or declared in system or compiler headers.</P>
<P>You may need to experiment to determine the best settings for your application.</P>
<P>The default is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-femit-struct-debug-detailed=all</SPAN></SAMP>.</P>
<P>This option works only with DWARF 2.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-fno-merge-debug-strings</CODE></DT>
<DD><A name=index-fmerge-debug-strings-611></A><A name=index-fno-merge-debug-strings-612></A>Direct the linker to not merge together strings in the debugging information that are identical in different object files. Merging is not supported by all assemblers or linkers. Merging decreases the size of the debug information in the output file at the cost of increasing link processing time. Merging is enabled by default.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdebug-prefix-map=</CODE><VAR>old</VAR><CODE>=</CODE><VAR>new</VAR></DT>
<DD><A name=index-fdebug-prefix-map-613></A>When compiling files in directory<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><VAR>old</VAR></SAMP>, record debugging information describing them as in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><VAR>new</VAR></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fno-dwarf2-cfi-asm</CODE></DT>
<DD><A name=index-fdwarf2-cfi-asm-614></A><A name=index-fno-dwarf2-cfi-asm-615></A>Emit DWARF 2 unwind info as compiler generated<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.eh_frame</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>section instead of using GAS<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.cfi_*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>directives.
<P><A name=index-g_t_0040command_007bprof_007d-616></A><BR></P></DD>
<DT><CODE>-p</CODE></DT>
<DD><A name=index-p-617></A>Generate extra code to write profile information suitable for the analysis program<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>prof</SPAN></SAMP>. You must use this option when compiling the source files you want data about, and you must also use it when linking.
<P><A name=index-g_t_0040command_007bgprof_007d-618></A><BR></P></DD>
<DT><CODE>-pg</CODE></DT>
<DD><A name=index-pg-619></A>Generate extra code to write profile information suitable for the analysis program<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gprof</SPAN></SAMP>. You must use this option when compiling the source files you want data about, and you must also use it when linking.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-Q</CODE></DT>
<DD><A name=index-Q-620></A>Makes the compiler print out each function name as it is compiled, and print some statistics about each pass when it finishes.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-ftime-report</CODE></DT>
<DD><A name=index-ftime-report-621></A>Makes the compiler print some statistics about the time consumed by each pass when it finishes.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fmem-report</CODE></DT>
<DD><A name=index-fmem-report-622></A>Makes the compiler print some statistics about permanent memory allocation when it finishes.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fmem-report-wpa</CODE></DT>
<DD><A name=index-fmem-report-wpa-623></A>Makes the compiler print some statistics about permanent memory allocation for the WPA phase only.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fpre-ipa-mem-report</CODE></DT>
<DD><A name=index-fpre-ipa-mem-report-624></A><BR></DD>
<DT><CODE>-fpost-ipa-mem-report</CODE></DT>
<DD><A name=index-fpost-ipa-mem-report-625></A>Makes the compiler print some statistics about permanent memory allocation before or after interprocedural optimization.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fprofile-report</CODE></DT>
<DD><A name=index-fprofile-report-626></A>Makes the compiler print some statistics about consistency of the (estimated) profile and effect of individual passes.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fstack-usage</CODE></DT>
<DD><A name=index-fstack-usage-627></A>Makes the compiler output stack usage information for the program, on a per-function basis. The filename for the dump is made by appending<SAMP><SPAN class=file>.su</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>auxname</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>auxname</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is generated from the name of the output file, if explicitly specified and it is not an executable, otherwise it is the basename of the source file. An entry is made up of three fields:
<UL>
<LI>The name of the function.</LI>
<LI>A number of bytes.</LI>
<LI>One or more qualifiers:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>static</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dynamic</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bounded</CODE>.</LI></UL>
<P>The qualifier<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>static</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>means that the function manipulates the stack statically: a fixed number of bytes are allocated for the frame on function entry and released on function exit; no stack adjustments are otherwise made in the function. The second field is this fixed number of bytes.</P>
<P>The qualifier<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dynamic</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>means that the function manipulates the stack dynamically: in addition to the static allocation described above, stack adjustments are made in the body of the function, for example to push/pop arguments around function calls. If the qualifier<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bounded</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is also present, the amount of these adjustments is bounded at compile time and the second field is an upper bound of the total amount of stack used by the function. If it is not present, the amount of these adjustments is not bounded at compile time and the second field only represents the bounded part.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-fprofile-arcs</CODE></DT>
<DD><A name=index-fprofile-arcs-628></A>Add code so that program flow<SPAN class=Apple-converted-space>&nbsp;</SPAN><DFN>arcs</DFN><SPAN class=Apple-converted-space>&nbsp;</SPAN>are instrumented. During execution the program records how many times each branch and call is executed and how many times it is taken or returns. When the compiled program exits it saves this data to a file called<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><VAR>auxname</VAR><SPAN class=file>.gcda</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>for each source file. The data may be used for profile-directed optimizations (<SAMP><SPAN class=option>-fbranch-probabilities</SPAN></SAMP>), or for test coverage analysis (<SAMP><SPAN class=option>-ftest-coverage</SPAN></SAMP>). Each object file's<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>auxname</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is generated from the name of the output file, if explicitly specified and it is not the final executable, otherwise it is the basename of the source file. In both cases any suffix is removed (e.g.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>foo.gcda</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>for input file<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>dir/foo.c</SPAN></SAMP>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>dir/foo.gcda</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>for output file specified as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-o dir/foo.o</SPAN></SAMP>). See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Cross-profiling.html#Cross-profiling">Cross-profiling</A>.
<P><A name=index-g_t_0040command_007bgcov_007d-629></A><BR></P></DD>
<DT><CODE>--coverage</CODE></DT>
<DD><A name=index-coverage-630></A>This option is used to compile and link code instrumented for coverage analysis. The option is a synonym for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fprofile-arcs</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ftest-coverage</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>(when compiling) and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-lgcov</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>(when linking). See the documentation for those options for more details.
<UL>
<LI>Compile the source files with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fprofile-arcs</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>plus optimization and code generation options. For test coverage analysis, use the additional<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ftest-coverage</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option. You do not need to profile every source file in a program.</LI>
<LI>Link your object files with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-lgcov</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fprofile-arcs</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>(the latter implies the former).</LI>
<LI>Run the program on a representative workload to generate the arc profile information. This may be repeated any number of times. You can run concurrent instances of your program, and provided that the file system supports locking, the data files will be correctly updated. Also<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fork</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>calls are detected and correctly handled (double counting will not happen).</LI>
<LI>For profile-directed optimizations, compile the source files again with the same optimization and code generation options plus<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fbranch-probabilities</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>(see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Optimize-Options.html#Optimize-Options">Options that Control Optimization</A>).</LI>
<LI>For test coverage analysis, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gcov</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to produce human readable information from the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.gcno</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.gcda</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>files. Refer to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gcov</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>documentation for further information.</LI></UL>
<P>With<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fprofile-arcs</SPAN></SAMP>, for each function of your program GCC creates a program flow graph, then finds a spanning tree for the graph. Only arcs that are not on the spanning tree have to be instrumented: the compiler adds code to count the number of times that these arcs are executed. When an arc is the only exit or only entrance to a block, the instrumentation code can be added to the block; otherwise, a new basic block must be created to hold the instrumentation code.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-ftest-coverage</CODE></DT>
<DD><A name=index-ftest-coverage-631></A>Produce a notes file that the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gcov</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>code-coverage utility (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Gcov.html#Gcov"><SAMP><SPAN class=command>gcov</SPAN></SAMP>&#8212;a Test Coverage Program</A>) can use to show program coverage. Each source file's note file is called<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><VAR>auxname</VAR><SPAN class=file>.gcno</SPAN></SAMP>. Refer to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fprofile-arcs</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option above for a description of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>auxname</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and instructions on how to generate test coverage data. Coverage data matches the source files more closely if you do not optimize.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdbg-cnt-list</CODE></DT>
<DD><A name=index-fdbg-cnt-list-632></A>Print the name and the counter upper bound for all debug counters.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdbg-cnt=</CODE><VAR>counter-value-list</VAR></DT>
<DD><A name=index-fdbg-cnt-633></A>Set the internal debug counter upper bound.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>counter-value-list</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a comma-separated list of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>:<VAR>value</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>pairs which sets the upper bound of each debug counter<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>value</VAR>. All debug counters have the initial upper bound of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>UINT_MAX</CODE>; thus<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dbg_cnt()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns true always unless the upper bound is set by this option. For example, with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fdbg-cnt=dce:10,tail_call:0</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dbg_cnt(dce)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns true only for first 10 invocations.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fenable-</CODE><VAR>kind</VAR><CODE>-</CODE><VAR>pass</VAR></DT>
<DT><CODE>-fdisable-</CODE><VAR>kind</VAR><CODE>-</CODE><VAR>pass</VAR><CODE>=</CODE><VAR>range-list</VAR></DT>
<DD><A name=index-fdisable--634></A><A name=index-fenable--635></A>This is a set of options that are used to explicitly disable/enable optimization passes. These options are intended for use for debugging GCC. Compiler users should use regular options for enabling/disabling passes instead.
<DL>
<DT><CODE>-fdisable-ipa-</CODE><VAR>pass</VAR></DT>
<DD>Disable IPA pass<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pass</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pass</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the pass name. If the same pass is statically invoked in the compiler multiple times, the pass name should be appended with a sequential number starting from 1.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdisable-rtl-</CODE><VAR>pass</VAR></DT>
<DT><CODE>-fdisable-rtl-</CODE><VAR>pass</VAR><CODE>=</CODE><VAR>range-list</VAR></DT>
<DD>Disable RTL pass<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pass</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pass</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the pass name. If the same pass is statically invoked in the compiler multiple times, the pass name should be appended with a sequential number starting from 1.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>range-list</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a comma-separated list of function ranges or assembler names. Each range is a number pair separated by a colon. The range is inclusive in both ends. If the range is trivial, the number pair can be simplified as a single number. If the function's call graph node's<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>uid</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>falls within one of the specified ranges, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pass</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is disabled for that function. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>uid</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is shown in the function header of a dump file, and the pass names can be dumped by using option<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fdump-passes</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdisable-tree-</CODE><VAR>pass</VAR></DT>
<DT><CODE>-fdisable-tree-</CODE><VAR>pass</VAR><CODE>=</CODE><VAR>range-list</VAR></DT>
<DD>Disable tree pass<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pass</VAR>. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fdisable-rtl</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>for the description of option arguments.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fenable-ipa-</CODE><VAR>pass</VAR></DT>
<DD>Enable IPA pass<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pass</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pass</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the pass name. If the same pass is statically invoked in the compiler multiple times, the pass name should be appended with a sequential number starting from 1.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fenable-rtl-</CODE><VAR>pass</VAR></DT>
<DT><CODE>-fenable-rtl-</CODE><VAR>pass</VAR><CODE>=</CODE><VAR>range-list</VAR></DT>
<DD>Enable RTL pass<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pass</VAR>. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fdisable-rtl</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>for option argument description and examples.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fenable-tree-</CODE><VAR>pass</VAR></DT>
<DT><CODE>-fenable-tree-</CODE><VAR>pass</VAR><CODE>=</CODE><VAR>range-list</VAR></DT>
<DD>Enable tree pass<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pass</VAR>. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fdisable-rtl</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>for the description of option arguments.</DD></DL>
<P>Here are some examples showing uses of these options.</P><PRE style="FONT-SIZE: smaller" class=smallexample>          
          # disable ccp1 for all functions
             -fdisable-tree-ccp1
          # disable complete unroll for function whose cgraph node uid is 1
             -fenable-tree-cunroll=1
          # disable gcse2 for functions at the following ranges [1,1],
          # [300,400], and [400,1000]
          # disable gcse2 for functions foo and foo2
             -fdisable-rtl-gcse2=foo,foo2
          # disable early inlining
             -fdisable-tree-einline
          # disable ipa inlining
             -fdisable-ipa-inline
          # enable tree full unroll
             -fenable-tree-unroll
          
</PRE><BR></DD>
<DT><CODE>-d</CODE><VAR>letters</VAR></DT>
<DT><CODE>-fdump-rtl-</CODE><VAR>pass</VAR></DT>
<DT><CODE>-fdump-rtl-</CODE><VAR>pass</VAR><CODE>=</CODE><VAR>filename</VAR></DT>
<DD><A name=index-d-636></A><A name=index-fdump-rtl-_0040var_007bpass_007d-637></A>Says to make debugging dumps during compilation at times specified by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>letters</VAR>. This is used for debugging the RTL-based passes of the compiler. The file names for most of the dumps are made by appending a pass number and a word to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dumpname</VAR>, and the files are created in the directory of the output file. In case of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>=</SPAN><VAR>filename</VAR></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option, the dump is output on the given file instead of the pass numbered dump files. Note that the pass number is computed statically as passes get registered into the pass manager. Thus the numbering is not related to the dynamic order of execution of passes. In particular, a pass installed by a plugin could have a number over 200 even if it executed quite early.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dumpname</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is generated from the name of the output file, if explicitly specified and it is not an executable, otherwise it is the basename of the source file. These switches may have different effects when<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-E</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used for preprocessing.
<P>Debug dumps can be enabled with a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fdump-rtl</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>switch or some<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-d</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>letters</VAR>. Here are the possible letters for use in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>pass</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>letters</VAR>, and their meanings:</P>
<DL>
<DT><CODE>-fdump-rtl-alignments</CODE></DT>
<DD><A name=index-fdump-rtl-alignments-638></A>Dump after branch alignments have been computed.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-asmcons</CODE></DT>
<DD><A name=index-fdump-rtl-asmcons-639></A>Dump after fixing rtl statements that have unsatisfied in/out constraints.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-auto_inc_dec</CODE></DT>
<DD><A name=index-fdump-rtl-auto_005finc_005fdec-640></A>Dump after auto-inc-dec discovery. This pass is only run on architectures that have auto inc or auto dec instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-barriers</CODE></DT>
<DD><A name=index-fdump-rtl-barriers-641></A>Dump after cleaning up the barrier instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-bbpart</CODE></DT>
<DD><A name=index-fdump-rtl-bbpart-642></A>Dump after partitioning hot and cold basic blocks.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-bbro</CODE></DT>
<DD><A name=index-fdump-rtl-bbro-643></A>Dump after block reordering.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-btl1</CODE></DT>
<DT><CODE>-fdump-rtl-btl2</CODE></DT>
<DD><A name=index-fdump-rtl-btl2-644></A><A name=index-fdump-rtl-btl2-645></A><SAMP><SPAN class=option>-fdump-rtl-btl1</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fdump-rtl-btl2</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>enable dumping after the two branch target load optimization passes.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-bypass</CODE></DT>
<DD><A name=index-fdump-rtl-bypass-646></A>Dump after jump bypassing and control flow optimizations.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-combine</CODE></DT>
<DD><A name=index-fdump-rtl-combine-647></A>Dump after the RTL instruction combination pass.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-compgotos</CODE></DT>
<DD><A name=index-fdump-rtl-compgotos-648></A>Dump after duplicating the computed gotos.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-ce1</CODE></DT>
<DT><CODE>-fdump-rtl-ce2</CODE></DT>
<DT><CODE>-fdump-rtl-ce3</CODE></DT>
<DD><A name=index-fdump-rtl-ce1-649></A><A name=index-fdump-rtl-ce2-650></A><A name=index-fdump-rtl-ce3-651></A><SAMP><SPAN class=option>-fdump-rtl-ce1</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fdump-rtl-ce2</SPAN></SAMP>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fdump-rtl-ce3</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>enable dumping after the three if conversion passes.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-cprop_hardreg</CODE></DT>
<DD><A name=index-fdump-rtl-cprop_005fhardreg-652></A>Dump after hard register copy propagation.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-csa</CODE></DT>
<DD><A name=index-fdump-rtl-csa-653></A>Dump after combining stack adjustments.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-cse1</CODE></DT>
<DT><CODE>-fdump-rtl-cse2</CODE></DT>
<DD><A name=index-fdump-rtl-cse1-654></A><A name=index-fdump-rtl-cse2-655></A><SAMP><SPAN class=option>-fdump-rtl-cse1</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fdump-rtl-cse2</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>enable dumping after the two common subexpression elimination passes.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-dce</CODE></DT>
<DD><A name=index-fdump-rtl-dce-656></A>Dump after the standalone dead code elimination passes.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-dbr</CODE></DT>
<DD><A name=index-fdump-rtl-dbr-657></A>Dump after delayed branch scheduling.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-dce1</CODE></DT>
<DT><CODE>-fdump-rtl-dce2</CODE></DT>
<DD><A name=index-fdump-rtl-dce1-658></A><A name=index-fdump-rtl-dce2-659></A><SAMP><SPAN class=option>-fdump-rtl-dce1</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fdump-rtl-dce2</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>enable dumping after the two dead store elimination passes.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-eh</CODE></DT>
<DD><A name=index-fdump-rtl-eh-660></A>Dump after finalization of EH handling code.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-eh_ranges</CODE></DT>
<DD><A name=index-fdump-rtl-eh_005franges-661></A>Dump after conversion of EH handling range regions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-expand</CODE></DT>
<DD><A name=index-fdump-rtl-expand-662></A>Dump after RTL generation.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-fwprop1</CODE></DT>
<DT><CODE>-fdump-rtl-fwprop2</CODE></DT>
<DD><A name=index-fdump-rtl-fwprop1-663></A><A name=index-fdump-rtl-fwprop2-664></A><SAMP><SPAN class=option>-fdump-rtl-fwprop1</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fdump-rtl-fwprop2</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>enable dumping after the two forward propagation passes.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-gcse1</CODE></DT>
<DT><CODE>-fdump-rtl-gcse2</CODE></DT>
<DD><A name=index-fdump-rtl-gcse1-665></A><A name=index-fdump-rtl-gcse2-666></A><SAMP><SPAN class=option>-fdump-rtl-gcse1</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fdump-rtl-gcse2</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>enable dumping after global common subexpression elimination.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-init-regs</CODE></DT>
<DD><A name=index-fdump-rtl-init-regs-667></A>Dump after the initialization of the registers.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-initvals</CODE></DT>
<DD><A name=index-fdump-rtl-initvals-668></A>Dump after the computation of the initial value sets.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-into_cfglayout</CODE></DT>
<DD><A name=index-fdump-rtl-into_005fcfglayout-669></A>Dump after converting to cfglayout mode.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-ira</CODE></DT>
<DD><A name=index-fdump-rtl-ira-670></A>Dump after iterated register allocation.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-jump</CODE></DT>
<DD><A name=index-fdump-rtl-jump-671></A>Dump after the second jump optimization.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-loop2</CODE></DT>
<DD><A name=index-fdump-rtl-loop2-672></A><SAMP><SPAN class=option>-fdump-rtl-loop2</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>enables dumping after the rtl loop optimization passes.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-mach</CODE></DT>
<DD><A name=index-fdump-rtl-mach-673></A>Dump after performing the machine dependent reorganization pass, if that pass exists.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-mode_sw</CODE></DT>
<DD><A name=index-fdump-rtl-mode_005fsw-674></A>Dump after removing redundant mode switches.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-rnreg</CODE></DT>
<DD><A name=index-fdump-rtl-rnreg-675></A>Dump after register renumbering.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-outof_cfglayout</CODE></DT>
<DD><A name=index-fdump-rtl-outof_005fcfglayout-676></A>Dump after converting from cfglayout mode.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-peephole2</CODE></DT>
<DD><A name=index-fdump-rtl-peephole2-677></A>Dump after the peephole pass.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-postreload</CODE></DT>
<DD><A name=index-fdump-rtl-postreload-678></A>Dump after post-reload optimizations.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-pro_and_epilogue</CODE></DT>
<DD><A name=index-fdump-rtl-pro_005fand_005fepilogue-679></A>Dump after generating the function prologues and epilogues.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-sched1</CODE></DT>
<DT><CODE>-fdump-rtl-sched2</CODE></DT>
<DD><A name=index-fdump-rtl-sched1-680></A><A name=index-fdump-rtl-sched2-681></A><SAMP><SPAN class=option>-fdump-rtl-sched1</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fdump-rtl-sched2</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>enable dumping after the basic block scheduling passes.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-ree</CODE></DT>
<DD><A name=index-fdump-rtl-ree-682></A>Dump after sign/zero extension elimination.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-seqabstr</CODE></DT>
<DD><A name=index-fdump-rtl-seqabstr-683></A>Dump after common sequence discovery.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-shorten</CODE></DT>
<DD><A name=index-fdump-rtl-shorten-684></A>Dump after shortening branches.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-sibling</CODE></DT>
<DD><A name=index-fdump-rtl-sibling-685></A>Dump after sibling call optimizations.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-split1</CODE></DT>
<DT><CODE>-fdump-rtl-split2</CODE></DT>
<DT><CODE>-fdump-rtl-split3</CODE></DT>
<DT><CODE>-fdump-rtl-split4</CODE></DT>
<DT><CODE>-fdump-rtl-split5</CODE></DT>
<DD><A name=index-fdump-rtl-split1-686></A><A name=index-fdump-rtl-split2-687></A><A name=index-fdump-rtl-split3-688></A><A name=index-fdump-rtl-split4-689></A><A name=index-fdump-rtl-split5-690></A><SAMP><SPAN class=option>-fdump-rtl-split1</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fdump-rtl-split2</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fdump-rtl-split3</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fdump-rtl-split4</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fdump-rtl-split5</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>enable dumping after five rounds of instruction splitting.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-sms</CODE></DT>
<DD><A name=index-fdump-rtl-sms-691></A>Dump after modulo scheduling. This pass is only run on some architectures.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-stack</CODE></DT>
<DD><A name=index-fdump-rtl-stack-692></A>Dump after conversion from GCC's &#8220;flat register file&#8221; registers to the x87's stack-like registers. This pass is only run on x86 variants.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-subreg1</CODE></DT>
<DT><CODE>-fdump-rtl-subreg2</CODE></DT>
<DD><A name=index-fdump-rtl-subreg1-693></A><A name=index-fdump-rtl-subreg2-694></A><SAMP><SPAN class=option>-fdump-rtl-subreg1</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fdump-rtl-subreg2</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>enable dumping after the two subreg expansion passes.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-unshare</CODE></DT>
<DD><A name=index-fdump-rtl-unshare-695></A>Dump after all rtl has been unshared.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-vartrack</CODE></DT>
<DD><A name=index-fdump-rtl-vartrack-696></A>Dump after variable tracking.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-vregs</CODE></DT>
<DD><A name=index-fdump-rtl-vregs-697></A>Dump after converting virtual registers to hard registers.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-web</CODE></DT>
<DD><A name=index-fdump-rtl-web-698></A>Dump after live range splitting.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-rtl-regclass</CODE></DT>
<DT><CODE>-fdump-rtl-subregs_of_mode_init</CODE></DT>
<DT><CODE>-fdump-rtl-subregs_of_mode_finish</CODE></DT>
<DT><CODE>-fdump-rtl-dfinit</CODE></DT>
<DT><CODE>-fdump-rtl-dfinish</CODE></DT>
<DD><A name=index-fdump-rtl-regclass-699></A><A name=index-fdump-rtl-subregs_005fof_005fmode_005finit-700></A><A name=index-fdump-rtl-subregs_005fof_005fmode_005ffinish-701></A><A name=index-fdump-rtl-dfinit-702></A><A name=index-fdump-rtl-dfinish-703></A>These dumps are defined but always produce empty files.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-da</CODE></DT>
<DT><CODE>-fdump-rtl-all</CODE></DT>
<DD><A name=index-da-704></A><A name=index-fdump-rtl-all-705></A>Produce all the dumps listed above.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-dA</CODE></DT>
<DD><A name=index-dA-706></A>Annotate the assembler output with miscellaneous debugging information.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-dD</CODE></DT>
<DD><A name=index-dD-707></A>Dump all macro definitions, at the end of preprocessing, in addition to normal output.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-dH</CODE></DT>
<DD><A name=index-dH-708></A>Produce a core dump whenever an error occurs.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-dp</CODE></DT>
<DD><A name=index-dp-709></A>Annotate the assembler output with a comment indicating which pattern and alternative is used. The length of each instruction is also printed.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-dP</CODE></DT>
<DD><A name=index-dP-710></A>Dump the RTL in the assembler output as a comment before each instruction. Also turns on<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-dp</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>annotation.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-dx</CODE></DT>
<DD><A name=index-dx-711></A>Just generate RTL for a function instead of compiling it. Usually used with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fdump-rtl-expand</SPAN></SAMP>.</DD></DL><BR></DD>
<DT><CODE>-fdump-noaddr</CODE></DT>
<DD><A name=index-fdump-noaddr-712></A>When doing debugging dumps, suppress address output. This makes it more feasible to use diff on debugging dumps for compiler invocations with different compiler binaries and/or different text / bss / data / heap / stack / dso start locations.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-unnumbered</CODE></DT>
<DD><A name=index-fdump-unnumbered-713></A>When doing debugging dumps, suppress instruction numbers and address output. This makes it more feasible to use diff on debugging dumps for compiler invocations with different options, in particular with and without<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-g</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-unnumbered-links</CODE></DT>
<DD><A name=index-fdump-unnumbered-links-714></A>When doing debugging dumps (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-d</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option above), suppress instruction numbers for the links to the previous and next instructions in a sequence.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-translation-unit<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C++ only)</SPAN></DT>
<DT><CODE>-fdump-translation-unit-</CODE><VAR>options</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C++ only)</SPAN></DT>
<DD><A name=index-fdump-translation-unit-715></A>Dump a representation of the tree structure for the entire translation unit to a file. The file name is made by appending<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.tu</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the source file name, and the file is created in the same directory as the output file. If the &#8216;<SAMP><SPAN class=samp>-</SPAN><VAR>options</VAR></SAMP>&#8217; form is used,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>options</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>controls the details of the dump as described for the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fdump-tree</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-class-hierarchy<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C++ only)</SPAN></DT>
<DT><CODE>-fdump-class-hierarchy-</CODE><VAR>options</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>(C++ only)</SPAN></DT>
<DD><A name=index-fdump-class-hierarchy-716></A>Dump a representation of each class's hierarchy and virtual function table layout to a file. The file name is made by appending<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.class</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the source file name, and the file is created in the same directory as the output file. If the &#8216;<SAMP><SPAN class=samp>-</SPAN><VAR>options</VAR></SAMP>&#8217; form is used,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>options</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>controls the details of the dump as described for the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fdump-tree</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-ipa-</CODE><VAR>switch</VAR></DT>
<DD><A name=index-fdump-ipa-717></A>Control the dumping at various stages of inter-procedural analysis language tree to a file. The file name is generated by appending a switch specific suffix to the source file name, and the file is created in the same directory as the output file. The following dumps are possible:
<DL>
<DT>&#8216;<SAMP><SPAN class=samp>all</SPAN></SAMP>&#8217;</DT>
<DD>Enables all inter-procedural analysis dumps.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>cgraph</SPAN></SAMP>&#8217;</DT>
<DD>Dumps information about call-graph optimization, unused function removal, and inlining decisions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>inline</SPAN></SAMP>&#8217;</DT>
<DD>Dump after function inlining.</DD></DL><BR></DD>
<DT><CODE>-fdump-passes</CODE></DT>
<DD><A name=index-fdump-passes-718></A>Dump the list of optimization passes that are turned on and off by the current command-line options.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-statistics-</CODE><VAR>option</VAR></DT>
<DD><A name=index-fdump-statistics-719></A>Enable and control dumping of pass statistics in a separate file. The file name is generated by appending a suffix ending in &#8216;<SAMP><SPAN class=samp>.statistics</SPAN></SAMP>&#8217; to the source file name, and the file is created in the same directory as the output file. If the &#8216;<SAMP><SPAN class=samp>-</SPAN><VAR>option</VAR></SAMP>&#8217; form is used, &#8216;<SAMP><SPAN class=samp>-stats</SPAN></SAMP>&#8217; causes counters to be summed over the whole compilation unit while &#8216;<SAMP><SPAN class=samp>-details</SPAN></SAMP>&#8217; dumps every event as the passes generate them. The default with no option is to sum counters for each function compiled.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fdump-tree-</CODE><VAR>switch</VAR></DT>
<DT><CODE>-fdump-tree-</CODE><VAR>switch</VAR><CODE>-</CODE><VAR>options</VAR></DT>
<DT><CODE>-fdump-tree-</CODE><VAR>switch</VAR><CODE>-</CODE><VAR>options</VAR><CODE>=</CODE><VAR>filename</VAR></DT>
<DD><A name=index-fdump-tree-720></A>Control the dumping at various stages of processing the intermediate language tree to a file. The file name is generated by appending a switch-specific suffix to the source file name, and the file is created in the same directory as the output file. In case of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>=</SPAN><VAR>filename</VAR></SAMP>option, the dump is output on the given file instead of the auto named dump files. If the &#8216;<SAMP><SPAN class=samp>-</SPAN><VAR>options</VAR></SAMP>&#8217; form is used,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>options</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a list of &#8216;<SAMP><SPAN class=samp>-</SPAN></SAMP>&#8217; separated options which control the details of the dump. Not all options are applicable to all dumps; those that are not meaningful are ignored. The following options are available
<DL>
<DT>&#8216;<SAMP><SPAN class=samp>address</SPAN></SAMP>&#8217;</DT>
<DD>Print the address of each node. Usually this is not meaningful as it changes according to the environment and source file. Its primary use is for tying up a dump file with a debug environment.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>asmname</SPAN></SAMP>&#8217;</DT>
<DD>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>DECL_ASSEMBLER_NAME</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>has been set for a given decl, use that in the dump instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>DECL_NAME</CODE>. Its primary use is ease of use working backward from mangled names in the assembly file.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>slim</SPAN></SAMP>&#8217;</DT>
<DD>When dumping front-end intermediate representations, inhibit dumping of members of a scope or body of a function merely because that scope has been reached. Only dump such items when they are directly reachable by some other path.
<P>When dumping pretty-printed trees, this option inhibits dumping the bodies of control structures.</P>
<P>When dumping RTL, print the RTL in slim (condensed) form instead of the default LISP-like representation.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT>&#8216;<SAMP><SPAN class=samp>raw</SPAN></SAMP>&#8217;</DT>
<DD>Print a raw representation of the tree. By default, trees are pretty-printed into a C-like representation.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>details</SPAN></SAMP>&#8217;</DT>
<DD>Enable more detailed dumps (not honored by every dump option). Also include information from the optimization passes.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>stats</SPAN></SAMP>&#8217;</DT>
<DD>Enable dumping various statistics about the pass (not honored by every dump option).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>blocks</SPAN></SAMP>&#8217;</DT>
<DD>Enable showing basic block boundaries (disabled in raw dumps).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>graph</SPAN></SAMP>&#8217;</DT>
<DD>For each of the other indicated dump files (<SAMP><SPAN class=option>-fdump-rtl-</SPAN><VAR>pass</VAR></SAMP>), dump a representation of the control flow graph suitable for viewing with GraphViz to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><VAR>file</VAR><SPAN class=file>.</SPAN><VAR>passid</VAR><SPAN class=file>.</SPAN><VAR>pass</VAR><SPAN class=file>.dot</SPAN></SAMP>. Each function in the file is pretty-printed as a subgraph, so that GraphViz can render them all in a single plot.
<P>This option currently only works for RTL dumps, and the RTL is always dumped in slim form.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT>&#8216;<SAMP><SPAN class=samp>vops</SPAN></SAMP>&#8217;</DT>
<DD>Enable showing virtual operands for every statement.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>lineno</SPAN></SAMP>&#8217;</DT>
<DD>Enable showing line numbers for statements.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>uid</SPAN></SAMP>&#8217;</DT>
<DD>Enable showing the unique ID (<CODE>DECL_UID</CODE>) for each variable.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>verbose</SPAN></SAMP>&#8217;</DT>
<DD>Enable showing the tree dump for each statement.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>eh</SPAN></SAMP>&#8217;</DT>
<DD>Enable showing the EH region number holding each statement.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>scev</SPAN></SAMP>&#8217;</DT>
<DD>Enable showing scalar evolution analysis details.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>optimized</SPAN></SAMP>&#8217;</DT>
<DD>Enable showing optimization information (only available in certain passes).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>missed</SPAN></SAMP>&#8217;</DT>
<DD>Enable showing missed optimization information (only available in certain passes).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>notes</SPAN></SAMP>&#8217;</DT>
<DD>Enable other detailed optimization information (only available in certain passes).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>=</SPAN><VAR>filename</VAR></SAMP>&#8217;</DT>
<DD>Instead of an auto named dump file, output into the given file name. The file names<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>stdout</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>stderr</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>are treated specially and are considered already open standard streams. For example,<PRE style="FONT-SIZE: smaller" class=smallexample>               gcc -O2 -ftree-vectorize -fdump-tree-vect-blocks=foo.dump
                    -fdump-tree-pre=stderr file.c
</PRE>
<P>outputs vectorizer dump into<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>foo.dump</SPAN></SAMP>, while the PRE dump is output on to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>stderr</SPAN></SAMP>. If two conflicting dump filenames are given for the same pass, then the latter option overrides the earlier one.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT>&#8216;<SAMP><SPAN class=samp>all</SPAN></SAMP>&#8217;</DT>
<DD>Turn on all options, except<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>raw</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>slim</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>verbose</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>lineno</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>optall</SPAN></SAMP>&#8217;</DT>
<DD>Turn on all optimization options, i.e.,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>optimized</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>missed</SPAN></SAMP>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>note</SPAN></SAMP>.</DD></DL>
<P>The following tree dumps are possible:</P>
<DL>
<DT>&#8216;<SAMP><SPAN class=samp>original</SPAN></SAMP>&#8217;</DT>
<DD><A name=index-fdump-tree-original-721></A>Dump before any tree based optimization, to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><VAR>file</VAR><SPAN class=file>.original</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>optimized</SPAN></SAMP>&#8217;</DT>
<DD><A name=index-fdump-tree-optimized-722></A>Dump after all tree based optimization, to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><VAR>file</VAR><SPAN class=file>.optimized</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>gimple</SPAN></SAMP>&#8217;</DT>
<DD><A name=index-fdump-tree-gimple-723></A>Dump each function before and after the gimplification pass to a file. The file name is made by appending<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.gimple</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the source file name.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>cfg</SPAN></SAMP>&#8217;</DT>
<DD><A name=index-fdump-tree-cfg-724></A>Dump the control flow graph of each function to a file. The file name is made by appending<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.cfg</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the source file name.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>ch</SPAN></SAMP>&#8217;</DT>
<DD><A name=index-fdump-tree-ch-725></A>Dump each function after copying loop headers. The file name is made by appending<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.ch</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the source file name.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>ssa</SPAN></SAMP>&#8217;</DT>
<DD><A name=index-fdump-tree-ssa-726></A>Dump SSA related information to a file. The file name is made by appending<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.ssa</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the source file name.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>alias</SPAN></SAMP>&#8217;</DT>
<DD><A name=index-fdump-tree-alias-727></A>Dump aliasing information for each function. The file name is made by appending<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.alias</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the source file name.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>ccp</SPAN></SAMP>&#8217;</DT>
<DD><A name=index-fdump-tree-ccp-728></A>Dump each function after CCP. The file name is made by appending<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.ccp</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the source file name.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>storeccp</SPAN></SAMP>&#8217;</DT>
<DD><A name=index-fdump-tree-storeccp-729></A>Dump each function after STORE-CCP. The file name is made by appending<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.storeccp</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the source file name.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>pre</SPAN></SAMP>&#8217;</DT>
<DD><A name=index-fdump-tree-pre-730></A>Dump trees after partial redundancy elimination. The file name is made by appending<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.pre</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the source file name.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>fre</SPAN></SAMP>&#8217;</DT>
<DD><A name=index-fdump-tree-fre-731></A>Dump trees after full redundancy elimination. The file name is made by appending<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.fre</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the source file name.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>copyprop</SPAN></SAMP>&#8217;</DT>
<DD><A name=index-fdump-tree-copyprop-732></A>Dump trees after copy propagation. The file name is made by appending<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.copyprop</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the source file name.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>store_copyprop</SPAN></SAMP>&#8217;</DT>
<DD><A name=index-fdump-tree-store_005fcopyprop-733></A>Dump trees after store copy-propagation. The file name is made by appending<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.store_copyprop</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the source file name.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>dce</SPAN></SAMP>&#8217;</DT>
<DD><A name=index-fdump-tree-dce-734></A>Dump each function after dead code elimination. The file name is made by appending<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.dce</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the source file name.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>sra</SPAN></SAMP>&#8217;</DT>
<DD><A name=index-fdump-tree-sra-735></A>Dump each function after performing scalar replacement of aggregates. The file name is made by appending<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.sra</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the source file name.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>sink</SPAN></SAMP>&#8217;</DT>
<DD><A name=index-fdump-tree-sink-736></A>Dump each function after performing code sinking. The file name is made by appending<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.sink</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the source file name.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>dom</SPAN></SAMP>&#8217;</DT>
<DD><A name=index-fdump-tree-dom-737></A>Dump each function after applying dominator tree optimizations. The file name is made by appending<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.dom</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the source file name.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>dse</SPAN></SAMP>&#8217;</DT>
<DD><A name=index-fdump-tree-dse-738></A>Dump each function after applying dead store elimination. The file name is made by appending<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.dse</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the source file name.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>phiopt</SPAN></SAMP>&#8217;</DT>
<DD><A name=index-fdump-tree-phiopt-739></A>Dump each function after optimizing PHI nodes into straightline code. The file name is made by appending<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.phiopt</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the source file name.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>forwprop</SPAN></SAMP>&#8217;</DT>
<DD><A name=index-fdump-tree-forwprop-740></A>Dump each function after forward propagating single use variables. The file name is made by appending<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.forwprop</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the source file name.<BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>copyrename</SPAN></SAMP>&#8217;</DT>
<DD><A name=index-fdump-tree-copyrename-741></A>Dump each function after applying the copy rename optimization. The file name is made by appending<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.copyrename</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the source file name.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>nrv</SPAN></SAMP>&#8217;</DT>
<DD><A name=index-fdump-tree-nrv-742></A>Dump each function after applying the named return value optimization on generic trees. The file name is made by appending<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.nrv</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the source file name.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>vect</SPAN></SAMP>&#8217;</DT>
<DD><A name=index-fdump-tree-vect-743></A>Dump each function after applying vectorization of loops. The file name is made by appending<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.vect</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the source file name.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>slp</SPAN></SAMP>&#8217;</DT>
<DD><A name=index-fdump-tree-slp-744></A>Dump each function after applying vectorization of basic blocks. The file name is made by appending<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.slp</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the source file name.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>vrp</SPAN></SAMP>&#8217;</DT>
<DD><A name=index-fdump-tree-vrp-745></A>Dump each function after Value Range Propagation (VRP). The file name is made by appending<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.vrp</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the source file name.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>all</SPAN></SAMP>&#8217;</DT>
<DD><A name=index-fdump-tree-all-746></A>Enable all the available tree dumps with the flags provided in this option.</DD></DL><BR></DD>
<DT><CODE>-fopt-info</CODE></DT>
<DT><CODE>-fopt-info-</CODE><VAR>options</VAR></DT>
<DT><CODE>-fopt-info-</CODE><VAR>options</VAR><CODE>=</CODE><VAR>filename</VAR></DT>
<DD><A name=index-fopt-info-747></A>Controls optimization dumps from various optimization passes. If the &#8216;<SAMP><SPAN class=samp>-</SPAN><VAR>options</VAR></SAMP>&#8217; form is used,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>options</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a list of &#8216;<SAMP><SPAN class=samp>-</SPAN></SAMP>&#8217; separated options to select the dump details and optimizations. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>options</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not specified, it defaults to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>optimized</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>for details and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>optall</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>for optimization groups. If the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>filename</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not specified, it defaults to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>stderr</SPAN></SAMP>. Note that the output<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>filename</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be overwritten in case of multiple translation units. If a combined output from multiple translation units is desired,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>stderr</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be used instead.
<P>The options can be divided into two groups, 1) options describing the verbosity of the dump, and 2) options describing which optimizations should be included. The options from both the groups can be freely mixed as they are non-overlapping. However, in case of any conflicts, the latter options override the earlier options on the command line. Though multiple -fopt-info options are accepted, only one of them can have<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>=filename</SPAN></SAMP>. If other filenames are provided then all but the first one are ignored.</P>
<P>The dump verbosity has the following options</P>
<DL>
<DT>&#8216;<SAMP><SPAN class=samp>optimized</SPAN></SAMP>&#8217;</DT>
<DD>Print information when an optimization is successfully applied. It is up to a pass to decide which information is relevant. For example, the vectorizer passes print the source location of loops which got successfully vectorized.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>missed</SPAN></SAMP>&#8217;</DT>
<DD>Print information about missed optimizations. Individual passes control which information to include in the output. For example,<PRE style="FONT-SIZE: smaller" class=smallexample>               gcc -O2 -ftree-vectorize -fopt-info-vec-missed
</PRE>
<P>will print information about missed optimization opportunities from vectorization passes on stderr.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT>&#8216;<SAMP><SPAN class=samp>note</SPAN></SAMP>&#8217;</DT>
<DD>Print verbose information about optimizations, such as certain transformations, more detailed messages about decisions etc.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>all</SPAN></SAMP>&#8217;</DT>
<DD>Print detailed optimization information. This includes<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>optimized</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>missed</VAR>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>note</VAR>.</DD></DL>
<P>The second set of options describes a group of optimizations and may include one or more of the following.</P>
<DL>
<DT>&#8216;<SAMP><SPAN class=samp>ipa</SPAN></SAMP>&#8217;</DT>
<DD>Enable dumps from all interprocedural optimizations.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>loop</SPAN></SAMP>&#8217;</DT>
<DD>Enable dumps from all loop optimizations.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>inline</SPAN></SAMP>&#8217;</DT>
<DD>Enable dumps from all inlining optimizations.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>vec</SPAN></SAMP>&#8217;</DT>
<DD>Enable dumps from all vectorization optimizations.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>optall</SPAN></SAMP>&#8217;</DT>
<DD>Enable dumps from all optimizations. This is a superset of the optimization groups listed above.</DD></DL>
<P>For example,</P><PRE style="FONT-SIZE: smaller" class=smallexample>          gcc -O3 -fopt-info-missed=missed.all
</PRE>
<P>outputs missed optimization report from all the passes into<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>missed.all</SPAN></SAMP>.</P>
<P>As another example,</P><PRE style="FONT-SIZE: smaller" class=smallexample>          gcc -O3 -fopt-info-inline-optimized-missed=inline.txt
</PRE>
<P>will output information about missed optimizations as well as optimized locations from all the inlining passes into<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>inline.txt</SPAN></SAMP>.</P>
<P>If the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>filename</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is provided, then the dumps from all the applicable optimizations are concatenated into the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>filename</SPAN></SAMP>. Otherwise the dump is output onto<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>stderr</SPAN></SAMP>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>options</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is omitted, it defaults to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>all-optall</SPAN></SAMP>, which means dump all available optimization info from all the passes. In the following example, all optimization info is output on to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>stderr</SPAN></SAMP>.</P><PRE style="FONT-SIZE: smaller" class=smallexample>          gcc -O3 -fopt-info
</PRE>
<P>Note that<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fopt-info-vec-missed</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>behaves the same as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fopt-info-missed-vec</SPAN></SAMP>.</P>
<P>As another example, consider</P><PRE style="FONT-SIZE: smaller" class=smallexample>          gcc -fopt-info-vec-missed=vec.miss -fopt-info-loop-optimized=loop.opt
</PRE>
<P>Here the two output filenames<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>vec.miss</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>loop.opt</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>are in conflict since only one output file is allowed. In this case, only the first option takes effect and the subsequent options are ignored. Thus only the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>vec.miss</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is produced which contains dumps from the vectorizer about missed opportunities.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-frandom-seed=</CODE><VAR>string</VAR></DT>
<DD><A name=index-frandom-seed-748></A>This option provides a seed that GCC uses in place of random numbers in generating certain symbol names that have to be different in every compiled file. It is also used to place unique stamps in coverage data files and the object files that produce them. You can use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-frandom-seed</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option to produce reproducibly identical object files.
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>string</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be different for every file you compile.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-fsched-verbose=</CODE><VAR>n</VAR></DT>
<DD><A name=index-fsched-verbose-749></A>On targets that use instruction scheduling, this option controls the amount of debugging output the scheduler prints. This information is written to standard error, unless<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fdump-rtl-sched1</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fdump-rtl-sched2</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified, in which case it is output to the usual dump listing file,<SAMP><SPAN class=file>.sched1</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.sched2</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>respectively. However for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>greater than nine, the output is always printed to standard error.
<P>For<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>greater than zero,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fsched-verbose</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>outputs the same information as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fdump-rtl-sched1</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fdump-rtl-sched2</SPAN></SAMP>. For<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>greater than one, it also output basic block probabilities, detailed ready list information and unit/insn info. For<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>greater than two, it includes RTL at abort point, control-flow and regions info. And for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>over four,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fsched-verbose</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>also includes dependence info.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-save-temps</CODE></DT>
<DT><CODE>-save-temps=cwd</CODE></DT>
<DD><A name=index-save-temps-750></A>Store the usual &#8220;temporary&#8221; intermediate files permanently; place them in the current directory and name them based on the source file. Thus, compiling<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>foo.c</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-c -save-temps</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>produces files<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>foo.i</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>foo.s</SPAN></SAMP>, as well as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>foo.o</SPAN></SAMP>. This creates a preprocessed<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>foo.i</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>output file even though the compiler now normally uses an integrated preprocessor.
<P>When used in combination with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-x</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>command-line option,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-save-temps</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is sensible enough to avoid over writing an input source file with the same extension as an intermediate file. The corresponding intermediate file may be obtained by renaming the source file before using<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-save-temps</SPAN></SAMP>.</P>
<P>If you invoke GCC in parallel, compiling several different source files that share a common base name in different subdirectories or the same source file compiled for multiple output destinations, it is likely that the different parallel compilers will interfere with each other, and overwrite the temporary files. For instance:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          gcc -save-temps -o outdir1/foo.o indir1/foo.c&amp;
          gcc -save-temps -o outdir2/foo.o indir2/foo.c&amp;
</PRE>
<P>may result in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>foo.i</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>foo.o</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>being written to simultaneously by both compilers.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-save-temps=obj</CODE></DT>
<DD><A name=index-save-temps_003dobj-751></A>Store the usual &#8220;temporary&#8221; intermediate files permanently. If the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-o</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is used, the temporary files are based on the object file. If the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-o</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is not used, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-save-temps=obj</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>switch behaves like<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-save-temps</SPAN></SAMP>.
<P>For example:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          gcc -save-temps=obj -c foo.c
          gcc -save-temps=obj -c bar.c -o dir/xbar.o
          gcc -save-temps=obj foobar.c -o dir2/yfoobar
</PRE>
<P class=noindent>creates<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>foo.i</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>foo.s</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>dir/xbar.i</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>dir/xbar.s</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>dir2/yfoobar.i</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>dir2/yfoobar.s</SPAN></SAMP>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>dir2/yfoobar.o</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-time</CODE><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>[</SPAN><CODE>=</CODE><VAR>file</VAR><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>]</SPAN></DT>
<DD><A name=index-time-752></A>Report the CPU time taken by each subprocess in the compilation sequence. For C source files, this is the compiler proper and assembler (plus the linker if linking is done).
<P>Without the specification of an output file, the output looks like this:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          # cc1 0.12 0.01
          # as 0.00 0.01
</PRE>
<P>The first number on each line is the &#8220;user time&#8221;, that is time spent executing the program itself. The second number is &#8220;system time&#8221;, time spent executing operating system routines on behalf of the program. Both numbers are in seconds.</P>
<P>With the specification of an output file, the output is appended to the named file, and it looks like this:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          0.12 0.01 cc1 <VAR>options</VAR>
          0.00 0.01 as <VAR>options</VAR>
</PRE>
<P>The &#8220;user time&#8221; and the &#8220;system time&#8221; are moved before the program name, and the options passed to the program are displayed, so that one can later tell what file was being compiled, and with which options.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-fvar-tracking</CODE></DT>
<DD><A name=index-fvar-tracking-753></A>Run variable tracking pass. It computes where variables are stored at each position in code. Better debugging information is then generated (if the debugging information format supports this information).
<P>It is enabled by default when compiling with optimization (<SAMP><SPAN class=option>-Os</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-O</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-O2</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=dots>...</SMALL>), debugging information (<SAMP><SPAN class=option>-g</SPAN></SAMP>) and the debug info format supports it.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-fvar-tracking-assignments</CODE></DT>
<DD><A name=index-fvar-tracking-assignments-754></A><A name=index-fno-var-tracking-assignments-755></A>Annotate assignments to user variables early in the compilation and attempt to carry the annotations over throughout the compilation all the way to the end, in an attempt to improve debug information while optimizing. Use of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-gdwarf-4</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is recommended along with it.
<P>It can be enabled even if var-tracking is disabled, in which case annotations are created and maintained, but discarded at the end.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-fvar-tracking-assignments-toggle</CODE></DT>
<DD><A name=index-fvar-tracking-assignments-toggle-756></A><A name=index-fno-var-tracking-assignments-toggle-757></A>Toggle<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fvar-tracking-assignments</SPAN></SAMP>, in the same way that<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-gtoggle</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>toggles<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-g</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-print-file-name=</CODE><VAR>library</VAR></DT>
<DD><A name=index-print-file-name-758></A>Print the full absolute name of the library file<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>library</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>that would be used when linking&#8212;and don't do anything else. With this option, GCC does not compile or link anything; it just prints the file name.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-print-multi-directory</CODE></DT>
<DD><A name=index-print-multi-directory-759></A>Print the directory name corresponding to the multilib selected by any other switches present in the command line. This directory is supposed to exist in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=env>GCC_EXEC_PREFIX</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-print-multi-lib</CODE></DT>
<DD><A name=index-print-multi-lib-760></A>Print the mapping from multilib directory names to compiler switches that enable them. The directory name is separated from the switches by &#8216;<SAMP><SPAN class=samp>;</SPAN></SAMP>&#8217;, and each switch starts with an &#8216;<SAMP><SPAN class=samp>@</SPAN></SAMP>&#8217; instead of the &#8216;<SAMP><SPAN class=samp>-</SPAN></SAMP>&#8217;, without spaces between multiple switches. This is supposed to ease shell processing.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-print-multi-os-directory</CODE></DT>
<DD><A name=index-print-multi-os-directory-761></A>Print the path to OS libraries for the selected multilib, relative to some<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>lib</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>subdirectory. If OS libraries are present in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>lib</SPAN></SAMP>subdirectory and no multilibs are used, this is usually just<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>.</SPAN></SAMP>, if OS libraries are present in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>lib</SPAN><VAR>suffix</VAR></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>sibling directories this prints e.g.<SAMP><SPAN class=file>../lib64</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>../lib</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>../lib32</SPAN></SAMP>, or if OS libraries are present in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>lib/</SPAN><VAR>subdir</VAR></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>subdirectories it prints e.g.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>amd64</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>sparcv9</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>ev6</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-print-multiarch</CODE></DT>
<DD><A name=index-print-multiarch-762></A>Print the path to OS libraries for the selected multiarch, relative to some<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>lib</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>subdirectory.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-print-prog-name=</CODE><VAR>program</VAR></DT>
<DD><A name=index-print-prog-name-763></A>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-print-file-name</SPAN></SAMP>, but searches for a program such as &#8216;<SAMP><SPAN class=samp>cpp</SPAN></SAMP>&#8217;.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-print-libgcc-file-name</CODE></DT>
<DD><A name=index-print-libgcc-file-name-764></A>Same as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-print-file-name=libgcc.a</SPAN></SAMP>.
<P>This is useful when you use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-nostdlib</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-nodefaultlibs</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>but you do want to link with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libgcc.a</SPAN></SAMP>. You can do:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          gcc -nostdlib <VAR>files</VAR>... `gcc -print-libgcc-file-name`
</PRE><BR></DD>
<DT><CODE>-print-search-dirs</CODE></DT>
<DD><A name=index-print-search-dirs-765></A>Print the name of the configured installation directory and a list of program and library directories<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gcc</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>searches&#8212;and don't do anything else.
<P>This is useful when<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gcc</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>prints the error message &#8216;<SAMP><SPAN class=samp>installation problem, cannot exec cpp0: No such file or directory</SPAN></SAMP>&#8217;. To resolve this you either need to put<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>cpp0</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the other compiler components where<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>gcc</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>expects to find them, or you can set the environment variable<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=env>GCC_EXEC_PREFIX</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the directory where you installed them. Don't forget the trailing &#8216;<SAMP><SPAN class=samp>/</SPAN></SAMP>&#8217;. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Environment-Variables.html#Environment-Variables">Environment Variables</A>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-print-sysroot</CODE></DT>
<DD><A name=index-print-sysroot-766></A>Print the target sysroot directory that is used during compilation. This is the target sysroot specified either at configure time or using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>--sysroot</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option, possibly with an extra suffix that depends on compilation options. If no target sysroot is specified, the option prints nothing.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-print-sysroot-headers-suffix</CODE></DT>
<DD><A name=index-print-sysroot-headers-suffix-767></A>Print the suffix added to the target sysroot when searching for headers, or give an error if the compiler is not configured with such a suffix&#8212;and don't do anything else.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-dumpmachine</CODE></DT>
<DD><A name=index-dumpmachine-768></A>Print the compiler's target machine (for example, &#8216;<SAMP><SPAN class=samp>i686-pc-linux-gnu</SPAN></SAMP>&#8217;)&#8212;and don't do anything else.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-dumpversion</CODE></DT>
<DD><A name=index-dumpversion-769></A>Print the compiler version (for example, &#8216;<SAMP><SPAN class=samp>3.0</SPAN></SAMP>&#8217;)&#8212;and don't do anything else.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-dumpspecs</CODE></DT>
<DD><A name=index-dumpspecs-770></A>Print the compiler's built-in specs&#8212;and don't do anything else. (This is used when GCC itself is being built.) See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Spec-Files.html#Spec-Files">Spec Files</A>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fno-eliminate-unused-debug-types</CODE></DT>
<DD><A name=index-feliminate-unused-debug-types-771></A><A name=index-fno-eliminate-unused-debug-types-772></A>Normally, when producing DWARF 2 output, GCC avoids producing debug symbol output for types that are nowhere used in the source file being compiled. Sometimes it is useful to have GCC emit debugging information for all types declared in a compilation unit, regardless of whether or not they are actually used in that compilation unit, for example if, in the debugger, you want to cast a value to a type that is not actually used in your program (but is declared). More often, however, this results in a significant amount of wasted space.</DD></DL>