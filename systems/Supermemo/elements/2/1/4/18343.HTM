<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>3.4 Options Controlling C Dialect</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-dialect-options-102></A><A name=index-language-dialect-options-103></A><A name=index-options_002c-dialect-104></A>The following options control the dialect of C (or languages derived from C, such as C++, Objective-C and Objective-C++) that the compiler accepts:<A name=index-ANSI-support-105></A><A name=index-ISO-support-106></A></P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>-ansi</CODE></DT>
<DD><A name=index-ansi-107></A>In C mode, this is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-std=c90</SPAN></SAMP>. In C++ mode, it is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-std=c++98</SPAN></SAMP>.
<P>This turns off certain features of GCC that are incompatible with ISO C90 (when compiling C code), or of standard C++ (when compiling C++ code), such as the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>typeof</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>keywords, and predefined macros such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unix</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vax</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that identify the type of system you are using. It also enables the undesirable and rarely used ISO trigraph feature. For the C compiler, it disables recognition of C++ style &#8216;<SAMP><SPAN class=samp>//</SPAN></SAMP>&#8217; comments as well as the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>inline</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword.</P>
<P>The alternate keywords<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__asm__</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__extension__</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__inline__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__typeof__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>continue to work despite<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ansi</SPAN></SAMP>. You would not want to use them in an ISO C program, of course, but it is useful to put them in header files that might be included in compilations done with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ansi</SPAN></SAMP>. Alternate predefined macros such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__unix__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__vax__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are also available, with or without<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ansi</SPAN></SAMP>.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ansi</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option does not cause non-ISO programs to be rejected gratuitously. For that,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wpedantic</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is required in addition to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ansi</SPAN></SAMP>. See<A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Warning-Options.html#Warning-Options">Warning Options</A>.</P>
<P>The macro<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__STRICT_ANSI__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is predefined when the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ansi</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is used. Some header files may notice this macro and refrain from declaring certain functions or defining certain macros that the ISO standard doesn't call for; this is to avoid interfering with any programs that might use these names for other things.</P>
<P>Functions that are normally built in but do not have semantics defined by ISO C (such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>alloca</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ffs</CODE>) are not built-in functions when<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ansi</SPAN></SAMP>is used. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Other-Builtins.html#Other-Builtins">Other built-in functions provided by GCC</A>, for details of the functions affected.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-std=</CODE></DT>
<DD><A name=index-std-108></A>Determine the language standard. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Standards.html#Standards">Language Standards Supported by GCC</A>, for details of these standard versions. This option is currently only supported when compiling C or C++.
<P>The compiler can accept several base standards, such as &#8216;<SAMP><SPAN class=samp>c90</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>c++98</SPAN></SAMP>&#8217;, and GNU dialects of those standards, such as &#8216;<SAMP><SPAN class=samp>gnu90</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>gnu++98</SPAN></SAMP>&#8217;. When a base standard is specified, the compiler accepts all programs following that standard plus those using GNU extensions that do not contradict it. For example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-std=c90</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>turns off certain features of GCC that are incompatible with ISO C90, such as the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<CODE>typeof</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>keywords, but not other GNU extensions that do not have a meaning in ISO C90, such as omitting the middle term of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>?:</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expression. On the other hand, when a GNU dialect of a standard is specified, all features supported by the compiler are enabled, even when those features change the meaning of the base standard. As a result, some strict-conforming programs may be rejected. The particular standard is used by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wpedantic</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to identify which features are GNU extensions given that version of the standard. For example<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-std=gnu90 -Wpedantic</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>warns about C++ style &#8216;<SAMP><SPAN class=samp>//</SPAN></SAMP>&#8217; comments, while<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-std=gnu99 -Wpedantic</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not.</P>
<P>A value for this option must be provided; possible values are</P>
<DL>
<DT>&#8216;<SAMP><SPAN class=samp>c90</SPAN></SAMP>&#8217;</DT>
<DT>&#8216;<SAMP><SPAN class=samp>c89</SPAN></SAMP>&#8217;</DT>
<DT>&#8216;<SAMP><SPAN class=samp>iso9899:1990</SPAN></SAMP>&#8217;</DT>
<DD>Support all ISO C90 programs (certain GNU extensions that conflict with ISO C90 are disabled). Same as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ansi</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>for C code.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>iso9899:199409</SPAN></SAMP>&#8217;</DT>
<DD>ISO C90 as modified in amendment 1.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>c99</SPAN></SAMP>&#8217;</DT>
<DT>&#8216;<SAMP><SPAN class=samp>c9x</SPAN></SAMP>&#8217;</DT>
<DT>&#8216;<SAMP><SPAN class=samp>iso9899:1999</SPAN></SAMP>&#8217;</DT>
<DT>&#8216;<SAMP><SPAN class=samp>iso9899:199x</SPAN></SAMP>&#8217;</DT>
<DD>ISO C99. This standard is substantially completely supported, modulo bugs, extended identifiers (supported except for corner cases when<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fextended-identifiers</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used) and floating-point issues (mainly but not entirely relating to optional C99 features from Annexes F and G). See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://gcc.gnu.org/c99status.html">http://gcc.gnu.org/c99status.html</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>for more information. The names &#8216;<SAMP><SPAN class=samp>c9x</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>iso9899:199x</SPAN></SAMP>&#8217; are deprecated.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>c11</SPAN></SAMP>&#8217;</DT>
<DT>&#8216;<SAMP><SPAN class=samp>c1x</SPAN></SAMP>&#8217;</DT>
<DT>&#8216;<SAMP><SPAN class=samp>iso9899:2011</SPAN></SAMP>&#8217;</DT>
<DD>ISO C11, the 2011 revision of the ISO C standard. This standard is substantially completely supported, modulo bugs, extended identifiers (supported except for corner cases when<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fextended-identifiers</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used), floating-point issues (mainly but not entirely relating to optional C11 features from Annexes F and G) and the optional Annexes K (Bounds-checking interfaces) and L (Analyzability). The name &#8216;<SAMP><SPAN class=samp>c1x</SPAN></SAMP>&#8217; is deprecated.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>gnu90</SPAN></SAMP>&#8217;</DT>
<DT>&#8216;<SAMP><SPAN class=samp>gnu89</SPAN></SAMP>&#8217;</DT>
<DD>GNU dialect of ISO C90 (including some C99 features). This is the default for C code.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>gnu99</SPAN></SAMP>&#8217;</DT>
<DT>&#8216;<SAMP><SPAN class=samp>gnu9x</SPAN></SAMP>&#8217;</DT>
<DD>GNU dialect of ISO C99. The name &#8216;<SAMP><SPAN class=samp>gnu9x</SPAN></SAMP>&#8217; is deprecated.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>gnu11</SPAN></SAMP>&#8217;</DT>
<DT>&#8216;<SAMP><SPAN class=samp>gnu1x</SPAN></SAMP>&#8217;</DT>
<DD>GNU dialect of ISO C11. This is intended to become the default in a future release of GCC. The name &#8216;<SAMP><SPAN class=samp>gnu1x</SPAN></SAMP>&#8217; is deprecated.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>c++98</SPAN></SAMP>&#8217;</DT>
<DT>&#8216;<SAMP><SPAN class=samp>c++03</SPAN></SAMP>&#8217;</DT>
<DD>The 1998 ISO C++ standard plus the 2003 technical corrigendum and some additional defect reports. Same as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ansi</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>for C++ code.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>gnu++98</SPAN></SAMP>&#8217;</DT>
<DT>&#8216;<SAMP><SPAN class=samp>gnu++03</SPAN></SAMP>&#8217;</DT>
<DD>GNU dialect of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-std=c++98</SPAN></SAMP>. This is the default for C++ code.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>c++11</SPAN></SAMP>&#8217;</DT>
<DT>&#8216;<SAMP><SPAN class=samp>c++0x</SPAN></SAMP>&#8217;</DT>
<DD>The 2011 ISO C++ standard plus amendments. The name &#8216;<SAMP><SPAN class=samp>c++0x</SPAN></SAMP>&#8217; is deprecated.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>gnu++11</SPAN></SAMP>&#8217;</DT>
<DT>&#8216;<SAMP><SPAN class=samp>gnu++0x</SPAN></SAMP>&#8217;</DT>
<DD>GNU dialect of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-std=c++11</SPAN></SAMP>. The name &#8216;<SAMP><SPAN class=samp>gnu++0x</SPAN></SAMP>&#8217; is deprecated.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>c++1y</SPAN></SAMP>&#8217;</DT>
<DD>The next revision of the ISO C++ standard, tentatively planned for 2014. Support is highly experimental, and will almost certainly change in incompatible ways in future releases.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>gnu++1y</SPAN></SAMP>&#8217;</DT>
<DD>GNU dialect of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-std=c++1y</SPAN></SAMP>. Support is highly experimental, and will almost certainly change in incompatible ways in future releases.</DD></DL><BR></DD>
<DT><CODE>-fgnu89-inline</CODE></DT>
<DD><A name=index-fgnu89-inline-109></A>The option<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fgnu89-inline</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>tells GCC to use the traditional GNU semantics for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>inline</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>functions when in C99 mode. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Inline.html#Inline">An Inline Function is As Fast As a Macro</A>. This option is accepted and ignored by GCC versions 4.1.3 up to but not including 4.3. In GCC versions 4.3 and later it changes the behavior of GCC in C99 mode. Using this option is roughly equivalent to adding the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gnu_inline</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function attribute to all inline functions (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Function-Attributes.html#Function-Attributes">Function Attributes</A>).
<P>The option<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fno-gnu89-inline</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>explicitly tells GCC to use the C99 semantics for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>inline</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>when in C99 or gnu99 mode (i.e., it specifies the default behavior). This option was first supported in GCC 4.3. This option is not supported in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-std=c90</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-std=gnu90</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>mode.</P>
<P>The preprocessor macros<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__GNUC_GNU_INLINE__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__GNUC_STDC_INLINE__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be used to check which semantics are in effect for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>inline</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>functions. See<A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/cpp/Common-Predefined-Macros.html#Common-Predefined-Macros">Common Predefined Macros</A>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-aux-info<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>filename</VAR></DT>
<DD><A name=index-aux-info-110></A>Output to the given filename prototyped declarations for all functions declared and/or defined in a translation unit, including those in header files. This option is silently ignored in any language other than C.
<P>Besides declarations, the file indicates, in comments, the origin of each declaration (source file and line), whether the declaration was implicit, prototyped or unprototyped (&#8216;<SAMP><SPAN class=samp>I</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>N</SPAN></SAMP>&#8217; for new or &#8216;<SAMP><SPAN class=samp>O</SPAN></SAMP>&#8217; for old, respectively, in the first character after the line number and the colon), and whether it came from a declaration or a definition (&#8216;<SAMP><SPAN class=samp>C</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>F</SPAN></SAMP>&#8217;, respectively, in the following character). In the case of function definitions, a K&amp;R-style list of arguments followed by their declarations is also provided, inside comments, after the declaration.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-fallow-parameterless-variadic-functions</CODE></DT>
<DD><A name=index-fallow-parameterless-variadic-functions-111></A>Accept variadic functions without named parameters.
<P>Although it is possible to define such a function, this is not very useful as it is not possible to read the arguments. This is only supported for C as this construct is allowed by C++.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-fno-asm</CODE></DT>
<DD><A name=index-fno-asm-112></A>Do not recognize<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asm</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>inline</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>typeof</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a keyword, so that code can use these words as identifiers. You can use the keywords<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__asm__</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__inline__</CODE>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__typeof__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ansi</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>implies<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fno-asm</SPAN></SAMP>.
<P>In C++, this switch only affects the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>typeof</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>keyword, since<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>inline</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are standard keywords. You may want to use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fno-gnu-keywords</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>flag instead, which has the same effect. In C99 mode (<SAMP><SPAN class=option>-std=c99</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-std=gnu99</SPAN></SAMP>), this switch only affects the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>typeof</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>keywords, since<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>inline</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a standard keyword in ISO C99.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-fno-builtin</CODE></DT>
<DT><CODE>-fno-builtin-</CODE><VAR>function</VAR></DT>
<DD><A name=index-fno-builtin-113></A><A name=index-built-in-functions-114></A>Don't recognize built-in functions that do not begin with &#8216;<SAMP><SPAN class=samp>__builtin_</SPAN></SAMP>&#8217; as prefix. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Other-Builtins.html#Other-Builtins">Other built-in functions provided by GCC</A>, for details of the functions affected, including those which are not built-in functions when<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ansi</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-std</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options for strict ISO C conformance are used because they do not have an ISO standard meaning.
<P>GCC normally generates special code to handle certain built-in functions more efficiently; for instance, calls to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>alloca</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may become single instructions which adjust the stack directly, and calls to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>memcpy</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may become inline copy loops. The resulting code is often both smaller and faster, but since the function calls no longer appear as such, you cannot set a breakpoint on those calls, nor can you change the behavior of the functions by linking with a different library. In addition, when a function is recognized as a built-in function, GCC may use information about that function to warn about problems with calls to that function, or to generate more efficient code, even if the resulting code still contains calls to that function. For example, warnings are given with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Wformat</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>for bad calls to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>printf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>when<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>printf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is built in and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strlen</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is known not to modify global memory.</P>
<P>With the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fno-builtin-</SPAN><VAR>function</VAR></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option only the built-in function<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>function</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is disabled.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>function</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must not begin with &#8216;<SAMP><SPAN class=samp>__builtin_</SPAN></SAMP>&#8217;. If a function is named that is not built-in in this version of GCC, this option is ignored. There is no corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fbuiltin-</SPAN><VAR>function</VAR></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option; if you wish to enable built-in functions selectively when using<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fno-builtin</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ffreestanding</SPAN></SAMP>, you may define macros such as:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          #define abs(n)          __builtin_abs ((n))
          #define strcpy(d, s)    __builtin_strcpy ((d), (s))
</PRE><BR></DD>
<DT><CODE>-fhosted</CODE></DT>
<DD><A name=index-fhosted-115></A><A name=index-hosted-environment-116></A>Assert that compilation targets a hosted environment. This implies<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fbuiltin</SPAN></SAMP>. A hosted environment is one in which the entire standard library is available, and in which<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>main</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>has a return type of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int</CODE>. Examples are nearly everything except a kernel. This is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fno-freestanding</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-ffreestanding</CODE></DT>
<DD><A name=index-ffreestanding-117></A><A name=index-hosted-environment-118></A>Assert that compilation targets a freestanding environment. This implies<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fno-builtin</SPAN></SAMP>. A freestanding environment is one in which the standard library may not exist, and program startup may not necessarily be at<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>main</CODE>. The most obvious example is an OS kernel. This is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fno-hosted</SPAN></SAMP>.
<P>See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Standards.html#Standards">Language Standards Supported by GCC</A>, for details of freestanding and hosted environments.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-fopenmp</CODE></DT>
<DD><A name=index-fopenmp-119></A><A name=index-OpenMP-parallel-120></A>Enable handling of OpenMP directives<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#pragma omp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in C/C++ and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>!$omp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in Fortran. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fopenmp</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified, the compiler generates parallel code according to the OpenMP Application Program Interface v4.0<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://www.openmp.org/">http://www.openmp.org/</A>. This option implies<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-pthread</SPAN></SAMP>, and thus is only supported on targets that have support for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-pthread</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fopenmp</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>implies<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fopenmp-simd</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fopenmp-simd</CODE></DT>
<DD><A name=index-fopenmp-simd-121></A><A name=index-OpenMP-SIMD-122></A><A name=index-SIMD-123></A>Enable handling of OpenMP's SIMD directives with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#pragma omp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in C/C++ and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>!$omp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in Fortran. Other OpenMP directives are ignored.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fcilkplus</CODE></DT>
<DD><A name=index-fcilkplus-124></A><A name=index-Enable-Cilk-Plus-125></A>Enable the usage of Cilk Plus language extension features for C/C++. When the option<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fcilkplus</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified, enable the usage of the Cilk Plus Language extension features for C/C++. The present implementation follows ABI version 1.2. This is an experimental feature that is only partially complete, and whose interface may change in future versions of GCC as the official specification changes. Currently, all features but<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_Cilk_for</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>have been implemented.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fgnu-tm</CODE></DT>
<DD><A name=index-fgnu-tm-126></A>When the option<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fgnu-tm</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified, the compiler generates code for the Linux variant of Intel's current Transactional Memory ABI specification document (Revision 1.1, May 6 2009). This is an experimental feature whose interface may change in future versions of GCC, as the official specification changes. Please note that not all architectures are supported for this feature.
<P>For more information on GCC's support for transactional memory, See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/libitm/Enabling-libitm.html#Enabling-libitm">The GNU Transactional Memory Library</A>.</P>
<P>Note that the transactional memory feature is not supported with non-call exceptions (<SAMP><SPAN class=option>-fnon-call-exceptions</SPAN></SAMP>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-fms-extensions</CODE></DT>
<DD><A name=index-fms-extensions-127></A>Accept some non-standard constructs used in Microsoft header files.
<P>In C++ code, this allows member names in structures to be similar to previous types declarations.</P><PRE style="FONT-SIZE: smaller" class=smallexample>          typedef int UOW;
          struct ABC {
            UOW UOW;
          };
</PRE>
<P>Some cases of unnamed fields in structures and unions are only accepted with this option. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Unnamed-Fields.html#Unnamed-Fields">Unnamed struct/union fields within structs/unions</A>, for details.</P>
<P>Note that this option is off for all targets but i?86 and x86_64 targets using ms-abi.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-fplan9-extensions</CODE></DT>
<DD>Accept some non-standard constructs used in Plan 9 code.
<P>This enables<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fms-extensions</SPAN></SAMP>, permits passing pointers to structures with anonymous fields to functions that expect pointers to elements of the type of the field, and permits referring to anonymous fields declared using a typedef. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Unnamed-Fields.html#Unnamed-Fields">Unnamed struct/union fields within structs/unions</A>, for details. This is only supported for C, not C++.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-trigraphs</CODE></DT>
<DD><A name=index-trigraphs-128></A>Support ISO C trigraphs. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ansi</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option (and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-std</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options for strict ISO C conformance) implies<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-trigraphs</SPAN></SAMP>.
<P><A name=index-traditional-C-language-129></A><A name=index-C-language_002c-traditional-130></A><BR></P></DD>
<DT><CODE>-traditional</CODE></DT>
<DT><CODE>-traditional-cpp</CODE></DT>
<DD><A name=index-traditional-cpp-131></A><A name=index-traditional-132></A>Formerly, these options caused GCC to attempt to emulate a pre-standard C compiler. They are now only supported with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-E</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>switch. The preprocessor continues to support a pre-standard mode. See the GNU CPP manual for details.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-fcond-mismatch</CODE></DT>
<DD><A name=index-fcond-mismatch-133></A>Allow conditional expressions with mismatched types in the second and third arguments. The value of such an expression is void. This option is not supported for C++.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-flax-vector-conversions</CODE></DT>
<DD><A name=index-flax-vector-conversions-134></A>Allow implicit conversions between vectors with differing numbers of elements and/or incompatible element types. This option should not be used for new code.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-funsigned-char</CODE></DT>
<DD><A name=index-funsigned-char-135></A>Let the type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>be unsigned, like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unsigned char</CODE>.
<P>Each kind of machine has a default for what<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be. It is either like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unsigned char</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>by default or like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>signed char</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>by default.</P>
<P>Ideally, a portable program should always use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>signed char</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unsigned char</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>when it depends on the signedness of an object. But many programs have been written to use plain<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and expect it to be signed, or expect it to be unsigned, depending on the machines they were written for. This option, and its inverse, let you make such a program work with the opposite default.</P>
<P>The type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is always a distinct type from each of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>signed char</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unsigned char</CODE>, even though its behavior is always just like one of those two.<BR></P></DD>
<DT><CODE>-fsigned-char</CODE></DT>
<DD><A name=index-fsigned-char-136></A>Let the type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>be signed, like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>signed char</CODE>.
<P>Note that this is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fno-unsigned-char</SPAN></SAMP>, which is the negative form of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-funsigned-char</SPAN></SAMP>. Likewise, the option<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fno-signed-char</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-funsigned-char</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-fsigned-bitfields</CODE></DT>
<DT><CODE>-funsigned-bitfields</CODE></DT>
<DT><CODE>-fno-signed-bitfields</CODE></DT>
<DT><CODE>-fno-unsigned-bitfields</CODE></DT>
<DD><A name=index-fsigned-bitfields-137></A><A name=index-funsigned-bitfields-138></A><A name=index-fno-signed-bitfields-139></A><A name=index-fno-unsigned-bitfields-140></A>These options control whether a bit-field is signed or unsigned, when the declaration does not use either<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>signed</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unsigned</CODE>. By default, such a bit-field is signed, because this is consistent: the basic integer types such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are signed types.</DD></DL>