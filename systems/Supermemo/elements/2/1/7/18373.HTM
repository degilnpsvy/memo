<H4 class=subsection style="FONT-SIZE: medium; FONT-FAMILY: Simsun; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">3.17.17 Intel 386 and AMD x86-64 Options</H4>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><A name=index-i386-Options-1575></A><A name=index-x86-64-Options-1576></A><A name=index-Intel-386-Options-1577></A><A name=index-AMD-x86-64-Options-1578></A>These &#8216;<SAMP><SPAN class=samp>-m</SPAN></SAMP>&#8217; options are defined for the i386 and x86-64 family of computers:</P>
<DL style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>-march=</CODE><VAR>cpu-type</VAR> 
<DD><A name=index-march-1579></A>Generate instructions for the machine type<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cpu-type</VAR>. In contrast to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mtune=</SPAN><VAR>cpu-type</VAR></SAMP>, which merely tunes the generated code for the specified<VAR>cpu-type</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march=</SPAN><VAR>cpu-type</VAR></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>allows GCC to generate code that may not run at all on processors other than the one indicated. Specifying<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march=</SPAN><VAR>cpu-type</VAR></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>implies<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mtune=</SPAN><VAR>cpu-type</VAR></SAMP>. 
<P>The choices for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cpu-type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are:</P>
<DL>
<DT>&#8216;<SAMP><SPAN class=samp>native</SPAN></SAMP>&#8217; 
<DD>This selects the CPU to generate code for at compilation time by determining the processor type of the compiling machine. Using<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march=native</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>enables all instruction subsets supported by the local machine (hence the result might not run on different machines). Using<SAMP><SPAN class=option>-mtune=native</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>produces code optimized for the local machine under the constraints of the selected instruction set.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>i386</SPAN></SAMP>&#8217; 
<DD>Original Intel i386 CPU.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>i486</SPAN></SAMP>&#8217; 
<DD>Intel i486 CPU. (No scheduling is implemented for this chip.)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>i586</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>pentium</SPAN></SAMP>&#8217; 
<DD>Intel Pentium CPU with no MMX support.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>pentium-mmx</SPAN></SAMP>&#8217; 
<DD>Intel Pentium MMX CPU, based on Pentium core with MMX instruction set support.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>pentiumpro</SPAN></SAMP>&#8217; 
<DD>Intel Pentium Pro CPU.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>i686</SPAN></SAMP>&#8217; 
<DD>When used with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march</SPAN></SAMP>, the Pentium Pro instruction set is used, so the code runs on all i686 family chips. When used with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mtune</SPAN></SAMP>, it has the same meaning as &#8216;<SAMP><SPAN class=samp>generic</SPAN></SAMP>&#8217;.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>pentium2</SPAN></SAMP>&#8217; 
<DD>Intel Pentium II CPU, based on Pentium Pro core with MMX instruction set support.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>pentium3</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>pentium3m</SPAN></SAMP>&#8217; 
<DD>Intel Pentium III CPU, based on Pentium Pro core with MMX and SSE instruction set support.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>pentium-m</SPAN></SAMP>&#8217; 
<DD>Intel Pentium M; low-power version of Intel Pentium III CPU with MMX, SSE and SSE2 instruction set support. Used by Centrino notebooks.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>pentium4</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>pentium4m</SPAN></SAMP>&#8217; 
<DD>Intel Pentium 4 CPU with MMX, SSE and SSE2 instruction set support.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>prescott</SPAN></SAMP>&#8217; 
<DD>Improved version of Intel Pentium 4 CPU with MMX, SSE, SSE2 and SSE3 instruction set support.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>nocona</SPAN></SAMP>&#8217; 
<DD>Improved version of Intel Pentium 4 CPU with 64-bit extensions, MMX, SSE, SSE2 and SSE3 instruction set support.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>core2</SPAN></SAMP>&#8217; 
<DD>Intel Core 2 CPU with 64-bit extensions, MMX, SSE, SSE2, SSE3 and SSSE3 instruction set support.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>nehalem</SPAN></SAMP>&#8217; 
<DD>Intel Nehalem CPU with 64-bit extensions, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2 and POPCNT instruction set support.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>westmere</SPAN></SAMP>&#8217; 
<DD>Intel Westmere CPU with 64-bit extensions, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AES and PCLMUL instruction set support.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>sandybridge</SPAN></SAMP>&#8217; 
<DD>Intel Sandy Bridge CPU with 64-bit extensions, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AVX, AES and PCLMUL instruction set support.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>ivybridge</SPAN></SAMP>&#8217; 
<DD>Intel Ivy Bridge CPU with 64-bit extensions, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AVX, AES, PCLMUL, FSGSBASE, RDRND and F16C instruction set support.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>haswell</SPAN></SAMP>&#8217; 
<DD>Intel Haswell CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA, BMI, BMI2 and F16C instruction set support.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>broadwell</SPAN></SAMP>&#8217; 
<DD>Intel Broadwell CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AVX, AVX2, AES, PCLMUL, FSGSBASE, RDRND, FMA, BMI, BMI2, F16C, RDSEED, ADCX and PREFETCHW instruction set support.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>bonnell</SPAN></SAMP>&#8217; 
<DD>Intel Bonnell CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3 and SSSE3 instruction set support.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>silvermont</SPAN></SAMP>&#8217; 
<DD>Intel Silvermont CPU with 64-bit extensions, MOVBE, MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, SSE4.2, POPCNT, AES, PCLMUL and RDRND instruction set support.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>k6</SPAN></SAMP>&#8217; 
<DD>AMD K6 CPU with MMX instruction set support.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>k6-2</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>k6-3</SPAN></SAMP>&#8217; 
<DD>Improved versions of AMD K6 CPU with MMX and 3DNow! instruction set support.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>athlon</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>athlon-tbird</SPAN></SAMP>&#8217; 
<DD>AMD Athlon CPU with MMX, 3dNOW!, enhanced 3DNow! and SSE prefetch instructions support.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>athlon-4</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>athlon-xp</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>athlon-mp</SPAN></SAMP>&#8217; 
<DD>Improved AMD Athlon CPU with MMX, 3DNow!, enhanced 3DNow! and full SSE instruction set support.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>k8</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>opteron</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>athlon64</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>athlon-fx</SPAN></SAMP>&#8217; 
<DD>Processors based on the AMD K8 core with x86-64 instruction set support, including the AMD Opteron, Athlon 64, and Athlon 64 FX processors. (This supersets MMX, SSE, SSE2, 3DNow!, enhanced 3DNow! and 64-bit instruction set extensions.)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>k8-sse3</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>opteron-sse3</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>athlon64-sse3</SPAN></SAMP>&#8217; 
<DD>Improved versions of AMD K8 cores with SSE3 instruction set support.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>amdfam10</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>barcelona</SPAN></SAMP>&#8217; 
<DD>CPUs based on AMD Family 10h cores with x86-64 instruction set support. (This supersets MMX, SSE, SSE2, SSE3, SSE4A, 3DNow!, enhanced 3DNow!, ABM and 64-bit instruction set extensions.)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>bdver1</SPAN></SAMP>&#8217; 
<DD>CPUs based on AMD Family 15h cores with x86-64 instruction set support. (This supersets FMA4, AVX, XOP, LWP, AES, PCL_MUL, CX16, MMX, SSE, SSE2, SSE3, SSE4A, SSSE3, SSE4.1, SSE4.2, ABM and 64-bit instruction set extensions.)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>bdver2</SPAN></SAMP>&#8217; 
<DD>AMD Family 15h core based CPUs with x86-64 instruction set support. (This supersets BMI, TBM, F16C, FMA, FMA4, AVX, XOP, LWP, AES, PCL_MUL, CX16, MMX, SSE, SSE2, SSE3, SSE4A, SSSE3, SSE4.1, SSE4.2, ABM and 64-bit instruction set extensions.)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>bdver3</SPAN></SAMP>&#8217; 
<DD>AMD Family 15h core based CPUs with x86-64 instruction set support. (This supersets BMI, TBM, F16C, FMA, FMA4, FSGSBASE, AVX, XOP, LWP, AES, PCL_MUL, CX16, MMX, SSE, SSE2, SSE3, SSE4A, SSSE3, SSE4.1, SSE4.2, ABM and 64-bit instruction set extensions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>bdver4</SPAN></SAMP>&#8217; 
<DD>AMD Family 15h core based CPUs with x86-64 instruction set support. (This supersets BMI, BMI2, TBM, F16C, FMA, FMA4, FSGSBASE, AVX, AVX2, XOP, LWP, AES, PCL_MUL, CX16, MOVBE, MMX, SSE, SSE2, SSE3, SSE4A, SSSE3, SSE4.1, SSE4.2, ABM and 64-bit instruction set extensions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>btver1</SPAN></SAMP>&#8217; 
<DD>CPUs based on AMD Family 14h cores with x86-64 instruction set support. (This supersets MMX, SSE, SSE2, SSE3, SSSE3, SSE4A, CX16, ABM and 64-bit instruction set extensions.)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>btver2</SPAN></SAMP>&#8217; 
<DD>CPUs based on AMD Family 16h cores with x86-64 instruction set support. This includes MOVBE, F16C, BMI, AVX, PCL_MUL, AES, SSE4.2, SSE4.1, CX16, ABM, SSE4A, SSSE3, SSE3, SSE2, SSE, MMX and 64-bit instruction set extensions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>winchip-c6</SPAN></SAMP>&#8217; 
<DD>IDT WinChip C6 CPU, dealt in same way as i486 with additional MMX instruction set support.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>winchip2</SPAN></SAMP>&#8217; 
<DD>IDT WinChip 2 CPU, dealt in same way as i486 with additional MMX and 3DNow! instruction set support.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>c3</SPAN></SAMP>&#8217; 
<DD>VIA C3 CPU with MMX and 3DNow! instruction set support. (No scheduling is implemented for this chip.)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>c3-2</SPAN></SAMP>&#8217; 
<DD>VIA C3-2 (Nehemiah/C5XL) CPU with MMX and SSE instruction set support. (No scheduling is implemented for this chip.)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>geode</SPAN></SAMP>&#8217; 
<DD>AMD Geode embedded processor with MMX and 3DNow! instruction set support.</DD></DL><BR>
<DT><CODE>-mtune=</CODE><VAR>cpu-type</VAR> 
<DD><A name=index-mtune-1580></A>Tune to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cpu-type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>everything applicable about the generated code, except for the ABI and the set of available instructions. While picking a specific<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cpu-type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>schedules things appropriately for that particular chip, the compiler does not generate any code that cannot run on the default machine type unless you use a<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march=</SPAN><VAR>cpu-type</VAR></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option. For example, if GCC is configured for i686-pc-linux-gnu then<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mtune=pentium4</SPAN></SAMP>generates code that is tuned for Pentium 4 but still runs on i686 machines. 
<P>The choices for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cpu-type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are the same as for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march</SPAN></SAMP>. In addition,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mtune</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>supports 2 extra choices for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cpu-type</VAR>:</P>
<DL>
<DT>&#8216;<SAMP><SPAN class=samp>generic</SPAN></SAMP>&#8217; 
<DD>Produce code optimized for the most common IA32/AMD64/EM64T processors. If you know the CPU on which your code will run, then you should use the corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mtune</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mtune=generic</SPAN></SAMP>. But, if you do not know exactly what CPU users of your application will have, then you should use this option. 
<P>As new processors are deployed in the marketplace, the behavior of this option will change. Therefore, if you upgrade to a newer version of GCC, code generation controlled by this option will change to reflect the processors that are most common at the time that version of GCC is released.</P>
<P>There is no<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march=generic</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option because<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>indicates the instruction set the compiler can use, and there is no generic instruction set applicable to all processors. In contrast,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mtune</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>indicates the processor (or, in this case, collection of processors) for which the code is optimized.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT>&#8216;<SAMP><SPAN class=samp>intel</SPAN></SAMP>&#8217; 
<DD>Produce code optimized for the most current Intel processors, which are Haswell and Silvermont for this version of GCC. If you know the CPU on which your code will run, then you should use the corresponding<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mtune</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mtune=intel</SPAN></SAMP>. But, if you want your application performs better on both Haswell and Silvermont, then you should use this option. 
<P>As new Intel processors are deployed in the marketplace, the behavior of this option will change. Therefore, if you upgrade to a newer version of GCC, code generation controlled by this option will change to reflect the most current Intel processors at the time that version of GCC is released.</P>
<P>There is no<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march=intel</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option because<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>indicates the instruction set the compiler can use, and there is no common instruction set applicable to all processors. In contrast,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mtune</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>indicates the processor (or, in this case, collection of processors) for which the code is optimized.</P></DD></DL><BR>
<DT><CODE>-mcpu=</CODE><VAR>cpu-type</VAR> 
<DD><A name=index-mcpu-1581></A>A deprecated synonym for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mtune</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-mfpmath=</CODE><VAR>unit</VAR> 
<DD><A name=index-mfpmath-1582></A>Generate floating-point arithmetic for selected unit<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>unit</VAR>. The choices for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>unit</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are: 
<DL>
<DT>&#8216;<SAMP><SPAN class=samp>387</SPAN></SAMP>&#8217; 
<DD>Use the standard 387 floating-point coprocessor present on the majority of chips and emulated otherwise. Code compiled with this option runs almost everywhere. The temporary results are computed in 80-bit precision instead of the precision specified by the type, resulting in slightly different results compared to most of other chips. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ffloat-store</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>for more detailed description. 
<P>This is the default choice for i386 compiler.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT>&#8216;<SAMP><SPAN class=samp>sse</SPAN></SAMP>&#8217; 
<DD>Use scalar floating-point instructions present in the SSE instruction set. This instruction set is supported by Pentium III and newer chips, and in the AMD line by Athlon-4, Athlon XP and Athlon MP chips. The earlier version of the SSE instruction set supports only single-precision arithmetic, thus the double and extended-precision arithmetic are still done using 387. A later version, present only in Pentium 4 and AMD x86-64 chips, supports double-precision arithmetic too. 
<P>For the i386 compiler, you must use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march=</SPAN><VAR>cpu-type</VAR></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-msse</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-msse2</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>switches to enable SSE extensions and make this option effective. For the x86-64 compiler, these extensions are enabled by default.</P>
<P>The resulting code should be considerably faster in the majority of cases and avoid the numerical instability problems of 387 code, but may break some existing code that expects temporaries to be 80 bits.</P>
<P>This is the default choice for the x86-64 compiler.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT>&#8216;<SAMP><SPAN class=samp>sse,387</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>sse+387</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>both</SPAN></SAMP>&#8217; 
<DD>Attempt to utilize both instruction sets at once. This effectively doubles the amount of available registers, and on chips with separate execution units for 387 and SSE the execution resources too. Use this option with care, as it is still experimental, because the GCC register allocator does not model separate functional units well, resulting in unstable performance.</DD></DL><BR>
<DT><CODE>-masm=</CODE><VAR>dialect</VAR> 
<DD><A name=index-masm_003d_0040var_007bdialect_007d-1583></A>Output assembly instructions using selected<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dialect</VAR>. Supported choices are &#8216;<SAMP><SPAN class=samp>intel</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>att</SPAN></SAMP>&#8217; (the default). Darwin does not support &#8216;<SAMP><SPAN class=samp>intel</SPAN></SAMP>&#8217;.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-mieee-fp</CODE> 
<DT><CODE>-mno-ieee-fp</CODE> 
<DD><A name=index-mieee-fp-1584></A><A name=index-mno-ieee-fp-1585></A>Control whether or not the compiler uses IEEE floating-point comparisons. These correctly handle the case where the result of a comparison is unordered.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-msoft-float</CODE> 
<DD><A name=index-msoft-float-1586></A>Generate output containing library calls for floating point. 
<P><STRONG>Warning:</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN>the requisite libraries are not part of GCC. Normally the facilities of the machine's usual C compiler are used, but this can't be done directly in cross-compilation. You must make your own arrangements to provide suitable library functions for cross-compilation.</P>
<P>On machines where a function returns floating-point results in the 80387 register stack, some floating-point opcodes may be emitted even if<SAMP><SPAN class=option>-msoft-float</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-mno-fp-ret-in-387</CODE> 
<DD><A name=index-mno-fp-ret-in-387-1587></A>Do not use the FPU registers for return values of functions. 
<P>The usual calling convention has functions return values of types<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>float</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>double</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in an FPU register, even if there is no FPU. The idea is that the operating system should emulate an FPU.</P>
<P>The option<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-fp-ret-in-387</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>causes such values to be returned in ordinary CPU registers instead.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-mno-fancy-math-387</CODE> 
<DD><A name=index-mno-fancy-math-387-1588></A>Some 387 emulators do not support the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sin</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cos</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sqrt</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions for the 387. Specify this option to avoid generating those instructions. This option is the default on FreeBSD, OpenBSD and NetBSD. This option is overridden when<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>indicates that the target CPU always has an FPU and so the instruction does not need emulation. These instructions are not generated unless you also use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-funsafe-math-optimizations</SPAN></SAMP>switch.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-malign-double</CODE> 
<DT><CODE>-mno-align-double</CODE> 
<DD><A name=index-malign-double-1589></A><A name=index-mno-align-double-1590></A>Control whether GCC aligns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>double</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long double</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long long</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>variables on a two-word boundary or a one-word boundary. Aligning<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>double</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>variables on a two-word boundary produces code that runs somewhat faster on a Pentium at the expense of more memory. 
<P>On x86-64,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-malign-double</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is enabled by default.</P>
<P><STRONG>Warning:</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN>if you use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-malign-double</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>switch, structures containing the above types are aligned differently than the published application binary interface specifications for the 386 and are not binary compatible with structures in code compiled without that switch.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-m96bit-long-double</CODE> 
<DT><CODE>-m128bit-long-double</CODE> 
<DD><A name=index-m96bit-long-double-1591></A><A name=index-m128bit-long-double-1592></A>These switches control the size of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long double</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>type. The i386 application binary interface specifies the size to be 96 bits, so<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-m96bit-long-double</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the default in 32-bit mode. 
<P>Modern architectures (Pentium and newer) prefer<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long double</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to be aligned to an 8- or 16-byte boundary. In arrays or structures conforming to the ABI, this is not possible. So specifying<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-m128bit-long-double</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>aligns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long double</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to a 16-byte boundary by padding the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long double</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with an additional 32-bit zero.</P>
<P>In the x86-64 compiler,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-m128bit-long-double</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the default choice as its ABI specifies that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long double</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is aligned on 16-byte boundary.</P>
<P>Notice that neither of these options enable any extra precision over the x87 standard of 80 bits for a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long double</CODE>.</P>
<P><STRONG>Warning:</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN>if you override the default value for your target ABI, this changes the size of structures and arrays containing<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long double</CODE>variables, as well as modifying the function calling convention for functions taking<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long double</CODE>. Hence they are not binary-compatible with code compiled without that switch.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-mlong-double-64</CODE> 
<DT><CODE>-mlong-double-80</CODE> 
<DT><CODE>-mlong-double-128</CODE> 
<DD><A name=index-mlong-double-64-1593></A><A name=index-mlong-double-80-1594></A><A name=index-mlong-double-128-1595></A>These switches control the size of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long double</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>type. A size of 64 bits makes the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long double</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>type equivalent to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>double</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>type. This is the default for 32-bit Bionic C library. A size of 128 bits makes the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long double</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>type equivalent to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__float128</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>type. This is the default for 64-bit Bionic C library. 
<P><STRONG>Warning:</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN>if you override the default value for your target ABI, this changes the size of structures and arrays containing<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long double</CODE>variables, as well as modifying the function calling convention for functions taking<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long double</CODE>. Hence they are not binary-compatible with code compiled without that switch.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-mlarge-data-threshold=</CODE><VAR>threshold</VAR> 
<DD><A name=index-mlarge-data-threshold-1596></A>When<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mcmodel=medium</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified, data objects larger than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>threshold</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are placed in the large data section. This value must be the same across all objects linked into the binary, and defaults to 65535.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-mrtd</CODE> 
<DD><A name=index-mrtd-1597></A>Use a different function-calling convention, in which functions that take a fixed number of arguments return with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ret<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>num</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction, which pops their arguments while returning. This saves one instruction in the caller since there is no need to pop the arguments there. 
<P>You can specify that an individual function is called with this calling sequence with the function attribute &#8216;<SAMP><SPAN class=samp>stdcall</SPAN></SAMP>&#8217;. You can also override the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mrtd</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option by using the function attribute &#8216;<SAMP><SPAN class=samp>cdecl</SPAN></SAMP>&#8217;. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Function-Attributes.html#Function-Attributes">Function Attributes</A>.</P>
<P><STRONG>Warning:</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN>this calling convention is incompatible with the one normally used on Unix, so you cannot use it if you need to call libraries compiled with the Unix compiler.</P>
<P>Also, you must provide function prototypes for all functions that take variable numbers of arguments (including<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>printf</CODE>); otherwise incorrect code is generated for calls to those functions.</P>
<P>In addition, seriously incorrect code results if you call a function with too many arguments. (Normally, extra arguments are harmlessly ignored.)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-mregparm=</CODE><VAR>num</VAR> 
<DD><A name=index-mregparm-1598></A>Control how many registers are used to pass integer arguments. By default, no registers are used to pass arguments, and at most 3 registers can be used. You can control this behavior for a specific function by using the function attribute &#8216;<SAMP><SPAN class=samp>regparm</SPAN></SAMP>&#8217;. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Function-Attributes.html#Function-Attributes">Function Attributes</A>. 
<P><STRONG>Warning:</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN>if you use this switch, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>num</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is nonzero, then you must build all modules with the same value, including any libraries. This includes the system libraries and startup modules.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-msseregparm</CODE> 
<DD><A name=index-msseregparm-1599></A>Use SSE register passing conventions for float and double arguments and return values. You can control this behavior for a specific function by using the function attribute &#8216;<SAMP><SPAN class=samp>sseregparm</SPAN></SAMP>&#8217;. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Function-Attributes.html#Function-Attributes">Function Attributes</A>. 
<P><STRONG>Warning:</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN>if you use this switch then you must build all modules with the same value, including any libraries. This includes the system libraries and startup modules.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-mvect8-ret-in-mem</CODE> 
<DD><A name=index-mvect8-ret-in-mem-1600></A>Return 8-byte vectors in memory instead of MMX registers. This is the default on Solaris&nbsp;8 and 9 and VxWorks to match the ABI of the Sun Studio compilers until version 12. Later compiler versions (starting with Studio 12 Update&nbsp;1) follow the ABI used by other x86 targets, which is the default on Solaris&nbsp;10 and later.<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>Only</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>use this option if you need to remain compatible with existing code produced by those previous compiler versions or older versions of GCC.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-mpc32</CODE> 
<DT><CODE>-mpc64</CODE> 
<DT><CODE>-mpc80</CODE> 
<DD><A name=index-mpc32-1601></A><A name=index-mpc64-1602></A><A name=index-mpc80-1603></A>Set 80387 floating-point precision to 32, 64 or 80 bits. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mpc32</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified, the significands of results of floating-point operations are rounded to 24 bits (single precision);<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mpc64</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>rounds the significands of results of floating-point operations to 53 bits (double precision) and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mpc80</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>rounds the significands of results of floating-point operations to 64 bits (extended double precision), which is the default. When this option is used, floating-point operations in higher precisions are not available to the programmer without setting the FPU control word explicitly. 
<P>Setting the rounding of floating-point operations to less than the default 80 bits can speed some programs by 2% or more. Note that some mathematical libraries assume that extended-precision (80-bit) floating-point operations are enabled by default; routines in such libraries could suffer significant loss of accuracy, typically through so-called &#8220;catastrophic cancellation&#8221;, when this option is used to set the precision to less than extended precision.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-mstackrealign</CODE> 
<DD><A name=index-mstackrealign-1604></A>Realign the stack at entry. On the Intel x86, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mstackrealign</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option generates an alternate prologue and epilogue that realigns the run-time stack if necessary. This supports mixing legacy codes that keep 4-byte stack alignment with modern codes that keep 16-byte stack alignment for SSE compatibility. See also the attribute<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>force_align_arg_pointer</CODE>, applicable to individual functions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-mpreferred-stack-boundary=</CODE><VAR>num</VAR> 
<DD><A name=index-mpreferred-stack-boundary-1605></A>Attempt to keep the stack boundary aligned to a 2 raised to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>num</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>byte boundary. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mpreferred-stack-boundary</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not specified, the default is 4 (16 bytes or 128 bits). 
<P><STRONG>Warning:</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN>When generating code for the x86-64 architecture with SSE extensions disabled,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mpreferred-stack-boundary=3</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be used to keep the stack boundary aligned to 8 byte boundary. Since x86-64 ABI require 16 byte stack alignment, this is ABI incompatible and intended to be used in controlled environment where stack space is important limitation. This option will lead to wrong code when functions compiled with 16 byte stack alignment (such as functions from a standard library) are called with misaligned stack. In this case, SSE instructions may lead to misaligned memory access traps. In addition, variable arguments will be handled incorrectly for 16 byte aligned objects (including x87 long double and __int128), leading to wrong results. You must build all modules with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mpreferred-stack-boundary=3</SPAN></SAMP>, including any libraries. This includes the system libraries and startup modules.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-mincoming-stack-boundary=</CODE><VAR>num</VAR> 
<DD><A name=index-mincoming-stack-boundary-1606></A>Assume the incoming stack is aligned to a 2 raised to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>num</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>byte boundary. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mincoming-stack-boundary</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not specified, the one specified by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mpreferred-stack-boundary</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used. 
<P>On Pentium and Pentium Pro,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>double</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long double</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>values should be aligned to an 8-byte boundary (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-malign-double</SPAN></SAMP>) or suffer significant run time performance penalties. On Pentium III, the Streaming SIMD Extension (SSE) data type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__m128</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may not work properly if it is not 16-byte aligned.</P>
<P>To ensure proper alignment of this values on the stack, the stack boundary must be as aligned as that required by any value stored on the stack. Further, every function must be generated such that it keeps the stack aligned. Thus calling a function compiled with a higher preferred stack boundary from a function compiled with a lower preferred stack boundary most likely misaligns the stack. It is recommended that libraries that use callbacks always use the default setting.</P>
<P>This extra alignment does consume extra stack space, and generally increases code size. Code that is sensitive to stack space usage, such as embedded systems and operating system kernels, may want to reduce the preferred alignment to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mpreferred-stack-boundary=2</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-mmmx</CODE> 
<DT><CODE>-mno-mmx</CODE> 
<DT><CODE>-msse</CODE> 
<DT><CODE>-mno-sse</CODE> 
<DT><CODE>-msse2</CODE> 
<DT><CODE>-mno-sse2</CODE> 
<DT><CODE>-msse3</CODE> 
<DT><CODE>-mno-sse3</CODE> 
<DT><CODE>-mssse3</CODE> 
<DT><CODE>-mno-ssse3</CODE> 
<DT><CODE>-msse4.1</CODE> 
<DT><CODE>-mno-sse4.1</CODE> 
<DT><CODE>-msse4.2</CODE> 
<DT><CODE>-mno-sse4.2</CODE> 
<DT><CODE>-msse4</CODE> 
<DT><CODE>-mno-sse4</CODE> 
<DT><CODE>-mavx</CODE> 
<DT><CODE>-mno-avx</CODE> 
<DT><CODE>-mavx2</CODE> 
<DT><CODE>-mno-avx2</CODE> 
<DT><CODE>-mavx512f</CODE> 
<DT><CODE>-mno-avx512f</CODE> 
<DT><CODE>-mavx512pf</CODE> 
<DT><CODE>-mno-avx512pf</CODE> 
<DT><CODE>-mavx512er</CODE> 
<DT><CODE>-mno-avx512er</CODE> 
<DT><CODE>-mavx512cd</CODE> 
<DT><CODE>-mno-avx512cd</CODE> 
<DT><CODE>-msha</CODE> 
<DT><CODE>-mno-sha</CODE> 
<DT><CODE>-maes</CODE> 
<DT><CODE>-mno-aes</CODE> 
<DT><CODE>-mpclmul</CODE> 
<DT><CODE>-mno-pclmul</CODE> 
<DT><CODE>-mfsgsbase</CODE> 
<DT><CODE>-mno-fsgsbase</CODE> 
<DT><CODE>-mrdrnd</CODE> 
<DT><CODE>-mno-rdrnd</CODE> 
<DT><CODE>-mf16c</CODE> 
<DT><CODE>-mno-f16c</CODE> 
<DT><CODE>-mfma</CODE> 
<DT><CODE>-mno-fma</CODE> 
<DT><CODE>-mprefetchwt1</CODE> 
<DT><CODE>-mno-prefetchwt1</CODE> 
<DT><CODE>-msse4a</CODE> 
<DT><CODE>-mno-sse4a</CODE> 
<DT><CODE>-mfma4</CODE> 
<DT><CODE>-mno-fma4</CODE> 
<DT><CODE>-mxop</CODE> 
<DT><CODE>-mno-xop</CODE> 
<DT><CODE>-mlwp</CODE> 
<DT><CODE>-mno-lwp</CODE> 
<DT><CODE>-m3dnow</CODE> 
<DT><CODE>-mno-3dnow</CODE> 
<DT><CODE>-mpopcnt</CODE> 
<DT><CODE>-mno-popcnt</CODE> 
<DT><CODE>-mabm</CODE> 
<DT><CODE>-mno-abm</CODE> 
<DT><CODE>-mbmi</CODE> 
<DT><CODE>-mbmi2</CODE> 
<DT><CODE>-mno-bmi</CODE> 
<DT><CODE>-mno-bmi2</CODE> 
<DT><CODE>-mlzcnt</CODE> 
<DT><CODE>-mno-lzcnt</CODE> 
<DT><CODE>-mfxsr</CODE> 
<DT><CODE>-mxsave</CODE> 
<DT><CODE>-mxsaveopt</CODE> 
<DT><CODE>-mrtm</CODE> 
<DT><CODE>-mtbm</CODE> 
<DT><CODE>-mno-tbm</CODE> 
<DD><A name=index-mmmx-1607></A><A name=index-mno-mmx-1608></A><A name=index-msse-1609></A><A name=index-mno-sse-1610></A><A name=index-m3dnow-1611></A><A name=index-mno-3dnow-1612></A>These switches enable or disable the use of instructions in the MMX, SSE, SSE2, SSE3, SSSE3, SSE4.1, AVX, AVX2, AVX512F, AVX512PF, AVX512ER, AVX512CD, SHA, AES, PCLMUL, FSGSBASE, RDRND, F16C, FMA, SSE4A, FMA4, XOP, LWP, ABM, BMI, BMI2, FXSR, XSAVE, XSAVEOPT, LZCNT, RTM, or 3DNow! extended instruction sets. These extensions are also available as built-in functions: see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/X86-Built-in-Functions.html#X86-Built-in-Functions">X86 Built-in Functions</A>, for details of the functions enabled and disabled by these switches. 
<P>To generate SSE/SSE2 instructions automatically from floating-point code (as opposed to 387 instructions), see<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mfpmath=sse</SPAN></SAMP>.</P>
<P>GCC depresses SSEx instructions when<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mavx</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used. Instead, it generates new AVX instructions or AVX equivalence for all SSEx instructions when needed.</P>
<P>These options enable GCC to use these extended instructions in generated code, even without<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mfpmath=sse</SPAN></SAMP>. Applications that perform run-time CPU detection must compile separate files for each supported architecture, using the appropriate flags. In particular, the file containing the CPU detection code should be compiled without these options.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-mdump-tune-features</CODE> 
<DD><A name=index-mdump-tune-features-1613></A>This option instructs GCC to dump the names of the x86 performance tuning features and default settings. The names can be used in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mtune-ctrl=</SPAN><VAR>feature-list</VAR></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-mtune-ctrl=</CODE><VAR>feature-list</VAR> 
<DD><A name=index-mtune-ctrl_003d_0040var_007bfeature-list_007d-1614></A>This option is used to do fine grain control of x86 code generation features.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>feature-list</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a comma separated list of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>feature</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>names. See also<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mdump-tune-features</SPAN></SAMP>. When specified, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>feature</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>will be turned on if it is not preceded with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>^</CODE>, otherwise, it will be turned off.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mtune-ctrl=</SPAN><VAR>feature-list</VAR></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is intended to be used by GCC developers. Using it may lead to code paths not covered by testing and can potentially result in compiler ICEs or runtime errors.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-mno-default</CODE> 
<DD><A name=index-mno-default-1615></A>This option instructs GCC to turn off all tunable features. See also<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mtune-ctrl=</SPAN><VAR>feature-list</VAR></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mdump-tune-features</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-mcld</CODE> 
<DD><A name=index-mcld-1616></A>This option instructs GCC to emit a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cld</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction in the prologue of functions that use string instructions. String instructions depend on the DF flag to select between autoincrement or autodecrement mode. While the ABI specifies the DF flag to be cleared on function entry, some operating systems violate this specification by not clearing the DF flag in their exception dispatchers. The exception handler can be invoked with the DF flag set, which leads to wrong direction mode when string instructions are used. This option can be enabled by default on 32-bit x86 targets by configuring GCC with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>--enable-cld</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>configure option. Generation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cld</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions can be suppressed with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-cld</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>compiler option in this case.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-mvzeroupper</CODE> 
<DD><A name=index-mvzeroupper-1617></A>This option instructs GCC to emit a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vzeroupper</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction before a transfer of control flow out of the function to minimize the AVX to SSE transition penalty as well as remove unnecessary<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>zeroupper</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>intrinsics.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-mprefer-avx128</CODE> 
<DD><A name=index-mprefer-avx128-1618></A>This option instructs GCC to use 128-bit AVX instructions instead of 256-bit AVX instructions in the auto-vectorizer.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-mcx16</CODE> 
<DD><A name=index-mcx16-1619></A>This option enables GCC to generate<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>CMPXCHG16B</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>CMPXCHG16B</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>allows for atomic operations on 128-bit double quadword (or oword) data types. This is useful for high-resolution counters that can be updated by multiple processors (or cores). This instruction is generated as part of atomic built-in functions: see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/_005f_005fsync-Builtins.html#g_t_005f_005fsync-Builtins">__sync Builtins</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/_005f_005fatomic-Builtins.html#g_t_005f_005fatomic-Builtins">__atomic Builtins</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>for details.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-msahf</CODE> 
<DD><A name=index-msahf-1620></A>This option enables generation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SAHF</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions in 64-bit code. Early Intel Pentium 4 CPUs with Intel 64 support, prior to the introduction of Pentium 4 G1 step in December 2005, lacked the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>LAHF</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SAHF</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions which were supported by AMD64. These are load and store instructions, respectively, for certain status flags. In 64-bit mode, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SAHF</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction is used to optimize<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fmod</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>drem</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>remainder</CODE>built-in functions; see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Other-Builtins.html#Other-Builtins">Other Builtins</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>for details.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-mmovbe</CODE> 
<DD><A name=index-mmovbe-1621></A>This option enables use of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>movbe</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction to implement<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_bswap32</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_bswap64</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-mcrc32</CODE> 
<DD><A name=index-mcrc32-1622></A>This option enables built-in functions<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_ia32_crc32qi</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_ia32_crc32hi</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_ia32_crc32si</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_ia32_crc32di</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to generate the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>crc32</CODE>machine instruction.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-mrecip</CODE> 
<DD><A name=index-mrecip-1623></A>This option enables use of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>RCPSS</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>RSQRTSS</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions (and their vectorized variants<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>RCPPS</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>RSQRTPS</CODE>) with an additional Newton-Raphson step to increase precision instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>DIVSS</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SQRTSS</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(and their vectorized variants) for single-precision floating-point arguments. These instructions are generated only when<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-funsafe-math-optimizations</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is enabled together with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-finite-math-only</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fno-trapping-math</SPAN></SAMP>. Note that while the throughput of the sequence is higher than the throughput of the non-reciprocal instruction, the precision of the sequence can be decreased by up to 2 ulp (i.e. the inverse of 1.0 equals 0.99999994). 
<P>Note that GCC implements<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>1.0f/sqrtf(</CODE><VAR>x</VAR><CODE>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in terms of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>RSQRTSS</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>RSQRTPS</CODE>) already with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ffast-math</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>(or the above option combination), and doesn't need<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mrecip</SPAN></SAMP>.</P>
<P>Also note that GCC emits the above sequence with additional Newton-Raphson step for vectorized single-float division and vectorized<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sqrtf(</CODE><VAR>x</VAR><CODE>)</CODE>already with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ffast-math</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>(or the above option combination), and doesn't need<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mrecip</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-mrecip=</CODE><VAR>opt</VAR> 
<DD><A name=index-mrecip_003dopt-1624></A>This option controls which reciprocal estimate instructions may be used.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>opt</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a comma-separated list of options, which may be preceded by a &#8216;<SAMP><SPAN class=samp>!</SPAN></SAMP>&#8217; to invert the option: 
<DL>
<DT>&#8216;<SAMP><SPAN class=samp>all</SPAN></SAMP>&#8217; 
<DD>Enable all estimate instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>default</SPAN></SAMP>&#8217; 
<DD>Enable the default instructions, equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mrecip</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>none</SPAN></SAMP>&#8217; 
<DD>Disable all estimate instructions, equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-recip</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>div</SPAN></SAMP>&#8217; 
<DD>Enable the approximation for scalar division.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>vec-div</SPAN></SAMP>&#8217; 
<DD>Enable the approximation for vectorized division.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>sqrt</SPAN></SAMP>&#8217; 
<DD>Enable the approximation for scalar square root.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>vec-sqrt</SPAN></SAMP>&#8217; 
<DD>Enable the approximation for vectorized square root.</DD></DL>
<P>So, for example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mrecip=all,!sqrt</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>enables all of the reciprocal approximations, except for square root.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-mveclibabi=</CODE><VAR>type</VAR> 
<DD><A name=index-mveclibabi-1625></A>Specifies the ABI type to use for vectorizing intrinsics using an external library. Supported values for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are &#8216;<SAMP><SPAN class=samp>svml</SPAN></SAMP>&#8217; for the Intel short vector math library and &#8216;<SAMP><SPAN class=samp>acml</SPAN></SAMP>&#8217; for the AMD math core library. To use this option, both<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ftree-vectorize</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-funsafe-math-optimizations</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>have to be enabled, and an SVML or ACML ABI-compatible library must be specified at link time. 
<P>GCC currently emits calls to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vmldExp2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vmldLn2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vmldLog102</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vmldLog102</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vmldPow2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vmldTanh2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vmldTan2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vmldAtan2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vmldAtanh2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vmldCbrt2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vmldSinh2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vmldSin2</CODE>,<CODE>vmldAsinh2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vmldAsin2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vmldCosh2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vmldCos2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vmldAcosh2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vmldAcos2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vmlsExp4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vmlsLn4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vmlsLog104</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vmlsLog104</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vmlsPow4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vmlsTanh4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vmlsTan4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vmlsAtan4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vmlsAtanh4</CODE>,<CODE>vmlsCbrt4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vmlsSinh4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vmlsSin4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vmlsAsinh4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vmlsAsin4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vmlsCosh4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vmlsCos4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vmlsAcosh4</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vmlsAcos4</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for corresponding function type when<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mveclibabi=svml</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__vrd2_sin</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__vrd2_cos</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__vrd2_exp</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__vrd2_log</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__vrd2_log2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__vrd2_log10</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__vrs4_sinf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__vrs4_cosf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__vrs4_expf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__vrs4_logf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__vrs4_log2f</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__vrs4_log10f</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<CODE>__vrs4_powf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for the corresponding function type when<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mveclibabi=acml</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-mabi=</CODE><VAR>name</VAR> 
<DD><A name=index-mabi-1626></A>Generate code for the specified calling convention. Permissible values are &#8216;<SAMP><SPAN class=samp>sysv</SPAN></SAMP>&#8217; for the ABI used on GNU/Linux and other systems, and &#8216;<SAMP><SPAN class=samp>ms</SPAN></SAMP>&#8217; for the Microsoft ABI. The default is to use the Microsoft ABI when targeting Microsoft Windows and the SysV ABI on all other systems. You can control this behavior for a specific function by using the function attribute &#8216;<SAMP><SPAN class=samp>ms_abi</SPAN></SAMP>&#8217;/&#8216;<SAMP><SPAN class=samp>sysv_abi</SPAN></SAMP>&#8217;. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Function-Attributes.html#Function-Attributes">Function Attributes</A>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-mtls-dialect=</CODE><VAR>type</VAR> 
<DD><A name=index-mtls-dialect-1627></A>Generate code to access thread-local storage using the &#8216;<SAMP><SPAN class=samp>gnu</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>gnu2</SPAN></SAMP>&#8217; conventions. &#8216;<SAMP><SPAN class=samp>gnu</SPAN></SAMP>&#8217; is the conservative default; &#8216;<SAMP><SPAN class=samp>gnu2</SPAN></SAMP>&#8217; is more efficient, but it may add compile- and run-time requirements that cannot be satisfied on all systems.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-mpush-args</CODE> 
<DT><CODE>-mno-push-args</CODE> 
<DD><A name=index-mpush-args-1628></A><A name=index-mno-push-args-1629></A>Use PUSH operations to store outgoing parameters. This method is shorter and usually equally fast as method using SUB/MOV operations and is enabled by default. In some cases disabling it may improve performance because of improved scheduling and reduced dependencies.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-maccumulate-outgoing-args</CODE> 
<DD><A name=index-maccumulate-outgoing-args-1630></A>If enabled, the maximum amount of space required for outgoing arguments is computed in the function prologue. This is faster on most modern CPUs because of reduced dependencies, improved scheduling and reduced stack usage when the preferred stack boundary is not equal to 2. The drawback is a notable increase in code size. This switch implies<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-push-args</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-mthreads</CODE> 
<DD><A name=index-mthreads-1631></A>Support thread-safe exception handling on MinGW. Programs that rely on thread-safe exception handling must compile and link all code with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mthreads</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option. When compiling,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mthreads</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>defines<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-D_MT</CODE>; when linking, it links in a special thread helper library<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-lmingwthrd</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>which cleans up per-thread exception-handling data.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-mno-align-stringops</CODE> 
<DD><A name=index-mno-align-stringops-1632></A>Do not align the destination of inlined string operations. This switch reduces code size and improves performance in case the destination is already aligned, but GCC doesn't know about it.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-minline-all-stringops</CODE> 
<DD><A name=index-minline-all-stringops-1633></A>By default GCC inlines string operations only when the destination is known to be aligned to least a 4-byte boundary. This enables more inlining and increases code size, but may improve performance of code that depends on fast<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>memcpy</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strlen</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>memset</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for short lengths.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-minline-stringops-dynamically</CODE> 
<DD><A name=index-minline-stringops-dynamically-1634></A>For string operations of unknown size, use run-time checks with inline code for small blocks and a library call for large blocks.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-mstringop-strategy=</CODE><VAR>alg</VAR> 
<DD><A name=index-mstringop-strategy_003d_0040var_007balg_007d-1635></A>Override the internal decision heuristic for the particular algorithm to use for inlining string operations. The allowed values for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alg</VAR>are: 
<DL>
<DT>&#8216;<SAMP><SPAN class=samp>rep_byte</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>rep_4byte</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>rep_8byte</SPAN></SAMP>&#8217; 
<DD>Expand using i386<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>rep</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>prefix of the specified size.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>byte_loop</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>loop</SPAN></SAMP>&#8217; 
<DT>&#8216;<SAMP><SPAN class=samp>unrolled_loop</SPAN></SAMP>&#8217; 
<DD>Expand into an inline loop.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT>&#8216;<SAMP><SPAN class=samp>libcall</SPAN></SAMP>&#8217; 
<DD>Always use a library call.</DD></DL><BR>
<DT><CODE>-mmemcpy-strategy=</CODE><VAR>strategy</VAR> 
<DD><A name=index-mmemcpy-strategy_003d_0040var_007bstrategy_007d-1636></A>Override the internal decision heuristic to decide if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_memcpy</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be inlined and what inline algorithm to use when the expected size of the copy operation is known.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>strategy</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a comma-separated list of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alg</VAR>:<VAR>max_size</VAR>:<VAR>dest_align</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>triplets.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alg</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mstringop-strategy</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>max_size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>specifies the max byte size with which inline algorithm<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alg</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is allowed. For the last triplet, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>max_size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-1</CODE>. The<VAR>max_size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the triplets in the list must be specified in increasing order. The minimal byte size for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>alg</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for the first triplet and<VAR>max_size</VAR><CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>+ 1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>of the preceding range.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-mmemset-strategy=</CODE><VAR>strategy</VAR> 
<DD><A name=index-mmemset-strategy_003d_0040var_007bstrategy_007d-1637></A>The option is similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mmemcpy-strategy=</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>except that it is to control<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_memset</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>expansion.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-momit-leaf-frame-pointer</CODE> 
<DD><A name=index-momit-leaf-frame-pointer-1638></A>Don't keep the frame pointer in a register for leaf functions. This avoids the instructions to save, set up, and restore frame pointers and makes an extra register available in leaf functions. The option<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fomit-leaf-frame-pointer</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>removes the frame pointer for leaf functions, which might make debugging harder.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-mtls-direct-seg-refs</CODE> 
<DT><CODE>-mno-tls-direct-seg-refs</CODE> 
<DD><A name=index-mtls-direct-seg-refs-1639></A>Controls whether TLS variables may be accessed with offsets from the TLS segment register (<CODE>%gs</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for 32-bit,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%fs</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for 64-bit), or whether the thread base pointer must be added. Whether or not this is valid depends on the operating system, and whether it maps the segment to cover the entire TLS area. 
<P>For systems that use the GNU C Library, the default is on.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-msse2avx</CODE> 
<DT><CODE>-mno-sse2avx</CODE> 
<DD><A name=index-msse2avx-1640></A>Specify that the assembler should encode SSE instructions with VEX prefix. The option<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mavx</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>turns this on by default.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-mfentry</CODE> 
<DT><CODE>-mno-fentry</CODE> 
<DD><A name=index-mfentry-1641></A>If profiling is active (<SAMP><SPAN class=option>-pg</SPAN></SAMP>), put the profiling counter call before the prologue. Note: On x86 architectures the attribute<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ms_hook_prologue</CODE>isn't possible at the moment for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mfentry</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-pg</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-m8bit-idiv</CODE> 
<DT><CODE>-mno-8bit-idiv</CODE> 
<DD><A name=index-g_t8bit-idiv-1642></A>On some processors, like Intel Atom, 8-bit unsigned integer divide is much faster than 32-bit/64-bit integer divide. This option generates a run-time check. If both dividend and divisor are within range of 0 to 255, 8-bit unsigned integer divide is used instead of 32-bit/64-bit integer divide.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-mavx256-split-unaligned-load</CODE> 
<DT><CODE>-mavx256-split-unaligned-store</CODE> 
<DD><A name=index-avx256-split-unaligned-load-1643></A><A name=index-avx256-split-unaligned-store-1644></A>Split 32-byte AVX unaligned load and store.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-mstack-protector-guard=</CODE><VAR>guard</VAR> 
<DD><A name=index-mstack-protector-guard_003d_0040var_007bguard_007d-1645></A>Generate stack protection code using canary at<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>guard</VAR>. Supported locations are &#8216;<SAMP><SPAN class=samp>global</SPAN></SAMP>&#8217; for global canary or &#8216;<SAMP><SPAN class=samp>tls</SPAN></SAMP>&#8217; for per-thread canary in the TLS block (the default). This option has effect only when<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fstack-protector</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fstack-protector-all</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified.</DD></DL>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">These &#8216;<SAMP><SPAN class=samp>-m</SPAN></SAMP>&#8217; switches are supported in addition to the above on x86-64 processors in 64-bit environments.</P>
<DL style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>-m32</CODE> 
<DT><CODE>-m64</CODE> 
<DT><CODE>-mx32</CODE> 
<DT><CODE>-m16</CODE> 
<DD><A name=index-m32-1646></A><A name=index-m64-1647></A><A name=index-mx32-1648></A><A name=index-m16-1649></A>Generate code for a 16-bit, 32-bit or 64-bit environment. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-m32</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option sets<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long</CODE>, and pointer types to 32 bits, and generates code that runs on any i386 system. 
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-m64</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option sets<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to 32 bits and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and pointer types to 64 bits, and generates code for the x86-64 architecture. For Darwin only the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-m64</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option also turns off the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fno-pic</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mdynamic-no-pic</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mx32</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option sets<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long</CODE>, and pointer types to 32 bits, and generates code for the x86-64 architecture.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-m16</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is the same as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-m32</SPAN></SAMP>, except for that it outputs the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.code16gcc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>assembly directive at the beginning of the assembly output so that the binary can run in 16-bit mode.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P>
<DT><CODE>-mno-red-zone</CODE> 
<DD><A name=index-mno-red-zone-1650></A>Do not use a so-called &#8220;red zone&#8221; for x86-64 code. The red zone is mandated by the x86-64 ABI; it is a 128-byte area beyond the location of the stack pointer that is not modified by signal or interrupt handlers and therefore can be used for temporary data without adjusting the stack pointer. The flag<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-red-zone</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>disables this red zone.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-mcmodel=small</CODE> 
<DD><A name=index-mcmodel_003dsmall-1651></A>Generate code for the small code model: the program and its symbols must be linked in the lower 2 GB of the address space. Pointers are 64 bits. Programs can be statically or dynamically linked. This is the default code model.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-mcmodel=kernel</CODE> 
<DD><A name=index-mcmodel_003dkernel-1652></A>Generate code for the kernel code model. The kernel runs in the negative 2 GB of the address space. This model has to be used for Linux kernel code.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-mcmodel=medium</CODE> 
<DD><A name=index-mcmodel_003dmedium-1653></A>Generate code for the medium model: the program is linked in the lower 2 GB of the address space. Small symbols are also placed there. Symbols with sizes larger than<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mlarge-data-threshold</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>are put into large data or BSS sections and can be located above 2GB. Programs can be statically or dynamically linked.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-mcmodel=large</CODE> 
<DD><A name=index-mcmodel_003dlarge-1654></A>Generate code for the large model. This model makes no assumptions about addresses and sizes of sections.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-maddress-mode=long</CODE> 
<DD><A name=index-maddress-mode_003dlong-1655></A>Generate code for long address mode. This is only supported for 64-bit and x32 environments. It is the default address mode for 64-bit environments.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>
<DT><CODE>-maddress-mode=short</CODE> 
<DD><A name=index-maddress-mode_003dshort-1656></A>Generate code for short address mode. This is only supported for 32-bit and x32 environments. It is the default address mode for 32-bit and x32 environments.</DD></DL>