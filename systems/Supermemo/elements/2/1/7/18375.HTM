<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>3.17.19 IA-64 Options</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-IA-64-Options-1668></A>These are the &#8216;<SAMP><SPAN class=samp>-m</SPAN></SAMP>&#8217; options defined for the Intel IA-64 architecture.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>-mbig-endian</CODE></DT>
<DD><A name=index-mbig-endian-1669></A>Generate code for a big-endian target. This is the default for HP-UX.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mlittle-endian</CODE></DT>
<DD><A name=index-mlittle-endian-1670></A>Generate code for a little-endian target. This is the default for AIX5 and GNU/Linux.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mgnu-as</CODE></DT>
<DT><CODE>-mno-gnu-as</CODE></DT>
<DD><A name=index-mgnu-as-1671></A><A name=index-mno-gnu-as-1672></A>Generate (or don't) code for the GNU assembler. This is the default.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mgnu-ld</CODE></DT>
<DT><CODE>-mno-gnu-ld</CODE></DT>
<DD><A name=index-mgnu-ld-1673></A><A name=index-mno-gnu-ld-1674></A>Generate (or don't) code for the GNU linker. This is the default.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mno-pic</CODE></DT>
<DD><A name=index-mno-pic-1675></A>Generate code that does not use a global pointer register. The result is not position independent code, and violates the IA-64 ABI.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mvolatile-asm-stop</CODE></DT>
<DT><CODE>-mno-volatile-asm-stop</CODE></DT>
<DD><A name=index-mvolatile-asm-stop-1676></A><A name=index-mno-volatile-asm-stop-1677></A>Generate (or don't) a stop bit immediately before and after volatile asm statements.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mregister-names</CODE></DT>
<DT><CODE>-mno-register-names</CODE></DT>
<DD><A name=index-mregister-names-1678></A><A name=index-mno-register-names-1679></A>Generate (or don't) &#8216;<SAMP><SPAN class=samp>in</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>loc</SPAN></SAMP>&#8217;, and &#8216;<SAMP><SPAN class=samp>out</SPAN></SAMP>&#8217; register names for the stacked registers. This may make assembler output more readable.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mno-sdata</CODE></DT>
<DT><CODE>-msdata</CODE></DT>
<DD><A name=index-mno-sdata-1680></A><A name=index-msdata-1681></A>Disable (or enable) optimizations that use the small data section. This may be useful for working around optimizer bugs.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mconstant-gp</CODE></DT>
<DD><A name=index-mconstant-gp-1682></A>Generate code that uses a single constant global pointer value. This is useful when compiling kernel code.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mauto-pic</CODE></DT>
<DD><A name=index-mauto-pic-1683></A>Generate code that is self-relocatable. This implies<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mconstant-gp</SPAN></SAMP>. This is useful when compiling firmware code.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-minline-float-divide-min-latency</CODE></DT>
<DD><A name=index-minline-float-divide-min-latency-1684></A>Generate code for inline divides of floating-point values using the minimum latency algorithm.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-minline-float-divide-max-throughput</CODE></DT>
<DD><A name=index-minline-float-divide-max-throughput-1685></A>Generate code for inline divides of floating-point values using the maximum throughput algorithm.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mno-inline-float-divide</CODE></DT>
<DD><A name=index-mno-inline-float-divide-1686></A>Do not generate inline code for divides of floating-point values.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-minline-int-divide-min-latency</CODE></DT>
<DD><A name=index-minline-int-divide-min-latency-1687></A>Generate code for inline divides of integer values using the minimum latency algorithm.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-minline-int-divide-max-throughput</CODE></DT>
<DD><A name=index-minline-int-divide-max-throughput-1688></A>Generate code for inline divides of integer values using the maximum throughput algorithm.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mno-inline-int-divide</CODE></DT>
<DD><A name=index-mno-inline-int-divide-1689></A>Do not generate inline code for divides of integer values.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-minline-sqrt-min-latency</CODE></DT>
<DD><A name=index-minline-sqrt-min-latency-1690></A>Generate code for inline square roots using the minimum latency algorithm.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-minline-sqrt-max-throughput</CODE></DT>
<DD><A name=index-minline-sqrt-max-throughput-1691></A>Generate code for inline square roots using the maximum throughput algorithm.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mno-inline-sqrt</CODE></DT>
<DD><A name=index-mno-inline-sqrt-1692></A>Do not generate inline code for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sqrt</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mfused-madd</CODE></DT>
<DT><CODE>-mno-fused-madd</CODE></DT>
<DD><A name=index-mfused-madd-1693></A><A name=index-mno-fused-madd-1694></A>Do (don't) generate code that uses the fused multiply/add or multiply/subtract instructions. The default is to use these instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mno-dwarf2-asm</CODE></DT>
<DT><CODE>-mdwarf2-asm</CODE></DT>
<DD><A name=index-mno-dwarf2-asm-1695></A><A name=index-mdwarf2-asm-1696></A>Don't (or do) generate assembler code for the DWARF 2 line number debugging info. This may be useful when not using the GNU assembler.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mearly-stop-bits</CODE></DT>
<DT><CODE>-mno-early-stop-bits</CODE></DT>
<DD><A name=index-mearly-stop-bits-1697></A><A name=index-mno-early-stop-bits-1698></A>Allow stop bits to be placed earlier than immediately preceding the instruction that triggered the stop bit. This can improve instruction scheduling, but does not always do so.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mfixed-range=</CODE><VAR>register-range</VAR></DT>
<DD><A name=index-mfixed-range-1699></A>Generate code treating the given register range as fixed registers. A fixed register is one that the register allocator cannot use. This is useful when compiling kernel code. A register range is specified as two registers separated by a dash. Multiple register ranges can be specified separated by a comma.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mtls-size=</CODE><VAR>tls-size</VAR></DT>
<DD><A name=index-mtls-size-1700></A>Specify bit size of immediate TLS offsets. Valid values are 14, 22, and 64.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mtune=</CODE><VAR>cpu-type</VAR></DT>
<DD><A name=index-mtune-1701></A>Tune the instruction scheduling for a particular CPU, Valid values are &#8216;<SAMP><SPAN class=samp>itanium</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>itanium1</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>merced</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>itanium2</SPAN></SAMP>&#8217;, and &#8216;<SAMP><SPAN class=samp>mckinley</SPAN></SAMP>&#8217;.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-milp32</CODE></DT>
<DT><CODE>-mlp64</CODE></DT>
<DD><A name=index-milp32-1702></A><A name=index-mlp64-1703></A>Generate code for a 32-bit or 64-bit environment. The 32-bit environment sets int, long and pointer to 32 bits. The 64-bit environment sets int to 32 bits and long and pointer to 64 bits. These are HP-UX specific flags.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mno-sched-br-data-spec</CODE></DT>
<DT><CODE>-msched-br-data-spec</CODE></DT>
<DD><A name=index-mno-sched-br-data-spec-1704></A><A name=index-msched-br-data-spec-1705></A>(Dis/En)able data speculative scheduling before reload. This results in generation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ld.a</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions and the corresponding check instructions (<CODE>ld.c</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>/<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>chk.a</CODE>). The default is 'disable'.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msched-ar-data-spec</CODE></DT>
<DT><CODE>-mno-sched-ar-data-spec</CODE></DT>
<DD><A name=index-msched-ar-data-spec-1706></A><A name=index-mno-sched-ar-data-spec-1707></A>(En/Dis)able data speculative scheduling after reload. This results in generation of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ld.a</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions and the corresponding check instructions (<CODE>ld.c</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>/<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>chk.a</CODE>). The default is 'enable'.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mno-sched-control-spec</CODE></DT>
<DT><CODE>-msched-control-spec</CODE></DT>
<DD><A name=index-mno-sched-control-spec-1708></A><A name=index-msched-control-spec-1709></A>(Dis/En)able control speculative scheduling. This feature is available only during region scheduling (i.e. before reload). This results in generation of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ld.s</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions and the corresponding check instructions<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>chk.s</CODE>. The default is 'disable'.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msched-br-in-data-spec</CODE></DT>
<DT><CODE>-mno-sched-br-in-data-spec</CODE></DT>
<DD><A name=index-msched-br-in-data-spec-1710></A><A name=index-mno-sched-br-in-data-spec-1711></A>(En/Dis)able speculative scheduling of the instructions that are dependent on the data speculative loads before reload. This is effective only with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-msched-br-data-spec</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>enabled. The default is 'enable'.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msched-ar-in-data-spec</CODE></DT>
<DT><CODE>-mno-sched-ar-in-data-spec</CODE></DT>
<DD><A name=index-msched-ar-in-data-spec-1712></A><A name=index-mno-sched-ar-in-data-spec-1713></A>(En/Dis)able speculative scheduling of the instructions that are dependent on the data speculative loads after reload. This is effective only with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-msched-ar-data-spec</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>enabled. The default is 'enable'.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msched-in-control-spec</CODE></DT>
<DT><CODE>-mno-sched-in-control-spec</CODE></DT>
<DD><A name=index-msched-in-control-spec-1714></A><A name=index-mno-sched-in-control-spec-1715></A>(En/Dis)able speculative scheduling of the instructions that are dependent on the control speculative loads. This is effective only with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-msched-control-spec</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>enabled. The default is 'enable'.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mno-sched-prefer-non-data-spec-insns</CODE></DT>
<DT><CODE>-msched-prefer-non-data-spec-insns</CODE></DT>
<DD><A name=index-mno-sched-prefer-non-data-spec-insns-1716></A><A name=index-msched-prefer-non-data-spec-insns-1717></A>If enabled, data-speculative instructions are chosen for schedule only if there are no other choices at the moment. This makes the use of the data speculation much more conservative. The default is 'disable'.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mno-sched-prefer-non-control-spec-insns</CODE></DT>
<DT><CODE>-msched-prefer-non-control-spec-insns</CODE></DT>
<DD><A name=index-mno-sched-prefer-non-control-spec-insns-1718></A><A name=index-msched-prefer-non-control-spec-insns-1719></A>If enabled, control-speculative instructions are chosen for schedule only if there are no other choices at the moment. This makes the use of the control speculation much more conservative. The default is 'disable'.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mno-sched-count-spec-in-critical-path</CODE></DT>
<DT><CODE>-msched-count-spec-in-critical-path</CODE></DT>
<DD><A name=index-mno-sched-count-spec-in-critical-path-1720></A><A name=index-msched-count-spec-in-critical-path-1721></A>If enabled, speculative dependencies are considered during computation of the instructions priorities. This makes the use of the speculation a bit more conservative. The default is 'disable'.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msched-spec-ldc</CODE></DT>
<DD><A name=index-msched-spec-ldc-1722></A>Use a simple data speculation check. This option is on by default.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msched-control-spec-ldc</CODE></DT>
<DD><A name=index-msched-spec-ldc-1723></A>Use a simple check for control speculation. This option is on by default.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msched-stop-bits-after-every-cycle</CODE></DT>
<DD><A name=index-msched-stop-bits-after-every-cycle-1724></A>Place a stop bit after every cycle when scheduling. This option is on by default.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msched-fp-mem-deps-zero-cost</CODE></DT>
<DD><A name=index-msched-fp-mem-deps-zero-cost-1725></A>Assume that floating-point stores and loads are not likely to cause a conflict when placed into the same instruction group. This option is disabled by default.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msel-sched-dont-check-control-spec</CODE></DT>
<DD><A name=index-msel-sched-dont-check-control-spec-1726></A>Generate checks for control speculation in selective scheduling. This flag is disabled by default.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msched-max-memory-insns=</CODE><VAR>max-insns</VAR></DT>
<DD><A name=index-msched-max-memory-insns-1727></A>Limit on the number of memory insns per instruction group, giving lower priority to subsequent memory insns attempting to schedule in the same instruction group. Frequently useful to prevent cache bank conflicts. The default value is 1.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msched-max-memory-insns-hard-limit</CODE></DT>
<DD><A name=index-msched-max-memory-insns-hard-limit-1728></A>Makes the limit specified by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>msched-max-memory-insns</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>a hard limit, disallowing more than that number in an instruction group. Otherwise, the limit is &#8220;soft&#8221;, meaning that non-memory operations are preferred when the limit is reached, but memory operations may still be scheduled.</DD></DL>