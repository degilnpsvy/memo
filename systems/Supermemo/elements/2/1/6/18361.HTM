<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>3.17.5 AVR Options</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-AVR-Options-1290></A>These options are defined for AVR implementations:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>-mmcu=</CODE><VAR>mcu</VAR></DT>
<DD><A name=index-mmcu-1291></A>Specify Atmel AVR instruction set architectures (ISA) or MCU type.
<P>The default for this option is&nbsp;<CODE>avr2</CODE>.</P>
<P>GCC supports the following AVR devices and ISAs:</P>
<DL>
<DT><CODE>avr2</CODE></DT>
<DD>&#8220;Classic&#8221; devices with up to 8&nbsp;KiB of program memory.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR><VAR>mcu</VAR>&nbsp;=<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>attiny22</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>attiny26</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>at90c8534</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>at90s2313</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>at90s2323</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>at90s2333</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>at90s2343</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>at90s4414</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>at90s4433</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>at90s4434</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>at90s8515</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>at90s8535</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>avr25</CODE></DT>
<DD>&#8220;Classic&#8221; devices with up to 8&nbsp;KiB of program memory and with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>MOVW</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR><VAR>mcu</VAR>&nbsp;=<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ata5272</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ata6289</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>attiny13</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>attiny13a</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>attiny2313</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>attiny2313a</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>attiny24</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>attiny24a</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>attiny25</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>attiny261</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>attiny261a</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>attiny43u</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>attiny4313</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>attiny44</CODE>,<CODE>attiny44a</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>attiny45</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>attiny461</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>attiny461a</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>attiny48</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>attiny84</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>attiny84a</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>attiny85</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>attiny861</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>attiny861a</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>attiny87</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>attiny88</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>at86rf401</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>avr3</CODE></DT>
<DD>&#8220;Classic&#8221; devices with 16&nbsp;KiB up to 64&nbsp;KiB of program memory.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR><VAR>mcu</VAR>&nbsp;=<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>at43usb355</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>at76c711</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>avr31</CODE></DT>
<DD>&#8220;Classic&#8221; devices with 128&nbsp;KiB of program memory.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR><VAR>mcu</VAR>&nbsp;=<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega103</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>at43usb320</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>avr35</CODE></DT>
<DD>&#8220;Classic&#8221; devices with 16&nbsp;KiB up to 64&nbsp;KiB of program memory and with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>MOVW</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR><VAR>mcu</VAR>&nbsp;=<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ata5505</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega16u2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega32u2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega8u2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>attiny1634</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>attiny167</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>at90usb162</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>at90usb82</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>avr4</CODE></DT>
<DD>&#8220;Enhanced&#8221; devices with up to 8&nbsp;KiB of program memory.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR><VAR>mcu</VAR>&nbsp;=<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ata6285</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ata6286</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega48</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega48a</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega48p</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega48pa</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega8</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega8a</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega8hva</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega8515</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega8535</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega88</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega88a</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega88p</CODE>,<CODE>atmega88pa</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>at90pwm1</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>at90pwm2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>at90pwm2b</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>at90pwm3</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>at90pwm3b</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>at90pwm81</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>avr5</CODE></DT>
<DD>&#8220;Enhanced&#8221; devices with 16&nbsp;KiB up to 64&nbsp;KiB of program memory.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR><VAR>mcu</VAR>&nbsp;=<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ata5790</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ata5790n</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ata5795</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega16</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega16a</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega16hva</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega16hva2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega16hvb</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega16hvbrevb</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega16m1</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega16u4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega161</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega162</CODE>,<CODE>atmega163</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega164a</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega164p</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega164pa</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega165</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega165a</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega165p</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega165pa</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega168</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega168a</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega168p</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega168pa</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega169</CODE>,<CODE>atmega169a</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega169p</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega169pa</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega26hvg</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega32</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega32a</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega32c1</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega32hvb</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega32hvbrevb</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega32m1</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega32u4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega32u6</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega323</CODE>,<CODE>atmega324a</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega324p</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega324pa</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega325</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega325a</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega325p</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega3250</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega3250a</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega3250p</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega3250pa</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega328</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega328p</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega329</CODE>,<CODE>atmega329a</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega329p</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega329pa</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega3290</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega3290a</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega3290p</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega3290pa</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega406</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega48hvf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega64</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega64a</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega64c1</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega64hve</CODE>,<CODE>atmega64m1</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega64rfa2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega64rfr2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega640</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega644</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega644a</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega644p</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega644pa</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega645</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega645a</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega645p</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega6450</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega6450a</CODE>,<CODE>atmega6450p</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega649</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega649a</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega649p</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega6490</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega6490a</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega6490p</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>at90can32</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>at90can64</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>at90pwm161</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>at90pwm216</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>at90pwm316</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>at90scr100</CODE>,<CODE>at90usb646</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>at90usb647</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>at94k</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>m3000</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>avr51</CODE></DT>
<DD>&#8220;Enhanced&#8221; devices with 128&nbsp;KiB of program memory.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR><VAR>mcu</VAR>&nbsp;=<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega128</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega128a</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega128rfa1</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega1280</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega1281</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega1284</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega1284p</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>at90can128</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>at90usb1286</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>at90usb1287</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>avr6</CODE></DT>
<DD>&#8220;Enhanced&#8221; devices with 3-byte PC, i.e. with more than 128&nbsp;KiB of program memory.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR><VAR>mcu</VAR>&nbsp;=<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega2560</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmega2561</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>avrxmega2</CODE></DT>
<DD>&#8220;XMEGA&#8221; devices with more than 8&nbsp;KiB and up to 64&nbsp;KiB of program memory.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR><VAR>mcu</VAR>&nbsp;=<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmxt112sl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmxt224</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmxt224e</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmxt336s</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atxmega16a4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atxmega16a4u</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atxmega16c4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atxmega16d4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atxmega32a4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atxmega32a4u</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atxmega32c4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atxmega32d4</CODE>,<CODE>atxmega32e5</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atxmega32x1</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>avrxmega4</CODE></DT>
<DD>&#8220;XMEGA&#8221; devices with more than 64&nbsp;KiB and up to 128&nbsp;KiB of program memory.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR><VAR>mcu</VAR>&nbsp;=<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atxmega64a3</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atxmega64a3u</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atxmega64a4u</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atxmega64b1</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atxmega64b3</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atxmega64c3</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atxmega64d3</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atxmega64d4</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>avrxmega5</CODE></DT>
<DD>&#8220;XMEGA&#8221; devices with more than 64&nbsp;KiB and up to 128&nbsp;KiB of program memory and more than 64&nbsp;KiB of RAM.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR><VAR>mcu</VAR>&nbsp;=<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atxmega64a1</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atxmega64a1u</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>avrxmega6</CODE></DT>
<DD>&#8220;XMEGA&#8221; devices with more than 128&nbsp;KiB of program memory.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR><VAR>mcu</VAR>&nbsp;=<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmxt540s</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atmxt540sreva</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atxmega128a3</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atxmega128a3u</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atxmega128b1</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atxmega128b3</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atxmega128c3</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atxmega128d3</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atxmega128d4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atxmega192a3</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atxmega192a3u</CODE>,<CODE>atxmega192c3</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atxmega192d3</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atxmega256a3</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atxmega256a3b</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atxmega256a3bu</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atxmega256a3u</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atxmega256c3</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atxmega256d3</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atxmega384c3</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atxmega384d3</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>avrxmega7</CODE></DT>
<DD>&#8220;XMEGA&#8221; devices with more than 128&nbsp;KiB of program memory and more than 64&nbsp;KiB of RAM.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR><VAR>mcu</VAR>&nbsp;=<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atxmega128a1</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atxmega128a1u</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atxmega128a4u</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>avr1</CODE></DT>
<DD>This ISA is implemented by the minimal AVR core and supported for assembler only.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR><VAR>mcu</VAR>&nbsp;=<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>attiny11</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>attiny12</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>attiny15</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>attiny28</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>at90s1200</CODE>.</DD></DL><BR></DD>
<DT><CODE>-maccumulate-args</CODE></DT>
<DD><A name=index-maccumulate-args-1292></A>Accumulate outgoing function arguments and acquire/release the needed stack space for outgoing function arguments once in function prologue/epilogue. Without this option, outgoing arguments are pushed before calling a function and popped afterwards.
<P>Popping the arguments after the function call can be expensive on AVR so that accumulating the stack space might lead to smaller executables because arguments need not to be removed from the stack after such a function call.</P>
<P>This option can lead to reduced code size for functions that perform several calls to functions that get their arguments on the stack like calls to printf-like functions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mbranch-cost=</CODE><VAR>cost</VAR></DT>
<DD><A name=index-mbranch-cost-1293></A>Set the branch costs for conditional branch instructions to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cost</VAR>. Reasonable values for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cost</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are small, non-negative integers. The default branch cost is 0.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mcall-prologues</CODE></DT>
<DD><A name=index-mcall-prologues-1294></A>Functions prologues/epilogues are expanded as calls to appropriate subroutines. Code size is smaller.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mint8</CODE></DT>
<DD><A name=index-mint8-1295></A>Assume<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to be 8-bit integer. This affects the sizes of all types: a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 1 byte, an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 1 byte, a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 2 bytes, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long long</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 4 bytes. Please note that this option does not conform to the C standards, but it results in smaller code size.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mno-interrupts</CODE></DT>
<DD><A name=index-mno-interrupts-1296></A>Generated code is not compatible with hardware interrupts. Code size is smaller.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mrelax</CODE></DT>
<DD><A name=index-mrelax-1297></A>Try to replace<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>CALL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>resp.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>JMP</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction by the shorter<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>RCALL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>resp.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>RJMP</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction if applicable. Setting<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-mrelax</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>just adds the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>--relax</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>option to the linker command line when the linker is called.
<P>Jump relaxing is performed by the linker because jump offsets are not known before code is located. Therefore, the assembler code generated by the compiler is the same, but the instructions in the executable may differ from instructions in the assembler code.</P>
<P>Relaxing must be turned on if linker stubs are needed, see the section on<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>EIND</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and linker stubs below.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-msp8</CODE></DT>
<DD><A name=index-msp8-1298></A>Treat the stack pointer register as an 8-bit register, i.e. assume the high byte of the stack pointer is zero. In general, you don't need to set this option by hand.
<P>This option is used internally by the compiler to select and build multilibs for architectures<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>avr2</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>avr25</CODE>. These architectures mix devices with and without<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SPH</CODE>. For any setting other than<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-mmcu=avr2</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-mmcu=avr25</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>the compiler driver will add or remove this option from the compiler proper's command line, because the compiler then knows if the device or architecture has an 8-bit stack pointer and thus no<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SPH</CODE>register or not.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mstrict-X</CODE></DT>
<DD><A name=index-mstrict-X-1299></A>Use address register<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>X</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in a way proposed by the hardware. This means that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>X</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is only used in indirect, post-increment or pre-decrement addressing.
<P>Without this option, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>X</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>register may be used in the same way as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>Y</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>Z</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>which then is emulated by additional instructions. For example, loading a value with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>X+const</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>addressing with a small non-negative<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>const &lt; 64</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to a register<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>Rn</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is performed as</P><PRE class=example>          adiw r26, const   ; X += const
          ld   <VAR>Rn</VAR>, X        ; <VAR>Rn</VAR> = *X
          sbiw r26, const   ; X -= const
</PRE><BR></DD>
<DT><CODE>-mtiny-stack</CODE></DT>
<DD><A name=index-mtiny-stack-1300></A>Only change the lower 8&nbsp;bits of the stack pointer.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-Waddr-space-convert</CODE></DT>
<DD><A name=index-Waddr-space-convert-1301></A>Warn about conversions between address spaces in the case where the resulting address space is not contained in the incoming address space.</DD></DL>
<H5 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>3.17.5.1<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>EIND</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and Devices with more than 128 Ki Bytes of Flash</H5>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-g_t_0040code_007bEIND_007d-1302></A>Pointers in the implementation are 16&nbsp;bits wide. The address of a function or label is represented as word address so that indirect jumps and calls can target any code address in the range of 64&nbsp;Ki words.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In order to facilitate indirect jump on devices with more than 128&nbsp;Ki bytes of program memory space, there is a special function register called<CODE>EIND</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that serves as most significant part of the target address when<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>EICALL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>EIJMP</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions are used.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Indirect jumps and calls on these devices are handled as follows by the compiler and are subject to some limitations:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>The compiler never sets<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>EIND</CODE>.</LI>
<LI>The compiler uses<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>EIND</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>implicitely in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>EICALL</CODE>/<CODE>EIJMP</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions or might read<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>EIND</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>directly in order to emulate an indirect call/jump by means of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>RET</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction.</LI>
<LI>The compiler assumes that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>EIND</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>never changes during the startup code or during the application. In particular,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>EIND</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not saved/restored in function or interrupt service routine prologue/epilogue.</LI>
<LI>For indirect calls to functions and computed goto, the linker generates<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>stubs</EM>. Stubs are jump pads sometimes also called<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>trampolines</EM>. Thus, the indirect call/jump jumps to such a stub. The stub contains a direct jump to the desired address.</LI>
<LI>Linker relaxation must be turned on so that the linker will generate the stubs correctly an all situaltion. See the compiler option<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-mrelax</CODE>and the linler option<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>--relax</CODE>. There are corner cases where the linker is supposed to generate stubs but aborts without relaxation and without a helpful error message.</LI>
<LI>The default linker script is arranged for code with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>EIND = 0</CODE>. If code is supposed to work for a setup with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>EIND != 0</CODE>, a custom linker script has to be used in order to place the sections whose name start with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.trampolines</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>into the segment where<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>EIND</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>points to.</LI>
<LI>The startup code from libgcc never sets<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>EIND</CODE>. Notice that startup code is a blend of code from libgcc and AVR-LibC. For the impact of AVR-LibC on<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>EIND</CODE>, see the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="http://nongnu.org/avr-libc/user-manual/">AVR-LibC&nbsp;user&nbsp;manual</A>.</LI>
<LI>It is legitimate for user-specific startup code to set up<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>EIND</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>early, for example by means of initialization code located in section<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.init3</CODE>. Such code runs prior to general startup code that initializes RAM and calls constructors, but after the bit of startup code from AVR-LibC that sets<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>EIND</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the segment where the vector table is located.<PRE class=example>          #include &lt;avr/io.h&gt;
          
          static void
          __attribute__((section(".init3"),naked,used,no_instrument_function))
          init3_set_eind (void)
          {
            __asm volatile ("ldi r24,pm_hh8(__trampolines_start)\n\t"
                            "out %i0,r24" :: "n" (&amp;EIND) : "r24","memory");
          }
</PRE>
<P class=noindent>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__trampolines_start</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>symbol is defined in the linker script.</P></LI>
<LI>Stubs are generated automatically by the linker if the following two conditions are met:
<UL>
<LI>The address of a label is taken by means of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gs</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>modifier (short for<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>generate stubs</EM>) like so:<PRE class=example>               LDI r24, lo8(gs(<VAR>func</VAR>))
               LDI r25, hi8(gs(<VAR>func</VAR>))
</PRE></LI>
<LI>The final location of that label is in a code segment<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>outside</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>the segment where the stubs are located.</LI></UL></LI>
<LI>The compiler emits such<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gs</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>modifiers for code labels in the following situations:
<UL>
<LI>Taking address of a function or code label.</LI>
<LI>Computed goto.</LI>
<LI>If prologue-save function is used, see<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mcall-prologues</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>command-line option.</LI>
<LI>Switch/case dispatch tables. If you do not want such dispatch tables you can specify the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fno-jump-tables</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>command-line option.</LI>
<LI>C and C++ constructors/destructors called during startup/shutdown.</LI>
<LI>If the tools hit a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gs()</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>modifier explained above.</LI></UL></LI>
<LI>Jumping to non-symbolic addresses like so is<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>not</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>supported:<PRE class=example>          int main (void)
          {
              /* Call function at word address 0x2 */
              return ((int(*)(void)) 0x2)();
          }
</PRE>
<P>Instead, a stub has to be set up, i.e. the function has to be called through a symbol (<CODE>func_4</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the example):</P><PRE class=example>          int main (void)
          {
              extern int func_4 (void);
          
              /* Call function at byte address 0x4 */
              return func_4();
          }
</PRE>
<P>and the application be linked with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-Wl,--defsym,func_4=0x4</CODE>. Alternatively,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>func_4</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be defined in the linker script.</P></LI></UL>
<H5 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>3.17.5.2 Handling of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>RAMPD</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>RAMPX</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>RAMPY</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>RAMPZ</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>Special Function Registers</H5>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-g_t_0040code_007bRAMPD_007d-1303></A><A name=index-g_t_0040code_007bRAMPX_007d-1304></A><A name=index-g_t_0040code_007bRAMPY_007d-1305></A><A name=index-g_t_0040code_007bRAMPZ_007d-1306></A>Some AVR devices support memories larger than the 64&nbsp;KiB range that can be accessed with 16-bit pointers. To access memory locations outside this 64&nbsp;KiB range, the contentent of a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>RAMP</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>register is used as high part of the address: The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>X</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>Y</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>Z</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>address register is concatenated with the<CODE>RAMPX</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>RAMPY</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>RAMPZ</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>special function register, respectively, to get a wide address. Similarly,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>RAMPD</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used together with direct addressing.</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>The startup code initializes the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>RAMP</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>special function registers with zero.</LI>
<LI>If a<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/AVR-Named-Address-Spaces.html#AVR-Named-Address-Spaces">named address space</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>other than generic or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__flash</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used, then<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>RAMPZ</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is set as needed before the operation.</LI>
<LI>If the device supports RAM larger than 64&nbsp;KiB and the compiler needs to change<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>RAMPZ</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to accomplish an operation,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>RAMPZ</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is reset to zero after the operation.</LI>
<LI>If the device comes with a specific<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>RAMP</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>register, the ISR prologue/epilogue saves/restores that SFR and initializes it with zero in case the ISR code might (implicitly) use it.</LI>
<LI>RAM larger than 64&nbsp;KiB is not supported by GCC for AVR targets. If you use inline assembler to read from locations outside the 16-bit address range and change one of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>RAMP</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>registers, you must reset it to zero after the access.</LI></UL>
<H5 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsubsection>3.17.5.3 AVR Built-in Macros</H5>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">GCC defines several built-in macros so that the user code can test for the presence or absence of features. Almost any of the following built-in macros are deduced from device capabilities and thus triggered by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-mmcu=</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>command-line option.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For even more AVR-specific built-in macros see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/AVR-Named-Address-Spaces.html#AVR-Named-Address-Spaces">AVR Named Address Spaces</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/AVR-Built-in-Functions.html#AVR-Built-in-Functions">AVR Built-in Functions</A>.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>__AVR_ARCH__</CODE></DT>
<DD>Build-in macro that resolves to a decimal number that identifies the architecture and depends on the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-mmcu=</CODE><VAR>mcu</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>option. Possible values are:
<P><CODE>2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>25</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>3</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>31</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>35</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>5</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>51</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>6</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>102</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>104</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>105</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>106</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>107</CODE></P>
<P>for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mcu</VAR>=<CODE>avr2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>avr25</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>avr3</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>avr31</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>avr35</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>avr4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>avr5</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>avr51</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>avr6</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>avrxmega2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>avrxmega4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>avrxmega5</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>avrxmega6</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>avrxmega7</CODE>, respectively. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>mcu</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>specifies a device, this built-in macro is set accordingly. For example, with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-mmcu=atmega8</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>the macro will be defined to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>4</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>__AVR_</CODE><VAR>Device</VAR><CODE>__</CODE></DT>
<DD>Setting<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-mmcu=</CODE><VAR>device</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>defines this built-in macro which reflects the device's name. For example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-mmcu=atmega8</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>defines the built-in macro<CODE>__AVR_ATmega8__</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-mmcu=attiny261a</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>defines<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__AVR_ATtiny261A__</CODE>, etc.
<P>The built-in macros' names follow the scheme<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__AVR_</CODE><VAR>Device</VAR><CODE>__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>Device</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the device name as from the AVR user manual. The difference between<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>Device</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the built-in macro and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>device</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-mmcu=</CODE><VAR>device</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is that the latter is always lowercase.</P>
<P>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>device</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not a device but only a core architecture like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>avr51</CODE>, this macro will not be defined.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>__AVR_XMEGA__</CODE></DT>
<DD>The device / architecture belongs to the XMEGA family of devices.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>__AVR_HAVE_ELPM__</CODE></DT>
<DD>The device has the the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ELPM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>__AVR_HAVE_ELPMX__</CODE></DT>
<DD>The device has the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ELPM R</CODE><VAR>n</VAR><CODE>,Z</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ELPM R</CODE><VAR>n</VAR><CODE>,Z+</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>__AVR_HAVE_MOVW__</CODE></DT>
<DD>The device has the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>MOVW</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction to perform 16-bit register-register moves.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>__AVR_HAVE_LPMX__</CODE></DT>
<DD>The device has the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>LPM R</CODE><VAR>n</VAR><CODE>,Z</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>LPM R</CODE><VAR>n</VAR><CODE>,Z+</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>__AVR_HAVE_MUL__</CODE></DT>
<DD>The device has a hardware multiplier.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>__AVR_HAVE_JMP_CALL__</CODE></DT>
<DD>The device has the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>JMP</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>CALL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions. This is the case for devices with at least 16&nbsp;KiB of program memory.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>__AVR_HAVE_EIJMP_EICALL__</CODE></DT>
<DT><CODE>__AVR_3_BYTE_PC__</CODE></DT>
<DD>The device has the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>EIJMP</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>EICALL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions. This is the case for devices with more than 128&nbsp;KiB of program memory. This also means that the program counter (PC) is 3&nbsp;bytes wide.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>__AVR_2_BYTE_PC__</CODE></DT>
<DD>The program counter (PC) is 2&nbsp;bytes wide. This is the case for devices with up to 128&nbsp;KiB of program memory.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>__AVR_HAVE_8BIT_SP__</CODE></DT>
<DT><CODE>__AVR_HAVE_16BIT_SP__</CODE></DT>
<DD>The stack pointer (SP) register is treated as 8-bit respectively 16-bit register by the compiler. The definition of these macros is affected by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-mtiny-stack</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>__AVR_HAVE_SPH__</CODE></DT>
<DT><CODE>__AVR_SP8__</CODE></DT>
<DD>The device has the SPH (high part of stack pointer) special function register or has an 8-bit stack pointer, respectively. The definition of these macros is affected by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-mmcu=</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and in the cases of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-mmcu=avr2</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-mmcu=avr25</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>also by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-msp8</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>__AVR_HAVE_RAMPD__</CODE></DT>
<DT><CODE>__AVR_HAVE_RAMPX__</CODE></DT>
<DT><CODE>__AVR_HAVE_RAMPY__</CODE></DT>
<DT><CODE>__AVR_HAVE_RAMPZ__</CODE></DT>
<DD>The device has the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>RAMPD</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>RAMPX</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>RAMPY</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>RAMPZ</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>special function register, respectively.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>__NO_INTERRUPTS__</CODE></DT>
<DD>This macro reflects the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-mno-interrupts</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>command line option.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>__AVR_ERRATA_SKIP__</CODE></DT>
<DT><CODE>__AVR_ERRATA_SKIP_JMP_CALL__</CODE></DT>
<DD>Some AVR devices (AT90S8515, ATmega103) must not skip 32-bit instructions because of a hardware erratum. Skip instructions are<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SBRS</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SBRC</CODE>,<CODE>SBIS</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SBIC</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>CPSE</CODE>. The second macro is only defined if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__AVR_HAVE_JMP_CALL__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is also set.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>__AVR_ISA_RMW__</CODE></DT>
<DD>The device has Read-Modify-Write instructions (XCH, LAC, LAS and LAT).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>__AVR_SFR_OFFSET__=</CODE><VAR>offset</VAR></DT>
<DD>Instructions that can address I/O special function registers directly like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>IN</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>OUT</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SBI</CODE>, etc. may use a different address as if addressed by an instruction to access RAM like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>LD</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>STS</CODE>. This offset depends on the device architecture and has to be subtracted from the RAM address in order to get the respective I/O&nbsp;address.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>__WITH_AVRLIBC__</CODE></DT>
<DD>The compiler is configured to be used together with AVR-Libc. See the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>--with-avrlibc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>configure option.</DD></DL>