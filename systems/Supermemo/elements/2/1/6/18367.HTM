<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>3.17.11 DEC Alpha Options</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">These &#8216;<SAMP><SPAN class=samp>-m</SPAN></SAMP>&#8217; options are defined for the DEC Alpha implementations:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>-mno-soft-float</CODE></DT>
<DT><CODE>-msoft-float</CODE></DT>
<DD><A name=index-mno-soft-float-1454></A><A name=index-msoft-float-1455></A>Use (do not use) the hardware floating-point instructions for floating-point operations. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-msoft-float</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified, functions in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libgcc.a</SPAN></SAMP>are used to perform floating-point operations. Unless they are replaced by routines that emulate the floating-point operations, or compiled in such a way as to call such emulations routines, these routines issue floating-point operations. If you are compiling for an Alpha without floating-point operations, you must ensure that the library is built so as not to call them.
<P>Note that Alpha implementations without floating-point operations are required to have floating-point registers.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mfp-reg</CODE></DT>
<DT><CODE>-mno-fp-regs</CODE></DT>
<DD><A name=index-mfp-reg-1456></A><A name=index-mno-fp-regs-1457></A>Generate code that uses (does not use) the floating-point register set.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-fp-regs</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>implies<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-msoft-float</SPAN></SAMP>. If the floating-point register set is not used, floating-point operands are passed in integer registers as if they were integers and floating-point results are passed in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$0</CODE>instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$f0</CODE>. This is a non-standard calling sequence, so any function with a floating-point argument or return value called by code compiled with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-fp-regs</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>must also be compiled with that option.
<P>A typical use of this option is building a kernel that does not use, and hence need not save and restore, any floating-point registers.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mieee</CODE></DT>
<DD><A name=index-mieee-1458></A>The Alpha architecture implements floating-point hardware optimized for maximum performance. It is mostly compliant with the IEEE floating-point standard. However, for full compliance, software assistance is required. This option generates code fully IEEE-compliant code<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>except</EM>that the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>inexact-flag</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not maintained (see below). If this option is turned on, the preprocessor macro<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_IEEE_FP</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is defined during compilation. The resulting code is less efficient but is able to correctly support denormalized numbers and exceptional IEEE values such as not-a-number and plus/minus infinity. Other Alpha compilers call this option<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ieee_with_no_inexact</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mieee-with-inexact</CODE></DT>
<DD><A name=index-mieee-with-inexact-1459></A>This is like<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mieee</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>except the generated code also maintains the IEEE<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>inexact-flag</VAR>. Turning on this option causes the generated code to implement fully-compliant IEEE math. In addition to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_IEEE_FP</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_IEEE_FP_EXACT</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is defined as a preprocessor macro. On some Alpha implementations the resulting code may execute significantly slower than the code generated by default. Since there is very little code that depends on the<VAR>inexact-flag</VAR>, you should normally not specify this option. Other Alpha compilers call this option<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ieee_with_inexact</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mfp-trap-mode=</CODE><VAR>trap-mode</VAR></DT>
<DD><A name=index-mfp-trap-mode-1460></A>This option controls what floating-point related traps are enabled. Other Alpha compilers call this option<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fptm<SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN><VAR>trap-mode</VAR></SAMP>. The trap mode can be set to one of four values:
<DL>
<DT>&#8216;<SAMP><SPAN class=samp>n</SPAN></SAMP>&#8217;</DT>
<DD>This is the default (normal) setting. The only traps that are enabled are the ones that cannot be disabled in software (e.g., division by zero trap).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>u</SPAN></SAMP>&#8217;</DT>
<DD>In addition to the traps enabled by &#8216;<SAMP><SPAN class=samp>n</SPAN></SAMP>&#8217;, underflow traps are enabled as well.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>su</SPAN></SAMP>&#8217;</DT>
<DD>Like &#8216;<SAMP><SPAN class=samp>u</SPAN></SAMP>&#8217;, but the instructions are marked to be safe for software completion (see Alpha architecture manual for details).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>sui</SPAN></SAMP>&#8217;</DT>
<DD>Like &#8216;<SAMP><SPAN class=samp>su</SPAN></SAMP>&#8217;, but inexact traps are enabled as well.</DD></DL><BR></DD>
<DT><CODE>-mfp-rounding-mode=</CODE><VAR>rounding-mode</VAR></DT>
<DD><A name=index-mfp-rounding-mode-1461></A>Selects the IEEE rounding mode. Other Alpha compilers call this option<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fprm<SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN><VAR>rounding-mode</VAR></SAMP>. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rounding-mode</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be one of:
<DL>
<DT>&#8216;<SAMP><SPAN class=samp>n</SPAN></SAMP>&#8217;</DT>
<DD>Normal IEEE rounding mode. Floating-point numbers are rounded towards the nearest machine number or towards the even machine number in case of a tie.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>m</SPAN></SAMP>&#8217;</DT>
<DD>Round towards minus infinity.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>c</SPAN></SAMP>&#8217;</DT>
<DD>Chopped rounding mode. Floating-point numbers are rounded towards zero.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>d</SPAN></SAMP>&#8217;</DT>
<DD>Dynamic rounding mode. A field in the floating-point control register (<VAR>fpcr</VAR>, see Alpha architecture reference manual) controls the rounding mode in effect. The C library initializes this register for rounding towards plus infinity. Thus, unless your program modifies the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>fpcr</VAR>, &#8216;<SAMP><SPAN class=samp>d</SPAN></SAMP>&#8217; corresponds to round towards plus infinity.</DD></DL><BR></DD>
<DT><CODE>-mtrap-precision=</CODE><VAR>trap-precision</VAR></DT>
<DD><A name=index-mtrap-precision-1462></A>In the Alpha architecture, floating-point traps are imprecise. This means without software assistance it is impossible to recover from a floating trap and program execution normally needs to be terminated. GCC can generate code that can assist operating system trap handlers in determining the exact location that caused a floating-point trap. Depending on the requirements of an application, different levels of precisions can be selected:
<DL>
<DT>&#8216;<SAMP><SPAN class=samp>p</SPAN></SAMP>&#8217;</DT>
<DD>Program precision. This option is the default and means a trap handler can only identify which program caused a floating-point exception.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>f</SPAN></SAMP>&#8217;</DT>
<DD>Function precision. The trap handler can determine the function that caused a floating-point exception.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>i</SPAN></SAMP>&#8217;</DT>
<DD>Instruction precision. The trap handler can determine the exact instruction that caused a floating-point exception.</DD></DL>
<P>Other Alpha compilers provide the equivalent options called<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-scope_safe</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-resumption_safe</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mieee-conformant</CODE></DT>
<DD><A name=index-mieee-conformant-1463></A>This option marks the generated code as IEEE conformant. You must not use this option unless you also specify<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mtrap-precision=i</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and either<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mfp-trap-mode=su</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mfp-trap-mode=sui</SPAN></SAMP>. Its only effect is to emit the line &#8216;<SAMP><SPAN class=samp>.eflag 48</SPAN></SAMP>&#8217; in the function prologue of the generated assembly file.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mbuild-constants</CODE></DT>
<DD><A name=index-mbuild-constants-1464></A>Normally GCC examines a 32- or 64-bit integer constant to see if it can construct it from smaller constants in two or three instructions. If it cannot, it outputs the constant as a literal and generates code to load it from the data segment at run time.
<P>Use this option to require GCC to construct<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>all</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>integer constants using code, even if it takes more instructions (the maximum is six).</P>
<P>You typically use this option to build a shared library dynamic loader. Itself a shared library, it must relocate itself in memory before it can find the variables and constants in its own data segment.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mbwx</CODE></DT>
<DT><CODE>-mno-bwx</CODE></DT>
<DT><CODE>-mcix</CODE></DT>
<DT><CODE>-mno-cix</CODE></DT>
<DT><CODE>-mfix</CODE></DT>
<DT><CODE>-mno-fix</CODE></DT>
<DT><CODE>-mmax</CODE></DT>
<DT><CODE>-mno-max</CODE></DT>
<DD><A name=index-mbwx-1465></A><A name=index-mno-bwx-1466></A><A name=index-mcix-1467></A><A name=index-mno-cix-1468></A><A name=index-mfix-1469></A><A name=index-mno-fix-1470></A><A name=index-mmax-1471></A><A name=index-mno-max-1472></A>Indicate whether GCC should generate code to use the optional BWX, CIX, FIX and MAX instruction sets. The default is to use the instruction sets supported by the CPU type specified via<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mcpu=</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option or that of the CPU on which GCC was built if none is specified.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mfloat-vax</CODE></DT>
<DT><CODE>-mfloat-ieee</CODE></DT>
<DD><A name=index-mfloat-vax-1473></A><A name=index-mfloat-ieee-1474></A>Generate code that uses (does not use) VAX F and G floating-point arithmetic instead of IEEE single and double precision.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mexplicit-relocs</CODE></DT>
<DT><CODE>-mno-explicit-relocs</CODE></DT>
<DD><A name=index-mexplicit-relocs-1475></A><A name=index-mno-explicit-relocs-1476></A>Older Alpha assemblers provided no way to generate symbol relocations except via assembler macros. Use of these macros does not allow optimal instruction scheduling. GNU binutils as of version 2.12 supports a new syntax that allows the compiler to explicitly mark which relocations should apply to which instructions. This option is mostly useful for debugging, as GCC detects the capabilities of the assembler when it is built and sets the default accordingly.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msmall-data</CODE></DT>
<DT><CODE>-mlarge-data</CODE></DT>
<DD><A name=index-msmall-data-1477></A><A name=index-mlarge-data-1478></A>When<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mexplicit-relocs</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is in effect, static data is accessed via<SPAN class=Apple-converted-space>&nbsp;</SPAN><DFN>gp-relative</DFN><SPAN class=Apple-converted-space>&nbsp;</SPAN>relocations. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-msmall-data</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used, objects 8 bytes long or smaller are placed in a<SPAN class=Apple-converted-space>&nbsp;</SPAN><DFN>small data area</DFN><SPAN class=Apple-converted-space>&nbsp;</SPAN>(the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.sdata</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.sbss</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>sections) and are accessed via 16-bit relocations off of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$gp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>register. This limits the size of the small data area to 64KB, but allows the variables to be directly accessed via a single instruction.
<P>The default is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mlarge-data</SPAN></SAMP>. With this option the data area is limited to just below 2GB. Programs that require more than 2GB of data must use<CODE>malloc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mmap</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to allocate the data in the heap instead of in the program's data segment.</P>
<P>When generating code for shared libraries,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fpic</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>implies<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-msmall-data</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fPIC</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>implies<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mlarge-data</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-msmall-text</CODE></DT>
<DT><CODE>-mlarge-text</CODE></DT>
<DD><A name=index-msmall-text-1479></A><A name=index-mlarge-text-1480></A>When<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-msmall-text</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used, the compiler assumes that the code of the entire program (or shared library) fits in 4MB, and is thus reachable with a branch instruction. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-msmall-data</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used, the compiler can assume that all local symbols share the same<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$gp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value, and thus reduce the number of instructions required for a function call from 4 to 1.
<P>The default is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mlarge-text</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mcpu=</CODE><VAR>cpu_type</VAR></DT>
<DD><A name=index-mcpu-1481></A>Set the instruction set and instruction scheduling parameters for machine type<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cpu_type</VAR>. You can specify either the &#8216;<SAMP><SPAN class=samp>EV</SPAN></SAMP>&#8217; style name or the corresponding chip number. GCC supports scheduling parameters for the EV4, EV5 and EV6 family of processors and chooses the default values for the instruction set from the processor you specify. If you do not specify a processor type, GCC defaults to the processor on which the compiler was built.
<P>Supported values for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cpu_type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are</P>
<DL>
<DT>&#8216;<SAMP><SPAN class=samp>ev4</SPAN></SAMP>&#8217;</DT>
<DT>&#8216;<SAMP><SPAN class=samp>ev45</SPAN></SAMP>&#8217;</DT>
<DT>&#8216;<SAMP><SPAN class=samp>21064</SPAN></SAMP>&#8217;</DT>
<DD>Schedules as an EV4 and has no instruction set extensions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>ev5</SPAN></SAMP>&#8217;</DT>
<DT>&#8216;<SAMP><SPAN class=samp>21164</SPAN></SAMP>&#8217;</DT>
<DD>Schedules as an EV5 and has no instruction set extensions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>ev56</SPAN></SAMP>&#8217;</DT>
<DT>&#8216;<SAMP><SPAN class=samp>21164a</SPAN></SAMP>&#8217;</DT>
<DD>Schedules as an EV5 and supports the BWX extension.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>pca56</SPAN></SAMP>&#8217;</DT>
<DT>&#8216;<SAMP><SPAN class=samp>21164pc</SPAN></SAMP>&#8217;</DT>
<DT>&#8216;<SAMP><SPAN class=samp>21164PC</SPAN></SAMP>&#8217;</DT>
<DD>Schedules as an EV5 and supports the BWX and MAX extensions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>ev6</SPAN></SAMP>&#8217;</DT>
<DT>&#8216;<SAMP><SPAN class=samp>21264</SPAN></SAMP>&#8217;</DT>
<DD>Schedules as an EV6 and supports the BWX, FIX, and MAX extensions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>ev67</SPAN></SAMP>&#8217;</DT>
<DT>&#8216;<SAMP><SPAN class=samp>21264a</SPAN></SAMP>&#8217;</DT>
<DD>Schedules as an EV6 and supports the BWX, CIX, FIX, and MAX extensions.</DD></DL>
<P>Native toolchains also support the value &#8216;<SAMP><SPAN class=samp>native</SPAN></SAMP>&#8217;, which selects the best architecture option for the host processor.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mcpu=native</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>has no effect if GCC does not recognize the processor.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mtune=</CODE><VAR>cpu_type</VAR></DT>
<DD><A name=index-mtune-1482></A>Set only the instruction scheduling parameters for machine type<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cpu_type</VAR>. The instruction set is not changed.
<P>Native toolchains also support the value &#8216;<SAMP><SPAN class=samp>native</SPAN></SAMP>&#8217;, which selects the best architecture option for the host processor.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mtune=native</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>has no effect if GCC does not recognize the processor.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mmemory-latency=</CODE><VAR>time</VAR></DT>
<DD><A name=index-mmemory-latency-1483></A>Sets the latency the scheduler should assume for typical memory references as seen by the application. This number is highly dependent on the memory access patterns used by the application and the size of the external cache on the machine.
<P>Valid options for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>time</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are</P>
<DL>
<DT>&#8216;<SAMP><VAR>number</VAR></SAMP>&#8217;</DT>
<DD>A decimal number representing clock cycles.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>L1</SPAN></SAMP>&#8217;</DT>
<DT>&#8216;<SAMP><SPAN class=samp>L2</SPAN></SAMP>&#8217;</DT>
<DT>&#8216;<SAMP><SPAN class=samp>L3</SPAN></SAMP>&#8217;</DT>
<DT>&#8216;<SAMP><SPAN class=samp>main</SPAN></SAMP>&#8217;</DT>
<DD>The compiler contains estimates of the number of clock cycles for &#8220;typical&#8221; EV4 &amp; EV5 hardware for the Level 1, 2 &amp; 3 caches (also called Dcache, Scache, and Bcache), as well as to main memory. Note that L3 is only valid for EV5.</DD></DL></DD></DL>