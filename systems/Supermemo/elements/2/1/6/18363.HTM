<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>3.17.7 C6X Options</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-C6X-Options-1334></A></P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>-march=</CODE><VAR>name</VAR></DT>
<DD><A name=index-march-1335></A>This specifies the name of the target architecture. GCC uses this name to determine what kind of instructions it can emit when generating assembly code. Permissible names are: &#8216;<SAMP><SPAN class=samp>c62x</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>c64x</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>c64x+</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>c67x</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>c67x+</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>c674x</SPAN></SAMP>&#8217;.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mbig-endian</CODE></DT>
<DD><A name=index-mbig-endian-1336></A>Generate code for a big-endian target.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mlittle-endian</CODE></DT>
<DD><A name=index-mlittle-endian-1337></A>Generate code for a little-endian target. This is the default.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msim</CODE></DT>
<DD><A name=index-msim-1338></A>Choose startup files and linker script suitable for the simulator.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msdata=default</CODE></DT>
<DD><A name=index-msdata_003ddefault-1339></A>Put small global and static data in the &#8216;<SAMP><SPAN class=samp>.neardata</SPAN></SAMP>&#8217; section, which is pointed to by register<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>B14</CODE>. Put small uninitialized global and static data in the &#8216;<SAMP><SPAN class=samp>.bss</SPAN></SAMP>&#8217; section, which is adjacent to the &#8216;<SAMP><SPAN class=samp>.neardata</SPAN></SAMP>&#8217; section. Put small read-only data into the &#8216;<SAMP><SPAN class=samp>.rodata</SPAN></SAMP>&#8217; section. The corresponding sections used for large pieces of data are &#8216;<SAMP><SPAN class=samp>.fardata</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>.far</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>.const</SPAN></SAMP>&#8217;.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msdata=all</CODE></DT>
<DD><A name=index-msdata_003dall-1340></A>Put all data, not just small objects, into the sections reserved for small data, and use addressing relative to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>B14</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>register to access them.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msdata=none</CODE></DT>
<DD><A name=index-msdata_003dnone-1341></A>Make no use of the sections reserved for small data, and use absolute addresses to access all data. Put all initialized global and static data in the &#8216;<SAMP><SPAN class=samp>.fardata</SPAN></SAMP>&#8217; section, and all uninitialized data in the &#8216;<SAMP><SPAN class=samp>.far</SPAN></SAMP>&#8217; section. Put all constant data into the &#8216;<SAMP><SPAN class=samp>.const</SPAN></SAMP>&#8217; section.</DD></DL>