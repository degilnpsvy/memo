<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>3.17.8 CRIS Options</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-CRIS-Options-1342></A>These options are defined specifically for the CRIS ports.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>-march=</CODE><VAR>architecture-type</VAR></DT>
<DT><CODE>-mcpu=</CODE><VAR>architecture-type</VAR></DT>
<DD><A name=index-march-1343></A><A name=index-mcpu-1344></A>Generate code for the specified architecture. The choices for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>architecture-type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are &#8216;<SAMP><SPAN class=samp>v3</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>v8</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>v10</SPAN></SAMP>&#8217; for respectively ETRAX&nbsp;4, ETRAX&nbsp;100, and ETRAX&nbsp;100&nbsp;LX. Default is &#8216;<SAMP><SPAN class=samp>v0</SPAN></SAMP>&#8217; except for cris-axis-linux-gnu, where the default is &#8216;<SAMP><SPAN class=samp>v10</SPAN></SAMP>&#8217;.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mtune=</CODE><VAR>architecture-type</VAR></DT>
<DD><A name=index-mtune-1345></A>Tune to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>architecture-type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>everything applicable about the generated code, except for the ABI and the set of available instructions. The choices for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>architecture-type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are the same as for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march=</SPAN><VAR>architecture-type</VAR></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mmax-stack-frame=</CODE><VAR>n</VAR></DT>
<DD><A name=index-mmax-stack-frame-1346></A>Warn when the stack frame of a function exceeds<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-metrax4</CODE></DT>
<DT><CODE>-metrax100</CODE></DT>
<DD><A name=index-metrax4-1347></A><A name=index-metrax100-1348></A>The options<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-metrax4</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-metrax100</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>are synonyms for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march=v3</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march=v8</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>respectively.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mmul-bug-workaround</CODE></DT>
<DT><CODE>-mno-mul-bug-workaround</CODE></DT>
<DD><A name=index-mmul-bug-workaround-1349></A><A name=index-mno-mul-bug-workaround-1350></A>Work around a bug in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>muls</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mulu</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions for CPU models where it applies. This option is active by default.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mpdebug</CODE></DT>
<DD><A name=index-mpdebug-1351></A>Enable CRIS-specific verbose debug-related information in the assembly code. This option also has the effect of turning off the &#8216;<SAMP><SPAN class=samp>#NO_APP</SPAN></SAMP>&#8217; formatted-code indicator to the assembler at the beginning of the assembly file.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mcc-init</CODE></DT>
<DD><A name=index-mcc-init-1352></A>Do not use condition-code results from previous instruction; always emit compare and test instructions before use of condition codes.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mno-side-effects</CODE></DT>
<DD><A name=index-mno-side-effects-1353></A>Do not emit instructions with side effects in addressing modes other than post-increment.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mstack-align</CODE></DT>
<DT><CODE>-mno-stack-align</CODE></DT>
<DT><CODE>-mdata-align</CODE></DT>
<DT><CODE>-mno-data-align</CODE></DT>
<DT><CODE>-mconst-align</CODE></DT>
<DT><CODE>-mno-const-align</CODE></DT>
<DD><A name=index-mstack-align-1354></A><A name=index-mno-stack-align-1355></A><A name=index-mdata-align-1356></A><A name=index-mno-data-align-1357></A><A name=index-mconst-align-1358></A><A name=index-mno-const-align-1359></A>These options (&#8216;<SAMP><SPAN class=samp>no-</SPAN></SAMP>&#8217; options) arrange (eliminate arrangements) for the stack frame, individual data and constants to be aligned for the maximum single data access size for the chosen CPU model. The default is to arrange for 32-bit alignment. ABI details such as structure layout are not affected by these options.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-m32-bit</CODE></DT>
<DT><CODE>-m16-bit</CODE></DT>
<DT><CODE>-m8-bit</CODE></DT>
<DD><A name=index-m32-bit-1360></A><A name=index-m16-bit-1361></A><A name=index-m8-bit-1362></A>Similar to the stack- data- and const-align options above, these options arrange for stack frame, writable data and constants to all be 32-bit, 16-bit or 8-bit aligned. The default is 32-bit alignment.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mno-prologue-epilogue</CODE></DT>
<DT><CODE>-mprologue-epilogue</CODE></DT>
<DD><A name=index-mno-prologue-epilogue-1363></A><A name=index-mprologue-epilogue-1364></A>With<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-prologue-epilogue</SPAN></SAMP>, the normal function prologue and epilogue which set up the stack frame are omitted and no return instructions or return sequences are generated in the code. Use this option only together with visual inspection of the compiled code: no warnings or errors are generated when call-saved registers must be saved, or storage for local variables needs to be allocated.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mno-gotplt</CODE></DT>
<DT><CODE>-mgotplt</CODE></DT>
<DD><A name=index-mno-gotplt-1365></A><A name=index-mgotplt-1366></A>With<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fpic</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fPIC</SPAN></SAMP>, don't generate (do generate) instruction sequences that load addresses for functions from the PLT part of the GOT rather than (traditional on other architectures) calls to the PLT. The default is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mgotplt</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-melf</CODE></DT>
<DD><A name=index-melf-1367></A>Legacy no-op option only recognized with the cris-axis-elf and cris-axis-linux-gnu targets.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mlinux</CODE></DT>
<DD><A name=index-mlinux-1368></A>Legacy no-op option only recognized with the cris-axis-linux-gnu target.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-sim</CODE></DT>
<DD><A name=index-sim-1369></A>This option, recognized for the cris-axis-elf, arranges to link with input-output functions from a simulator library. Code, initialized data and zero-initialized data are allocated consecutively.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-sim2</CODE></DT>
<DD><A name=index-sim2-1370></A>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-sim</SPAN></SAMP>, but pass linker options to locate initialized data at 0x40000000 and zero-initialized data at 0x80000000.</DD></DL>