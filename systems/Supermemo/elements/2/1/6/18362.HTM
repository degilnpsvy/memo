<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>3.17.6 Blackfin Options</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-Blackfin-Options-1307></A></P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>-mcpu=</CODE><VAR>cpu</VAR><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>[</SPAN><CODE>-</CODE><VAR>sirevision</VAR><SPAN style="FONT-FAMILY: serif; FONT-WEIGHT: normal" class=roman>]</SPAN></DT>
<DD><A name=index-mcpu_003d-1308></A>Specifies the name of the target Blackfin processor. Currently,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cpu</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be one of &#8216;<SAMP><SPAN class=samp>bf512</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>bf514</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>bf516</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>bf518</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>bf522</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>bf523</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>bf524</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>bf525</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>bf526</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>bf527</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>bf531</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>bf532</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>bf533</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>bf534</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>bf536</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>bf537</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>bf538</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>bf539</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>bf542</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>bf544</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>bf547</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>bf548</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>bf549</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>bf542m</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>bf544m</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>bf547m</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>bf548m</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>bf549m</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>bf561</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>bf592</SPAN></SAMP>&#8217;.
<P>The optional<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sirevision</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>specifies the silicon revision of the target Blackfin processor. Any workarounds available for the targeted silicon revision are enabled. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sirevision</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is &#8216;<SAMP><SPAN class=samp>none</SPAN></SAMP>&#8217;, no workarounds are enabled. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sirevision</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is &#8216;<SAMP><SPAN class=samp>any</SPAN></SAMP>&#8217;, all workarounds for the targeted processor are enabled. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__SILICON_REVISION__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>macro is defined to two hexadecimal digits representing the major and minor numbers in the silicon revision. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sirevision</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is &#8216;<SAMP><SPAN class=samp>none</SPAN></SAMP>&#8217;, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__SILICON_REVISION__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not defined. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sirevision</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is &#8216;<SAMP><SPAN class=samp>any</SPAN></SAMP>&#8217;, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__SILICON_REVISION__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is defined to be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0xffff</CODE>. If this optional<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>sirevision</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not used, GCC assumes the latest known silicon revision of the targeted Blackfin processor.</P>
<P>GCC defines a preprocessor macro for the specified<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cpu</VAR>. For the &#8216;<SAMP><SPAN class=samp>bfin-elf</SPAN></SAMP>&#8217; toolchain, this option causes the hardware BSP provided by libgloss to be linked in if<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-msim</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not given.</P>
<P>Without this option, &#8216;<SAMP><SPAN class=samp>bf532</SPAN></SAMP>&#8217; is used as the processor by default.</P>
<P>Note that support for &#8216;<SAMP><SPAN class=samp>bf561</SPAN></SAMP>&#8217; is incomplete. For &#8216;<SAMP><SPAN class=samp>bf561</SPAN></SAMP>&#8217;, only the preprocessor macro is defined.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-msim</CODE></DT>
<DD><A name=index-msim-1309></A>Specifies that the program will be run on the simulator. This causes the simulator BSP provided by libgloss to be linked in. This option has effect only for &#8216;<SAMP><SPAN class=samp>bfin-elf</SPAN></SAMP>&#8217; toolchain. Certain other options, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mid-shared-library</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mfdpic</SPAN></SAMP>, imply<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-msim</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-momit-leaf-frame-pointer</CODE></DT>
<DD><A name=index-momit-leaf-frame-pointer-1310></A>Don't keep the frame pointer in a register for leaf functions. This avoids the instructions to save, set up and restore frame pointers and makes an extra register available in leaf functions. The option<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fomit-frame-pointer</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>removes the frame pointer for all functions, which might make debugging harder.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mspecld-anomaly</CODE></DT>
<DD><A name=index-mspecld-anomaly-1311></A>When enabled, the compiler ensures that the generated code does not contain speculative loads after jump instructions. If this option is used,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__WORKAROUND_SPECULATIVE_LOADS</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is defined.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mno-specld-anomaly</CODE></DT>
<DD><A name=index-mno-specld-anomaly-1312></A>Don't generate extra code to prevent speculative loads from occurring.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mcsync-anomaly</CODE></DT>
<DD><A name=index-mcsync-anomaly-1313></A>When enabled, the compiler ensures that the generated code does not contain CSYNC or SSYNC instructions too soon after conditional branches. If this option is used,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__WORKAROUND_SPECULATIVE_SYNCS</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is defined.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mno-csync-anomaly</CODE></DT>
<DD><A name=index-mno-csync-anomaly-1314></A>Don't generate extra code to prevent CSYNC or SSYNC instructions from occurring too soon after a conditional branch.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mlow-64k</CODE></DT>
<DD><A name=index-mlow-64k-1315></A>When enabled, the compiler is free to take advantage of the knowledge that the entire program fits into the low 64k of memory.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mno-low-64k</CODE></DT>
<DD><A name=index-mno-low-64k-1316></A>Assume that the program is arbitrarily large. This is the default.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mstack-check-l1</CODE></DT>
<DD><A name=index-mstack-check-l1-1317></A>Do stack checking using information placed into L1 scratchpad memory by the uClinux kernel.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mid-shared-library</CODE></DT>
<DD><A name=index-mid-shared-library-1318></A>Generate code that supports shared libraries via the library ID method. This allows for execute in place and shared libraries in an environment without virtual memory management. This option implies<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fPIC</SPAN></SAMP>. With a &#8216;<SAMP><SPAN class=samp>bfin-elf</SPAN></SAMP>&#8217; target, this option implies<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-msim</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mno-id-shared-library</CODE></DT>
<DD><A name=index-mno-id-shared-library-1319></A>Generate code that doesn't assume ID-based shared libraries are being used. This is the default.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mleaf-id-shared-library</CODE></DT>
<DD><A name=index-mleaf-id-shared-library-1320></A>Generate code that supports shared libraries via the library ID method, but assumes that this library or executable won't link against any other ID shared libraries. That allows the compiler to use faster code for jumps and calls.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mno-leaf-id-shared-library</CODE></DT>
<DD><A name=index-mno-leaf-id-shared-library-1321></A>Do not assume that the code being compiled won't link against any ID shared libraries. Slower code is generated for jump and call insns.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mshared-library-id=n</CODE></DT>
<DD><A name=index-mshared-library-id-1322></A>Specifies the identification number of the ID-based shared library being compiled. Specifying a value of 0 generates more compact code; specifying other values forces the allocation of that number to the current library but is no more space- or time-efficient than omitting this option.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msep-data</CODE></DT>
<DD><A name=index-msep-data-1323></A>Generate code that allows the data segment to be located in a different area of memory from the text segment. This allows for execute in place in an environment without virtual memory management by eliminating relocations against the text section.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mno-sep-data</CODE></DT>
<DD><A name=index-mno-sep-data-1324></A>Generate code that assumes that the data segment follows the text segment. This is the default.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mlong-calls</CODE></DT>
<DT><CODE>-mno-long-calls</CODE></DT>
<DD><A name=index-mlong-calls-1325></A><A name=index-mno-long-calls-1326></A>Tells the compiler to perform function calls by first loading the address of the function into a register and then performing a subroutine call on this register. This switch is needed if the target function lies outside of the 24-bit addressing range of the offset-based version of subroutine call instruction.
<P>This feature is not enabled by default. Specifying<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-long-calls</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>restores the default behavior. Note these switches have no effect on how the compiler generates code to handle function calls via function pointers.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mfast-fp</CODE></DT>
<DD><A name=index-mfast-fp-1327></A>Link with the fast floating-point library. This library relaxes some of the IEEE floating-point standard's rules for checking inputs against Not-a-Number (NAN), in the interest of performance.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-minline-plt</CODE></DT>
<DD><A name=index-minline-plt-1328></A>Enable inlining of PLT entries in function calls to functions that are not known to bind locally. It has no effect without<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mfdpic</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mmulticore</CODE></DT>
<DD><A name=index-mmulticore-1329></A>Build a standalone application for multicore Blackfin processors. This option causes proper start files and link scripts supporting multicore to be used, and defines the macro<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__BFIN_MULTICORE</CODE>. It can only be used with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mcpu=bf561[-</SPAN><VAR>sirevision</VAR><SPAN class=option>]</SPAN></SAMP>.
<P>This option can be used with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mcorea</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mcoreb</SPAN></SAMP>, which selects the one-application-per-core programming model. Without<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mcorea</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mcoreb</SPAN></SAMP>, the single-application/dual-core programming model is used. In this model, the main function of Core B should be named as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>coreb_main</CODE>.</P>
<P>If this option is not used, the single-core application programming model is used.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mcorea</CODE></DT>
<DD><A name=index-mcorea-1330></A>Build a standalone application for Core A of BF561 when using the one-application-per-core programming model. Proper start files and link scripts are used to support Core A, and the macro<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__BFIN_COREA</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is defined. This option can only be used in conjunction with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mmulticore</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mcoreb</CODE></DT>
<DD><A name=index-mcoreb-1331></A>Build a standalone application for Core B of BF561 when using the one-application-per-core programming model. Proper start files and link scripts are used to support Core B, and the macro<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__BFIN_COREB</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is defined. When this option is used,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>coreb_main</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be used instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>main</CODE>. This option can only be used in conjunction with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mmulticore</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msdram</CODE></DT>
<DD><A name=index-msdram-1332></A>Build a standalone application for SDRAM. Proper start files and link scripts are used to put the application into SDRAM, and the macro<CODE>__BFIN_SDRAM</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is defined. The loader should initialize SDRAM before loading the application.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-micplb</CODE></DT>
<DD><A name=index-micplb-1333></A>Assume that ICPLBs are enabled at run time. This has an effect on certain anomaly workarounds. For Linux targets, the default is to assume ICPLBs are enabled; for standalone applications the default is off.</DD></DL>