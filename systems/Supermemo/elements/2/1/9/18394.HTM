<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>3.17.38 IBM RS/6000 and PowerPC Options</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-RS_002f6000-and-PowerPC-Options-2128></A><A name=index-IBM-RS_002f6000-and-PowerPC-Options-2129></A>These &#8216;<SAMP><SPAN class=samp>-m</SPAN></SAMP>&#8217; options are defined for the IBM RS/6000 and PowerPC:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>-mpowerpc-gpopt</CODE></DT>
<DT><CODE>-mno-powerpc-gpopt</CODE></DT>
<DT><CODE>-mpowerpc-gfxopt</CODE></DT>
<DT><CODE>-mno-powerpc-gfxopt</CODE></DT>
<DT><CODE>-mpowerpc64</CODE></DT>
<DT><CODE>-mno-powerpc64</CODE></DT>
<DT><CODE>-mmfcrf</CODE></DT>
<DT><CODE>-mno-mfcrf</CODE></DT>
<DT><CODE>-mpopcntb</CODE></DT>
<DT><CODE>-mno-popcntb</CODE></DT>
<DT><CODE>-mpopcntd</CODE></DT>
<DT><CODE>-mno-popcntd</CODE></DT>
<DT><CODE>-mfprnd</CODE></DT>
<DT><CODE>-mno-fprnd</CODE></DT>
<DT><CODE>-mcmpb</CODE></DT>
<DT><CODE>-mno-cmpb</CODE></DT>
<DT><CODE>-mmfpgpr</CODE></DT>
<DT><CODE>-mno-mfpgpr</CODE></DT>
<DT><CODE>-mhard-dfp</CODE></DT>
<DT><CODE>-mno-hard-dfp</CODE></DT>
<DD><A name=index-mpowerpc-gpopt-2130></A><A name=index-mno-powerpc-gpopt-2131></A><A name=index-mpowerpc-gfxopt-2132></A><A name=index-mno-powerpc-gfxopt-2133></A><A name=index-mpowerpc64-2134></A><A name=index-mno-powerpc64-2135></A><A name=index-mmfcrf-2136></A><A name=index-mno-mfcrf-2137></A><A name=index-mpopcntb-2138></A><A name=index-mno-popcntb-2139></A><A name=index-mpopcntd-2140></A><A name=index-mno-popcntd-2141></A><A name=index-mfprnd-2142></A><A name=index-mno-fprnd-2143></A><A name=index-mcmpb-2144></A><A name=index-mno-cmpb-2145></A><A name=index-mmfpgpr-2146></A><A name=index-mno-mfpgpr-2147></A><A name=index-mhard-dfp-2148></A><A name=index-mno-hard-dfp-2149></A>You use these options to specify which instructions are available on the processor you are using. The default value of these options is determined when configuring GCC. Specifying the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mcpu=</SPAN><VAR>cpu_type</VAR></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>overrides the specification of these options. We recommend you use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mcpu=</SPAN><VAR>cpu_type</VAR></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option rather than the options listed above.
<P>Specifying<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mpowerpc-gpopt</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>allows GCC to use the optional PowerPC architecture instructions in the General Purpose group, including floating-point square root. Specifying<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mpowerpc-gfxopt</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>allows GCC to use the optional PowerPC architecture instructions in the Graphics group, including floating-point select.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mmfcrf</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option allows GCC to generate the move from condition register field instruction implemented on the POWER4 processor and other processors that support the PowerPC V2.01 architecture. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mpopcntb</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option allows GCC to generate the popcount and double-precision FP reciprocal estimate instruction implemented on the POWER5 processor and other processors that support the PowerPC V2.02 architecture. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mpopcntd</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option allows GCC to generate the popcount instruction implemented on the POWER7 processor and other processors that support the PowerPC V2.06 architecture. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mfprnd</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option allows GCC to generate the FP round to integer instructions implemented on the POWER5+ processor and other processors that support the PowerPC V2.03 architecture. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mcmpb</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option allows GCC to generate the compare bytes instruction implemented on the POWER6 processor and other processors that support the PowerPC V2.05 architecture. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mmfpgpr</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option allows GCC to generate the FP move to/from general-purpose register instructions implemented on the POWER6X processor and other processors that support the extended PowerPC V2.05 architecture. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mhard-dfp</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option allows GCC to generate the decimal floating-point instructions implemented on some POWER processors.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mpowerpc64</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option allows GCC to generate the additional 64-bit instructions that are found in the full PowerPC64 architecture and to treat GPRs as 64-bit, doubleword quantities. GCC defaults to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-powerpc64</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mcpu=</CODE><VAR>cpu_type</VAR></DT>
<DD><A name=index-mcpu-2150></A>Set architecture type, register usage, and instruction scheduling parameters for machine type<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cpu_type</VAR>. Supported values for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cpu_type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are &#8216;<SAMP><SPAN class=samp>401</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>403</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>405</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>405fp</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>440</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>440fp</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>464</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>464fp</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>476</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>476fp</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>505</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>601</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>602</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>603</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>603e</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>604</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>604e</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>620</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>630</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>740</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>7400</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>7450</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>750</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>801</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>821</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>823</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>860</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>970</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>8540</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>a2</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>e300c2</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>e300c3</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>e500mc</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>e500mc64</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>e5500</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>e6500</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>ec603e</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>G3</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>G4</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>G5</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>titan</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>power3</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>power4</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>power5</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>power5+</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>power6</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>power6x</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>power7</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>power8</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>powerpc</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>powerpc64</SPAN></SAMP>&#8217;, and &#8216;<SAMP><SPAN class=samp>rs64</SPAN></SAMP>&#8217;.
<P><SAMP><SPAN class=option>-mcpu=powerpc</SPAN></SAMP>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mcpu=powerpc64</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>specify pure 32-bit PowerPC and 64-bit PowerPC architecture machine types, with an appropriate, generic processor model assumed for scheduling purposes.</P>
<P>The other options specify a specific processor. Code generated under those options runs best on that processor, and may not run at all on others.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mcpu</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options automatically enable or disable the following options:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          -maltivec  -mfprnd  -mhard-float  -mmfcrf  -mmultiple 
          -mpopcntb -mpopcntd  -mpowerpc64 
          -mpowerpc-gpopt  -mpowerpc-gfxopt  -msingle-float -mdouble-float 
          -msimple-fpu -mstring  -mmulhw  -mdlmzb  -mmfpgpr -mvsx 
          -mcrypto -mdirect-move -mpower8-fusion -mpower8-vector 
          -mquad-memory -mquad-memory-atomic
</PRE>
<P>The particular options set for any particular CPU varies between compiler versions, depending on what setting seems to produce optimal code for that CPU; it doesn't necessarily reflect the actual hardware's capabilities. If you wish to set an individual option to a particular value, you may specify it after the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mcpu</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option, like<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mcpu=970 -mno-altivec</SPAN></SAMP>.</P>
<P>On AIX, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-maltivec</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mpowerpc64</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options are not enabled or disabled by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mcpu</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option at present because AIX does not have full support for these options. You may still enable or disable them individually if you're sure it'll work in your environment.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mtune=</CODE><VAR>cpu_type</VAR></DT>
<DD><A name=index-mtune-2151></A>Set the instruction scheduling parameters for machine type<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cpu_type</VAR>, but do not set the architecture type or register usage, as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mcpu=</SPAN><VAR>cpu_type</VAR></SAMP>does. The same values for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cpu_type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are used for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mtune</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>as for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mcpu</SPAN></SAMP>. If both are specified, the code generated uses the architecture and registers set by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mcpu</SPAN></SAMP>, but the scheduling parameters set by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mtune</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mcmodel=small</CODE></DT>
<DD><A name=index-mcmodel_003dsmall-2152></A>Generate PowerPC64 code for the small model: The TOC is limited to 64k.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mcmodel=medium</CODE></DT>
<DD><A name=index-mcmodel_003dmedium-2153></A>Generate PowerPC64 code for the medium model: The TOC and other static data may be up to a total of 4G in size.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mcmodel=large</CODE></DT>
<DD><A name=index-mcmodel_003dlarge-2154></A>Generate PowerPC64 code for the large model: The TOC may be up to 4G in size. Other data and code is only limited by the 64-bit address space.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-maltivec</CODE></DT>
<DT><CODE>-mno-altivec</CODE></DT>
<DD><A name=index-maltivec-2155></A><A name=index-mno-altivec-2156></A>Generate code that uses (does not use) AltiVec instructions, and also enable the use of built-in functions that allow more direct access to the AltiVec instruction set. You may also need to set<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mabi=altivec</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to adjust the current ABI with AltiVec ABI enhancements.
<P>When<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-maltivec</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used, rather than<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-maltivec=le</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-maltivec=be</SPAN></SAMP>, the element order for Altivec intrinsics such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vec_splat</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vec_extract</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vec_insert</CODE>will match array element order corresponding to the endianness of the target. That is, element zero identifies the leftmost element in a vector register when targeting a big-endian platform, and identifies the rightmost element in a vector register when targeting a little-endian platform.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-maltivec=be</CODE></DT>
<DD><A name=index-maltivec_003dbe-2157></A>Generate Altivec instructions using big-endian element order, regardless of whether the target is big- or little-endian. This is the default when targeting a big-endian platform.
<P>The element order is used to interpret element numbers in Altivec intrinsics such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vec_splat</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vec_extract</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vec_insert</CODE>. By default, these will match array element order corresponding to the endianness for the target.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-maltivec=le</CODE></DT>
<DD><A name=index-maltivec_003dle-2158></A>Generate Altivec instructions using little-endian element order, regardless of whether the target is big- or little-endian. This is the default when targeting a little-endian platform. This option is currently ignored when targeting a big-endian platform.
<P>The element order is used to interpret element numbers in Altivec intrinsics such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vec_splat</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vec_extract</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vec_insert</CODE>. By default, these will match array element order corresponding to the endianness for the target.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mvrsave</CODE></DT>
<DT><CODE>-mno-vrsave</CODE></DT>
<DD><A name=index-mvrsave-2159></A><A name=index-mno-vrsave-2160></A>Generate VRSAVE instructions when generating AltiVec code.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mgen-cell-microcode</CODE></DT>
<DD><A name=index-mgen-cell-microcode-2161></A>Generate Cell microcode instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mwarn-cell-microcode</CODE></DT>
<DD><A name=index-mwarn-cell-microcode-2162></A>Warn when a Cell microcode instruction is emitted. An example of a Cell microcode instruction is a variable shift.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msecure-plt</CODE></DT>
<DD><A name=index-msecure-plt-2163></A>Generate code that allows<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>ld</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>ld.so</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to build executables and shared libraries with non-executable<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.plt</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.got</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>sections. This is a PowerPC 32-bit SYSV ABI option.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mbss-plt</CODE></DT>
<DD><A name=index-mbss-plt-2164></A>Generate code that uses a BSS<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.plt</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>section that<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=command>ld.so</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>fills in, and requires<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.plt</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.got</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>sections that are both writable and executable. This is a PowerPC 32-bit SYSV ABI option.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-misel</CODE></DT>
<DT><CODE>-mno-isel</CODE></DT>
<DD><A name=index-misel-2165></A><A name=index-mno-isel-2166></A>This switch enables or disables the generation of ISEL instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-misel=</CODE><VAR>yes/no</VAR></DT>
<DD>This switch has been deprecated. Use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-misel</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-isel</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mspe</CODE></DT>
<DT><CODE>-mno-spe</CODE></DT>
<DD><A name=index-mspe-2167></A><A name=index-mno-spe-2168></A>This switch enables or disables the generation of SPE simd instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mpaired</CODE></DT>
<DT><CODE>-mno-paired</CODE></DT>
<DD><A name=index-mpaired-2169></A><A name=index-mno-paired-2170></A>This switch enables or disables the generation of PAIRED simd instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mspe=</CODE><VAR>yes/no</VAR></DT>
<DD>This option has been deprecated. Use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mspe</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-spe</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mvsx</CODE></DT>
<DT><CODE>-mno-vsx</CODE></DT>
<DD><A name=index-mvsx-2171></A><A name=index-mno-vsx-2172></A>Generate code that uses (does not use) vector/scalar (VSX) instructions, and also enable the use of built-in functions that allow more direct access to the VSX instruction set.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mcrypto</CODE></DT>
<DT><CODE>-mno-crypto</CODE></DT>
<DD><A name=index-mcrypto-2173></A><A name=index-mno-crypto-2174></A>Enable the use (disable) of the built-in functions that allow direct access to the cryptographic instructions that were added in version 2.07 of the PowerPC ISA.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mdirect-move</CODE></DT>
<DT><CODE>-mno-direct-move</CODE></DT>
<DD><A name=index-mdirect-move-2175></A><A name=index-mno-direct-move-2176></A>Generate code that uses (does not use) the instructions to move data between the general purpose registers and the vector/scalar (VSX) registers that were added in version 2.07 of the PowerPC ISA.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mpower8-fusion</CODE></DT>
<DT><CODE>-mno-power8-fusion</CODE></DT>
<DD><A name=index-mpower8-fusion-2177></A><A name=index-mno-power8-fusion-2178></A>Generate code that keeps (does not keeps) some integer operations adjacent so that the instructions can be fused together on power8 and later processors.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mpower8-vector</CODE></DT>
<DT><CODE>-mno-power8-vector</CODE></DT>
<DD><A name=index-mpower8-vector-2179></A><A name=index-mno-power8-vector-2180></A>Generate code that uses (does not use) the vector and scalar instructions that were added in version 2.07 of the PowerPC ISA. Also enable the use of built-in functions that allow more direct access to the vector instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mquad-memory</CODE></DT>
<DT><CODE>-mno-quad-memory</CODE></DT>
<DD><A name=index-mquad-memory-2181></A><A name=index-mno-quad-memory-2182></A>Generate code that uses (does not use) the non-atomic quad word memory instructions. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mquad-memory</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option requires use of 64-bit mode.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mquad-memory-atomic</CODE></DT>
<DT><CODE>-mno-quad-memory-atomic</CODE></DT>
<DD><A name=index-mquad-memory-atomic-2183></A><A name=index-mno-quad-memory-atomic-2184></A>Generate code that uses (does not use) the atomic quad word memory instructions. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mquad-memory-atomic</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option requires use of 64-bit mode.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mfloat-gprs=</CODE><VAR>yes/single/double/no</VAR></DT>
<DT><CODE>-mfloat-gprs</CODE></DT>
<DD><A name=index-mfloat-gprs-2185></A>This switch enables or disables the generation of floating-point operations on the general-purpose registers for architectures that support it.
<P>The argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>yes</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>single</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>enables the use of single-precision floating-point operations.</P>
<P>The argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>double</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>enables the use of single and double-precision floating-point operations.</P>
<P>The argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>no</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>disables floating-point operations on the general-purpose registers.</P>
<P>This option is currently only available on the MPC854x.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-m32</CODE></DT>
<DT><CODE>-m64</CODE></DT>
<DD><A name=index-m32-2186></A><A name=index-m64-2187></A>Generate code for 32-bit or 64-bit environments of Darwin and SVR4 targets (including GNU/Linux). The 32-bit environment sets int, long and pointer to 32 bits and generates code that runs on any PowerPC variant. The 64-bit environment sets int to 32 bits and long and pointer to 64 bits, and generates code for PowerPC64, as for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mpowerpc64</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mfull-toc</CODE></DT>
<DT><CODE>-mno-fp-in-toc</CODE></DT>
<DT><CODE>-mno-sum-in-toc</CODE></DT>
<DT><CODE>-mminimal-toc</CODE></DT>
<DD><A name=index-mfull-toc-2188></A><A name=index-mno-fp-in-toc-2189></A><A name=index-mno-sum-in-toc-2190></A><A name=index-mminimal-toc-2191></A>Modify generation of the TOC (Table Of Contents), which is created for every executable file. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mfull-toc</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is selected by default. In that case, GCC allocates at least one TOC entry for each unique non-automatic variable reference in your program. GCC also places floating-point constants in the TOC. However, only 16,384 entries are available in the TOC.
<P>If you receive a linker error message that saying you have overflowed the available TOC space, you can reduce the amount of TOC space used with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-fp-in-toc</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-sum-in-toc</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-fp-in-toc</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>prevents GCC from putting floating-point constants in the TOC and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-sum-in-toc</SPAN></SAMP>forces GCC to generate code to calculate the sum of an address and a constant at run time instead of putting that sum into the TOC. You may specify one or both of these options. Each causes GCC to produce very slightly slower and larger code at the expense of conserving TOC space.</P>
<P>If you still run out of space in the TOC even when you specify both of these options, specify<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mminimal-toc</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead. This option causes GCC to make only one TOC entry for every file. When you specify this option, GCC produces code that is slower and larger but which uses extremely little TOC space. You may wish to use this option only on files that contain less frequently-executed code.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-maix64</CODE></DT>
<DT><CODE>-maix32</CODE></DT>
<DD><A name=index-maix64-2192></A><A name=index-maix32-2193></A>Enable 64-bit AIX ABI and calling convention: 64-bit pointers, 64-bit<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>type, and the infrastructure needed to support them. Specifying<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-maix64</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>implies<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mpowerpc64</SPAN></SAMP>, while<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-maix32</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>disables the 64-bit ABI and implies<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-powerpc64</SPAN></SAMP>. GCC defaults to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-maix32</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mxl-compat</CODE></DT>
<DT><CODE>-mno-xl-compat</CODE></DT>
<DD><A name=index-mxl-compat-2194></A><A name=index-mno-xl-compat-2195></A>Produce code that conforms more closely to IBM XL compiler semantics when using AIX-compatible ABI. Pass floating-point arguments to prototyped functions beyond the register save area (RSA) on the stack in addition to argument FPRs. Do not assume that most significant double in 128-bit long double value is properly rounded when comparing values and converting to double. Use XL symbol names for long double support routines.
<P>The AIX calling convention was extended but not initially documented to handle an obscure K&amp;R C case of calling a function that takes the address of its arguments with fewer arguments than declared. IBM XL compilers access floating-point arguments that do not fit in the RSA from the stack when a subroutine is compiled without optimization. Because always storing floating-point arguments on the stack is inefficient and rarely needed, this option is not enabled by default and only is necessary when calling subroutines compiled by IBM XL compilers without optimization.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mpe</CODE></DT>
<DD><A name=index-mpe-2196></A>Support<SPAN class=Apple-converted-space>&nbsp;</SPAN><DFN>IBM RS/6000 SP</DFN><SPAN class=Apple-converted-space>&nbsp;</SPAN><DFN>Parallel Environment</DFN><SPAN class=Apple-converted-space>&nbsp;</SPAN>(PE). Link an application written to use message passing with special startup code to enable the application to run. The system must have PE installed in the standard location (<SAMP><SPAN class=file>/usr/lpp/ppe.poe/</SPAN></SAMP>), or the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>specs</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>file must be overridden with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-specs=</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option to specify the appropriate directory location. The Parallel Environment does not support threads, so the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mpe</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-pthread</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option are incompatible.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-malign-natural</CODE></DT>
<DT><CODE>-malign-power</CODE></DT>
<DD><A name=index-malign-natural-2197></A><A name=index-malign-power-2198></A>On AIX, 32-bit Darwin, and 64-bit PowerPC GNU/Linux, the option<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-malign-natural</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>overrides the ABI-defined alignment of larger types, such as floating-point doubles, on their natural size-based boundary. The option<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-malign-power</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructs GCC to follow the ABI-specified alignment rules. GCC defaults to the standard alignment defined in the ABI.
<P>On 64-bit Darwin, natural alignment is the default, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-malign-power</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not supported.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-msoft-float</CODE></DT>
<DT><CODE>-mhard-float</CODE></DT>
<DD><A name=index-msoft-float-2199></A><A name=index-mhard-float-2200></A>Generate code that does not use (uses) the floating-point register set. Software floating-point emulation is provided if you use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-msoft-float</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option, and pass the option to GCC when linking.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msingle-float</CODE></DT>
<DT><CODE>-mdouble-float</CODE></DT>
<DD><A name=index-msingle-float-2201></A><A name=index-mdouble-float-2202></A>Generate code for single- or double-precision floating-point operations.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mdouble-float</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>implies<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-msingle-float</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msimple-fpu</CODE></DT>
<DD><A name=index-msimple-fpu-2203></A>Do not generate<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sqrt</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>div</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions for hardware floating-point unit.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mfpu=</CODE><VAR>name</VAR></DT>
<DD><A name=index-mfpu-2204></A>Specify type of floating-point unit. Valid values for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are &#8216;<SAMP><SPAN class=samp>sp_lite</SPAN></SAMP>&#8217; (equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-msingle-float -msimple-fpu</SPAN></SAMP>), &#8216;<SAMP><SPAN class=samp>dp_lite</SPAN></SAMP>&#8217; (equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mdouble-float -msimple-fpu</SPAN></SAMP>), &#8216;<SAMP><SPAN class=samp>sp_full</SPAN></SAMP>&#8217; (equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-msingle-float</SPAN></SAMP>), and &#8216;<SAMP><SPAN class=samp>dp_full</SPAN></SAMP>&#8217; (equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mdouble-float</SPAN></SAMP>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mxilinx-fpu</CODE></DT>
<DD><A name=index-mxilinx-fpu-2205></A>Perform optimizations for the floating-point unit on Xilinx PPC 405/440.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mmultiple</CODE></DT>
<DT><CODE>-mno-multiple</CODE></DT>
<DD><A name=index-mmultiple-2206></A><A name=index-mno-multiple-2207></A>Generate code that uses (does not use) the load multiple word instructions and the store multiple word instructions. These instructions are generated by default on POWER systems, and not generated on PowerPC systems. Do not use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mmultiple</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>on little-endian PowerPC systems, since those instructions do not work when the processor is in little-endian mode. The exceptions are PPC740 and PPC750 which permit these instructions in little-endian mode.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mstring</CODE></DT>
<DT><CODE>-mno-string</CODE></DT>
<DD><A name=index-mstring-2208></A><A name=index-mno-string-2209></A>Generate code that uses (does not use) the load string instructions and the store string word instructions to save multiple registers and do small block moves. These instructions are generated by default on POWER systems, and not generated on PowerPC systems. Do not use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mstring</SPAN></SAMP>on little-endian PowerPC systems, since those instructions do not work when the processor is in little-endian mode. The exceptions are PPC740 and PPC750 which permit these instructions in little-endian mode.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mupdate</CODE></DT>
<DT><CODE>-mno-update</CODE></DT>
<DD><A name=index-mupdate-2210></A><A name=index-mno-update-2211></A>Generate code that uses (does not use) the load or store instructions that update the base register to the address of the calculated memory location. These instructions are generated by default. If you use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-update</SPAN></SAMP>, there is a small window between the time that the stack pointer is updated and the address of the previous frame is stored, which means code that walks the stack frame across interrupts or signals may get corrupted data.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mavoid-indexed-addresses</CODE></DT>
<DT><CODE>-mno-avoid-indexed-addresses</CODE></DT>
<DD><A name=index-mavoid-indexed-addresses-2212></A><A name=index-mno-avoid-indexed-addresses-2213></A>Generate code that tries to avoid (not avoid) the use of indexed load or store instructions. These instructions can incur a performance penalty on Power6 processors in certain situations, such as when stepping through large arrays that cross a 16M boundary. This option is enabled by default when targeting Power6 and disabled otherwise.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mfused-madd</CODE></DT>
<DT><CODE>-mno-fused-madd</CODE></DT>
<DD><A name=index-mfused-madd-2214></A><A name=index-mno-fused-madd-2215></A>Generate code that uses (does not use) the floating-point multiply and accumulate instructions. These instructions are generated by default if hardware floating point is used. The machine-dependent<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mfused-madd</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is now mapped to the machine-independent<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ffp-contract=fast</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-fused-madd</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is mapped to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ffp-contract=off</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mmulhw</CODE></DT>
<DT><CODE>-mno-mulhw</CODE></DT>
<DD><A name=index-mmulhw-2216></A><A name=index-mno-mulhw-2217></A>Generate code that uses (does not use) the half-word multiply and multiply-accumulate instructions on the IBM 405, 440, 464 and 476 processors. These instructions are generated by default when targeting those processors.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mdlmzb</CODE></DT>
<DT><CODE>-mno-dlmzb</CODE></DT>
<DD><A name=index-mdlmzb-2218></A><A name=index-mno-dlmzb-2219></A>Generate code that uses (does not use) the string-search &#8216;<SAMP><SPAN class=samp>dlmzb</SPAN></SAMP>&#8217; instruction on the IBM 405, 440, 464 and 476 processors. This instruction is generated by default when targeting those processors.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mno-bit-align</CODE></DT>
<DT><CODE>-mbit-align</CODE></DT>
<DD><A name=index-mno-bit-align-2220></A><A name=index-mbit-align-2221></A>On System V.4 and embedded PowerPC systems do not (do) force structures and unions that contain bit-fields to be aligned to the base type of the bit-field.
<P>For example, by default a structure containing nothing but 8<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unsigned</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>bit-fields of length 1 is aligned to a 4-byte boundary and has a size of 4 bytes. By using<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-bit-align</SPAN></SAMP>, the structure is aligned to a 1-byte boundary and is 1 byte in size.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mno-strict-align</CODE></DT>
<DT><CODE>-mstrict-align</CODE></DT>
<DD><A name=index-mno-strict-align-2222></A><A name=index-mstrict-align-2223></A>On System V.4 and embedded PowerPC systems do not (do) assume that unaligned memory references are handled by the system.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mrelocatable</CODE></DT>
<DT><CODE>-mno-relocatable</CODE></DT>
<DD><A name=index-mrelocatable-2224></A><A name=index-mno-relocatable-2225></A>Generate code that allows (does not allow) a static executable to be relocated to a different address at run time. A simple embedded PowerPC system loader should relocate the entire contents of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.got2</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and 4-byte locations listed in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.fixup</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>section, a table of 32-bit addresses generated by this option. For this to work, all objects linked together must be compiled with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mrelocatable</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mrelocatable-lib</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mrelocatable</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>code aligns the stack to an 8-byte boundary.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mrelocatable-lib</CODE></DT>
<DT><CODE>-mno-relocatable-lib</CODE></DT>
<DD><A name=index-mrelocatable-lib-2226></A><A name=index-mno-relocatable-lib-2227></A>Like<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mrelocatable</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mrelocatable-lib</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>generates a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>.fixup</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>section to allow static executables to be relocated at run time, but<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mrelocatable-lib</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not use the smaller stack alignment of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mrelocatable</SPAN></SAMP>. Objects compiled with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mrelocatable-lib</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be linked with objects compiled with any combination of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mrelocatable</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mno-toc</CODE></DT>
<DT><CODE>-mtoc</CODE></DT>
<DD><A name=index-mno-toc-2228></A><A name=index-mtoc-2229></A>On System V.4 and embedded PowerPC systems do not (do) assume that register 2 contains a pointer to a global area pointing to the addresses used in the program.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mlittle</CODE></DT>
<DT><CODE>-mlittle-endian</CODE></DT>
<DD><A name=index-mlittle-2230></A><A name=index-mlittle-endian-2231></A>On System V.4 and embedded PowerPC systems compile code for the processor in little-endian mode. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mlittle-endian</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is the same as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mlittle</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mbig</CODE></DT>
<DT><CODE>-mbig-endian</CODE></DT>
<DD><A name=index-mbig-2232></A><A name=index-mbig-endian-2233></A>On System V.4 and embedded PowerPC systems compile code for the processor in big-endian mode. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mbig-endian</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is the same as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mbig</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mdynamic-no-pic</CODE></DT>
<DD><A name=index-mdynamic-no-pic-2234></A>On Darwin and Mac OS X systems, compile code so that it is not relocatable, but that its external references are relocatable. The resulting code is suitable for applications, but not shared libraries.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msingle-pic-base</CODE></DT>
<DD><A name=index-msingle-pic-base-2235></A>Treat the register used for PIC addressing as read-only, rather than loading it in the prologue for each function. The runtime system is responsible for initializing this register with an appropriate value before execution begins.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mprioritize-restricted-insns=</CODE><VAR>priority</VAR></DT>
<DD><A name=index-mprioritize-restricted-insns-2236></A>This option controls the priority that is assigned to dispatch-slot restricted instructions during the second scheduling pass. The argument<VAR>priority</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>takes the value &#8216;<SAMP><SPAN class=samp>0</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>1</SPAN></SAMP>&#8217;, or &#8216;<SAMP><SPAN class=samp>2</SPAN></SAMP>&#8217; to assign no, highest, or second-highest (respectively) priority to dispatch-slot restricted instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msched-costly-dep=</CODE><VAR>dependence_type</VAR></DT>
<DD><A name=index-msched-costly-dep-2237></A>This option controls which dependences are considered costly by the target during instruction scheduling. The argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>dependence_type</VAR>takes one of the following values:
<DL>
<DT>&#8216;<SAMP><SPAN class=samp>no</SPAN></SAMP>&#8217;</DT>
<DD>No dependence is costly.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>all</SPAN></SAMP>&#8217;</DT>
<DD>All dependences are costly.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>true_store_to_load</SPAN></SAMP>&#8217;</DT>
<DD>A true dependence from store to load is costly.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>store_to_load</SPAN></SAMP>&#8217;</DT>
<DD>Any dependence from store to load is costly.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><VAR>number</VAR></DT>
<DD>Any dependence for which the latency is greater than or equal to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>number</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is costly.</DD></DL><BR></DD>
<DT><CODE>-minsert-sched-nops=</CODE><VAR>scheme</VAR></DT>
<DD><A name=index-minsert-sched-nops-2238></A>This option controls which NOP insertion scheme is used during the second scheduling pass. The argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>scheme</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>takes one of the following values:
<DL>
<DT>&#8216;<SAMP><SPAN class=samp>no</SPAN></SAMP>&#8217;</DT>
<DD>Don't insert NOPs.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>pad</SPAN></SAMP>&#8217;</DT>
<DD>Pad with NOPs any dispatch group that has vacant issue slots, according to the scheduler's grouping.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>regroup_exact</SPAN></SAMP>&#8217;</DT>
<DD>Insert NOPs to force costly dependent insns into separate groups. Insert exactly as many NOPs as needed to force an insn to a new group, according to the estimated processor grouping.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><VAR>number</VAR></DT>
<DD>Insert NOPs to force costly dependent insns into separate groups. Insert<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>number</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>NOPs to force an insn to a new group.</DD></DL><BR></DD>
<DT><CODE>-mcall-sysv</CODE></DT>
<DD><A name=index-mcall-sysv-2239></A>On System V.4 and embedded PowerPC systems compile code using calling conventions that adhere to the March 1995 draft of the System V Application Binary Interface, PowerPC processor supplement. This is the default unless you configured GCC using &#8216;<SAMP><SPAN class=samp>powerpc-*-eabiaix</SPAN></SAMP>&#8217;.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mcall-sysv-eabi</CODE></DT>
<DT><CODE>-mcall-eabi</CODE></DT>
<DD><A name=index-mcall-sysv-eabi-2240></A><A name=index-mcall-eabi-2241></A>Specify both<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mcall-sysv</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-meabi</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mcall-sysv-noeabi</CODE></DT>
<DD><A name=index-mcall-sysv-noeabi-2242></A>Specify both<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mcall-sysv</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-eabi</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mcall-aixdesc</CODE></DT>
<DD><A name=index-m-2243></A>On System V.4 and embedded PowerPC systems compile code for the AIX operating system.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mcall-linux</CODE></DT>
<DD><A name=index-mcall-linux-2244></A>On System V.4 and embedded PowerPC systems compile code for the Linux-based GNU system.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mcall-freebsd</CODE></DT>
<DD><A name=index-mcall-freebsd-2245></A>On System V.4 and embedded PowerPC systems compile code for the FreeBSD operating system.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mcall-netbsd</CODE></DT>
<DD><A name=index-mcall-netbsd-2246></A>On System V.4 and embedded PowerPC systems compile code for the NetBSD operating system.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mcall-openbsd</CODE></DT>
<DD><A name=index-mcall-netbsd-2247></A>On System V.4 and embedded PowerPC systems compile code for the OpenBSD operating system.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-maix-struct-return</CODE></DT>
<DD><A name=index-maix-struct-return-2248></A>Return all structures in memory (as specified by the AIX ABI).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msvr4-struct-return</CODE></DT>
<DD><A name=index-msvr4-struct-return-2249></A>Return structures smaller than 8 bytes in registers (as specified by the SVR4 ABI).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mabi=</CODE><VAR>abi-type</VAR></DT>
<DD><A name=index-mabi-2250></A>Extend the current ABI with a particular extension, or remove such extension. Valid values are<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>altivec</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>no-altivec</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>spe</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>no-spe</VAR>,<VAR>ibmlongdouble</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ieeelongdouble</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>elfv1</VAR>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>elfv2</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mabi=spe</CODE></DT>
<DD><A name=index-mabi_003dspe-2251></A>Extend the current ABI with SPE ABI extensions. This does not change the default ABI, instead it adds the SPE ABI extensions to the current ABI.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mabi=no-spe</CODE></DT>
<DD><A name=index-mabi_003dno-spe-2252></A>Disable Book-E SPE ABI extensions for the current ABI.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mabi=ibmlongdouble</CODE></DT>
<DD><A name=index-mabi_003dibmlongdouble-2253></A>Change the current ABI to use IBM extended-precision long double. This is a PowerPC 32-bit SYSV ABI option.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mabi=ieeelongdouble</CODE></DT>
<DD><A name=index-mabi_003dieeelongdouble-2254></A>Change the current ABI to use IEEE extended-precision long double. This is a PowerPC 32-bit Linux ABI option.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mabi=elfv1</CODE></DT>
<DD><A name=index-mabi_003delfv1-2255></A>Change the current ABI to use the ELFv1 ABI. This is the default ABI for big-endian PowerPC 64-bit Linux. Overriding the default ABI requires special system support and is likely to fail in spectacular ways.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mabi=elfv2</CODE></DT>
<DD><A name=index-mabi_003delfv2-2256></A>Change the current ABI to use the ELFv2 ABI. This is the default ABI for little-endian PowerPC 64-bit Linux. Overriding the default ABI requires special system support and is likely to fail in spectacular ways.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mprototype</CODE></DT>
<DT><CODE>-mno-prototype</CODE></DT>
<DD><A name=index-mprototype-2257></A><A name=index-mno-prototype-2258></A>On System V.4 and embedded PowerPC systems assume that all calls to variable argument functions are properly prototyped. Otherwise, the compiler must insert an instruction before every non-prototyped call to set or clear bit 6 of the condition code register (<VAR>CR</VAR>) to indicate whether floating-point values are passed in the floating-point registers in case the function takes variable arguments. With<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mprototype</SPAN></SAMP>, only calls to prototyped variable argument functions set or clear the bit.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msim</CODE></DT>
<DD><A name=index-msim-2259></A>On embedded PowerPC systems, assume that the startup module is called<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>sim-crt0.o</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and that the standard C libraries are<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libsim.a</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libc.a</SPAN></SAMP>. This is the default for &#8216;<SAMP><SPAN class=samp>powerpc-*-eabisim</SPAN></SAMP>&#8217; configurations.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mmvme</CODE></DT>
<DD><A name=index-mmvme-2260></A>On embedded PowerPC systems, assume that the startup module is called<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>crt0.o</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the standard C libraries are<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libmvme.a</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libc.a</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mads</CODE></DT>
<DD><A name=index-mads-2261></A>On embedded PowerPC systems, assume that the startup module is called<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>crt0.o</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the standard C libraries are<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libads.a</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libc.a</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-myellowknife</CODE></DT>
<DD><A name=index-myellowknife-2262></A>On embedded PowerPC systems, assume that the startup module is called<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>crt0.o</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and the standard C libraries are<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libyk.a</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libc.a</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mvxworks</CODE></DT>
<DD><A name=index-mvxworks-2263></A>On System V.4 and embedded PowerPC systems, specify that you are compiling for a VxWorks system.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-memb</CODE></DT>
<DD><A name=index-memb-2264></A>On embedded PowerPC systems, set the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>PPC_EMB</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bit in the ELF flags header to indicate that &#8216;<SAMP><SPAN class=samp>eabi</SPAN></SAMP>&#8217; extended relocations are used.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-meabi</CODE></DT>
<DT><CODE>-mno-eabi</CODE></DT>
<DD><A name=index-meabi-2265></A><A name=index-mno-eabi-2266></A>On System V.4 and embedded PowerPC systems do (do not) adhere to the Embedded Applications Binary Interface (EABI), which is a set of modifications to the System V.4 specifications. Selecting<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-meabi</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>means that the stack is aligned to an 8-byte boundary, a function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__eabi</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is called from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>main</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to set up the EABI environment, and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-msdata</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option can use both<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>r2</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>r13</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to point to two separate small data areas. Selecting<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-eabi</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>means that the stack is aligned to a 16-byte boundary, no EABI initialization function is called from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>main</CODE>, and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-msdata</SPAN></SAMP>option only uses<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>r13</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to point to a single small data area. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-meabi</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is on by default if you configured GCC using one of the &#8216;<SAMP><SPAN class=samp>powerpc*-*-eabi*</SPAN></SAMP>&#8217; options.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msdata=eabi</CODE></DT>
<DD><A name=index-msdata_003deabi-2267></A>On System V.4 and embedded PowerPC systems, put small initialized<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>const</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>global and static data in the &#8216;<SAMP><SPAN class=samp>.sdata2</SPAN></SAMP>&#8217; section, which is pointed to by register<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>r2</CODE>. Put small initialized non-<CODE>const</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>global and static data in the &#8216;<SAMP><SPAN class=samp>.sdata</SPAN></SAMP>&#8217; section, which is pointed to by register<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>r13</CODE>. Put small uninitialized global and static data in the &#8216;<SAMP><SPAN class=samp>.sbss</SPAN></SAMP>&#8217; section, which is adjacent to the &#8216;<SAMP><SPAN class=samp>.sdata</SPAN></SAMP>&#8217; section. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-msdata=eabi</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is incompatible with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mrelocatable</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-msdata=eabi</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option also sets the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-memb</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msdata=sysv</CODE></DT>
<DD><A name=index-msdata_003dsysv-2268></A>On System V.4 and embedded PowerPC systems, put small global and static data in the &#8216;<SAMP><SPAN class=samp>.sdata</SPAN></SAMP>&#8217; section, which is pointed to by register<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>r13</CODE>. Put small uninitialized global and static data in the &#8216;<SAMP><SPAN class=samp>.sbss</SPAN></SAMP>&#8217; section, which is adjacent to the &#8216;<SAMP><SPAN class=samp>.sdata</SPAN></SAMP>&#8217; section. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-msdata=sysv</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is incompatible with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mrelocatable</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msdata=default</CODE></DT>
<DT><CODE>-msdata</CODE></DT>
<DD><A name=index-msdata_003ddefault-2269></A><A name=index-msdata-2270></A>On System V.4 and embedded PowerPC systems, if<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-meabi</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used, compile code the same as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-msdata=eabi</SPAN></SAMP>, otherwise compile code the same as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-msdata=sysv</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msdata=data</CODE></DT>
<DD><A name=index-msdata_003ddata-2271></A>On System V.4 and embedded PowerPC systems, put small global data in the &#8216;<SAMP><SPAN class=samp>.sdata</SPAN></SAMP>&#8217; section. Put small uninitialized global data in the &#8216;<SAMP><SPAN class=samp>.sbss</SPAN></SAMP>&#8217; section. Do not use register<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>r13</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to address small data however. This is the default behavior unless other<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-msdata</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>options are used.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msdata=none</CODE></DT>
<DT><CODE>-mno-sdata</CODE></DT>
<DD><A name=index-msdata_003dnone-2272></A><A name=index-mno-sdata-2273></A>On embedded PowerPC systems, put all initialized global and static data in the &#8216;<SAMP><SPAN class=samp>.data</SPAN></SAMP>&#8217; section, and all uninitialized data in the &#8216;<SAMP><SPAN class=samp>.bss</SPAN></SAMP>&#8217; section.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mblock-move-inline-limit=</CODE><VAR>num</VAR></DT>
<DD><A name=index-mblock-move-inline-limit-2274></A>Inline all block moves (such as calls to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>memcpy</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or structure copies) less than or equal to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>num</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes. The minimum value for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>num</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 32 bytes on 32-bit targets and 64 bytes on 64-bit targets. The default value is target-specific.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-G<SPAN class=Apple-converted-space>&nbsp;</SPAN></CODE><VAR>num</VAR></DT>
<DD><A name=index-G-2275></A><A name=index-smaller-data-references-_0028PowerPC_0029-2276></A><A name=index-g_t_002esdata_002f_002esdata2-references-_0028PowerPC_0029-2277></A>On embedded PowerPC systems, put global and static items less than or equal to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>num</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes into the small data or BSS sections instead of the normal data or BSS section. By default,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>num</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 8. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-G<SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN><VAR>num</VAR></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>switch is also passed to the linker. All modules should be compiled with the same<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-G<SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN><VAR>num</VAR></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>value.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mregnames</CODE></DT>
<DT><CODE>-mno-regnames</CODE></DT>
<DD><A name=index-mregnames-2278></A><A name=index-mno-regnames-2279></A>On System V.4 and embedded PowerPC systems do (do not) emit register names in the assembly language output using symbolic forms.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mlongcall</CODE></DT>
<DT><CODE>-mno-longcall</CODE></DT>
<DD><A name=index-mlongcall-2280></A><A name=index-mno-longcall-2281></A>By default assume that all calls are far away so that a longer and more expensive calling sequence is required. This is required for calls farther than 32 megabytes (33,554,432 bytes) from the current location. A short call is generated if the compiler knows the call cannot be that far away. This setting can be overridden by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>shortcall</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function attribute, or by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#pragma longcall(0)</CODE>.
<P>Some linkers are capable of detecting out-of-range calls and generating glue code on the fly. On these systems, long calls are unnecessary and generate slower code. As of this writing, the AIX linker can do this, as can the GNU linker for PowerPC/64. It is planned to add this feature to the GNU linker for 32-bit PowerPC systems as well.</P>
<P>On Darwin/PPC systems,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#pragma longcall</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>generates<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>jbsr callee, L42</CODE>, plus a<SPAN class=Apple-converted-space>&nbsp;</SPAN><DFN>branch island</DFN><SPAN class=Apple-converted-space>&nbsp;</SPAN>(glue code). The two target addresses represent the callee and the branch island. The Darwin/PPC linker prefers the first address and generates a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bl callee</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the PPC<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bl</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction reaches the callee directly; otherwise, the linker generates<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bl L42</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to call the branch island. The branch island is appended to the body of the calling function; it computes the full 32-bit address of the callee and jumps to it.</P>
<P>On Mach-O (Darwin) systems, this option directs the compiler emit to the glue for every direct call, and the Darwin linker decides whether to use or discard it.</P>
<P>In the future, GCC may ignore all longcall specifications when the linker is known to generate glue.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mtls-markers</CODE></DT>
<DT><CODE>-mno-tls-markers</CODE></DT>
<DD><A name=index-mtls-markers-2282></A><A name=index-mno-tls-markers-2283></A>Mark (do not mark) calls to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__tls_get_addr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with a relocation specifying the function argument. The relocation allows the linker to reliably associate function call with argument setup instructions for TLS optimization, which in turn allows GCC to better schedule the sequence.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-pthread</CODE></DT>
<DD><A name=index-pthread-2284></A>Adds support for multithreading with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><DFN>pthreads</DFN><SPAN class=Apple-converted-space>&nbsp;</SPAN>library. This option sets flags for both the preprocessor and linker.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mrecip</CODE></DT>
<DT><CODE>-mno-recip</CODE></DT>
<DD><A name=index-mrecip-2285></A>This option enables use of the reciprocal estimate and reciprocal square root estimate instructions with additional Newton-Raphson steps to increase precision instead of doing a divide or square root and divide for floating-point arguments. You should use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ffast-math</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option when using<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mrecip</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>(or at least<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-funsafe-math-optimizations</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-finite-math-only</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-freciprocal-math</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fno-trapping-math</SPAN></SAMP>). Note that while the throughput of the sequence is generally higher than the throughput of the non-reciprocal instruction, the precision of the sequence can be decreased by up to 2 ulp (i.e. the inverse of 1.0 equals 0.99999994) for reciprocal square roots.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mrecip=</CODE><VAR>opt</VAR></DT>
<DD><A name=index-mrecip_003dopt-2286></A>This option controls which reciprocal estimate instructions may be used.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>opt</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a comma-separated list of options, which may be preceded by a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>!</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to invert the option:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>all</CODE>: enable all estimate instructions,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>default</CODE>: enable the default instructions, equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mrecip</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>none</CODE>: disable all estimate instructions, equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-recip</SPAN></SAMP>;<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>div</CODE>: enable the reciprocal approximation instructions for both single and double precision;<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>divf</CODE>: enable the single-precision reciprocal approximation instructions;<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>divd</CODE>: enable the double-precision reciprocal approximation instructions;<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>rsqrt</CODE>: enable the reciprocal square root approximation instructions for both single and double precision;<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>rsqrtf</CODE>: enable the single-precision reciprocal square root approximation instructions;<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>rsqrtd</CODE>: enable the double-precision reciprocal square root approximation instructions;
<P>So, for example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mrecip=all,!rsqrtd</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>enables all of the reciprocal estimate instructions, except for the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>FRSQRTE</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>XSRSQRTEDP</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>XVRSQRTEDP</CODE>instructions which handle the double-precision reciprocal square root calculations.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mrecip-precision</CODE></DT>
<DT><CODE>-mno-recip-precision</CODE></DT>
<DD><A name=index-mrecip-precision-2287></A>Assume (do not assume) that the reciprocal estimate instructions provide higher-precision estimates than is mandated by the PowerPC ABI. Selecting<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mcpu=power6</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mcpu=power7</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mcpu=power8</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>automatically selects<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mrecip-precision</SPAN></SAMP>. The double-precision square root estimate instructions are not generated by default on low-precision machines, since they do not provide an estimate that converges after three steps.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mveclibabi=</CODE><VAR>type</VAR></DT>
<DD><A name=index-mveclibabi-2288></A>Specifies the ABI type to use for vectorizing intrinsics using an external library. The only type supported at present is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mass</CODE>, which specifies to use IBM's Mathematical Acceleration Subsystem (MASS) libraries for vectorizing intrinsics using external libraries. GCC currently emits calls to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>acosd2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>acosf4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>acoshd2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>acoshf4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asind2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asinf4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asinhd2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asinhf4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atan2d2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atan2f4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atand2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atanf4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atanhd2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atanhf4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cbrtd2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cbrtf4</CODE>,<CODE>cosd2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cosf4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>coshd2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>coshf4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>erfcd2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>erfcf4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>erfd2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>erff4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>exp2d2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>exp2f4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>expd2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>expf4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>expm1d2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>expm1f4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hypotd2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hypotf4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lgammad2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lgammaf4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>log10d2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>log10f4</CODE>,<CODE>log1pd2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>log1pf4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>log2d2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>log2f4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>logd2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>logf4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>powd2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>powf4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sind2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sinf4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sinhd2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sinhf4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sqrtd2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sqrtf4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tand2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tanf4</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tanhd2</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tanhf4</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>when generating code for power7. Both<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ftree-vectorize</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-funsafe-math-optimizations</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>must also be enabled. The MASS libraries must be specified at link time.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mfriz</CODE></DT>
<DT><CODE>-mno-friz</CODE></DT>
<DD><A name=index-mfriz-2289></A>Generate (do not generate) the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>friz</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction when the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-funsafe-math-optimizations</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is used to optimize rounding of floating-point values to 64-bit integer and back to floating point. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>friz</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction does not return the same value if the floating-point number is too large to fit in an integer.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mpointers-to-nested-functions</CODE></DT>
<DT><CODE>-mno-pointers-to-nested-functions</CODE></DT>
<DD><A name=index-mpointers-to-nested-functions-2290></A>Generate (do not generate) code to load up the static chain register (<VAR>r11</VAR>) when calling through a pointer on AIX and 64-bit Linux systems where a function pointer points to a 3-word descriptor giving the function address, TOC value to be loaded in register<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r2</VAR>, and static chain value to be loaded in register<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r11</VAR>. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mpointers-to-nested-functions</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is on by default. You cannot call through pointers to nested functions or pointers to functions compiled in other languages that use the static chain if you use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-pointers-to-nested-functions</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-msave-toc-indirect</CODE></DT>
<DT><CODE>-mno-save-toc-indirect</CODE></DT>
<DD><A name=index-msave-toc-indirect-2291></A>Generate (do not generate) code to save the TOC value in the reserved stack location in the function prologue if the function calls through a pointer on AIX and 64-bit Linux systems. If the TOC value is not saved in the prologue, it is saved just before the call through the pointer. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-save-toc-indirect</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is the default.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mcompat-align-parm</CODE></DT>
<DT><CODE>-mno-compat-align-parm</CODE></DT>
<DD><A name=index-mcompat-align-parm-2292></A>Generate (do not generate) code to pass structure parameters with a maximum alignment of 64 bits, for compatibility with older versions of GCC.
<P>Older versions of GCC (prior to 4.9.0) incorrectly did not align a structure parameter on a 128-bit boundary when that structure contained a member requiring 128-bit alignment. This is corrected in more recent versions of GCC. This option may be used to generate code that is compatible with functions compiled with older versions of GCC.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-compat-align-parm</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is the default.</P></DD></DL>