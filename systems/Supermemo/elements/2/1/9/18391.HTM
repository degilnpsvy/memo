<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>3.17.35 picoChip Options</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-picoChip-options-2122></A>These &#8216;<SAMP><SPAN class=samp>-m</SPAN></SAMP>&#8217; options are defined for picoChip implementations:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>-mae=</CODE><VAR>ae_type</VAR></DT>
<DD><A name=index-mcpu-2123></A>Set the instruction set, register set, and instruction scheduling parameters for array element type<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ae_type</VAR>. Supported values for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>ae_type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are &#8216;<SAMP><SPAN class=samp>ANY</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>MUL</SPAN></SAMP>&#8217;, and &#8216;<SAMP><SPAN class=samp>MAC</SPAN></SAMP>&#8217;.
<P><SAMP><SPAN class=option>-mae=ANY</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>selects a completely generic AE type. Code generated with this option runs on any of the other AE types. The code is not as efficient as it would be if compiled for a specific AE type, and some types of operation (e.g., multiplication) do not work properly on all types of AE.</P>
<P><SAMP><SPAN class=option>-mae=MUL</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>selects a MUL AE type. This is the most useful AE type for compiled code, and is the default.</P>
<P><SAMP><SPAN class=option>-mae=MAC</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>selects a DSP-style MAC AE. Code compiled with this option may suffer from poor performance of byte (char) manipulation, since the DSP AE does not provide hardware support for byte load/stores.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-msymbol-as-address</CODE></DT>
<DD>Enable the compiler to directly use a symbol name as an address in a load/store instruction, without first loading it into a register. Typically, the use of this option generates larger programs, which run faster than when the option isn't used. However, the results vary from program to program, so it is left as a user option, rather than being permanently enabled.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mno-inefficient-warnings</CODE></DT>
<DD>Disables warnings about the generation of inefficient code. These warnings can be generated, for example, when compiling code that performs byte-level memory operations on the MAC AE type. The MAC AE has no hardware support for byte-level memory operations, so all byte load/stores must be synthesized from word load/store operations. This is inefficient and a warning is generated to indicate that you should rewrite the code to avoid byte operations, or to target an AE type that has the necessary hardware support. This option disables these warnings.</DD></DL>