<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>3.17.42 SH Options</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">These &#8216;<SAMP><SPAN class=samp>-m</SPAN></SAMP>&#8217; options are defined for the SH implementations:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>-m1</CODE></DT>
<DD><A name=index-m1-2356></A>Generate code for the SH1.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-m2</CODE></DT>
<DD><A name=index-m2-2357></A>Generate code for the SH2.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-m2e</CODE></DT>
<DD>Generate code for the SH2e.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-m2a-nofpu</CODE></DT>
<DD><A name=index-m2a-nofpu-2358></A>Generate code for the SH2a without FPU, or for a SH2a-FPU in such a way that the floating-point unit is not used.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-m2a-single-only</CODE></DT>
<DD><A name=index-m2a-single-only-2359></A>Generate code for the SH2a-FPU, in such a way that no double-precision floating-point operations are used.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-m2a-single</CODE></DT>
<DD><A name=index-m2a-single-2360></A>Generate code for the SH2a-FPU assuming the floating-point unit is in single-precision mode by default.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-m2a</CODE></DT>
<DD><A name=index-m2a-2361></A>Generate code for the SH2a-FPU assuming the floating-point unit is in double-precision mode by default.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-m3</CODE></DT>
<DD><A name=index-m3-2362></A>Generate code for the SH3.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-m3e</CODE></DT>
<DD><A name=index-m3e-2363></A>Generate code for the SH3e.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-m4-nofpu</CODE></DT>
<DD><A name=index-m4-nofpu-2364></A>Generate code for the SH4 without a floating-point unit.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-m4-single-only</CODE></DT>
<DD><A name=index-m4-single-only-2365></A>Generate code for the SH4 with a floating-point unit that only supports single-precision arithmetic.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-m4-single</CODE></DT>
<DD><A name=index-m4-single-2366></A>Generate code for the SH4 assuming the floating-point unit is in single-precision mode by default.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-m4</CODE></DT>
<DD><A name=index-m4-2367></A>Generate code for the SH4.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-m4a-nofpu</CODE></DT>
<DD><A name=index-m4a-nofpu-2368></A>Generate code for the SH4al-dsp, or for a SH4a in such a way that the floating-point unit is not used.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-m4a-single-only</CODE></DT>
<DD><A name=index-m4a-single-only-2369></A>Generate code for the SH4a, in such a way that no double-precision floating-point operations are used.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-m4a-single</CODE></DT>
<DD><A name=index-m4a-single-2370></A>Generate code for the SH4a assuming the floating-point unit is in single-precision mode by default.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-m4a</CODE></DT>
<DD><A name=index-m4a-2371></A>Generate code for the SH4a.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-m4al</CODE></DT>
<DD><A name=index-m4al-2372></A>Same as<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-m4a-nofpu</SPAN></SAMP>, except that it implicitly passes<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-dsp</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to the assembler. GCC doesn't generate any DSP instructions at the moment.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mb</CODE></DT>
<DD><A name=index-mb-2373></A>Compile code for the processor in big-endian mode.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-ml</CODE></DT>
<DD><A name=index-ml-2374></A>Compile code for the processor in little-endian mode.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mdalign</CODE></DT>
<DD><A name=index-mdalign-2375></A>Align doubles at 64-bit boundaries. Note that this changes the calling conventions, and thus some functions from the standard C library do not work unless you recompile it first with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mdalign</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mrelax</CODE></DT>
<DD><A name=index-mrelax-2376></A>Shorten some address references at link time, when possible; uses the linker option<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-relax</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mbigtable</CODE></DT>
<DD><A name=index-mbigtable-2377></A>Use 32-bit offsets in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>switch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>tables. The default is to use 16-bit offsets.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mbitops</CODE></DT>
<DD><A name=index-mbitops-2378></A>Enable the use of bit manipulation instructions on SH2A.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mfmovd</CODE></DT>
<DD><A name=index-mfmovd-2379></A>Enable the use of the instruction<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fmovd</CODE>. Check<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mdalign</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>for alignment constraints.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mhitachi</CODE></DT>
<DD><A name=index-mhitachi-2380></A>Comply with the calling conventions defined by Renesas.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mrenesas</CODE></DT>
<DD><A name=index-mhitachi-2381></A>Comply with the calling conventions defined by Renesas.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mno-renesas</CODE></DT>
<DD><A name=index-mhitachi-2382></A>Comply with the calling conventions defined for GCC before the Renesas conventions were available. This option is the default for all targets of the SH toolchain.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mnomacsave</CODE></DT>
<DD><A name=index-mnomacsave-2383></A>Mark the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>MAC</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>register as call-clobbered, even if<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mhitachi</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is given.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mieee</CODE></DT>
<DT><CODE>-mno-ieee</CODE></DT>
<DD><A name=index-mieee-2384></A><A name=index-mnoieee-2385></A>Control the IEEE compliance of floating-point comparisons, which affects the handling of cases where the result of a comparison is unordered. By default<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mieee</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is implicitly enabled. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ffinite-math-only</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is enabled<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-ieee</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is implicitly set, which results in faster floating-point greater-equal and less-equal comparisons. The implcit settings can be overridden by specifying either<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mieee</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-ieee</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-minline-ic_invalidate</CODE></DT>
<DD><A name=index-minline-ic_005finvalidate-2386></A>Inline code to invalidate instruction cache entries after setting up nested function trampolines. This option has no effect if<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-musermode</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is in effect and the selected code generation option (e.g.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-m4</SPAN></SAMP>) does not allow the use of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>icbi</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction. If the selected code generation option does not allow the use of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>icbi</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-musermode</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not in effect, the inlined code manipulates the instruction cache address array directly with an associative write. This not only requires privileged mode at run time, but it also fails if the cache line had been mapped via the TLB and has become unmapped.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-misize</CODE></DT>
<DD><A name=index-misize-2387></A>Dump instruction size and location in the assembly code.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mpadstruct</CODE></DT>
<DD><A name=index-mpadstruct-2388></A>This option is deprecated. It pads structures to multiple of 4 bytes, which is incompatible with the SH ABI.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-matomic-model=</CODE><VAR>model</VAR></DT>
<DD><A name=index-matomic-model_003d_0040var_007bmodel_007d-2389></A>Sets the model of atomic operations and additional parameters as a comma separated list. For details on the atomic built-in functions see<A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/_005f_005fatomic-Builtins.html#g_t_005f_005fatomic-Builtins">__atomic Builtins</A>. The following models and parameters are supported:
<DL>
<DT>&#8216;<SAMP><SPAN class=samp>none</SPAN></SAMP>&#8217;</DT>
<DD>Disable compiler generated atomic sequences and emit library calls for atomic operations. This is the default if the target is not<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sh-*-linux*</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>soft-gusa</SPAN></SAMP>&#8217;</DT>
<DD>Generate GNU/Linux compatible gUSA software atomic sequences for the atomic built-in functions. The generated atomic sequences require additional support from the interrupt/exception handling code of the system and are only suitable for SH3* and SH4* single-core systems. This option is enabled by default when the target is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sh-*-linux*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and SH3* or SH4*. When the target is SH4A, this option will also partially utilize the hardware atomic instructions<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>movli.l</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>movco.l</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to create more efficient code, unless &#8216;<SAMP><SPAN class=samp>strict</SPAN></SAMP>&#8217; is specified.<BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>soft-tcb</SPAN></SAMP>&#8217;</DT>
<DD>Generate software atomic sequences that use a variable in the thread control block. This is a variation of the gUSA sequences which can also be used on SH1* and SH2* targets. The generated atomic sequences require additional support from the interrupt/exception handling code of the system and are only suitable for single-core systems. When using this model, the &#8216;<SAMP><SPAN class=samp>gbr-offset=</SPAN></SAMP>&#8217; parameter has to be specified as well.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>soft-imask</SPAN></SAMP>&#8217;</DT>
<DD>Generate software atomic sequences that temporarily disable interrupts by setting<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SR.IMASK = 1111</CODE>. This model works only when the program runs in privileged mode and is only suitable for single-core systems. Additional support from the interrupt/exception handling code of the system is not required. This model is enabled by default when the target is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sh-*-linux*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and SH1* or SH2*.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>hard-llcs</SPAN></SAMP>&#8217;</DT>
<DD>Generate hardware atomic sequences using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>movli.l</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>movco.l</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions only. This is only available on SH4A and is suitable for multi-core systems. Since the hardware instructions support only 32 bit atomic variables access to 8 or 16 bit variables is emulated with 32 bit accesses. Code compiled with this option will also be compatible with other software atomic model interrupt/exception handling systems if executed on an SH4A system. Additional support from the interrupt/exception handling code of the system is not required for this model.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>gbr-offset=</SPAN></SAMP>&#8217;</DT>
<DD>This parameter specifies the offset in bytes of the variable in the thread control block structure that should be used by the generated atomic sequences when the &#8216;<SAMP><SPAN class=samp>soft-tcb</SPAN></SAMP>&#8217; model has been selected. For other models this parameter is ignored. The specified value must be an integer multiple of four and in the range 0-1020.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>strict</SPAN></SAMP>&#8217;</DT>
<DD>This parameter prevents mixed usage of multiple atomic models, even though they would be compatible, and will make the compiler generate atomic sequences of the specified model only.</DD></DL><BR></DD>
<DT><CODE>-mtas</CODE></DT>
<DD><A name=index-mtas-2390></A>Generate the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tas.b</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>opcode for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__atomic_test_and_set</CODE>. Notice that depending on the particular hardware and software configuration this can degrade overall performance due to the operand cache line flushes that are implied by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tas.b</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction. On multi-core SH4A processors the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tas.b</CODE>instruction must be used with caution since it can result in data corruption for certain cache configurations.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mspace</CODE></DT>
<DD><A name=index-mspace-2391></A>Optimize for space instead of speed. Implied by<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-Os</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mprefergot</CODE></DT>
<DD><A name=index-mprefergot-2392></A>When generating position-independent code, emit function calls using the Global Offset Table instead of the Procedure Linkage Table.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-musermode</CODE></DT>
<DD><A name=index-musermode-2393></A>Don't generate privileged mode only code. This option implies<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-inline-ic_invalidate</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the inlined code would not work in user mode. This is the default when the target is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sh-*-linux*</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-multcost=</CODE><VAR>number</VAR></DT>
<DD><A name=index-multcost_003d_0040var_007bnumber_007d-2394></A>Set the cost to assume for a multiply insn.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mdiv=</CODE><VAR>strategy</VAR></DT>
<DD><A name=index-mdiv_003d_0040var_007bstrategy_007d-2395></A>Set the division strategy to be used for integer division operations. For SHmedia<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>strategy</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be one of:
<DL>
<DT>&#8216;<SAMP><SPAN class=samp>fp</SPAN></SAMP>&#8217;</DT>
<DD>Performs the operation in floating point. This has a very high latency, but needs only a few instructions, so it might be a good choice if your code has enough easily-exploitable ILP to allow the compiler to schedule the floating-point instructions together with other instructions. Division by zero causes a floating-point exception.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>inv</SPAN></SAMP>&#8217;</DT>
<DD>Uses integer operations to calculate the inverse of the divisor, and then multiplies the dividend with the inverse. This strategy allows CSE and hoisting of the inverse calculation. Division by zero calculates an unspecified result, but does not trap.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>inv:minlat</SPAN></SAMP>&#8217;</DT>
<DD>A variant of &#8216;<SAMP><SPAN class=samp>inv</SPAN></SAMP>&#8217; where, if no CSE or hoisting opportunities have been found, or if the entire operation has been hoisted to the same place, the last stages of the inverse calculation are intertwined with the final multiply to reduce the overall latency, at the expense of using a few more instructions, and thus offering fewer scheduling opportunities with other code.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>call</SPAN></SAMP>&#8217;</DT>
<DD>Calls a library function that usually implements the &#8216;<SAMP><SPAN class=samp>inv:minlat</SPAN></SAMP>&#8217; strategy. This gives high code density for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>m5-*media-nofpu</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>compilations.<BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>call2</SPAN></SAMP>&#8217;</DT>
<DD>Uses a different entry point of the same library function, where it assumes that a pointer to a lookup table has already been set up, which exposes the pointer load to CSE and code hoisting optimizations.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>inv:call</SPAN></SAMP>&#8217;</DT>
<DT>&#8216;<SAMP><SPAN class=samp>inv:call2</SPAN></SAMP>&#8217;</DT>
<DT>&#8216;<SAMP><SPAN class=samp>inv:fp</SPAN></SAMP>&#8217;</DT>
<DD>Use the &#8216;<SAMP><SPAN class=samp>inv</SPAN></SAMP>&#8217; algorithm for initial code generation, but if the code stays unoptimized, revert to the &#8216;<SAMP><SPAN class=samp>call</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>call2</SPAN></SAMP>&#8217;, or &#8216;<SAMP><SPAN class=samp>fp</SPAN></SAMP>&#8217; strategies, respectively. Note that the potentially-trapping side effect of division by zero is carried by a separate instruction, so it is possible that all the integer instructions are hoisted out, but the marker for the side effect stays where it is. A recombination to floating-point operations or a call is not possible in that case.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>inv20u</SPAN></SAMP>&#8217;</DT>
<DT>&#8216;<SAMP><SPAN class=samp>inv20l</SPAN></SAMP>&#8217;</DT>
<DD>Variants of the &#8216;<SAMP><SPAN class=samp>inv:minlat</SPAN></SAMP>&#8217; strategy. In the case that the inverse calculation is not separated from the multiply, they speed up division where the dividend fits into 20 bits (plus sign where applicable) by inserting a test to skip a number of operations in this case; this test slows down the case of larger dividends. &#8216;<SAMP><SPAN class=samp>inv20u</SPAN></SAMP>&#8217; assumes the case of a such a small dividend to be unlikely, and &#8216;<SAMP><SPAN class=samp>inv20l</SPAN></SAMP>&#8217; assumes it to be likely.</DD></DL>
<P>For targets other than SHmedia<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>strategy</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be one of:</P>
<DL>
<DT>&#8216;<SAMP><SPAN class=samp>call-div1</SPAN></SAMP>&#8217;</DT>
<DD>Calls a library function that uses the single-step division instruction<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>div1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to perform the operation. Division by zero calculates an unspecified result and does not trap. This is the default except for SH4, SH2A and SHcompact.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>call-fp</SPAN></SAMP>&#8217;</DT>
<DD>Calls a library function that performs the operation in double precision floating point. Division by zero causes a floating-point exception. This is the default for SHcompact with FPU. Specifying this for targets that do not have a double precision FPU will default to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call-div1</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT>&#8216;<SAMP><SPAN class=samp>call-table</SPAN></SAMP>&#8217;</DT>
<DD>Calls a library function that uses a lookup table for small divisors and the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>div1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction with case distinction for larger divisors. Division by zero calculates an unspecified result and does not trap. This is the default for SH4. Specifying this for targets that do not have dynamic shift instructions will default to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>call-div1</CODE>.</DD></DL>
<P>When a division strategy has not been specified the default strategy will be selected based on the current target. For SH2A the default strategy is to use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>divs</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>divu</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions instead of library function calls.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-maccumulate-outgoing-args</CODE></DT>
<DD><A name=index-maccumulate-outgoing-args-2396></A>Reserve space once for outgoing arguments in the function prologue rather than around each call. Generally beneficial for performance and size. Also needed for unwinding to avoid changing the stack frame around conditional code.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mdivsi3_libfunc=</CODE><VAR>name</VAR></DT>
<DD><A name=index-mdivsi3_005flibfunc_003d_0040var_007bname_007d-2397></A>Set the name of the library function used for 32-bit signed division to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>name</VAR>. This only affects the name used in the &#8216;<SAMP><SPAN class=samp>call</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>inv:call</SPAN></SAMP>&#8217; division strategies, and the compiler still expects the same sets of input/output/clobbered registers as if this option were not present.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mfixed-range=</CODE><VAR>register-range</VAR></DT>
<DD><A name=index-mfixed-range-2398></A>Generate code treating the given register range as fixed registers. A fixed register is one that the register allocator can not use. This is useful when compiling kernel code. A register range is specified as two registers separated by a dash. Multiple register ranges can be specified separated by a comma.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mindexed-addressing</CODE></DT>
<DD><A name=index-mindexed-addressing-2399></A>Enable the use of the indexed addressing mode for SHmedia32/SHcompact. This is only safe if the hardware and/or OS implement 32-bit wrap-around semantics for the indexed addressing mode. The architecture allows the implementation of processors with 64-bit MMU, which the OS could use to get 32-bit addressing, but since no current hardware implementation supports this or any other way to make the indexed addressing mode safe to use in the 32-bit ABI, the default is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-indexed-addressing</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mgettrcost=</CODE><VAR>number</VAR></DT>
<DD><A name=index-mgettrcost_003d_0040var_007bnumber_007d-2400></A>Set the cost assumed for the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gettr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>number</VAR>. The default is 2 if<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mpt-fixed</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is in effect, 100 otherwise.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mpt-fixed</CODE></DT>
<DD><A name=index-mpt-fixed-2401></A>Assume<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>pt*</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions won't trap. This generally generates better-scheduled code, but is unsafe on current hardware. The current architecture definition says that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ptabs</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ptrel</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>trap when the target anded with 3 is 3. This has the unintentional effect of making it unsafe to schedule these instructions before a branch, or hoist them out of a loop. For example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__do_global_ctors</CODE>, a part of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libgcc</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>that runs constructors at program startup, calls functions in a list which is delimited by &#8722;1. With the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mpt-fixed</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option, the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ptabs</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is done before testing against &#8722;1. That means that all the constructors run a bit more quickly, but when the loop comes to the end of the list, the program crashes because<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ptabs</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>loads &#8722;1 into a target register.
<P>Since this option is unsafe for any hardware implementing the current architecture specification, the default is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-pt-fixed</SPAN></SAMP>. Unless specified explicitly with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mgettrcost</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-pt-fixed</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>also implies<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mgettrcost=100</SPAN></SAMP>; this deters register allocation from using target registers for storing ordinary integers.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-minvalid-symbols</CODE></DT>
<DD><A name=index-minvalid-symbols-2402></A>Assume symbols might be invalid. Ordinary function symbols generated by the compiler are always valid to load with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>movi</CODE>/<CODE>shori</CODE>/<CODE>ptabs</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<CODE>movi</CODE>/<CODE>shori</CODE>/<CODE>ptrel</CODE>, but with assembler and/or linker tricks it is possible to generate symbols that cause<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ptabs</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ptrel</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to trap. This option is only meaningful when<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-pt-fixed</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is in effect. It prevents cross-basic-block CSE, hoisting and most scheduling of symbol loads. The default is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-invalid-symbols</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mbranch-cost=</CODE><VAR>num</VAR></DT>
<DD><A name=index-mbranch-cost_003d_0040var_007bnum_007d-2403></A>Assume<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>num</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to be the cost for a branch instruction. Higher numbers make the compiler try to generate more branch-free code if possible. If not specified the value is selected depending on the processor type that is being compiled for.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mzdcbranch</CODE></DT>
<DT><CODE>-mno-zdcbranch</CODE></DT>
<DD><A name=index-mzdcbranch-2404></A><A name=index-mno-zdcbranch-2405></A>Assume (do not assume) that zero displacement conditional branch instructions<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bt</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are fast. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mzdcbranch</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified, the compiler will try to prefer zero displacement branch code sequences. This is enabled by default when generating code for SH4 and SH4A. It can be explicitly disabled by specifying<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-zdcbranch</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mfused-madd</CODE></DT>
<DT><CODE>-mno-fused-madd</CODE></DT>
<DD><A name=index-mfused-madd-2406></A><A name=index-mno-fused-madd-2407></A>Generate code that uses (does not use) the floating-point multiply and accumulate instructions. These instructions are generated by default if hardware floating point is used. The machine-dependent<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mfused-madd</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is now mapped to the machine-independent<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ffp-contract=fast</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-fused-madd</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is mapped to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ffp-contract=off</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mfsca</CODE></DT>
<DT><CODE>-mno-fsca</CODE></DT>
<DD><A name=index-mfsca-2408></A><A name=index-mno-fsca-2409></A>Allow or disallow the compiler to emit the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fsca</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction for sine and cosine approximations. The option<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-mfsca</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be used in combination with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-funsafe-math-optimizations</CODE>. It is enabled by default when generating code for SH4A. Using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-mno-fsca</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>disables sine and cosine approximations even if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-funsafe-math-optimizations</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is in effect.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mfsrra</CODE></DT>
<DT><CODE>-mno-fsrra</CODE></DT>
<DD><A name=index-mfsrra-2410></A><A name=index-mno-fsrra-2411></A>Allow or disallow the compiler to emit the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fsrra</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction for reciprocal square root approximations. The option<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-mfsrra</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be used in combination with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-funsafe-math-optimizations</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-ffinite-math-only</CODE>. It is enabled by default when generating code for SH4A. Using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-mno-fsrra</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>disables reciprocal square root approximations even if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-funsafe-math-optimizations</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-ffinite-math-only</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are in effect.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mpretend-cmove</CODE></DT>
<DD><A name=index-mpretend-cmove-2412></A>Prefer zero-displacement conditional branches for conditional move instruction patterns. This can result in faster code on the SH4 processor.</DD></DL>