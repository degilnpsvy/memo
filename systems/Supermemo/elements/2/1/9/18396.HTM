<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>3.17.40 S/390 and zSeries Options</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-S_002f390-and-zSeries-Options-2314></A>These are the &#8216;<SAMP><SPAN class=samp>-m</SPAN></SAMP>&#8217; options defined for the S/390 and zSeries architecture.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>-mhard-float</CODE></DT>
<DT><CODE>-msoft-float</CODE></DT>
<DD><A name=index-mhard-float-2315></A><A name=index-msoft-float-2316></A>Use (do not use) the hardware floating-point instructions and registers for floating-point operations. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-msoft-float</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified, functions in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libgcc.a</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>are used to perform floating-point operations. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mhard-float</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified, the compiler generates IEEE floating-point instructions. This is the default.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mhard-dfp</CODE></DT>
<DT><CODE>-mno-hard-dfp</CODE></DT>
<DD><A name=index-mhard-dfp-2317></A><A name=index-mno-hard-dfp-2318></A>Use (do not use) the hardware decimal-floating-point instructions for decimal-floating-point operations. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-hard-dfp</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified, functions in<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=file>libgcc.a</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>are used to perform decimal-floating-point operations. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mhard-dfp</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified, the compiler generates decimal-floating-point hardware instructions. This is the default for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march=z9-ec</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or higher.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mlong-double-64</CODE></DT>
<DT><CODE>-mlong-double-128</CODE></DT>
<DD><A name=index-mlong-double-64-2319></A><A name=index-mlong-double-128-2320></A>These switches control the size of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long double</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>type. A size of 64 bits makes the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long double</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>type equivalent to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>double</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>type. This is the default.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mbackchain</CODE></DT>
<DT><CODE>-mno-backchain</CODE></DT>
<DD><A name=index-mbackchain-2321></A><A name=index-mno-backchain-2322></A>Store (do not store) the address of the caller's frame as backchain pointer into the callee's stack frame. A backchain may be needed to allow debugging using tools that do not understand DWARF 2 call frame information. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-packed-stack</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is in effect, the backchain pointer is stored at the bottom of the stack frame; when<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mpacked-stack</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is in effect, the backchain is placed into the topmost word of the 96/160 byte register save area.
<P>In general, code compiled with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mbackchain</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is call-compatible with code compiled with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mmo-backchain</SPAN></SAMP>; however, use of the backchain for debugging purposes usually requires that the whole binary is built with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mbackchain</SPAN></SAMP>. Note that the combination of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mbackchain</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mpacked-stack</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mhard-float</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not supported. In order to build a linux kernel use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-msoft-float</SPAN></SAMP>.</P>
<P>The default is to not maintain the backchain.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-mpacked-stack</CODE></DT>
<DT><CODE>-mno-packed-stack</CODE></DT>
<DD><A name=index-mpacked-stack-2323></A><A name=index-mno-packed-stack-2324></A>Use (do not use) the packed stack layout. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-packed-stack</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified, the compiler uses the all fields of the 96/160 byte register save area only for their default purpose; unused fields still take up stack space. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mpacked-stack</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified, register save slots are densely packed at the top of the register save area; unused space is reused for other purposes, allowing for more efficient use of the available stack space. However, when<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mbackchain</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is also in effect, the topmost word of the save area is always used to store the backchain, and the return address register is always saved two words below the backchain.
<P>As long as the stack frame backchain is not used, code generated with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mpacked-stack</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is call-compatible with code generated with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-packed-stack</SPAN></SAMP>. Note that some non-FSF releases of GCC 2.95 for S/390 or zSeries generated code that uses the stack frame backchain at run time, not just for debugging purposes. Such code is not call-compatible with code compiled with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mpacked-stack</SPAN></SAMP>. Also, note that the combination of<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mbackchain</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mpacked-stack</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mhard-float</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not supported. In order to build a linux kernel use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-msoft-float</SPAN></SAMP>.</P>
<P>The default is to not use the packed stack layout.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>-msmall-exec</CODE></DT>
<DT><CODE>-mno-small-exec</CODE></DT>
<DD><A name=index-msmall-exec-2325></A><A name=index-mno-small-exec-2326></A>Generate (or do not generate) code using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bras</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction to do subroutine calls. This only works reliably if the total executable size does not exceed 64k. The default is to use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>basr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction instead, which does not have this limitation.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-m64</CODE></DT>
<DT><CODE>-m31</CODE></DT>
<DD><A name=index-m64-2327></A><A name=index-m31-2328></A>When<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-m31</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified, generate code compliant to the GNU/Linux for S/390 ABI. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-m64</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified, generate code compliant to the GNU/Linux for zSeries ABI. This allows GCC in particular to generate 64-bit instructions. For the &#8216;<SAMP><SPAN class=samp>s390</SPAN></SAMP>&#8217; targets, the default is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-m31</SPAN></SAMP>, while the &#8216;<SAMP><SPAN class=samp>s390x</SPAN></SAMP>&#8217; targets default to<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-m64</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mzarch</CODE></DT>
<DT><CODE>-mesa</CODE></DT>
<DD><A name=index-mzarch-2329></A><A name=index-mesa-2330></A>When<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mzarch</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified, generate code using the instructions available on z/Architecture. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mesa</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified, generate code using the instructions available on ESA/390. Note that<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mesa</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not possible with<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-m64</SPAN></SAMP>. When generating code compliant to the GNU/Linux for S/390 ABI, the default is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mesa</SPAN></SAMP>. When generating code compliant to the GNU/Linux for zSeries ABI, the default is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mzarch</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mmvcle</CODE></DT>
<DT><CODE>-mno-mvcle</CODE></DT>
<DD><A name=index-mmvcle-2331></A><A name=index-mno-mvcle-2332></A>Generate (or do not generate) code using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mvcle</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction to perform block moves. When<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-mvcle</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified, use a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mvc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>loop instead. This is the default unless optimizing for size.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mdebug</CODE></DT>
<DT><CODE>-mno-debug</CODE></DT>
<DD><A name=index-mdebug-2333></A><A name=index-mno-debug-2334></A>Print (or do not print) additional debug information when compiling. The default is to not print debug information.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-march=</CODE><VAR>cpu-type</VAR></DT>
<DD><A name=index-march-2335></A>Generate code that runs on<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cpu-type</VAR>, which is the name of a system representing a certain processor type. Possible values for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cpu-type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are &#8216;<SAMP><SPAN class=samp>g5</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>g6</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>z900</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>z990</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>z9-109</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>z9-ec</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>z10</SPAN></SAMP>&#8217;. When generating code using the instructions available on z/Architecture, the default is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march=z900</SPAN></SAMP>. Otherwise, the default is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march=g5</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mtune=</CODE><VAR>cpu-type</VAR></DT>
<DD><A name=index-mtune-2336></A>Tune to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cpu-type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>everything applicable about the generated code, except for the ABI and the set of available instructions. The list of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>cpu-type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>values is the same as for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march</SPAN></SAMP>. The default is the value used for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-march</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mtpf-trace</CODE></DT>
<DT><CODE>-mno-tpf-trace</CODE></DT>
<DD><A name=index-mtpf-trace-2337></A><A name=index-mno-tpf-trace-2338></A>Generate code that adds (does not add) in TPF OS specific branches to trace routines in the operating system. This option is off by default, even when compiling for the TPF OS.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mfused-madd</CODE></DT>
<DT><CODE>-mno-fused-madd</CODE></DT>
<DD><A name=index-mfused-madd-2339></A><A name=index-mno-fused-madd-2340></A>Generate code that uses (does not use) the floating-point multiply and accumulate instructions. These instructions are generated by default if hardware floating point is used.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mwarn-framesize=</CODE><VAR>framesize</VAR></DT>
<DD><A name=index-mwarn-framesize-2341></A>Emit a warning if the current function exceeds the given frame size. Because this is a compile-time check it doesn't need to be a real problem when the program runs. It is intended to identify functions that most probably cause a stack overflow. It is useful to be used in an environment with limited stack size e.g. the linux kernel.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mwarn-dynamicstack</CODE></DT>
<DD><A name=index-mwarn-dynamicstack-2342></A>Emit a warning if the function calls<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>alloca</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or uses dynamically-sized arrays. This is generally a bad idea with a limited stack size.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mstack-guard=</CODE><VAR>stack-guard</VAR></DT>
<DT><CODE>-mstack-size=</CODE><VAR>stack-size</VAR></DT>
<DD><A name=index-mstack-guard-2343></A><A name=index-mstack-size-2344></A>If these options are provided the S/390 back end emits additional instructions in the function prologue that trigger a trap if the stack size is<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stack-guard</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes above the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stack-size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(remember that the stack on S/390 grows downward). If the<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stack-guard</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is omitted the smallest power of 2 larger than the frame size of the compiled function is chosen. These options are intended to be used to help debugging stack overflow problems. The additionally emitted code causes only little overhead and hence can also be used in production-like systems without greater performance degradation. The given values have to be exact powers of 2 and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stack-size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>has to be greater than<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stack-guard</VAR>without exceeding 64k. In order to be efficient the extra code makes the assumption that the stack starts at an address aligned to the value given by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stack-size</VAR>. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stack-guard</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>option can only be used in conjunction with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>stack-size</VAR>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mhotpatch[=</CODE><VAR>halfwords</VAR><CODE>]</CODE></DT>
<DT><CODE>-mno-hotpatch</CODE></DT>
<DD><A name=index-mhotpatch-2345></A>If the hotpatch option is enabled, a &#8220;hot-patching&#8221; function prologue is generated for all functions in the compilation unit. The funtion label is prepended with the given number of two-byte Nop instructions (<VAR>halfwords</VAR>, maximum 1000000) or 12 Nop instructions if no argument is present. Functions with a hot-patching prologue are never inlined automatically, and a hot-patching prologue is never generated for functions functions that are explicitly inline.
<P>This option can be overridden for individual functions with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hotpatch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>attribute.</P></DD></DL>