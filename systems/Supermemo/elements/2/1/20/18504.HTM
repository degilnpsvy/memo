<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.44.1 Defining Global Register Variables</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-global-register-variables-3137></A><A name=index-registers_002c-global-variables-in-3138></A>You can define a global register variable in GNU C like this:</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     register int *foo asm ("a5");
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=noindent>Here<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>a5</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the name of the register that should be used. Choose a register that is normally saved and restored by function calls on your machine, so that library routines will not clobber it.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Naturally the register name is cpu-dependent, so you need to conditionalize your program according to cpu type. The register<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>a5</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a good choice on a 68000 for a variable of pointer type. On machines with register windows, be sure to choose a &#8220;global&#8221; register that is not affected magically by the function call mechanism.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In addition, different operating systems on the same CPU may differ in how they name the registers; then you need additional conditionals. For example, some 68000 operating systems call this register<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%a5</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Eventually there may be a way of asking the compiler to choose a register automatically, but first we need to figure out how it should choose and how to enable you to guide the choice. No solution is evident.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Defining a global register variable in a certain register reserves that register entirely for this use, at least within the current compilation. The register is not allocated for any other purpose in the functions in the current compilation, and is not saved and restored by these functions. Stores into this register are never deleted even if they appear to be dead, but references may be deleted or moved or simplified.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">It is not safe to access the global register variables from signal handlers, or from more than one thread of control, because the system library routines may temporarily use the register for other things (unless you recompile them specially for the task at hand).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-g_t_0040code_007bqsort_007d_002c-and-global-register-variables-3139></A>It is not safe for one function that uses a global register variable to call another such function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>foo</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>by way of a third function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lose</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that is compiled without knowledge of this variable (i.e. in a different source file in which the variable isn't declared). This is because<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lose</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>might save the register and put some other value there. For example, you can't expect a global register variable to be available in the comparison-function that you pass to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>qsort</CODE>, since<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>qsort</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>might have put something else in that register. (If you are prepared to recompile<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>qsort</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with the same global register variable, you can solve this problem.)</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If you want to recompile<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>qsort</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or other source files that do not actually use your global register variable, so that they do not use that register for any other purpose, then it suffices to specify the compiler option<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ffixed-</SPAN><VAR>reg</VAR></SAMP>. You need not actually add a global register declaration to their source code.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A function that can alter the value of a global register variable cannot safely be called from a function compiled without this variable, because it could clobber the value the caller expects to find there on return. Therefore, the function that is the entry point into the part of the program that uses the global register variable must explicitly save and restore the value that belongs to its caller.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-register-variable-after-_0040code_007blongjmp_007d-3140></A><A name=index-global-register-after-_0040code_007blongjmp_007d-3141></A><A name=index-value-after-_0040code_007blongjmp_007d-3142></A><A name=index-longjmp-3143></A><A name=index-setjmp-3144></A>On most machines,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>longjmp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>restores to each global register variable the value it had at the time of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setjmp</CODE>. On some machines, however,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>longjmp</CODE>does not change the value of global register variables. To be portable, the function that called<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>setjmp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>should make other arrangements to save the values of the global register variables, and to restore them in a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>longjmp</CODE>. This way, the same thing happens regardless of what<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>longjmp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>does.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">All global register variable declarations must precede all function definitions. If such a declaration could appear after function definitions, the declaration would be too late to prevent the register from being used for other purposes in the preceding functions.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Global register variables may not have initial values, because an executable file has no means to supply initial contents for a register.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">On the SPARC, there are reports that g3<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=dots>...</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>g7 are suitable registers, but certain library functions, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>getwd</CODE>, as well as the subroutines for division and remainder, modify g3 and g4. g1 and g2 are local temporaries.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">On the 68000, a2<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=dots>...</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>a5 should be suitable, as should d2<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=dots>...</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>d7. Of course, it does not do to use more than a few of those.