<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>6.48 Getting the Return or Frame Address of a Function</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">These functions may be used to get information about the callers of a function.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=defun>&#8212; Built-in Function: void *<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_return_address</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>unsigned int level</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005freturn_005faddress-3155></A></VAR><BR>
<BLOCKQUOTE>
<P>This function returns the return address of the current function, or of one of its callers. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>level</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument is number of frames to scan up the call stack. A value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>yields the return address of the current function, a value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>yields the return address of the caller of the current function, and so forth. When inlining the expected behavior is that the function returns the address of the function that is returned to. To work around this behavior use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>noinline</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function attribute.</P>
<P>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>level</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>argument must be a constant integer.</P>
<P>On some machines it may be impossible to determine the return address of any function other than the current one; in such cases, or when the top of the stack has been reached, this function returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or a random value. In addition,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_frame_address</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be used to determine if the top of the stack has been reached.</P>
<P>Additional post-processing of the returned value may be needed, see<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_extract_return_addr</CODE>.</P>
<P>This function should only be used with a nonzero argument for debugging purposes.</P></BLOCKQUOTE></DIV>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=defun>&#8212; Built-in Function: void *<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_extract_return_addr</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>void *addr</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fextract_005freturn_005faddr-3156></A></VAR><BR>
<BLOCKQUOTE>
<P>The address as returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_return_address</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may have to be fed through this function to get the actual encoded address. For example, on the 31-bit S/390 platform the highest bit has to be masked out, or on SPARC platforms an offset has to be added for the true next instruction to be executed.</P>
<P>If no fixup is needed, this function simply passes through<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>addr</VAR>.</P></BLOCKQUOTE></DIV>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=defun>&#8212; Built-in Function: void *<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_frob_return_address</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>void *addr</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005ffrob_005freturn_005faddress-3157></A></VAR><BR>
<BLOCKQUOTE>
<P>This function does the reverse of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_extract_return_addr</CODE>.</P></BLOCKQUOTE></DIV>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=defun>&#8212; Built-in Function: void *<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_frame_address</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>unsigned int level</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fframe_005faddress-3158></A></VAR><BR>
<BLOCKQUOTE>
<P>This function is similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_return_address</CODE>, but it returns the address of the function frame rather than the return address of the function. Calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_frame_address</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with a value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>yields the frame address of the current function, a value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>yields the frame address of the caller of the current function, and so forth.</P>
<P>The frame is the area on the stack that holds local variables and saved registers. The frame address is normally the address of the first word pushed on to the stack by the function. However, the exact definition depends upon the processor and the calling convention. If the processor has a dedicated frame pointer register, and the function has a frame, then<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_frame_address</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the value of the frame pointer register.</P>
<P>On some machines it may be impossible to determine the frame address of any function other than the current one; in such cases, or when the top of the stack has been reached, this function returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if the first frame pointer is properly initialized by the startup code.</P>
<P>This function should only be used with a nonzero argument for debugging purposes.</P></BLOCKQUOTE></DIV>