<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>6.47 Function Names as Strings</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-g_t_0040code_007b_005f_005ffunc_005f_005f_007d-identifier-3152></A><A name=index-g_t_0040code_007b_005f_005fFUNCTION_005f_005f_007d-identifier-3153></A><A name=index-g_t_0040code_007b_005f_005fPRETTY_005fFUNCTION_005f_005f_007d-identifier-3154></A>GCC provides three magic variables that hold the name of the current function, as a string. The first of these is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__func__</CODE>, which is part of the C99 standard:</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The identifier<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__func__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is implicitly declared by the translator as if, immediately following the opening brace of each function definition, the declaration</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     static const char __func__[] = "function-name";
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=noindent>appeared, where function-name is the name of the lexically-enclosing function. This name is the unadorned name of the function.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>__FUNCTION__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is another name for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__func__</CODE>. Older versions of GCC recognize only this name. However, it is not standardized. For maximum portability, we recommend you use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__func__</CODE>, but provide a fallback definition with the preprocessor:</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     #if __STDC_VERSION__ &lt; 199901L
     # if __GNUC__ &gt;= 2
     #  define __func__ __FUNCTION__
     # else
     #  define __func__ "&lt;unknown&gt;"
     # endif
     #endif
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In C,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__PRETTY_FUNCTION__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is yet another name for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__func__</CODE>. However, in C++,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__PRETTY_FUNCTION__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>contains the type signature of the function as well as its bare name. For example, this program:</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     extern "C" {
     extern int printf (char *, ...);
     }
     
     class a {
      public:
       void sub (int i)
         {
           printf ("__FUNCTION__ = %s\n", __FUNCTION__);
           printf ("__PRETTY_FUNCTION__ = %s\n", __PRETTY_FUNCTION__);
         }
     };
     
     int
     main (void)
     {
       a ax;
       ax.sub (0);
       return 0;
     }
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=noindent>gives this output:</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     __FUNCTION__ = sub
     __PRETTY_FUNCTION__ = void a::sub(int)
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">These identifiers are not preprocessor macros. In GCC 3.3 and earlier, in C only,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__FUNCTION__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__PRETTY_FUNCTION__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>were treated as string literals; they could be used to initialize<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>arrays, and they could be concatenated with other string literals. GCC 3.4 and later treat them as variables, like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__func__</CODE>. In C++,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__FUNCTION__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__PRETTY_FUNCTION__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>have always been variables.