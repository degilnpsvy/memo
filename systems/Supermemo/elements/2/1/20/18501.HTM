<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.42.4 Constraints for Particular Machines</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-machine-specific-constraints-3128></A><A name=index-constraints_002c-machine-specific-3129></A>Whenever possible, you should use the general-purpose constraint letters in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>arguments, since they will convey meaning more readily to people reading your code. Failing that, use the constraint letters that usually have very similar meanings across architectures. The most commonly used constraints are &#8216;<SAMP><SPAN class=samp>m</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>r</SPAN></SAMP>&#8217; (for memory and general-purpose registers respectively; see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Simple-Constraints.html#Simple-Constraints">Simple Constraints</A>), and &#8216;<SAMP><SPAN class=samp>I</SPAN></SAMP>&#8217;, usually the letter indicating the most common immediate-constant format.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Each architecture defines additional constraints. These constraints are used by the compiler itself for instruction generation, as well as for<CODE>asm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>statements; therefore, some of the constraints are not particularly useful for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asm</CODE>. Here is a summary of some of the machine-dependent constraints available on some particular machines; it includes both constraints that are useful for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and constraints that aren't. The compiler source file mentioned in the table heading for each architecture is the definitive reference for the meanings of that architecture's constraints.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><EM>AArch64 family&#8212;</EM><SAMP><SPAN class=file>config/aarch64/constraints.md</SPAN></SAMP></DT>
<DD>
<DL>
<DT><CODE>k</CODE></DT>
<DD>The stack pointer register (<CODE>SP</CODE>)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>w</CODE></DT>
<DD>Floating point or SIMD vector register<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>I</CODE></DT>
<DD>Integer constant that is valid as an immediate operand in an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ADD</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>J</CODE></DT>
<DD>Integer constant that is valid as an immediate operand in a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SUB</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction (once negated)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>K</CODE></DT>
<DD>Integer constant that can be used with a 32-bit logical instruction<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>L</CODE></DT>
<DD>Integer constant that can be used with a 64-bit logical instruction<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>M</CODE></DT>
<DD>Integer constant that is valid as an immediate operand in a 32-bit<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>MOV</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>pseudo instruction. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>MOV</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be assembled to one of several different machine instructions depending on the value<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>N</CODE></DT>
<DD>Integer constant that is valid as an immediate operand in a 64-bit<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>MOV</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>pseudo instruction<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>S</CODE></DT>
<DD>An absolute symbolic address or a label reference<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Y</CODE></DT>
<DD>Floating point constant zero<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Z</CODE></DT>
<DD>Integer constant zero<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Ush</CODE></DT>
<DD>The high part (bits 12 and upwards) of the pc-relative address of a symbol within 4GB of the instruction<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Q</CODE></DT>
<DD>A memory address which uses a single base register with no offset<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Ump</CODE></DT>
<DD>A memory address suitable for a load/store pair instruction in SI, DI, SF and DF modes</DD></DL><BR></DD>
<DT><EM>ARC &#8212;</EM><SAMP><SPAN class=file>config/arc/constraints.md</SPAN></SAMP></DT>
<DD>
<DL>
<DT><CODE>q</CODE></DT>
<DD>Registers usable in ARCompact 16-bit instructions:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>r0</CODE>-<CODE>r3</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>r12</CODE>-<CODE>r15</CODE>. This constraint can only match when the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mq</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is in effect.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>e</CODE></DT>
<DD>Registers usable as base-regs of memory addresses in ARCompact 16-bit memory instructions:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>r0</CODE>-<CODE>r3</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>r12</CODE>-<CODE>r15</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sp</CODE>. This constraint can only match when the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mq</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is in effect.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>D</CODE></DT>
<DD>ARC FPX (dpfp) 64-bit registers.<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>D0</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>D1</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>I</CODE></DT>
<DD>A signed 12-bit integer constant.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Cal</CODE></DT>
<DD>constant for arithmetic/logical operations. This might be any constant that can be put into a long immediate by the assmbler or linker without involving a PIC relocation.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>K</CODE></DT>
<DD>A 3-bit unsigned integer constant.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>L</CODE></DT>
<DD>A 6-bit unsigned integer constant.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>CnL</CODE></DT>
<DD>One's complement of a 6-bit unsigned integer constant.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>CmL</CODE></DT>
<DD>Two's complement of a 6-bit unsigned integer constant.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>M</CODE></DT>
<DD>A 5-bit unsigned integer constant.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>O</CODE></DT>
<DD>A 7-bit unsigned integer constant.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>P</CODE></DT>
<DD>A 8-bit unsigned integer constant.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>H</CODE></DT>
<DD>Any const_double value.</DD></DL><BR></DD>
<DT><EM>ARM family&#8212;</EM><SAMP><SPAN class=file>config/arm/constraints.md</SPAN></SAMP></DT>
<DD>
<DL>
<DT><CODE>w</CODE></DT>
<DD>VFP floating-point register<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>G</CODE></DT>
<DD>The floating-point constant 0.0<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>I</CODE></DT>
<DD>Integer that is valid as an immediate operand in a data processing instruction. That is, an integer in the range 0 to 255 rotated by a multiple of 2<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>J</CODE></DT>
<DD>Integer in the range &#8722;4095 to 4095<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>K</CODE></DT>
<DD>Integer that satisfies constraint &#8216;<SAMP><SPAN class=samp>I</SPAN></SAMP>&#8217; when inverted (ones complement)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>L</CODE></DT>
<DD>Integer that satisfies constraint &#8216;<SAMP><SPAN class=samp>I</SPAN></SAMP>&#8217; when negated (twos complement)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>M</CODE></DT>
<DD>Integer in the range 0 to 32<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Q</CODE></DT>
<DD>A memory reference where the exact address is in a single register (`&#8216;<SAMP><SPAN class=samp>m</SPAN></SAMP>&#8217;' is preferable for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>statements)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>R</CODE></DT>
<DD>An item in the constant pool<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>S</CODE></DT>
<DD>A symbol in the text segment of the current file<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Uv</CODE></DT>
<DD>A memory reference suitable for VFP load/store insns (reg+constant offset)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Uy</CODE></DT>
<DD>A memory reference suitable for iWMMXt load/store instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Uq</CODE></DT>
<DD>A memory reference suitable for the ARMv4 ldrsb instruction.</DD></DL><BR></DD>
<DT><EM>AVR family&#8212;</EM><SAMP><SPAN class=file>config/avr/constraints.md</SPAN></SAMP></DT>
<DD>
<DL>
<DT><CODE>l</CODE></DT>
<DD>Registers from r0 to r15<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>a</CODE></DT>
<DD>Registers from r16 to r23<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>d</CODE></DT>
<DD>Registers from r16 to r31<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>w</CODE></DT>
<DD>Registers from r24 to r31. These registers can be used in &#8216;<SAMP><SPAN class=samp>adiw</SPAN></SAMP>&#8217; command<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>e</CODE></DT>
<DD>Pointer register (r26&#8211;r31)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>b</CODE></DT>
<DD>Base pointer register (r28&#8211;r31)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>q</CODE></DT>
<DD>Stack pointer register (SPH:SPL)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>t</CODE></DT>
<DD>Temporary register r0<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>x</CODE></DT>
<DD>Register pair X (r27:r26)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>y</CODE></DT>
<DD>Register pair Y (r29:r28)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>z</CODE></DT>
<DD>Register pair Z (r31:r30)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>I</CODE></DT>
<DD>Constant greater than &#8722;1, less than 64<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>J</CODE></DT>
<DD>Constant greater than &#8722;64, less than 1<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>K</CODE></DT>
<DD>Constant integer 2<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>L</CODE></DT>
<DD>Constant integer 0<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>M</CODE></DT>
<DD>Constant that fits in 8 bits<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>N</CODE></DT>
<DD>Constant integer &#8722;1<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>O</CODE></DT>
<DD>Constant integer 8, 16, or 24<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>P</CODE></DT>
<DD>Constant integer 1<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>G</CODE></DT>
<DD>A floating point constant 0.0<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Q</CODE></DT>
<DD>A memory address based on Y or Z pointer with displacement.</DD></DL><BR></DD>
<DT><EM>Epiphany&#8212;</EM><SAMP><SPAN class=file>config/epiphany/constraints.md</SPAN></SAMP></DT>
<DD>
<DL>
<DT><CODE>U16</CODE></DT>
<DD>An unsigned 16-bit constant.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>K</CODE></DT>
<DD>An unsigned 5-bit constant.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>L</CODE></DT>
<DD>A signed 11-bit constant.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Cm1</CODE></DT>
<DD>A signed 11-bit constant added to &#8722;1. Can only match when the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-m1reg-</SPAN><VAR>reg</VAR></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is active.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Cl1</CODE></DT>
<DD>Left-shift of &#8722;1, i.e., a bit mask with a block of leading ones, the rest being a block of trailing zeroes. Can only match when the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-m1reg-</SPAN><VAR>reg</VAR></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is active.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Cr1</CODE></DT>
<DD>Right-shift of &#8722;1, i.e., a bit mask with a trailing block of ones, the rest being zeroes. Or to put it another way, one less than a power of two. Can only match when the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-m1reg-</SPAN><VAR>reg</VAR></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option is active.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Cal</CODE></DT>
<DD>Constant for arithmetic/logical operations. This is like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>i</CODE>, except that for position independent code, no symbols / expressions needing relocations are allowed.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Csy</CODE></DT>
<DD>Symbolic constant for call/jump instruction.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Rcs</CODE></DT>
<DD>The register class usable in short insns. This is a register class constraint, and can thus drive register allocation. This constraint won't match unless<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mprefer-short-insn-regs</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is in effect.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Rsc</CODE></DT>
<DD>The the register class of registers that can be used to hold a sibcall call address. I.e., a caller-saved register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Rct</CODE></DT>
<DD>Core control register class.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Rgs</CODE></DT>
<DD>The register group usable in short insns. This constraint does not use a register class, so that it only passively matches suitable registers, and doesn't drive register allocation.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Rra</CODE></DT>
<DD>Matches the return address if it can be replaced with the link register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Rcc</CODE></DT>
<DD>Matches the integer condition code register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Sra</CODE></DT>
<DD>Matches the return address if it is in a stack slot.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Cfm</CODE></DT>
<DD>Matches control register values to switch fp mode, which are encapsulated in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>UNSPEC_FP_MODE</CODE>.</DD></DL><BR></DD>
<DT><EM>CR16 Architecture&#8212;</EM><SAMP><SPAN class=file>config/cr16/cr16.h</SPAN></SAMP></DT>
<DD>
<DL>
<DT><CODE>b</CODE></DT>
<DD>Registers from r0 to r14 (registers without stack pointer)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>t</CODE></DT>
<DD>Register from r0 to r11 (all 16-bit registers)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>p</CODE></DT>
<DD>Register from r12 to r15 (all 32-bit registers)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>I</CODE></DT>
<DD>Signed constant that fits in 4 bits<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>J</CODE></DT>
<DD>Signed constant that fits in 5 bits<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>K</CODE></DT>
<DD>Signed constant that fits in 6 bits<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>L</CODE></DT>
<DD>Unsigned constant that fits in 4 bits<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>M</CODE></DT>
<DD>Signed constant that fits in 32 bits<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>N</CODE></DT>
<DD>Check for 64 bits wide constants for add/sub instructions<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>G</CODE></DT>
<DD>Floating point constant that is legal for store immediate</DD></DL><BR></DD>
<DT><EM>Hewlett-Packard PA-RISC&#8212;</EM><SAMP><SPAN class=file>config/pa/pa.h</SPAN></SAMP></DT>
<DD>
<DL>
<DT><CODE>a</CODE></DT>
<DD>General register 1<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>f</CODE></DT>
<DD>Floating point register<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>q</CODE></DT>
<DD>Shift amount register<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>x</CODE></DT>
<DD>Floating point register (deprecated)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>y</CODE></DT>
<DD>Upper floating point register (32-bit), floating point register (64-bit)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Z</CODE></DT>
<DD>Any register<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>I</CODE></DT>
<DD>Signed 11-bit integer constant<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>J</CODE></DT>
<DD>Signed 14-bit integer constant<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>K</CODE></DT>
<DD>Integer constant that can be deposited with a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>zdepi</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>L</CODE></DT>
<DD>Signed 5-bit integer constant<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>M</CODE></DT>
<DD>Integer constant 0<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>N</CODE></DT>
<DD>Integer constant that can be loaded with a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ldil</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>O</CODE></DT>
<DD>Integer constant whose value plus one is a power of 2<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>P</CODE></DT>
<DD>Integer constant that can be used for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>and</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>operations in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>depi</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>extru</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>S</CODE></DT>
<DD>Integer constant 31<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>U</CODE></DT>
<DD>Integer constant 63<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>G</CODE></DT>
<DD>Floating-point constant 0.0<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>A</CODE></DT>
<DD>A<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lo_sum</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>data-linkage-table memory operand<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Q</CODE></DT>
<DD>A memory operand that can be used as the destination operand of an integer store instruction<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>R</CODE></DT>
<DD>A scaled or unscaled indexed memory operand<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>T</CODE></DT>
<DD>A memory operand for floating-point loads and stores<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>W</CODE></DT>
<DD>A register indirect memory operand</DD></DL><BR></DD>
<DT><EM>picoChip family&#8212;</EM><SAMP><SPAN class=file>picochip.h</SPAN></SAMP></DT>
<DD>
<DL>
<DT><CODE>k</CODE></DT>
<DD>Stack register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>f</CODE></DT>
<DD>Pointer register. A register which can be used to access memory without supplying an offset. Any other register can be used to access memory, but will need a constant offset. In the case of the offset being zero, it is more efficient to use a pointer register, since this reduces code size.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>t</CODE></DT>
<DD>A twin register. A register which may be paired with an adjacent register to create a 32-bit register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>a</CODE></DT>
<DD>Any absolute memory address (e.g., symbolic constant, symbolic constant + offset).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>I</CODE></DT>
<DD>4-bit signed integer.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>J</CODE></DT>
<DD>4-bit unsigned integer.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>K</CODE></DT>
<DD>8-bit signed integer.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>M</CODE></DT>
<DD>Any constant whose absolute value is no greater than 4-bits.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>N</CODE></DT>
<DD>10-bit signed integer<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>O</CODE></DT>
<DD>16-bit signed integer.</DD></DL><BR></DD>
<DT><EM>PowerPC and IBM RS6000&#8212;</EM><SAMP><SPAN class=file>config/rs6000/constraints.md</SPAN></SAMP></DT>
<DD>
<DL>
<DT><CODE>b</CODE></DT>
<DD>Address base register<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>d</CODE></DT>
<DD>Floating point register (containing 64-bit value)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>f</CODE></DT>
<DD>Floating point register (containing 32-bit value)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>v</CODE></DT>
<DD>Altivec vector register<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>wa</CODE></DT>
<DD>Any VSX register if the -mvsx option was used or NO_REGS.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>wd</CODE></DT>
<DD>VSX vector register to hold vector double data or NO_REGS.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>wf</CODE></DT>
<DD>VSX vector register to hold vector float data or NO_REGS.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>wg</CODE></DT>
<DD>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mmfpgpr</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>was used, a floating point register or NO_REGS.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>wl</CODE></DT>
<DD>Floating point register if the LFIWAX instruction is enabled or NO_REGS.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>wm</CODE></DT>
<DD>VSX register if direct move instructions are enabled, or NO_REGS.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>wn</CODE></DT>
<DD>No register (NO_REGS).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>wr</CODE></DT>
<DD>General purpose register if 64-bit instructions are enabled or NO_REGS.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>ws</CODE></DT>
<DD>VSX vector register to hold scalar double values or NO_REGS.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>wt</CODE></DT>
<DD>VSX vector register to hold 128 bit integer or NO_REGS.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>wu</CODE></DT>
<DD>Altivec register to use for float/32-bit int loads/stores or NO_REGS.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>wv</CODE></DT>
<DD>Altivec register to use for double loads/stores or NO_REGS.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>ww</CODE></DT>
<DD>FP or VSX register to perform float operations under<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mvsx</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or NO_REGS.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>wx</CODE></DT>
<DD>Floating point register if the STFIWX instruction is enabled or NO_REGS.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>wy</CODE></DT>
<DD>VSX vector register to hold scalar float values or NO_REGS.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>wz</CODE></DT>
<DD>Floating point register if the LFIWZX instruction is enabled or NO_REGS.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>wD</CODE></DT>
<DD>Int constant that is the element number of the 64-bit scalar in a vector.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>wQ</CODE></DT>
<DD>A memory address that will work with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lq</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stq</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>h</CODE></DT>
<DD>&#8216;<SAMP><SPAN class=samp>MQ</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>CTR</SPAN></SAMP>&#8217;, or &#8216;<SAMP><SPAN class=samp>LINK</SPAN></SAMP>&#8217; register<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>q</CODE></DT>
<DD>&#8216;<SAMP><SPAN class=samp>MQ</SPAN></SAMP>&#8217; register<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>c</CODE></DT>
<DD>&#8216;<SAMP><SPAN class=samp>CTR</SPAN></SAMP>&#8217; register<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>l</CODE></DT>
<DD>&#8216;<SAMP><SPAN class=samp>LINK</SPAN></SAMP>&#8217; register<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>x</CODE></DT>
<DD>&#8216;<SAMP><SPAN class=samp>CR</SPAN></SAMP>&#8217; register (condition register) number 0<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>y</CODE></DT>
<DD>&#8216;<SAMP><SPAN class=samp>CR</SPAN></SAMP>&#8217; register (condition register)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>z</CODE></DT>
<DD>&#8216;<SAMP><SPAN class=samp>XER[CA]</SPAN></SAMP>&#8217; carry bit (part of the XER register)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>I</CODE></DT>
<DD>Signed 16-bit constant<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>J</CODE></DT>
<DD>Unsigned 16-bit constant shifted left 16 bits (use &#8216;<SAMP><SPAN class=samp>L</SPAN></SAMP>&#8217; instead for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SImode</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>constants)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>K</CODE></DT>
<DD>Unsigned 16-bit constant<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>L</CODE></DT>
<DD>Signed 16-bit constant shifted left 16 bits<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>M</CODE></DT>
<DD>Constant larger than 31<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>N</CODE></DT>
<DD>Exact power of 2<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>O</CODE></DT>
<DD>Zero<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>P</CODE></DT>
<DD>Constant whose negation is a signed 16-bit constant<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>G</CODE></DT>
<DD>Floating point constant that can be loaded into a register with one instruction per word<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>H</CODE></DT>
<DD>Integer/Floating point constant that can be loaded into a register using three instructions<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>m</CODE></DT>
<DD>Memory operand. Normally,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>m</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not allow addresses that update the base register. If &#8216;<SAMP><SPAN class=samp>&lt;</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>&gt;</SPAN></SAMP>&#8217; constraint is also used, they are allowed and therefore on PowerPC targets in that case it is only safe to use &#8216;<SAMP><SPAN class=samp>m&lt;&gt;</SPAN></SAMP>&#8217; in an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>statement if that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>statement accesses the operand exactly once. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>statement must also use &#8216;<SAMP><SPAN class=samp>%U</SPAN><VAR>&lt;opno&gt;</VAR></SAMP>&#8217; as a placeholder for the &#8220;update&#8221; flag in the corresponding load or store instruction. For example:<PRE style="FONT-SIZE: smaller" class=smallexample>               asm ("st%U0 %1,%0" : "=m&lt;&gt;" (mem) : "r" (val));
</PRE>
<P>is correct but:</P><PRE style="FONT-SIZE: smaller" class=smallexample>               asm ("st %1,%0" : "=m&lt;&gt;" (mem) : "r" (val));
</PRE>
<P>is not.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></P></DD>
<DT><CODE>es</CODE></DT>
<DD>A &#8220;stable&#8221; memory operand; that is, one which does not include any automodification of the base register. This used to be useful when &#8216;<SAMP><SPAN class=samp>m</SPAN></SAMP>&#8217; allowed automodification of the base register, but as those are now only allowed when &#8216;<SAMP><SPAN class=samp>&lt;</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>&gt;</SPAN></SAMP>&#8217; is used, &#8216;<SAMP><SPAN class=samp>es</SPAN></SAMP>&#8217; is basically the same as &#8216;<SAMP><SPAN class=samp>m</SPAN></SAMP>&#8217; without &#8216;<SAMP><SPAN class=samp>&lt;</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>&gt;</SPAN></SAMP>&#8217;.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Q</CODE></DT>
<DD>Memory operand that is an offset from a register (it is usually better to use &#8216;<SAMP><SPAN class=samp>m</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>es</SPAN></SAMP>&#8217; in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>statements)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Z</CODE></DT>
<DD>Memory operand that is an indexed or indirect from a register (it is usually better to use &#8216;<SAMP><SPAN class=samp>m</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>es</SPAN></SAMP>&#8217; in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>statements)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>R</CODE></DT>
<DD>AIX TOC entry<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>a</CODE></DT>
<DD>Address operand that is an indexed or indirect from a register (&#8216;<SAMP><SPAN class=samp>p</SPAN></SAMP>&#8217; is preferable for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>statements)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>S</CODE></DT>
<DD>Constant suitable as a 64-bit mask operand<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>T</CODE></DT>
<DD>Constant suitable as a 32-bit mask operand<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>U</CODE></DT>
<DD>System V Release 4 small data area reference<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>t</CODE></DT>
<DD>AND masks that can be performed by two rldic{l, r} instructions<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>W</CODE></DT>
<DD>Vector constant that does not require memory<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>j</CODE></DT>
<DD>Vector constant that is all zeros.</DD></DL><BR></DD>
<DT><EM>Intel 386&#8212;</EM><SAMP><SPAN class=file>config/i386/constraints.md</SPAN></SAMP></DT>
<DD>
<DL>
<DT><CODE>R</CODE></DT>
<DD>Legacy register&#8212;the eight integer registers available on all i386 processors (<CODE>a</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>b</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>c</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>d</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>si</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>di</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bp</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sp</CODE>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>q</CODE></DT>
<DD>Any register accessible as<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR><CODE>l</CODE>. In 32-bit mode,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>a</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>b</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>c</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>d</CODE>; in 64-bit mode, any integer register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Q</CODE></DT>
<DD>Any register accessible as<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>r</VAR><CODE>h</CODE>:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>a</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>b</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>c</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>d</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>a</CODE></DT>
<DD>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>a</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>b</CODE></DT>
<DD>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>b</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>c</CODE></DT>
<DD>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>c</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>d</CODE></DT>
<DD>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>d</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>S</CODE></DT>
<DD>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>si</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>D</CODE></DT>
<DD>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>di</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>A</CODE></DT>
<DD>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>a</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>d</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>registers. This class is used for instructions that return double word results in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ax:dx</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>register pair. Single word values will be allocated either in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ax</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dx</CODE>. For example on i386 the following implements<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>rdtsc</CODE>:<PRE style="FONT-SIZE: smaller" class=smallexample>               unsigned long long rdtsc (void)
               {
                 unsigned long long tick;
                 __asm__ __volatile__("rdtsc":"=A"(tick));
                 return tick;
               }
</PRE>
<P>This is not correct on x86_64 as it would allocate tick in either<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ax</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dx</CODE>. You have to use the following variant instead:</P><PRE style="FONT-SIZE: smaller" class=smallexample>               unsigned long long rdtsc (void)
               {
                 unsigned int tickl, tickh;
                 __asm__ __volatile__("rdtsc":"=a"(tickl),"=d"(tickh));
                 return ((unsigned long long)tickh &lt;&lt; 32)|tickl;
               }
</PRE><BR></DD>
<DT><CODE>f</CODE></DT>
<DD>Any 80387 floating-point (stack) register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>t</CODE></DT>
<DD>Top of 80387 floating-point stack (<CODE>%st(0)</CODE>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>u</CODE></DT>
<DD>Second from top of 80387 floating-point stack (<CODE>%st(1)</CODE>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>y</CODE></DT>
<DD>Any MMX register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>x</CODE></DT>
<DD>Any SSE register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Yz</CODE></DT>
<DD>First SSE register (<CODE>%xmm0</CODE>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>I</CODE></DT>
<DD>Integer constant in the range 0<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=dots>...</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>31, for 32-bit shifts.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>J</CODE></DT>
<DD>Integer constant in the range 0<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=dots>...</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>63, for 64-bit shifts.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>K</CODE></DT>
<DD>Signed 8-bit integer constant.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>L</CODE></DT>
<DD><CODE>0xFF</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0xFFFF</CODE>, for andsi as a zero-extending move.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>M</CODE></DT>
<DD>0, 1, 2, or 3 (shifts for the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lea</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>N</CODE></DT>
<DD>Unsigned 8-bit integer constant (for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>in</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>out</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>G</CODE></DT>
<DD>Standard 80387 floating point constant.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>C</CODE></DT>
<DD>Standard SSE floating point constant.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>e</CODE></DT>
<DD>32-bit signed integer constant, or a symbolic reference known to fit that range (for immediate operands in sign-extending x86-64 instructions).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Z</CODE></DT>
<DD>32-bit unsigned integer constant, or a symbolic reference known to fit that range (for immediate operands in zero-extending x86-64 instructions).</DD></DL><BR></DD>
<DT><EM>Intel IA-64&#8212;</EM><SAMP><SPAN class=file>config/ia64/ia64.h</SPAN></SAMP></DT>
<DD>
<DL>
<DT><CODE>a</CODE></DT>
<DD>General register<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>r0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>r3</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>addl</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>b</CODE></DT>
<DD>Branch register<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>c</CODE></DT>
<DD>Predicate register (&#8216;<SAMP><SPAN class=samp>c</SPAN></SAMP>&#8217; as in &#8220;conditional&#8221;)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>d</CODE></DT>
<DD>Application register residing in M-unit<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>e</CODE></DT>
<DD>Application register residing in I-unit<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>f</CODE></DT>
<DD>Floating-point register<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>m</CODE></DT>
<DD>Memory operand. If used together with &#8216;<SAMP><SPAN class=samp>&lt;</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>&gt;</SPAN></SAMP>&#8217;, the operand can have postincrement and postdecrement which require printing with &#8216;<SAMP><SPAN class=samp>%Pn</SPAN></SAMP>&#8217; on IA-64.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>G</CODE></DT>
<DD>Floating-point constant 0.0 or 1.0<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>I</CODE></DT>
<DD>14-bit signed integer constant<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>J</CODE></DT>
<DD>22-bit signed integer constant<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>K</CODE></DT>
<DD>8-bit signed integer constant for logical instructions<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>L</CODE></DT>
<DD>8-bit adjusted signed integer constant for compare pseudo-ops<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>M</CODE></DT>
<DD>6-bit unsigned integer constant for shift counts<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>N</CODE></DT>
<DD>9-bit signed integer constant for load and store postincrements<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>O</CODE></DT>
<DD>The constant zero<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>P</CODE></DT>
<DD>0 or &#8722;1 for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dep</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Q</CODE></DT>
<DD>Non-volatile memory for floating-point loads and stores<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>R</CODE></DT>
<DD>Integer constant in the range 1 to 4 for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>shladd</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>S</CODE></DT>
<DD>Memory operand except postincrement and postdecrement. This is now roughly the same as &#8216;<SAMP><SPAN class=samp>m</SPAN></SAMP>&#8217; when not used together with &#8216;<SAMP><SPAN class=samp>&lt;</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>&gt;</SPAN></SAMP>&#8217;.</DD></DL><BR></DD>
<DT><EM>FRV&#8212;</EM><SAMP><SPAN class=file>config/frv/frv.h</SPAN></SAMP></DT>
<DD>
<DL>
<DT><CODE>a</CODE></DT>
<DD>Register in the class<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ACC_REGS</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<CODE>acc0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>acc7</CODE>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>b</CODE></DT>
<DD>Register in the class<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>EVEN_ACC_REGS</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<CODE>acc0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>acc7</CODE>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>c</CODE></DT>
<DD>Register in the class<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>CC_REGS</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<CODE>fcc0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fcc3</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>icc0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>icc3</CODE>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>d</CODE></DT>
<DD>Register in the class<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>GPR_REGS</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<CODE>gr0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gr63</CODE>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>e</CODE></DT>
<DD>Register in the class<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>EVEN_REGS</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<CODE>gr0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gr63</CODE>). Odd registers are excluded not in the class but through the use of a machine mode larger than 4 bytes.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>f</CODE></DT>
<DD>Register in the class<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>FPR_REGS</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<CODE>fr0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fr63</CODE>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>h</CODE></DT>
<DD>Register in the class<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>FEVEN_REGS</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<CODE>fr0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fr63</CODE>). Odd registers are excluded not in the class but through the use of a machine mode larger than 4 bytes.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>l</CODE></DT>
<DD>Register in the class<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>LR_REG</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>register).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>q</CODE></DT>
<DD>Register in the class<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>QUAD_REGS</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<CODE>gr2</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gr63</CODE>). Register numbers not divisible by 4 are excluded not in the class but through the use of a machine mode larger than 8 bytes.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>t</CODE></DT>
<DD>Register in the class<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ICC_REGS</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<CODE>icc0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>icc3</CODE>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>u</CODE></DT>
<DD>Register in the class<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>FCC_REGS</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<CODE>fcc0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fcc3</CODE>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>v</CODE></DT>
<DD>Register in the class<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ICR_REGS</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<CODE>cc4</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cc7</CODE>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>w</CODE></DT>
<DD>Register in the class<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>FCR_REGS</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<CODE>cc0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cc3</CODE>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>x</CODE></DT>
<DD>Register in the class<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>QUAD_FPR_REGS</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<CODE>fr0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fr63</CODE>). Register numbers not divisible by 4 are excluded not in the class but through the use of a machine mode larger than 8 bytes.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>z</CODE></DT>
<DD>Register in the class<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SPR_REGS</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<CODE>lcr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lr</CODE>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>A</CODE></DT>
<DD>Register in the class<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>QUAD_ACC_REGS</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<CODE>acc0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>acc7</CODE>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>B</CODE></DT>
<DD>Register in the class<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ACCG_REGS</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<CODE>accg0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>accg7</CODE>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>C</CODE></DT>
<DD>Register in the class<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>CR_REGS</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<CODE>cc0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cc7</CODE>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>G</CODE></DT>
<DD>Floating point constant zero<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>I</CODE></DT>
<DD>6-bit signed integer constant<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>J</CODE></DT>
<DD>10-bit signed integer constant<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>L</CODE></DT>
<DD>16-bit signed integer constant<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>M</CODE></DT>
<DD>16-bit unsigned integer constant<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>N</CODE></DT>
<DD>12-bit signed integer constant that is negative&#8212;i.e. in the range of &#8722;2048 to &#8722;1<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>O</CODE></DT>
<DD>Constant zero<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>P</CODE></DT>
<DD>12-bit signed integer constant that is greater than zero&#8212;i.e. in the range of 1 to 2047.</DD></DL><BR></DD>
<DT><EM>Blackfin family&#8212;</EM><SAMP><SPAN class=file>config/bfin/constraints.md</SPAN></SAMP></DT>
<DD>
<DL>
<DT><CODE>a</CODE></DT>
<DD>P register<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>d</CODE></DT>
<DD>D register<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>z</CODE></DT>
<DD>A call clobbered P register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>q</CODE><VAR>n</VAR></DT>
<DD>A single register. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is in the range 0 to 7, the corresponding D register. If it is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>A</CODE>, then the register P0.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>D</CODE></DT>
<DD>Even-numbered D register<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>W</CODE></DT>
<DD>Odd-numbered D register<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>e</CODE></DT>
<DD>Accumulator register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>A</CODE></DT>
<DD>Even-numbered accumulator register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>B</CODE></DT>
<DD>Odd-numbered accumulator register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>b</CODE></DT>
<DD>I register<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>v</CODE></DT>
<DD>B register<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>f</CODE></DT>
<DD>M register<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>c</CODE></DT>
<DD>Registers used for circular buffering, i.e. I, B, or L registers.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>C</CODE></DT>
<DD>The CC register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>t</CODE></DT>
<DD>LT0 or LT1.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>k</CODE></DT>
<DD>LC0 or LC1.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>u</CODE></DT>
<DD>LB0 or LB1.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>x</CODE></DT>
<DD>Any D, P, B, M, I or L register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>y</CODE></DT>
<DD>Additional registers typically used only in prologues and epilogues: RETS, RETN, RETI, RETX, RETE, ASTAT, SEQSTAT and USP.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>w</CODE></DT>
<DD>Any register except accumulators or CC.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Ksh</CODE></DT>
<DD>Signed 16 bit integer (in the range &#8722;32768 to 32767)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Kuh</CODE></DT>
<DD>Unsigned 16 bit integer (in the range 0 to 65535)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Ks7</CODE></DT>
<DD>Signed 7 bit integer (in the range &#8722;64 to 63)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Ku7</CODE></DT>
<DD>Unsigned 7 bit integer (in the range 0 to 127)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Ku5</CODE></DT>
<DD>Unsigned 5 bit integer (in the range 0 to 31)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Ks4</CODE></DT>
<DD>Signed 4 bit integer (in the range &#8722;8 to 7)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Ks3</CODE></DT>
<DD>Signed 3 bit integer (in the range &#8722;3 to 4)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Ku3</CODE></DT>
<DD>Unsigned 3 bit integer (in the range 0 to 7)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>P</CODE><VAR>n</VAR></DT>
<DD>Constant<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR>, where<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a single-digit constant in the range 0 to 4.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>PA</CODE></DT>
<DD>An integer equal to one of the MACFLAG_XXX constants that is suitable for use with either accumulator.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>PB</CODE></DT>
<DD>An integer equal to one of the MACFLAG_XXX constants that is suitable for use only with accumulator A1.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>M1</CODE></DT>
<DD>Constant 255.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>M2</CODE></DT>
<DD>Constant 65535.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>J</CODE></DT>
<DD>An integer constant with exactly a single bit set.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>L</CODE></DT>
<DD>An integer constant with all bits set except exactly one.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>H</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DT>
<DT><CODE>Q</CODE></DT>
<DD>Any SYMBOL_REF.</DD></DL><BR></DD>
<DT><EM>M32C&#8212;</EM><SAMP><SPAN class=file>config/m32c/m32c.c</SPAN></SAMP></DT>
<DD>
<DL>
<DT><CODE>Rsp</CODE></DT>
<DT><CODE>Rfb</CODE></DT>
<DT><CODE>Rsb</CODE></DT>
<DD>&#8216;<SAMP><SPAN class=samp>$sp</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>$fb</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>$sb</SPAN></SAMP>&#8217;.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Rcr</CODE></DT>
<DD>Any control register, when they're 16 bits wide (nothing if control registers are 24 bits wide)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Rcl</CODE></DT>
<DD>Any control register, when they're 24 bits wide.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>R0w</CODE></DT>
<DT><CODE>R1w</CODE></DT>
<DT><CODE>R2w</CODE></DT>
<DT><CODE>R3w</CODE></DT>
<DD>$r0, $r1, $r2, $r3.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>R02</CODE></DT>
<DD>$r0 or $r2, or $r2r0 for 32 bit values.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>R13</CODE></DT>
<DD>$r1 or $r3, or $r3r1 for 32 bit values.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Rdi</CODE></DT>
<DD>A register that can hold a 64 bit value.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Rhl</CODE></DT>
<DD>$r0 or $r1 (registers with addressable high/low bytes)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>R23</CODE></DT>
<DD>$r2 or $r3<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Raa</CODE></DT>
<DD>Address registers<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Raw</CODE></DT>
<DD>Address registers when they're 16 bits wide.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Ral</CODE></DT>
<DD>Address registers when they're 24 bits wide.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Rqi</CODE></DT>
<DD>Registers that can hold QI values.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Rad</CODE></DT>
<DD>Registers that can be used with displacements ($a0, $a1, $sb).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Rsi</CODE></DT>
<DD>Registers that can hold 32 bit values.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Rhi</CODE></DT>
<DD>Registers that can hold 16 bit values.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Rhc</CODE></DT>
<DD>Registers chat can hold 16 bit values, including all control registers.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Rra</CODE></DT>
<DD>$r0 through R1, plus $a0 and $a1.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Rfl</CODE></DT>
<DD>The flags register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Rmm</CODE></DT>
<DD>The memory-based pseudo-registers $mem0 through $mem15.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Rpi</CODE></DT>
<DD>Registers that can hold pointers (16 bit registers for r8c, m16c; 24 bit registers for m32cm, m32c).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Rpa</CODE></DT>
<DD>Matches multiple registers in a PARALLEL to form a larger register. Used to match function return values.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Is3</CODE></DT>
<DD>&#8722;8<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=dots>...</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>7<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>IS1</CODE></DT>
<DD>&#8722;128<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=dots>...</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>127<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>IS2</CODE></DT>
<DD>&#8722;32768<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=dots>...</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>32767<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>IU2</CODE></DT>
<DD>0<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=dots>...</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>65535<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>In4</CODE></DT>
<DD>&#8722;8<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=dots>...</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8722;1 or 1<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=dots>...</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>8<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>In5</CODE></DT>
<DD>&#8722;16<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=dots>...</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8722;1 or 1<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=dots>...</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>16<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>In6</CODE></DT>
<DD>&#8722;32<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=dots>...</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8722;1 or 1<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=dots>...</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>32<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>IM2</CODE></DT>
<DD>&#8722;65536<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=dots>...</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8722;1<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Ilb</CODE></DT>
<DD>An 8 bit value with exactly one bit set.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Ilw</CODE></DT>
<DD>A 16 bit value with exactly one bit set.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Sd</CODE></DT>
<DD>The common src/dest memory addressing modes.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Sa</CODE></DT>
<DD>Memory addressed using $a0 or $a1.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Si</CODE></DT>
<DD>Memory addressed with immediate addresses.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Ss</CODE></DT>
<DD>Memory addressed using the stack pointer ($sp).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Sf</CODE></DT>
<DD>Memory addressed using the frame base register ($fb).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Ss</CODE></DT>
<DD>Memory addressed using the small base register ($sb).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>S1</CODE></DT>
<DD>$r1h</DD></DL><BR></DD>
<DT><EM>MeP&#8212;</EM><SAMP><SPAN class=file>config/mep/constraints.md</SPAN></SAMP></DT>
<DD>
<DL>
<DT><CODE>a</CODE></DT>
<DD>The $sp register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>b</CODE></DT>
<DD>The $tp register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>c</CODE></DT>
<DD>Any control register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>d</CODE></DT>
<DD>Either the $hi or the $lo register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>em</CODE></DT>
<DD>Coprocessor registers that can be directly loaded ($c0-$c15).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>ex</CODE></DT>
<DD>Coprocessor registers that can be moved to each other.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>er</CODE></DT>
<DD>Coprocessor registers that can be moved to core registers.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>h</CODE></DT>
<DD>The $hi register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>j</CODE></DT>
<DD>The $rpc register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>l</CODE></DT>
<DD>The $lo register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>t</CODE></DT>
<DD>Registers which can be used in $tp-relative addressing.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>v</CODE></DT>
<DD>The $gp register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>x</CODE></DT>
<DD>The coprocessor registers.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>y</CODE></DT>
<DD>The coprocessor control registers.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>z</CODE></DT>
<DD>The $0 register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>A</CODE></DT>
<DD>User-defined register set A.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>B</CODE></DT>
<DD>User-defined register set B.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>C</CODE></DT>
<DD>User-defined register set C.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>D</CODE></DT>
<DD>User-defined register set D.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>I</CODE></DT>
<DD>Offsets for $gp-rel addressing.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>J</CODE></DT>
<DD>Constants that can be used directly with boolean insns.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>K</CODE></DT>
<DD>Constants that can be moved directly to registers.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>L</CODE></DT>
<DD>Small constants that can be added to registers.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>M</CODE></DT>
<DD>Long shift counts.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>N</CODE></DT>
<DD>Small constants that can be compared to registers.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>O</CODE></DT>
<DD>Constants that can be loaded into the top half of registers.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>S</CODE></DT>
<DD>Signed 8-bit immediates.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>T</CODE></DT>
<DD>Symbols encoded for $tp-rel or $gp-rel addressing.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>U</CODE></DT>
<DD>Non-constant addresses for loading/saving coprocessor registers.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>W</CODE></DT>
<DD>The top half of a symbol's value.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Y</CODE></DT>
<DD>A register indirect address without offset.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Z</CODE></DT>
<DD>Symbolic references to the control bus.</DD></DL><BR></DD>
<DT><EM>MicroBlaze&#8212;</EM><SAMP><SPAN class=file>config/microblaze/constraints.md</SPAN></SAMP></DT>
<DD>
<DL>
<DT><CODE>d</CODE></DT>
<DD>A general register (<CODE>r0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>r31</CODE>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>z</CODE></DT>
<DD>A status register (<CODE>rmsr</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$fcc1</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$fcc7</CODE>).</DD></DL><BR></DD>
<DT><EM>MIPS&#8212;</EM><SAMP><SPAN class=file>config/mips/constraints.md</SPAN></SAMP></DT>
<DD>
<DL>
<DT><CODE>d</CODE></DT>
<DD>An address register. This is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>r</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>unless generating MIPS16 code.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>f</CODE></DT>
<DD>A floating-point register (if available).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>h</CODE></DT>
<DD>Formerly the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hi</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>register. This constraint is no longer supported.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>l</CODE></DT>
<DD>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lo</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>register. Use this register to store values that are no bigger than a word.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>x</CODE></DT>
<DD>The concatenated<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hi</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lo</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>registers. Use this register to store doubleword values.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>c</CODE></DT>
<DD>A register suitable for use in an indirect jump. This will always be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$25</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mabicalls</SPAN></SAMP>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>v</CODE></DT>
<DD>Register<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>$3</CODE>. Do not use this constraint in new code; it is retained only for compatibility with glibc.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>y</CODE></DT>
<DD>Equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>r</CODE>; retained for backwards compatibility.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>z</CODE></DT>
<DD>A floating-point condition code register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>I</CODE></DT>
<DD>A signed 16-bit constant (for arithmetic instructions).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>J</CODE></DT>
<DD>Integer zero.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>K</CODE></DT>
<DD>An unsigned 16-bit constant (for logic instructions).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>L</CODE></DT>
<DD>A signed 32-bit constant in which the lower 16 bits are zero. Such constants can be loaded using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lui</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>M</CODE></DT>
<DD>A constant that cannot be loaded using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lui</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>addiu</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ori</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>N</CODE></DT>
<DD>A constant in the range &#8722;65535 to &#8722;1 (inclusive).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>O</CODE></DT>
<DD>A signed 15-bit constant.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>P</CODE></DT>
<DD>A constant in the range 1 to 65535 (inclusive).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>G</CODE></DT>
<DD>Floating-point zero.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>R</CODE></DT>
<DD>An address that can be used in a non-macro load or store.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>ZC</CODE></DT>
<DD>When compiling microMIPS code, this constraint matches a memory operand whose address is formed from a base register and a 12-bit offset. These operands can be used for microMIPS instructions such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ll</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sc</CODE>. When not compiling for microMIPS code,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ZC</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>R</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>ZD</CODE></DT>
<DD>When compiling microMIPS code, this constraint matches an address operand that is formed from a base register and a 12-bit offset. These operands can be used for microMIPS instructions such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>prefetch</CODE>. When not compiling for microMIPS code,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ZD</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>p</CODE>.</DD></DL><BR></DD>
<DT><EM>Motorola 680x0&#8212;</EM><SAMP><SPAN class=file>config/m68k/constraints.md</SPAN></SAMP></DT>
<DD>
<DL>
<DT><CODE>a</CODE></DT>
<DD>Address register<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>d</CODE></DT>
<DD>Data register<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>f</CODE></DT>
<DD>68881 floating-point register, if available<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>I</CODE></DT>
<DD>Integer in the range 1 to 8<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>J</CODE></DT>
<DD>16-bit signed number<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>K</CODE></DT>
<DD>Signed number whose magnitude is greater than 0x80<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>L</CODE></DT>
<DD>Integer in the range &#8722;8 to &#8722;1<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>M</CODE></DT>
<DD>Signed number whose magnitude is greater than 0x100<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>N</CODE></DT>
<DD>Range 24 to 31, rotatert:SI 8 to 1 expressed as rotate<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>O</CODE></DT>
<DD>16 (for rotate using swap)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>P</CODE></DT>
<DD>Range 8 to 15, rotatert:HI 8 to 1 expressed as rotate<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>R</CODE></DT>
<DD>Numbers that mov3q can handle<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>G</CODE></DT>
<DD>Floating point constant that is not a 68881 constant<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>S</CODE></DT>
<DD>Operands that satisfy 'm' when -mpcrel is in effect<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>T</CODE></DT>
<DD>Operands that satisfy 's' when -mpcrel is not in effect<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Q</CODE></DT>
<DD>Address register indirect addressing mode<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>U</CODE></DT>
<DD>Register offset addressing<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>W</CODE></DT>
<DD>const_call_operand<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Cs</CODE></DT>
<DD>symbol_ref or const<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Ci</CODE></DT>
<DD>const_int<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>C0</CODE></DT>
<DD>const_int 0<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Cj</CODE></DT>
<DD>Range of signed numbers that don't fit in 16 bits<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Cmvq</CODE></DT>
<DD>Integers valid for mvq<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Capsw</CODE></DT>
<DD>Integers valid for a moveq followed by a swap<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Cmvz</CODE></DT>
<DD>Integers valid for mvz<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Cmvs</CODE></DT>
<DD>Integers valid for mvs<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Ap</CODE></DT>
<DD>push_operand<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Ac</CODE></DT>
<DD>Non-register operands allowed in clr</DD></DL><BR></DD>
<DT><EM>Moxie&#8212;</EM><SAMP><SPAN class=file>config/moxie/constraints.md</SPAN></SAMP></DT>
<DD>
<DL>
<DT><CODE>A</CODE></DT>
<DD>An absolute address<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>B</CODE></DT>
<DD>An offset address<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>W</CODE></DT>
<DD>A register indirect memory operand<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>I</CODE></DT>
<DD>A constant in the range of 0 to 255.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>N</CODE></DT>
<DD>A constant in the range of 0 to &#8722;255.</DD></DL><BR></DD>
<DT><EM>MSP430&#8211;</EM><SAMP><SPAN class=file>config/msp430/constraints.md</SPAN></SAMP></DT>
<DD>
<DL>
<DT><CODE>R12</CODE></DT>
<DD>Register R12.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>R13</CODE></DT>
<DD>Register R13.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>K</CODE></DT>
<DD>Integer constant 1.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>L</CODE></DT>
<DD>Integer constant -1^20..1^19.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>M</CODE></DT>
<DD>Integer constant 1-4.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Ya</CODE></DT>
<DD>Memory references which do not require an extended MOVX instruction.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Yl</CODE></DT>
<DD>Memory reference, labels only.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Ys</CODE></DT>
<DD>Memory reference, stack only.</DD></DL><BR></DD>
<DT><EM>NDS32&#8212;</EM><SAMP><SPAN class=file>config/nds32/constraints.md</SPAN></SAMP></DT>
<DD>
<DL>
<DT><CODE>w</CODE></DT>
<DD>LOW register class $r0 to $r7 constraint for V3/V3M ISA.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>l</CODE></DT>
<DD>LOW register class $r0 to $r7.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>d</CODE></DT>
<DD>MIDDLE register class $r0 to $r11, $r16 to $r19.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>h</CODE></DT>
<DD>HIGH register class $r12 to $r14, $r20 to $r31.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>t</CODE></DT>
<DD>Temporary assist register $ta (i.e. $r15).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>k</CODE></DT>
<DD>Stack register $sp.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Iu03</CODE></DT>
<DD>Unsigned immediate 3-bit value.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>In03</CODE></DT>
<DD>Negative immediate 3-bit value in the range of &#8722;7&#8211;0.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Iu04</CODE></DT>
<DD>Unsigned immediate 4-bit value.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Is05</CODE></DT>
<DD>Signed immediate 5-bit value.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Iu05</CODE></DT>
<DD>Unsigned immediate 5-bit value.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>In05</CODE></DT>
<DD>Negative immediate 5-bit value in the range of &#8722;31&#8211;0.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Ip05</CODE></DT>
<DD>Unsigned immediate 5-bit value for movpi45 instruction with range 16&#8211;47.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Iu06</CODE></DT>
<DD>Unsigned immediate 6-bit value constraint for addri36.sp instruction.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Iu08</CODE></DT>
<DD>Unsigned immediate 8-bit value.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Iu09</CODE></DT>
<DD>Unsigned immediate 9-bit value.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Is10</CODE></DT>
<DD>Signed immediate 10-bit value.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Is11</CODE></DT>
<DD>Signed immediate 11-bit value.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Is15</CODE></DT>
<DD>Signed immediate 15-bit value.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Iu15</CODE></DT>
<DD>Unsigned immediate 15-bit value.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Ic15</CODE></DT>
<DD>A constant which is not in the range of imm15u but ok for bclr instruction.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Ie15</CODE></DT>
<DD>A constant which is not in the range of imm15u but ok for bset instruction.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>It15</CODE></DT>
<DD>A constant which is not in the range of imm15u but ok for btgl instruction.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Ii15</CODE></DT>
<DD>A constant whose compliment value is in the range of imm15u and ok for bitci instruction.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Is16</CODE></DT>
<DD>Signed immediate 16-bit value.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Is17</CODE></DT>
<DD>Signed immediate 17-bit value.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Is19</CODE></DT>
<DD>Signed immediate 19-bit value.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Is20</CODE></DT>
<DD>Signed immediate 20-bit value.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Ihig</CODE></DT>
<DD>The immediate value that can be simply set high 20-bit.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Izeb</CODE></DT>
<DD>The immediate value 0xff.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Izeh</CODE></DT>
<DD>The immediate value 0xffff.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Ixls</CODE></DT>
<DD>The immediate value 0x01.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Ix11</CODE></DT>
<DD>The immediate value 0x7ff.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Ibms</CODE></DT>
<DD>The immediate value with power of 2.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Ifex</CODE></DT>
<DD>The immediate value with power of 2 minus 1.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>U33</CODE></DT>
<DD>Memory constraint for 333 format.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>U45</CODE></DT>
<DD>Memory constraint for 45 format.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>U37</CODE></DT>
<DD>Memory constraint for 37 format.</DD></DL><BR></DD>
<DT><EM>Nios II family&#8212;</EM><SAMP><SPAN class=file>config/nios2/constraints.md</SPAN></SAMP></DT>
<DD>
<DL>
<DT><CODE>I</CODE></DT>
<DD>Integer that is valid as an immediate operand in an instruction taking a signed 16-bit number. Range &#8722;32768 to 32767.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>J</CODE></DT>
<DD>Integer that is valid as an immediate operand in an instruction taking an unsigned 16-bit number. Range 0 to 65535.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>K</CODE></DT>
<DD>Integer that is valid as an immediate operand in an instruction taking only the upper 16-bits of a 32-bit number. Range 32-bit numbers with the lower 16-bits being 0.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>L</CODE></DT>
<DD>Integer that is valid as an immediate operand for a shift instruction. Range 0 to 31.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>M</CODE></DT>
<DD>Integer that is valid as an immediate operand for only the value 0. Can be used in conjunction with the format modifier<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>z</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>r0</CODE>instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in the assembly output.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>N</CODE></DT>
<DD>Integer that is valid as an immediate operand for a custom instruction opcode. Range 0 to 255.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>S</CODE></DT>
<DD>Matches immediates which are addresses in the small data section and therefore can be added to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a 16-bit immediate to re-create their 32-bit value.</DD></DL><BR></DD>
<DT><EM>PDP-11&#8212;</EM><SAMP><SPAN class=file>config/pdp11/constraints.md</SPAN></SAMP></DT>
<DD>
<DL>
<DT><CODE>a</CODE></DT>
<DD>Floating point registers AC0 through AC3. These can be loaded from/to memory with a single instruction.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>d</CODE></DT>
<DD>Odd numbered general registers (R1, R3, R5). These are used for 16-bit multiply operations.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>f</CODE></DT>
<DD>Any of the floating point registers (AC0 through AC5).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>G</CODE></DT>
<DD>Floating point constant 0.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>I</CODE></DT>
<DD>An integer constant that fits in 16 bits.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>J</CODE></DT>
<DD>An integer constant whose low order 16 bits are zero.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>K</CODE></DT>
<DD>An integer constant that does not meet the constraints for codes &#8216;<SAMP><SPAN class=samp>I</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>J</SPAN></SAMP>&#8217;.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>L</CODE></DT>
<DD>The integer constant 1.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>M</CODE></DT>
<DD>The integer constant &#8722;1.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>N</CODE></DT>
<DD>The integer constant 0.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>O</CODE></DT>
<DD>Integer constants &#8722;4 through &#8722;1 and 1 through 4; shifts by these amounts are handled as multiple single-bit shifts rather than a single variable-length shift.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Q</CODE></DT>
<DD>A memory reference which requires an additional word (address or offset) after the opcode.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>R</CODE></DT>
<DD>A memory reference that is encoded within the opcode.</DD></DL><BR></DD>
<DT><EM>RL78&#8212;</EM><SAMP><SPAN class=file>config/rl78/constraints.md</SPAN></SAMP></DT>
<DD>
<DL>
<DT><CODE>Int3</CODE></DT>
<DD>An integer constant in the range 1<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=dots>...</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>7.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Int8</CODE></DT>
<DD>An integer constant in the range 0<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=dots>...</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>255.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>J</CODE></DT>
<DD>An integer constant in the range &#8722;255<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=dots>...</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>0<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>K</CODE></DT>
<DD>The integer constant 1.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>L</CODE></DT>
<DD>The integer constant -1.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>M</CODE></DT>
<DD>The integer constant 0.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>N</CODE></DT>
<DD>The integer constant 2.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>O</CODE></DT>
<DD>The integer constant -2.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>P</CODE></DT>
<DD>An integer constant in the range 1<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=dots>...</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>15.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Qbi</CODE></DT>
<DD>The built-in compare types&#8211;eq, ne, gtu, ltu, geu, and leu.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Qsc</CODE></DT>
<DD>The synthetic compare types&#8211;gt, lt, ge, and le.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Wab</CODE></DT>
<DD>A memory reference with an absolute address.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Wbc</CODE></DT>
<DD>A memory reference using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>BC</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a base register, with an optional offset.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Wca</CODE></DT>
<DD>A memory reference using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>AX</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>BC</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>DE</CODE>, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>HL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for the address, for calls.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Wcv</CODE></DT>
<DD>A memory reference using any 16-bit register pair for the address, for calls.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Wd2</CODE></DT>
<DD>A memory reference using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>DE</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a base register, with an optional offset.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Wde</CODE></DT>
<DD>A memory reference using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>DE</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a base register, without any offset.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Wfr</CODE></DT>
<DD>Any memory reference to an address in the far address space.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Wh1</CODE></DT>
<DD>A memory reference using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>HL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a base register, with an optional one-byte offset.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Whb</CODE></DT>
<DD>A memory reference using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>HL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a base register, with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>B</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>C</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the index register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Whl</CODE></DT>
<DD>A memory reference using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>HL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a base register, without any offset.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Ws1</CODE></DT>
<DD>A memory reference using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SP</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a base register, with an optional one-byte offset.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Y</CODE></DT>
<DD>Any memory reference to an address in the near address space.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>A</CODE></DT>
<DD>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>AX</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>B</CODE></DT>
<DD>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>BC</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>D</CODE></DT>
<DD>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>DE</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>R</CODE></DT>
<DD><CODE>A</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>through<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>L</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>registers.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>S</CODE></DT>
<DD>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SP</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>T</CODE></DT>
<DD>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>HL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Z08W</CODE></DT>
<DD>The 16-bit<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>R8</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Z10W</CODE></DT>
<DD>The 16-bit<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>R10</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Zint</CODE></DT>
<DD>The registers reserved for interrupts (<CODE>R24</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>R31</CODE>).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>a</CODE></DT>
<DD>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>A</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>b</CODE></DT>
<DD>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>B</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>c</CODE></DT>
<DD>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>C</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>d</CODE></DT>
<DD>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>D</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>e</CODE></DT>
<DD>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>E</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>h</CODE></DT>
<DD>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>H</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>l</CODE></DT>
<DD>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>L</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>v</CODE></DT>
<DD>The virtual registers.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>w</CODE></DT>
<DD>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>PSW</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>x</CODE></DT>
<DD>The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>X</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>register.</DD></DL><BR></DD>
<DT><EM>RX&#8212;</EM><SAMP><SPAN class=file>config/rx/constraints.md</SPAN></SAMP></DT>
<DD>
<DL>
<DT><CODE>Q</CODE></DT>
<DD>An address which does not involve register indirect addressing or pre/post increment/decrement addressing.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Symbol</CODE></DT>
<DD>A symbol reference.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Int08</CODE></DT>
<DD>A constant in the range &#8722;256 to 255, inclusive.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Sint08</CODE></DT>
<DD>A constant in the range &#8722;128 to 127, inclusive.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Sint16</CODE></DT>
<DD>A constant in the range &#8722;32768 to 32767, inclusive.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Sint24</CODE></DT>
<DD>A constant in the range &#8722;8388608 to 8388607, inclusive.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Uint04</CODE></DT>
<DD>A constant in the range 0 to 15, inclusive.</DD></DL><BR></DD>
<DT><EM>SPARC&#8212;</EM><SAMP><SPAN class=file>config/sparc/sparc.h</SPAN></SAMP></DT>
<DD>
<DL>
<DT><CODE>f</CODE></DT>
<DD>Floating-point register on the SPARC-V8 architecture and lower floating-point register on the SPARC-V9 architecture.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>e</CODE></DT>
<DD>Floating-point register. It is equivalent to &#8216;<SAMP><SPAN class=samp>f</SPAN></SAMP>&#8217; on the SPARC-V8 architecture and contains both lower and upper floating-point registers on the SPARC-V9 architecture.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>c</CODE></DT>
<DD>Floating-point condition code register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>d</CODE></DT>
<DD>Lower floating-point register. It is only valid on the SPARC-V9 architecture when the Visual Instruction Set is available.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>b</CODE></DT>
<DD>Floating-point register. It is only valid on the SPARC-V9 architecture when the Visual Instruction Set is available.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>h</CODE></DT>
<DD>64-bit global or out register for the SPARC-V8+ architecture.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>C</CODE></DT>
<DD>The constant all-ones, for floating-point.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>A</CODE></DT>
<DD>Signed 5-bit constant<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>D</CODE></DT>
<DD>A vector constant<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>I</CODE></DT>
<DD>Signed 13-bit constant<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>J</CODE></DT>
<DD>Zero<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>K</CODE></DT>
<DD>32-bit constant with the low 12 bits clear (a constant that can be loaded with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sethi</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>L</CODE></DT>
<DD>A constant in the range supported by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>movcc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions (11-bit signed immediate)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>M</CODE></DT>
<DD>A constant in the range supported by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>movrcc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions (10-bit signed immediate)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>N</CODE></DT>
<DD>Same as &#8216;<SAMP><SPAN class=samp>K</SPAN></SAMP>&#8217;, except that it verifies that bits that are not in the lower 32-bit range are all zero. Must be used instead of &#8216;<SAMP><SPAN class=samp>K</SPAN></SAMP>&#8217; for modes wider than<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>SImode</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>O</CODE></DT>
<DD>The constant 4096<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>G</CODE></DT>
<DD>Floating-point zero<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>H</CODE></DT>
<DD>Signed 13-bit constant, sign-extended to 32 or 64 bits<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>P</CODE></DT>
<DD>The constant -1<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Q</CODE></DT>
<DD>Floating-point constant whose integral representation can be moved into an integer register using a single sethi instruction<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>R</CODE></DT>
<DD>Floating-point constant whose integral representation can be moved into an integer register using a single mov instruction<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>S</CODE></DT>
<DD>Floating-point constant whose integral representation can be moved into an integer register using a high/lo_sum instruction sequence<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>T</CODE></DT>
<DD>Memory address aligned to an 8-byte boundary<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>U</CODE></DT>
<DD>Even register<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>W</CODE></DT>
<DD>Memory address for &#8216;<SAMP><SPAN class=samp>e</SPAN></SAMP>&#8217; constraint registers<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>w</CODE></DT>
<DD>Memory address with only a base register<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Y</CODE></DT>
<DD>Vector zero</DD></DL><BR></DD>
<DT><EM>SPU&#8212;</EM><SAMP><SPAN class=file>config/spu/spu.h</SPAN></SAMP></DT>
<DD>
<DL>
<DT><CODE>a</CODE></DT>
<DD>An immediate which can be loaded with the il/ila/ilh/ilhu instructions. const_int is treated as a 64 bit value.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>c</CODE></DT>
<DD>An immediate for and/xor/or instructions. const_int is treated as a 64 bit value.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>d</CODE></DT>
<DD>An immediate for the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>iohl</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction. const_int is treated as a 64 bit value.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>f</CODE></DT>
<DD>An immediate which can be loaded with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fsmbi</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>A</CODE></DT>
<DD>An immediate which can be loaded with the il/ila/ilh/ilhu instructions. const_int is treated as a 32 bit value.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>B</CODE></DT>
<DD>An immediate for most arithmetic instructions. const_int is treated as a 32 bit value.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>C</CODE></DT>
<DD>An immediate for and/xor/or instructions. const_int is treated as a 32 bit value.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>D</CODE></DT>
<DD>An immediate for the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>iohl</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction. const_int is treated as a 32 bit value.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>I</CODE></DT>
<DD>A constant in the range [&#8722;64, 63] for shift/rotate instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>J</CODE></DT>
<DD>An unsigned 7-bit constant for conversion/nop/channel instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>K</CODE></DT>
<DD>A signed 10-bit constant for most arithmetic instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>M</CODE></DT>
<DD>A signed 16 bit immediate for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stop</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>N</CODE></DT>
<DD>An unsigned 16-bit constant for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>iohl</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fsmbi</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>O</CODE></DT>
<DD>An unsigned 7-bit constant whose 3 least significant bits are 0.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>P</CODE></DT>
<DD>An unsigned 3-bit constant for 16-byte rotates and shifts<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>R</CODE></DT>
<DD>Call operand, reg, for indirect calls<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>S</CODE></DT>
<DD>Call operand, symbol, for relative calls.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>T</CODE></DT>
<DD>Call operand, const_int, for absolute calls.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>U</CODE></DT>
<DD>An immediate which can be loaded with the il/ila/ilh/ilhu instructions. const_int is sign extended to 128 bit.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>W</CODE></DT>
<DD>An immediate for shift and rotate instructions. const_int is treated as a 32 bit value.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Y</CODE></DT>
<DD>An immediate for and/xor/or instructions. const_int is sign extended as a 128 bit.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Z</CODE></DT>
<DD>An immediate for the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>iohl</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction. const_int is sign extended to 128 bit.</DD></DL><BR></DD>
<DT><EM>S/390 and zSeries&#8212;</EM><SAMP><SPAN class=file>config/s390/s390.h</SPAN></SAMP></DT>
<DD>
<DL>
<DT><CODE>a</CODE></DT>
<DD>Address register (general purpose register except r0)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>c</CODE></DT>
<DD>Condition code register<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>d</CODE></DT>
<DD>Data register (arbitrary general purpose register)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>f</CODE></DT>
<DD>Floating-point register<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>I</CODE></DT>
<DD>Unsigned 8-bit constant (0&#8211;255)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>J</CODE></DT>
<DD>Unsigned 12-bit constant (0&#8211;4095)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>K</CODE></DT>
<DD>Signed 16-bit constant (&#8722;32768&#8211;32767)<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>L</CODE></DT>
<DD>Value appropriate as displacement.
<DL>
<DT><CODE>(0..4095)</CODE></DT>
<DD>for short displacement<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>(&#8722;524288..524287)</CODE></DT>
<DD>for long displacement</DD></DL><BR></DD>
<DT><CODE>M</CODE></DT>
<DD>Constant integer with a value of 0x7fffffff.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>N</CODE></DT>
<DD>Multiple letter constraint followed by 4 parameter letters.
<DL>
<DT><CODE>0..9:</CODE></DT>
<DD>number of the part counting from most to least significant<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>H,Q:</CODE></DT>
<DD>mode of the part<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>D,S,H:</CODE></DT>
<DD>mode of the containing operand<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>0,F:</CODE></DT>
<DD>value of the other parts (F&#8212;all bits set)</DD></DL>The constraint matches if the specified part of a constant has a value different from its other parts.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Q</CODE></DT>
<DD>Memory reference without index register and with short displacement.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>R</CODE></DT>
<DD>Memory reference with index register and short displacement.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>S</CODE></DT>
<DD>Memory reference without index register but with long displacement.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>T</CODE></DT>
<DD>Memory reference with index register and long displacement.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>U</CODE></DT>
<DD>Pointer with short displacement.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>W</CODE></DT>
<DD>Pointer with long displacement.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Y</CODE></DT>
<DD>Shift count operand.</DD></DL><BR></DD>
<DT><EM>Score family&#8212;</EM><SAMP><SPAN class=file>config/score/score.h</SPAN></SAMP></DT>
<DD>
<DL>
<DT><CODE>d</CODE></DT>
<DD>Registers from r0 to r32.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>e</CODE></DT>
<DD>Registers from r0 to r16.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>t</CODE></DT>
<DD>r8&#8212;r11 or r22&#8212;r27 registers.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>h</CODE></DT>
<DD>hi register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>l</CODE></DT>
<DD>lo register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>x</CODE></DT>
<DD>hi + lo register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>q</CODE></DT>
<DD>cnt register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>y</CODE></DT>
<DD>lcb register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>z</CODE></DT>
<DD>scb register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>a</CODE></DT>
<DD>cnt + lcb + scb register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>c</CODE></DT>
<DD>cr0&#8212;cr15 register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>b</CODE></DT>
<DD>cp1 registers.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>f</CODE></DT>
<DD>cp2 registers.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>i</CODE></DT>
<DD>cp3 registers.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>j</CODE></DT>
<DD>cp1 + cp2 + cp3 registers.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>I</CODE></DT>
<DD>High 16-bit constant (32-bit constant with 16 LSBs zero).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>J</CODE></DT>
<DD>Unsigned 5 bit integer (in the range 0 to 31).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>K</CODE></DT>
<DD>Unsigned 16 bit integer (in the range 0 to 65535).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>L</CODE></DT>
<DD>Signed 16 bit integer (in the range &#8722;32768 to 32767).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>M</CODE></DT>
<DD>Unsigned 14 bit integer (in the range 0 to 16383).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>N</CODE></DT>
<DD>Signed 14 bit integer (in the range &#8722;8192 to 8191).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Z</CODE></DT>
<DD>Any SYMBOL_REF.</DD></DL><BR></DD>
<DT><EM>Xstormy16&#8212;</EM><SAMP><SPAN class=file>config/stormy16/stormy16.h</SPAN></SAMP></DT>
<DD>
<DL>
<DT><CODE>a</CODE></DT>
<DD>Register r0.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>b</CODE></DT>
<DD>Register r1.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>c</CODE></DT>
<DD>Register r2.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>d</CODE></DT>
<DD>Register r8.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>e</CODE></DT>
<DD>Registers r0 through r7.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>t</CODE></DT>
<DD>Registers r0 and r1.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>y</CODE></DT>
<DD>The carry register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>z</CODE></DT>
<DD>Registers r8 and r9.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>I</CODE></DT>
<DD>A constant between 0 and 3 inclusive.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>J</CODE></DT>
<DD>A constant that has exactly one bit set.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>K</CODE></DT>
<DD>A constant that has exactly one bit clear.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>L</CODE></DT>
<DD>A constant between 0 and 255 inclusive.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>M</CODE></DT>
<DD>A constant between &#8722;255 and 0 inclusive.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>N</CODE></DT>
<DD>A constant between &#8722;3 and 0 inclusive.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>O</CODE></DT>
<DD>A constant between 1 and 4 inclusive.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>P</CODE></DT>
<DD>A constant between &#8722;4 and &#8722;1 inclusive.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Q</CODE></DT>
<DD>A memory reference that is a stack push.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>R</CODE></DT>
<DD>A memory reference that is a stack pop.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>S</CODE></DT>
<DD>A memory reference that refers to a constant address of known value.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>T</CODE></DT>
<DD>The register indicated by Rx (not implemented yet).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>U</CODE></DT>
<DD>A constant that is not between 2 and 15 inclusive.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Z</CODE></DT>
<DD>The constant 0.</DD></DL><BR></DD>
<DT><EM>TI C6X family&#8212;</EM><SAMP><SPAN class=file>config/c6x/constraints.md</SPAN></SAMP></DT>
<DD>
<DL>
<DT><CODE>a</CODE></DT>
<DD>Register file A (A0&#8211;A31).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>b</CODE></DT>
<DD>Register file B (B0&#8211;B31).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>A</CODE></DT>
<DD>Predicate registers in register file A (A0&#8211;A2 on C64X and higher, A1 and A2 otherwise).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>B</CODE></DT>
<DD>Predicate registers in register file B (B0&#8211;B2).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>C</CODE></DT>
<DD>A call-used register in register file B (B0&#8211;B9, B16&#8211;B31).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Da</CODE></DT>
<DD>Register file A, excluding predicate registers (A3&#8211;A31, plus A0 if not C64X or higher).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Db</CODE></DT>
<DD>Register file B, excluding predicate registers (B3&#8211;B31).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Iu4</CODE></DT>
<DD>Integer constant in the range 0<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=dots>...</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>15.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Iu5</CODE></DT>
<DD>Integer constant in the range 0<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=dots>...</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>31.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>In5</CODE></DT>
<DD>Integer constant in the range &#8722;31<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=dots>...</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>0.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Is5</CODE></DT>
<DD>Integer constant in the range &#8722;16<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=dots>...</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>15.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>I5x</CODE></DT>
<DD>Integer constant that can be the operand of an ADDA or a SUBA insn.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>IuB</CODE></DT>
<DD>Integer constant in the range 0<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=dots>...</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>65535.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>IsB</CODE></DT>
<DD>Integer constant in the range &#8722;32768<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=dots>...</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>32767.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>IsC</CODE></DT>
<DD>Integer constant in the range -2^20<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=dots>...</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>2^20 - 1.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Jc</CODE></DT>
<DD>Integer constant that is a valid mask for the clr instruction.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Js</CODE></DT>
<DD>Integer constant that is a valid mask for the set instruction.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Q</CODE></DT>
<DD>Memory location with A base register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>R</CODE></DT>
<DD>Memory location with B base register.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Z</CODE></DT>
<DD>Register B14 (aka DP).</DD></DL><BR></DD>
<DT><EM>TILE-Gx&#8212;</EM><SAMP><SPAN class=file>config/tilegx/constraints.md</SPAN></SAMP></DT>
<DD>
<DL>
<DT><CODE>R00</CODE></DT>
<DT><CODE>R01</CODE></DT>
<DT><CODE>R02</CODE></DT>
<DT><CODE>R03</CODE></DT>
<DT><CODE>R04</CODE></DT>
<DT><CODE>R05</CODE></DT>
<DT><CODE>R06</CODE></DT>
<DT><CODE>R07</CODE></DT>
<DT><CODE>R08</CODE></DT>
<DT><CODE>R09</CODE></DT>
<DT><CODE>R10</CODE></DT>
<DD>Each of these represents a register constraint for an individual register, from r0 to r10.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>I</CODE></DT>
<DD>Signed 8-bit integer constant.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>J</CODE></DT>
<DD>Signed 16-bit integer constant.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>K</CODE></DT>
<DD>Unsigned 16-bit integer constant.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>L</CODE></DT>
<DD>Integer constant that fits in one signed byte when incremented by one (&#8722;129<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=dots>...</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>126).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>m</CODE></DT>
<DD>Memory operand. If used together with &#8216;<SAMP><SPAN class=samp>&lt;</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>&gt;</SPAN></SAMP>&#8217;, the operand can have postincrement which requires printing with &#8216;<SAMP><SPAN class=samp>%In</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>%in</SPAN></SAMP>&#8217; on TILE-Gx. For example:<PRE style="FONT-SIZE: smaller" class=smallexample>               asm ("st_add %I0,%1,%i0" : "=m&lt;&gt;" (*mem) : "r" (val));
</PRE><BR></DD>
<DT><CODE>M</CODE></DT>
<DD>A bit mask suitable for the BFINS instruction.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>N</CODE></DT>
<DD>Integer constant that is a byte tiled out eight times.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>O</CODE></DT>
<DD>The integer zero constant.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>P</CODE></DT>
<DD>Integer constant that is a sign-extended byte tiled out as four shorts.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Q</CODE></DT>
<DD>Integer constant that fits in one signed byte when incremented (&#8722;129<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=dots>...</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>126), but excluding -1.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>S</CODE></DT>
<DD>Integer constant that has all 1 bits consecutive and starting at bit 0.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>T</CODE></DT>
<DD>A 16-bit fragment of a got, tls, or pc-relative reference.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>U</CODE></DT>
<DD>Memory operand except postincrement. This is roughly the same as &#8216;<SAMP><SPAN class=samp>m</SPAN></SAMP>&#8217; when not used together with &#8216;<SAMP><SPAN class=samp>&lt;</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>&gt;</SPAN></SAMP>&#8217;.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>W</CODE></DT>
<DD>An 8-element vector constant with identical elements.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Y</CODE></DT>
<DD>A 4-element vector constant with identical elements.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Z0</CODE></DT>
<DD>The integer constant 0xffffffff.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Z1</CODE></DT>
<DD>The integer constant 0xffffffff00000000.</DD></DL><BR></DD>
<DT><EM>TILEPro&#8212;</EM><SAMP><SPAN class=file>config/tilepro/constraints.md</SPAN></SAMP></DT>
<DD>
<DL>
<DT><CODE>R00</CODE></DT>
<DT><CODE>R01</CODE></DT>
<DT><CODE>R02</CODE></DT>
<DT><CODE>R03</CODE></DT>
<DT><CODE>R04</CODE></DT>
<DT><CODE>R05</CODE></DT>
<DT><CODE>R06</CODE></DT>
<DT><CODE>R07</CODE></DT>
<DT><CODE>R08</CODE></DT>
<DT><CODE>R09</CODE></DT>
<DT><CODE>R10</CODE></DT>
<DD>Each of these represents a register constraint for an individual register, from r0 to r10.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>I</CODE></DT>
<DD>Signed 8-bit integer constant.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>J</CODE></DT>
<DD>Signed 16-bit integer constant.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>K</CODE></DT>
<DD>Nonzero integer constant with low 16 bits zero.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>L</CODE></DT>
<DD>Integer constant that fits in one signed byte when incremented by one (&#8722;129<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=dots>...</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>126).<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>m</CODE></DT>
<DD>Memory operand. If used together with &#8216;<SAMP><SPAN class=samp>&lt;</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>&gt;</SPAN></SAMP>&#8217;, the operand can have postincrement which requires printing with &#8216;<SAMP><SPAN class=samp>%In</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>%in</SPAN></SAMP>&#8217; on TILEPro. For example:<PRE style="FONT-SIZE: smaller" class=smallexample>               asm ("swadd %I0,%1,%i0" : "=m&lt;&gt;" (mem) : "r" (val));
</PRE><BR></DD>
<DT><CODE>M</CODE></DT>
<DD>A bit mask suitable for the MM instruction.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>N</CODE></DT>
<DD>Integer constant that is a byte tiled out four times.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>O</CODE></DT>
<DD>The integer zero constant.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>P</CODE></DT>
<DD>Integer constant that is a sign-extended byte tiled out as two shorts.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Q</CODE></DT>
<DD>Integer constant that fits in one signed byte when incremented (&#8722;129<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=dots>...</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>126), but excluding -1.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>T</CODE></DT>
<DD>A symbolic operand, or a 16-bit fragment of a got, tls, or pc-relative reference.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>U</CODE></DT>
<DD>Memory operand except postincrement. This is roughly the same as &#8216;<SAMP><SPAN class=samp>m</SPAN></SAMP>&#8217; when not used together with &#8216;<SAMP><SPAN class=samp>&lt;</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>&gt;</SPAN></SAMP>&#8217;.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>W</CODE></DT>
<DD>A 4-element vector constant with identical elements.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>Y</CODE></DT>
<DD>A 2-element vector constant with identical elements.</DD></DL><BR></DD>
<DT><EM>Xtensa&#8212;</EM><SAMP><SPAN class=file>config/xtensa/constraints.md</SPAN></SAMP></DT>
<DD>
<DL>
<DT><CODE>a</CODE></DT>
<DD>General-purpose 32-bit register<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>b</CODE></DT>
<DD>One-bit boolean register<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>A</CODE></DT>
<DD>MAC16 40-bit accumulator register<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>I</CODE></DT>
<DD>Signed 12-bit integer constant, for use in MOVI instructions<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>J</CODE></DT>
<DD>Signed 8-bit integer constant, for use in ADDI instructions<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>K</CODE></DT>
<DD>Integer constant valid for BccI instructions<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>L</CODE></DT>
<DD>Unsigned constant valid for BccUI instructions</DD></DL></DD></DL>