<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.42.3 Constraint Modifier Characters</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-modifiers-in-constraints-3119></A><A name=index-constraint-modifier-characters-3120></A>Here are constraint modifier characters.<A name=index-g_t_0040samp_007b_003d_007d-in-constraint-3121></A></P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT>&#8216;<SAMP><SPAN class=samp>=</SPAN></SAMP>&#8217;</DT>
<DD>Means that this operand is write-only for this instruction: the previous value is discarded and replaced by output data.
<P><A name=index-g_t_0040samp_007b_002b_007d-in-constraint-3122></A><BR></P></DD>
<DT>&#8216;<SAMP><SPAN class=samp>+</SPAN></SAMP>&#8217;</DT>
<DD>Means that this operand is both read and written by the instruction.
<P>When the compiler fixes up the operands to satisfy the constraints, it needs to know which operands are inputs to the instruction and which are outputs from it. &#8216;<SAMP><SPAN class=samp>=</SPAN></SAMP>&#8217; identifies an output; &#8216;<SAMP><SPAN class=samp>+</SPAN></SAMP>&#8217; identifies an operand that is both input and output; all other operands are assumed to be input only.</P>
<P>If you specify &#8216;<SAMP><SPAN class=samp>=</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>+</SPAN></SAMP>&#8217; in a constraint, you put it in the first character of the constraint string.</P>
<P><A name=index-g_t_0040samp_007b_0026_007d-in-constraint-3123></A><A name=index-earlyclobber-operand-3124></A><BR></P></DD>
<DT>&#8216;<SAMP><SPAN class=samp>&amp;</SPAN></SAMP>&#8217;</DT>
<DD>Means (in a particular alternative) that this operand is an<SPAN class=Apple-converted-space>&nbsp;</SPAN><DFN>earlyclobber</DFN><SPAN class=Apple-converted-space>&nbsp;</SPAN>operand, which is modified before the instruction is finished using the input operands. Therefore, this operand may not lie in a register that is used as an input operand or as part of any memory address.
<P>&#8216;<SAMP><SPAN class=samp>&amp;</SPAN></SAMP>&#8217; applies only to the alternative in which it is written. In constraints with multiple alternatives, sometimes one alternative requires &#8216;<SAMP><SPAN class=samp>&amp;</SPAN></SAMP>&#8217; while others do not. See, for example, the &#8216;<SAMP><SPAN class=samp>movdf</SPAN></SAMP>&#8217; insn of the 68000.</P>
<P>An input operand can be tied to an earlyclobber operand if its only use as an input occurs before the early result is written. Adding alternatives of this form often allows GCC to produce better code when only some of the inputs can be affected by the earlyclobber. See, for example, the &#8216;<SAMP><SPAN class=samp>mulsi3</SPAN></SAMP>&#8217; insn of the ARM.</P>
<P>&#8216;<SAMP><SPAN class=samp>&amp;</SPAN></SAMP>&#8217; does not obviate the need to write &#8216;<SAMP><SPAN class=samp>=</SPAN></SAMP>&#8217;.</P>
<P><A name=index-g_t_0040samp_007b_0025_007d-in-constraint-3125></A><BR></P></DD>
<DT>&#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217;</DT>
<DD>Declares the instruction to be commutative for this operand and the following operand. This means that the compiler may interchange the two operands if that is the cheapest way to make all operands fit the constraints. GCC can only handle one commutative pair in an asm; if you use more, the compiler may fail. Note that you need not use the modifier if the two alternatives are strictly identical; this would only waste time in the reload pass. The modifier is not operational after register allocation, so the result of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define_peephole2</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>define_split</CODE>s performed after reload cannot rely on &#8216;<SAMP><SPAN class=samp>%</SPAN></SAMP>&#8217; to make the intended insn match.
<P><A name=index-g_t_0040samp_007b_0023_007d-in-constraint-3126></A><BR></P></DD>
<DT>&#8216;<SAMP><SPAN class=samp>#</SPAN></SAMP>&#8217;</DT>
<DD>Says that all following characters, up to the next comma, are to be ignored as a constraint. They are significant only for choosing register preferences.
<P><A name=index-g_t_0040samp_007b_002a_007d-in-constraint-3127></A><BR></P></DD>
<DT>&#8216;<SAMP><SPAN class=samp>*</SPAN></SAMP>&#8217;</DT>
<DD>Says that the following character should be ignored when choosing register preferences. &#8216;<SAMP><SPAN class=samp>*</SPAN></SAMP>&#8217; has no effect on the meaning of the constraint as a constraint, and no effect on reloading. For LRA &#8216;<SAMP><SPAN class=samp>*</SPAN></SAMP>&#8217; additionally disparages slightly the alternative if the following character matches the operand.</DD></DL>