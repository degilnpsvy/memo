<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>6.38 Inquiring on Alignment of Types or Variables</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-alignment-3053></A><A name=index-type-alignment-3054></A><A name=index-variable-alignment-3055></A>The keyword<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__alignof__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>allows you to inquire about how an object is aligned, or the minimum alignment usually required by a type. Its syntax is just like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sizeof</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">For example, if the target machine requires a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>double</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value to be aligned on an 8-byte boundary, then<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__alignof__ (double)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 8. This is true on many RISC machines. On more traditional machine designs,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__alignof__ (double)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 4 or even 2.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Some machines never actually require alignment; they allow reference to any data type even at an odd address. For these machines,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__alignof__</CODE>reports the smallest alignment that GCC gives the data type, usually as mandated by the target ABI.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If the operand of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__alignof__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an lvalue rather than a type, its value is the required alignment for its type, taking into account any minimum alignment specified with GCC's<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__attribute__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>extension (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Variable-Attributes.html#Variable-Attributes">Variable Attributes</A>). For example, after this declaration:</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     struct foo { int x; char y; } foo1;
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=noindent>the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__alignof__ (foo1.y)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 1, even though its actual alignment is probably 2 or 4, the same as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__alignof__ (int)</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">It is an error to ask for the alignment of an incomplete type.