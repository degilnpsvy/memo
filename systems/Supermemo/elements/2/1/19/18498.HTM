<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>6.42.1 Simple Constraints</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-simple-constraints-3081></A>The simplest kind of constraint is a string full of letters, each of which describes one kind of operand that is permitted. Here are the letters that are allowed:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT>whitespace</DT>
<DD>Whitespace characters are ignored and can be inserted at any position except the first. This enables each alternative for different operands to be visually aligned in the machine description even if they have different number of constraints and modifiers.
<P><A name=index-g_t_0040samp_007bm_007d-in-constraint-3082></A><A name=index-memory-references-in-constraints-3083></A><BR></P></DD>
<DT>&#8216;<SAMP><SPAN class=samp>m</SPAN></SAMP>&#8217;</DT>
<DD>A memory operand is allowed, with any kind of address that the machine supports in general. Note that the letter used for the general memory constraint can be re-defined by a back end using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>TARGET_MEM_CONSTRAINT</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>macro.
<P><A name=index-offsettable-address-3084></A><A name=index-g_t_0040samp_007bo_007d-in-constraint-3085></A><BR></P></DD>
<DT>&#8216;<SAMP><SPAN class=samp>o</SPAN></SAMP>&#8217;</DT>
<DD>A memory operand is allowed, but only if the address is<SPAN class=Apple-converted-space>&nbsp;</SPAN><DFN>offsettable</DFN>. This means that adding a small integer (actually, the width in bytes of the operand, as determined by its machine mode) may be added to the address and the result is also a valid memory address.
<P><A name=index-autoincrement_002fdecrement-addressing-3086></A>For example, an address which is constant is offsettable; so is an address that is the sum of a register and a constant (as long as a slightly larger constant is also within the range of address-offsets supported by the machine); but an autoincrement or autodecrement address is not offsettable. More complicated indirect/indexed addresses may or may not be offsettable depending on the other addressing modes that the machine supports.</P>
<P>Note that in an output operand which can be matched by another operand, the constraint letter &#8216;<SAMP><SPAN class=samp>o</SPAN></SAMP>&#8217; is valid only when accompanied by both &#8216;<SAMP><SPAN class=samp>&lt;</SPAN></SAMP>&#8217; (if the target machine has predecrement addressing) and &#8216;<SAMP><SPAN class=samp>&gt;</SPAN></SAMP>&#8217; (if the target machine has preincrement addressing).</P>
<P><A name=index-g_t_0040samp_007bV_007d-in-constraint-3087></A><BR></P></DD>
<DT>&#8216;<SAMP><SPAN class=samp>V</SPAN></SAMP>&#8217;</DT>
<DD>A memory operand that is not offsettable. In other words, anything that would fit the &#8216;<SAMP><SPAN class=samp>m</SPAN></SAMP>&#8217; constraint but not the &#8216;<SAMP><SPAN class=samp>o</SPAN></SAMP>&#8217; constraint.
<P><A name=index-g_t_0040samp_007b_003c_007d-in-constraint-3088></A><BR></P></DD>
<DT>&#8216;<SAMP><SPAN class=samp>&lt;</SPAN></SAMP>&#8217;</DT>
<DD>A memory operand with autodecrement addressing (either predecrement or postdecrement) is allowed. In inline<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>this constraint is only allowed if the operand is used exactly once in an instruction that can handle the side-effects. Not using an operand with &#8216;<SAMP><SPAN class=samp>&lt;</SPAN></SAMP>&#8217; in constraint string in the inline<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>pattern at all or using it in multiple instructions isn't valid, because the side-effects wouldn't be performed or would be performed more than once. Furthermore, on some targets the operand with &#8216;<SAMP><SPAN class=samp>&lt;</SPAN></SAMP>&#8217; in constraint string must be accompanied by special instruction suffixes like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%U0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction suffix on PowerPC or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>%P0</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>on IA-64.
<P><A name=index-g_t_0040samp_007b_003e_007d-in-constraint-3089></A><BR></P></DD>
<DT>&#8216;<SAMP><SPAN class=samp>&gt;</SPAN></SAMP>&#8217;</DT>
<DD>A memory operand with autoincrement addressing (either preincrement or postincrement) is allowed. In inline<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>the same restrictions as for &#8216;<SAMP><SPAN class=samp>&lt;</SPAN></SAMP>&#8217; apply.
<P><A name=index-g_t_0040samp_007br_007d-in-constraint-3090></A><A name=index-registers-in-constraints-3091></A><BR></P></DD>
<DT>&#8216;<SAMP><SPAN class=samp>r</SPAN></SAMP>&#8217;</DT>
<DD>A register operand is allowed provided that it is in a general register.
<P><A name=index-constants-in-constraints-3092></A><A name=index-g_t_0040samp_007bi_007d-in-constraint-3093></A><BR></P></DD>
<DT>&#8216;<SAMP><SPAN class=samp>i</SPAN></SAMP>&#8217;</DT>
<DD>An immediate integer operand (one with constant value) is allowed. This includes symbolic constants whose values will be known only at assembly time or later.
<P><A name=index-g_t_0040samp_007bn_007d-in-constraint-3094></A><BR></P></DD>
<DT>&#8216;<SAMP><SPAN class=samp>n</SPAN></SAMP>&#8217;</DT>
<DD>An immediate integer operand with a known numeric value is allowed. Many systems cannot support assembly-time constants for operands less than a word wide. Constraints for these operands should use &#8216;<SAMP><SPAN class=samp>n</SPAN></SAMP>&#8217; rather than &#8216;<SAMP><SPAN class=samp>i</SPAN></SAMP>&#8217;.
<P><A name=index-g_t_0040samp_007bI_007d-in-constraint-3095></A><BR></P></DD>
<DT>&#8216;<SAMP><SPAN class=samp>I</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>J</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>K</SPAN></SAMP>&#8217;,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=dots>...</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8216;<SAMP><SPAN class=samp>P</SPAN></SAMP>&#8217;</DT>
<DD>Other letters in the range &#8216;<SAMP><SPAN class=samp>I</SPAN></SAMP>&#8217; through &#8216;<SAMP><SPAN class=samp>P</SPAN></SAMP>&#8217; may be defined in a machine-dependent fashion to permit immediate integer operands with explicit integer values in specified ranges. For example, on the 68000, &#8216;<SAMP><SPAN class=samp>I</SPAN></SAMP>&#8217; is defined to stand for the range of values 1 to 8. This is the range permitted as a shift count in the shift instructions.
<P><A name=index-g_t_0040samp_007bE_007d-in-constraint-3096></A><BR></P></DD>
<DT>&#8216;<SAMP><SPAN class=samp>E</SPAN></SAMP>&#8217;</DT>
<DD>An immediate floating operand (expression code<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>const_double</CODE>) is allowed, but only if the target floating point format is the same as that of the host machine (on which the compiler is running).
<P><A name=index-g_t_0040samp_007bF_007d-in-constraint-3097></A><BR></P></DD>
<DT>&#8216;<SAMP><SPAN class=samp>F</SPAN></SAMP>&#8217;</DT>
<DD>An immediate floating operand (expression code<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>const_double</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>const_vector</CODE>) is allowed.
<P><A name=index-g_t_0040samp_007bG_007d-in-constraint-3098></A><A name=index-g_t_0040samp_007bH_007d-in-constraint-3099></A><BR></P></DD>
<DT>&#8216;<SAMP><SPAN class=samp>G</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>H</SPAN></SAMP>&#8217;</DT>
<DD>&#8216;<SAMP><SPAN class=samp>G</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>H</SPAN></SAMP>&#8217; may be defined in a machine-dependent fashion to permit immediate floating operands in particular ranges of values.
<P><A name=index-g_t_0040samp_007bs_007d-in-constraint-3100></A><BR></P></DD>
<DT>&#8216;<SAMP><SPAN class=samp>s</SPAN></SAMP>&#8217;</DT>
<DD>An immediate integer operand whose value is not an explicit integer is allowed.
<P>This might appear strange; if an insn allows a constant operand with a value not known at compile time, it certainly must allow any known value. So why use &#8216;<SAMP><SPAN class=samp>s</SPAN></SAMP>&#8217; instead of &#8216;<SAMP><SPAN class=samp>i</SPAN></SAMP>&#8217;? Sometimes it allows better code to be generated.</P>
<P>For example, on the 68000 in a fullword instruction it is possible to use an immediate operand; but if the immediate value is between &#8722;128 and 127, better code results from loading the value into a register and using the register. This is because the load into the register can be done with a &#8216;<SAMP><SPAN class=samp>moveq</SPAN></SAMP>&#8217; instruction. We arrange for this to happen by defining the letter &#8216;<SAMP><SPAN class=samp>K</SPAN></SAMP>&#8217; to mean &#8220;any integer outside the range &#8722;128 to 127&#8221;, and then specifying &#8216;<SAMP><SPAN class=samp>Ks</SPAN></SAMP>&#8217; in the operand constraints.</P>
<P><A name=index-g_t_0040samp_007bg_007d-in-constraint-3101></A><BR></P></DD>
<DT>&#8216;<SAMP><SPAN class=samp>g</SPAN></SAMP>&#8217;</DT>
<DD>Any register, memory or immediate integer operand is allowed, except for registers that are not general registers.
<P><A name=index-g_t_0040samp_007bX_007d-in-constraint-3102></A><BR></P></DD>
<DT>&#8216;<SAMP><SPAN class=samp>X</SPAN></SAMP>&#8217;</DT>
<DD>Any operand whatsoever is allowed.
<P><A name=index-g_t_0040samp_007b0_007d-in-constraint-3103></A><A name=index-digits-in-constraint-3104></A><BR></P></DD>
<DT>&#8216;<SAMP><SPAN class=samp>0</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>1</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>2</SPAN></SAMP>&#8217;,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SMALL class=dots>...</SMALL><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8216;<SAMP><SPAN class=samp>9</SPAN></SAMP>&#8217;</DT>
<DD>An operand that matches the specified operand number is allowed. If a digit is used together with letters within the same alternative, the digit should come last.
<P>This number is allowed to be more than a single digit. If multiple digits are encountered consecutively, they are interpreted as a single decimal integer. There is scant chance for ambiguity, since to-date it has never been desirable that &#8216;<SAMP><SPAN class=samp>10</SPAN></SAMP>&#8217; be interpreted as matching either operand 1<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>or</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>operand 0. Should this be desired, one can use multiple alternatives instead.</P>
<P><A name=index-matching-constraint-3105></A><A name=index-constraint_002c-matching-3106></A>This is called a<SPAN class=Apple-converted-space>&nbsp;</SPAN><DFN>matching constraint</DFN><SPAN class=Apple-converted-space>&nbsp;</SPAN>and what it really means is that the assembler has only a single operand that fills two roles which<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asm</CODE>distinguishes. For example, an add instruction uses two input operands and an output operand, but on most CISC machines an add instruction really has only two operands, one of them an input-output operand:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          addl #35,r12
</PRE>
<P>Matching constraints are used in these circumstances. More precisely, the two operands that match must include one input-only operand and one output-only operand. Moreover, the digit must be a smaller number than the number of the operand that uses it in the constraint.</P>
<P><A name=index-load-address-instruction-3107></A><A name=index-push-address-instruction-3108></A><A name=index-address-constraints-3109></A><A name=index-g_t_0040samp_007bp_007d-in-constraint-3110></A><BR></P></DD>
<DT>&#8216;<SAMP><SPAN class=samp>p</SPAN></SAMP>&#8217;</DT>
<DD>An operand that is a valid memory address is allowed. This is for &#8220;load address&#8221; and &#8220;push address&#8221; instructions.
<P><A name=index-address_005foperand-3111></A>&#8216;<SAMP><SPAN class=samp>p</SPAN></SAMP>&#8217; in the constraint must be accompanied by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>address_operand</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the predicate in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>match_operand</CODE>. This predicate interprets the mode specified in the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>match_operand</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as the mode of the memory reference for which the address would be valid.</P>
<P><A name=index-other-register-constraints-3112></A><A name=index-extensible-constraints-3113></A><BR></P></DD>
<DT><VAR>other-letters</VAR></DT>
<DD>Other letters can be defined in machine-dependent fashion to stand for particular classes of registers or other arbitrary operand types. &#8216;<SAMP><SPAN class=samp>d</SPAN></SAMP>&#8217;, &#8216;<SAMP><SPAN class=samp>a</SPAN></SAMP>&#8217; and &#8216;<SAMP><SPAN class=samp>f</SPAN></SAMP>&#8217; are defined on the 68000/68020 to stand for data, address and floating point registers.</DD></DL>