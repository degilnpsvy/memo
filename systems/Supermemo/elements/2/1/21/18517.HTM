<H3 class=section style="FONT-FAMILY: Simsun; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">6.56 Other Built-in Functions Provided by GCC</H3>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><A name=index-built-in-functions-3222></A><A name=index-g_t_005f_005fbuiltin_005ffpclassify-3223></A><A name=index-g_t_005f_005fbuiltin_005fisfinite-3224></A><A name=index-g_t_005f_005fbuiltin_005fisnormal-3225></A><A name=index-g_t_005f_005fbuiltin_005fisgreater-3226></A><A name=index-g_t_005f_005fbuiltin_005fisgreaterequal-3227></A><A name=index-g_t_005f_005fbuiltin_005fisinf_005fsign-3228></A><A name=index-g_t_005f_005fbuiltin_005fisless-3229></A><A name=index-g_t_005f_005fbuiltin_005fislessequal-3230></A><A name=index-g_t_005f_005fbuiltin_005fislessgreater-3231></A><A name=index-g_t_005f_005fbuiltin_005fisunordered-3232></A><A name=index-g_t_005f_005fbuiltin_005fpowi-3233></A><A name=index-g_t_005f_005fbuiltin_005fpowif-3234></A><A name=index-g_t_005f_005fbuiltin_005fpowil-3235></A><A name=index-g_t_005fExit-3236></A><A name=index-g_t_005fexit-3237></A><A name=index-abort-3238></A><A name=index-abs-3239></A><A name=index-acos-3240></A><A name=index-acosf-3241></A><A name=index-acosh-3242></A><A name=index-acoshf-3243></A><A name=index-acoshl-3244></A><A name=index-acosl-3245></A><A name=index-alloca-3246></A><A name=index-asin-3247></A><A name=index-asinf-3248></A><A name=index-asinh-3249></A><A name=index-asinhf-3250></A><A name=index-asinhl-3251></A><A name=index-asinl-3252></A><A name=index-atan-3253></A><A name=index-atan2-3254></A><A name=index-atan2f-3255></A><A name=index-atan2l-3256></A><A name=index-atanf-3257></A><A name=index-atanh-3258></A><A name=index-atanhf-3259></A><A name=index-atanhl-3260></A><A name=index-atanl-3261></A><A name=index-bcmp-3262></A><A name=index-bzero-3263></A><A name=index-cabs-3264></A><A name=index-cabsf-3265></A><A name=index-cabsl-3266></A><A name=index-cacos-3267></A><A name=index-cacosf-3268></A><A name=index-cacosh-3269></A><A name=index-cacoshf-3270></A><A name=index-cacoshl-3271></A><A name=index-cacosl-3272></A><A name=index-calloc-3273></A><A name=index-carg-3274></A><A name=index-cargf-3275></A><A name=index-cargl-3276></A><A name=index-casin-3277></A><A name=index-casinf-3278></A><A name=index-casinh-3279></A><A name=index-casinhf-3280></A><A name=index-casinhl-3281></A><A name=index-casinl-3282></A><A name=index-catan-3283></A><A name=index-catanf-3284></A><A name=index-catanh-3285></A><A name=index-catanhf-3286></A><A name=index-catanhl-3287></A><A name=index-catanl-3288></A><A name=index-cbrt-3289></A><A name=index-cbrtf-3290></A><A name=index-cbrtl-3291></A><A name=index-ccos-3292></A><A name=index-ccosf-3293></A><A name=index-ccosh-3294></A><A name=index-ccoshf-3295></A><A name=index-ccoshl-3296></A><A name=index-ccosl-3297></A><A name=index-ceil-3298></A><A name=index-ceilf-3299></A><A name=index-ceill-3300></A><A name=index-cexp-3301></A><A name=index-cexpf-3302></A><A name=index-cexpl-3303></A><A name=index-cimag-3304></A><A name=index-cimagf-3305></A><A name=index-cimagl-3306></A><A name=index-clog-3307></A><A name=index-clogf-3308></A><A name=index-clogl-3309></A><A name=index-conj-3310></A><A name=index-conjf-3311></A><A name=index-conjl-3312></A><A name=index-copysign-3313></A><A name=index-copysignf-3314></A><A name=index-copysignl-3315></A><A name=index-cos-3316></A><A name=index-cosf-3317></A><A name=index-cosh-3318></A><A name=index-coshf-3319></A><A name=index-coshl-3320></A><A name=index-cosl-3321></A><A name=index-cpow-3322></A><A name=index-cpowf-3323></A><A name=index-cpowl-3324></A><A name=index-cproj-3325></A><A name=index-cprojf-3326></A><A name=index-cprojl-3327></A><A name=index-creal-3328></A><A name=index-crealf-3329></A><A name=index-creall-3330></A><A name=index-csin-3331></A><A name=index-csinf-3332></A><A name=index-csinh-3333></A><A name=index-csinhf-3334></A><A name=index-csinhl-3335></A><A name=index-csinl-3336></A><A name=index-csqrt-3337></A><A name=index-csqrtf-3338></A><A name=index-csqrtl-3339></A><A name=index-ctan-3340></A><A name=index-ctanf-3341></A><A name=index-ctanh-3342></A><A name=index-ctanhf-3343></A><A name=index-ctanhl-3344></A><A name=index-ctanl-3345></A><A name=index-dcgettext-3346></A><A name=index-dgettext-3347></A><A name=index-drem-3348></A><A name=index-dremf-3349></A><A name=index-dreml-3350></A><A name=index-erf-3351></A><A name=index-erfc-3352></A><A name=index-erfcf-3353></A><A name=index-erfcl-3354></A><A name=index-erff-3355></A><A name=index-erfl-3356></A><A name=index-exit-3357></A><A name=index-exp-3358></A><A name=index-exp10-3359></A><A name=index-exp10f-3360></A><A name=index-exp10l-3361></A><A name=index-exp2-3362></A><A name=index-exp2f-3363></A><A name=index-exp2l-3364></A><A name=index-expf-3365></A><A name=index-expl-3366></A><A name=index-expm1-3367></A><A name=index-expm1f-3368></A><A name=index-expm1l-3369></A><A name=index-fabs-3370></A><A name=index-fabsf-3371></A><A name=index-fabsl-3372></A><A name=index-fdim-3373></A><A name=index-fdimf-3374></A><A name=index-fdiml-3375></A><A name=index-ffs-3376></A><A name=index-floor-3377></A><A name=index-floorf-3378></A><A name=index-floorl-3379></A><A name=index-fma-3380></A><A name=index-fmaf-3381></A><A name=index-fmal-3382></A><A name=index-fmax-3383></A><A name=index-fmaxf-3384></A><A name=index-fmaxl-3385></A><A name=index-fmin-3386></A><A name=index-fminf-3387></A><A name=index-fminl-3388></A><A name=index-fmod-3389></A><A name=index-fmodf-3390></A><A name=index-fmodl-3391></A><A name=index-fprintf-3392></A><A name=index-fprintf_005funlocked-3393></A><A name=index-fputs-3394></A><A name=index-fputs_005funlocked-3395></A><A name=index-frexp-3396></A><A name=index-frexpf-3397></A><A name=index-frexpl-3398></A><A name=index-fscanf-3399></A><A name=index-gamma-3400></A><A name=index-gammaf-3401></A><A name=index-gammal-3402></A><A name=index-gamma_005fr-3403></A><A name=index-gammaf_005fr-3404></A><A name=index-gammal_005fr-3405></A><A name=index-gettext-3406></A><A name=index-hypot-3407></A><A name=index-hypotf-3408></A><A name=index-hypotl-3409></A><A name=index-ilogb-3410></A><A name=index-ilogbf-3411></A><A name=index-ilogbl-3412></A><A name=index-imaxabs-3413></A><A name=index-index-3414></A><A name=index-isalnum-3415></A><A name=index-isalpha-3416></A><A name=index-isascii-3417></A><A name=index-isblank-3418></A><A name=index-iscntrl-3419></A><A name=index-isdigit-3420></A><A name=index-isgraph-3421></A><A name=index-islower-3422></A><A name=index-isprint-3423></A><A name=index-ispunct-3424></A><A name=index-isspace-3425></A><A name=index-isupper-3426></A><A name=index-iswalnum-3427></A><A name=index-iswalpha-3428></A><A name=index-iswblank-3429></A><A name=index-iswcntrl-3430></A><A name=index-iswdigit-3431></A><A name=index-iswgraph-3432></A><A name=index-iswlower-3433></A><A name=index-iswprint-3434></A><A name=index-iswpunct-3435></A><A name=index-iswspace-3436></A><A name=index-iswupper-3437></A><A name=index-iswxdigit-3438></A><A name=index-isxdigit-3439></A><A name=index-j0-3440></A><A name=index-j0f-3441></A><A name=index-j0l-3442></A><A name=index-j1-3443></A><A name=index-j1f-3444></A><A name=index-j1l-3445></A><A name=index-jn-3446></A><A name=index-jnf-3447></A><A name=index-jnl-3448></A><A name=index-labs-3449></A><A name=index-ldexp-3450></A><A name=index-ldexpf-3451></A><A name=index-ldexpl-3452></A><A name=index-lgamma-3453></A><A name=index-lgammaf-3454></A><A name=index-lgammal-3455></A><A name=index-lgamma_005fr-3456></A><A name=index-lgammaf_005fr-3457></A><A name=index-lgammal_005fr-3458></A><A name=index-llabs-3459></A><A name=index-llrint-3460></A><A name=index-llrintf-3461></A><A name=index-llrintl-3462></A><A name=index-llround-3463></A><A name=index-llroundf-3464></A><A name=index-llroundl-3465></A><A name=index-log-3466></A><A name=index-log10-3467></A><A name=index-log10f-3468></A><A name=index-log10l-3469></A><A name=index-log1p-3470></A><A name=index-log1pf-3471></A><A name=index-log1pl-3472></A><A name=index-log2-3473></A><A name=index-log2f-3474></A><A name=index-log2l-3475></A><A name=index-logb-3476></A><A name=index-logbf-3477></A><A name=index-logbl-3478></A><A name=index-logf-3479></A><A name=index-logl-3480></A><A name=index-lrint-3481></A><A name=index-lrintf-3482></A><A name=index-lrintl-3483></A><A name=index-lround-3484></A><A name=index-lroundf-3485></A><A name=index-lroundl-3486></A><A name=index-malloc-3487></A><A name=index-memchr-3488></A><A name=index-memcmp-3489></A><A name=index-memcpy-3490></A><A name=index-mempcpy-3491></A><A name=index-memset-3492></A><A name=index-modf-3493></A><A name=index-modff-3494></A><A name=index-modfl-3495></A><A name=index-nearbyint-3496></A><A name=index-nearbyintf-3497></A><A name=index-nearbyintl-3498></A><A name=index-nextafter-3499></A><A name=index-nextafterf-3500></A><A name=index-nextafterl-3501></A><A name=index-nexttoward-3502></A><A name=index-nexttowardf-3503></A><A name=index-nexttowardl-3504></A><A name=index-pow-3505></A><A name=index-pow10-3506></A><A name=index-pow10f-3507></A><A name=index-pow10l-3508></A><A name=index-powf-3509></A><A name=index-powl-3510></A><A name=index-printf-3511></A><A name=index-printf_005funlocked-3512></A><A name=index-putchar-3513></A><A name=index-puts-3514></A><A name=index-remainder-3515></A><A name=index-remainderf-3516></A><A name=index-remainderl-3517></A><A name=index-remquo-3518></A><A name=index-remquof-3519></A><A name=index-remquol-3520></A><A name=index-rindex-3521></A><A name=index-rint-3522></A><A name=index-rintf-3523></A><A name=index-rintl-3524></A><A name=index-round-3525></A><A name=index-roundf-3526></A><A name=index-roundl-3527></A><A name=index-scalb-3528></A><A name=index-scalbf-3529></A><A name=index-scalbl-3530></A><A name=index-scalbln-3531></A><A name=index-scalblnf-3532></A><A name=index-scalblnf-3533></A><A name=index-scalbn-3534></A><A name=index-scalbnf-3535></A><A name=index-scanfnl-3536></A><A name=index-signbit-3537></A><A name=index-signbitf-3538></A><A name=index-signbitl-3539></A><A name=index-signbitd32-3540></A><A name=index-signbitd64-3541></A><A name=index-signbitd128-3542></A><A name=index-significand-3543></A><A name=index-significandf-3544></A><A name=index-significandl-3545></A><A name=index-sin-3546></A><A name=index-sincos-3547></A><A name=index-sincosf-3548></A><A name=index-sincosl-3549></A><A name=index-sinf-3550></A><A name=index-sinh-3551></A><A name=index-sinhf-3552></A><A name=index-sinhl-3553></A><A name=index-sinl-3554></A><A name=index-snprintf-3555></A><A name=index-sprintf-3556></A><A name=index-sqrt-3557></A><A name=index-sqrtf-3558></A><A name=index-sqrtl-3559></A><A name=index-sscanf-3560></A><A name=index-stpcpy-3561></A><A name=index-stpncpy-3562></A><A name=index-strcasecmp-3563></A><A name=index-strcat-3564></A><A name=index-strchr-3565></A><A name=index-strcmp-3566></A><A name=index-strcpy-3567></A><A name=index-strcspn-3568></A><A name=index-strdup-3569></A><A name=index-strfmon-3570></A><A name=index-strftime-3571></A><A name=index-strlen-3572></A><A name=index-strncasecmp-3573></A><A name=index-strncat-3574></A><A name=index-strncmp-3575></A><A name=index-strncpy-3576></A><A name=index-strndup-3577></A><A name=index-strpbrk-3578></A><A name=index-strrchr-3579></A><A name=index-strspn-3580></A><A name=index-strstr-3581></A><A name=index-tan-3582></A><A name=index-tanf-3583></A><A name=index-tanh-3584></A><A name=index-tanhf-3585></A><A name=index-tanhl-3586></A><A name=index-tanl-3587></A><A name=index-tgamma-3588></A><A name=index-tgammaf-3589></A><A name=index-tgammal-3590></A><A name=index-toascii-3591></A><A name=index-tolower-3592></A><A name=index-toupper-3593></A><A name=index-towlower-3594></A><A name=index-towupper-3595></A><A name=index-trunc-3596></A><A name=index-truncf-3597></A><A name=index-truncl-3598></A><A name=index-vfprintf-3599></A><A name=index-vfscanf-3600></A><A name=index-vprintf-3601></A><A name=index-vscanf-3602></A><A name=index-vsnprintf-3603></A><A name=index-vsprintf-3604></A><A name=index-vsscanf-3605></A><A name=index-y0-3606></A><A name=index-y0f-3607></A><A name=index-y0l-3608></A><A name=index-y1-3609></A><A name=index-y1f-3610></A><A name=index-y1l-3611></A><A name=index-yn-3612></A><A name=index-ynf-3613></A><A name=index-ynl-3614></A>GCC provides a large number of built-in functions other than the ones mentioned above. Some of these are for internal use in the processing of exceptions or variable-length argument lists and are not documented here because they may change from time to time; we do not recommend general use of these functions.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">The remaining functions are provided for optimization purposes.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><A name=index-fno-builtin-3615></A>GCC includes built-in versions of many of the functions in the standard C library. The versions prefixed with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are always treated as having the same meaning as the C library function even if you specify the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fno-builtin</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option. (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/C-Dialect-Options.html#C-Dialect-Options">C Dialect Options</A>) Many of these functions are only optimized in certain cases; if they are not optimized in a particular case, a call to the library function is emitted.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><A name=index-ansi-3616></A><A name=index-std-3617></A>Outside strict ISO C mode (<SAMP><SPAN class=option>-ansi</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-std=c90</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-std=c99</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-std=c11</SPAN></SAMP>), the functions<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_exit</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>alloca</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bcmp</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>bzero</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dcgettext</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dgettext</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dremf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>dreml</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>drem</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>exp10f</CODE>,<CODE>exp10l</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>exp10</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ffsll</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ffsl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ffs</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fprintf_unlocked</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fputs_unlocked</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gammaf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gammal</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gamma</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gammaf_r</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gammal_r</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gamma_r</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>gettext</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>index</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>isascii</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>j0f</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>j0l</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>j0</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>j1f</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>j1l</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>j1</CODE>,<CODE>jnf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>jnl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>jn</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lgammaf_r</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lgammal_r</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lgamma_r</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>mempcpy</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>pow10f</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>pow10l</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>pow10</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>printf_unlocked</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>rindex</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scalbf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scalbl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scalb</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>signbit</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>signbitf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>signbitl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>signbitd32</CODE>,<CODE>signbitd64</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>signbitd128</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>significandf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>significandl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>significand</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sincosf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sincosl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sincos</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stpcpy</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>stpncpy</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strcasecmp</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strdup</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strfmon</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strncasecmp</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strndup</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>toascii</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>y0f</CODE>,<CODE>y0l</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>y0</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>y1f</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>y1l</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>y1</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ynf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ynl</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>yn</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be handled as built-in functions. All these functions have corresponding versions prefixed with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_</CODE>, which may be used even in strict C90 mode.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">The ISO C99 functions<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_Exit</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>acoshf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>acoshl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>acosh</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asinhf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asinhl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asinh</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atanhf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atanhl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atanh</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cabsf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cabsl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cabs</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cacosf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cacoshf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cacoshl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cacosh</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cacosl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cacos</CODE>,<CODE>cargf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cargl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>carg</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>casinf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>casinhf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>casinhl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>casinh</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>casinl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>casin</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catanf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catanhf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catanhl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catanh</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catanl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>catan</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cbrtf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cbrtl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cbrt</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ccosf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ccoshf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ccoshl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ccosh</CODE>,<CODE>ccosl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ccos</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cexpf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cexpl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cexp</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cimagf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cimagl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cimag</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>clogf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>clogl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>clog</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>conjf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>conjl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>conj</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>copysignf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>copysignl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>copysign</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cpowf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cpowl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cpow</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cprojf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cprojl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cproj</CODE>,<CODE>crealf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>creall</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>creal</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>csinf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>csinhf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>csinhl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>csinh</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>csinl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>csin</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>csqrtf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>csqrtl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>csqrt</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ctanf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ctanhf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ctanhl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ctanh</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ctanl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ctan</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>erfcf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>erfcl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>erfc</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>erff</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>erfl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>erf</CODE>,<CODE>exp2f</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>exp2l</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>exp2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>expm1f</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>expm1l</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>expm1</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fdimf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fdiml</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fdim</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fmaf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fmal</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fmaxf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fmaxl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fmax</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fma</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fminf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fminl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fmin</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hypotf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hypotl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>hypot</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ilogbf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ilogbl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ilogb</CODE>,<CODE>imaxabs</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>isblank</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>iswblank</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lgammaf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lgammal</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lgamma</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>llabs</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>llrintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>llrintl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>llrint</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>llroundf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>llroundl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>llround</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>log1pf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>log1pl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>log1p</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>log2f</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>log2l</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>log2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>logbf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>logbl</CODE>,<CODE>logb</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lrintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lrintl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lrint</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lroundf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lroundl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>lround</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nearbyintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nearbyintl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nearbyint</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nextafterf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nextafterl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nextafter</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nexttowardf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nexttowardl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nexttoward</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>remainderf</CODE>,<CODE>remainderl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>remainder</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>remquof</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>remquol</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>remquo</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>rintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>rintl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>rint</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>roundf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>roundl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>round</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scalblnf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scalblnl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scalbln</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scalbnf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scalbnl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scalbn</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>snprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tgammaf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tgammal</CODE>,<CODE>tgamma</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>truncf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>truncl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>trunc</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vfscanf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vscanf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vsnprintf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vsscanf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are handled as built-in functions except in strict ISO C90 mode (<SAMP><SPAN class=option>-ansi</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-std=c90</SPAN></SAMP>).</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">There are also built-in versions of the ISO C99 functions<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>acosf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>acosl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asinf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asinl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atan2f</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atan2l</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atanf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atanl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ceilf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ceill</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cosf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>coshf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>coshl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cosl</CODE>,<CODE>expf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>expl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fabsf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fabsl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>floorf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>floorl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fmodf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fmodl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>frexpf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>frexpl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ldexpf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ldexpl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>log10f</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>log10l</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>logf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>logl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>modfl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>modf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>powf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>powl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sinf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sinhf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sinhl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sinl</CODE>,<CODE>sqrtf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sqrtl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tanf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tanhf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tanhl</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tanl</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that are recognized in any mode since ISO C90 reserves these names for the purpose to which ISO C99 puts them. All these functions have corresponding versions prefixed with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_</CODE>.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">The ISO C94 functions<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>iswalnum</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>iswalpha</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>iswcntrl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>iswdigit</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>iswgraph</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>iswlower</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>iswprint</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>iswpunct</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>iswspace</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>iswupper</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>iswxdigit</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>towlower</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>towupper</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are handled as built-in functions except in strict ISO C90 mode (<SAMP><SPAN class=option>-ansi</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-std=c90</SPAN></SAMP>).</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">The ISO C90 functions<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>abort</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>abs</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>acos</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asin</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atan2</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>atan</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>calloc</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ceil</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cosh</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>cos</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>exit</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>exp</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fabs</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>floor</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fmod</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fputs</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>frexp</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fscanf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>isalnum</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>isalpha</CODE>,<CODE>iscntrl</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>isdigit</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>isgraph</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>islower</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>isprint</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ispunct</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>isspace</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>isupper</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>isxdigit</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tolower</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>toupper</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>labs</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>ldexp</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>log10</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>log</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>malloc</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>memchr</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>memcmp</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>memcpy</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>memset</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>modf</CODE>,<CODE>pow</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>printf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>putchar</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>puts</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>scanf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sinh</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sin</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>snprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sqrt</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sscanf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strcat</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strchr</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strcmp</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strcpy</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strcspn</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strlen</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strncat</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strncmp</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strncpy</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strpbrk</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strrchr</CODE>,<CODE>strspn</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strstr</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tanh</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>tan</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vfprintf</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vprintf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>vsprintf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are all recognized as built-in functions unless<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fno-builtin</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified (or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fno-builtin-</SPAN><VAR>function</VAR></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified for an individual function). All of these functions have corresponding versions prefixed with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_</CODE>.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">GCC provides built-in versions of the ISO C99 floating-point comparison macros that avoid raising exceptions for unordered operands. They have the same names as the standard macros (<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>isgreater</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>isgreaterequal</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>isless</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>islessequal</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>islessgreater</CODE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>isunordered</CODE>) , with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>prefixed. We intend for a library implementor to be able to simply<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>#define</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>each standard macro to its built-in equivalent. In the same fashion, GCC provides<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>fpclassify</CODE>,<CODE>isfinite</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>isinf_sign</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>isnormal</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>built-ins used with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>prefixed. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>isinf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>isnan</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>built-in functions appear both with and without the<CODE>__builtin_</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>prefix.</P>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: int<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_types_compatible_p</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>type1, type2</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005ftypes_005fcompatible_005fp-3618></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>You can use the built-in function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_types_compatible_p</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to determine whether two types are the same.</FONT></P>
<P><FONT class=extract>This built-in function returns 1 if the unqualified versions of the types<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>(which are types, not expressions) are compatible, 0 otherwise. The result of this built-in function can be used in integer constant expressions.</FONT></P>
<P><FONT class=extract>This built-in function ignores top level qualifiers (e.g.,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>const</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>volatile</CODE>). For example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is equivalent to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>const int</CODE>.</FONT></P>
<P><FONT class=extract>The type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int[]</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int[5]</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are compatible. On the other hand,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char *</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>are not compatible, even if the size of their types, on the particular architecture are the same. Also, the amount of pointer indirection is taken into account when determining similarity. Consequently,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>short *</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>short **</CODE>. Furthermore, two types that are typedefed are considered compatible if their underlying types are compatible.</FONT></P>
<P><FONT class=extract>An<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>enum</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>type is not considered to be compatible with another<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>enum</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>type even if both are compatible with the same integer type; this is what the C standard specifies. For example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>enum {foo, bar}</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>enum {hot, dog}</CODE>.</FONT></P>
<P><FONT class=extract>You typically use this function in code whose execution varies depending on the arguments' types. For example:</FONT></P><PRE class=smallexample style="FONT-SIZE: smaller"><FONT class=extract>          #define foo(x)                                                  \
            ({                                                           \
              typeof (x) tmp = (x);                                       \
              if (__builtin_types_compatible_p (typeof (x), long double)) \
                tmp = foo_long_double (tmp);                              \
              else if (__builtin_types_compatible_p (typeof (x), double)) \
                tmp = foo_double (tmp);                                   \
              else if (__builtin_types_compatible_p (typeof (x), float))  \
                tmp = foo_float (tmp);                                    \
              else                                                        \
                abort ();                                                 \
              tmp;                                                        \
            })
</FONT></PRE>
<P><FONT class=extract><EM>Note:</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>This construct is only available for C.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_choose_expr</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>const_exp, exp1, exp2</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fchoose_005fexpr-3619></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>You can use the built-in function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_choose_expr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to evaluate code depending on the value of a constant expression. This built-in function returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exp1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>const_exp</VAR>, which is an integer constant expression, is nonzero. Otherwise it returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exp2</VAR>.</FONT></P>
<P><FONT class=extract>This built-in function is analogous to the &#8216;<SAMP><SPAN class=samp>? :</SPAN></SAMP>&#8217; operator in C, except that the expression returned has its type unaltered by promotion rules. Also, the built-in function does not evaluate the expression that is not chosen. For example, if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>const_exp</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>evaluates to true,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exp2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not evaluated even if it has side-effects.</FONT></P>
<P><FONT class=extract>This built-in function can return an lvalue if the chosen argument is an lvalue.</FONT></P>
<P><FONT class=extract>If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exp1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned, the return type is the same as<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exp1</VAR>'s type. Similarly, if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exp2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is returned, its return type is the same as<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exp2</VAR>.</FONT></P>
<P><FONT class=extract>Example:</FONT></P><PRE class=smallexample style="FONT-SIZE: smaller"><FONT class=extract>          #define foo(x)                                                    \
            __builtin_choose_expr (                                         \
              __builtin_types_compatible_p (typeof (x), double),            \
              foo_double (x),                                               \
              __builtin_choose_expr (                                       \
                __builtin_types_compatible_p (typeof (x), float),           \
                foo_float (x),                                              \
                /* <SPAN class=roman style="FONT-FAMILY: serif; FONT-WEIGHT: normal">The void expression results in a compile-time error</SPAN>  \
                   <SPAN class=roman style="FONT-FAMILY: serif; FONT-WEIGHT: normal">when assigning the result to something.</SPAN>  */          \
                (void)0))
</FONT></PRE>
<P><FONT class=extract><EM>Note:</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>This construct is only available for C. Furthermore, the unused expression (<VAR>exp1</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exp2</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>depending on the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>const_exp</VAR>) may still generate syntax errors. This may change in future revisions.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>type</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_complex</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>real, imag</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fcomplex-3620></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>The built-in function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_complex</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is provided for use in implementing the ISO C11 macros<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>CMPLXF</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>CMPLX</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>CMPLXL</CODE>.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>real</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>imag</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must have the same type, a real binary floating-point type, and the result has the corresponding complex type with real and imaginary parts<VAR>real</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>imag</VAR>. Unlike &#8216;<SAMP><VAR>real</VAR><SPAN class=samp><SPAN class=Apple-converted-space>&nbsp;</SPAN>+ I *<SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN><VAR>imag</VAR></SAMP>&#8217;, this works even when infinities, NaNs and negative zeros are involved.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: int<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_constant_p</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>exp</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fconstant_005fp-3621></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>You can use the built-in function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_constant_p</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to determine if a value is known to be constant at compile time and hence that GCC can perform constant-folding on expressions involving that value. The argument of the function is the value to test. The function returns the integer 1 if the argument is known to be a compile-time constant and 0 if it is not known to be a compile-time constant. A return of 0 does not indicate that the value is<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>not</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>a constant, but merely that GCC cannot prove it is a constant with the specified value of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-O</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option.</FONT></P>
<P><FONT class=extract>You typically use this function in an embedded application where memory is a critical resource. If you have some complex calculation, you may want it to be folded if it involves constants, but need to call a function if it does not. For example:</FONT></P><PRE class=smallexample style="FONT-SIZE: smaller"><FONT class=extract>          #define Scale_Value(X)      \
            (__builtin_constant_p (X) \
            ? ((X) * SCALE + OFFSET) : Scale (X))
</FONT></PRE>
<P><FONT class=extract>You may use this built-in function in either a macro or an inline function. However, if you use it in an inlined function and pass an argument of the function as the argument to the built-in, GCC never returns 1 when you call the inline function with a string constant or compound literal (see<SPAN class=Apple-converted-space>&nbsp;</SPAN></FONT><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Compound-Literals.html#Compound-Literals"><FONT class=extract>Compound Literals</FONT></A><FONT class=extract>) and does not return 1 when you pass a constant numeric value to the inline function unless you specify the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-O</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option.</FONT></P>
<P><FONT class=extract>You may also use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_constant_p</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>in initializers for static data. For instance, you can write</FONT></P><PRE class=smallexample style="FONT-SIZE: smaller"><FONT class=extract>          static const int table[] = {
             __builtin_constant_p (EXPRESSION) ? (EXPRESSION) : -1,
             /* <SPAN class=roman style="FONT-FAMILY: serif; FONT-WEIGHT: normal">...</SPAN> */
          };
</FONT></PRE>
<P class=noindent><FONT class=extract>This is an acceptable initializer even if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>EXPRESSION</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not a constant expression, including the case where<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_constant_p</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns 1 because<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>EXPRESSION</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>can be folded to a constant but<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>EXPRESSION</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>contains operands that are not otherwise permitted in a static initializer (for example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0 &amp;&amp; foo ()</CODE>). GCC must be more conservative about evaluating the built-in in this case, because it has no opportunity to perform optimization.</FONT></P>
<P><FONT class=extract>Previous versions of GCC did not accept this built-in in data initializers. The earliest version where it is completely safe is 3.0.1.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: long<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_expect</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>long exp, long c</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fexpect-3622></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><A name=index-fprofile-arcs-3623></A><FONT class=extract>You may use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_expect</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to provide the compiler with branch prediction information. In general, you should prefer to use actual profile feedback for this (<SAMP><SPAN class=option>-fprofile-arcs</SPAN></SAMP>), as programmers are notoriously bad at predicting how their programs actually perform. However, there are applications in which this data is hard to collect.</FONT></P>
<P><FONT class=extract>The return value is the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exp</VAR>, which should be an integral expression. The semantics of the built-in are that it is expected that<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exp</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>==<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>c</VAR>. For example:</FONT></P><PRE class=smallexample style="FONT-SIZE: smaller"><FONT class=extract>          if (__builtin_expect (x, 0))
            foo ();
</FONT></PRE>
<P class=noindent><FONT class=extract>indicates that we do not expect to call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>foo</CODE>, since we expect<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to be zero. Since you are limited to integral expressions for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>exp</VAR>, you should use constructions such as</FONT></P><PRE class=smallexample style="FONT-SIZE: smaller"><FONT class=extract>          if (__builtin_expect (ptr != NULL, 1))
            foo (*ptr);
</FONT></PRE>
<P class=noindent><FONT class=extract>when testing pointer or floating-point values.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: void<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_trap</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>void</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005ftrap-3624></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>This function causes the program to exit abnormally. GCC implements this function by using a target-dependent mechanism (such as intentionally executing an illegal instruction) or by calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>abort</CODE>. The mechanism used may vary from release to release so you should not rely on any particular implementation.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: void<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_unreachable</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>void</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005funreachable-3625></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>If control flow reaches the point of the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_unreachable</CODE>, the program is undefined. It is useful in situations where the compiler cannot deduce the unreachability of the code.</FONT></P>
<P><FONT class=extract>One such case is immediately following an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>statement that either never terminates, or one that transfers control elsewhere and never returns. In this example, without the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_unreachable</CODE>, GCC issues a warning that control reaches the end of a non-void function. It also generates code to return after the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asm</CODE>.</FONT></P><PRE class=smallexample style="FONT-SIZE: smaller"><FONT class=extract>          int f (int c, int v)
          {
            if (c)
              {
                return v;
              }
            else
              {
                asm("jmp error_handler");
                __builtin_unreachable ();
              }
          }
</FONT></PRE>
<P class=noindent><FONT class=extract>Because the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>asm</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>statement unconditionally transfers control out of the function, control never reaches the end of the function body. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_unreachable</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is in fact unreachable and communicates this fact to the compiler.</FONT></P>
<P><FONT class=extract>Another use for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_unreachable</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is following a call a function that never returns but that is not declared<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__attribute__((noreturn))</CODE>, as in this example:</FONT></P><PRE class=smallexample style="FONT-SIZE: smaller"><FONT class=extract>          void function_that_never_returns (void);
          
          int g (int c)
          {
            if (c)
              {
                return 1;
              }
            else
              {
                function_that_never_returns ();
                __builtin_unreachable ();
              }
          }</FONT>
</PRE></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: void<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>*__builtin_assume_aligned</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>const void *exp, size_t align, ...</VAR>)<VAR><A name=index-g_t_002a_005f_005fbuiltin_005fassume_005faligned-3626></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>This function returns its first argument, and allows the compiler to assume that the returned pointer is at least<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>align</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>bytes aligned. This built-in can have either two or three arguments, if it has three, the third argument should have integer type, and if it is nonzero means misalignment offset. For example:</FONT></P><PRE class=smallexample style="FONT-SIZE: smaller"><FONT class=extract>          void *x = __builtin_assume_aligned (arg, 16);
</FONT></PRE>
<P class=noindent><FONT class=extract>means that the compiler can assume<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x</CODE>, set to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>arg</CODE>, is at least 16-byte aligned, while:</FONT></P><PRE class=smallexample style="FONT-SIZE: smaller"><FONT class=extract>          void *x = __builtin_assume_aligned (arg, 32, 8);
</FONT></PRE>
<P class=noindent><FONT class=extract>means that the compiler can assume for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x</CODE>, set to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>arg</CODE>, that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>(char *) x - 8</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 32-byte aligned.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: int<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_LINE</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>()<VAR><A name=index-g_t_005f_005fbuiltin_005fLINE-3627></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>This function is the equivalent to the preprocessor<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__LINE__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>macro and returns the line number of the invocation of the built-in. In a C++ default argument for a function<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>F</VAR>, it gets the line number of the call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>F</VAR>.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: const char *<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_FUNCTION</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>()<VAR><A name=index-g_t_005f_005fbuiltin_005fFUNCTION-3628></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>This function is the equivalent to the preprocessor<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__FUNCTION__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>macro and returns the function name the invocation of the built-in is in.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: const char *<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_FILE</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>()<VAR><A name=index-g_t_005f_005fbuiltin_005fFILE-3629></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>This function is the equivalent to the preprocessor<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__FILE__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>macro and returns the file name the invocation of the built-in is in. In a C++ default argument for a function<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>F</VAR>, it gets the file name of the call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>F</VAR>.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: void<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin___clear_cache</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>char *begin, char *end</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005f_005f_005fclear_005fcache-3630></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>This function is used to flush the processor's instruction cache for the region of memory between<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>begin</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>inclusive and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>end</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>exclusive. Some targets require that the instruction cache be flushed, after modifying memory containing code, in order to obtain deterministic behavior.</FONT></P>
<P><FONT class=extract>If the target does not require instruction cache flushes,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin___clear_cache</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>has no effect. Otherwise either instructions are emitted in-line to clear the instruction cache or a call to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__clear_cache</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function in libgcc is made.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: void<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_prefetch</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>const void *addr, ...</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fprefetch-3631></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>This function is used to minimize cache-miss latency by moving data into a cache before it is accessed. You can insert calls to<CODE>__builtin_prefetch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>into code for which you know addresses of data in memory that is likely to be accessed soon. If the target supports them, data prefetch instructions are generated. If the prefetch is done early enough before the access then the data will be in the cache by the time it is accessed.</FONT></P>
<P><FONT class=extract>The value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>addr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the address of the memory to prefetch. There are two optional arguments,<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rw</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>locality</VAR>. The value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>rw</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a compile-time constant one or zero; one means that the prefetch is preparing for a write to the memory address and zero, the default, means that the prefetch is preparing for a read. The value<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>locality</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must be a compile-time constant integer between zero and three. A value of zero means that the data has no temporal locality, so it need not be left in the cache after the access. A value of three means that the data has a high degree of temporal locality and should be left in all levels of cache possible. Values of one and two mean, respectively, a low or moderate degree of temporal locality. The default is three.</FONT></P><PRE class=smallexample style="FONT-SIZE: smaller"><FONT class=extract>          for (i = 0; i &lt; n; i++)
            {
              a[i] = a[i] + b[i];
              __builtin_prefetch (&amp;a[i+j], 1, 1);
              __builtin_prefetch (&amp;b[i+j], 0, 1);
              /* <SPAN class=roman style="FONT-FAMILY: serif; FONT-WEIGHT: normal">...</SPAN> */
            }
</FONT></PRE>
<P><FONT class=extract>Data prefetch does not generate faults if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>addr</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is invalid, but the address expression itself must be valid. For example, a prefetch of<CODE>p-&gt;next</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>does not fault if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>p-&gt;next</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not a valid address, but evaluation faults if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>p</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is not a valid address.</FONT></P>
<P><FONT class=extract>If the target does not support data prefetch, the address expression is evaluated if it includes side effects but no other code is generated and GCC does not issue a warning.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: double<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_huge_val</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>void</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fhuge_005fval-3632></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>Returns a positive infinity, if supported by the floating-point format, else<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>DBL_MAX</CODE>. This function is suitable for implementing the ISO C macro<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>HUGE_VAL</CODE>.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: float<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_huge_valf</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>void</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fhuge_005fvalf-3633></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_huge_val</CODE>, except the return type is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>float</CODE>.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: long double<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_huge_vall</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>void</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fhuge_005fvall-3634></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_huge_val</CODE>, except the return type is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long double</CODE>.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: int<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_fpclassify</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>int, int, int, int, int, ...</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005ffpclassify-3635></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>This built-in implements the C99 fpclassify functionality. The first five int arguments should be the target library's notion of the possible FP classes and are used for return values. They must be constant values and they must appear in this order:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>FP_NAN</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>FP_INFINITE</CODE>,<CODE>FP_NORMAL</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>FP_SUBNORMAL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>FP_ZERO</CODE>. The ellipsis is for exactly one floating-point value to classify. GCC treats the last argument as type-generic, which means it does not do default promotion from float to double.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: double<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_inf</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>void</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005finf-3636></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_huge_val</CODE>, except a warning is generated if the target floating-point format does not support infinities.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: _Decimal32<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_infd32</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>void</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005finfd32-3637></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_inf</CODE>, except the return type is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_Decimal32</CODE>.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: _Decimal64<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_infd64</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>void</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005finfd64-3638></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_inf</CODE>, except the return type is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_Decimal64</CODE>.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: _Decimal128<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_infd128</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>void</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005finfd128-3639></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_inf</CODE>, except the return type is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_Decimal128</CODE>.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: float<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_inff</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>void</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005finff-3640></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_inf</CODE>, except the return type is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>float</CODE>. This function is suitable for implementing the ISO C99 macro<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>INFINITY</CODE>.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: long double<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_infl</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>void</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005finfl-3641></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_inf</CODE>, except the return type is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long double</CODE>.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: int<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_isinf_sign</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>...</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fisinf_005fsign-3642></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>isinf</CODE>, except the return value is -1 for an argument of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>-Inf</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and 1 for an argument of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>+Inf</CODE>. Note while the parameter list is an ellipsis, this function only accepts exactly one floating-point argument. GCC treats this parameter as type-generic, which means it does not do default promotion from float to double.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: double<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_nan</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>const char *str</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fnan-3643></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>This is an implementation of the ISO C99 function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nan</CODE>.</FONT></P>
<P><FONT class=extract>Since ISO C99 defines this function in terms of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strtod</CODE>, which we do not implement, a description of the parsing is in order. The string is parsed as by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strtol</CODE>; that is, the base is recognized by leading &#8216;<SAMP><SPAN class=samp>0</SPAN></SAMP>&#8217; or &#8216;<SAMP><SPAN class=samp>0x</SPAN></SAMP>&#8217; prefixes. The number parsed is placed in the significand such that the least significant bit of the number is at the least significant bit of the significand. The number is truncated to fit the significand field provided. The significand is forced to be a quiet NaN.</FONT></P>
<P><FONT class=extract>This function, if given a string literal all of which would have been consumed by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>strtol</CODE>, is evaluated early enough that it is considered a compile-time constant.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">&#8212; Built-in Function: _Decimal32<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_nand32</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>const char *str</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fnand32-3644></A></VAR><BR>
<BLOCKQUOTE>
<P>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_nan</CODE>, except the return type is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_Decimal32</CODE>.</P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">&#8212; Built-in Function: _Decimal64<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_nand64</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>const char *str</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fnand64-3645></A></VAR><BR>
<BLOCKQUOTE>
<P>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_nan</CODE>, except the return type is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_Decimal64</CODE>.</P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">&#8212; Built-in Function: _Decimal128<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_nand128</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>const char *str</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fnand128-3646></A></VAR><BR>
<BLOCKQUOTE>
<P>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_nan</CODE>, except the return type is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_Decimal128</CODE>.</P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">&#8212; Built-in Function: float<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_nanf</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>const char *str</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fnanf-3647></A></VAR><BR>
<BLOCKQUOTE>
<P>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_nan</CODE>, except the return type is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>float</CODE>.</P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">&#8212; Built-in Function: long double<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_nanl</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>const char *str</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fnanl-3648></A></VAR><BR>
<BLOCKQUOTE>
<P>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_nan</CODE>, except the return type is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long double</CODE>.</P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: double<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_nans</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>const char *str</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fnans-3649></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_nan</CODE>, except the significand is forced to be a signaling NaN. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>nans</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function is proposed by<SPAN class=Apple-converted-space>&nbsp;</SPAN></FONT><A href="http://www.open-std.org/jtc1/sc22/wg14/www/docs/n965.htm"><FONT class=extract>WG14 N965</FONT></A><FONT class=extract>.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: float<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_nansf</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>const char *str</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fnansf-3650></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_nans</CODE>, except the return type is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>float</CODE>.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: long double<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_nansl</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>const char *str</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fnansl-3651></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_nans</CODE>, except the return type is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long double</CODE>.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: int<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_ffs</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>int x</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fffs-3652></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>Returns one plus the index of the least significant 1-bit of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>, or if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is zero, returns zero.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: int<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_clz</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>unsigned int x</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fclz-3653></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>Returns the number of leading 0-bits in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>, starting at the most significant bit position. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 0, the result is undefined.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: int<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_ctz</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>unsigned int x</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fctz-3654></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>Returns the number of trailing 0-bits in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>, starting at the least significant bit position. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>is 0, the result is undefined.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: int<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_clrsb</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>int x</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fclrsb-3655></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>Returns the number of leading redundant sign bits in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>, i.e. the number of bits following the most significant bit that are identical to it. There are no special cases for 0 or other values.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: int<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_popcount</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>unsigned int x</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fpopcount-3656></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>Returns the number of 1-bits in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: int<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_parity</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>unsigned int x</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fparity-3657></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>Returns the parity of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR>, i.e. the number of 1-bits in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>modulo 2.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: int<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_ffsl</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>long</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fffsl-3658></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_ffs</CODE>, except the argument type is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long</CODE>.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: int<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_clzl</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>unsigned long</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fclzl-3659></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_clz</CODE>, except the argument type is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unsigned long</CODE>.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: int<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_ctzl</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>unsigned long</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fctzl-3660></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_ctz</CODE>, except the argument type is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unsigned long</CODE>.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: int<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_clrsbl</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>long</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fclrsbl-3661></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_clrsb</CODE>, except the argument type is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long</CODE>.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: int<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_popcountl</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>unsigned long</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fpopcountl-3662></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_popcount</CODE>, except the argument type is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unsigned long</CODE>.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: int<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_parityl</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>unsigned long</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fparityl-3663></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_parity</CODE>, except the argument type is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unsigned long</CODE>.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: int<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_ffsll</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>long long</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fffsll-3664></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_ffs</CODE>, except the argument type is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long long</CODE>.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: int<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_clzll</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>unsigned long long</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fclzll-3665></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_clz</CODE>, except the argument type is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unsigned long long</CODE>.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: int<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_ctzll</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>unsigned long long</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fctzll-3666></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_ctz</CODE>, except the argument type is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unsigned long long</CODE>.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: int<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_clrsbll</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>long long</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fclrsbll-3667></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_clrsb</CODE>, except the argument type is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long long</CODE>.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: int<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_popcountll</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>unsigned long long</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fpopcountll-3668></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_popcount</CODE>, except the argument type is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unsigned long long</CODE>.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: int<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_parityll</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>unsigned long long</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fparityll-3669></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_parity</CODE>, except the argument type is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unsigned long long</CODE>.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: double<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_powi</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>double, int</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fpowi-3670></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>Returns the first argument raised to the power of the second. Unlike the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>pow</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function no guarantees about precision and rounding are made.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: float<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_powif</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>float, int</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fpowif-3671></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_powi</CODE>, except the argument and return types are<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>float</CODE>.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: long double<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_powil</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>long double, int</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fpowil-3672></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_powi</CODE>, except the argument and return types are<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long double</CODE>.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: uint16_t<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_bswap16</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>uint16_t x</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fbswap16-3673></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>Returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with the order of the bytes reversed; for example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0xaabb</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>becomes<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>0xbbaa</CODE>. Byte here always means exactly 8 bits.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: uint32_t<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_bswap32</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>uint32_t x</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fbswap32-3674></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_bswap16</CODE>, except the argument and return types are 32 bit.</FONT></P></BLOCKQUOTE></DIV>
<DIV class=defun style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium Simsun; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><FONT class=extract>&#8212; Built-in Function: uint64_t<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_bswap64</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>uint64_t x</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fbswap64-3675></A></VAR><BR></FONT>
<BLOCKQUOTE>
<P><FONT class=extract>Similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_bswap32</CODE>, except the argument and return types are 64 bit.</FONT></P></BLOCKQUOTE></DIV>