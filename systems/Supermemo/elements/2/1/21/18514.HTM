<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>6.53 x86 specific memory model extensions for transactional memory</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The i386 architecture supports additional memory ordering flags to mark lock critical sections for hardware lock elision. These must be specified in addition to an existing memory model to atomic intrinsics.</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>__ATOMIC_HLE_ACQUIRE</CODE></DT>
<DD>Start lock elision on a lock variable. Memory model must be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__ATOMIC_ACQUIRE</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or stronger.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>__ATOMIC_HLE_RELEASE</CODE></DT>
<DD>End lock elision on a lock variable. Memory model must be<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__ATOMIC_RELEASE</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or stronger.</DD></DL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When a lock acquire fails it is required for good performance to abort the transaction quickly. This can be done with a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>_mm_pause</CODE></P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     #include &lt;immintrin.h&gt; // For _mm_pause
     
     int lockvar;
     
     /* Acquire lock with lock elision */
     while (__atomic_exchange_n(&amp;lockvar, 1, __ATOMIC_ACQUIRE|__ATOMIC_HLE_ACQUIRE))
         _mm_pause(); /* Abort failed transaction */
     ...
     /* Free lock with lock elision */
     __atomic_store_n(&amp;lockvar, 0, __ATOMIC_RELEASE|__ATOMIC_HLE_RELEASE);</PRE>