<H4 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: medium; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=subsection>3.17.55 Xtensa Options</H4>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-Xtensa-Options-2550></A>These options are supported for Xtensa targets:</P>
<DL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<DT><CODE>-mconst16</CODE></DT>
<DT><CODE>-mno-const16</CODE></DT>
<DD><A name=index-mconst16-2551></A><A name=index-mno-const16-2552></A>Enable or disable use of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>CONST16</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions for loading constant values. The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>CONST16</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction is currently not a standard option from Tensilica. When enabled,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>CONST16</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions are always used in place of the standard<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>L32R</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions. The use of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>CONST16</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is enabled by default only if the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>L32R</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction is not available.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mfused-madd</CODE></DT>
<DT><CODE>-mno-fused-madd</CODE></DT>
<DD><A name=index-mfused-madd-2553></A><A name=index-mno-fused-madd-2554></A>Enable or disable use of fused multiply/add and multiply/subtract instructions in the floating-point option. This has no effect if the floating-point option is not also enabled. Disabling fused multiply/add and multiply/subtract instructions forces the compiler to use separate instructions for the multiply and add/subtract operations. This may be desirable in some cases where strict IEEE 754-compliant results are required: the fused multiply add/subtract instructions do not round the intermediate result, thereby producing results with<EM>more</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>bits of precision than specified by the IEEE standard. Disabling fused multiply add/subtract instructions also ensures that the program output is not sensitive to the compiler's ability to combine multiply and add/subtract operations.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mserialize-volatile</CODE></DT>
<DT><CODE>-mno-serialize-volatile</CODE></DT>
<DD><A name=index-mserialize-volatile-2555></A><A name=index-mno-serialize-volatile-2556></A>When this option is enabled, GCC inserts<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>MEMW</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions before<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>volatile</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>memory references to guarantee sequential consistency. The default is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mserialize-volatile</SPAN></SAMP>. Use<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-serialize-volatile</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>to omit the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>MEMW</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mforce-no-pic</CODE></DT>
<DD><A name=index-mforce-no-pic-2557></A>For targets, like GNU/Linux, where all user-mode Xtensa code must be position-independent code (PIC), this option disables PIC for compiling kernel code.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mtext-section-literals</CODE></DT>
<DT><CODE>-mno-text-section-literals</CODE></DT>
<DD><A name=index-mtext-section-literals-2558></A><A name=index-mno-text-section-literals-2559></A>Control the treatment of literal pools. The default is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-text-section-literals</SPAN></SAMP>, which places literals in a separate section in the output file. This allows the literal pool to be placed in a data RAM/ROM, and it also allows the linker to combine literal pools from separate object files to remove redundant literals and improve code size. With<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mtext-section-literals</SPAN></SAMP>, the literals are interspersed in the text section in order to keep them as close as possible to their references. This may be necessary for large assembly files.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mtarget-align</CODE></DT>
<DT><CODE>-mno-target-align</CODE></DT>
<DD><A name=index-mtarget-align-2560></A><A name=index-mno-target-align-2561></A>When this option is enabled, GCC instructs the assembler to automatically align instructions to reduce branch penalties at the expense of some code density. The assembler attempts to widen density instructions to align branch targets and the instructions following call instructions. If there are not enough preceding safe density instructions to align a target, no widening is performed. The default is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mtarget-align</SPAN></SAMP>. These options do not affect the treatment of auto-aligned instructions like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>LOOP</CODE>, which the assembler always aligns, either by widening density instructions or by inserting NOP instructions.<SPAN class=Apple-converted-space>&nbsp;</SPAN><BR></DD>
<DT><CODE>-mlongcalls</CODE></DT>
<DT><CODE>-mno-longcalls</CODE></DT>
<DD><A name=index-mlongcalls-2562></A><A name=index-mno-longcalls-2563></A>When this option is enabled, GCC instructs the assembler to translate direct calls to indirect calls unless it can determine that the target of a direct call is in the range allowed by the call instruction. This translation typically occurs for calls to functions in other source files. Specifically, the assembler translates a direct<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>CALL</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction into an<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>L32R</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>followed by a<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>CALLX</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instruction. The default is<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mno-longcalls</SPAN></SAMP>. This option should be used in programs where the call target can potentially be out of range. This option is implemented in the assembler, not the compiler, so the assembly code generated by GCC still shows direct call instructions&#8212;look at the disassembled object code to see the actual instructions. Note that the assembler uses an indirect call for every cross-file call, not just those that really are out of range.</DD></DL>