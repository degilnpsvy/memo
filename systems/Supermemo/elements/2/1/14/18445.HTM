<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>6.9 Double-Word Integers</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-g_t_0040code_007blong-long_007d-data-types-2681></A><A name=index-double-word-arithmetic-2682></A><A name=index-multiprecision-arithmetic-2683></A><A name=index-g_t_0040code_007bLL_007d-integer-suffix-2684></A><A name=index-g_t_0040code_007bULL_007d-integer-suffix-2685></A>ISO C99 supports data types for integers that are at least 64 bits wide, and as an extension GCC supports them in C90 mode and in C++. Simply write<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long long int</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for a signed integer, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unsigned long long int</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for an unsigned integer. To make an integer constant of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long long int</CODE>, add the suffix &#8216;<SAMP><SPAN class=samp>LL</SPAN></SAMP>&#8217; to the integer. To make an integer constant of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unsigned long long int</CODE>, add the suffix &#8216;<SAMP><SPAN class=samp>ULL</SPAN></SAMP>&#8217; to the integer.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">You can use these types in arithmetic like any other integer types. Addition, subtraction, and bitwise boolean operations on these types are open-coded on all types of machines. Multiplication is open-coded if the machine supports a fullword-to-doubleword widening multiply instruction. Division and shifts are open-coded only on machines that provide special support. The operations that are not open-coded use special library routines that come with GCC.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">There may be pitfalls when you use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long long</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>types for function arguments without function prototypes. If a function expects type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for its argument, and you pass a value of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long long int</CODE>, confusion results because the caller and the subroutine disagree about the number of bytes for the argument. Likewise, if the function expects<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long long int</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and you pass<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int</CODE>. The best way to avoid such problems is to use prototypes.