<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>6.5 Constructing Function Calls</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-constructing-calls-2658></A><A name=index-forwarding-calls-2659></A>Using the built-in functions described below, you can record the arguments a function received, and call another function with the same arguments, without knowing the number or types of the arguments.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">You can also record the return value of that function call, and later return that value, without knowing what data type the function tried to return (as long as your caller expects that data type).</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">However, these built-in functions may interact badly with some sophisticated features or other extensions of the language. It is, therefore, not recommended to use them outside very simple functions acting as mere forwarders for their arguments.</P>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=defun>&#8212; Built-in Function: void *<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_apply_args</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>()<VAR><A name=index-g_t_005f_005fbuiltin_005fapply_005fargs-2660></A></VAR><BR>
<BLOCKQUOTE>
<P>This built-in function returns a pointer to data describing how to perform a call with the same arguments as are passed to the current function.</P>
<P>The function saves the arg pointer register, structure value address, and all registers that might be used to pass arguments to a function into a block of memory allocated on the stack. Then it returns the address of that block.</P></BLOCKQUOTE></DIV>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=defun>&#8212; Built-in Function: void *<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_apply</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>void<SPAN class=Apple-converted-space>&nbsp;</SPAN></VAR>(<VAR>*function</VAR>)()<VAR>, void *arguments, size_t size</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005fapply-2661></A></VAR><BR>
<BLOCKQUOTE>
<P>This built-in function invokes<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>function</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with a copy of the parameters described by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arguments</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR>.</P>
<P>The value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>arguments</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>should be the value returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_apply_args</CODE>. The argument<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>specifies the size of the stack argument data, in bytes.</P>
<P>This function returns a pointer to data describing how to return whatever value is returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>function</VAR>. The data is saved in a block of memory allocated on the stack.</P>
<P>It is not always simple to compute the proper value for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>size</VAR>. The value is used by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_apply</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to compute the amount of data that should be pushed on the stack and copied from the incoming argument area.</P></BLOCKQUOTE></DIV>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=defun>&#8212; Built-in Function: void<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_return</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<VAR>void *result</VAR>)<VAR><A name=index-g_t_005f_005fbuiltin_005freturn-2662></A></VAR><BR>
<BLOCKQUOTE>
<P>This built-in function returns the value described by<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>result</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>from the containing function. You should specify, for<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>result</VAR>, a value returned by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__builtin_apply</CODE>.</P></BLOCKQUOTE></DIV>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=defun>&#8212; Built-in Function:<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_va_arg_pack</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>()<VAR><A name=index-g_t_005f_005fbuiltin_005fva_005farg_005fpack-2663></A></VAR><BR>
<BLOCKQUOTE>
<P>This built-in function represents all anonymous arguments of an inline function. It can be used only in inline functions that are always inlined, never compiled as a separate function, such as those using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__attribute__ ((__always_inline__))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__attribute__ ((__gnu_inline__))</CODE>extern inline functions. It must be only passed as last argument to some other function with variable arguments. This is useful for writing small wrapper inlines for variable argument functions, when using preprocessor macros is undesirable. For example:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          extern int myprintf (FILE *f, const char *format, ...);
          extern inline __attribute__ ((__gnu_inline__)) int
          myprintf (FILE *f, const char *format, ...)
          {
            int r = fprintf (f, "myprintf: ");
            if (r &lt; 0)
              return r;
            int s = fprintf (f, format, __builtin_va_arg_pack ());
            if (s &lt; 0)
              return s;
            return r + s;
          }
</PRE></BLOCKQUOTE></DIV>
<DIV style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=defun>&#8212; Built-in Function: size_t<SPAN class=Apple-converted-space>&nbsp;</SPAN><B>__builtin_va_arg_pack_len</B><SPAN class=Apple-converted-space>&nbsp;</SPAN>()<VAR><A name=index-g_t_005f_005fbuiltin_005fva_005farg_005fpack_005flen-2664></A></VAR><BR>
<BLOCKQUOTE>
<P>This built-in function returns the number of anonymous arguments of an inline function. It can be used only in inline functions that are always inlined, never compiled as a separate function, such as those using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__attribute__ ((__always_inline__))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__attribute__ ((__gnu_inline__))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>extern inline functions. For example following does link- or run-time checking of open arguments for optimized code:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          #ifdef __OPTIMIZE__
          extern inline __attribute__((__gnu_inline__)) int
          myopen (const char *path, int oflag, ...)
          {
            if (__builtin_va_arg_pack_len () &gt; 1)
              warn_open_too_many_arguments ();
          
            if (__builtin_constant_p (oflag))
              {
                if ((oflag &amp; O_CREAT) != 0 &amp;&amp; __builtin_va_arg_pack_len () &lt; 1)
                  {
                    warn_open_missing_mode ();
                    return __open_2 (path, oflag);
                  }
                return open (path, oflag, __builtin_va_arg_pack ());
              }
          
            if (__builtin_va_arg_pack_len () &lt; 1)
              return __open_2 (path, oflag);
          
            return open (path, oflag, __builtin_va_arg_pack ());
          }
          #endif</PRE></BLOCKQUOTE></DIV>