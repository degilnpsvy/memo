<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>6.8 128-bit integers</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-g_t_0040code_007b_005f_005fint128_007d-data-types-2680></A>As an extension the integer scalar type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__int128</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is supported for targets which have an integer mode wide enough to hold 128 bits. Simply write<CODE>__int128</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for a signed 128-bit integer, or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unsigned __int128</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for an unsigned 128-bit integer. There is no support in GCC for expressing an integer constant of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__int128</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for targets with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long long</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>integer less than 128 bits wide.