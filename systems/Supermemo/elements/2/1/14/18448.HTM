<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>6.12 Half-Precision Floating Point</H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-half-precision-floating-point-2699></A><A name=index-g_t_0040code_007b_005f_005ffp16_007d-data-type-2700></A>On ARM targets, GCC supports half-precision (16-bit) floating point via the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__fp16</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>type. You must enable this type explicitly with the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mfp16-format</SPAN></SAMP>command-line option in order to use it.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">ARM supports two incompatible representations for half-precision floating-point values. You must choose one of the representations and use it consistently in your program.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Specifying<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mfp16-format=ieee</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>selects the IEEE 754-2008 format. This format can represent normalized values in the range of 2^-14 to 65504. There are 11 bits of significand precision, approximately 3 decimal digits.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Specifying<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mfp16-format=alternative</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>selects the ARM alternative format. This representation is similar to the IEEE format, but does not support infinities or NaNs. Instead, the range of exponents is extended, so that this format can represent normalized values in the range of 2^-14 to 131008.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__fp16</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>type is a storage format only. For purposes of arithmetic and other operations,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__fp16</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>values in C or C++ expressions are automatically promoted to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>float</CODE>. In addition, you cannot declare a function with a return value or parameters of type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__fp16</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Note that conversions from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>double</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__fp16</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>involve an intermediate conversion to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>float</CODE>. Because of rounding, this can sometimes produce a different result than a direct conversion.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">ARM provides hardware support for conversions between<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__fp16</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>float</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>values as an extension to VFP and NEON (Advanced SIMD). GCC generates code using these hardware instructions if you compile with options to select an FPU that provides them; for example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mfpu=neon-fp16 -mfloat-abi=softfp</SPAN></SAMP>, in addition to the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-mfp16-format</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option to select a half-precision format.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Language-level support for the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__fp16</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>data type is independent of whether GCC generates code using hardware floating-point instructions. In cases where hardware support is not specified, GCC implements conversions between<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__fp16</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>float</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>values as library calls.