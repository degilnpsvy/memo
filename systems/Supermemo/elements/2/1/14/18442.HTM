<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>6.6 Referring to a Type with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>typeof</CODE></H3>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-typeof-2665></A><A name=index-sizeof-2666></A><A name=index-macros_002c-types-of-arguments-2667></A>Another way to refer to the type of an expression is with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>typeof</CODE>. The syntax of using of this keyword looks like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sizeof</CODE>, but the construct acts semantically like a type name defined with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>typedef</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">There are two ways of writing the argument to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>typeof</CODE>: with an expression or with a type. Here is an example with an expression:</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     typeof (x[0](1))
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=noindent>This assumes that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is an array of pointers to functions; the type described is that of the values of the functions.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Here is an example with a typename as the argument:</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     typeof (int *)
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=noindent>Here the type described is that of pointers to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If you are writing a header file that must work when included in ISO C programs, write<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__typeof__</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>typeof</CODE>. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Alternate-Keywords.html#Alternate-Keywords">Alternate Keywords</A>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>typeof</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>construct can be used anywhere a typedef name can be used. For example, you can use it in a declaration, in a cast, or inside of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>sizeof</CODE>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>typeof</CODE>.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The operand of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>typeof</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is evaluated for its side effects if and only if it is an expression of variably modified type or the name of such a type.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><CODE>typeof</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is often useful in conjunction with statement expressions (see<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Statement-Exprs.html#Statement-Exprs">Statement Exprs</A>). Here is how the two together can be used to define a safe &#8220;maximum&#8221; macro which operates on any arithmetic type and evaluates each of its arguments exactly once:</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     #define max(a,b) \
       ({ typeof (a) _a = (a); \
           typeof (b) _b = (b); \
         _a &gt; _b ? _a : _b; })
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A name=index-underscores-in-variables-in-macros-2668></A><A name=index-g_t_0040samp_007b_005f_007d-in-variables-in-macros-2669></A><A name=index-local-variables-in-macros-2670></A><A name=index-variables_002c-local_002c-in-macros-2671></A><A name=index-macros_002c-local-variables-in-2672></A>The reason for using names that start with underscores for the local variables is to avoid conflicts with variable names that occur within the expressions that are substituted for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>a</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>b</CODE>. Eventually we hope to design a new form of declaration syntax that allows you to declare variables whose scopes start only after their initializers; this will be a more reliable way to prevent such conflicts.</P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=noindent>Some more examples of the use of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>typeof</CODE>:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>This declares<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>y</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with the type of what<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>x</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>points to.<PRE style="FONT-SIZE: smaller" class=smallexample>          typeof (*x) y;
</PRE></LI>
<LI>This declares<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>y</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as an array of such values.<PRE style="FONT-SIZE: smaller" class=smallexample>          typeof (*x) y[4];
</PRE></LI>
<LI>This declares<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>y</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as an array of pointers to characters:<PRE style="FONT-SIZE: smaller" class=smallexample>          typeof (typeof (char *)[4]) y;
</PRE>
<P class=noindent>It is equivalent to the following traditional C declaration:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          char *y[4];
</PRE>
<P>To see the meaning of the declaration using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>typeof</CODE>, and why it might be a useful way to write, rewrite it with these macros:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          #define pointer(T)  typeof(T *)
          #define array(T, N) typeof(T [N])
</PRE>
<P class=noindent>Now the declaration can be rewritten this way:</P><PRE style="FONT-SIZE: smaller" class=smallexample>          array (pointer (char), 4) y;
</PRE>
<P class=noindent>Thus,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>array (pointer (char), 4)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the type of arrays of 4 pointers to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>char</CODE>.</P></LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In GNU C, but not GNU C++, you may also declare the type of a variable as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__auto_type</CODE>. In that case, the declaration must declare only one variable, whose declarator must just be an identifier, the declaration must be initialized, and the type of the variable is determined by the initializer; the name of the variable is not in scope until after the initializer. (In C++, you should use C++11<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>auto</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for this purpose.) Using<CODE>__auto_type</CODE>, the &#8220;maximum&#8221; macro above could be written as:</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     #define max(a,b) \
       ({ __auto_type _a = (a); \
           __auto_type _b = (b); \
         _a &gt; _b ? _a : _b; })
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__auto_type</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>instead of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>typeof</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>has two advantages:</P>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI>Each argument to the macro appears only once in the expansion of the macro. This prevents the size of the macro expansion growing exponentially when calls to such macros are nested inside arguments of such macros.</LI>
<LI>If the argument to the macro has variably modified type, it is evaluated only once when using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>__auto_type</CODE>, but twice if<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>typeof</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used.</LI></UL>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><EM>Compatibility Note:</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>In addition to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>typeof</CODE>, GCC 2 supported a more limited extension that permitted one to write</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     typedef <VAR>T</VAR> = <VAR>expr</VAR>;
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=noindent>with the effect of declaring<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>T</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to have the type of the expression<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR>expr</VAR>. This extension does not work with GCC 3 (versions between 3.0 and 3.2 crash; 3.2.1 and later give an error). Code that relies on it should be rewritten to use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>typeof</CODE>:</P><PRE style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: smaller; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=smallexample>     typedef typeof(<VAR>expr</VAR>) <VAR>T</VAR>;
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=noindent>This works with all versions of GCC.