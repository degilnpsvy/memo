<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>4.6 Floating point</H3>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI><CITE>The accuracy of the floating-point operations and of the library functions in<SPAN class=Apple-converted-space>&nbsp;</SPAN></CITE><CODE>&lt;math.h&gt;</CODE><CITE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN></CITE><CODE>&lt;complex.h&gt;</CODE><CITE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that return floating-point results (C90, C99 and C11 5.2.4.2.2).</CITE>
<P>The accuracy is unknown.</P></LI>
<LI><CITE>The rounding behaviors characterized by non-standard values of<SPAN class=Apple-converted-space>&nbsp;</SPAN></CITE><CODE>FLT_ROUNDS</CODE><CITE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(C90, C99 and C11 5.2.4.2.2).</CITE>
<P>GCC does not use such values.</P></LI>
<LI><CITE>The evaluation methods characterized by non-standard negative values of<SPAN class=Apple-converted-space>&nbsp;</SPAN></CITE><CODE>FLT_EVAL_METHOD</CODE><CITE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(C99 and C11 5.2.4.2.2).</CITE>
<P>GCC does not use such values.</P></LI>
<LI><CITE>The direction of rounding when an integer is converted to a floating-point number that cannot exactly represent the original value (C90 6.2.1.3, C99 and C11 6.3.1.4).</CITE>
<P>C99 Annex F is followed.</P></LI>
<LI><CITE>The direction of rounding when a floating-point number is converted to a narrower floating-point number (C90 6.2.1.4, C99 and C11 6.3.1.5).</CITE>
<P>C99 Annex F is followed.</P></LI>
<LI><CITE>How the nearest representable value or the larger or smaller representable value immediately adjacent to the nearest representable value is chosen for certain floating constants (C90 6.1.3.1, C99 and C11 6.4.4.2).</CITE>
<P>C99 Annex F is followed.</P></LI>
<LI><CITE>Whether and how floating expressions are contracted when not disallowed by the<SPAN class=Apple-converted-space>&nbsp;</SPAN></CITE><CODE>FP_CONTRACT</CODE><CITE><SPAN class=Apple-converted-space>&nbsp;</SPAN>pragma (C99 and C11 6.5).</CITE>
<P>Expressions are currently only contracted if<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ffp-contract=fast</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-funsafe-math-optimizations</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ffast-math</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>are used. This is subject to change.</P></LI>
<LI><CITE>The default state for the<SPAN class=Apple-converted-space>&nbsp;</SPAN></CITE><CODE>FENV_ACCESS</CODE><CITE><SPAN class=Apple-converted-space>&nbsp;</SPAN>pragma (C99 and C11 7.6.1).</CITE>
<P>This pragma is not implemented, but the default is to &#8220;off&#8221; unless<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-frounding-math</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used in which case it is &#8220;on&#8221;.</P></LI>
<LI><CITE>Additional floating-point exceptions, rounding modes, environments, and classifications, and their macro names (C99 and C11 7.6, C99 and C11 7.12).</CITE>
<P>This is dependent on the implementation of the C library, and is not defined by GCC itself.</P></LI>
<LI><CITE>The default state for the<SPAN class=Apple-converted-space>&nbsp;</SPAN></CITE><CODE>FP_CONTRACT</CODE><CITE><SPAN class=Apple-converted-space>&nbsp;</SPAN>pragma (C99 and C11 7.12.2).</CITE>
<P>This pragma is not implemented. Expressions are currently only contracted if<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ffp-contract=fast</SPAN></SAMP>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-funsafe-math-optimizations</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>or<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-ffast-math</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>are used. This is subject to change.</P></LI>
<LI><CITE>Whether the &#8220;inexact&#8221; floating-point exception can be raised when the rounded result actually does equal the mathematical result in an IEC 60559 conformant implementation (C99 F.9).</CITE>
<P>This is dependent on the implementation of the C library, and is not defined by GCC itself.</P></LI>
<LI><CITE>Whether the &#8220;underflow&#8221; (and &#8220;inexact&#8221;) floating-point exception can be raised when a result is tiny but not inexact in an IEC 60559 conformant implementation (C99 F.9).</CITE>
<P>This is dependent on the implementation of the C library, and is not defined by GCC itself.</P></LI></UL>