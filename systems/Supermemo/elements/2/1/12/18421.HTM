<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>4.5 Integers</H3>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI><CITE>Any extended integer types that exist in the implementation (C99 and C11 6.2.5).</CITE>
<P>GCC does not support any extended integer types.</P></LI>
<LI><CITE>Whether signed integer types are represented using sign and magnitude, two's complement, or one's complement, and whether the extraordinary value is a trap representation or an ordinary value (C99 and C11 6.2.6.2).</CITE>
<P>GCC supports only two's complement integer types, and all bit patterns are ordinary values.</P></LI>
<LI><CITE>The rank of any extended integer type relative to another extended integer type with the same precision (C99 and C11 6.3.1.1).</CITE>
<P>GCC does not support any extended integer types.</P></LI>
<LI><CITE>The result of, or the signal raised by, converting an integer to a signed integer type when the value cannot be represented in an object of that type (C90 6.2.1.2, C99 and C11 6.3.1.3).</CITE>
<P>For conversion to a type of width N, the value is reduced modulo 2^N to be within range of the type; no signal is raised.</P></LI>
<LI><CITE>The results of some bitwise operations on signed integers (C90 6.3, C99 and C11 6.5).</CITE>
<P>Bitwise operators act on the representation of the value including both the sign and value bits, where the sign bit is considered immediately above the highest-value value bit. Signed &#8216;<SAMP><SPAN class=samp>&gt;&gt;</SPAN></SAMP>&#8217; acts on negative numbers by sign extension.</P>
<P>GCC does not use the latitude given in C99 and C11 only to treat certain aspects of signed &#8216;<SAMP><SPAN class=samp>&lt;&lt;</SPAN></SAMP>&#8217; as undefined, but this is subject to change.</P></LI>
<LI><CITE>The sign of the remainder on integer division (C90 6.3.5).</CITE>
<P>GCC always follows the C99 and C11 requirement that the result of division is truncated towards zero.</P></LI></UL>