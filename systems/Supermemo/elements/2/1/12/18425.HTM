<H3 style="LINE-HEIGHT: normal; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" class=section>4.9 Structures, unions, enumerations, and bit-fields</H3>
<UL style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; FONT: medium Simsun; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">
<LI><CITE>A member of a union object is accessed using a member of a different type (C90 6.3.2.3).</CITE>
<P>The relevant bytes of the representation of the object are treated as an object of the type used for the access. See<SPAN class=Apple-converted-space>&nbsp;</SPAN><A href="https://gcc.gnu.org/onlinedocs/gcc-4.9.1/gcc/Type-punning.html#Type-punning">Type-punning</A>. This may be a trap representation.</P></LI>
<LI><CITE>Whether a &#8220;plain&#8221;<SPAN class=Apple-converted-space>&nbsp;</SPAN></CITE><CODE>int</CODE><CITE><SPAN class=Apple-converted-space>&nbsp;</SPAN>bit-field is treated as a<SPAN class=Apple-converted-space>&nbsp;</SPAN></CITE><CODE>signed int</CODE><CITE><SPAN class=Apple-converted-space>&nbsp;</SPAN>bit-field or as an<SPAN class=Apple-converted-space>&nbsp;</SPAN></CITE><CODE>unsigned int</CODE><CITE><SPAN class=Apple-converted-space>&nbsp;</SPAN>bit-field (C90 6.5.2, C90 6.5.2.1, C99 and C11 6.7.2, C99 and C11 6.7.2.1).</CITE>
<P><A name=index-funsigned-bitfields-2638></A>By default it is treated as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>signed int</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>but this may be changed by the<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-funsigned-bitfields</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>option.</P></LI>
<LI><CITE>Allowable bit-field types other than<SPAN class=Apple-converted-space>&nbsp;</SPAN></CITE><CODE>_Bool</CODE><CITE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN></CITE><CODE>signed int</CODE><CITE>, and<SPAN class=Apple-converted-space>&nbsp;</SPAN></CITE><CODE>unsigned int</CODE><CITE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(C99 and C11 6.7.2.1).</CITE>
<P>Other integer types, such as<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>long int</CODE>, and enumerated types are permitted even in strictly conforming mode.</P></LI>
<LI><CITE>Whether atomic types are permitted for bit-fields (C11 6.7.2.1).</CITE>
<P>Atomic types are not permitted for bit-fields.</P></LI>
<LI><CITE>Whether a bit-field can straddle a storage-unit boundary (C90 6.5.2.1, C99 and C11 6.7.2.1).</CITE>
<P>Determined by ABI.</P></LI>
<LI><CITE>The order of allocation of bit-fields within a unit (C90 6.5.2.1, C99 and C11 6.7.2.1).</CITE>
<P>Determined by ABI.</P></LI>
<LI><CITE>The alignment of non-bit-field members of structures (C90 6.5.2.1, C99 and C11 6.7.2.1).</CITE>
<P>Determined by ABI.</P></LI>
<LI><CITE>The integer type compatible with each enumerated type (C90 6.5.2.2, C99 and C11 6.7.2.2).</CITE>
<P><A name=index-fshort-enums-2639></A>Normally, the type is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unsigned int</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>if there are no negative values in the enumeration, otherwise<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int</CODE>. If<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fshort-enums</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is specified, then if there are negative values it is the first of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>signed char</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>short</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>int</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that can represent all the values, otherwise it is the first of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unsigned char</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unsigned short</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE>unsigned int</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>that can represent all the values.</P>
<P>On some targets,<SPAN class=Apple-converted-space>&nbsp;</SPAN><SAMP><SPAN class=option>-fshort-enums</SPAN></SAMP><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the default; this is determined by the ABI.</P></LI></UL>