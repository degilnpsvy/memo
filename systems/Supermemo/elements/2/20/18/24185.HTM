<P class=docText>The 2.6 kernel introduced another mechanism called <SPAN class=docEmphasis><FONT class=extract>Read-Copy Update</FONT></SPAN><A name="basic idea"></A><FONT class=extract> (RCU)</FONT>, which yields improved performance when readers far outnumber writers. The basic idea is that reader threads can execute without locking. Writer threads are more complex. They perform update operations on a copy of the data structure and replace the pointer that readers see. The original copy is maintained until the next context switch on all CPUs to ensure completion of all ongoing read operations. Be aware that using RCU is more involved than using the primitives discussed thus far and should be used only if you are sure that it's the right tool for the job. RCU data structures and interface functions are defined in <SPAN class=docEmphasis>include/linux/rcupdate.h.</SPAN> There is ample documentation in <SPAN class=docEmphasis>Documentation/RCU/*</SPAN>.</P>
<P class=docText><A name=at></A>For an RCU usage example, look at <SPAN class=docEmphasis>fs/dcache.c.</SPAN><A name="in a"></A> On Linux, each file is associated with directory entry information (stored in a structure called <SPAN class=docEmphasis>dentry</SPAN><A name="data "></A>), metadata information (stored in an inode), and actual data (stored in data blocks). Each time you operate on a file, the components in the file path are parsed, and the corresponding dentries are obtained. The dentries are kept cached in a data structure called the <SPAN class=docEmphasis>dcache</SPAN>, to speed <A name=iddle1550></A><A name=iddle1684></A><A name=iddle2556></A><A name=iddle3705></A><A name="lookups is"></A>up future operations. At any time, the number of dcache lookups is much more than dcache updates, so references to the dcache are protected using RCU primitives.