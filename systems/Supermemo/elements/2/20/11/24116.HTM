<P class=docText><FONT class=extract>The kernel also provides timer APIs to execute a function at a point of time in the future. You can dynamically define a timer using <TT>init_timer()</TT></FONT><A name="statically create"></A><FONT class=extract> or statically create one with <TT>DEFINE_TIMER()</TT>. After this is done, populate a <TT>timer_list</TT> </FONT><A name=iddle1047></A><A name=iddle1487></A><A name=iddle1489></A><A name=iddle1744></A><A name=iddle3021></A><A name=iddle3989></A><A name=iddle4262></A><A name=iddle4264></A><A name="it using"></A><FONT class=extract>with the address and parameters of your handler function, and register it using <TT>add_timer()</TT></FONT>:</P>
<DIV class=docText><PRE>#include <LINUX timer.h="">

struct timer_list my_timer;

<FONT class=clozed>init_timer(&amp;my_timer);</FONT>            /* Also see setup_timer() */
my_timer.expire = jiffies + n*HZ; /* n is the timeout in number
                                     of seconds */
my_timer.function = timer_func;   /* Function to execute
                                     after n seconds */
my_timer.data = func_parameter;   /* Parameter to be passed
                                     to timer_func */
add_timer(&amp;my_timer);             /* Start the timer */</PRE></DIV>