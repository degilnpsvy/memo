<P class=docText>Sequence locks or <SPAN class=docEmphasis>seqlocks</SPAN><A name="This is"></A>, introduced in the 2.6 kernel, are reader-writer locks where writers are favored over readers. This is useful if write operations on a variable far outnumber read accesses. An example is the <TT>jiffies_64</TT><A name="variable discussed"></A> variable discussed earlier in this chapter. Writer threads do not wait for readers who may be inside a critical section. Because of this, reader threads may discover that their entry inside a critical section has failed and may need to retry:</P>
<DIV class=docText><PRE>u64 get_jiffies_64(void) /* Defined in <SPAN class=docEmphasis>kernel/time.c</SPAN> */
{
  unsigned long seq;
  u64 ret;
<FONT class=clozed>  do {
    seq = read_seqbegin(&amp;xtime_lock);
    ret = jiffies_64;
  } while (read_seqretry(&amp;xtime_lock, seq));
</FONT>  return ret;
}</PRE></DIV><BR>
<P class=docText><A name="critical regions"></A>Writers protect critical regions using <SPAN class=cloze>[...]</SPAN>.