<P class=docText>If preemption is enabled, mere disabling of interrupts won't protect your critical region from being trampled over. There is the possibility of multiple threads simultaneously entering the critical section in process context. Referring back to <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch02lev1sec5.html#ch02fig02">Figure 2.4</A><A name="this scenario"></A> in this scenario, Thread A and Thread B now need to protect themselves against each other in addition to guarding against Thread C. The solution apparently, is to disable kernel preemption before the start of the critical section and reenable it at the end, in addition to disabling/reenabling interrupts. For this, Thread A and Thread B use the <SPAN class=docEmphasis>irq</SPAN> variant of spinlocks:</P>
<DIV class=docText><PRE>unsigned long flags;

Point A:
  /* Save interrupt state.
   * Disable interrupts - this implicitly disables preemption */
  spin_lock_irqsave(&amp;mylock, flags);

  /* ... Critical Section ... */

  /* Restore interrupt state to what it was at Point A */
  spin_unlock_irqrestore(&amp;mylock, flags);</PRE></DIV><BR>
<P class=docText><A name="was at"></A>Preemption state need not be explicitly restored to what it was at Point A because the kernel internally does that for you via a variable called the <SPAN class=docEmphasis><A name="preemption counter"></A>preemption counter.</SPAN><A name="gets incremented"></A> The counter gets incremented whenever preemption is disabled (using <TT>preempt_disable()</TT><A name="gets decremented"></A>) and gets decremented whenever preemption is enabled (using <TT>preempt_enable()</TT>). Preemption kicks in only if the counter value is zero.