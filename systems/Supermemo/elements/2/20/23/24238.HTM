<P class=docText><TT>kmalloc()</TT> is a memory-allocation function that returns contiguous memory from <TT><FONT class=clozed>ZONE_NORMAL</FONT></TT>. The prototype is as follows:</P>
<DIV class=docText><PRE><FONT class=clozed>void *kmalloc(int count, int flags)</FONT>;</PRE></DIV><BR>
<P class=docText>Where <TT>count</TT> is the number of bytes to allocate, and <TT>flags</TT><A name=in></A> is a mode specifier. All supported flags are listed in <SPAN class=docEmphasis>include/linux./gfp.h</SPAN><A name=for></A> (<FONT class=extract>gfp stands for <SPAN class=docEmphasis>get free pages</SPAN></FONT>), but these are the commonly used ones:</P>
<DIV style="FONT-WEIGHT: bold">
<OL class=docList type=1>
<LI>
<DIV style="FONT-WEIGHT: normal">
<P class=docText><TT><FONT class=clozed>GFP_KERNEL</FONT></TT><A name="is specified"></A><FONT class=clozed> Used by process context code to allocate memory. If this flag is specified, <TT>kmalloc()</TT></FONT><A name="is allowed"></A><FONT class=clozed> is allowed to go to sleep and wait for pages to get freed up.</FONT></P></DIV>
<LI>
<DIV style="FONT-WEIGHT: normal">
<P class=docText><TT><FONT class=clozed>GFP_ATOMIC</FONT></TT><A name="interrupt context"></A><FONT class=clozed> Used by interrupt context code to get hold of memory. In this mode, <TT>kmalloc()</TT></FONT><A name="not allowed"></A><FONT class=clozed> is not allowed to sleep-wait for free pages, so the probability of successful allocation with <TT>GFP_ATOMIC</TT> is lower than with <TT>GFP_KERNEL</TT>.</FONT></P></DIV></LI></OL></DIV>