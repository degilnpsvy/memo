<H3 id=-100000 class=docSection1Title>Tool Chains</H3>
<P class=docText><A name=iddle1212></A><A name=iddle1309></A><A name=iddle1533></A><A name=iddle1917></A><A name=iddle1950></A><A name=iddle1980></A><A name=iddle2126></A><A name=iddle2144></A><A name=iddle2738></A><A name=iddle4279></A><A name="Because the"></A>Because the target device is unlikely to be binary-compatible with your host development platform, you have to cross-compile embedded software using <SPAN class=docEmphasis>tool chains.</SPAN><A name="a full"></A> Setting up a full-fledged tool chain entails building the following:</P>
<DIV style="FONT-WEIGHT: bold">
<OL class=docList type=1>
<LI>
<DIV style="FONT-WEIGHT: normal">
<P class=docList><A name="supports all"></A>The GNU C (cross-)Compiler. GCC supports all platforms that Linux runs on, but you have to configure and build it to generate code for your target architecture. Essentially, you have to compile the compiler and generate the appropriate cross-compiler.</P></DIV></LI>
<LI>
<DIV style="FONT-WEIGHT: normal">
<P class=docList><SPAN class=docEmphasis>Glibc</SPAN><A name="C libraries"></A>, the set of C libraries that you will need when you build applications for the target device.</P></DIV></LI>
<LI>
<DIV style="FONT-WEIGHT: normal">
<P class=docList><SPAN class=docEmphasis>Binutils</SPAN>, which includes the cross-assembler, and tools such as <SPAN class=docEmphasis>objdump</SPAN>.</P></DIV></LI></OL></DIV>
<P class=docText><A name="a daunting"></A>Getting a development tool chain in place used to be a daunting task several years ago but is usually straightforward today because Linux distributions offer precompiled binaries and easy-installation tools for a variety of architectures.