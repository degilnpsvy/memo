<H3 id=-100000 class=docSection1Title>Kernel Porting</H3>
<P class=docText><A name=iddle1973></A><A name=iddle2584></A><A name=iddle2617></A><A name=iddle3611></A><A name=iddle4374></A><A name="Like setting"></A>Like setting up tool chains, porting the kernel to your target device was a serious affair a few years ago. One had to evaluate the stability of the current kernel tree for the architecture of interest, apply available patches that were not yet part of the mainline, make modifications, and hope for good luck. But today, you are likely to find a close starting point, not just for your SoC, but for a hardware board that is similar to yours. For example, if you are designing an embedded device around the Freescale i.MX21 processor, you have the option of starting off with the kernel port (<SPAN class=docEmphasis>arch/arm/-mach-imx/</SPAN><A name="reference board"></A>) for the i.MX21-based reference board built by the processor vendor. If you thus start development from a suitable distribution-supplied or standard kernel available for a board that resembles yours, chances are, you won't have to grapple with complex kernel bring-up issues.</P>
<P class=docText><A name="close match"></A>But even with a close match, you are likely to face issues caused by modified memory maps, changed chip selects, board-specific GPIO assignments, dissimilar clock sources, disparate flash banks, timing requirements of a new LCD panel, or a different debug UART port. A change in clocking for example, can ripple through dozens of registers and impact the operation of several I/O peripherals. You might need an in-depth reading of the CPU reference manual to resolve it. To figure out a modified interrupt pin routing caused by a different GPIO assignment, you might have to pore over your board schematics. To program an LCD controller with <TT>HSYNC</TT> and <TT>VSYNC</TT><A name="your LCD"></A> durations appropriate to your LCD panel, you may need to connect an oscilloscope to your board and digest the information that it gathers.</P>
<P class=docText><A name="to make"></A>Depending on the demands on your device, you may also need to make kernel changes unrelated to bring up. It could be as simple as exporting some information via procfs or as complex as modifying the kernel for fast boot.</P>
<P class=docText><A name="base kernel"></A>After you have the base kernel running, you can turn your attention to enabling device drivers for the different I/O interfaces on your hardware.</P><A name=ch18sb04></A>
<P>
<TABLE cellSpacing=0 cellPadding=5 width="90%" border=1>
<TBODY>
<TR>
<TD>
<H2 class=docSidebarTitle>uClinux</H2>
<P class=docText><A name="kernel intended"></A>uClinux is a branch of the Linux kernel intended for lower-end microprocessors that have no Memory Management Units (MMUs). uClinux ports are available for processors such as H8, Blackfin, and Dragonball. Most portions of uClinux are merged with the mainline 2.6 kernel.</P>
<P class=docText><A name=at></A>The uClinux project is hosted at <A class=docLink href="http://www.uclinux.org/" target=_blank>www.uclinux.org</A><A name="and information"></A>. The website contains patches, documentation, the code repository, list of supported architectures, and information for subscribing to the uclinux-dev mailing list.</P></TD></TR></TBODY></TABLE>