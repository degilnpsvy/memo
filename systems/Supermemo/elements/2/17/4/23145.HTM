<H3 id=-100000 class=docSection1Title>Memory Layout</H3>
<P class=docText><A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch18lev1sec5.html#ch18fig02">Figure 18.2</A><A name="shows an"></A> shows an example memory layout on an embedded device. The bootloader sits on top of the NOR flash. Following the bootloader lies the <SPAN class=docEmphasis>param</SPAN><A name="compiled binary"></A> block, a statically compiled binary image of kernel command-line arguments. The compressed kernel image comes next. The filesystem occupies the rest of the available flash memory. In the initial phase, when you start development with a first-shot kernel, the filesystem is usually a compressed ramdisk (<SPAN class=docEmphasis>initrd</SPAN> or <SPAN class=docEmphasis>initramfs</SPAN><A name="entails getting"></A>), because having a flash-based filesystem entails getting the kernel MTD subsystem configured and running.</P><A name=ch18fig02></A>
<P>
<CENTER>
<H5 class=docFigureTitle><A name="layout on"></A>Figure 18.2. Example memory layout on an embedded device.</H5>
<P class=docText><IMG border=0 alt="" src="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/images/MjltNHJhaS9kNy8zY3JncDA4dHMvOTMxZTZhZzU1LjhpMWYvcGdoaWZjaXMwMmc-.jpg" width=500 height=483></P></CENTER>
<P></P><BR>
<P class=docText>During power-on, the bootloader in <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch18lev1sec5.html#ch18fig02">Figure 18.2</A> uncompresses the kernel and loads it to DRAM at <TT>0xc0200000</TT>. It then loads the ramdisk at <TT>0xc0280000</TT> (unless you build an <SPAN class=docEmphasis>initramfs</SPAN> into the base kernel as you learned in <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch02.html#ch02">Chapter 2</A>). Finally, it obtains command-line arguments from the <SPAN class=docEmphasis>param</SPAN> block and transfers control to the kernel.</P>
<P class=docText><A name="memory partitions"></A>Because you may have to work with unconventional consoles and memory partitions on embedded devices, you have to pass the right command-line arguments to the kernel. For the device in <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch18lev1sec5.html#ch18fig02">Figure 18.2</A><A name="command line"></A>, this is a possible command line:</P>
<DIV class=docText><PRE>console=/dev/ttyS0,115200n8 root=/dev/ram initrd=0xC0280000</PRE></DIV><BR>
<P class=docText><A name="recognizing your"></A>When you have the kernel MTD drivers recognizing your flash partitions, the area of flash that holds the ramdisk can instead contain a JFFS2-based filesystem. With <A name=iddle1142></A><A name="initrd to"></A>this, you don't have to load the initrd to DRAM. Assuming that you have mapped the bootloader, param block, kernel, and filesystem to separate MTD partitions, the command line now looks like this:</P>
<DIV class=docText><PRE>console=/dev/ttyS0,115200n8 root=/dev/mtdblock3</PRE></DIV><BR>
<P class=docText>See the sidebar "<A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch18lev1sec5.html#ch18sb03">ATAGs</A><A name="bootloader to"></A>" for another method of passing parameters from the bootloader to the kernel.</P><A name=ch18sb03></A>
<P>
<TABLE cellSpacing=0 cellPadding=5 width="90%" border=1>
<TBODY>
<TR>
<TD>
<H2 class=docSidebarTitle>ATAGs</H2>
<P class=docText><A name="of a"></A>On ARM kernels, command-line arguments are deprecated in favor of a tagged list of parameters. This mechanism, called ATAG, is described in <SPAN class=docEmphasis>Documentation/arm/Booting</SPAN><A name="To pass"></A>. To pass a parameter to the kernel, create the corresponding tag in system memory from the bootloader, supply a kernel function to parse it, and add the latter to the list of tag parsing functions using the <TT>__tagtable()</TT> macro. The <TT>tag</TT><A name="its relatives"></A> structure and its relatives are defined in <SPAN class=docEmphasis>include/asm-arm/setup.h</SPAN>, whereas <SPAN class=docEmphasis>arch/arm/kernel/setup.c</SPAN><A name="several predefined"></A> contains functions that parse several predefined ATAGs.</P></TD></TR></TBODY></TABLE>