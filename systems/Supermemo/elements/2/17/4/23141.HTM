<H3 id=-100000 class=docSection1Title>Challenges</H3>
<P class=docText><A name="significant software"></A>Embedded systems present several significant software challenges:</P>
<UL>
<LI>
<P class=docList><A name="to be"></A>Embedded software has to be cross-compiled and then downloaded to the target device to be tested and verified.</P></LI>
<LI>
<P class=docList>Embedded systems, unlike PC-compatible computers, do not have fast processors, fat caches, and wholesome storage.</P></LI>
<LI>
<P class=docList><A name="embedded hardware"></A>It's often difficult to get mature development and debug tools for embedded hardware for free.</P></LI>
<LI>
<P class=docList><A name="a lot"></A>The Linux community has a lot more experience on the x86 platform, so you are less likely to get instant online help from experts if you working on embedded computers.</P></LI>
<LI>
<P class=docList><A name="to start"></A>The hardware evolves in stages. You may have to start software development on a proof-of-concept prototype or a reference board, and progressively move on to engineering-level debug hardware and a few passes of production-level units.</P></LI></UL>
<P class=docText><A name="longer development"></A>All these result in a longer development cycle.</P>
<P class=docText><A name="not commonly"></A>From a device-driver perspective, embedded software developers often face interfaces not commonly found on conventional computers. <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch18.html#ch18fig01">Figure 18.1</A> (which is an expanded version of <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch04lev1sec1.html#ch04fig02">Figure 4.2</A> in <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch04.html#ch04">Chapter 4</A>, "Laying the Groundwork") shows a <A name=iddle3594></A><A name=iddle3619></A><A name="smart phone"></A>hypothetical embedded device that could be a handheld, smart phone, <SPAN class=docEmphasis>point-of-sale</SPAN><A name="navigation system"></A> (POS) terminal, kiosk, navigation system, gaming device, telemetry gadget on an automobile dashboard, IP phone, music player, digital set-top box, or even a pacemaker programmer. The device is built around an SoC and has some combination of flash memory, SDRAM, LCD, touch screen, USB OTG, serial ports, audio codec, connectivity, SD/MMC controller, Compact Flash, I<SUP>2</SUP><A name="smart card"></A>C devices, SPI devices, JTAG, biometrics, smart card interfaces, keypad, LEDs, switches, and electronics specific to the industry domain. Modifying and debugging drivers for some of these devices can be tougher than usual: NAND flash drivers have to handle problems such as bad blocks and failed bits, unlike standard IDE storage drivers. Flash-based filesystems such as JFFS2, are more complex to debug than EXT2 or EXT3 filesystems. A USB OTG driver is more involved than a USB OHCI driver. The SPI subsystem on the kernel is not as mature as, say, the serial layer. Moreover, the industry domain using the embedded device might impose specific requirements such as quick response times or fast boot.</P><A name=ch18fig01></A>
<P>
<CENTER>
<H5 class=docFigureTitle><A name="a hypothetical"></A>Figure 18.1. Block diagram of a hypothetical embedded device.</H5>
<P class=docText>
<DIV class=st1><A href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/images/MjltNHJhaS9kNy8zY3JncDA4dHMvOTMxZTZhZzU1aV84aTFmL3BhZmhpdGNsMDFzZy5n.jpg" target=_blank>[View full size image]</A></DIV><IMG border=0 alt="" src="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/images/MjltNHJhaS9kNy8zY3JncDA4dHMvOTMxZTZhZzU1LjhpMWYvcGdoaWZjaXMwMWc-.jpg" width=500 height=359></CENTER>