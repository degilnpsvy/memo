<H3 id=title-IDAJX2PF class=docSection1Title>11.2. BusyBox Configuration</H3>
<P class=docText>To initiate the BusyBox configuration, the command is the same as that used with the Linux kernel for the <TT>ncurses</TT> library-based configuration utility:</P>
<DIV class=docText><PRE>$ <SPAN class=docEmphStrong>make menuconfig</SPAN></PRE></DIV><BR>
<P class=docText><A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch11lev1sec2.html#ch11fig01">Figure 11-1</A> shows the top-level BusyBox configuration.</P>
<P class=docText></P><A name=ch11fig01></A>
<P>
<CENTER>
<H5 class=docFigureTitle>Figure 11-1. Top-Level BusyBox Configuration menu</H5>
<P class=docText>
<DIV class=v1><A href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/images/11elp01_alt.jpg" target=_self>[View full size image]</A></DIV><IMG border=0 alt="" src="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/images/11elp01.jpg" width=500 height=460>
<P></P></CENTER>
<P></P><BR>
<P class=docText><A name=iddle1853></A>Space does not permit coverage of each configuration option. However, some of the options deserve mention. Some of the more important BusyBox configuration options are found under <TT>Build Options</TT>. Here you will find configuration options necessary to cross-compile the BusyBox application. <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch11lev1sec2.html#ch11list01">Listing 11-1</A> details the options found under <TT>BuildOptions</TT> in a recent BusyBox snapshot. Select Build Options from the top-level BusyBox configuration utility to navigate to this screen.</P><A name=ch11list01></A>
<H5 id=title-IDAA02PF class=docExampleTitle>Listing 11-1. BusyBox Build Options</H5>
<P>
<TABLE cellSpacing=0 cellPadding=5 width="90%" border=1>
<TBODY>
<TR>
<TD><PRE>[ ] Build BusyBox as a static binary (no shared libs)
[ ] Build with Large File Support (for accessing files &gt; 2 GB)
[ ] Do you want to build BusyBox with a Cross Compiler?
()  Any extra CFLAGS options for the compiler?</PRE><BR></TD></TR></TBODY></TABLE></P>
<P class=docText><A name=iddle1165></A><A name=iddle1254></A><A name=iddle1856></A>The first option is useful for building very minimal embedded systems. It allows BusyBox to be compiled and linked statically so that no dynamically loaded libraries (<TT>libc-2.3.3.so</TT>, for example) are required at runtime on the target system. Without this option, BusyBox requires some libraries so it can run. We can easily determine what libraries BusyBox (or any other binary) requires on our target system by using the <TT>ldd</TT> command. <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch11lev1sec2.html#ch11list02">Listing 11-2</A> contains the output as displayed on my desktop Linux workstation.</P><A name=ch11list02></A>
<H5 id=title-IDA212PF class=docExampleTitle>Listing 11-2. BusyBox Library Dependencies</H5>
<P>
<TABLE cellSpacing=0 cellPadding=5 width="90%" border=1>
<TBODY>
<TR>
<TD><PRE>$ <SPAN class=docEmphStrong>ldd busybox</SPAN>
         linux-gate.so.1 =&gt;  (0xffffe000)
         libc.so.6=&gt; /lib/tls/libc.so.6 (0x42c70000)
         /lib/ld-linux.so.2=&gt; /lib/ld-linux.so.2 (0x42c57000)</PRE><BR></TD></TR></TBODY></TABLE></P>
<P class=docText>Notice that the BusyBox utility, as compiled using the default configuration, requires the three shared libraries in <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch11lev1sec2.html#ch11list02">Listing 11-2</A>. Had we elected to build BusyBox as a static binary, <TT>ldd</TT> would simply issue a message telling us that the BusyBox binary is not a dynamic executable. In other words, it requires no shared libraries to resolve any unresolved dependencies in the executable. Static linking yields a smaller footprint on a root file system because no shared libraries are required. However, building an embedded application without shared libraries means that you have none of the familiar C library functions available to your applications.</P>
<P class=docText>We cover the other options from <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch11lev1sec2.html#ch11list01">Listing 11-1</A> in the next section.</P><A name=ch11lev2sec2></A>
<H4 id=title-IDAD32PF class=docSection2Title>11.2.1. Cross-Compiling BusyBox</H4>
<P class=docText>As mentioned at the beginning of the chapter, the authors of BusyBox intended the package to be used in a cross-development environment, so building BusyBox in such an environment is quite easy. In most cases, the only requirement is to specify the prefix to the cross-compiler on your development workstation. This is specified in Build Options in the BusyBox configuration utility by selecting the option to build BusyBox with a cross-compiler. You then are presented with an option to enter the cross-compiler prefix. The prefix you enter depends on your cross-development environment. Some examples include <TT>xscale_be-</TT> or <TT>ppc-linux-</TT>. We cover this in more detail in the next chapter when we examine the embedded development environment.</P>
<P class=docText><A name=iddle1170></A><A name=iddle1859></A><A name=iddle2467></A>The final option in <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch11lev1sec2.html#ch11list01">Listing 11-1</A> is for any extra flags you might want to include on the compiler command line. These might include options for generating debug information (<TT>-g</TT>), options for setting the optimization level (<TT>-O2</TT>, for example), and other compiler options that might be unique to your particular installation and target system.</P><A href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/14051536.html"><IMG border=0 alt="" src="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/images/pixel.jpg" width=1 height=1></A>