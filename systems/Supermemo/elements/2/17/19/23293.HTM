<H3 id=700181-901 class=docSection1Title>13.5. Binary Utilities</H3>
<P class=docText>Binary utilities, or <TT>binutils</TT>, are a critical component of any toolchain. Indeed, to build a compiler, you must first have successfully built <TT>binutils</TT>. In this section, we briefly introduce the more useful tools that the embedded developer needs to know about. As with most of the other tools in this chapter, these are cross-utilities and must be built to execute on your development host while operating on binary files targeted to your chosen architecture. Alternatively, you could compile or obtain versions of these to run on your target, but we assume a cross-development environment for these examples.</P><A name=ch13lev2sec12></A>
<H4 id=title-IDA51B3D class=docSection2Title>13.5.1. readelf</H4>
<P class=docText>The <TT>readelf</TT> utility examines the composition of your target ELF binary file. This is particularly useful for building images targeted for ROM or Flash memory where explicit control of the image layout is required. It is also a great tool for learning how your toolchain builds images and for understanding the ELF file format.</P>
<P class=docText>For example, to display the symbol table in an ELF image, use this command:</P>
<DIV class=docText><PRE>$ <SPAN class=docEmphStrong>readelf -s &lt;elf-image&gt;</SPAN></PRE></DIV><BR>
<P class=docText>To discover and display all the sections in your ELF image, use this command:</P>
<DIV class=docText><PRE>$ <SPAN class=docEmphStrong>readelf -e &lt;elf-image&gt;</SPAN></PRE></DIV><BR>
<P class=docText>Use the <TT>-S</TT> flag to list the section headers in your ELF image. You might be surprised to learn that even a simple seven-line "hello world" program contains 38 separate sections. Some of them will be familiar to you, such as the <TT>.text</TT> and <TT>.data</TT> sections. <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch13lev1sec5.html#ch13list15">Listing 13-15</A> contains a partial listing of sections from our "hello world" example. For simplicity, we have listed only those sections that are likely to be familiar or relevant to the embedded developer.</P>
<P class=docText></P><A name=ch13list15></A>
<H5 id=title-IDA13B3D class=docExampleTitle>Listing 13-15. <TT>readelf</TT> Section Headers</H5>
<P>
<TABLE cellSpacing=0 cellPadding=5 width="90%" border=1>
<TBODY>
<TR>
<TD><PRE>$ <SPAN class=docEmphStrong>ppc_82xx-readelf -S  hello-ex</SPAN>
There are 38 section headers, starting at offset 0x32f4:

Section Headers:
[ Nr] Name        Type        Addr     Off    Size   ES Flg Lk Inf Al
...
 [11] .text       PROGBITS    100002f0 0002f0 000568 00  AX  0   0  4
...
 [13] .rodata     PROGBITS    10000878 000878 000068 00   A  0   0  4
...
 [15] .data       PROGBITS    100108e0 0008e0 00000c 00  WA  0   0  4
...
 [22] .sdata      PROGBITS    100109e0 0009e0 00001c 00  WA  0   0  4
 [23] .sbss       NOBITS      100109fc 0009fc 000000 00  WA  0   0  1
...
 [25] .bss        NOBITS      10010a74 0009fc 00001c 00  WA  0   0  4
...</PRE><BR></TD></TR></TBODY></TABLE></P>
<P class=docText><A name=iddle2003></A>The <TT>.text</TT> section contains the executable program code. The <TT>.rodata</TT> section contains constant data in your program. The <TT>.data</TT> section generally contains initialized global data used by the C library prologue code and can contain large initialized data items from your application. The <TT>.sdata</TT> section is used for smaller initialized global data items and exists only on some architectures. Some processor architectures can make use of optimized data access when the attributes of the memory area are known. The <TT>.sdata</TT> and <TT>.sbss</TT> sections enable these optimizations. The <TT>.bss</TT> and <TT>.sbss</TT> sections contain uninitialized data in your program. These sections occupy no space in the program imagetheir memory space is allocated and initialized to zero on program startup by C library prologue code.</P>
<P class=docText>We can dump any of these sections and display the contents. Given this line in your C program declared outside of any function, we can examine how it is placed in the <TT>.rodata</TT> section:</P>
<DIV class=docText><PRE>char *hello_rodata = "This is a read-only data string\n";</PRE></DIV><BR>
<P class=docText><A name=iddle2308></A>Issue the <TT>readelf</TT> command specifying the section number we want to dump from <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch13lev1sec5.html#ch13list15">Listing 13-15</A>:</P>
<DIV class=docText><PRE>$ <SPAN class=docEmphStrong>ppc_82xx-readelf -x 13 hello-ex</SPAN>
Hex dump of section '.rodata':
  0x10000878 100189e0 10000488 1000050c 1000058c ................
  0x10000888 00020001 54686973 20697320 61207265 ....This is a read-
  0x10000898 61642d6f 6e6c7920 64617461 20737472 only data string
  0x100008a8 696e670a 00000000 54686973 20697320 .....This is
  0x100008b8 73746174 69632064 6174610a 00000000 static data.....
  0x100008c8 48656c6c 6f20456d 62656464 65640a00 Hello Embedded..
  0x100008d8 25730a00 25780a00                   %s..%x..</PRE></DIV><BR>
<P class=docText>We see that the initialized global variable that we declared is represented in the <TT>.rodata</TT> section, together with all the constant strings defined in the program.</P><A name=ch13lev2sec13></A>
<H4 id=title-IDAEBC3D class=docSection2Title>13.5.2. Examining Debug Info Using readelf</H4>
<P class=docText>One of the more useful features of <TT>readelf</TT> is to display the debug information contained in an ELF file. When the <TT>-g</TT> compiler flag is issued during a compilation, the compiler generates debug information in a series of sections within the resulting ELF file. We can use <TT>readelf</TT> to display these ELF section headers within the ELF file:</P>
<DIV class=docText><PRE>$ <SPAN class=docEmphStrong>ppc-linux-readelf -S ex_sync | grep debug</SPAN>
  [28] .debug_aranges    PROGBITS   00000000 000c38 0000b8 00   0   0  8
  [29] .debug_pubnames   PROGBITS   00000000 000cf0 00007a 00   0   0  1
  [30] .debug_info       PROGBITS   00000000 000d6a 00079b 00   0   0  1
  [31] .debug_abbrev     PROGBITS   00000000 001505 000207 00   0   0  1
  [32] .debug_line       PROGBITS   00000000 00170c 000354 00   0   0  1
  [33] .debug_frame      PROGBITS   00000000 001a60 000080 00   0   0  4
  [34] .debug_str        PROGBITS   00000000 001ae0 00014d 00   0   0  1</PRE></DIV><BR>
<P class=docText>Using <TT>readelf</TT> with the <TT>--debug-dump</TT> option, we can display the contents of any one of these <TT>.debug_*</TT> sections. You will see how this information can be useful in <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch14.html#ch14">Chapter 14</A>, "Kernel Debugging Techniques," when we discuss the challenge of debugging optimized kernel code.</P>
<P class=docText>Debug information can be very large. Displaying all the debug information in the Linux kernel ELF file <TT>vmlinux</TT> produces more than six million lines of output. However daunting it might appear, having at least a familiarity with debug information will make you a better embedded engineer.</P>
<P class=docText><A name=iddle1991></A><A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch13lev1sec5.html#ch13list16">Listing 13-16</A> is a partial listing of the contents of the <TT>.debug_info</TT> section from a small example application. For space considerations, we have shown only a few records.</P><A name=ch13list16></A>
<H5 id=title-IDAPDC3D class=docExampleTitle>Listing 13-16. Partial Debug Info Dump</H5>
<P>
<TABLE cellSpacing=0 cellPadding=5 width="90%" border=1>
<TBODY>
<TR>
<TD><PRE>$ <SPAN class=docEmphStrong>ppc-linux-readelf -debug-dump=info ex_sync</SPAN>
1 The section .debug_info contains:
2
3   Compilation Unit @ 0:
4    Length:        109
5    Version:       2
6    Abbrev Offset: 0
7    Pointer Size:  4
8  &lt;0&gt;&lt;b&gt;: Abbrev Number: 1 (DW_TAG_compile_unit)
9      DW_AT_stmt_list   : 0
10      DW_AT_low_pc      : 0x10000368
11      DW_AT_high_pc     : 0x1000038c
12      DW_AT_name        :
../sysdeps/powerpc/powerpc32/elf/start.S
13      DW_AT_comp_dir    : /var/tmp/BUILD/glibc-2.3.3/csu
14      DW_AT_producer    : GNU AS 2.15.94
15      DW_AT_language    : 32769  (MIPS assembler)
...
394  &lt;1&gt;&lt;5a1&gt;: Abbrev Number: 14 (DW_TAG_subprogram)
395      DW_AT_sibling     : &lt;5fa&gt;
396      DW_AT_external    : 1
397      DW_AT_name        : main
398      DW_AT_decl_file   : 1
399      DW_AT_decl_line   : 9
400      DW_AT_prototyped  : 1
401      DW_AT_type        : &lt;248&gt;
402      DW_AT_low_pc      : 0x100004b8
403      DW_AT_high_pc     : 0x10000570
404      DW_AT_frame_base  : 1 byte block: 6f       (DW_OP_reg31)
...
423  &lt;2&gt;&lt;5e9&gt;: Abbrev Number: 16 (DW_TAG_variable)
424      DW_AT_name        : mybuf
425      DW_AT_decl_file   : 1
426      DW_AT_decl_line   : 11
427      DW_AT_type        : &lt;600&gt;
428      DW_AT_location    : 2 byte block: 91 20    (DW_OP_fbreg: 32)
...</PRE><BR></TD></TR></TBODY></TABLE></P>
<P class=docText><A name=iddle1066></A><A name=iddle1886></A><A name=iddle2165></A><A name=iddle2579></A>The first record identified by the <SPAN class=docEmphasis>Dwarf2</SPAN><SUP class=docFootnote><A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch13lev1sec5.html#ch13fn08">[8]</A></SUP> tag <TT>DW_TAG_compile_unit</TT> identifies the first compilation unit of this PowerPC executable. It is a file called <TT>start.S</TT>, which provides startup prologue for a C program. The next record identified by <TT>DW_TAG_subprogram</TT> identifies the start of the user program, the familiar function <TT>main()</TT>. This Dwarf2 debug record contains a reference to the file and line number where <TT>main()</TT> is found. The final record in <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch13lev1sec5.html#ch13list16">Listing 13-16</A> identifies a local variable in the <TT>main()</TT> routine called <TT>mybuf</TT>. Again, the line number and file are provided by this record. You can deduce from this information that <TT>main()</TT> is at line 9, and <TT>mybuf</TT> is at line 11 of the source file. Other debug records in the ELF file correlate the filename via the Dwarf2 <TT>DW_AT_decl_file</TT> attribute.</P>
<BLOCKQUOTE>
<P class=docFootnote><SUP><A name=ch13fn08>[8]</A></SUP> A reference for the Dwarf2 Debug Information Specification is provided at the end of this chapter.</P></BLOCKQUOTE>
<P class=docText>You can discover all the details of the Dwarf2 debug information format via the reference given in <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch13lev1sec7.html#ch13lev2sec22">Section 13.7.1</A> at the end of this chapter.</P><A name=ch13lev2sec14></A>
<H4 id=title-IDA0GC3D class=docSection2Title>13.5.3. objdump</H4>
<P class=docText>The <TT>objdump</TT> utility has considerable overlap with the <TT>readelf</TT> tool. However, one of the more useful features of <TT>objdump</TT> is its capability to display disassembled object code. <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch13lev1sec5.html#ch13list17">Listing 13-17</A> provides an example of disassembly of the <TT>.text</TT> section of the simple "hello world" PowerPC version. We include only the <TT>main()</TT> routine, to save space. The entire dump, including C library prologue and epilogue, would consume many pages.</P><A name=ch13list17></A>
<H5 id=title-IDA2HC3D class=docExampleTitle>Listing 13-17. Disassembly Using objdump</H5>
<P>
<TABLE cellSpacing=0 cellPadding=5 width="90%" border=1>
<TBODY>
<TR>
<TD><PRE>$ <SPAN class=docEmphStrong>ppc_82xx-objdump -S -m powerpc:common -j .text hello</SPAN>
...
10000488 &lt;main&gt;:
10000488:       94 21 ff e0     stwu    r1,-32(r1)
1000048c:       7c 08 02 a6     mflr    r0
10000490:       93 e1 00 1c     stw     r31,28(r1)
10000494:       90 01 00 24     stw     r0,36(r1)
10000498:       7c 3f 0b 78     mr      r31,r1
1000049c:       90 7f 00 08     stw     r3,8(r31)
100004a0:       90 9f 00 0c     stw     r4,12(r31)
100004a4:       3d 20 10 00     lis     r9,4096
100004a8:       38 69 08 54     addi    r3,r9,2132
100004ac:       4c c6 31 82     crclr   4*cr1+eq
100004b0:       48 01 05 11     bl      100109c0

&lt;__bss_start+0x60&gt;
100004b4:       38 00 00 00     li      r0,0
100004b8:       7c 03 03 78     mr      r3,r0
100004bc:       81 61 00 00     lwz     r11,0(r1)
100004c0:       80 0b 00 04     lwz     r0,4(r11)
100004c4:       7c 08 03 a6     mtlr    r0
100004c8:       83 eb ff fc     lwz     r31,-4(r11)
100004cc:       7d 61 5b 78     mr      r1,r11
100004d0:       4e 80 00 20     blr
...</PRE><BR></TD></TR></TBODY></TABLE></P>
<P class=docText><A name=iddle1065></A><A name=iddle2164></A><A name=iddle2578></A>Much of the code from the simple <TT>main()</TT> routine is stack frame creation and destruction. The actual call to <TT>printf()</TT> is represented by the branch link (<TT>bl</TT>) instruction near the center of the listing at address 0x100004b0. This is a PowerPC function call. Because this program was compiled as a dynamically linked object, we will not have an address for the <TT>printf()</TT> function until runtime, when it is linked with the shared library <TT>printf()</TT> routine. Had we compiled this as a statically linked object, we would see the symbol and corresponding address for the call to <TT>printf()</TT>.</P><A name=ch13lev2sec15></A>
<H4 id=title-IDADKC3D class=docSection2Title>13.5.4. objcopy</H4>
<P class=docText><TT>objcopy</TT> formats and, optionally, converts the format of a binary object file. This utility is quite useful for generating code for ROM or Flash resident images. The U-Boot bootloader introduced in <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch07.html#ch07">Chapter 7</A> makes use of <TT>objcopy</TT> to produce binary and s-record<SUP class=docFootnote><A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch13lev1sec5.html#ch13fn9">[9]</A></SUP> output formats from the final ELF file. This example usage illustrates the capabilities of <TT>objcopy</TT> and its use to build Flash images.</P>
<BLOCKQUOTE>
<P class=docFootnote><SUP><A name=ch13fn9>[9]</A></SUP> S-record files are an ASCII representation of a binary file, used by many device programmers and software binary utilities.</P></BLOCKQUOTE>
<DIV class=docText><PRE>$ <SPAN class=docEmphStrong>ppc_82xx-objcopy --gap-fill=0xff -O binary u-boot u-boot.bin</SPAN></PRE></DIV><BR>
<P class=docText>This <TT>objcopy</TT> invocation shows how an image might be prepared for Flash memory. The input file<TT>u-boot</TT>, in this exampleis the complete ELF U-Boot image, including symbols and relocation information. The <TT>objcopy</TT> utility takes only the relevant sections containing program code and data and places the image in the output file, specified here as <TT>u-boot.bin</TT>.</P>
<P class=docText>Flash memory contains all ones in its erased state. Therefore, filling gaps in a binary image with all ones improves programming efficiency and prolongs the life of the Flash memory, which today has limited write cycles. This is done with the <TT>--gap-fill</TT> parameter to <TT>objcopy</TT>.</P>
<P class=docText><A name=iddle1020></A><A name=iddle1062></A><A name=iddle1070></A><A name=iddle2456></A><A name=iddle2575></A><A name=iddle2583></A>This is but one simple example usage of <TT>objcopy</TT>. This utility can be used to generate s-records and convert from one format to another. See the man page for complete details.