<H3 id=-100000 class=docSection1Title>ISA and MCA</H3>
<P class=docText><A name=The></A>The <SPAN class=docEmphasis>Industries Standard Architecture</SPAN><A name="a bus"></A> (ISA) started as a bus for interfacing I/O devices with the PC but evolved into a de facto standard. ISA drivers would have merited a separate chapter several years earlier; but today, with the advent of the PCI bus, ISA has all but disappeared.</P>
<P class=docText><A name="factors that"></A>There are two main bus-specific factors that ISA device drivers have to contend with:</P>
<UL>
<LI>
<P class=docList><A name="offer standard"></A>ISA does not offer standard interfaces that drivers can use to detect resource information that is electrically wired or assigned by boot firmware. Implementing complex probing logic, often leveraging device-specific quirks, is an important part of ISA driver initialization. This is unlike the PCI bus, where the device driver can cleanly decipher the identity of resources such as interrupt request lines and I/O base addresses assigned by boot firmware. You learned how to do this when we discussed the PCI configuration space in <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch10.html#ch10">Chapter 10</A>. We also briefly looked at ISA probing in the section "<A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch15lev1sec5.html#ch15lev1sec5">ISA Network Drivers</A>" in <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch15.html#ch15">Chapter 15</A>, "Network Interface Cards."</P>
<P class=docList><A name=iddle1910></A><A name=iddle2039></A><A name=iddle2076></A><A name=iddle2311></A><A name=iddle2317></A><A name=iddle2916></A><A name=iddle2988></A><A name=iddle3590></A><A name=iddle3592></A>The ISA <SPAN class=docEmphasis>Plug-and-Play</SPAN> (PnP) specification attempts to bring a degree of autoconfigurability to ISA, however.</P></LI>
<LI>
<P class=docList><A name="access only"></A>The ISA bus has a width of 24 bits, so devices can access only the low 16MB of system memory. To DMA network data from an ISA Ethernet card, for example, DMA buffers have to reside in the low 16MB range called <TT>ZONE_DMA</TT>. The <SPAN class=docEmphasis>Extended Industry Standard Architecture</SPAN><A name="to "></A> (EISA), however, widens the ISA bus to 32 bits. You can plug ISA devices into EISA slots.</P></LI></UL>
<P class=docText><A name="the ISA"></A>Today, the LPC bus is used rather than the ISA bus to connect legacy peripherals to the CPU on PC-compatible systems. We discussed LPC devices such as Super I/O chipsets, firmware hubs, and thermal sensors in earlier chapters.</P>
<P class=docText>The <SPAN class=docEmphasis>Micro-Channel Architecture</SPAN><A name="limitations of"></A> (MCA) bus overcomes many of the limitations of the ISA family. MCA supports bus mastering, autoconfiguration, and 32-bit bus widths. Though technologically superior to ISA, MCA didn't become as popular because of its proprietary nature.</P>
<P class=docText>Look at <SPAN class=docEmphasis>drivers/net/tokenring/skisa.c</SPAN><A name="Ring card"></A> for a sample ISA driver for a Token Ring card. The IBM Token Ring driver, <SPAN class=docEmphasis>drivers/net/tokenring/ibmtr.c</SPAN><A name="Token Ring"></A>, supports ISA, PnP, and MCA form factors of IBM Token Ring hardware. The 3COM Ethernet driver, <SPAN class=docEmphasis>drivers/net/3c509</SPAN>.<SPAN class=docEmphasis>c</SPAN><A name="drives MCA"></A>, drives MCA, PnP, and EISA form factors of a 3COM Ethernet card. The kernel provides core routines for the use of PnP, EISA, and MCA drivers. These implementations live in <SPAN class=docEmphasis>drivers/pnp/, drivers/eisa/</SPAN>, and <SPAN class=docEmphasis>drivers/mca/</SPAN>, respectively.