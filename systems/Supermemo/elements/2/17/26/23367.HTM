<FONT class=extract>/dev/fb* also allows several ioctls on it, by which lots of information about<BR>the hardware can be queried and set. The color map handling works via ioctls,<BR>too. Look into &lt;linux/fb.h&gt; for more information on what ioctls exist and on<BR>which data structures they work.</FONT> Here's just a brief overview: 
<P></P>
<P>&nbsp; - You can request unchangeable information about the hardware, like name,<BR>&nbsp;&nbsp;&nbsp; organization of the screen memory (planes, packed pixels, ...) and address<BR>&nbsp;&nbsp;&nbsp; and length of the screen memory.</P>
<P>&nbsp; - You can request and change variable information about the hardware, like<BR>&nbsp;&nbsp;&nbsp; visible and virtual geometry, depth, color map format, timing, and so on.<BR>&nbsp;&nbsp;&nbsp; If you try to change that information, the driver maybe will round up some<BR>&nbsp;&nbsp;&nbsp; values to meet the hardware's capabilities (or return EINVAL if that isn't<BR>&nbsp;&nbsp;&nbsp; possible).</P>
<P>&nbsp; - You can get and set parts of the color map. Communication is done with 16<BR>&nbsp;&nbsp;&nbsp; bits per color part (red, green, blue, transparency) to support all <BR>&nbsp;&nbsp;&nbsp; existing hardware. The driver does all the computations needed to apply <BR>&nbsp;&nbsp;&nbsp; it to the hardware (round it down to less bits, maybe throw away <BR>&nbsp;&nbsp;&nbsp; transparency).