# Documentation/irqflags-tracing.txt
<P></P>
<P>IRQ-flags state tracing</P>
<P></P>
<P>started by Ingo Molnar &lt;<A href="mailto:mingo@redhat.com">mingo@redhat.com</A>&gt;</P>
<P>the "irq-flags tracing" feature "traces" hardirq and softirq state, in<BR>that it gives interested subsystems an opportunity to be notified of<BR>every hardirqs-off/hardirqs-on, softirqs-off/softirqs-on event that<BR>happens in the kernel.</P>
<P>CONFIG_TRACE_IRQFLAGS_SUPPORT is needed for CONFIG_PROVE_SPIN_LOCKING<BR>and CONFIG_PROVE_RW_LOCKING to be offered by the generic lock debugging<BR>code. Otherwise only CONFIG_PROVE_MUTEX_LOCKING and<BR>CONFIG_PROVE_RWSEM_LOCKING will be offered on an architecture - these<BR>are locking APIs that are not used in IRQ context. (the one exception<BR>for rwsems is worked around)</P>
<P>architecture support for this is certainly not in the "trivial"<BR>category, because lots of lowlevel assembly code deal with irq-flags<BR>state changes. But an architecture can be irq-flags-tracing enabled in a<BR>rather straightforward and risk-free manner.</P>
<P>Architectures that want to support this need to do a couple of<BR>code-organizational changes first:</P>
<P>- move their irq-flags manipulation code from their asm/system.h header<BR>&nbsp; to asm/irqflags.h</P>
<P>- rename local_irq_disable()/etc to raw_local_irq_disable()/etc. so that<BR>&nbsp; the linux/irqflags.h code can inject callbacks and can construct the<BR>&nbsp; real local_irq_disable()/etc APIs.</P>
<P>- add and enable TRACE_IRQFLAGS_SUPPORT in their arch level Kconfig file</P>
<P>and then a couple of functional changes are needed as well to implement<BR>irq-flags-tracing support:</P>
<P>- in lowlevel entry code add (build-conditional) calls to the<BR>&nbsp; trace_hardirqs_off()/trace_hardirqs_on() functions. The lock validator<BR>&nbsp; closely guards whether the 'real' irq-flags matches the 'virtual'<BR>&nbsp; irq-flags state, and complains loudly (and turns itself off) if the<BR>&nbsp; two do not match. Usually most of the time for arch support for<BR>&nbsp; irq-flags-tracing is spent in this state: look at the lockdep<BR>&nbsp; complaint, try to figure out the assembly code we did not cover yet,<BR>&nbsp; fix and repeat. Once the system has booted up and works without a<BR>&nbsp; lockdep complaint in the irq-flags-tracing functions arch support is<BR>&nbsp; complete.<BR>- if the architecture has non-maskable interrupts then those need to be<BR>&nbsp; excluded from the irq-tracing [and lock validation] mechanism via<BR>&nbsp; lockdep_off()/lockdep_on().</P>
<P>in general there is no risk from having an incomplete irq-flags-tracing<BR>implementation in an architecture: lockdep will detect that and will<BR>turn itself off. I.e. the lock validator will still be reliable. There<BR>should be no crashes due to irq-tracing bugs. (except if the assembly<BR>changes break other code by modifying conditions or registers that<BR>shouldn't be)</P>
<P>&nbsp;