# Documentation/kobject.txt 
<P></P>
<P>Everything you never wanted to know about kobjects, ksets, and ktypes</P>
<P></P>
<P>Greg Kroah-Hartman &lt;<A href="mailto:gregkh@linuxfoundation.org">gregkh@linuxfoundation.org</A>&gt;</P>
<P>Based on an original article by Jon Corbet for lwn.net written October 1,<BR>2003 and located at <A href="http://lwn.net/Articles/51437/">http://lwn.net/Articles/51437/</A></P>
<P>Last updated December 19, 2007</P>
<P><BR>Part of the difficulty in understanding the driver model - and the kobject<BR>abstraction upon which it is built - is that there is no obvious starting<BR>place. Dealing with kobjects requires understanding a few different types,<BR>all of which make reference to each other. In an attempt to make things<BR>easier, we'll take a multi-pass approach, starting with vague terms and<BR>adding detail as we go. To that end, here are some quick definitions of<BR>some terms we will be working with.</P>
<P><FONT class=extract>&nbsp;- A kobject is an object of type struct kobject.&nbsp; Kobjects have a name<BR>&nbsp;&nbsp; and a reference count.&nbsp; A kobject also has a parent pointer (allowing<BR>&nbsp;&nbsp; objects to be arranged into hierarchies), a specific type, and,<BR>&nbsp;&nbsp; usually, a representation in the sysfs virtual filesystem.</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp; Kobjects are generally not interesting on their own; instead, they are<BR>&nbsp;&nbsp; usually embedded within some other structure which contains the stuff<BR>&nbsp;&nbsp; the code is really interested in.</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp; No structure should EVER have more than one kobject embedded within it.<BR>&nbsp;&nbsp; If it does, the reference counting for the object is sure to be messed<BR>&nbsp;&nbsp; up and incorrect, and your code will be buggy.&nbsp; So do not do this.</FONT></P>
<P><FONT class=extract>&nbsp;- A ktype is the type of object that embeds a kobject.&nbsp; Every structure<BR>&nbsp;&nbsp; that embeds a kobject needs a corresponding ktype.&nbsp; The ktype controls<BR>&nbsp;&nbsp; what happens to the kobject when it is created and destroyed.</FONT></P>
<P><FONT class=extract>&nbsp;- A kset is a group of kobjects.&nbsp; These kobjects can be of the same ktype<BR>&nbsp;&nbsp; or belong to different ktypes.&nbsp; The kset is the basic container type for<BR>&nbsp;&nbsp; collections of kobjects. Ksets contain their own kobjects, but you can<BR>&nbsp;&nbsp; safely ignore that implementation detail as the kset core code handles<BR>&nbsp;&nbsp; this kobject automatically.</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp; When you see a sysfs directory full of other directories, generally each<BR>&nbsp;&nbsp; of those directories corresponds to a kobject in the same kset.</FONT></P>
<P>We'll look at how to create and manipulate all of these types. A bottom-up<BR>approach will be taken, so we'll go back to kobjects.</P>
<P><BR><FONT class=extract>Embedding kobjects</FONT></P>
<P><FONT class=extract>It is rare for kernel code to create a standalone kobject, with one major<BR>exception explained below.&nbsp; Instead, kobjects are used to control access to<BR>a larger, domain-specific object.&nbsp; To this end, kobjects will be found<BR>embedded in other structures.&nbsp; If you are used to thinking of things in<BR>object-oriented terms, kobjects can be seen as a top-level, abstract class<BR>from which other classes are derived.&nbsp; A kobject implements a set of<BR>capabilities which are not particularly useful by themselves, but which are<BR>nice to have in other objects.&nbsp; The C language does not allow for the<BR>direct expression of inheritance, so other techniques - such as structure<BR>embedding - must be used.</FONT></P>
<P><FONT class=extract>(As an aside, for those familiar with the kernel linked list implementation,<BR>this is analogous as to how "list_head" structs are rarely useful on<BR>their own, but are invariably found embedded in the larger objects of<BR>interest.)</FONT></P>
<P><FONT class=extract>So, for example, the UIO code in drivers/uio/uio.c has a structure that<BR>defines the memory region associated with a uio device:</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; struct uio_map {<BR>&nbsp;struct kobject kobj;<BR>&nbsp;struct uio_mem *mem;<BR>&nbsp;&nbsp;&nbsp; };</FONT></P>
<P><FONT class=extract>If you have a struct uio_map structure, finding its embedded kobject is<BR>just a matter of using the kobj member.&nbsp; Code that works with kobjects will<BR>often have the opposite problem, however: given a struct kobject pointer,<BR>what is the pointer to the containing structure?&nbsp; You must avoid tricks<BR>(such as assuming that the kobject is at the beginning of the structure)<BR>and, instead, use the container_of() macro, found in &lt;linux/kernel.h&gt;:</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; container_of(pointer, type, member)</FONT></P>
<P><FONT class=extract>where:</FONT></P>
<P><FONT class=extract>&nbsp; * "pointer" is the pointer to the embedded kobject,<BR>&nbsp; * "type" is the type of the containing structure, and<BR>&nbsp; * "member" is the name of the structure field to which "pointer" points.</FONT></P>
<P><FONT class=extract>The return value from container_of() is a pointer to the corresponding<BR>container type. So, for example, a pointer "kp" to a struct kobject<BR>embedded *within* a struct uio_map could be converted to a pointer to the<BR>*containing* uio_map structure with:</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; struct uio_map *u_map = container_of(kp, struct uio_map, kobj);</FONT></P>
<P><FONT class=extract>For convenience, programmers often define a simple macro for "back-casting"<BR>kobject pointers to the containing type.&nbsp; Exactly this happens in the<BR>earlier drivers/uio/uio.c, as you can see here:</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; struct uio_map {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct kobject kobj;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct uio_mem *mem;<BR>&nbsp;&nbsp;&nbsp; };</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; #define to_map(map) container_of(map, struct uio_map, kobj)</FONT></P>
<P><FONT class=extract>where the macro argument "map" is a pointer to the struct kobject in<BR>question.&nbsp; That macro is subsequently invoked with:</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; struct uio_map *map = to_map(kobj);</FONT></P>
<P><BR><FONT class=extract>Initialization of kobjects</FONT></P>
<P><FONT class=extract>Code which creates a kobject must, of course, initialize that object. Some<BR>of the internal fields are setup with a (mandatory) call to kobject_init():</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; void kobject_init(struct kobject *kobj, struct kobj_type *ktype);</FONT></P>
<P><FONT class=extract>The ktype is required for a kobject to be created properly, as every kobject<BR>must have an associated kobj_type.&nbsp; After calling kobject_init(), to<BR>register the kobject with sysfs, the function kobject_add() must be called:</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; int kobject_add(struct kobject *kobj, struct kobject *parent, const char *fmt, ...);</FONT></P>
<P><FONT class=extract>This sets up the parent of the kobject and the name for the kobject<BR>properly.&nbsp; If the kobject is to be associated with a specific kset,<BR>kobj-&gt;kset must be assigned before calling kobject_add().&nbsp; If a kset is<BR>associated with a kobject, then the parent for the kobject can be set to<BR>NULL in the call to kobject_add() and then the kobject's parent will be the<BR>kset itself.</FONT></P>
<P><FONT class=extract>As the name of the kobject is set when it is added to the kernel, the name<BR>of the kobject should never be manipulated directly.&nbsp; If you must change<BR>the name of the kobject, call kobject_rename():</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; int kobject_rename(struct kobject *kobj, const char *new_name);</FONT></P>
<P><FONT class=extract>kobject_rename does not perform any locking or have a solid notion of<BR>what names are valid so the caller must provide their own sanity checking<BR>and serialization.</FONT></P>
<P><FONT class=extract>There is a function called kobject_set_name() but that is legacy cruft and<BR>is being removed.&nbsp; If your code needs to call this function, it is<BR>incorrect and needs to be fixed.</FONT></P>
<P><FONT class=extract>To properly access the name of the kobject, use the function<BR>kobject_name():</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; const char *kobject_name(const struct kobject * kobj);</FONT></P>
<P><FONT class=extract>There is a helper function to both initialize and add the kobject to the<BR>kernel at the same time, called surprisingly enough kobject_init_and_add():</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; int kobject_init_and_add(struct kobject *kobj, struct kobj_type *ktype,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct kobject *parent, const char *fmt, ...);</FONT></P>
<P><FONT class=extract>The arguments are the same as the individual kobject_init() and<BR>kobject_add() functions described above.</FONT></P>
<P><BR><FONT class=extract>Uevents</FONT></P>
<P><FONT class=extract>After a kobject has been registered with the kobject core, you need to<BR>announce to the world that it has been created.&nbsp; This can be done with a<BR>call to kobject_uevent():</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; int kobject_uevent(struct kobject *kobj, enum kobject_action action);</FONT></P>
<P><FONT class=extract>Use the KOBJ_ADD action for when the kobject is first added to the kernel.<BR>This should be done only after any attributes or children of the kobject<BR>have been initialized properly, as userspace will instantly start to look<BR>for them when this call happens.</FONT></P>
<P><FONT class=extract>When the kobject is removed from the kernel (details on how to do that is<BR>below), the uevent for KOBJ_REMOVE will be automatically created by the<BR>kobject core, so the caller does not have to worry about doing that by<BR>hand.</FONT></P>
<P><BR><FONT class=extract>Reference counts</FONT></P>
<P><FONT class=extract>One of the key functions of a kobject is to serve as a reference counter<BR>for the object in which it is embedded. As long as references to the object<BR>exist, the object (and the code which supports it) must continue to exist.<BR>The low-level functions for manipulating a kobject's reference counts are:</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; struct kobject *kobject_get(struct kobject *kobj);<BR>&nbsp;&nbsp;&nbsp; void kobject_put(struct kobject *kobj);</FONT></P>
<P><FONT class=extract>A successful call to kobject_get() will increment the kobject's reference<BR>counter and return the pointer to the kobject.</FONT></P>
<P><FONT class=extract>When a reference is released, the call to kobject_put() will decrement the<BR>reference count and, possibly, free the object. Note that kobject_init()<BR>sets the reference count to one, so the code which sets up the kobject will<BR>need to do a kobject_put() eventually to release that reference.</FONT></P>
<P><FONT class=extract>Because kobjects are dynamic, they must not be declared statically or on<BR>the stack, but instead, always allocated dynamically.&nbsp; Future versions of<BR>the kernel will contain a run-time check for kobjects that are created<BR>statically and will warn the developer of this improper usage.</FONT></P>
<P><FONT class=extract>If all that you want to use a kobject for is to provide a reference counter<BR>for your structure, please use the struct kref instead; a kobject would be<BR>overkill.&nbsp; For more information on how to use struct kref, please see the<BR>file Documentation/kref.txt in the Linux kernel source tree.</FONT></P>
<P><BR><FONT class=extract>Creating "simple" kobjects</FONT></P>
<P><FONT class=extract>Sometimes all that a developer wants is a way to create a simple directory<BR>in the sysfs hierarchy, and not have to mess with the whole complication of<BR>ksets, show and store functions, and other details.&nbsp; This is the one<BR>exception where a single kobject should be created.&nbsp; To create such an<BR>entry, use the function:</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; struct kobject *kobject_create_and_add(char *name, struct kobject *parent);</FONT></P>
<P><FONT class=extract>This function will create a kobject and place it in sysfs in the location<BR>underneath the specified parent kobject.&nbsp; To create simple attributes<BR>associated with this kobject, use:</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; int sysfs_create_file(struct kobject *kobj, struct attribute *attr);<BR>or<BR>&nbsp;&nbsp;&nbsp; int sysfs_create_group(struct kobject *kobj, struct attribute_group *grp);</FONT></P>
<P><FONT class=extract>Both types of attributes used here, with a kobject that has been created<BR>with the kobject_create_and_add(), can be of type kobj_attribute, so no<BR>special custom attribute is needed to be created.</FONT></P>
<P><FONT class=extract>See the example module, samples/kobject/kobject-example.c for an<BR>implementation of a simple kobject and attributes.</FONT></P>
<P>&nbsp;</P>
<P><FONT class=extract>ktypes and release methods</FONT></P>
<P><FONT class=extract>One important thing still missing from the discussion is what happens to a<BR>kobject when its reference count reaches zero. The code which created the<BR>kobject generally does not know when that will happen; if it did, there<BR>would be little point in using a kobject in the first place. Even<BR>predictable object lifecycles become more complicated when sysfs is brought<BR>in as other portions of the kernel can get a reference on any kobject that<BR>is registered in the system.</FONT></P>
<P><FONT class=extract>The end result is that a structure protected by a kobject cannot be freed<BR>before its reference count goes to zero. The reference count is not under<BR>the direct control of the code which created the kobject. So that code must<BR>be notified asynchronously whenever the last reference to one of its<BR>kobjects goes away.</FONT></P>
<P><FONT class=extract>Once you registered your kobject via kobject_add(), you must never use<BR>kfree() to free it directly. The only safe way is to use kobject_put(). It<BR>is good practice to always use kobject_put() after kobject_init() to avoid<BR>errors creeping in.</FONT></P>
<P><FONT class=extract>This notification is done through a kobject's release() method. Usually<BR>such a method has a form like:</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; void my_object_release(struct kobject *kobj)<BR>&nbsp;&nbsp;&nbsp; {<BR>&nbsp;&nbsp;&nbsp; &nbsp;&nbsp;&nbsp;&nbsp; struct my_object *mine = container_of(kobj, struct my_object, kobj);</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp;&nbsp; /* Perform any additional cleanup on this object, then... */<BR>&nbsp;&nbsp;&nbsp;&nbsp; kfree(mine);<BR>&nbsp;&nbsp;&nbsp; }</FONT></P>
<P><FONT class=extract>One important point cannot be overstated: every kobject must have a<BR>release() method, and the kobject must persist (in a consistent state)<BR>until that method is called. If these constraints are not met, the code is<BR>flawed.&nbsp; Note that the kernel will warn you if you forget to provide a<BR>release() method.&nbsp; Do not try to get rid of this warning by providing an<BR>"empty" release function; you will be mocked mercilessly by the kobject<BR>maintainer if you attempt this.</FONT></P>
<P><FONT class=extract>Note, the name of the kobject is available in the release function, but it<BR>must NOT be changed within this callback.&nbsp; Otherwise there will be a memory<BR>leak in the kobject core, which makes people unhappy.</FONT></P>
<P><FONT class=extract>Interestingly, the release() method is not stored in the kobject itself;<BR>instead, it is associated with the ktype. So let us introduce struct<BR>kobj_type:</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; struct kobj_type {<BR>&nbsp;&nbsp;&nbsp;&nbsp; void (*release)(struct kobject *kobj);<BR>&nbsp;&nbsp;&nbsp;&nbsp; const struct sysfs_ops *sysfs_ops;<BR>&nbsp;&nbsp;&nbsp;&nbsp; struct attribute **default_attrs;<BR>&nbsp;&nbsp;&nbsp;&nbsp; const struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *kobj);<BR>&nbsp;&nbsp;&nbsp;&nbsp; const void *(*namespace)(struct kobject *kobj);<BR>&nbsp;&nbsp;&nbsp; };</FONT></P>
<P><FONT class=extract>This structure is used to describe a particular type of kobject (or, more<BR>correctly, of containing object). Every kobject needs to have an associated<BR>kobj_type structure; a pointer to that structure must be specified when you<BR>call kobject_init() or kobject_init_and_add().</FONT></P>
<P><FONT class=extract>The release field in struct kobj_type is, of course, a pointer to the<BR>release() method for this type of kobject. The other two fields (sysfs_ops<BR>and default_attrs) control how objects of this type are represented in<BR>sysfs; they are beyond the scope of this document.</FONT></P>
<P><FONT class=extract>The default_attrs pointer is a list of default attributes that will be<BR>automatically created for any kobject that is registered with this ktype.</FONT></P>
<P><BR><FONT class=extract>ksets</FONT></P>
<P><FONT class=extract>A kset is merely a collection of kobjects that want to be associated with<BR>each other.&nbsp; There is no restriction that they be of the same ktype, but be<BR>very careful if they are not.</FONT></P>
<P><FONT class=extract>A kset serves these functions:</FONT></P>
<P><FONT class=extract>&nbsp;- It serves as a bag containing a group of objects. A kset can be used by<BR>&nbsp;&nbsp; the kernel to track "all block devices" or "all PCI device drivers."</FONT></P>
<P><FONT class=extract>&nbsp;- A kset is also a subdirectory in sysfs, where the associated kobjects<BR>&nbsp;&nbsp; with the kset can show up.&nbsp; Every kset contains a kobject which can be<BR>&nbsp;&nbsp; set up to be the parent of other kobjects; the top-level directories of<BR>&nbsp;&nbsp; the sysfs hierarchy are constructed in this way.</FONT></P>
<P><FONT class=extract>&nbsp;- Ksets can support the "hotplugging" of kobjects and influence how<BR>&nbsp;&nbsp; uevent events are reported to user space.</FONT></P>
<P><FONT class=extract>In object-oriented terms, "kset" is the top-level container class; ksets<BR>contain their own kobject, but that kobject is managed by the kset code and<BR>should not be manipulated by any other user.</FONT></P>
<P><FONT class=extract>A kset keeps its children in a standard kernel linked list.&nbsp; Kobjects point<BR>back to their containing kset via their kset field. In almost all cases,<BR>the kobjects belonging to a kset have that kset (or, strictly, its embedded<BR>kobject) in their parent.</FONT></P>
<P><FONT class=extract>As a kset contains a kobject within it, it should always be dynamically<BR>created and never declared statically or on the stack.&nbsp; To create a new<BR>kset use:<BR>&nbsp; struct kset *kset_create_and_add(const char *name,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct kset_uevent_ops *u,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct kobject *parent);</FONT></P>
<P><FONT class=extract>When you are finished with the kset, call:<BR>&nbsp; void kset_unregister(struct kset *kset);<BR>to destroy it.</FONT></P>
<P><FONT class=extract>An example of using a kset can be seen in the<BR>samples/kobject/kset-example.c file in the kernel tree.</FONT></P>
<P><FONT class=extract>If a kset wishes to control the uevent operations of the kobjects<BR>associated with it, it can use the struct kset_uevent_ops to handle it:</FONT></P>
<P><FONT class=extract>struct kset_uevent_ops {<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int (*filter)(struct kset *kset, struct kobject *kobj);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const char *(*name)(struct kset *kset, struct kobject *kobj);<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int (*uevent)(struct kset *kset, struct kobject *kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct kobj_uevent_env *env);<BR>};</FONT></P>
<P><BR><FONT class=extract>The filter function allows a kset to prevent a uevent from being emitted to<BR>userspace for a specific kobject.&nbsp; If the function returns 0, the uevent<BR>will not be emitted.</FONT></P>
<P><FONT class=extract>The name function will be called to override the default name of the kset<BR>that the uevent sends to userspace.&nbsp; By default, the name will be the same<BR>as the kset itself, but this function, if present, can override that name.</FONT></P>
<P><FONT class=extract>The uevent function will be called when the uevent is about to be sent to<BR>userspace to allow more environment variables to be added to the uevent.</FONT></P>
<P><FONT class=extract>One might ask how, exactly, a kobject is added to a kset, given that no<BR>functions which perform that function have been presented.&nbsp; The answer is<BR>that this task is handled by kobject_add().&nbsp; When a kobject is passed to<BR>kobject_add(), its kset member should point to the kset to which the<BR>kobject will belong.&nbsp; kobject_add() will handle the rest.</FONT></P>
<P><FONT class=extract>If the kobject belonging to a kset has no parent kobject set, it will be<BR>added to the kset's directory.&nbsp; Not all members of a kset do necessarily<BR>live in the kset directory.&nbsp; If an explicit parent kobject is assigned<BR>before the kobject is added, the kobject is registered with the kset, but<BR>added below the parent kobject.</FONT></P>
<P><BR><FONT class=extract>Kobject removal</FONT></P>
<P><FONT class=extract>After a kobject has been registered with the kobject core successfully, it<BR>must be cleaned up when the code is finished with it.&nbsp; To do that, call<BR>kobject_put().&nbsp; By doing this, the kobject core will automatically clean up<BR>all of the memory allocated by this kobject.&nbsp; If a KOBJ_ADD uevent has been<BR>sent for the object, a corresponding KOBJ_REMOVE uevent will be sent, and<BR>any other sysfs housekeeping will be handled for the caller properly.</FONT></P>
<P><FONT class=extract>If you need to do a two-stage delete of the kobject (say you are not<BR>allowed to sleep when you need to destroy the object), then call<BR>kobject_del() which will unregister the kobject from sysfs.&nbsp; This makes the<BR>kobject "invisible", but it is not cleaned up, and the reference count of<BR>the object is still the same.&nbsp; At a later time call kobject_put() to finish<BR>the cleanup of the memory associated with the kobject.</FONT></P>
<P><FONT class=extract>kobject_del() can be used to drop the reference to the parent object, if<BR>circular references are constructed.&nbsp; It is valid in some cases, that a<BR>parent objects references a child.&nbsp; Circular references _must_ be broken<BR>with an explicit call to kobject_del(), so that a release functions will be<BR>called, and the objects in the former circle release each other.</FONT></P>
<P><BR>Example code to copy from</P>
<P>For a more complete example of using ksets and kobjects properly, see the<BR>example programs samples/kobject/{kobject-example.c,kset-example.c},<BR>which will be built as loadable modules if you select CONFIG_SAMPLE_KOBJECT.