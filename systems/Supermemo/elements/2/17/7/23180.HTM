<H3 id=-100000 class=docSection1Title>Kernel Hacking Config Options</H3>
<P class=docText><A name=iddle1557></A><A name=iddle1559></A><A name=iddle1560></A><A name=iddle1561></A><A name=iddle1562></A><A name=iddle1563></A><A name=iddle1564></A><A name=iddle1565></A><A name=iddle1567></A><A name=iddle1574></A><A name="Several options"></A>Several options exist under <SPAN class=docEmphasis>Kernel hacking</SPAN><A name="kernel configuration"></A> in the kernel configuration menu that can emit valuable debug information. If you enable an option, corresponding debug code gets compiled when you build the kernel.<SUP class=docFootnote><A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch21lev1sec9.html#ch21fn09">[9]</A></SUP> Here are a few examples:</P>
<BLOCKQUOTE>
<P class=docFootnote><SUP><A name=ch21fn09>[9]</A></SUP><A name="are architecture"></A> Some kernel hacking options are architecture-dependent.</P></BLOCKQUOTE><A name=ch21pro06></A>
<TABLE class=docText border=0>
<TBODY>
<TR>
<TD vAlign=top width=25>
<DIV class=docText><B>1. </B></DIV></TD>
<TD>
<DIV class=docText><SPAN class=docEmphasis>Show Timing information on printks</SPAN> (<TT>CONFIG_PRINTK_TIME</TT>) adds timing instrumentation to <TT>printk()</TT> output, so you can use <TT>printk</TT>s as checkpoints for measuring execution times and identifying slow code regions.<BR><BR></DIV></TD></TR>
<TR>
<TD vAlign=top width=25>
<DIV class=docText><B>2. </B></DIV></TD>
<TD>
<DIV class=docText>Using freed memory results in memory poisoning. <SPAN class=docEmphasis>Debug slab memory allocations</SPAN> (<TT>CONFIG_DEBUG_SLAB</TT>) helps you detect such problems.<BR><BR></DIV></TD></TR>
<TR>
<TD vAlign=top width=25>
<DIV class=docText><B>3. </B></DIV></TD>
<TD>
<DIV class=docText><SPAN class=docEmphasis>Spinlock and rw-lock debugging: basic checks</SPAN> (<TT>CONFIG_DEBUG_SPINLOCK</TT>) finds lock-related problems such as uninitialized spinlock usage and helps catch code that is not SMP-safe.<BR><BR></DIV></TD></TR>
<TR>
<TD vAlign=top width=25>
<DIV class=docText><B>4. </B></DIV></TD>
<TD>
<DIV class=docText>You have already worked with <SPAN class=docEmphasis>Magic SysRq key</SPAN>(<TT>CONFIG_MAGIC_SYSRQ</TT>) when you learned to use kdump. If you turn this on, you will have some avenues left even if the kernel crashes during debugging. For example, pressing Alt-Sysrq-t produces a dump of current tasks, whereas Alt-Sysrq-p prints the contents of processor registers.<BR><BR></DIV></TD></TR>
<TR>
<TD vAlign=top width=25>
<DIV class=docText><B>5. </B></DIV></TD>
<TD>
<DIV class=docText><SPAN class=docEmphasis>Detect Soft Lockups</SPAN> (<TT>CONFIG_DETECT_SOFTLOCKUP</TT>) utilizes the services of a watchdog to detect tight loops in kernel code that last for more than 10 seconds. We looked at this when we analyzed a kernel hang using kdump. Note that hardware lockups cannot be found this way. For that, use the services of a Non-Maskable Interrupt (NMI)-watchdog if your platform supports it.<BR><BR></DIV></TD></TR>
<TR>
<TD vAlign=top width=25>
<DIV class=docText><B>6. </B></DIV></TD>
<TD>
<DIV class=docText>If you enable <TT>CONFIG_DEBUG_SLAB</TT>, <TT>CONFIG_DEBUG_HIMEM</TT>, or <TT>CONFIG_DEBUG_PAGE_ALLOC</TT> while configuring your kernel, additional error-checking code gets compiled that help debug problems related to memory management.<BR><BR></DIV></TD></TR>
<TR>
<TD vAlign=top width=25>
<DIV class=docText><B>7. </B></DIV></TD>
<TD>
<DIV class=docText><SPAN class=docEmphasis>Check for stack overflows</SPAN> (<TT>CONFIG_DEBUG_STACKOVERFLOW</TT>) adds code to emit warnings if the available stack space falls below a threshold. <SPAN class=docEmphasis>Stack utilization instrumentation</SPAN> (<TT>CONFIG_DEBUG_STACK_USAGE</TT>) adds stack space instrumentation to the magic Sysrq key output. Another related option, <TT>CONFIG_4KSTACKS</TT>, lets you set the kernel stack size to 4KB rather than 8KB.<BR><BR></DIV></TD></TR>
<TR>
<TD></TD>
<TD></TD></TR>
<TR>
<TD vAlign=top width=25>
<DIV class=docText><B>8. </B></DIV></TD>
<TD>
<DIV class=docText><A name=iddle1558></A><A name=iddle1731></A><A name=iddle4247></A><SPAN class=docEmphasis>Verbose BUG() reporting</SPAN> <TT>(</TT><TT>CONFIG_DEBUG_BUGVERBOSE)</TT> produces extra debug information when any kernel code invokes <TT>BUG()</TT>, assuming that you have <TT>CONFIG_BUG</TT> turned on during kernel configuration.<BR><BR></DIV></TD></TR></TBODY></TABLE>
<P class=docText><A name="live outside"></A>Some debug options live outside the <SPAN class=docEmphasis>Kernel hacking</SPAN> submenu, too. For example, we enabled <TT>CONFIG_KALLSYMS</TT><A name="to kprobe"></A> in this chapter to debug an "oops" message using gdb and to kprobe a kernel module. This option lives under <SPAN class=docEmphasis>General setup</SPAN> <IMG alt="rightwards double arrow" src="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/images/U2192.GIF"> <SPAN class=docEmphasis><A name="small systems"></A>Configure Standard Kernel Features (for small systems)</SPAN> in the configuration menu.</P>
<P class=docText><A name="increased footprint"></A>Kernel hacking options result in overhead and increased footprint, so don't leave them on in production-level kernels.