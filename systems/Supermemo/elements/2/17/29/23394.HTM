# Documentation/leds/ledtrig-transient.txt
<P></P>
<P>LED Transient Trigger<BR>=====================</P>
<P></P>
<P>The leds timer trigger does not currently have an interface to activate<BR>a one shot timer. The current support allows for setting two timers, one for<BR>specifying how long a state to be on, and the second for how long the state<BR>to be off. The delay_on value specifies the time period an LED should stay<BR>in on state, followed by a delay_off value that specifies how long the LED<BR>should stay in off state. The on and off cycle repeats until the trigger<BR>gets deactivated. There is no provision for one time activation to implement<BR>features that require an on or off state to be held just once and then stay in<BR>the original state forever.</P>
<P>Without one shot timer interface, user space can still use timer trigger to<BR>set a timer to hold a state, however when user space application crashes or<BR>goes away without deactivating the timer, the hardware will be left in that<BR>state permanently.</P>
<P>As a specific example of this use-case, let's look at vibrate feature on<BR>phones. Vibrate function on phones is implemented using PWM pins on SoC or<BR>PMIC. There is a need to activate one shot timer to control the vibrate<BR>feature, to prevent user space crashes leaving the phone in vibrate mode<BR>permanently causing the battery to drain.</P>
<P>Transient trigger addresses the need for one shot timer activation. The<BR>transient trigger can be enabled and disabled just like the other leds<BR>triggers.</P>
<P>When an led class device driver registers itself, it can specify all leds<BR>triggers it supports and a default trigger. During registration, activation<BR>routine for the default trigger gets called. During registration of an led<BR>class device, the LED state does not change.</P>
<P>When the driver unregisters, deactivation routine for the currently active<BR>trigger will be called, and LED state is changed to LED_OFF.</P>
<P>Driver suspend changes the LED state to LED_OFF and resume doesn't change<BR>the state. Please note that there is no explicit interaction between the<BR>suspend and resume actions and the currently enabled trigger. LED state<BR>changes are suspended while the driver is in suspend state. Any timers<BR>that are active at the time driver gets suspended, continue to run, without<BR>being able to actually change the LED state. Once driver is resumed, triggers<BR>start functioning again.</P>
<P>LED state changes are controlled using brightness which is a common led<BR>class device property. When brightness is set to 0 from user space via<BR>echo 0 &gt; brightness, it will result in deactivating the current trigger.</P>
<P>Transient trigger uses standard register and unregister interfaces. During<BR>trigger registration, for each led class device that specifies this trigger<BR>as its default trigger, trigger activation routine will get called. During<BR>registration, the LED state does not change, unless there is another trigger<BR>active, in which case LED state changes to LED_OFF.</P>
<P>During trigger unregistration, LED state gets changed to LED_OFF.</P>
<P>Transient trigger activation routine doesn't change the LED state. It<BR>creates its properties and does its initialization. Transient trigger<BR>deactivation routine, will cancel any timer that is active before it cleans<BR>up and removes the properties it created. It will restore the LED state to<BR>non-transient state. When driver gets suspended, irrespective of the transient<BR>state, the LED state changes to LED_OFF.</P>
<P>Transient trigger can be enabled and disabled from user space on led class<BR>devices, that support this trigger as shown below:</P>
<P>echo transient &gt; trigger<BR>echo none &gt; trigger</P>
<P>NOTE: Add a new property trigger state to control the state.</P>
<P>This trigger exports three properties, activate, state, and duration. When<BR>transient trigger is activated these properties are set to default values.</P>
<P>- duration allows setting timer value in msecs. The initial value is 0.<BR>- activate allows activating and deactivating the timer specified by<BR>&nbsp; duration as needed. The initial and default value is 0.&nbsp; This will allow<BR>&nbsp; duration to be set after trigger activation.<BR>- state allows user to specify a transient state to be held for the specified<BR>&nbsp; duration.</P>
<P>&nbsp;activate - one shot timer activate mechanism.<BR>&nbsp;&nbsp;1 when activated, 0 when deactivated.<BR>&nbsp;&nbsp;default value is zero when transient trigger is enabled,<BR>&nbsp;&nbsp;to allow duration to be set.</P>
<P>&nbsp;&nbsp;activate state indicates a timer with a value of specified<BR>&nbsp;&nbsp;duration running.<BR>&nbsp;&nbsp;deactivated state indicates that there is no active timer<BR>&nbsp;&nbsp;running.</P>
<P>&nbsp;duration - one shot timer value. When activate is set, duration value<BR>&nbsp;&nbsp;is used to start a timer that runs once. This value doesn't<BR>&nbsp;&nbsp;get changed by the trigger unless user does a set via<BR>&nbsp;&nbsp;echo new_value &gt; duration</P>
<P>&nbsp;state - transient state to be held. It has two values 0 or 1. 0 maps<BR>&nbsp;&nbsp;to LED_OFF and 1 maps to LED_FULL. The specified state is<BR>&nbsp;&nbsp;held for the duration of the one shot timer and then the<BR>&nbsp;&nbsp;state gets changed to the non-transient state which is the<BR>&nbsp;&nbsp;inverse of transient state.<BR>&nbsp;&nbsp;If state = LED_FULL, when the timer runs out the state will<BR>&nbsp;&nbsp;go back to LED_OFF.<BR>&nbsp;&nbsp;If state = LED_OFF, when the timer runs out the state will<BR>&nbsp;&nbsp;go back to LED_FULL.<BR>&nbsp;&nbsp;Please note that current LED state is not checked prior to<BR>&nbsp;&nbsp;changing the state to the specified state.<BR>&nbsp;&nbsp;Driver could map these values to inverted depending on the<BR>&nbsp;&nbsp;default states it defines for the LED in its brightness_set()<BR>&nbsp;&nbsp;interface which is called from the led brightness_set()<BR>&nbsp;&nbsp;interfaces to control the LED state.</P>
<P>When timer expires activate goes back to deactivated state, duration is left<BR>at the set value to be used when activate is set at a future time. This will<BR>allow user app to set the time once and activate it to run it once for the<BR>specified value as needed. When timer expires, state is restored to the<BR>non-transient state which is the inverse of the transient state.</P>
<P>&nbsp;echo 1 &gt; activate - starts timer = duration when duration is not 0.<BR>&nbsp;echo 0 &gt; activate - cancels currently running timer.<BR>&nbsp;echo n &gt; duration - stores timer value to be used upon next<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; activate. Currently active timer if<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; any, continues to run for the specified time.<BR>&nbsp;echo 0 &gt; duration - stores timer value to be used upon next<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; activate. Currently active timer if any,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; continues to run for the specified time.<BR>&nbsp;echo 1 &gt; state&nbsp;&nbsp;&nbsp; - stores desired transient state LED_FULL to be<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; held for the specified duration.<BR>&nbsp;echo 0 &gt; state&nbsp;&nbsp;&nbsp; - stores desired transient state LED_OFF to be<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; held for the specified duration.</P>
<P>What is not supported:<BR>======================<BR>- Timer activation is one shot and extending and/or shortening the timer<BR>&nbsp; is not supported.</P>
<P>Example use-case 1:<BR>&nbsp;echo transient &gt; trigger<BR>&nbsp;echo n &gt; duration<BR>&nbsp;echo 1 &gt; state<BR>repeat the following step as needed:<BR>&nbsp;echo 1 &gt; activate - start timer = duration to run once<BR>&nbsp;echo 1 &gt; activate - start timer = duration to run once<BR>&nbsp;echo none &gt; trigger</P>
<P>This trigger is intended to be used for for the following example use cases:<BR>&nbsp;- Control of vibrate (phones, tablets etc.) hardware by user space app.<BR>&nbsp;- Use of LED by user space app as activity indicator.<BR>&nbsp;- Use of LED by user space app as a kind of watchdog indicator -- as<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; long as the app is alive, it can keep the LED illuminated, if it dies<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; the LED will be extinguished automatically.<BR>&nbsp;- Use by any user space app that needs a transient GPIO output.