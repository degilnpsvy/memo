<H3 id=title-IDARXOWC class=docSection1Title>13.2. Data Display Debugger</H3>
<P class=docText>The Data Display Debugger (DDD) is a graphical front end to GDB and other command line debuggers. DDD has many advanced features beyond simply viewing source code and stepping through a debug session. <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch13lev1sec2.html#ch13fig01">Figure 13-1</A> is a screen shot of the DDD's main screen.</P>
<P class=docText></P><A name=ch13fig01></A>
<P>
<CENTER>
<H5 class=docFigureTitle>Figure 13-1. Data Display Debugger</H5>
<P class=docText>
<DIV class=v1><A href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/images/13elp01_alt.jpg" target=_self>[View full size image]</A></DIV><IMG border=0 alt="" src="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/images/13elp01.jpg" width=500 height=591>
<P></P></CENTER>
<P></P><BR>
<P class=docText>DDD is invoked as follows:</P>
<DIV class=docText><PRE>$ <SPAN class=docEmphStrong>ddd --debugger xscale_be-gdb webs</SPAN></PRE></DIV><BR>
<P class=docText>Without the <TT>--debugger</TT> flag, DDD would attempt to invoke the native GDB on your development host, which is not what you want if you are planning to debug an application on your target system. The second argument on the DDD command line is the program you will be debugging. See the man page for DDD for additional details.</P>
<P class=docText>Using the command tool as shown in <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch13lev1sec2.html#ch13fig01">Figure 13-1</A>, you can step through your program. You can set breakpoints either graphically or via the GDB console window at the bottom of the DDD screen. For target debugging, you must first connect your debugger to the target system as we did in <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch13lev1sec1.html#ch13list04">Listing 13-4</A>, using the <TT>target</TT> command. This command is issued in the GDB window of the <TT>ddd</TT> main screen.</P>
<P class=docText><A name=iddle1176></A><A name=iddle1270></A><A name=iddle1271></A>When you are connected to the target, you can execute similar commands to the sequence described in the previous example to isolate the program failure. <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch13lev1sec2.html#ch13fig02">Figure 13-2</A> shows the DDD display during the later phase of this debugging session.</P><A name=ch13fig02></A>
<P>
<CENTER>
<H5 class=docFigureTitle>Figure 13-2. Debug session in DDD</H5>
<P class=docText>
<DIV class=v1><A href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/images/13elp02_alt.jpg" target=_self>[View full size image]</A></DIV><IMG border=0 alt="" src="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/images/13elp02.jpg" width=500 height=405>
<P></P></CENTER>
<P></P><BR>
<P class=docText>Notice that in <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch13lev1sec2.html#ch13fig02">Figure 13-2</A> we have initiated the display of some important program variables that can help us narrow the cause of the segmentation fault. We can watch these variables as we step through the program using the command tool shown in the figure.</P>
<P class=docText><TT>DDD</TT> is a powerful graphical front end for GDB. It is relatively easy to use and widely supported for many development hosts. Consult <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch13lev1sec7.html#ch13lev2sec22">Section 13.7.1</A> at the end of this chapter for a link to the GNU DDD documentation.