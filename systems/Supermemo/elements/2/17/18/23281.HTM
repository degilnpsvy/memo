<H3 id=title-IDAHROWC class=docSection1Title>11.3. BusyBox Operation</H3>
<P class=docText>When you build BusyBox, you end up with a binary called, you guessed it, <TT>busybox</TT>. BusyBox can be invoked from the binary name itself, but it is more usually launched via a <SPAN class=docEmphasis>symlink</SPAN>. When BusyBox is invoked without command line parameters, it produces a list of the functions that were enabled via the configuration. <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch11lev1sec3.html#ch11list03">Listing 11-3</A> shows such an output (it has been formatted slightly to fit the page width).</P><A name=ch11list03></A>
<H5 id=title-IDAASOWC class=docExampleTitle>Listing 11-3. BusyBox Usage</H5>
<P>
<TABLE cellSpacing=0 cellPadding=5 width="90%" border=1>
<TBODY>
<TR>
<TD><PRE>root@coyote # <SPAN class=docEmphStrong>./busybox</SPAN>
BusyBox v1.01 (2005.12.03-18:00+0000) multi-call binary

Usage: busybox [function] [arguments]...
   or: [function] [arguments]...

  BusyBox is a multi-call binary that combines many common Unix
  utilities into a single executable. Most people will create a
  link to busybox for each function they wish to use and BusyBox
  will act like whatever it was invoked as!

 Currently defined functions:
  [, ash, basename, bunzip2, busybox, bzcat, cat, chgrp, chmod,
   chown, chroot, chvt, clear, cmp, cp, cut, date, dd, deallocvt,
   df, dirname, dmesg, du, echo, egrep, env, expr, false, fgrep,
   find, free, grep, gunzip, gzip, halt, head, hexdump, hostname,
   id, ifconfig, init, install, kill, killall, klogd, linuxrc, ln,
   logger, ls, mkdir, mknod, mktemp, more, mount, mv, openvt, pidof,
   ping, pivot_root, poweroff, ps, pwd, readlink, reboot, reset,
   rm, rmdir, route, sed, sh, sleep, sort, strings, swapoff, swapon,
   sync, syslogd, tail, tar, tee, test, time, touch, tr, true, tty,
   umount, uname, uniq, unzip, uptime, usleep, vi, wc, wget, which,
   whoami, xargs, yes, zcat</PRE><BR></TD></TR></TBODY></TABLE></P>
<P class=docText><A name=iddle1857></A>From <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch11lev1sec3.html#ch11list03">Listing 11-3</A>, you can see the list of functions that are enabled in this BusyBox build. They are listed in alphabetical order from <TT>ash</TT> (a shell optimized for small memory footprint) to <TT>zcat</TT>, a utility used to decompress the contents of a compressed file. This is the default set of utilities enabled in this particular BusyBox snapshot.</P>
<P class=docText>To invoke a particular function, execute <TT>busybox</TT> with one of the defined functions passed on the command line. Thus, to display a listing of files in the current directory, execute this command:</P>
<DIV class=docText><PRE>[root@coyote]# <SPAN class=docEmphStrong>./busybox ls</SPAN></PRE></DIV><BR>
<P class=docText>Another important message from the BusyBox usage message in <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch11lev1sec3.html#ch11list03">Listing 11-3</A> is the short description of the program. It describes BusyBox as a multicall binary, combining many common utilities into a single executable. This is the purpose of the symlinks mentioned earlier. BusyBox was intended to be invoked by a symlink named for the function it will perform. This removes the burden of having to type a two-word command to invoke a given function, and it presents the user with a set of familiar commands for the similarly named utilities. <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch11lev1sec3.html#ch11list04">Listings 11-4</A> and <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch11lev1sec3.html#ch11list05">11-5</A> should make this clear.</P><A name=ch11list04></A>
<H5 id=title-IDATUOWC class=docExampleTitle>Listing 11-4. BusyBox Symlink StructureTop Level</H5>
<P>
<TABLE cellSpacing=0 cellPadding=5 width="90%" border=1>
<TBODY>
<TR>
<TD><PRE>[root@coyote]$ <SPAN class=docEmphStrong>ls -l /</SPAN>
total 12
drwxrwxr-x  2 root  root 4096 Dec  3 13:38 bin
lrwxrwxrwx  1 root  root   11 Dec  3 13:38 linuxrc -&gt; bin/busybox
drwxrwxr-x  2 root  root 4096 Dec  3 13:38 sbin
drwxrwxr-x  4 root  root 4096 Dec  3 13:38 usr</PRE><BR></TD></TR></TBODY></TABLE></P>
<P class=docText><A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch11lev1sec3.html#ch11list04">Listing 11-4</A> shows the target directory structure as built by the BusyBox package via the <TT>make install</TT> command. The executable <TT>busybox</TT> file is found in the <TT>/bin</TT> directory, and symlinks have been populated throughout the rest of the structure pointing back to <TT>/bin/busybox</TT>. <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch11lev1sec3.html#ch11list05">Listing 11-5</A> expands on the directory structure of <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch11lev1sec3.html#ch11list04">Listing 11-4</A>.</P>
<P class=docText></P><A name=ch11list05></A>
<H5 id=title-IDAHWOWC class=docExampleTitle>Listing 11-5. BusyBox Symlink StructureTree Detail</H5>
<P>
<TABLE cellSpacing=0 cellPadding=5 width="90%" border=1>
<TBODY>
<TR>
<TD><PRE>[root@coyote]$ <SPAN class=docEmphStrong>tree</SPAN>
.
|-- bin
|   |-- ash -&gt; busybox
|   |-- busybox
|   |-- cat -&gt; busybox
|   |-- cp -&gt; busybox
|   |-- ...
|   '-- zcat -&gt; busybox
|-- linuxrc -&gt; bin/busybox
|-- sbin
|   |-- halt -&gt; ../bin/busybox
|   |-- ifconfig -&gt; ../bin/busybox
|   |-- init -&gt; ../bin/busybox
|   |-- klogd -&gt; ../bin/busybox
|   |-- ...
|   '-- syslogd -&gt; ../bin/busybox
'-- usr
    |-- bin
    |   |-- [ -&gt; ../../bin/busybox
    |   |-- basename -&gt; ../../bin/busybox
    |-- ...
    |   |-- xargs -&gt; ../../bin/busybox
    |   '-- yes -&gt; ../../bin/busybox
    '-- sbin
        '-- chroot -&gt; ../../bin/busybox</PRE><BR></TD></TR></TBODY></TABLE></P>
<P class=docText><A name=iddle1168></A><A name=iddle1415></A><A name=iddle1858></A>The output of <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch11lev1sec3.html#ch11list05">Listing 11-5</A> has been significantly truncated for readability and to avoid a three-page listing. Each line containing an ellipsis (<TT>...</TT>) indicates that this listing has been pruned to show only the first few and last few entries of that given directory. In actuality, more than 100 symlinks can be populated in these directories, depending on what functionality you have enabled using the BusyBox configuration utility.</P>
<P class=docText>Notice the <TT>busybox</TT> executable itself, the second entry from the <TT>/bin</TT> directory. Also in the <TT>/bin</TT> directory are symlinks pointing back to <TT>busybox</TT> for <TT>ash</TT>, <TT>cat</TT>, <TT>cp</TT>... all the way to <TT>zcat</TT>. Again, the entries between <TT>cp</TT> and <TT>zcat</TT> have been omitted from this listing for readability. With this symlink structure, the user simply enters the actual name of the utility to invoke its functionality. For example, to configure a network interface using the <TT>busybox ifconfig</TT> utility, the user might enter a command similar to this:</P>
<DIV class=docText><PRE>$ <SPAN class=docEmphStrong>ifconfig eth1 192.168.1.14</SPAN></PRE></DIV><BR>
<P class=docText><A name=iddle1169></A><A name=iddle1171></A><A name=iddle1609></A><A name=iddle1610></A><A name=iddle2378></A>This would invoke the <TT>busybox</TT> executable through the <TT>ifconfig</TT> symlink. BusyBox examines how it was calledthat is, it reads <TT>argv[0]</TT> to determine what functionality is executed.</P><A name=ch11lev2sec3></A>
<H4 id=title-IDAC1OWC class=docSection2Title>11.3.1. BusyBox Init</H4>
<P class=docText>Notice the symlink in <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch11lev1sec3.html#ch11list05">Listing 11-5</A> called <TT>init</TT>. In <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch11lev1sec3.html#ch11list06">Chapter 6</A> "System Initialization," you learned about the <TT>init</TT> program and its role in system initialization. Recall that the kernel attempts to execute a program called <TT>/sbin/init</TT> as the last step in kernel initialization. There is no reason why BusyBox can't emulate the <TT>init</TT> functionality, and that's exactly how the system illustrated by <TT><A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch11lev1sec3.html#ch11list05">Listing 11-5</A></TT> is configured. BusyBox handles the <TT>init</TT> functionality.</P>
<P class=docText>BusyBox handles system initialization differently from standard System V init. A Linux system using the System V (SysV) initialization as described in <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch11lev1sec3.html#ch11list06">Chapter 6</A> requires an <TT>inittab</TT> file accessible in the <TT>/etc</TT> directory. BusyBox also reads an <TT>inittab</TT> file, but the syntax of the <TT>inittab</TT> file is different. In general, you should not need to use an <TT>inittab</TT> if you are using BusyBox. I agree with the BusyBox man page: If you need run levels, use System V initialization.<SUP class=docFootnote><A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch11lev1sec3.html#ch11fn02">[2]</A></SUP></P>
<BLOCKQUOTE>
<P class=docFootnote><SUP><A name=ch11fn02>[2]</A></SUP> We covered the details of System V initialization in <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch06.html#ch06">Chapter 6</A>.</P></BLOCKQUOTE>
<P class=docText>Let's see what this looks like on an embedded system. We have created a small root file system based on BusyBox. We configured BusyBox for static linking, eliminating the need for any shared libraries. <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch11lev1sec3.html#ch11list06">Listing 11-6</A> contains a tree listing of this root file system. We built this small file system using the steps outlined in <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch09.html#ch09">Chapter 9</A>, "File Systems," <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch09lev1sec10.html#ch09lev1sec10">Section 9.10</A>, "Building a Simple File System." We do not detail the procedure again here. The files in our simple file system are those shown in <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch11lev1sec3.html#ch11list06">Listing 11-6</A>.</P>
<P class=docText></P><A name=ch11list06></A>
<H5 id=title-IDAM4OWC class=docExampleTitle>Listing 11-6. Minimal BusyBox Root File System</H5>
<P>
<TABLE cellSpacing=0 cellPadding=5 width="90%" border=1>
<TBODY>
<TR>
<TD><PRE>$ <SPAN class=docEmphStrong>tree</SPAN>
.
|-- bin
|   |-- busybox
|   |-- cat -&gt; busybox
|   |-- dmesg -&gt; busybox
|   |-- echo -&gt; busybox
|   |-- hostname -&gt; busybox
|   |-- ls -&gt; busybox
|   |-- ps -&gt; busybox
|   |-- pwd -&gt; busybox
|   '-- sh -&gt; busybox
|-- dev
|   '-- console
|-- etc
'-- proc
4 directories, 10 files</PRE><BR></TD></TR></TBODY></TABLE></P>
<P class=docText><A name=iddle1854></A><A name=iddle1974></A>This BusyBox-based root file system occupies little more than the size needed for <TT>busybox</TT> itself. In this configuration, using static linking and supporting nearly 100 utilities, the BusyBox executable came in at less than 1MB:</P>
<DIV class=docText><PRE># <SPAN class=docEmphStrong>ls -l /bin/busybox</SPAN>
-rwxr-xr-x    1 root   root    824724 Dec  3  2005 /bin/busybox</PRE></DIV><BR>
<P class=docText>Now let's see how this system behaves. <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch11lev1sec3.html#ch11list07">Listing 11-7</A> captures the console output on power-up on this BusyBox-based embedded system.</P><A name=ch11list07></A>
<H5 id=title-IDATIPWC class=docExampleTitle>Listing 11-7. BusyBox Default Startup</H5>
<P>
<TABLE cellSpacing=0 cellPadding=5 width="90%" border=1>
<TBODY>
<TR>
<TD><PRE>...
Looking up port of RPC 100003/2 on 192.168.1.9
Looking up port of RPC 100005/1 on 192.168.1.9
VFS: Mounted root (nfs filesystem).
Freeing init memory: 96K
Bummer, could not run '/etc/init.d/rcS': No such file or directory

Please press Enter to activate this console.


BusyBox v1.01 (2005.12.03-19:09+0000) Built-in shell (ash)
Enter 'help' for a list of built-in commands.

-sh: can't access tty; job control turned off
/ #</PRE><BR></TD></TR></TBODY></TABLE></P>
<P class=docText><A name=iddle1167></A><A name=iddle2304></A>The example of <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch11lev1sec3.html#ch11list07">Listing 11-7</A> was run on an embedded board configured for NFS root mount. We export a directory on our workstation that contains the simple file system image detailed in <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch11lev1sec3.html#ch11list06">Listing 11-6</A>. As oneof the final steps in the boot process, the Linux kernel on our target board mounts a root file system via NFS. When the kernel attempts to execute <TT>/sbin/init</TT>, it fails because there is no <TT>/sbin/init</TT> on our file system. However, as we have seen, the kernel also attempts to execute <TT>/bin/sh.</TT> In our BusyBox-configured target, this succeeds, and <TT>busybox</TT> is launched via the symlink <TT>/bin/sh</TT> on our root file system.</P>
<P class=docText>The first thing BusyBox displays is the complaint that it can't find <TT>/etc/init.d/rcS</TT>. This is the default initialization script that BusyBox searches for. Instead of using <TT>inittab</TT>, this is the preferred method to initialize an embedded system based on BusyBox.</P>
<P class=docText>When it has completed initialization, BusyBox displays a prompt asking the user to press Enter to activate a console. When it detects the Enter key, it executes an ash shell session waiting for user input. The final message about job control is a result of the fact that we are creating the system console on a serial terminal. The Linux kernel contains code to disable job control if it detects the console on a serial terminal.</P>
<P class=docText>This example produced a working system, with nearly 100 Linux utilities available, including core utilities, file utilities, network support, and a reasonably capable shell. You can see that this simple package provides a powerful platform upon which to build your own system applications. Of course, it should be noted that without any support for <TT>libc</TT> and other system libraries, you would face a formidable task implementing your applications. You would have to provide support for all the usual system calls and other library functions that a typical C program relies on. Alternatively, you could statically link your applications against the libraries it depends on, but if you have more than a couple applications using this method, your applications will likely exceed the combined size of linking dynamically and having the shared libraries on your target.</P><A name=ch11lev2sec4></A>
<H4 id=title-IDA3KPWC class=docSection2Title>11.3.2. Example rcS Initialization Script</H4>
<P class=docText>Before BusyBox spawns an interactive shell, it tries to execute commands from a script called <TT>/etc/init.d/rcS</TT>, as shown in <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch11lev1sec3.html#ch11list07">Listing 11-7</A>. It is here where your applications come to life in a BusyBox system. A simple <TT>rcS</TT> initialization script is provided in <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch11lev1sec3.html#ch11list08">Listing 11-8</A>.</P>
<P class=docText></P><A name=ch11list08></A>
<H5 id=title-IDA4LPWC class=docExampleTitle>Listing 11-8. Simple <TT>rcS</TT> BusyBox Startup Script</H5>
<P>
<TABLE cellSpacing=0 cellPadding=5 width="90%" border=1>
<TBODY>
<TR>
<TD><PRE>#!/bin/sh

echo "Mounting proc"
mount -t proc /proc /proc

echo "Starting system loggers"
syslogd
klogd

echo "Configuring loopback interface"
ifconfig lo 127.0.0.1

echo "Starting inetd"
xinetd

# start a shell
busybox sh</PRE><BR></TD></TR></TBODY></TABLE></P>
<P class=docText><A name=iddle1172></A><A name=iddle1658></A><A name=iddle2015></A><A name=iddle2510></A>This simple script is mostly self-explanatory. First, it is important to mount the <TT>/proc</TT> file system on its reserved mount point, <TT>/proc</TT>. This is because many utilities get their information from the <TT>/proc</TT> file system. This is explained more fully in <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch09.html#ch09">Chapter 9</A>. Next we launch the system loggers as early as possible, to capture any startup problems. Following the system log daemons, we configure the local loopback interface for the system. Again, a number of traditional Linux facilities assume that a loopback interface is present, and if your system has support for sockets configured, you should enable this pseudo interface. The last thing we do before starting a shell is launch the Internet superserver <TT>xinetd</TT>. This program sits in the background listening for network requests on any configured network interfaces. For example, to initiate a <TT>telnet</TT> session to the board, <TT>xinetd</TT> intercepts the request for <TT>telnet</TT> connection and spawns a <TT>telnet</TT> server to handle the session.</P>
<P class=docText>Instead of starting a shell, your own applications can be launched from this <TT>rcS</TT> initialization script. <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch11lev1sec3.html#ch11list08">Listing 11-8</A> is a simple example of a Telnet-enabled target board running basic services such as system and kernel loggers.</P><A name=ch11lev2sec5></A>
<H4 id=title-IDA4OPWC class=docSection2Title>11.3.3. BusyBox Target Installation</H4>
<P class=docText>The discussion of BusyBox installation can proceed only when you understand the use and purpose of symlinks. The BusyBox makefile contains a target called <TT>install</TT>. Executing <TT>make install</TT> creates a directory structure containing the <A name=iddle1655></A><A name=iddle1656></A><A name=iddle1657></A><A name=iddle1937></A><TT>busybox</TT> executable and a symlink tree. This environment needs to be migrated to your target embedded system's root directory, complete with the symlink tree. The symlink tree eliminates the need to type <TT>busybox command</TT> for each command. Instead, to see a listing of files in a given directory, the user need only type <TT>ls</TT>. The symlink executes <TT>busybox</TT> as described previously and invokes the <TT>ls</TT> functionality. Review <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch11lev1sec3.html#ch11list04">Listing 11-4</A> and <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch11lev1sec3.html#ch11list05">Listing 11-5</A> to see the symlink tree. Note that the BusyBox build system creates links only for the functionality that you have enabled via the configuration utility.</P>
<P class=docText>The easiest way to populate your root file system with the necessary symlink farm is to let the BusyBox build system do it for you. Simply mount your root file system on your development workstation and pass a <TT>PREFIX</TT> to the BusyBox makefile. <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch11lev1sec3.html#ch11list09">Listing 11-9</A> shows the procedure.</P><A name=ch11list09></A>
<H5 id=title-IDA5RPWC class=docExampleTitle>Listing 11-9. Installing BusyBox on Root File System</H5>
<P>
<TABLE cellSpacing=0 cellPadding=5 width="90%" border=1>
<TBODY>
<TR>
<TD><PRE>$ <SPAN class=docEmphStrong>mount -o loop bbrootfs.ext2 /mnt/remote</SPAN>
$ <SPAN class=docEmphStrong>make PREFIX=/mnt/remote install</SPAN>
/bin/sh applets/install.sh /mnt/remote
  /mnt/remote/bin/ash -&gt; busybox
  /mnt/remote/bin/cat -&gt; busybox
  /mnt/remote/bin/chgrp -&gt; busybox
  /mnt/remote/bin/chmod -&gt; busybox
  /mnt/remote/bin/chown -&gt; busybox
...
 /mnt/remote/usr/bin/xargs -&gt; ../../bin/busybox
 /mnt/remote/usr/bin/yes -&gt; ../../bin/busybox
 /mnt/remote/usr/sbin/chroot -&gt; ../../bin/busybox


 --------------------------------------------------
 You will probably need to make your busybox binary
 setuid root to ensure all configured applets will
 work properly.
 --------------------------------------------------

$ <SPAN class=docEmphStrong>chmod +s /mnt/remote/bin/busybox</SPAN>
$ <SPAN class=docEmphStrong>ls -l /mnt/remote/bin/busybox</SPAN>
-rwsr-sr-x  1 root root 863188 Dec  4 15:54 /mnt/remote/bin/busybox</PRE><BR></TD></TR></TBODY></TABLE></P>
<P class=docText>First we mount the root file system binary image on our desired mount pointin this case, <TT>/mnt/remote</TT>, a favorite of mine. Then we invoke the BusyBox <TT>make install</TT> command, passing it a <TT>PREFIX</TT> specifying where we want the symlink tree <A name=iddle1029></A><A name=iddle1162></A><A name=iddle1187></A>and <TT>busybox</TT> executable file to be placed. As you can see from the listing, the makefile invokes a script called <TT>applets/install.sh</TT> to do the bulk of the work. The script walks through a file containing all the enabled BusyBox applets and creates a symlink for each one on the path we have specified using the <TT>PREFIX</TT>. The script is very chatty; it outputs a line for each symlink created. For brevity, only the first few and last few symlink announcements are displayed. The ellipsis in the listing represents those we have eliminated.</P>
<P class=docText>The message about <TT>setuid</TT> is also displayed by the install script, to remind you that it might be necessary to make your <TT>busybox</TT> executable <TT>setuid</TT> root. This is to allow BusyBox functions that require root access to function properly even when invoked by a nonroot user. This is not strictly necessary, especially in an embedded Linux environment, where it is common to have only a root account on a system. If this is necessary for your installation, the required command (<TT>chmod +s</TT>) is shown in <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch11lev1sec3.html#ch11list09">Listing 11-9</A>.</P>
<P class=docText>The result of this installation step is that the <TT>busybox</TT> binary and symlink tree are installed on our target root file system. The end result looks very similar to <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch11lev1sec3.html#ch11list04">Listing 11-4</A>.</P>
<P class=docText>It is useful to note that BusyBox also has an option to enable creation of this symlink tree on the target system at runtime. This option is enabled in the BusyBox configuration and is invoked at runtime by executing <TT>busybox</TT> with the <TT>-install</TT> option. You must have the <TT>/proc</TT> file system mounted on your target system for this support to work.</P><A name=ch11lev2sec6></A>
<H4 id=title-IDARVPWC class=docSection2Title>11.3.4. BusyBox Commands</H4>
<P class=docText>In a recent BusyBox snapshot, 197 commands (also called <SPAN class=docEmphasis>applets</SPAN>) were documented in the man page. There is sufficient support for reasonably complex shell scripts, including support for Bash shell scripting. BusyBox has support for <TT>awk</TT> and <TT>sed</TT>, frequently found in Bash scripts. BusyBox supports network utilities such as <TT>ping</TT>, <TT>ifconfig</TT>, <TT>TRaceroute</TT>, and <TT>netstat</TT>. Some commands are specifically included for scripting support, including <TT>true</TT>, <TT>false</TT>, and <TT>yes</TT>.</P>
<P class=docText>Spend a few moments perusing <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/app03.html#app03">Appendix C</A>, "BusyBox Commands," where you can find a summary of each BusyBox command. After you have done so, you will have a better appreciation for the capabilities of BusyBox and how it might be applicable to your own embedded Linux project.</P>
<P class=docText><A name=iddle1855></A>As mentioned at the beginning of this chapter, many of the BusyBox commands contain a limited subset of features and options compared to their full-featured counterparts. In general, you can get help on any given BusyBox command at runtime by invoking the command with the <TT>--help</TT> option. This produces a usage message with a brief description of each supported command option. The BusyBox <TT>gzip</TT> applet is a useful example of a BusyBox command that has support for a limited set of options. <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch11lev1sec3.html#ch11list10">Listing 11-10</A> displays the output from <TT>gzip-help</TT> on a BusyBox target.</P><A name=ch11list10></A>
<H5 id=title-IDAYXPWC class=docExampleTitle>Listing 11-10. BusyBox <TT>gzip</TT> Applet Usage</H5>
<P>
<TABLE cellSpacing=0 cellPadding=5 width="90%" border=1>
<TBODY>
<TR>
<TD><PRE>/ # <SPAN class=docEmphStrong>gzip --help</SPAN>
BusyBox v1.01 (2005.12.01-21:11+0000) multi-call binary

Usage: gzip [OPTION]... [FILE]...

Compress FILE(s) with maximum compression.
When FILE is '-' or unspecified, reads standard input. Implies -c.

Options:
        -c       Write output to standard output instead of FILE.gz
        -d       Decompress
        -f       Force write when destination is a terminal</PRE><BR></TD></TR></TBODY></TABLE></P>
<P class=docText>The BusyBox version of <TT>gzip</TT> supports just three command line options. Its full-featured counterpart contains support for more than 15 different command line options. For example, the full-featured <TT>gzip</TT> utility supports a <TT>--list</TT> option that produces compression statistics for each file on the command line. No such support exists for BusyBox <TT>gzip</TT>. This is usually not a significant limitation for embedded systems. We present this information so you can make an informed choice when deciding on BusyBox. When the full capabilities of a utility are needed, the solution is simple: Delete support for that particular utility in the BusyBox configuration and add the standard Linux utility to your target system.