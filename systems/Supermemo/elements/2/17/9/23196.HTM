<H3 id=-100000 class=docSection1Title>BIOS and Legacy Drivers</H3>
<P class=docText><A name="The BIOS"></A>The BIOS provides a degree of hardware abstraction to some Linux drivers. Let's take the PC serial port driver (discussed in <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch06.html#ch06">Chapter 6</A><A name="The BIOS"></A>, "Serial Drivers") as an example. The BIOS probes the Super I/O chipset and assigns I/O base addresses and IRQs to the respective serial (and Infrared) ports. The serial driver needs to be told about the resources assigned by the BIOS either via hard-coded values in a header file (<SPAN class=docEmphasis>include/asm-x86/serial.h</SPAN><A name="dig into"></A>) or via user-space commands. As an exercise, dig into the data sheet of your Super I/O chipset and add support in the serial driver to probe for the resource values set by the BIOS.</P>
<P class=docText><A name="even if"></A>To take another example, even if you disable USB support in the kernel, you can use USB keyboards and mice on PC systems with help from the BIOS. The BIOS turns on an emulation mode in the South Bridge that routes USB keyboard and mouse input from the USB controller to the keyboard controller. This tricks the operating system into thinking that you are using a legacy keyboard or mouse.</P>
<P class=docText><A name="the PCI"></A>The kernel used to rely on the BIOS to walk the PCI bus and configure detected devices. This is now obsolete, but take a look at <SPAN class=docEmphasis>arch/x86/pci/pcbios.c</SPAN><A name="BIOS can"></A> to see how PCI BIOS can be accessed from the kernel. <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch10.html#ch10">Chapter 10</A>, "Peripheral Component Interconnect," discussed PCI drivers.