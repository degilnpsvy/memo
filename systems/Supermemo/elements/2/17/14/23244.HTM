<H3 id=title-IDAMVC3D class=docSection1Title>6.6. Shutdown</H3>
<P class=docText>Orderly shutdown of an embedded system is often overlooked in a design. Improper shutdown can affect startup times and can even corrupt certain file system types. One of the more common complaints using the EXT2 file system (the default in many desktop Linux distributions for several years) is the time it takes for an <TT>fsck</TT> (file system check) on startup after unplanned power loss. Servers with large disk systems can take on the order of hours to properly <TT>fsck</TT> through a collection of large EXT2 partitions.</P>
<P class=docText>Each embedded project will likely have its own shutdown strategy. What works for one might or might not work for another. The scale of shutdown can range from a full System V shutdown scheme, to a simple script to halt or reboot. Several Linux utilities are available to assist in the shutdown process, including the <TT>shutdown</TT>, <TT>halt</TT>, and <TT>reboot</TT> commands. Of course, these must be available for your chosen architecture.</P>
<P class=docText>A shutdown script should terminate all userspace processes, which results in closing any open files used by those processes. If <TT>init</TT> is being used, issuing the command <TT>init 0</TT> halts the system. In general, the shutdown process first sends all processes the <TT>SIGTERM</TT> signal, to notify them that the system is shutting down. A short delay ensures that all processes have the opportunity to perform their shutdown actions, such as closing files, saving state, and so on. Then all processes are sent the <TT>SIGKILL</TT> signal, which results in their termination. The shutdown process should attempt to unmount any mounted file systems and call the architecture-specific halt or reboot routines. The Linux <TT>shutdown</TT> command in conjunction with <TT>init</TT> exhibits this behavior.