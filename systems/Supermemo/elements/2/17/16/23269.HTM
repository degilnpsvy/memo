<H3 id=title-IDA24C3D class=docSection1Title>9.9. Other File Systems</H3>
<P class=docText>Numerous file systems are supported under Linux. Space does not permit coverage of all of them. However, you should be aware of some other important file systems frequently found in embedded systems.</P>
<P class=docText>The ramfs file system is best considered from the context of the Linux source code module that implements it. <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch09lev1sec9.html#ch09list19">Listing 9-19</A> reproduces the first several lines of that file.</P>
<P class=docText></P><A name=ch09list19></A>
<H5 id=title-IDAV5C3D class=docExampleTitle>Listing 9-19. Linux ramfs Source Module Comments</H5>
<P>
<TABLE cellSpacing=0 cellPadding=5 width="90%" border=1>
<TBODY>
<TR>
<TD><PRE>/*
 * Resizable simple ram filesystem for Linux.
 *
 * Copyright (C) 2000 Linus Torvalds.
 *               2000 Transmeta Corp.
 *
 * Usage limits added by David Gibson, Linuxcare Australia.
 * This file is released under the GPL.
 */

/*
 * NOTE! This filesystem is probably most useful
 * not as a real filesystem, but as an example of
 * how virtual filesystems can be written.
 *
 * It doesn't get much simpler than this. Consider
 * that this file implements the full semantics of
 * a POSIX-compliant read-write filesystem.</PRE><BR></TD></TR></TBODY></TABLE></P>
<P class=docText><A name=iddle1492></A><A name=iddle1962></A><A name=iddle2110></A><A name=iddle2119></A><A name=iddle2530></A><A name=iddle2606></A>This module was written primarily as an example of how virtual file systems can be written. One of the primary differences between this file system and the ramdisk facility found in modern Linux kernels is its capability to shrink and grow according to its use. A ramdisk does not have this property. This source module is compact and well written. It is presented here for its educational value. You are encouraged to study this good example.</P>
<P class=docText>The <TT>tmpfs</TT> file system is similar to and related to rams. Like ramfs, everything in <TT>tmpfs</TT> is stored in kernel virtual memory, and the contents of <TT>tmpfs</TT> are lost on power-down or reboot. The <TT>tmpfs</TT> file system is useful for fast temporary storage of files. I use <TT>tmpfs</TT> mounted on <TT>/tmp</TT> in a midi/audio application to speed up the creation and deletion of temporary objects required by the audio subsystem. This is also a great way to keep your <TT>/tmp</TT> directory cleanits contents are lost on every reboot. Mounting <TT>tmpfs</TT> is similar to any other virtual file system:</P>
<DIV class=docText><PRE># <SPAN class=docEmphStrong>mount -t tmpfs /tmpfs /tmp</SPAN></PRE></DIV><BR>
<P class=docText>As with other virtual file systems such as <TT>/proc</TT>, the first <TT>/tmpfs</TT> parameter in the previous mount command is a "no-op"that is, it could be the word <TT>none</TT> and still function. However, it is a good reminder that you are mounting a virtual file system called <TT>tmpfs</TT>.