<H3 id=-100000 class=docSection1Title>Looking at the Sources</H3>
<P class=docText><A name=The></A>The <SPAN class=docEmphasis>drivers/net/</SPAN><A name="sources of"></A> directory contains sources of various NIC drivers. Look inside <SPAN class=docEmphasis>drivers/net/e1000/</SPAN><A name="an example"></A> for an example NIC driver. You will find network protocol implementations in the <SPAN class=docEmphasis>net/</SPAN> directory. <TT>sk_buff</TT> access routines are in <SPAN class=docEmphasis>net/core/skbuff.c</SPAN>. Library routines that aid the implementation of your driver's <TT>net_device</TT> interface stay in <SPAN class=docEmphasis>net/core/dev.c</SPAN> and <SPAN class=docEmphasis>include/linux/netdevice.h</SPAN>.</P>
<P class=docText></P><A name=ch15sb03></A>
<P>
<TABLE cellSpacing=0 cellPadding=5 width="90%" border=1>
<TBODY>
<TR>
<TD>
<H2 class=docSidebarTitle>TUN/TAP Driver</H2>
<P class=docText><A name=iddle2018></A><A name=iddle3210></A><A name=iddle3213></A><A name=iddle3279></A><A name=iddle4012></A><A name=iddle4339></A><A name=iddle4340></A>The TUN/TAP device driver <SPAN class=docEmphasis>drivers/net/tun.c</SPAN><A name="of a"></A>, used for protocol tunneling, is an example of a combination of a virtual network driver and a pseudo char driver. The pseudo char device (<SPAN class=docEmphasis>/dev/net/tun</SPAN><A name="for the"></A>) acts as the underlying hardware for the virtual network interface (<SPAN class=docEmphasis>tunX</SPAN><A name="TUN network"></A>), so instead of transmitting frames to a physical network, the TUN network driver sends it to an application that is reading from <SPAN class=docEmphasis>/dev/net/tun</SPAN><A name="the TUN"></A>. Similarly, instead of receiving data from a physical network, the TUN driver accepts it from an application writing to <SPAN class=docEmphasis>/dev/net/tun</SPAN>. Look at <SPAN class=docEmphasis>Documentation/networking/tuntap.txt</SPAN><A name="portions of"></A> for more explanations and usage scenarios. Since both network and char portions of the driver do not have to deal with the complexities of hardware interaction, it serves as a very readable, albeit simplistic, driver example.</P></TD></TR></TBODY></TABLE></P><BR>
<P class=docText>Files under <SPAN class=docEmphasis>/sys/class/net/</SPAN><A name="on NIC"></A> let you operate on NIC driver parameters. Use the nodes under <SPAN class=docEmphasis>/proc/sys/net/</SPAN><A name="To set"></A> to configure protocol-specific variables. To set the maximum TCP transmit window size, for example, echo the desired value to <SPAN class=docEmphasis>/proc/sys/net/core/wmem_max</SPAN><A name=The></A>. The <SPAN class=docEmphasis>/proc/net/</SPAN><A name="a collection"></A> directory has a collection of system-specific network information. Examine <SPAN class=docEmphasis>/proc/net/dev</SPAN><A name="statistics on"></A> for statistics on all NICs on your system and look at <SPAN class=docEmphasis>/proc/net/arp</SPAN> for the ARP table.</P>
<P class=docText><A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch15lev1sec8.html#ch15tab01">Table 15.1</A><A name="and their"></A> contains the main data structures used in this chapter and their location in the source tree. <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch15lev1sec8.html#ch15tab02">Table 15.2</A><A name="interfaces that"></A> lists the main kernel programming interfaces that you used in this chapter along with the location of their definitions.</P><A name=ch15tab01></A>
<P>
<TABLE cellSpacing=0 cellPadding=5 rules=groups frame=hsides>
<CAPTION>
<H5 class=docTableTitle>Table 15.1. Summary of Data Structures</H5></CAPTION>
<COLGROUP span=3 align=left>
<COL width=150>
<COL width=150>
<COL width=250></COLGROUP>
<THEAD>
<TR>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left>Data Structure</TH>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left>Location</TH>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left>Description</TH></TR></THEAD>
<TBODY>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>sk_buff</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/skbuff.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left><TT>sk_buff</TT><A name="networking layers"></A>s provide efficient buffer handling and flow-control mechanisms to Linux networking layers.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>net_device</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/netdevice.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Interface between NIC drivers and the TCP/IP stack.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>net_device_stats</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/netdevice.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Statistics pertaining to a network device.</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>ethtool_ops</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/ethtool.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="to the"></A>Entry points to tie a NIC driver to the ethtool utility.</TD></TR></TBODY></TABLE></P><BR>
<P class=docText></P><A name=ch15tab02></A>
<P>
<TABLE cellSpacing=0 cellPadding=5 rules=groups frame=hsides>
<CAPTION>
<H5 class=docTableTitle>Table 15.2. Summary of Kernel Programming Interfaces</H5></CAPTION>
<COLGROUP span=3 align=left>
<COL width=150>
<COL width=125>
<COL width=275></COLGROUP>
<THEAD>
<TR>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left><A name=iddle1085></A><A name=iddle1087></A><A name=iddle1089></A><A name=iddle1091></A><A name=iddle1758></A><A name=iddle2104></A><A name=iddle3223></A><A name=iddle3224></A><A name=iddle3226></A><A name=iddle3227></A><A name=iddle3230></A><A name=iddle3232></A><A name=iddle3233></A><A name=iddle3234></A><A name=iddle3236></A><A name=iddle3238></A><A name=iddle3240></A><A name=iddle3290></A><A name=iddle3769></A><A name=iddle4014></A><A name=iddle4016></A><A name=iddle4019></A><A name=iddle4398></A>Kernel Interface</TH>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left>Location</TH>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left>Description</TH></TR></THEAD>
<TBODY>
<TR>
<TD class="docTableCell bottomBorder" vAlign=top align=left><TT>alloc_netdev()</TT></TD>
<TD class="docTableCell bottomBorder" vAlign=top align=left><SPAN class=docEmphasis>net/core/dev.c</SPAN></TD>
<TD class="docTableCell bottomBorder" vAlign=top align=left>Allocates a <TT>net_device</TT></TD></TR>
<TR>
<TD class="docTableCell bottomBorder" vAlign=top align=left>
<DIV class=docText><PRE>alloc_etherdev()
alloc_ieee80211()
alloc_irdadev()</PRE></DIV><BR></TD>
<TD class="docTableCell bottomBorder" vAlign=top align=left><SPAN class=docEmphasis>net/ethernet/eth.c</SPAN> 
<P class=docText><SPAN class=docEmphasis>net/ieee80211/ieee80211_module.c</SPAN></P><SPAN class=docEmphasis>net/irda/irda_device.c</SPAN></TD>
<TD class="docTableCell bottomBorder" vAlign=top align=left>Wrappers to <TT>alloc_netdev()</TT></TD></TR>
<TR>
<TD class="docTableCell bottomBorder" vAlign=top align=left><TT>free_netdev()</TT></TD>
<TD class="docTableCell bottomBorder" vAlign=top align=left><SPAN class=docEmphasis>net/core/dev.c</SPAN></TD>
<TD class="docTableCell bottomBorder" vAlign=top align=left>Reverse of <TT>alloc_netdev()</TT></TD></TR>
<TR>
<TD class="docTableCell bottomBorder" vAlign=top align=left><TT>register_netdev()</TT></TD>
<TD class="docTableCell bottomBorder" vAlign=top align=left><SPAN class=docEmphasis>net/core/dev.c</SPAN></TD>
<TD class="docTableCell bottomBorder" vAlign=top align=left>Registers a <TT>net_device</TT></TD></TR>
<TR>
<TD class="docTableCell bottomBorder" vAlign=top align=left><TT>unregister_netdev()</TT></TD>
<TD class="docTableCell bottomBorder" vAlign=top align=left><SPAN class=docEmphasis>net/core/dev.c</SPAN></TD>
<TD class="docTableCell bottomBorder" vAlign=top align=left>Unregisters a <TT>net_device</TT></TD></TR>
<TR>
<TD class="docTableCell bottomBorder" vAlign=top align=left><TT>dev_alloc_skb()</TT></TD>
<TD class="docTableCell bottomBorder" vAlign=top align=left><SPAN class=docEmphasis>include/linux/skbuff.h</SPAN></TD>
<TD class="docTableCell bottomBorder" vAlign=top align=left>Allocates memory for an <TT>sk_buff</TT> and associates it with a packet payload buffer</TD></TR>
<TR>
<TD class="docTableCell bottomBorder" vAlign=top align=left><TT>dev_kfree_skb()</TT></TD>
<TD class="docTableCell bottomBorder" vAlign=top align=left><SPAN class=docEmphasis>include/linux/skbuff.h</SPAN> <SPAN class=docEmphasis>net/core/skbuff.c</SPAN></TD>
<TD class="docTableCell bottomBorder" vAlign=top align=left>Reverse of <TT>dev_alloc_skb()</TT></TD></TR>
<TR>
<TD class="docTableCell bottomBorder" vAlign=top align=left><TT>skb_reserve()</TT></TD>
<TD class="docTableCell bottomBorder" vAlign=top align=left><SPAN class=docEmphasis>include/linux/skbuff.h</SPAN></TD>
<TD class="docTableCell bottomBorder" vAlign=top align=left><A name="and the"></A>Adds a padding between the start of a packet buffer and the beginning of payload</TD></TR>
<TR>
<TD class="docTableCell bottomBorder" vAlign=top align=left><TT>skb_clone()</TT></TD>
<TD class="docTableCell bottomBorder" vAlign=top align=left><SPAN class=docEmphasis>net/core/skbuff.c</SPAN></TD>
<TD class="docTableCell bottomBorder" vAlign=top align=left><A name="of a"></A>Creates a copy of a supplied <TT>sk_buff</TT><A name="the contents"></A> without copying the contents of the associated packet buffer</TD></TR>
<TR>
<TD class="docTableCell bottomBorder" vAlign=top align=left><TT>skb_put()</TT></TD>
<TD class="docTableCell bottomBorder" vAlign=top align=left><SPAN class=docEmphasis>include/linux/skbuff.h</SPAN></TD>
<TD class="docTableCell bottomBorder" vAlign=top align=left><A name="Allows packet"></A>Allows packet data to go to the tail of the packet</TD></TR>
<TR>
<TD class="docTableCell bottomBorder" vAlign=top align=left><TT>netif_rx()</TT></TD>
<TD class="docTableCell bottomBorder" vAlign=top align=left><SPAN class=docEmphasis>net/core/dev.c</SPAN></TD>
<TD class="docTableCell bottomBorder" vAlign=top align=left><A name="network packet"></A>Passes a network packet to the TCP/IP stack</TD></TR>
<TR>
<TD class="docTableCell bottomBorder" vAlign=top align=left>
<DIV class=docText><PRE>netif_rx_schedule_prep()
__netif_rx_schedule()</PRE></DIV><BR></TD>
<TD class="docTableCell bottomBorder" vAlign=top align=left><SPAN class=docEmphasis>include/linux/netdevice.h</SPAN> <SPAN class=docEmphasis>net/core/dev.c</SPAN></TD>
<TD class="docTableCell bottomBorder" vAlign=top align=left><A name="a network"></A>Passes a network packet to the TCP/IP stack (NAPI)</TD></TR>
<TR>
<TD class="docTableCell bottomBorder" vAlign=top align=left><TT>netif_receive_skb()</TT></TD>
<TD class="docTableCell bottomBorder" vAlign=top align=left><SPAN class=docEmphasis>net/core/dev.c</SPAN></TD>
<TD class="docTableCell bottomBorder" vAlign=top align=left>Posts packet to the protocol layer from the <TT>poll()</TT> method (NAPI)</TD></TR>
<TR>
<TD class="docTableCell bottomBorder" vAlign=top align=left><TT>netif_rx_complete()</TT></TD>
<TD class="docTableCell bottomBorder" vAlign=top align=left><SPAN class=docEmphasis>include/linux/netdevice.h</SPAN></TD>
<TD class="docTableCell bottomBorder" vAlign=top align=left>Removes a device from polled list (NAPI)</TD></TR>
<TR>
<TD class="docTableCell bottomBorder" vAlign=top align=left><TT>netif_device_detach()</TT></TD>
<TD class="docTableCell bottomBorder" vAlign=top align=left><SPAN class=docEmphasis>net/core/dev.c</SPAN></TD>
<TD class="docTableCell bottomBorder" vAlign=top align=left>Detaches the device (commonly called during power suspend)</TD></TR>
<TR>
<TD class="docTableCell bottomBorder" vAlign=top align=left><TT>netif_device_attach()</TT></TD>
<TD class="docTableCell bottomBorder" vAlign=top align=left><SPAN class=docEmphasis>net/core/dev.c</SPAN></TD>
<TD class="docTableCell bottomBorder" vAlign=top align=left>Attaches the device (commonly called during power resume)</TD></TR>
<TR>
<TD class="docTableCell bottomBorder" vAlign=top align=left><TT>netif_start_queue()</TT></TD>
<TD class="docTableCell bottomBorder" vAlign=top align=left><SPAN class=docEmphasis>include/linux/netdevice.h</SPAN></TD>
<TD class="docTableCell bottomBorder" vAlign=top align=left>Conveys readiness to accept data from the networking stack</TD></TR>
<TR>
<TD class="docTableCell bottomBorder" vAlign=top align=left><TT>netif_stop_queue()</TT></TD>
<TD class="docTableCell bottomBorder" vAlign=top align=left><SPAN class=docEmphasis>include/linux/netdevice.h</SPAN></TD>
<TD class="docTableCell bottomBorder" vAlign=top align=left>Asks the networking stack to stop sending down data</TD></TR>
<TR>
<TD class="docTableCell bottomBorder" vAlign=top align=left><TT>netif_wake_queue()</TT></TD>
<TD class="docTableCell bottomBorder" vAlign=top align=left><SPAN class=docEmphasis>include/linux/netdevice.h</SPAN></TD>
<TD class="docTableCell bottomBorder" vAlign=top align=left>Restarts egress queuing</TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT>netif_queue_stopped()</TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis>include/linux/netdevice.h</SPAN></TD>
<TD class=docTableCell vAlign=top align=left>Checks flow-control state</TD></TR></TBODY></TABLE>