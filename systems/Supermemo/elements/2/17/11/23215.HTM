<H3 id=700181-803 class=docSection1Title>2.1. Embedded or Not?</H3>
<P class=docText>Several key attributes are usually associated with embedded systems. We wouldn't necessarily call our desktop PC an embedded system. But consider a desktop PC hardware platform in a remote data center that is performing a critical monitoring and alarm task. Assume that this data center is normally not staffed. This imposes a different set of requirements on this hardware platform. For example, if power is lost and then restored, we would expect this platform to resume its duties without operator intervention.</P>
<P class=docText>Embedded systems come in a variety of shapes and sizes, from the largest multiple-rack data storage or networking powerhouses to tiny modules such as your personal MP3 player or your cellular handset. Some of the usual characteristics of embedded systems include these:</P>
<UL>
<LI>
<P class=docList>Contain a processing engine, such as a general-purpose microprocessor</P></LI>
<LI>
<P class=docList>Typically designed for a specific application or purpose</P></LI>
<LI>
<P class=docList>Includes a simple (or no) user interfacean automotive engine ignition controller, for example</P></LI>
<LI>
<P class=docList>Often is resource limitedfor example, has a small memory footprint and no hard drive</P></LI>
<LI>
<P class=docList>Might have power limitations, such as a requirement to operate from batteries</P></LI>
<LI>
<P class=docList>Usually is not used as a general-purpose computing platform</P></LI>
<LI>
<P class=docList>Generally has application software built in, not user selected</P></LI>
<LI>
<P class=docList><A name=iddle1072></A><A name=iddle1092></A><A name=iddle1093></A><A name=iddle1377></A><A name=iddle1384></A><A name=iddle1385></A>Ships with all intended application hardware and software preintegrated</P></LI>
<LI>
<P class=docList>Often is intended for applications without human intervention</P></LI></UL>
<P class=docText>Most commonly, embedded systems are resource constrained compared to the typical desktop PC. Embedded systems often have limited memory, small or no hard drives, and sometimes no external network connectivity. Frequently, the only user interface is a serial port and some LEDs. These and other issues can present challenges to the embedded system developer.</P><A name=ch02lev2sec1></A>
<H4 id=title-IDAUNPJ class=docSection2Title>2.1.1. BIOS Versus Bootloader</H4>
<P class=docText>When power is first applied to the desktop computer, a software program called the BIOS immediately takes control of the processor. (Historically, BIOS was an acronym meaning Basic Input/Output Software, but the acronym has taken on a meaning of its own because the functions it performs have become much more complex than the original implementations.) The BIOS might actually be stored in Flash memory (described shortly), to facilitate field upgrade of the BIOS program itself.</P>
<P class=docText>The BIOS is a complex set of system-configuration software routines that have knowledge of the low-level details of the hardware architecture. Most of us are unaware of the extent of the BIOS and its functionality, but it is a critical piece of the desktop computer. The BIOS first gains control of the processor when power is applied. Its primary responsibility is to initialize the hardware, especially the memory subsystem, and load an operating system from the PC's hard drive.</P>
<P class=docText>In a typical embedded system (assuming that it is not based on an industry-standard x86 PC hardware platform) a <SPAN class=docEmphasis>bootloader</SPAN> is the software program that performs these same functions. In your own custom embedded system, part of your development plan must include the development of a bootloader specific to your board. Luckily, several good open source bootloaders are available that you can customize for your project. These are introduced in <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch07.html#ch07">Chapter 7</A>, "Bootloaders."</P>
<P class=docText>Some of the more important tasks that your bootloader performs on power-up are as follows:</P>
<UL>
<LI>
<P class=docList>Initializes critical hardware components, such as the SDRAM controller, I/O controllers, and graphics controllers</P></LI>
<LI>
<P class=docList><A name=iddle1045></A><A name=iddle1046></A><A name=iddle1388></A><A name=iddle1567></A>Initializes system memory in preparation for passing control to the operating system</P></LI>
<LI>
<P class=docList>Allocates system resources such as memory and interrupt circuits to peripheral controllers, as necessary</P></LI>
<LI>
<P class=docList>Provides a mechanism for locating and loading your operating system image</P></LI>
<LI>
<P class=docList>Loads and passes control to the operating system, passing any required startup information that might be required, such as total memory size clock rates, serial port speeds and other low-level hardware specific configuration data</P></LI></UL>
<P class=docText>This is a very simplified summary of the tasks that a typical embedded-system bootloader performs. The important point to remember is this: If your embedded system will be based on a custom-designed platform, these bootloader functions must be supplied by you, the system designer. If your embedded system is based on a commercial off-the-shelf (COTS) platform such as an ATCA chassis,<SUP class=docFootnote><A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch02lev1sec1.html#ch02fn01">[1]</A></SUP> typically the bootloader (and often the Linux kernel) is included on the board. <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch07.html#ch07">Chapter 7</A> discusses bootloaders in detail.</P>
<BLOCKQUOTE>
<P class=docFootnote><SUP><A name=ch02fn01>[1]</A></SUP> ATCA platforms are introduced in <A class=docLink href="http://www.embeddedlinux.org.cn/EmbeddedLinuxPrimer/0136130550/ch03.html#ch03">Chapter 3</A>, "Processor Basics."</P></BLOCKQUOTE>