<H3 id=-100000 class=docSection1Title>Build Scripts</H3>
<P class=docText><A name="Customers generally"></A>Customers generally ask for periodic software builds during the development cycle. Each build includes new features or bug fixes. The deliverables for an embedded PC derivative, for example, may include firmware components such as the base kernel, loadable device driver modules, filesystem utilities, bootloader, BIOS, and on-card microcode. To automate build generation, it's a good idea to implement a set of versatile build scripts that obtain a source code snapshot from the version control repository and generate a packaged deliverable.</P>
<P class=docText><A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch22lev1sec5.html#ch22ex01">Listing 22.1</A><A name="skeletal build"></A> shows a skeletal build script that assumes use of CVS for version control. This is a simple script that shows only the kernel build. In the real world, you might need a sophisticated suite of scripts that package several software components and manage different installation scenarios.</P>
<P class=docText></P><A name=ch22ex01></A>
<H5 id=title-ID0EI1AO class=docExampleTitle>Listing 22.1. A Simple Build Script</H5>
<P>
<TABLE cellSpacing=0 cellPadding=5 border=1>
<TBODY>
<TR>
<TD>
<DIV class=codeSegmentsExpansionLinks>Code View:</DIV><PRE># Check that compilation tools are installed
#...

# Assume that $user contains the user name, $cvsserver contains
# the CVS server name and <SPAN class=docEmphasis>/path/to/repository</SPAN> is the location
# of your project's repository on the CVS server
CVS="cvs &#37413;&#25593; :pserver:$user@$cvsserver:/path/to/repository"
$CVS login

# Check-out the kernel
$CVS checkout kernel

# Build the kernel
cd kernel
make mrproper
#Get the .config file for your platform
cp arch/your-arch/configs/your_platform_defconfig .config
make oldconfig
make &#37413;&#25604;5 bzImage # Accelerate by spawning 5 instances of 'make'
if [ $? != 0 ]
then
  echo "Error building Kernel. Bailing out.."
  exit 1
fi

# Copy the kernel image to a target directory
cp arch/x86/boot/bzImage /path/to/target_directory/productname.kernel

# Build modules and install them in an appropriate directory
make modules
if [ $? != 0 ]
then
  echo "Error building modules. Bailing.."
  exit 2
fi

export INSTALL_MOD_PATH=&#31108;$TARGET_DIRECTORY/modules&#31108;
make modules_install

# Rebuild after forcing generation of identical MD5 sums and
# package the resulting checksum information.
#...

# Generate a source patch from the base starting point, assuming
# that KERNELBASE is the CVS tag for the vanilla kernel
cvs rdiff &#37413;&#25622; &#37413;&#25617; KERNELBASE kernel &gt; patch.kernel

# Generate a changelog using "cvs log"
#...

# Package everything nicely into a tar ball
#...

					  </PRE><BR></TD></TR></TBODY></TABLE></P>
<P class=docText><A name=iddle1516></A><A name=iddle1751></A><A name=iddle2889></A><A name=iddle3609></A><A name="build verification"></A>After you satisfactorily complete build verification tests on the generated deliverable, initiate a post-build process to tag the current state of the version control system with a build identifier. This essentially attaches a name to the source snapshot corresponding to the build and helps trace problems to code versions. You can check out source versions based on the relevant build identifier when you later attempt to re-create reported field problems in your lab.