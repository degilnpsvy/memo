<H1 class=SECT1><A name=UNOFFICIALST></A>35.1. Unofficial Shell Scripting Stylesheet</H1>
<P></P>
<UL>
<LI>
<P>Comment your code. This makes it easier for others to understand (and appreciate), and easier for you to maintain. 
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>PASS="$PASS${MATRIX:$(($RANDOM%${#MATRIX})):1}"
#  It made perfect sense when you wrote it last year,
#+ but now it's a complete mystery.
#  (From Antek Sawicki's "pw.sh" script.)</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>Add descriptive headers to your scripts and functions. 
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash

#************************************************#
#                   xyz.sh                       #
#           written by Bozo Bozeman              #
#                July 05, 2001                   #
#                                                #
#           Clean up project files.              #
#************************************************#

E_BADDIR=85                       # No such directory.
projectdir=/home/bozo/projects    # Directory to clean up.

# --------------------------------------------------------- #
# cleanup_pfiles ()                                         #
# Removes all files in designated directory.                #
# Parameter: $target_directory                              #
# Returns: 0 on success, $E_BADDIR if something went wrong. #
# --------------------------------------------------------- #
cleanup_pfiles ()
{
  if [ ! -d "$1" ]  # Test if target directory exists.
  then
    echo "$1 is not a directory."
    return $E_BADDIR
  fi

  rm -f "$1"/*
  return 0   # Success.
}  

cleanup_pfiles $projectdir

exit $?</PRE></FONT></TD></TR></TBODY></TABLE></P>
<LI>
<P>Avoid using <SPAN class=QUOTE>"magic numbers,"</SPAN> <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FTN.AEN20041" name=AEN20041><SPAN class=footnote>[124]</SPAN></A> that is, <SPAN class=QUOTE>"hard-wired"</SPAN> literal constants. Use meaningful variable names instead. This makes the script easier to understand and permits making changes and updates without breaking the application. 
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>if [ -f /var/log/messages ]
then
  ...
fi
#  A year later, you decide to change the script to check /var/log/syslog.
#  It is now necessary to manually change the script, instance by instance,
#+ and hope nothing breaks.

# A better way:
LOGFILE=/var/log/messages  # Only line that needs to be changed.
if [ -f "$LOGFILE" ]
then
  ...
fi</PRE></FONT></TD></TR></TBODY></TABLE></P>
<LI>
<P>Choose descriptive names for variables and functions. 
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>fl=`ls -al $dirname`                 # Cryptic.
file_listing=`ls -al $dirname`       # Better.


MAXVAL=10   # All caps used for a script constant.
while [ "$index" -le "$MAXVAL" ]
...


E_NOTFOUND=95                        #  Uppercase for an errorcode,
                                     #+ and name prefixed with E_.
if [ ! -e "$filename" ]
then
  echo "File $filename not found."
  exit $E_NOTFOUND
fi  


MAIL_DIRECTORY=/var/spool/mail/bozo  #  Uppercase for an environmental
export MAIL_DIRECTORY                #+ variable.


GetAnswer ()                         #  Mixed case works well for a
{                                    #+ function name, especially
  prompt=$1                          #+ when it improves legibility.
  echo -n $prompt
  read answer
  return $answer
}  

GetAnswer "What is your favorite number? "
favorite_number=$?
echo $favorite_number


_uservariable=23                     # Permissible, but not recommended.
# It's better for user-defined variables not to start with an underscore.
# Leave that for system variables.</PRE></FONT></TD></TR></TBODY></TABLE></P>
<LI>
<P>Use <A href="http://tldp.org/LDP/abs/html/abs-guide.html#EXITCOMMANDREF">exit codes</A> in a systematic and meaningful way. 
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>E_WRONG_ARGS=95
...
...
exit $E_WRONG_ARGS</PRE></FONT></TD></TR></TBODY></TABLE>See also <A href="http://tldp.org/LDP/abs/html/abs-guide.html#EXITCODES">Appendix E</A>.</P>
<P><EM>Ender</EM> suggests using the <A href="http://tldp.org/LDP/abs/html/abs-guide.html#SYSEXITSREF">exit codes in <TT class=FILENAME>/usr/include/sysexits.h</TT></A> in shell scripts, though these are primarily intended for C and C++ programming.</P>
<LI>
<P>Use standardized parameter flags for script invocation. <EM>Ender</EM> proposes the following set of flags.</P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>-a      All: Return all information (including hidden file info).
-b      Brief: Short version, usually for other scripts.
-c      Copy, concatenate, etc.
-d      Daily: Use information from the whole day, and not merely
        information for a specific instance/user.
-e      Extended/Elaborate: (often does not include hidden file info).
-h      Help: Verbose usage w/descs, aux info, discussion, help.
        See also -V.
-l      Log output of script.
-m      Manual: Launch man-page for base command.
-n      Numbers: Numerical data only.
-r      Recursive: All files in a directory (and/or all sub-dirs).
-s      Setup &amp; File Maintenance: Config files for this script.
-u      Usage: List of invocation flags for the script.
-v      Verbose: Human readable output, more or less formatted.
-V      Version / License / Copy(right|left) / Contribs (email too).</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>See also <A href="http://tldp.org/LDP/abs/html/abs-guide.html#STANDARD-OPTIONS">Section G.1</A>.</P>
<LI>
<P>Break complex scripts into simpler modules. Use functions where appropriate. See <A href="http://tldp.org/LDP/abs/html/abs-guide.html#CARDS">Example 37-4</A>.</P>
<LI>
<P>Don't use a complex construct where a simpler one will do. 
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>COMMAND
if [ $? -eq 0 ]
...
# Redundant and non-intuitive.

if COMMAND
...
# More concise (if perhaps not quite as legible).</PRE></FONT></TD></TR></TBODY></TABLE></P></LI></UL>
<TABLE class=EPIGRAPH border=0 cellSpacing=0 cellPadding=0 width="100%">
<TBODY>
<TR>
<TD width="45%">&nbsp;</TD>
<TD vAlign=top width="45%" align=left><I>
<P><I>... reading the UNIX source code to the Bourne shell (/bin/sh). I was shocked at how much simple algorithms could be made cryptic, and therefore useless, by a poor choice of code style. I asked myself, <SPAN class=QUOTE>"Could someone be proud of this code?"</SPAN></I></P>
<P><I>--Landon Noll</I></P></I></TD></TR></TBODY></TABLE>