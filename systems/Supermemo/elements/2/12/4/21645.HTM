<H2 class=SECT2><A name=AEN21220></A>37.3.2. Bash, version 4.2</H2>
<P><A name=BASH42></A>Version 4.2 of Bash, released in February, 2011, contains a number of new features and enhancements, in addition to bugfixes.</P>
<P></P>
<UL>
<LI>
<P>Bash now supports the the <TT class=REPLACEABLE><I>\u</I></TT> and <TT class=REPLACEABLE><I>\U</I></TT> <I class=FIRSTTERM>Unicode</I> escape.</P>
<P><A name=UNICODEREF></A></P>
<TABLE class=SIDEBAR border=1 cellPadding=5>
<TBODY>
<TR>
<TD>
<DIV class=SIDEBAR><A name=AEN21232></A>
<P></P>
<P>Unicode is a cross-platform standard for encoding into numerical values letters and graphic symbols. This permits representing and displaying characters in foreign alphabets and unusual fonts.</P>
<P></P></DIV></TD></TR></TBODY></TABLE>
<P><A name=UNICODEREF2></A></P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>echo -e '\u2630'   # Horizontal triple bar character.
# Equivalent to the more roundabout:
echo -e "\xE2\x98\xB0"
                   # Recognized by earlier Bash versions.

echo -e '\u220F'   # PI (Greek letter and mathematical symbol)
echo -e '\u0416'   # Capital "ZHE" (Cyrillic letter)
echo -e '\u2708'   # Airplane (Dingbat font) symbol
echo -e '\u2622'   # Radioactivity trefoil

echo -e "The amplifier circuit requires a 100 \u2126 pull-up resistor."


unicode_var='\u2640'
echo -e $unicode_var      # Female symbol
printf "$unicode_var \n"  # Female symbol, with newline


#  And for something a bit more elaborate . . .

#  We can store Unicode symbols in an associative array,
#+ then retrieve them by name.
#  Run this in a gnome-terminal or a terminal with a large, bold font
#+ for better legibility.

declare -A symbol  # Associative array.

symbol[script_E]='\u2130'
symbol[script_F]='\u2131'
symbol[script_J]='\u2110'
symbol[script_M]='\u2133'
symbol[Rx]='\u211E'
symbol[TEL]='\u2121'
symbol[FAX]='\u213B'
symbol[care_of]='\u2105'
symbol[account]='\u2100'
symbol[trademark]='\u2122'


echo -ne "${symbol[script_E]}   "
echo -ne "${symbol[script_F]}   "
echo -ne "${symbol[script_J]}   "
echo -ne "${symbol[script_M]}   "
echo -ne "${symbol[Rx]}   "
echo -ne "${symbol[TEL]}   "
echo -ne "${symbol[FAX]}   "
echo -ne "${symbol[care_of]}   "
echo -ne "${symbol[account]}   "
echo -ne "${symbol[trademark]}   "
echo</PRE></FONT></TD></TR></TBODY></TABLE></P>
<DIV class=NOTE>
<P></P>
<TABLE class=NOTE border=0 width="90%">
<TBODY>
<TR>
<TD vAlign=top width=25 align=middle><IMG hspace=5 alt=Note src="http://tldp.org/LDP/abs/images/note.gif"></TD>
<TD vAlign=top align=left>
<P>The above example uses the <A href="http://tldp.org/LDP/abs/html/abs-guide.html#STRQ"><B class=COMMAND>$' ... '</B></A> <I class=FIRSTTERM>string-expansion</I> construct.</P></TD></TR></TBODY></TABLE></DIV>
<LI>
<P><A name=LASTPIPEREF></A></P>
<P>When the <TT class=REPLACEABLE><I>lastpipe</I></TT> shell option is set, the last command in a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#PIPEREF">pipe</A> <EM>doesn't run in a subshell</EM>.</P>
<DIV class=EXAMPLE><A name=LASTPIPEOPT></A>
<P><B>Example 37-10. Piping input to a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#READREF">read</A></B></P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# lastpipe-option.sh

line=''                   # Null value.
echo "\$line = "$line""   # $line =

echo

shopt -s lastpipe         # Error on Bash version -lt 4.2.
echo "Exit status of attempting to set \"lastpipe\" option is $?"
#     1 if Bash version -lt 4.2, 0 otherwise.

echo

head -1 $0 | read line    # Pipe the first line of the script to read.
#            ^^^^^^^^^      Not in a subshell!!!

echo "\$line = "$line""
# Older Bash releases       $line =
# Bash version 4.2          $line = #!/bin/bash</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<P>This option offers possible <SPAN class=QUOTE>"fixups"</SPAN> for these example scripts: <A href="http://tldp.org/LDP/abs/html/abs-guide.html#BADREAD">Example 34-3</A> and <A href="http://tldp.org/LDP/abs/html/abs-guide.html#READPIPE">Example 15-8</A>.</P>
<LI>
<P>Negative <A href="http://tldp.org/LDP/abs/html/abs-guide.html#ARRAYREF">array</A> indices permit counting backwards from the end of an array.</P>
<DIV class=EXAMPLE><A name=NEGARRAY></A>
<P><B>Example 37-11. Negative array indices</B></P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# neg-array.sh
# Requires Bash, version -ge 4.2.

array=( zero one two three four five )   # Six-element array.
#         0    1   2    3    4    5
#        -6   -5  -4   -3   -2   -1

# Negative array indices now permitted.
echo ${array[-1]}   # five
echo ${array[-2]}   # four
# ...
echo ${array[-6]}   # zero
# Negative array indices count backward from the last element+1.

# But, you cannot index past the beginning of the array.
echo ${array[-7]}   # array: bad array subscript


# So, what is this new feature good for?

echo "The last element in the array is "${array[-1]}""
# Which is quite a bit more straightforward than:
echo "The last element in the array is "${array[${#array[*]}-1]}""
echo

# And ...

index=0
let "neg_element_count = 0 - ${#array[*]}"
# Number of elements, converted to a negative number.

while [ $index -gt $neg_element_count ]; do
  ((index--)); echo -n "${array[index]} "
done  # Lists the elements in the array, backwards.
      # We have just simulated the "tac" command on this array.

echo

# See also neg-offset.sh.</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<LI>
<P><A href="http://tldp.org/LDP/abs/html/abs-guide.html#SUBSTREXTR01">Substring extraction</A> uses a negative <I class=FIRSTTERM>length</I> parameter to specify an offset from the <I class=FIRSTTERM>end</I> of the target string.</P>
<DIV class=EXAMPLE><A name=NEGOFFSET></A>
<P><B>Example 37-12. Negative parameter in string-extraction construct</B></P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# Bash, version -ge 4.2
# Negative length-index in substring extraction.
# Important: It changes the interpretation of this construct!

stringZ=abcABC123ABCabc

echo ${stringZ}                              # abcABC123ABCabc
#                   Position within string:    0123456789.....
echo ${stringZ:2:3}                          #   cAB
#  Count 2 chars forward from string beginning, and extract 3 chars.
#  ${string:position:length}

#  So far, nothing new, but now ...

                                             # abcABC123ABCabc
#                   Position within string:    0123....6543210
echo ${stringZ:3:-6}                         #    ABC123
#                ^
#  Index 3 chars forward from beginning and 6 chars backward from end,
#+ and extract everything in between.
#  ${string:offset-from-front:offset-from-end}
#  When the "length" parameter is negative, 
#+ it serves as an offset-from-end parameter.

#  See also neg-array.sh.</PRE></FONT></TD></TR></TBODY></TABLE></DIV></LI></UL>