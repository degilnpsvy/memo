<H1 class=SECT1><A name=SCRIPTANALYSIS></A>O.1. Analyzing Scripts</H1>
<P>Examine the following script. Run it, then explain what it does. Annotate the script and rewrite it in a more compact and elegant manner.</P>
<P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash

MAX=10000


  for((nr=1; nr&lt;$MAX; nr++))
  do

    let "t1 = nr % 5"
    if [ "$t1" -ne 3 ]
    then
      continue
    fi

    let "t2 = nr % 7"
    if [ "$t2" -ne 4 ]
    then
      continue
    fi

    let "t3 = nr % 9"
    if [ "$t3" -ne 5 ]
    then
      continue
    fi

  break   # What happens when you comment out this line? Why?

  done

  echo "Number = $nr"


exit 0</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>---</P>
<P>Explain what the following script does. It is really just a parameterized command-line pipe.</P>
<P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash

DIRNAME=/usr/bin
FILETYPE="shell script"
LOGFILE=logfile

file "$DIRNAME"/* | fgrep "$FILETYPE" | tee $LOGFILE | wc -l

exit 0</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>---</P>
<P>Examine and explain the following script. For hints, you might refer to the listings for <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FINDREF">find</A> and <A href="http://tldp.org/LDP/abs/html/abs-guide.html#STATREF">stat</A>.</P>
<P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash

# Author:  Nathan Coulter
# This code is released to the public domain.
# The author gave permission to use this code snippet in the ABS Guide.

find -maxdepth 1 -type f -printf '%f\000'  | {
   while read -d $'\000'; do
      mv "$REPLY" "$(date -d "$(stat -c '%y' "$REPLY") " '+%Y%m%d%H%M%S'
      )-$REPLY"
   done
}

# Warning: Test-drive this script in a "scratch" directory.
# It will somehow affect all the files there.</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>---</P>
<P>A reader sent in the following code snippet.</P>
<P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>while read LINE
do
  echo $LINE
done &lt; `tail -f /var/log/messages`</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>He wished to write a script tracking changes to the system log file, <TT class=FILENAME>/var/log/messages</TT>. Unfortunately, the above code block hangs and does nothing useful. Why? Fix this so it does work. (Hint: rather than <A href="http://tldp.org/LDP/abs/html/abs-guide.html#REDIRREF">redirecting the <TT class=FILENAME>stdin</TT> of the loop</A>, try a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#PIPEREF">pipe</A>.)</P>
<P>---</P>
<P>Analyze the following <SPAN class=QUOTE>"one-liner"</SPAN> (here split into two lines for clarity) contributed by Rory Winston:</P>
<P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>export SUM=0; for f in $(find src -name "*.java");
do export SUM=$(($SUM + $(wc -l $f | awk '{ print $1 }'))); done; echo $SUM</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>Hint: First, break the script up into bite-sized sections. Then, carefully examine its use of <A href="http://tldp.org/LDP/abs/html/abs-guide.html#DBLPARENS">double-parentheses</A> arithmetic, the <A href="http://tldp.org/LDP/abs/html/abs-guide.html#EXPORTREF">export</A> command, the <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FINDREF">find</A> command, the <A href="http://tldp.org/LDP/abs/html/abs-guide.html#WCREF">wc</A> command, and <A href="http://tldp.org/LDP/abs/html/abs-guide.html#AWKREF">awk</A>.</P>
<P>---</P>
<P>Analyze <A href="http://tldp.org/LDP/abs/html/abs-guide.html#LIFESLOW">Example A-10</A>, and reorganize it in a simplified and more logical style. See how many of the variables can be eliminated, and try to optimize the script to speed up its execution time.</P>
<P>Alter the script so that it accepts any ordinary ASCII text file as input for its initial <SPAN class=QUOTE>"generation"</SPAN>. The script will read the first <TT class=PARAMETER><I>$ROW*$COL</I></TT> characters, and set the occurrences of vowels as <SPAN class=QUOTE>"living"</SPAN> cells. Hint: be sure to translate the spaces in the input file to underscore characters.