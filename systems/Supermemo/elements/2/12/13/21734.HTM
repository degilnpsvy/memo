<H1><A name=LOCALIZATION></A>Appendix K. Localization</H1>
<P>Localization is an undocumented Bash feature.</P>
<P><A name=LOCALEREF></A>A localized shell script echoes its text output in the language defined as the system's locale. A Linux user in Berlin, Germany, would get script output in German, whereas his cousin in Berlin, Maryland, would get output from the same script in English.</P>
<P>To create a localized script, use the following template to write all messages to the user (error messages, prompts, etc.).</P>
<P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# localized.sh
#  Script by St&#233;phane Chazelas,
#+ modified by Bruno Haible, bugfixed by Alfredo Pironti.

. gettext.sh

E_CDERROR=65

error()
{
  printf "$@" &gt;&amp;2
  exit $E_CDERROR
}

cd $var || error "`eval_gettext \"Can\'t cd to \\\$var.\"`"
#  The triple backslashes (escapes) in front of $var needed
#+ "because eval_gettext expects a string
#+ where the variable values have not yet been substituted."
#    -- per Bruno Haible
read -p "`gettext \"Enter the value: \"`" var
#  ...


#  ------------------------------------------------------------------
#  Alfredo Pironti comments:

#  This script has been modified to not use the $"..." syntax in
#+ favor of the "`gettext \"...\"`" syntax.
#  This is ok, but with the new localized.sh program, the commands
#+ "bash -D filename" and "bash --dump-po-string filename"
#+ will produce no output
#+ (because those command are only searching for the $"..." strings)!
#  The ONLY way to extract strings from the new file is to use the
# 'xgettext' program. However, the xgettext program is buggy.

# Note that 'xgettext' has another bug.
#
# The shell fragment:
#    gettext -s "I like Bash"
# will be correctly extracted, but . . .
#    xgettext -s "I like Bash"
# . . . fails!
#  'xgettext' will extract "-s" because
#+ the command only extracts the
#+ very first argument after the 'gettext' word.


#  Escape characters:
#
#  To localize a sentence like
#     echo -e "Hello\tworld!"
#+ you must use
#     echo -e "`gettext \"Hello\\tworld\"`"
#  The "double escape character" before the `t' is needed because
#+ 'gettext' will search for a string like: 'Hello\tworld'
#  This is because gettext will read one literal `\')
#+ and will output a string like "Bonjour\tmonde",
#+ so the 'echo' command will display the message correctly.
#
#  You may not use
#     echo "`gettext -e \"Hello\tworld\"`"
#+ due to the xgettext bug explained above.



# Let's localize the following shell fragment:
#     echo "-h display help and exit"
#
# First, one could do this:
#     echo "`gettext \"-h display help and exit\"`"
#  This way 'xgettext' will work ok,
#+ but the 'gettext' program will read "-h" as an option!
#
# One solution could be
#     echo "`gettext -- \"-h display help and exit\"`"
#  This way 'gettext' will work,
#+ but 'xgettext' will extract "--", as referred to above.
#
# The workaround you may use to get this string localized is
#     echo -e "`gettext \"\\0-h display help and exit\"`"
#  We have added a \0 (NULL) at the beginning of the sentence.
#  This way 'gettext' works correctly, as does 'xgettext.'
#  Moreover, the NULL character won't change the behavior
#+ of the 'echo' command.
#  ------------------------------------------------------------------</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>
<TABLE border=1 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=SCREEN><TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>bash -D localized.sh</B></TT>
<TT class=COMPUTEROUTPUT>"Can't cd to %s."
 "Enter the value: "</TT></PRE></FONT></TD></TR></TBODY></TABLE>This lists all the localized text. (The <TT class=OPTION>-D</TT> option lists double-quoted strings prefixed by a <SPAN class=TOKEN>$</SPAN>, without executing the script.)</P>
<P>
<TABLE border=1 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=SCREEN><TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>bash --dump-po-strings localized.sh</B></TT>
<TT class=COMPUTEROUTPUT>#: a:6
 msgid "Can't cd to %s."
 msgstr ""
 #: a:7
 msgid "Enter the value: "
 msgstr ""</TT></PRE></FONT></TD></TR></TBODY></TABLE>The <TT class=OPTION>--dump-po-strings</TT> option to Bash resembles the <TT class=OPTION>-D</TT> option, but uses <A href="http://tldp.org/LDP/abs/html/abs-guide.html#GETTEXTREF">gettext</A> <SPAN class=QUOTE>"po"</SPAN> format. </P>
<DIV class=NOTE>
<P></P>
<TABLE class=NOTE border=0 width="100%">
<TBODY>
<TR>
<TD vAlign=top width=25 align=middle><IMG hspace=5 alt=Note src="http://tldp.org/LDP/abs/images/note.gif"></TD>
<TD vAlign=top align=left>
<P>Bruno Haible points out:</P>
<P>Starting with gettext-0.12.2, <B class=COMMAND>xgettext -o - localized.sh</B> is recommended instead of <B class=COMMAND>bash --dump-po-strings localized.sh</B>, because <B class=COMMAND>xgettext</B> . . .</P>
<P>1. understands the gettext and eval_gettext commands (whereas bash --dump-po-strings understands only its deprecated $"..." syntax)</P>
<P>2. can extract comments placed by the programmer, intended to be read by the translator.</P>
<P>This shell code is then not specific to Bash any more; it works the same way with Bash 1.x and other /bin/sh implementations.</P></TD></TR></TBODY></TABLE></DIV>
<P>Now, build a <TT class=FILENAME>language.po</TT> file for each language that the script will be translated into, specifying the <TT class=REPLACEABLE><I>msgstr</I></TT>. Alfredo Pironti gives the following example:</P>
<P>fr.po: 
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#: a:6
msgid "Can't cd to $var."
msgstr "Impossible de se positionner dans le repertoire $var."
#: a:7
msgid "Enter the value: "
msgstr "Entrez la valeur : "

#  The string are dumped with the variable names, not with the %s syntax,
#+ similar to C programs.
#+ This is a very cool feature if the programmer uses
#+ variable names that make sense!</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>Then, run <A href="http://tldp.org/LDP/abs/html/abs-guide.html#MSGFMTREF">msgfmt</A>.</P>
<P><TT class=USERINPUT><B>msgfmt -o localized.sh.mo fr.po</B></TT></P>
<P>Place the resulting <TT class=FILENAME>localized.sh.mo</TT> file in the <TT class=FILENAME>/usr/local/share/locale/fr/LC_MESSAGES</TT> directory, and at the beginning of the script, insert the lines: 
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>TEXTDOMAINDIR=/usr/local/share/locale
TEXTDOMAIN=localized.sh</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>If a user on a French system runs the script, she will get French messages.</P>
<DIV class=NOTE>
<P></P>
<TABLE class=NOTE border=0 width="100%">
<TBODY>
<TR>
<TD vAlign=top width=25 align=middle><IMG hspace=5 alt=Note src="http://tldp.org/LDP/abs/images/note.gif"></TD>
<TD vAlign=top align=left>
<P>With older versions of Bash or other shells, localization requires <A href="http://tldp.org/LDP/abs/html/abs-guide.html#GETTEXTREF">gettext</A>, using the <TT class=OPTION>-s</TT> option. In this case, the script becomes:</P>
<P><A name=GETTEXTEXAMPLE></A>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# localized.sh

E_CDERROR=65

error() {
  local format=$1
  shift
  printf "$(gettext -s "$format")" "$@" &gt;&amp;2
  exit $E_CDERROR
}
cd $var || error "Can't cd to %s." "$var"
read -p "$(gettext -s "Enter the value: ")" var
# ...</PRE></FONT></TD></TR></TBODY></TABLE></P></TD></TR></TBODY></TABLE></DIV>
<P>The <TT class=VARNAME>TEXTDOMAIN</TT> and <TT class=VARNAME>TEXTDOMAINDIR</TT> variables need to be set and exported to the environment. This should be done within the script itself.</P>
<P>---</P>
<P>This appendix written by St&#233;phane Chazelas, with modifications suggested by Alfredo Pironti, and by Bruno Haible, maintainer of GNU <A href="http://tldp.org/LDP/abs/html/abs-guide.html#GETTEXTREF">gettext</A>.