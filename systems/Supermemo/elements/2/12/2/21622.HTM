<H1 class=SECT1><A name=INTANDNONINT></A>36.1. Interactive and non-interactive shells and scripts</H1>
<P>An <I class=FIRSTTERM>interactive</I> shell reads commands from user input on a <TT class=FILENAME>tty</TT>. Among other things, such a shell reads startup files on activation, displays a prompt, and enables job control by default. The user can <I class=FIRSTTERM>interact</I> with the shell.</P>
<P>A shell running a script is always a non-interactive shell. All the same, the script can still access its <TT class=FILENAME>tty</TT>. It is even possible to emulate an interactive shell in a script. 
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
MY_PROMPT='$ '
while :
do
  echo -n "$MY_PROMPT"
  read line
  eval "$line"
  done

exit 0

# This example script, and much of the above explanation supplied by
# St&#233;phane Chazelas (thanks again).</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>Let us consider an <I class=FIRSTTERM>interactive</I> script to be one that requires input from the user, usually with <A href="http://tldp.org/LDP/abs/html/abs-guide.html#READREF">read</A> statements (see <A href="http://tldp.org/LDP/abs/html/abs-guide.html#EX36">Example 15-3</A>). <SPAN class=QUOTE>"Real life"</SPAN> is actually a bit messier than that. For now, assume an interactive script is bound to a tty, a script that a user has invoked from the console or an <I class=FIRSTTERM>xterm</I>.</P>
<P>Init and startup scripts are necessarily non-interactive, since they must run without human intervention. Many administrative and system maintenance scripts are likewise non-interactive. Unvarying repetitive tasks cry out for automation by non-interactive scripts.</P>
<P>Non-interactive scripts can run in the background, but interactive ones hang, waiting for input that never comes. Handle that difficulty by having an <B class=COMMAND>expect</B> script or embedded <A href="http://tldp.org/LDP/abs/html/abs-guide.html#HEREDOCREF">here document</A> feed input to an interactive script running as a background job. In the simplest case, redirect a file to supply input to a <B class=COMMAND>read</B> statement (<B class=COMMAND>read variable &lt;file</B>). These particular workarounds make possible general purpose scripts that run in either interactive or non-interactive modes.</P>
<P>If a script needs to test whether it is running in an interactive shell, it is simply a matter of finding whether the <I class=FIRSTTERM>prompt</I> variable, <A href="http://tldp.org/LDP/abs/html/abs-guide.html#PS1REF">$PS1</A> is set. (If the user is being prompted for input, then the script needs to display a prompt.)</P>
<P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>if [ -z $PS1 ] # no prompt?
### if [ -v PS1 ]   # On Bash 4.2+ ...
then
  # non-interactive
  ...
else
  # interactive
  ...
fi</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P><A name=IITEST></A>Alternatively, the script can test for the presence of option <SPAN class=QUOTE>"i"</SPAN> in the <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FLPREF">$-</A> flag.</P>
<P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>case $- in
*i*)    # interactive shell
;;
*)      # non-interactive shell
;;
# (Courtesy of "UNIX F.A.Q.," 1993)</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P><A name=II2TEST></A>However, John Lange describes an alternative method, using the <A href="http://tldp.org/LDP/abs/html/abs-guide.html#TERMTEST"><SPAN class=TOKEN>-t</SPAN> <I class=FIRSTTERM>test</I> operator</A>.</P>
<P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING># Test for a terminal!

fd=0   # stdin

#  As we recall, the -t test option checks whether the stdin, [ -t 0 ],
#+ or stdout, [ -t 1 ], in a given script is running in a terminal.
if [ -t "$fd" ]
then
  echo interactive
else
  echo non-interactive
fi


#  But, as John points out:
#    if [ -t 0 ] works ... when you're logged in locally
#    but fails when you invoke the command remotely via ssh.
#    So for a true test you also have to test for a socket.

if [[ -t "$fd" || -p /dev/stdin ]]
then
  echo interactive
else
  echo non-interactive
fi</PRE></FONT></TD></TR></TBODY></TABLE></P>
<DIV class=NOTE>
<P></P>
<TABLE class=NOTE border=0 width="100%">
<TBODY>
<TR>
<TD vAlign=top width=25 align=middle><IMG hspace=5 alt=Note src="http://tldp.org/LDP/abs/images/note.gif"></TD>
<TD vAlign=top align=left>
<P>Scripts may be forced to run in interactive mode with the <SPAN class=TOKEN>-i</SPAN> option or with a <TT class=USERINPUT><B>#!/bin/bash -i</B></TT> header. Be aware that this can cause erratic script behavior or show error messages even when no error is present.</P></TD></TR></TBODY></TABLE></DIV>