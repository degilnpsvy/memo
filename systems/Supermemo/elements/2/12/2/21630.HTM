<H2 class=SECT2><A name=AEN20679></A>36.7.2. Widgets</H2>
<P><A name=WIDGETREF></A></P>
<P>It would be nice to be able to invoke X-Windows widgets from a shell script. There happen to exist several packages that purport to do so, namely <I class=FIRSTTERM>Xscript</I>, <I class=FIRSTTERM>Xmenu</I>, and <I class=FIRSTTERM>widtools</I>. The first two of these no longer seem to be maintained. Fortunately, it is still possible to obtain <I class=FIRSTTERM>widtools</I> <A href="http://www.batse.msfc.nasa.gov/~mallozzi/home/software/xforms/src/widtools-2.0.tgz" target=_top>here</A>. </P>
<DIV class=CAUTION>
<P></P>
<TABLE class=CAUTION border=0 width="100%">
<TBODY>
<TR>
<TD vAlign=top width=25 align=middle><IMG hspace=5 alt=Caution src="http://tldp.org/LDP/abs/images/caution.gif"></TD>
<TD vAlign=top align=left>
<P>The <I class=FIRSTTERM>widtools</I> (widget tools) package requires the <I class=FIRSTTERM>XForms</I> library to be installed. Additionally, the <A href="http://tldp.org/LDP/abs/html/abs-guide.html#MAKEFILEREF">Makefile</A> needs some judicious editing before the package will build on a typical Linux system. Finally, three of the six widgets offered do not work (and, in fact, segfault).</P></TD></TR></TBODY></TABLE></DIV>
<P><A name=DIALOGREF></A></P>
<P>The <I class=FIRSTTERM>dialog</I> family of tools offers a method of calling <SPAN class=QUOTE>"dialog"</SPAN> widgets from a shell script. The original <I class=FIRSTTERM>dialog</I> utility works in a text console, but its successors, <I class=FIRSTTERM>gdialog</I>, <I class=FIRSTTERM>Xdialog</I>, and <I class=FIRSTTERM>kdialog</I> use X-Windows-based widget sets.</P>
<DIV class=EXAMPLE><A name=DIALOG></A>
<P><B>Example 36-22. Widgets invoked from a shell script</B></P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# dialog.sh: Using 'gdialog' widgets.

# Must have 'gdialog' installed on your system to run this script.
# Or, you can replace all instance of 'gdialog' below with 'kdialog' ...
# Version 1.1 (corrected 04/05/05)

# This script was inspired by the following article.
#     "Scripting for X Productivity," by Marco Fioretti,
#      LINUX JOURNAL, Issue 113, September 2003, pp. 86-9.
# Thank you, all you good people at LJ.


# Input error in dialog box.
E_INPUT=85
# Dimensions of display, input widgets.
HEIGHT=50
WIDTH=60

# Output file name (constructed out of script name).
OUTFILE=$0.output

# Display this script in a text widget.
gdialog --title "Displaying: $0" --textbox $0 $HEIGHT $WIDTH



# Now, we'll try saving input in a file.
echo -n "VARIABLE=" &gt; $OUTFILE
gdialog --title "User Input" --inputbox "Enter variable, please:" \
$HEIGHT $WIDTH 2&gt;&gt; $OUTFILE


if [ "$?" -eq 0 ]
# It's good practice to check exit status.
then
  echo "Executed \"dialog box\" without errors."
else
  echo "Error(s) in \"dialog box\" execution."
        # Or, clicked on "Cancel", instead of "OK" button.
  rm $OUTFILE
  exit $E_INPUT
fi



# Now, we'll retrieve and display the saved variable.
. $OUTFILE   # 'Source' the saved file.
echo "The variable input in the \"input box\" was: "$VARIABLE""


rm $OUTFILE  # Clean up by removing the temp file.
             # Some applications may need to retain this file.

exit $?

# Exercise: Rewrite this script using the 'zenity' widget set.</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<P><A name=XMESSAGEREF2></A>The <A href="http://tldp.org/LDP/abs/html/abs-guide.html#XMESSAGEREF">xmessage</A> command is a simple method of popping up a message/query window. For example: 
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>xmessage Fatal error in script! -button exit</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P><A name=ZENITYREF2></A>The latest entry in the widget sweepstakes is <A href="http://tldp.org/LDP/abs/html/abs-guide.html#ZENITYREF">zenity</A>. This utility pops up <I class=FIRSTTERM>GTK+</I> dialog widgets-and-windows, and it works very nicely within a script. 
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>get_info ()
{
  zenity --entry       #  Pops up query window . . .
                       #+ and prints user entry to stdout.

                       #  Also try the --calendar and --scale options.
}

answer=$( get_info )   #  Capture stdout in $answer variable.

echo "User entered: "$answer""</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>For other methods of scripting with widgets, try <I class=FIRSTTERM>Tk</I> or <I class=FIRSTTERM>wish</I> (<I class=FIRSTTERM>Tcl</I> derivatives), <I class=FIRSTTERM>PerlTk</I> (<I class=FIRSTTERM>Perl</I> with <I class=FIRSTTERM>Tk</I> extensions), <I class=FIRSTTERM>tksh</I> (<I class=FIRSTTERM>ksh</I> with <I class=FIRSTTERM>Tk</I> extensions), <I class=FIRSTTERM>XForms4Perl</I> (<I class=FIRSTTERM>Perl</I> with <I class=FIRSTTERM>XForms</I> extensions), <I class=FIRSTTERM>Gtk-Perl</I> (<I class=FIRSTTERM>Perl</I> with <I class=FIRSTTERM>Gtk</I> extensions), or <I class=FIRSTTERM>PyQt</I> (<I class=FIRSTTERM>Python</I> with <I class=FIRSTTERM>Qt</I> extensions).