<TABLE summary="Navigation header" width="100%">
<TBODY>
<TR>
<TH colSpan=3 align=middle><SPAN class=phrase>schedule_timeout</SPAN></TH></TR>
<TR>
<TD width="20%" align=left><A accessKey=p href="file:///C:/Users/donpope_tang/Documents/docbook/device-drivers/API-del-timer-sync.html">Prev</A>&nbsp;</TD>
<TH width="60%" align=middle>Delaying, scheduling, and timer routines</TH>
<TD width="20%" align=right>&nbsp;<A accessKey=n href="file:///C:/Users/donpope_tang/Documents/docbook/device-drivers/API-msleep.html">Next</A></TD></TR></TBODY></TABLE>
<HR>

<DIV class=refentry><A name=API-schedule-timeout></A>
<DIV class=titlepage></DIV>
<DIV class=refnamediv>
<H2>Name</H2>
<P>schedule_timeout &#8212; sleep until timeout </P></DIV>
<DIV class=refsynopsisdiv>
<H2>Synopsis</H2>
<DIV class=funcsynopsis>
<TABLE style="cellspacing: 0; cellpadding: 0" class=funcprototype-table border=0 summary="Function synopsis">
<TBODY>
<TR>
<TD><CODE class=funcdef>signed long __sched <B class=fsfunc>schedule_timeout </B>(</CODE></TD>
<TD>signed long <VAR class=pdparam>timeout</VAR><CODE>)</CODE>;</TD></TR></TBODY></TABLE>
<DIV class=funcprototype-spacer>&nbsp;</DIV></DIV></DIV>
<DIV class=refsect1><A name=idp41653756></A>
<H2>Arguments</H2>
<DIV class=variablelist>
<DL class=variablelist>
<DT><SPAN class=term><EM class=parameter><CODE>timeout</CODE></EM></SPAN> 
<DD>
<P>timeout value in jiffies </P></DD></DL></DIV></DIV>
<DIV class=refsect1><A name=idp41655324></A>
<H2>Description</H2>
<P>Make the current task sleep until <EM class=parameter><CODE>timeout</CODE></EM> jiffies have elapsed. The routine will return immediately unless the current task state has been set (see <CODE class=function>set_current_state</CODE>). </P>
<P>You can set the task state as follows - </P>
<P><CODE class=constant>TASK_UNINTERRUPTIBLE</CODE> - at least <EM class=parameter><CODE>timeout</CODE></EM> jiffies are guaranteed to pass before the routine returns. The routine will return 0 </P>
<P><CODE class=constant>TASK_INTERRUPTIBLE</CODE> - the routine may return early if a signal is delivered to the current task. In this case the remaining time in jiffies will be returned, or 0 if the timer expired in time </P>
<P>The current task state is guaranteed to be TASK_RUNNING when this routine returns. </P>
<P>Specifying a <EM class=parameter><CODE>timeout</CODE></EM> value of <CODE class=constant>MAX_SCHEDULE_TIMEOUT</CODE> will schedule the CPU away without a bound on the timeout. In this case the return value will be <CODE class=constant>MAX_SCHEDULE_TIMEOUT</CODE>. </P>
<P>In all cases the return value is guaranteed to be non-negative. </P></DIV></DIV>