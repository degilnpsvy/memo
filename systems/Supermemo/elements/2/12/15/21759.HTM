Example:<BR>&nbsp;&nbsp;#arch/x86/boot/Makefile<BR>&nbsp;&nbsp;LDFLAGS_bootsect := -Ttext 0x0 -s --oformat binary<BR>&nbsp;&nbsp;LDFLAGS_setup&nbsp;&nbsp;&nbsp; := -Ttext 0x0 -s --oformat binary -e begtext</P>
<P>&nbsp;&nbsp;targets += setup setup.o bootsect bootsect.o<BR>&nbsp;&nbsp;$(obj)/setup $(obj)/bootsect: %: %.o FORCE<BR>&nbsp;&nbsp;&nbsp;$(call if_changed,ld)</P>
<P>&nbsp;In this example, there are two possible targets, requiring different<BR>&nbsp;options to the linker. The linker options are specified using the<BR>&nbsp;LDFLAGS_$@ syntax - one for each potential target.<BR>&nbsp;$(targets) are assigned all potential targets, by which kbuild knows<BR>&nbsp;the targets and will:<BR>&nbsp;&nbsp;1) check for commandline changes<BR>&nbsp;&nbsp;2) delete target during make clean</P>
<P>&nbsp;The ": %: %.o" part of the prerequisite is a shorthand that<BR>&nbsp;free us from listing the setup.o and bootsect.o files.<BR>&nbsp;Note: It is a common mistake to forget the "target :=" assignment,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; resulting in the target file being recompiled for no<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; obvious reason.