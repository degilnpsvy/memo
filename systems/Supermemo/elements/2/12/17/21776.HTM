# scripts/kconfig/Makefile</P>
<P># ===========================================================================<BR># Kernel configuration targets<BR># These targets are used from top-level makefile</P>
<P></P>
<P>PHONY += oldconfig xconfig gconfig menuconfig config silentoldconfig update-po-config \<BR>&nbsp;localmodconfig localyesconfig</P>
<P>ifdef KBUILD_KCONFIG<BR>Kconfig := $(KBUILD_KCONFIG)<BR>else<BR>Kconfig := Kconfig<BR>endif</P>
<P># We need this, in case the user has it in its environment<BR>unexport CONFIG_</P>
<P>xconfig: $(obj)/qconf<BR>&nbsp;$&lt; $(Kconfig)</P>
<P>gconfig: $(obj)/gconf<BR>&nbsp;$&lt; $(Kconfig)</P>
<P>menuconfig: $(obj)/mconf<BR>&nbsp;$&lt; $(Kconfig)</P>
<P>config: $(obj)/conf<BR>&nbsp;$&lt; --oldaskconfig $(Kconfig)</P>
<P>nconfig: $(obj)/nconf<BR>&nbsp;$&lt; $(Kconfig)</P>
<P>oldconfig: $(obj)/conf<BR>&nbsp;$&lt; --$@ $(Kconfig)</P>
<P>silentoldconfig: $(obj)/conf<BR>&nbsp;$(Q)mkdir -p include/config include/generated<BR>&nbsp;$&lt; --$@ $(Kconfig)</P>
<P>localyesconfig localmodconfig: $(obj)/streamline_config.pl $(obj)/conf<BR>&nbsp;$(Q)mkdir -p include/config include/generated<BR>&nbsp;$(Q)perl $&lt; --$@ $(srctree) $(Kconfig) &gt; .tmp.config<BR>&nbsp;$(Q)if [ -f .config ]; then &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;cmp -s .tmp.config .config ||&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;(mv -f .config .config.old.1;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp; mv -f .tmp.config .config;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp; $(obj)/conf --silentoldconfig $(Kconfig);&nbsp;\<BR>&nbsp;&nbsp;&nbsp; mv -f .config.old.1 .config.old)&nbsp;&nbsp;\<BR>&nbsp;else&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;mv -f .tmp.config .config;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;$(obj)/conf --silentoldconfig $(Kconfig);&nbsp;\<BR>&nbsp;fi<BR>&nbsp;$(Q)rm -f .tmp.config</P>
<P># Create new linux.pot file<BR># Adjust charset to UTF-8 in .po file to accept UTF-8 in Kconfig files<BR>update-po-config: $(obj)/kxgettext $(obj)/gconf.glade.h<BR>&nbsp;$(Q)echo "&nbsp; GEN&nbsp;&nbsp;&nbsp;&nbsp; config.pot"<BR>&nbsp;$(Q)xgettext --default-domain=linux&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp;&nbsp;&nbsp; --add-comments --keyword=_ --keyword=N_&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp;&nbsp;&nbsp; --from-code=UTF-8&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp;&nbsp;&nbsp; --files-from=$(srctree)/scripts/kconfig/POTFILES.in&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp;&nbsp;&nbsp; --directory=$(srctree) --directory=$(objtree)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp;&nbsp;&nbsp; --output $(obj)/config.pot<BR>&nbsp;$(Q)sed -i s/CHARSET/UTF-8/ $(obj)/config.pot<BR>&nbsp;$(Q)(for i in `ls $(srctree)/arch/*/Kconfig&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp;&nbsp;&nbsp; $(srctree)/arch/*/um/Kconfig`;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp;&nbsp;&nbsp; do&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp;echo "&nbsp; GEN&nbsp;&nbsp;&nbsp;&nbsp; $$i";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp;$(obj)/kxgettext $$i&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &gt;&gt; $(obj)/config.pot;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp;&nbsp;&nbsp; done )<BR>&nbsp;$(Q)echo "&nbsp; GEN&nbsp;&nbsp;&nbsp;&nbsp; linux.pot"<BR>&nbsp;$(Q)msguniq --sort-by-file --to-code=UTF-8 $(obj)/config.pot \<BR>&nbsp;&nbsp;&nbsp;&nbsp; --output $(obj)/linux.pot<BR>&nbsp;$(Q)rm -f $(obj)/config.pot</P>
<P>PHONY += allnoconfig allyesconfig allmodconfig alldefconfig randconfig</P>
<P>allnoconfig allyesconfig allmodconfig alldefconfig randconfig: $(obj)/conf<BR>&nbsp;$&lt; --$@ $(Kconfig)</P>
<P>PHONY += listnewconfig olddefconfig oldnoconfig savedefconfig defconfig</P>
<P>listnewconfig olddefconfig: $(obj)/conf<BR>&nbsp;$&lt; --$@ $(Kconfig)</P>
<P># oldnoconfig is an alias of olddefconfig, because people already are dependent<BR># on its behavior(sets new symbols to their default value but not 'n') with the<BR># counter-intuitive name.<BR>oldnoconfig: $(obj)/conf<BR>&nbsp;$&lt; --olddefconfig $(Kconfig)</P>
<P>savedefconfig: $(obj)/conf<BR>&nbsp;$&lt; <A href="mailto:--$@=defconfig">--$@=defconfig</A> $(Kconfig)</P>
<P>defconfig: $(obj)/conf<BR>ifeq ($(KBUILD_DEFCONFIG),)<BR>&nbsp;$&lt; --defconfig $(Kconfig)<BR>else<BR>&nbsp;@echo "*** Default configuration is based on '$(KBUILD_DEFCONFIG)'"<BR>&nbsp;$(Q)$&lt; --defconfig=arch/$(SRCARCH)/configs/$(KBUILD_DEFCONFIG) $(Kconfig)<BR>endif</P>
<P>%_defconfig: $(obj)/conf<BR>&nbsp;$(Q)$&lt; --defconfig=arch/$(SRCARCH)/configs/$@ $(Kconfig)</P>
<P>configfiles=$(wildcard $(srctree)/kernel/configs/$(1).config $(srctree)/arch/$(SRCARCH)/configs/$(1).config)</P>
<P>define mergeconfig<BR>$(if $(wildcard $(objtree)/.config),, $(error You need an existing .config for this target))<BR>$(if $(call configfiles,$(1)),, $(error No configuration exists for this target on this architecture))<BR>$(Q)$(CONFIG_SHELL) $(srctree)/scripts/kconfig/merge_config.sh -m -O $(objtree) $(objtree)/.config $(call configfiles,$(1))<BR>$(Q)yes "" | $(MAKE) -f $(srctree)/Makefile oldconfig<BR>endef</P>
<P>PHONY += kvmconfig<BR>kvmconfig:<BR>&nbsp;$(call mergeconfig,kvm_guest)</P>
<P>PHONY += tinyconfig<BR>tinyconfig: allnoconfig<BR>&nbsp;$(call mergeconfig,tiny)</P>
<P># Help text used by make help<BR>help:<BR>&nbsp;@echo&nbsp; '&nbsp; config&nbsp;&nbsp; - Update current config utilising a line-oriented program'<BR>&nbsp;@echo&nbsp; '&nbsp; nconfig&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Update current config utilising a ncurses menu based program'<BR>&nbsp;@echo&nbsp; '&nbsp; menuconfig&nbsp;&nbsp; - Update current config utilising a menu based program'<BR>&nbsp;@echo&nbsp; '&nbsp; xconfig&nbsp;&nbsp; - Update current config utilising a QT based front-end'<BR>&nbsp;@echo&nbsp; '&nbsp; gconfig&nbsp;&nbsp; - Update current config utilising a GTK based front-end'<BR>&nbsp;@echo&nbsp; '&nbsp; oldconfig&nbsp;&nbsp; - Update current config utilising a provided .config as base'<BR>&nbsp;@echo&nbsp; '&nbsp; localmodconfig&nbsp; - Update current config disabling modules not loaded'<BR>&nbsp;@echo&nbsp; '&nbsp; localyesconfig&nbsp; - Update current config converting local mods to core'<BR>&nbsp;@echo&nbsp; '&nbsp; silentoldconfig - Same as oldconfig, but quietly, additionally update deps'<BR>&nbsp;@echo&nbsp; '&nbsp; defconfig&nbsp;&nbsp; - New config with default from ARCH supplied defconfig'<BR>&nbsp;@echo&nbsp; '&nbsp; savedefconfig&nbsp;&nbsp; - Save current config as ./defconfig (minimal config)'<BR>&nbsp;@echo&nbsp; '&nbsp; allnoconfig&nbsp;&nbsp; - New config where all options are answered with no'<BR>&nbsp;@echo&nbsp; '&nbsp; allyesconfig&nbsp;&nbsp; - New config where all options are accepted with yes'<BR>&nbsp;@echo&nbsp; '&nbsp; allmodconfig&nbsp;&nbsp; - New config selecting modules when possible'<BR>&nbsp;@echo&nbsp; '&nbsp; alldefconfig&nbsp;&nbsp;&nbsp; - New config with all symbols set to default'<BR>&nbsp;@echo&nbsp; '&nbsp; randconfig&nbsp;&nbsp; - New config with random answer to all options'<BR>&nbsp;@echo&nbsp; '&nbsp; listnewconfig&nbsp;&nbsp; - List new options'<BR>&nbsp;@echo&nbsp; '&nbsp; olddefconfig&nbsp;&nbsp; - Same as silentoldconfig but sets new symbols to their default value'<BR>&nbsp;@echo&nbsp; '&nbsp; kvmconfig&nbsp;&nbsp; - Enable additional options for guest kernel support'<BR>&nbsp;@echo&nbsp; '&nbsp; tinyconfig&nbsp;&nbsp; - Configure the tiniest possible kernel'</P>
<P># lxdialog stuff<BR>check-lxdialog&nbsp; := $(srctree)/$(src)/lxdialog/check-lxdialog.sh</P>
<P># Use recursively expanded variables so we do not call gcc unless<BR># we really need to do so. (Do not call gcc as part of make mrproper)<BR>HOST_EXTRACFLAGS += $(shell $(CONFIG_SHELL) $(check-lxdialog) -ccflags) \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -DLOCALE</P>
<P># ===========================================================================<BR># Shared Makefile for the various kconfig executables:<BR># conf:&nbsp;&nbsp; Used for defconfig, oldconfig and related targets<BR># nconf:&nbsp; Used for the nconfig target.<BR>#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Utilizes ncurses<BR># mconf:&nbsp; Used for the menuconfig target<BR>#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Utilizes the lxdialog package<BR># qconf:&nbsp; Used for the xconfig target<BR>#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Based on QT which needs to be installed to compile it<BR># gconf:&nbsp; Used for the gconfig target<BR>#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Based on GTK which needs to be installed to compile it<BR># object files used by all kconfig flavours</P>
<P>lxdialog := lxdialog/checklist.o lxdialog/util.o lxdialog/inputbox.o<BR>lxdialog += lxdialog/textbox.o lxdialog/yesno.o lxdialog/menubox.o</P>
<P>conf-objs&nbsp;:= conf.o&nbsp; zconf.tab.o<BR>mconf-objs&nbsp;&nbsp;&nbsp;&nbsp; := mconf.o zconf.tab.o $(lxdialog)<BR>nconf-objs&nbsp;&nbsp;&nbsp;&nbsp; := nconf.o zconf.tab.o nconf.gui.o<BR>kxgettext-objs&nbsp;:= kxgettext.o zconf.tab.o<BR>qconf-cxxobjs&nbsp;:= qconf.o<BR>qconf-objs&nbsp;:= zconf.tab.o<BR>gconf-objs&nbsp;:= gconf.o zconf.tab.o</P>
<P>hostprogs-y := conf nconf mconf kxgettext qconf gconf</P>
<P>clean-files&nbsp;:= qconf.moc .tmp_qtcheck .tmp_gtkcheck<BR>clean-files&nbsp;+= zconf.tab.c zconf.lex.c zconf.hash.c gconf.glade.h<BR>clean-files&nbsp;&nbsp;&nbsp;&nbsp; += config.pot linux.pot</P>
<P># Check that we have the required ncurses stuff installed for lxdialog (menuconfig)<BR>PHONY += $(obj)/dochecklxdialog<BR>$(addprefix $(obj)/,$(lxdialog)): $(obj)/dochecklxdialog<BR>$(obj)/dochecklxdialog:<BR>&nbsp;$(Q)$(CONFIG_SHELL) $(check-lxdialog) -check $(HOSTCC) $(HOST_EXTRACFLAGS) $(HOSTLOADLIBES_mconf)</P>
<P>always := dochecklxdialog</P>
<P># Add environment specific flags<BR>HOST_EXTRACFLAGS += $(shell $(CONFIG_SHELL) $(srctree)/$(src)/check.sh $(HOSTCC) $(HOSTCFLAGS))</P>
<P># generated files seem to need this to find local include files<BR>HOSTCFLAGS_zconf.lex.o&nbsp;:= -I$(src)<BR>HOSTCFLAGS_zconf.tab.o&nbsp;:= -I$(src)</P>
<P>LEX_PREFIX_zconf&nbsp;:= zconf<BR>YACC_PREFIX_zconf&nbsp;:= zconf</P>
<P>HOSTLOADLIBES_qconf&nbsp;= $(KC_QT_LIBS)<BR>HOSTCXXFLAGS_qconf.o&nbsp;= $(KC_QT_CFLAGS)</P>
<P>HOSTLOADLIBES_gconf&nbsp;= `pkg-config --libs gtk+-2.0 gmodule-2.0 libglade-2.0`<BR>HOSTCFLAGS_gconf.o&nbsp;= `pkg-config --cflags gtk+-2.0 gmodule-2.0 libglade-2.0` \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -Wno-missing-prototypes</P>
<P>HOSTLOADLIBES_mconf&nbsp;&nbsp; = $(shell $(CONFIG_SHELL) $(check-lxdialog) -ldflags $(HOSTCC))</P>
<P>HOSTLOADLIBES_nconf&nbsp;= $(shell \<BR>&nbsp;&nbsp;&nbsp;&nbsp;pkg-config --libs menuw panelw ncursesw 2&gt;/dev/null \<BR>&nbsp;&nbsp;&nbsp;&nbsp;|| pkg-config --libs menu panel ncurses 2&gt;/dev/null \<BR>&nbsp;&nbsp;&nbsp;&nbsp;|| echo "-lmenu -lpanel -lncurses"&nbsp; )<BR>$(obj)/qconf.o: $(obj)/.tmp_qtcheck</P>
<P>ifeq ($(MAKECMDGOALS),xconfig)<BR>$(obj)/.tmp_qtcheck: $(src)/Makefile<BR>-include $(obj)/.tmp_qtcheck</P>
<P># QT needs some extra effort...<BR>$(obj)/.tmp_qtcheck:<BR>&nbsp;@set -e; echo "&nbsp; CHECK&nbsp;&nbsp; qt"; dir=""; pkg=""; \<BR>&nbsp;if ! pkg-config --exists QtCore 2&gt; /dev/null; then \<BR>&nbsp;&nbsp;&nbsp;&nbsp; echo "* Unable to find the QT4 tool qmake. Trying to use QT3"; \<BR>&nbsp;&nbsp;&nbsp;&nbsp; pkg-config --exists qt 2&gt; /dev/null &amp;&amp; pkg=qt; \<BR>&nbsp;&nbsp;&nbsp;&nbsp; pkg-config --exists qt-mt 2&gt; /dev/null &amp;&amp; pkg=qt-mt; \<BR>&nbsp;&nbsp;&nbsp;&nbsp; if [ -n "$$pkg" ]; then \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cflags="\$$(shell pkg-config $$pkg --cflags)"; \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; libs="\$$(shell pkg-config $$pkg --libs)"; \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; moc="\$$(shell pkg-config $$pkg --variable=prefix)/bin/moc"; \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dir="$$(pkg-config $$pkg --variable=prefix)"; \<BR>&nbsp;&nbsp;&nbsp;&nbsp; else \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for d in $$QTDIR /usr/share/qt* /usr/lib/qt*; do \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if [ -f $$d/include/qconfig.h ]; then dir=$$d; break; fi; \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; done; \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if [ -z "$$dir" ]; then \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo &gt;&amp;2 "*"; \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo &gt;&amp;2 "* Unable to find any QT installation. Please make sure that"; \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo &gt;&amp;2 "* the QT4 or QT3 development package is correctly installed and"; \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo &gt;&amp;2 "* either qmake can be found or install pkg-config or set"; \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo &gt;&amp;2 "* the QTDIR environment variable to the correct location."; \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo &gt;&amp;2 "*"; \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; false; \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fi; \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; libpath=$$dir/lib; lib=qt; osdir=""; \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(HOSTCXX) -print-multi-os-directory &gt; /dev/null 2&gt;&amp;1 &amp;&amp; \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; osdir=x$$($(HOSTCXX) -print-multi-os-directory); \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; test -d $$libpath/$$osdir &amp;&amp; libpath=$$libpath/$$osdir; \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; test -f $$libpath/libqt-mt.so &amp;&amp; lib=qt-mt; \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cflags="-I$$dir/include"; \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; libs="-L$$libpath -Wl,-rpath,$$libpath -l$$lib"; \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; moc="$$dir/bin/moc"; \<BR>&nbsp;&nbsp;&nbsp;&nbsp; fi; \<BR>&nbsp;&nbsp;&nbsp;&nbsp; if [ ! -x $$dir/bin/moc -a -x /usr/bin/moc ]; then \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo "*"; \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo "* Unable to find $$dir/bin/moc, using /usr/bin/moc instead."; \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; echo "*"; \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; moc="/usr/bin/moc"; \<BR>&nbsp;&nbsp;&nbsp;&nbsp; fi; \<BR>&nbsp;else \<BR>&nbsp;&nbsp; cflags="\$$(shell pkg-config QtCore QtGui Qt3Support --cflags)"; \<BR>&nbsp;&nbsp; libs="\$$(shell pkg-config QtCore QtGui Qt3Support --libs)"; \<BR>&nbsp;&nbsp; moc="\$$(shell pkg-config QtCore --variable=moc_location)"; \<BR>&nbsp;&nbsp; [ -n "$$moc" ] || moc="\$$(shell pkg-config QtCore --variable=prefix)/bin/moc"; \<BR>&nbsp;fi; \<BR>&nbsp;echo "KC_QT_CFLAGS=$$cflags" &gt; $@; \<BR>&nbsp;echo "KC_QT_LIBS=$$libs" &gt;&gt; $@; \<BR>&nbsp;echo "KC_QT_MOC=$$moc" &gt;&gt; $@<BR>endif</P>
<P>$(obj)/gconf.o: $(obj)/.tmp_gtkcheck</P>
<P>ifeq ($(MAKECMDGOALS),gconfig)<BR>-include $(obj)/.tmp_gtkcheck</P>
<P># GTK needs some extra effort, too...<BR>$(obj)/.tmp_gtkcheck:<BR>&nbsp;@if `pkg-config --exists gtk+-2.0 gmodule-2.0 libglade-2.0`; then&nbsp;&nbsp;\<BR>&nbsp;&nbsp;if `pkg-config --atleast-version=2.0.0 gtk+-2.0`; then&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;touch $@;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;else&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;echo &gt;&amp;2 "*"; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;echo &gt;&amp;2 "* GTK+ is present but version &gt;= 2.0.0 is required.";&nbsp;\<BR>&nbsp;&nbsp;&nbsp;echo &gt;&amp;2 "*";&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;false;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;fi&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;else&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;echo &gt;&amp;2 "*"; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;echo &gt;&amp;2 "* Unable to find the GTK+ installation. Please make sure that"; &nbsp;\<BR>&nbsp;&nbsp;echo &gt;&amp;2 "* the GTK+ 2.0 development package is correctly installed..."; &nbsp;\<BR>&nbsp;&nbsp;echo &gt;&amp;2 "* You need gtk+-2.0, glib-2.0 and libglade-2.0."; &nbsp;&nbsp;\<BR>&nbsp;&nbsp;echo &gt;&amp;2 "*"; &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;false;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;fi<BR>endif</P>
<P>$(obj)/zconf.tab.o: $(obj)/zconf.lex.c $(obj)/zconf.hash.c</P>
<P>$(obj)/qconf.o: $(obj)/qconf.moc</P>
<P>quiet_cmd_moc = MOC&nbsp;&nbsp;&nbsp;&nbsp; $@<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmd_moc = $(KC_QT_MOC) -i $&lt; -o $@</P>
<P>$(obj)/%.moc: $(src)/%.h $(obj)/.tmp_qtcheck<BR>&nbsp;$(call cmd,moc)</P>
<P># Extract gconf menu items for I18N support<BR>$(obj)/gconf.glade.h: $(obj)/gconf.glade<BR>&nbsp;$(Q)intltool-extract --type=gettext/glade --srcdir=$(srctree) \<BR>&nbsp;$(obj)/gconf.glade