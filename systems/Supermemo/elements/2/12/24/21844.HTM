<TABLE summary="Navigation header" width="100%">
<TBODY>
<TR>
<TH colSpan=3 align=middle><SPAN class=phrase>threadgroup_lock</SPAN></TH></TR>
<TR>
<TD width="20%" align=left><A accessKey=p href="file:///C:/Users/donpope_tang/Documents/docbook/device-drivers/API-is-idle-task.html">Prev</A>&nbsp;</TD>
<TH width="60%" align=middle>Delaying, scheduling, and timer routines</TH>
<TD width="20%" align=right>&nbsp;<A accessKey=n href="file:///C:/Users/donpope_tang/Documents/docbook/device-drivers/API-threadgroup-unlock.html">Next</A></TD></TR></TBODY></TABLE>
<HR>

<DIV class=refentry><A name=API-threadgroup-lock></A>
<DIV class=titlepage></DIV>
<DIV class=refnamediv>
<H2>Name</H2>
<P>threadgroup_lock &#8212; lock threadgroup </P></DIV>
<DIV class=refsynopsisdiv>
<H2>Synopsis</H2>
<DIV class=funcsynopsis>
<TABLE style="cellspacing: 0; cellpadding: 0" class=funcprototype-table border=0 summary="Function synopsis">
<TBODY>
<TR>
<TD><CODE class=funcdef>void <B class=fsfunc>threadgroup_lock </B>(</CODE></TD>
<TD>struct task_struct * <VAR class=pdparam>tsk</VAR><CODE>)</CODE>;</TD></TR></TBODY></TABLE>
<DIV class=funcprototype-spacer>&nbsp;</DIV></DIV></DIV>
<DIV class=refsect1><A name=idp39605244></A>
<H2>Arguments</H2>
<DIV class=variablelist>
<DL class=variablelist>
<DT><SPAN class=term><EM class=parameter><CODE>tsk</CODE></EM></SPAN> 
<DD>
<P>member task of the threadgroup to lock </P></DD></DL></DIV></DIV>
<DIV class=refsect1><A name=idp39606860></A>
<H2>Description</H2>
<P>Lock the threadgroup <EM class=parameter><CODE>tsk</CODE></EM> belongs to. No new task is allowed to enter and member tasks aren't allowed to exit (as indicated by PF_EXITING) or change -&gt;group_leader/pid. This is useful for cases where the threadgroup needs to stay stable across blockable operations. </P>
<P>fork and exit paths explicitly call threadgroup_change_{begin|end}() for synchronization. While held, no new task will be added to threadgroup and no existing live task will have its PF_EXITING set. </P>
<P><CODE class=function>de_thread</CODE> does threadgroup_change_{begin|end}() when a non-leader sub-thread becomes a new leader. </P></DIV></DIV>