# Documentation/driver-mode/device.txt 
<P></P>
<P>The Basic Device Structure<BR>~~~~~~~~~~~~~~~~~~~~~~~~~~</P>
<P></P>
<P>See the kerneldoc for the struct device.</P>
<P><BR><FONT class=extract>Programming Interface<BR>~~~~~~~~~~~~~~~~~~~~~<BR>The bus driver that discovers the device uses this to register the<BR>device with the core:</FONT></P>
<P><FONT class=extract>int device_register(struct device * dev);</FONT></P>
<P><FONT class=extract>The bus should initialize the following fields:</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; - parent<BR>&nbsp;&nbsp;&nbsp; - name<BR>&nbsp;&nbsp;&nbsp; - bus_id<BR>&nbsp;&nbsp;&nbsp; - bus</FONT></P>
<P><FONT class=extract>A device is removed from the core when its reference count goes to<BR>0. The reference count can be adjusted using:</FONT></P>
<P><FONT class=extract>struct device * get_device(struct device * dev);<BR>void put_device(struct device * dev);</FONT></P>
<P><FONT class=extract>get_device() will return a pointer to the struct device passed to it<BR>if the reference is not already 0 (if it's in the process of being<BR>removed already).</FONT></P>
<P><FONT class=extract>A driver can access the lock in the device structure using: </FONT></P>
<P><FONT class=extract>void lock_device(struct device * dev);<BR>void unlock_device(struct device * dev);</FONT></P>
<P><BR><FONT class=extract>Attributes<BR>~~~~~~~~~~<BR>struct device_attribute {<BR>&nbsp;struct attribute&nbsp;attr;<BR>&nbsp;ssize_t (*show)(struct device *dev, struct device_attribute *attr,<BR>&nbsp;&nbsp;&nbsp;char *buf);<BR>&nbsp;ssize_t (*store)(struct device *dev, struct device_attribute *attr,<BR>&nbsp;&nbsp;&nbsp; const char *buf, size_t count);<BR>};</FONT></P>
<P><FONT class=extract>Attributes of devices can be exported by a device driver through sysfs.</FONT></P>
<P><FONT class=extract>Please see Documentation/filesystems/sysfs.txt for more information<BR>on how sysfs works.</FONT></P>
<P><FONT class=extract>As explained in Documentation/kobject.txt, device attributes must be be<BR>created before the KOBJ_ADD uevent is generated. The only way to realize<BR>that is by defining an attribute group.</FONT></P>
<P><FONT class=extract>Attributes are declared using a macro called DEVICE_ATTR:</FONT></P>
<P><FONT class=extract>#define DEVICE_ATTR(name,mode,show,store)</FONT></P>
<P><FONT class=extract>Example:</FONT></P>
<P><FONT class=extract>static DEVICE_ATTR(type, 0444, show_type, NULL);<BR>static DEVICE_ATTR(power, 0644, show_power, store_power);</FONT></P>
<P><FONT class=extract>This declares two structures of type struct device_attribute with respective<BR>names 'dev_attr_type' and 'dev_attr_power'. These two attributes can be<BR>organized as follows into a group:</FONT></P>
<P><FONT class=extract>static struct attribute *dev_attrs[] = {<BR>&nbsp;&amp;dev_attr_type.attr,<BR>&nbsp;&amp;dev_attr_power.attr,<BR>&nbsp;NULL,<BR>};</FONT></P>
<P><FONT class=extract>static struct attribute_group dev_attr_group = {<BR>&nbsp;.attrs = dev_attrs,<BR>};</FONT></P>
<P><FONT class=extract>static const struct attribute_group *dev_attr_groups[] = {<BR>&nbsp;&amp;dev_attr_group,<BR>&nbsp;NULL,<BR>};</FONT></P>
<P><FONT class=extract>This array of groups can then be associated with a device by setting the<BR>group pointer in struct device before device_register() is invoked:</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; dev-&gt;groups = dev_attr_groups;<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; device_register(dev);</FONT></P>
<P><FONT class=extract>The device_register() function will use the 'groups' pointer to create the<BR>device attributes and the device_unregister() function will use this pointer<BR>to remove the device attributes.</FONT></P>
<P><FONT class=extract>Word of warning:&nbsp; While the kernel allows device_create_file() and<BR>device_remove_file() to be called on a device at any time, userspace has<BR>strict expectations on when attributes get created.&nbsp; When a new device is<BR>registered in the kernel, a uevent is generated to notify userspace (like<BR>udev) that a new device is available.&nbsp; If attributes are added after the<BR>device is registered, then userspace won't get notified and userspace will<BR>not know about the new attributes.</FONT></P>
<P><FONT class=extract>This is important for device driver that need to publish additional<BR>attributes for a device at driver probe time.&nbsp; If the device driver simply<BR>calls device_create_file() on the device structure passed to it, then<BR>userspace will never be notified of the new attributes.</FONT>