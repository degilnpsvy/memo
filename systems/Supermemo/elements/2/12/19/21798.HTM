# Documentation/driver-mode/devres.txt 
<P></P>
<P>Devres - Managed Device Resource<BR>================================</P>
<P></P>
<P>Tejun Heo&nbsp;&lt;<A href="mailto:teheo@suse.de">teheo@suse.de</A>&gt;</P>
<P>First draft&nbsp;10 January 2007</P>
<P><BR>1. Intro&nbsp;&nbsp;&nbsp;: Huh? Devres?<BR>2. Devres&nbsp;&nbsp;&nbsp;: Devres in a nutshell<BR>3. Devres Group&nbsp;&nbsp;&nbsp;: Group devres'es and release them together<BR>4. Details&nbsp;&nbsp;&nbsp;: Life time rules, calling context, ...<BR>5. Overhead&nbsp;&nbsp;&nbsp;: How much do we have to pay for this?<BR>6. List of managed interfaces&nbsp;: Currently implemented managed interfaces</P>
<P><BR>&nbsp; 1. Intro<BR>&nbsp; --------</P>
<P>devres came up while trying to convert libata to use iomap.&nbsp; Each<BR>iomapped address should be kept and unmapped on driver detach.&nbsp; For<BR>example, a plain SFF ATA controller (that is, good old PCI IDE) in<BR>native mode makes use of 5 PCI BARs and all of them should be<BR>maintained.</P>
<P>As with many other device drivers, libata low level drivers have<BR>sufficient bugs in -&gt;remove and -&gt;probe failure path.&nbsp; Well, yes,<BR>that's probably because libata low level driver developers are lazy<BR>bunch, but aren't all low level driver developers?&nbsp; After spending a<BR>day fiddling with braindamaged hardware with no document or<BR>braindamaged document, if it's finally working, well, it's working.</P>
<P>For one reason or another, low level drivers don't receive as much<BR>attention or testing as core code, and bugs on driver detach or<BR>initialization failure don't happen often enough to be noticeable.<BR>Init failure path is worse because it's much less travelled while<BR>needs to handle multiple entry points.</P>
<P>So, many low level drivers end up leaking resources on driver detach<BR>and having half broken failure path implementation in -&gt;probe() which<BR>would leak resources or even cause oops when failure occurs.&nbsp; iomap<BR>adds more to this mix.&nbsp; So do msi and msix.</P>
<P><BR>&nbsp; 2. Devres<BR>&nbsp; ---------</P>
<P>devres is basically linked list of arbitrarily sized memory areas<BR>associated with a struct device.&nbsp; Each devres entry is associated with<BR>a release function.&nbsp; A devres can be released in several ways.&nbsp; No<BR>matter what, all devres entries are released on driver detach.&nbsp; On<BR>release, the associated release function is invoked and then the<BR>devres entry is freed.</P>
<P>Managed interface is created for resources commonly used by device<BR>drivers using devres.&nbsp; For example, coherent DMA memory is acquired<BR>using dma_alloc_coherent().&nbsp; The managed version is called<BR>dmam_alloc_coherent().&nbsp; It is identical to dma_alloc_coherent() except<BR>for the DMA memory allocated using it is managed and will be<BR>automatically released on driver detach.&nbsp; Implementation looks like<BR>the following.</P>
<P>&nbsp; struct dma_devres {<BR>&nbsp;size_t&nbsp;&nbsp;size;<BR>&nbsp;void&nbsp;&nbsp;*vaddr;<BR>&nbsp;dma_addr_t&nbsp;dma_handle;<BR>&nbsp; };</P>
<P>&nbsp; static void dmam_coherent_release(struct device *dev, void *res)<BR>&nbsp; {<BR>&nbsp;struct dma_devres *this = res;</P>
<P>&nbsp;dma_free_coherent(dev, this-&gt;size, this-&gt;vaddr, this-&gt;dma_handle);<BR>&nbsp; }</P>
<P>&nbsp; dmam_alloc_coherent(dev, size, dma_handle, gfp)<BR>&nbsp; {<BR>&nbsp;struct dma_devres *dr;<BR>&nbsp;void *vaddr;</P>
<P>&nbsp;dr = devres_alloc(dmam_coherent_release, sizeof(*dr), gfp);<BR>&nbsp;...</P>
<P>&nbsp;/* alloc DMA memory as usual */<BR>&nbsp;vaddr = dma_alloc_coherent(...);<BR>&nbsp;...</P>
<P>&nbsp;/* record size, vaddr, dma_handle in dr */<BR>&nbsp;dr-&gt;vaddr = vaddr;<BR>&nbsp;...</P>
<P>&nbsp;devres_add(dev, dr);</P>
<P>&nbsp;return vaddr;<BR>&nbsp; }</P>
<P>If a driver uses dmam_alloc_coherent(), the area is guaranteed to be<BR>freed whether initialization fails half-way or the device gets<BR>detached.&nbsp; If most resources are acquired using managed interface, a<BR>driver can have much simpler init and exit code.&nbsp; Init path basically<BR>looks like the following.</P>
<P>&nbsp; my_init_one()<BR>&nbsp; {<BR>&nbsp;struct mydev *d;</P>
<P>&nbsp;d = devm_kzalloc(dev, sizeof(*d), GFP_KERNEL);<BR>&nbsp;if (!d)<BR>&nbsp;&nbsp;return -ENOMEM;</P>
<P>&nbsp;d-&gt;ring = dmam_alloc_coherent(...);<BR>&nbsp;if (!d-&gt;ring)<BR>&nbsp;&nbsp;return -ENOMEM;</P>
<P>&nbsp;if (check something)<BR>&nbsp;&nbsp;return -EINVAL;<BR>&nbsp;...</P>
<P>&nbsp;return register_to_upper_layer(d);<BR>&nbsp; }</P>
<P>And exit path,</P>
<P>&nbsp; my_remove_one()<BR>&nbsp; {<BR>&nbsp;unregister_from_upper_layer(d);<BR>&nbsp;shutdown_my_hardware();<BR>&nbsp; }</P>
<P>As shown above, low level drivers can be simplified a lot by using<BR>devres.&nbsp; Complexity is shifted from less maintained low level drivers<BR>to better maintained higher layer.&nbsp; Also, as init failure path is<BR>shared with exit path, both can get more testing.</P>
<P><BR>&nbsp; 3. Devres group<BR>&nbsp; ---------------</P>
<P>Devres entries can be grouped using devres group.&nbsp; When a group is<BR>released, all contained normal devres entries and properly nested<BR>groups are released.&nbsp; One usage is to rollback series of acquired<BR>resources on failure.&nbsp; For example,</P>
<P>&nbsp; if (!devres_open_group(dev, NULL, GFP_KERNEL))<BR>&nbsp;return -ENOMEM;</P>
<P>&nbsp; acquire A;<BR>&nbsp; if (failed)<BR>&nbsp;goto err;</P>
<P>&nbsp; acquire B;<BR>&nbsp; if (failed)<BR>&nbsp;goto err;<BR>&nbsp; ...</P>
<P>&nbsp; devres_remove_group(dev, NULL);<BR>&nbsp; return 0;</P>
<P>&nbsp;err:<BR>&nbsp; devres_release_group(dev, NULL);<BR>&nbsp; return err_code;</P>
<P>As resource acquisition failure usually means probe failure, constructs<BR>like above are usually useful in midlayer driver (e.g. libata core<BR>layer) where interface function shouldn't have side effect on failure.<BR>For LLDs, just returning error code suffices in most cases.</P>
<P>Each group is identified by void *id.&nbsp; It can either be explicitly<BR>specified by @id argument to devres_open_group() or automatically<BR>created by passing NULL as @id as in the above example.&nbsp; In both<BR>cases, devres_open_group() returns the group's id.&nbsp; The returned id<BR>can be passed to other devres functions to select the target group.<BR>If NULL is given to those functions, the latest open group is<BR>selected.</P>
<P>For example, you can do something like the following.</P>
<P>&nbsp; int my_midlayer_create_something()<BR>&nbsp; {<BR>&nbsp;if (!devres_open_group(dev, my_midlayer_create_something, GFP_KERNEL))<BR>&nbsp;&nbsp;return -ENOMEM;</P>
<P>&nbsp;...</P>
<P>&nbsp;devres_close_group(dev, my_midlayer_create_something);<BR>&nbsp;return 0;<BR>&nbsp; }</P>
<P>&nbsp; void my_midlayer_destroy_something()<BR>&nbsp; {<BR>&nbsp;devres_release_group(dev, my_midlayer_create_something);<BR>&nbsp; }</P>
<P><BR>&nbsp; 4. Details<BR>&nbsp; ----------</P>
<P>Lifetime of a devres entry begins on devres allocation and finishes<BR>when it is released or destroyed (removed and freed) - no reference<BR>counting.</P>
<P>devres core guarantees atomicity to all basic devres operations and<BR>has support for single-instance devres types (atomic<BR>lookup-and-add-if-not-found).&nbsp; Other than that, synchronizing<BR>concurrent accesses to allocated devres data is caller's<BR>responsibility.&nbsp; This is usually non-issue because bus ops and<BR>resource allocations already do the job.</P>
<P>For an example of single-instance devres type, read pcim_iomap_table()<BR>in lib/devres.c.</P>
<P>All devres interface functions can be called without context if the<BR>right gfp mask is given.</P>
<P><BR>&nbsp; 5. Overhead<BR>&nbsp; -----------</P>
<P>Each devres bookkeeping info is allocated together with requested data<BR>area.&nbsp; With debug option turned off, bookkeeping info occupies 16<BR>bytes on 32bit machines and 24 bytes on 64bit (three pointers rounded<BR>up to ull alignment).&nbsp; If singly linked list is used, it can be<BR>reduced to two pointers (8 bytes on 32bit, 16 bytes on 64bit).</P>
<P>Each devres group occupies 8 pointers.&nbsp; It can be reduced to 6 if<BR>singly linked list is used.</P>
<P>Memory space overhead on ahci controller with two ports is between 300<BR>and 400 bytes on 32bit machine after naive conversion (we can<BR>certainly invest a bit more effort into libata core layer).</P>
<P><BR>&nbsp; 6. List of managed interfaces<BR>&nbsp; -----------------------------</P>
<P>CLOCK<BR>&nbsp; devm_clk_get()<BR>&nbsp; devm_clk_put()</P>
<P>DMA<BR>&nbsp; dmam_alloc_coherent()<BR>&nbsp; dmam_alloc_noncoherent()<BR>&nbsp; dmam_declare_coherent_memory()<BR>&nbsp; dmam_free_coherent()<BR>&nbsp; dmam_free_noncoherent()<BR>&nbsp; dmam_pool_create()<BR>&nbsp; dmam_pool_destroy()</P>
<P>GPIO<BR>&nbsp; devm_gpiod_get()<BR>&nbsp; devm_gpiod_get_index()<BR>&nbsp; devm_gpiod_get_index_optional()<BR>&nbsp; devm_gpiod_get_optional()<BR>&nbsp; devm_gpiod_put()</P>
<P>IIO<BR>&nbsp; devm_iio_device_alloc()<BR>&nbsp; devm_iio_device_free()<BR>&nbsp; devm_iio_device_register()<BR>&nbsp; devm_iio_device_unregister()<BR>&nbsp; devm_iio_kfifo_allocate()<BR>&nbsp; devm_iio_kfifo_free()<BR>&nbsp; devm_iio_trigger_alloc()<BR>&nbsp; devm_iio_trigger_free()</P>
<P>IO region<BR>&nbsp; devm_release_mem_region()<BR>&nbsp; devm_release_region()<BR>&nbsp; devm_release_resource()<BR>&nbsp; devm_request_mem_region()<BR>&nbsp; devm_request_region()<BR>&nbsp; devm_request_resource()</P>
<P>IOMAP<BR>&nbsp; devm_ioport_map()<BR>&nbsp; devm_ioport_unmap()<BR>&nbsp; devm_ioremap()<BR>&nbsp; devm_ioremap_nocache()<BR>&nbsp; devm_ioremap_resource() : checks resource, requests memory region, ioremaps<BR>&nbsp; devm_iounmap()<BR>&nbsp; pcim_iomap()<BR>&nbsp; pcim_iomap_regions()&nbsp;: do request_region() and iomap() on multiple BARs<BR>&nbsp; pcim_iomap_table()&nbsp;: array of mapped addresses indexed by BAR<BR>&nbsp; pcim_iounmap()</P>
<P>IRQ<BR>&nbsp; devm_free_irq()<BR>&nbsp; devm_request_any_context_irq()<BR>&nbsp; devm_request_irq()<BR>&nbsp; devm_request_threaded_irq()</P>
<P>MDIO<BR>&nbsp; devm_mdiobus_alloc()<BR>&nbsp; devm_mdiobus_alloc_size()<BR>&nbsp; devm_mdiobus_free()</P>
<P>MEM<BR>&nbsp; devm_free_pages()<BR>&nbsp; devm_get_free_pages()<BR>&nbsp; devm_kasprintf()<BR>&nbsp; devm_kcalloc()<BR>&nbsp; devm_kfree()<BR>&nbsp; devm_kmalloc()<BR>&nbsp; devm_kmalloc_array()<BR>&nbsp; devm_kmemdup()<BR>&nbsp; devm_kstrdup()<BR>&nbsp; devm_kvasprintf()<BR>&nbsp; devm_kzalloc()</P>
<P>PCI<BR>&nbsp; pcim_enable_device()&nbsp;: after success, all PCI ops become managed<BR>&nbsp; pcim_pin_device()&nbsp;: keep PCI device enabled after release</P>
<P>PHY<BR>&nbsp; devm_usb_get_phy()<BR>&nbsp; devm_usb_put_phy()</P>
<P>PINCTRL<BR>&nbsp; devm_pinctrl_get()<BR>&nbsp; devm_pinctrl_put()</P>
<P>PWM<BR>&nbsp; devm_pwm_get()<BR>&nbsp; devm_pwm_put()</P>
<P>REGULATOR<BR>&nbsp; devm_regulator_bulk_get()<BR>&nbsp; devm_regulator_get()<BR>&nbsp; devm_regulator_put()<BR>&nbsp; devm_regulator_register()</P>
<P>SLAVE DMA ENGINE<BR>&nbsp; devm_acpi_dma_controller_register()</P>
<P>SPI<BR>&nbsp; devm_spi_register_master()