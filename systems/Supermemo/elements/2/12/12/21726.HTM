<H1><A name=EXITCODES></A>Appendix E. Exit Codes With Special Meanings</H1>
<P><A name=EXITCODESREF></A></P>
<DIV class=TABLE><A name=AEN23549></A>
<P><B>Table E-1. <I class=FIRSTTERM>Reserved</I> Exit Codes</B></P>
<TABLE class=CALSTABLE border=1>
<THEAD>
<TR>
<TH vAlign=top align=left>Exit Code Number</TH>
<TH vAlign=top align=left>Meaning</TH>
<TH vAlign=top align=left>Example</TH>
<TH vAlign=top align=left>Comments</TH></TR></THEAD>
<TBODY>
<TR>
<TD vAlign=top align=left><TT class=OPTION>1</TT></TD>
<TD vAlign=top align=left>Catchall for general errors</TD>
<TD vAlign=top align=left>let "var1 = 1/0"</TD>
<TD vAlign=top align=left>Miscellaneous errors, such as <SPAN class=QUOTE>"divide by zero"</SPAN> and other impermissible operations</TD></TR>
<TR>
<TD vAlign=top align=left><TT class=OPTION>2</TT></TD>
<TD vAlign=top align=left>Misuse of shell builtins (according to Bash documentation)</TD>
<TD vAlign=top align=left>empty_function() {}</TD>
<TD vAlign=top align=left><A href="http://tldp.org/LDP/abs/html/abs-guide.html#MISSINGKEYWORD">Missing keyword</A> or command, or permission problem (and <A href="http://tldp.org/LDP/abs/html/abs-guide.html#DIFFERR2"><I class=FIRSTTERM>diff</I> return code on a failed binary file comparison</A>).</TD></TR>
<TR>
<TD vAlign=top align=left><TT class=OPTION>126</TT></TD>
<TD vAlign=top align=left>Command invoked cannot execute</TD>
<TD vAlign=top align=left>/dev/null</TD>
<TD vAlign=top align=left>Permission problem or command is not an executable</TD></TR>
<TR>
<TD vAlign=top align=left><TT class=OPTION>127</TT></TD>
<TD vAlign=top align=left><SPAN class=QUOTE>"command not found"</SPAN></TD>
<TD vAlign=top align=left>illegal_command</TD>
<TD vAlign=top align=left>Possible problem with <TT class=VARNAME>$PATH</TT> or a typo</TD></TR>
<TR>
<TD vAlign=top align=left><TT class=OPTION>128</TT></TD>
<TD vAlign=top align=left>Invalid argument to <A href="http://tldp.org/LDP/abs/html/abs-guide.html#EXITCOMMANDREF">exit</A></TD>
<TD vAlign=top align=left>exit 3.14159</TD>
<TD vAlign=top align=left><B class=COMMAND>exit</B> takes only integer args in the range <SPAN class=RETURNVALUE>0 - 255</SPAN> (see first footnote)</TD></TR>
<TR>
<TD vAlign=top align=left><TT class=OPTION>128+n</TT></TD>
<TD vAlign=top align=left>Fatal error signal <SPAN class=QUOTE>"n"</SPAN></TD>
<TD vAlign=top align=left><I class=FIRSTTERM>kill -9</I> <TT class=VARNAME>$PPID</TT> of script</TD>
<TD vAlign=top align=left><TT class=USERINPUT><B>$?</B></TT> returns <SPAN class=ERRORCODE>137</SPAN> (128 + 9)</TD></TR>
<TR>
<TD vAlign=top align=left><TT class=OPTION>130</TT></TD>
<TD vAlign=top align=left>Script terminated by Control-C</TD>
<TD vAlign=top align=left><EM>Ctl-C</EM></TD>
<TD vAlign=top align=left>Control-C is fatal error signal <SPAN class=ERRORCODE>2</SPAN>, (130 = 128 + 2, see above)</TD></TR>
<TR>
<TD vAlign=top align=left><TT class=OPTION>255*</TT></TD>
<TD vAlign=top align=left>Exit status out of range</TD>
<TD vAlign=top align=left>exit <SPAN class=RETURNVALUE>-1</SPAN></TD>
<TD vAlign=top align=left><B class=COMMAND>exit</B> takes only integer args in the range <SPAN class=ERRORCODE>0 - 255</SPAN></TD></TR></TBODY></TABLE></DIV>
<P>According to the above table, exit codes <SPAN class=ERRORCODE>1 - 2, 126 - 165, and 255</SPAN> <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FTN.AEN23629" name=AEN23629><SPAN class=footnote>[144]</SPAN></A> have special meanings, and should therefore be avoided for user-specified exit parameters. Ending a script with <I class=FIRSTTERM>exit 127</I> would certainly cause confusion when troubleshooting (is the error code a <SPAN class=QUOTE>"command not found"</SPAN> or a user-defined one?). However, many scripts use an <I class=FIRSTTERM>exit 1</I> as a general bailout-upon-error. Since exit code <SPAN class=ERRORCODE>1</SPAN> signifies so many possible errors, it is not particularly useful in debugging.</P>
<P><A name=SYSEXITSREF></A></P>
<P>There has been an attempt to systematize exit status numbers (see <TT class=FILENAME>/usr/include/sysexits.h</TT>), but this is intended for C and C++ programmers. A similar standard for scripting might be appropriate. The author of this document proposes restricting user-defined exit codes to the range <SPAN class=RETURNVALUE>64 - 113</SPAN> (in addition to <SPAN class=RETURNVALUE>0</SPAN>, for success), to conform with the C/C++ standard. This would allot 50 valid codes, and make troubleshooting scripts more straightforward. <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FTN.AEN23647" name=AEN23647><SPAN class=footnote>[145]</SPAN></A> All user-defined exit codes in the accompanying examples to this document conform to this standard, except where overriding circumstances exist, as in <A href="http://tldp.org/LDP/abs/html/abs-guide.html#TMDIN">Example 9-2</A>.</P>
<DIV class=NOTE>
<P></P>
<TABLE class=NOTE border=0 width="100%">
<TBODY>
<TR>
<TD vAlign=top width=25 align=middle><IMG hspace=5 alt=Note src="http://tldp.org/LDP/abs/images/note.gif"></TD>
<TD vAlign=top align=left>
<P>Issuing a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#XSTATVARREF">$?</A> from the command-line after a shell script exits gives results consistent with the table above only from the Bash or <I class=FIRSTTERM>sh</I> prompt. Running the <I class=FIRSTTERM>C-shell</I> or <I class=FIRSTTERM>tcsh</I> may give different values in some cases.</P></TD></TR></TBODY></TABLE></DIV>