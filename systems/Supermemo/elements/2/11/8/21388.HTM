######<BR><FONT class=extract># gcc support functions<BR># See documentation in Documentation/kbuild/makefiles.txt</FONT> 
<P></P>
<P><FONT class=extract># cc-cross-prefix<BR># Usage: CROSS_COMPILE := $(call cc-cross-prefix, m68k-linux-gnu- m68k-linux-)<BR># Return first prefix where a prefix$(CC) is found in PATH.<BR># If no $(CC) found in PATH with listed prefixes return nothing<BR>cc-cross-prefix =&nbsp; \<BR>&nbsp;$(word 1, $(foreach c,$(1),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp;$(shell set -e;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp;if (which $(strip $(c))$(CC)) &gt; /dev/null 2&gt;&amp;1 ; then \<BR>&nbsp;&nbsp;&nbsp;echo $(c);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp;fi)))</FONT></P>
<P><FONT class=extract># output directory for tests below<BR>TMPOUT := $(if $(KBUILD_EXTMOD),$(firstword $(KBUILD_EXTMOD))/)</FONT></P>
<P><FONT class=extract># try-run<BR># Usage: option = $(call try-run, $(CC)...-o "$$TMP",option-ok,otherwise)<BR># Exit code chooses option. "$$TMP" is can be used as temporary file and<BR># is automatically cleaned up.<BR>try-run = $(shell set -e;&nbsp;&nbsp;\<BR>&nbsp;TMP="$(TMPOUT).$$$$.tmp";&nbsp;\<BR>&nbsp;TMPO="$(TMPOUT).$$$$.o";&nbsp;\<BR>&nbsp;if ($(1)) &gt;/dev/null 2&gt;&amp;1;&nbsp;\<BR>&nbsp;then echo "$(2)";&nbsp;&nbsp;\<BR>&nbsp;else echo "$(3)";&nbsp;&nbsp;\<BR>&nbsp;fi;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;rm -f "$$TMP" "$$TMPO")</FONT></P>
<P><FONT class=extract># as-option<BR># Usage: cflags-y += $(call as-option,-Wa$(comma)-isa=foo,)</FONT></P>
<P><FONT class=extract>as-option = $(call try-run,\<BR>&nbsp;$(CC) $(KBUILD_CFLAGS) $(1) -c -x assembler /dev/null -o "$$TMP",$(1),$(2))</FONT></P>
<P><FONT class=extract># as-instr<BR># Usage: cflags-y += $(call as-instr,instr,option1,option2)</FONT></P>
<P><FONT class=extract>as-instr = $(call try-run,\<BR>&nbsp;printf "%b\n" "$(1)" | $(CC) $(KBUILD_AFLAGS) -c -x assembler -o "$$TMP" -,$(2),$(3))</FONT></P>
<P><FONT class=extract># cc-option<BR># Usage: cflags-y += $(call cc-option,-march=winchip-c6,-march=i586)</FONT></P>
<P><FONT class=extract>cc-option = $(call try-run,\<BR>&nbsp;$(CC) $(KBUILD_CPPFLAGS) $(KBUILD_CFLAGS) $(1) -c -x c /dev/null -o "$$TMP",$(1),$(2))</FONT></P>
<P><FONT class=extract># cc-option-yn<BR># Usage: flag := $(call cc-option-yn,-march=winchip-c6)<BR>cc-option-yn = $(call try-run,\<BR>&nbsp;$(CC) $(KBUILD_CPPFLAGS) $(KBUILD_CFLAGS) $(1) -c -x c /dev/null -o "$$TMP",y,n)</FONT></P>
<P><FONT class=extract># cc-option-align<BR># Prefix align with either -falign or -malign<BR>cc-option-align = $(subst -functions=0,,\<BR>&nbsp;$(call cc-option,-falign-functions=0,-malign-functions=0))</FONT></P>
<P><FONT class=extract># cc-disable-warning<BR># Usage: cflags-y += $(call cc-disable-warning,unused-but-set-variable)<BR>cc-disable-warning = $(call try-run,\<BR>&nbsp;$(CC) $(KBUILD_CPPFLAGS) $(KBUILD_CFLAGS) -W$(strip $(1)) -c -x c /dev/null -o "$$TMP",-Wno-$(strip $(1)))</FONT></P>
<P><FONT class=extract># cc-version<BR># Usage gcc-ver := $(call cc-version)<BR>cc-version = $(shell $(CONFIG_SHELL) $(srctree)/scripts/gcc-version.sh $(CC))</FONT></P>
<P><FONT class=extract># cc-fullversion<BR># Usage gcc-ver := $(call cc-fullversion)<BR>cc-fullversion = $(shell $(CONFIG_SHELL) \<BR>&nbsp;$(srctree)/scripts/gcc-version.sh -p $(CC))</FONT></P>
<P><FONT class=extract># cc-ifversion<BR># Usage:&nbsp; EXTRA_CFLAGS += $(call cc-ifversion, -lt, 0402, -O1)<BR>cc-ifversion = $(shell [ $(call cc-version, $(CC)) $(1) $(2) ] &amp;&amp; echo $(3))</FONT></P>
<P><FONT class=extract># cc-ldoption<BR># Usage: ldflags += $(call cc-ldoption, -Wl$(comma)--hash-style=both)<BR>cc-ldoption = $(call try-run,\<BR>&nbsp;$(CC) $(1) -nostdlib -x c /dev/null -o "$$TMP",$(1),$(2))</FONT></P>
<P><FONT class=extract># ld-option<BR># Usage: LDFLAGS += $(call ld-option, -X)<BR>ld-option = $(call try-run,\<BR>&nbsp;$(CC) -x c /dev/null -c -o "$$TMPO" ; $(LD) $(1) "$$TMPO" -o "$$TMP",$(1),$(2))</FONT></P>
<P><FONT class=extract># ar-option<BR># Usage: KBUILD_ARFLAGS := $(call ar-option,D)<BR># Important: no spaces around options<BR>ar-option = $(call try-run, $(AR) rc$(1) "$$TMP",$(1),$(2))</FONT>