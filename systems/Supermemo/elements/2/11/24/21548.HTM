<H1 class=SECT1><A name=OPPRECEDENCE></A>8.4. Operator Precedence</H1>
<P><A name=OPPRECEDENCE1></A></P>
<P>In a script, operations execute in order of <I class=FIRSTTERM>precedence</I>: the higher precedence operations execute <EM>before</EM> the lower precedence ones. <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FTN.AEN4290" name=AEN4290><SPAN class=footnote>[40]</SPAN></A> </P>
<DIV class=TABLE><A name=AEN4294></A>
<P><B>Table 8-1. Operator Precedence</B></P>
<TABLE class=CALSTABLE border=1>
<THEAD>
<TR>
<TH vAlign=top align=left>Operator</TH>
<TH vAlign=top align=left>Meaning</TH>
<TH vAlign=top align=left>Comments</TH></TR></THEAD>
<TBODY>
<TR>
<TD vAlign=top align=left><TT class=OPTION></TT></TD>
<TD vAlign=top align=left>&nbsp;</TD>
<TD vAlign=top align=left><B class=COMMAND>HIGHEST PRECEDENCE</B></TD></TR>
<TR>
<TD vAlign=top align=left><TT class=OPTION>var++ var--</TT></TD>
<TD vAlign=top align=left>post-increment, post-decrement</TD>
<TD vAlign=top align=left><A href="http://tldp.org/LDP/abs/html/abs-guide.html#CSTYLE">C-style</A> operators</TD></TR>
<TR>
<TD vAlign=top align=left><TT class=OPTION>++var --var</TT></TD>
<TD vAlign=top align=left>pre-increment, pre-decrement</TD>
<TD vAlign=top align=left>&nbsp;</TD></TR>
<TR>
<TD vAlign=top align=left>&nbsp;</TD>
<TD vAlign=top align=left>&nbsp;</TD>
<TD vAlign=top align=left>&nbsp;</TD></TR>
<TR>
<TD vAlign=top align=left><TT class=OPTION>! ~</TT></TD>
<TD vAlign=top align=left><A href="http://tldp.org/LDP/abs/html/abs-guide.html#NOTREF">negation</A></TD>
<TD vAlign=top align=left>logical / bitwise, inverts sense of following operator</TD></TR>
<TR>
<TD vAlign=top align=left>&nbsp;</TD>
<TD vAlign=top align=left>&nbsp;</TD>
<TD vAlign=top align=left>&nbsp;</TD></TR>
<TR>
<TD vAlign=top align=left><TT class=OPTION>**</TT></TD>
<TD vAlign=top align=left><A href="http://tldp.org/LDP/abs/html/abs-guide.html#EXPONENTIATIONREF">exponentiation</A></TD>
<TD vAlign=top align=left><A href="http://tldp.org/LDP/abs/html/abs-guide.html#AROPS1">arithmetic operation</A></TD></TR>
<TR>
<TD vAlign=top align=left><TT class=OPTION>* / %</TT></TD>
<TD vAlign=top align=left>multiplication, division, modulo</TD>
<TD vAlign=top align=left>arithmetic operation</TD></TR>
<TR>
<TD vAlign=top align=left><TT class=OPTION>+ -</TT></TD>
<TD vAlign=top align=left>addition, subtraction</TD>
<TD vAlign=top align=left>arithmetic operation</TD></TR>
<TR>
<TD vAlign=top align=left>&nbsp;</TD>
<TD vAlign=top align=left>&nbsp;</TD>
<TD vAlign=top align=left>&nbsp;</TD></TR>
<TR>
<TD vAlign=top align=left><TT class=OPTION>&lt;&lt; &gt;&gt;</TT></TD>
<TD vAlign=top align=left>left, right shift</TD>
<TD vAlign=top align=left><A href="http://tldp.org/LDP/abs/html/abs-guide.html#BITWSOPS1">bitwise</A></TD></TR>
<TR>
<TD vAlign=top align=left>&nbsp;</TD>
<TD vAlign=top align=left>&nbsp;</TD>
<TD vAlign=top align=left>&nbsp;</TD></TR>
<TR>
<TD vAlign=top align=left><TT class=OPTION>-z -n</TT></TD>
<TD vAlign=top align=left><I class=FIRSTTERM>unary</I> comparison</TD>
<TD vAlign=top align=left>string is/is-not <A href="http://tldp.org/LDP/abs/html/abs-guide.html#STRINGNULL">null</A></TD></TR>
<TR>
<TD vAlign=top align=left><TT class=OPTION>-e -f -t -x, etc.</TT></TD>
<TD vAlign=top align=left><I class=FIRSTTERM>unary</I> comparison</TD>
<TD vAlign=top align=left><A href="http://tldp.org/LDP/abs/html/abs-guide.html#FTO">file-test</A></TD></TR>
<TR>
<TD vAlign=top align=left><TT class=OPTION>&lt; -lt &gt; -gt &lt;= -le &gt;= -ge</TT></TD>
<TD vAlign=top align=left><I class=FIRSTTERM>compound</I> comparison</TD>
<TD vAlign=top align=left>string and integer</TD></TR>
<TR>
<TD vAlign=top align=left><TT class=OPTION>-nt -ot -ef</TT></TD>
<TD vAlign=top align=left><I class=FIRSTTERM>compound</I> comparison</TD>
<TD vAlign=top align=left>file-test</TD></TR>
<TR>
<TD vAlign=top align=left><TT class=OPTION>== -eq <A href="http://tldp.org/LDP/abs/html/abs-guide.html#NOTEQUAL">!=</A> -ne</TT></TD>
<TD vAlign=top align=left>equality / inequality</TD>
<TD vAlign=top align=left>test operators, string and integer</TD></TR>
<TR>
<TD vAlign=top align=left>&nbsp;</TD>
<TD vAlign=top align=left>&nbsp;</TD>
<TD vAlign=top align=left>&nbsp;</TD></TR>
<TR>
<TD vAlign=top align=left><TT class=OPTION>&amp;</TT></TD>
<TD vAlign=top align=left>AND</TD>
<TD vAlign=top align=left>bitwise</TD></TR>
<TR>
<TD vAlign=top align=left><TT class=OPTION>^</TT></TD>
<TD vAlign=top align=left>XOR</TD>
<TD vAlign=top align=left><I class=FIRSTTERM>exclusive</I> OR, bitwise</TD></TR>
<TR>
<TD vAlign=top align=left><TT class=OPTION>|</TT></TD>
<TD vAlign=top align=left>OR</TD>
<TD vAlign=top align=left>bitwise</TD></TR>
<TR>
<TD vAlign=top align=left>&nbsp;</TD>
<TD vAlign=top align=left>&nbsp;</TD>
<TD vAlign=top align=left>&nbsp;</TD></TR>
<TR>
<TD vAlign=top align=left><TT class=OPTION>&amp;&amp; -a</TT></TD>
<TD vAlign=top align=left>AND</TD>
<TD vAlign=top align=left><A href="http://tldp.org/LDP/abs/html/abs-guide.html#LOGOPS1">logical</A>, <I class=FIRSTTERM>compound</I> comparison</TD></TR>
<TR>
<TD vAlign=top align=left><TT class=OPTION>|| -o</TT></TD>
<TD vAlign=top align=left>OR</TD>
<TD vAlign=top align=left>logical, <I class=FIRSTTERM>compound</I> comparison</TD></TR>
<TR>
<TD vAlign=top align=left>&nbsp;</TD>
<TD vAlign=top align=left>&nbsp;</TD>
<TD vAlign=top align=left>&nbsp;</TD></TR>
<TR>
<TD vAlign=top align=left><TT class=OPTION>?:</TT></TD>
<TD vAlign=top align=left><A href="http://tldp.org/LDP/abs/html/abs-guide.html#CSTRINARY">trinary operator</A></TD>
<TD vAlign=top align=left>C-style</TD></TR>
<TR>
<TD vAlign=top align=left><TT class=OPTION>=</TT></TD>
<TD vAlign=top align=left><A href="http://tldp.org/LDP/abs/html/abs-guide.html#EQREF">assignment</A></TD>
<TD vAlign=top align=left>(do not confuse with equality <I class=FIRSTTERM>test</I>)</TD></TR>
<TR>
<TD vAlign=top align=left><TT class=OPTION>*= /= %= += -= &lt;&lt;= &gt;&gt;= &amp;=</TT></TD>
<TD vAlign=top align=left><A href="http://tldp.org/LDP/abs/html/abs-guide.html#ARITHOPSCOMB">combination assignment</A></TD>
<TD vAlign=top align=left>times-equal, divide-equal, mod-equal, etc.</TD></TR>
<TR>
<TD vAlign=top align=left>&nbsp;</TD>
<TD vAlign=top align=left>&nbsp;</TD>
<TD vAlign=top align=left>&nbsp;</TD></TR>
<TR>
<TD vAlign=top align=left><TT class=OPTION>,</TT></TD>
<TD vAlign=top align=left><A href="http://tldp.org/LDP/abs/html/abs-guide.html#COMMAOP">comma</A></TD>
<TD vAlign=top align=left>links a sequence of operations</TD></TR>
<TR>
<TD vAlign=top align=left><TT class=OPTION></TT></TD>
<TD vAlign=top align=left>&nbsp;</TD>
<TD vAlign=top align=left><B class=COMMAND>LOWEST PRECEDENCE</B></TD></TR></TBODY></TABLE></DIV>
<P>In practice, all you really need to remember is the following:</P>
<P></P>
<UL>
<LI>
<P>The <SPAN class=QUOTE>"My Dear Aunt Sally"</SPAN> mantra (<EM>multiply, divide, add, subtract</EM>) for the familiar <A href="http://tldp.org/LDP/abs/html/abs-guide.html#AROPS1">arithmetic operations</A>.</P>
<LI>
<P>The <I class=FIRSTTERM>compound</I> logical operators, <B class=COMMAND>&amp;&amp;</B>, <B class=COMMAND>||</B>, <B class=COMMAND>-a</B>, and <B class=COMMAND>-o</B> have low precedence.</P>
<LI>
<P>The order of evaluation of equal-precedence operators is usually <I class=FIRSTTERM>left-to-right</I>.</P></LI></UL>
<P>Now, let's utilize our knowledge of operator precedence to analyze a couple of lines from the <TT class=FILENAME>/etc/init.d/functions file</TT>, as found in the <I class=FIRSTTERM>Fedora Core</I> Linux distro.</P>
<P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>while [ -n "$remaining" -a "$retry" -gt 0 ]; do

# This looks rather daunting at first glance.


# Separate the conditions:
while [ -n "$remaining" -a "$retry" -gt 0 ]; do
#       --condition 1-- ^^ --condition 2-

#  If variable "$remaining" is not zero length
#+      AND (-a)
#+ variable "$retry" is greater-than zero
#+ then
#+ the [ expresion-within-condition-brackets ] returns success (0)
#+ and the while-loop executes an iteration.
#  ==============================================================
#  Evaluate "condition 1" and "condition 2" ***before***
#+ ANDing them. Why? Because the AND (-a) has a lower precedence
#+ than the -n and -gt operators,
#+ and therefore gets evaluated *last*.

#################################################################

if [ -f /etc/sysconfig/i18n -a -z "${NOLOCALE:-}" ] ; then


# Again, separate the conditions:
if [ -f /etc/sysconfig/i18n -a -z "${NOLOCALE:-}" ] ; then
#    --condition 1--------- ^^ --condition 2-----

#  If file "/etc/sysconfig/i18n" exists
#+      AND (-a)
#+ variable $NOLOCALE is zero length
#+ then
#+ the [ test-expresion-within-condition-brackets ] returns success (0)
#+ and the commands following execute.
#
#  As before, the AND (-a) gets evaluated *last*
#+ because it has the lowest precedence of the operators within
#+ the test brackets.
#  ==============================================================
#  Note:
#  ${NOLOCALE:-} is a parameter expansion that seems redundant.
#  But, if $NOLOCALE has not been declared, it gets set to *null*,
#+ in effect declaring it.
#  This makes a difference in some contexts.</PRE></FONT></TD></TR></TBODY></TABLE></P>
<DIV class=TIP>
<P></P>
<TABLE class=TIP border=0 width="100%">
<TBODY>
<TR>
<TD vAlign=top width=25 align=middle><IMG hspace=5 alt=Tip src="http://tldp.org/LDP/abs/images/tip.gif"></TD>
<TD vAlign=top align=left>
<P>To avoid confusion or error in a complex sequence of test operators, break up the sequence into bracketed sections. 
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>if [ "$v1" -gt "$v2"  -o  "$v1" -lt "$v2"  -a  -e "$filename" ]
# Unclear what's going on here...

if [[ "$v1" -gt "$v2" ]] || [[ "$v1" -lt "$v2" ]] &amp;&amp; [[ -e "$filename" ]]
# Much better -- the condition tests are grouped in logical sections.</PRE></FONT></TD></TR></TBODY></TABLE></P></TD></TR></TBODY></TABLE></DIV>