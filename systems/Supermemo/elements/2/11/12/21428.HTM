<FONT class=extract># We process the rest of the Makefile if this is the final invocation of make<BR>ifeq ($(skip-makefile),)</FONT> 
<P></P>
<P><FONT class=extract># Do not print "Entering directory ...",<BR># but we want to display it when entering to the output directory<BR># so that IDEs/editors are able to understand relative filenames.<BR>MAKEFLAGS += --no-print-directory</FONT></P>
<P><FONT class=extract># Call a source code checker (by default, "sparse") as part of the<BR># C compilation.<BR>#<BR># Use 'make C=1' to enable checking of only re-compiled files.<BR># Use 'make C=2' to enable checking of *all* source files, regardless<BR># of whether they are re-compiled or not.<BR>#<BR># See the file "Documentation/sparse.txt" for more details, including<BR># where to get the "sparse" utility.</FONT></P>
<P><FONT class=extract>ifeq ("$(origin C)", "command line")<BR>&nbsp; KBUILD_CHECKSRC = $(C)<BR>endif<BR>ifndef KBUILD_CHECKSRC<BR>&nbsp; KBUILD_CHECKSRC = 0<BR>endif</FONT></P>
<P><FONT class=extract># Use make M=dir to specify directory of external module to build<BR># Old syntax make ... SUBDIRS=$PWD is still supported<BR># Setting the environment variable KBUILD_EXTMOD take precedence<BR>ifdef SUBDIRS<BR>&nbsp; KBUILD_EXTMOD ?= $(SUBDIRS)<BR>endif</FONT></P>
<P><FONT class=extract>ifeq ("$(origin M)", "command line")<BR>&nbsp; KBUILD_EXTMOD := $(M)<BR>endif</FONT></P>
<P><FONT class=extract># If building an external module we do not care about the all: rule<BR># but instead _all depend on modules<BR>PHONY += all<BR>ifeq ($(KBUILD_EXTMOD),)<BR>_all: all<BR>else<BR>_all: modules<BR>endif</FONT></P>
<P><FONT class=extract>ifeq ($(KBUILD_SRC),)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # building in the source tree<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; srctree := .<BR>else<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ifeq ($(KBUILD_SRC)/,$(dir $(CURDIR)))<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; # building in a subdirectory of the source tree<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; srctree := ..<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; else<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; srctree := $(KBUILD_SRC)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; endif<BR>endif<BR>objtree&nbsp;&nbsp;:= .<BR>src&nbsp;&nbsp;:= $(srctree)<BR>obj&nbsp;&nbsp;:= $(objtree)</FONT></P>
<P><FONT class=extract>VPATH&nbsp;&nbsp;:= $(srctree)$(if $(KBUILD_EXTMOD),:$(KBUILD_EXTMOD))</FONT></P>
<P><FONT class=extract>export srctree objtree VPATH</FONT></P>
<P><BR><FONT class=extract># SUBARCH tells the usermode build what the underlying arch is.&nbsp; That is set<BR># first, and if a usermode build is happening, the "ARCH=um" on the command<BR># line overrides the setting of ARCH below.&nbsp; If a native build is happening,<BR># then ARCH is assigned, getting whatever value it gets normally, and<BR># SUBARCH is subsequently ignored.</FONT></P>
<P><FONT class=extract>SUBARCH := $(shell uname -m | sed -e s/i.86/x86/ -e s/x86_64/x86/ \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -e s/sun4u/sparc64/ \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -e s/arm.*/arm/ -e s/sa110/arm/ \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -e s/s390x/s390/ -e s/parisc64/parisc/ \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -e s/ppc.*/powerpc/ -e s/mips.*/mips/ \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -e s/sh[234].*/sh/ -e s/aarch64.*/arm64/ )</FONT></P>
<P><FONT class=extract># Cross compiling and selecting different set of gcc/bin-utils<BR># ---------------------------------------------------------------------------<BR>#<BR># When performing cross compilation for other architectures ARCH shall be set<BR># to the target architecture. (See arch/* for the possibilities).<BR># ARCH can be set during invocation of make:<BR># make ARCH=ia64<BR># Another way is to have ARCH set in the environment.<BR># The default ARCH is the host where make is executed.</FONT></P>
<P><FONT class=extract># CROSS_COMPILE specify the prefix used for all executables used<BR># during compilation. Only gcc and related bin-utils executables<BR># are prefixed with $(CROSS_COMPILE).<BR># CROSS_COMPILE can be set on the command line<BR># make CROSS_COMPILE=ia64-linux-<BR># Alternatively CROSS_COMPILE can be set in the environment.<BR># A third alternative is to store a setting in .config so that plain<BR># "make" in the configured kernel build directory always uses that.<BR># Default value for CROSS_COMPILE is not to prefix executables<BR># Note: Some architectures assign CROSS_COMPILE in their arch/*/Makefile<BR>ARCH&nbsp;&nbsp;?= $(SUBARCH)<BR>CROSS_COMPILE&nbsp;?= $(CONFIG_CROSS_COMPILE:"%"=%)</FONT></P>
<P><FONT class=extract># Architecture as present in compile.h<BR>UTS_MACHINE &nbsp;:= $(ARCH)<BR>SRCARCH&nbsp;&nbsp;:= $(ARCH)</FONT></P>
<P><FONT class=extract># Additional ARCH settings for x86<BR>ifeq ($(ARCH),i386)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SRCARCH := x86<BR>endif<BR>ifeq ($(ARCH),x86_64)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SRCARCH := x86<BR>endif</FONT></P>
<P><FONT class=extract># Additional ARCH settings for sparc<BR>ifeq ($(ARCH),sparc32)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SRCARCH := sparc<BR>endif<BR>ifeq ($(ARCH),sparc64)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SRCARCH := sparc<BR>endif</FONT></P>
<P><FONT class=extract># Additional ARCH settings for sh<BR>ifeq ($(ARCH),sh64)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SRCARCH := sh<BR>endif</FONT></P>
<P><FONT class=extract># Additional ARCH settings for tile<BR>ifeq ($(ARCH),tilepro)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SRCARCH := tile<BR>endif<BR>ifeq ($(ARCH),tilegx)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; SRCARCH := tile<BR>endif</FONT></P>
<P><FONT class=extract># Where to locate arch specific headers<BR>hdr-arch&nbsp; := $(SRCARCH)</FONT></P>
<P><FONT class=extract>KCONFIG_CONFIG&nbsp;?= .config<BR>export KCONFIG_CONFIG</FONT></P>
<P><FONT class=extract># SHELL used by kbuild<BR>CONFIG_SHELL := $(shell if [ -x "$$BASH" ]; then echo $$BASH; \<BR>&nbsp;&nbsp; else if [ -x /bin/bash ]; then echo /bin/bash; \<BR>&nbsp;&nbsp; else echo sh; fi ; fi)</FONT></P>
<P><FONT class=extract>HOSTCC&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = gcc<BR>HOSTCXX&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; = g++<BR>HOSTCFLAGS&nbsp;&nbsp; = -Wall -Wmissing-prototypes -Wstrict-prototypes -O2 -fomit-frame-pointer -std=gnu89<BR>HOSTCXXFLAGS = -O2</FONT></P>
<P><FONT class=extract>ifeq ($(shell $(HOSTCC) -v 2&gt;&amp;1 | grep -c "clang version"), 1)<BR>HOSTCFLAGS&nbsp; += -Wno-unused-value -Wno-unused-parameter \<BR>&nbsp;&nbsp;-Wno-missing-field-initializers -fno-delete-null-pointer-checks<BR>endif</FONT></P>
<P><FONT class=extract># Decide whether to build built-in, modular, or both.<BR># Normally, just do built-in.</FONT></P>
<P><FONT class=extract>KBUILD_MODULES :=<BR>KBUILD_BUILTIN := 1</FONT></P>
<P><FONT class=extract># If we have only "make modules", don't compile built-in objects.<BR># When we're building modules with modversions, we need to consider<BR># the built-in objects during the descend as well, in order to<BR># make sure the checksums are up to date before we record them.</FONT></P>
<P><FONT class=extract>ifeq ($(MAKECMDGOALS),modules)<BR>&nbsp; KBUILD_BUILTIN := $(if $(CONFIG_MODVERSIONS),1)<BR>endif</FONT></P>
<P><FONT class=extract># If we have "make &lt;whatever&gt; modules", compile modules<BR># in addition to whatever we do anyway.<BR># Just "make" or "make all" shall build modules as well</FONT></P>
<P><FONT class=extract>ifneq ($(filter all _all modules,$(MAKECMDGOALS)),)<BR>&nbsp; KBUILD_MODULES := 1<BR>endif</FONT></P>
<P><FONT class=extract>ifeq ($(MAKECMDGOALS),)<BR>&nbsp; KBUILD_MODULES := 1<BR>endif</FONT></P>
<P><FONT class=extract>export KBUILD_MODULES KBUILD_BUILTIN<BR>export KBUILD_CHECKSRC KBUILD_SRC KBUILD_EXTMOD</FONT></P>
<P><FONT class=extract>ifneq ($(CC),)<BR>ifeq ($(shell $(CC) -v 2&gt;&amp;1 | grep -c "clang version"), 1)<BR>COMPILER := clang<BR>else<BR>COMPILER := gcc<BR>endif<BR>export COMPILER<BR>endif</FONT></P>
<P><FONT class=extract># Look for make include files relative to root of kernel src<BR>MAKEFLAGS += --include-dir=$(srctree)</FONT></P>
<P><FONT class=extract># We need some generic definitions (do not try to remake the file).<BR>$(srctree)/scripts/Kbuild.include: ;<BR>include $(srctree)/scripts/Kbuild.include</FONT></P>
<P><FONT class=extract># Make variables (CC, etc...)<BR>AS&nbsp;&nbsp;= $(CROSS_COMPILE)as<BR>LD&nbsp;&nbsp;= $(CROSS_COMPILE)ld<BR>CC&nbsp;&nbsp;= $(CROSS_COMPILE)gcc<BR>CPP&nbsp;&nbsp;= $(CC) -E<BR>AR&nbsp;&nbsp;= $(CROSS_COMPILE)ar<BR>NM&nbsp;&nbsp;= $(CROSS_COMPILE)nm<BR>STRIP&nbsp;&nbsp;= $(CROSS_COMPILE)strip<BR>OBJCOPY&nbsp;&nbsp;= $(CROSS_COMPILE)objcopy<BR>OBJDUMP&nbsp;&nbsp;= $(CROSS_COMPILE)objdump<BR>AWK&nbsp;&nbsp;= awk<BR>GENKSYMS&nbsp;= scripts/genksyms/genksyms<BR>INSTALLKERNEL&nbsp; := installkernel<BR>DEPMOD&nbsp;&nbsp;= /sbin/depmod<BR>PERL&nbsp;&nbsp;= perl<BR>PYTHON&nbsp;&nbsp;= python<BR>CHECK&nbsp;&nbsp;= sparse</FONT></P>
<P><FONT class=extract>CHECKFLAGS&nbsp;&nbsp;&nbsp;&nbsp; := -D__linux__ -Dlinux -D__STDC__ -Dunix -D__unix__ \<BR>&nbsp;&nbsp;&nbsp; -Wbitwise -Wno-return-void $(CF)<BR>CFLAGS_MODULE&nbsp;&nbsp; =<BR>AFLAGS_MODULE&nbsp;&nbsp; =<BR>LDFLAGS_MODULE&nbsp; =<BR>CFLAGS_KERNEL&nbsp;=<BR>AFLAGS_KERNEL&nbsp;=<BR>CFLAGS_GCOV&nbsp;= -fprofile-arcs -ftest-coverage</FONT></P>
<P><BR><FONT class=extract># Use USERINCLUDE when you must reference the UAPI directories only.<BR>USERINCLUDE&nbsp;&nbsp;&nbsp; := \<BR>&nbsp;&nbsp;-I$(srctree)/arch/$(hdr-arch)/include/uapi \<BR>&nbsp;&nbsp;-Iarch/$(hdr-arch)/include/generated/uapi \<BR>&nbsp;&nbsp;-I$(srctree)/include/uapi \<BR>&nbsp;&nbsp;-Iinclude/generated/uapi \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -include $(srctree)/include/linux/kconfig.h</FONT></P>
<P><FONT class=extract># Use LINUXINCLUDE when you must reference the include/ directory.<BR># Needed to be compatible with the O= option<BR>LINUXINCLUDE&nbsp;&nbsp;&nbsp; := \<BR>&nbsp;&nbsp;-I$(srctree)/arch/$(hdr-arch)/include \<BR>&nbsp;&nbsp;-Iarch/$(hdr-arch)/include/generated/uapi \<BR>&nbsp;&nbsp;-Iarch/$(hdr-arch)/include/generated \<BR>&nbsp;&nbsp;$(if $(KBUILD_SRC), -I$(srctree)/include) \<BR>&nbsp;&nbsp;-Iinclude \<BR>&nbsp;&nbsp;$(USERINCLUDE)</FONT></P>
<P><FONT class=extract>KBUILD_CPPFLAGS := -D__KERNEL__</FONT></P>
<P><FONT class=extract>KBUILD_CFLAGS&nbsp;&nbsp; := -Wall -Wundef -Wstrict-prototypes -Wno-trigraphs \<BR>&nbsp;&nbsp;&nbsp;&nbsp; -fno-strict-aliasing -fno-common \<BR>&nbsp;&nbsp;&nbsp;&nbsp; -Werror-implicit-function-declaration \<BR>&nbsp;&nbsp;&nbsp;&nbsp; -Wno-format-security \<BR>&nbsp;&nbsp;&nbsp;&nbsp; -std=gnu89</FONT></P>
<P><FONT class=extract>KBUILD_AFLAGS_KERNEL :=<BR>KBUILD_CFLAGS_KERNEL :=<BR>KBUILD_AFLAGS&nbsp;&nbsp; := -D__ASSEMBLY__<BR>KBUILD_AFLAGS_MODULE&nbsp; := -DMODULE<BR>KBUILD_CFLAGS_MODULE&nbsp; := -DMODULE<BR>KBUILD_LDFLAGS_MODULE := -T $(srctree)/scripts/module-common.lds</FONT></P>
<P><FONT class=extract># Read KERNELRELEASE from include/config/kernel.release (if it exists)<BR>KERNELRELEASE = $(shell cat include/config/kernel.release 2&gt; /dev/null)<BR>KERNELVERSION = $(VERSION)$(if $(PATCHLEVEL),.$(PATCHLEVEL)$(if $(SUBLEVEL),.$(SUBLEVEL)))$(EXTRAVERSION)</FONT></P>
<P><FONT class=extract>export VERSION PATCHLEVEL SUBLEVEL KERNELRELEASE KERNELVERSION<BR>export ARCH SRCARCH CONFIG_SHELL HOSTCC HOSTCFLAGS CROSS_COMPILE AS LD CC<BR>export CPP AR NM STRIP OBJCOPY OBJDUMP<BR>export MAKE AWK GENKSYMS INSTALLKERNEL PERL PYTHON UTS_MACHINE<BR>export HOSTCXX HOSTCXXFLAGS LDFLAGS_MODULE CHECK CHECKFLAGS</FONT></P>
<P><FONT class=extract>export KBUILD_CPPFLAGS NOSTDINC_FLAGS LINUXINCLUDE OBJCOPYFLAGS LDFLAGS<BR>export KBUILD_CFLAGS CFLAGS_KERNEL CFLAGS_MODULE CFLAGS_GCOV CFLAGS_KASAN<BR>export KBUILD_AFLAGS AFLAGS_KERNEL AFLAGS_MODULE<BR>export KBUILD_AFLAGS_MODULE KBUILD_CFLAGS_MODULE KBUILD_LDFLAGS_MODULE<BR>export KBUILD_AFLAGS_KERNEL KBUILD_CFLAGS_KERNEL<BR>export KBUILD_ARFLAGS</FONT></P>
<P><FONT class=extract># When compiling out-of-tree modules, put MODVERDIR in the module<BR># tree rather than in the kernel tree. The kernel tree might<BR># even be read-only.<BR>export MODVERDIR := $(if $(KBUILD_EXTMOD),$(firstword $(KBUILD_EXTMOD))/).tmp_versions</FONT></P>
<P><FONT class=extract># Files to ignore in find ... statements</FONT></P>
<P><FONT class=extract>export RCS_FIND_IGNORE := \( -name SCCS -o -name BitKeeper -o -name .svn -o&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp;&nbsp;&nbsp; -name CVS -o -name .pc -o -name .hg -o -name .git \) \<BR>&nbsp;&nbsp;&nbsp;&nbsp; -prune -o<BR>export RCS_TAR_IGNORE := --exclude SCCS --exclude BitKeeper --exclude .svn \<BR>&nbsp;&nbsp;&nbsp; --exclude CVS --exclude .pc --exclude .hg --exclude .git</FONT></P>
<P><FONT class=extract># ===========================================================================<BR># Rules shared between *config targets and build targets</FONT></P>
<P><FONT class=extract># Basic helpers built in scripts/<BR>PHONY += scripts_basic<BR>scripts_basic:<BR>&nbsp;$(Q)$(MAKE) $(build)=scripts/basic<BR>&nbsp;$(Q)rm -f .tmp_quiet_recordmcount</FONT></P>
<P><FONT class=extract># To avoid any implicit rule to kick in, define an empty command.<BR>scripts/basic/%: scripts_basic ;</FONT></P>
<P><FONT class=extract>PHONY += outputmakefile<BR># outputmakefile generates a Makefile in the output directory, if using a<BR># separate output directory. This allows convenient use of make in the<BR># output directory.<BR>outputmakefile:<BR>ifneq ($(KBUILD_SRC),)<BR>&nbsp;$(Q)ln -fsn $(srctree) source<BR>&nbsp;$(Q)$(CONFIG_SHELL) $(srctree)/scripts/mkmakefile \<BR>&nbsp;&nbsp;&nbsp;&nbsp; $(srctree) $(objtree) $(VERSION) $(PATCHLEVEL)<BR>endif</FONT></P>
<P><FONT class=extract># Support for using generic headers in asm-generic<BR>PHONY += asm-generic<BR>asm-generic:<BR>&nbsp;$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.asm-generic \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; src=asm obj=arch/$(SRCARCH)/include/generated/asm<BR>&nbsp;$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.asm-generic \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; src=uapi/asm obj=arch/$(SRCARCH)/include/generated/uapi/asm</FONT></P>
<P><FONT class=extract># To make sure we do not include .config for any of the *config targets<BR># catch them early, and hand them over to scripts/kconfig/Makefile<BR># It is allowed to specify more targets when calling make, including<BR># mixing *config targets and build targets.<BR># For example 'make oldconfig all'.<BR># Detect when mixed targets is specified, and make a second invocation<BR># of make so .config is not included in this case either (for *config).</FONT></P>
<P><FONT class=extract>version_h := include/generated/uapi/linux/version.h<BR>old_version_h := include/linux/version.h</FONT></P>
<P><FONT class=extract>no-dot-config-targets := clean mrproper distclean \<BR>&nbsp;&nbsp;&nbsp; cscope gtags TAGS tags help% %docs check% coccicheck \<BR>&nbsp;&nbsp;&nbsp; $(version_h) headers_% archheaders archscripts \<BR>&nbsp;&nbsp;&nbsp; kernelversion %src-pkg</FONT></P>
<P><FONT class=extract>config-targets := 0<BR>mixed-targets&nbsp; := 0<BR>dot-config&nbsp;&nbsp;&nbsp;&nbsp; := 1</FONT></P>
<P><FONT class=extract>ifneq ($(filter $(no-dot-config-targets), $(MAKECMDGOALS)),)<BR>&nbsp;ifeq ($(filter-out $(no-dot-config-targets), $(MAKECMDGOALS)),)<BR>&nbsp;&nbsp;dot-config := 0<BR>&nbsp;endif<BR>endif</FONT></P>
<P><FONT class=extract>ifeq ($(KBUILD_EXTMOD),)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ifneq ($(filter config %config,$(MAKECMDGOALS)),)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; config-targets := 1<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ifneq ($(words $(MAKECMDGOALS)),1)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mixed-targets := 1<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; endif<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; endif<BR>endif</FONT></P>
<P><FONT class=extract>ifeq ($(mixed-targets),1)<BR># ===========================================================================<BR># We're called with mixed targets (*config and build targets).<BR># Handle them one by one.</FONT></P>
<P><FONT class=extract>PHONY += $(MAKECMDGOALS) __build_one_by_one</FONT></P>
<P><FONT class=extract>$(filter-out __build_one_by_one, $(MAKECMDGOALS)): __build_one_by_one<BR>&nbsp;@:</FONT></P>
<P><FONT class=extract>__build_one_by_one:<BR>&nbsp;$(Q)set -e; \<BR>&nbsp;for i in $(MAKECMDGOALS); do \<BR>&nbsp;&nbsp;$(MAKE) -f $(srctree)/Makefile $$i; \<BR>&nbsp;done</FONT></P>
<P><FONT class=extract>else<BR>ifeq ($(config-targets),1)<BR># ===========================================================================<BR># *config targets only - make sure prerequisites are updated, and descend<BR># in scripts/kconfig to make the *config target</FONT></P>
<P><FONT class=extract># Read arch specific Makefile to set KBUILD_DEFCONFIG as needed.<BR># KBUILD_DEFCONFIG may point out an alternative default configuration<BR># used for 'make defconfig'<BR>include $(srctree)/arch/$(SRCARCH)/Makefile<BR>export KBUILD_DEFCONFIG KBUILD_KCONFIG</FONT></P>
<P><FONT class=extract>config: scripts_basic outputmakefile FORCE<BR>&nbsp;$(Q)$(MAKE) $(build)=scripts/kconfig $@</FONT></P>
<P><FONT class=extract>%config: scripts_basic outputmakefile FORCE<BR>&nbsp;$(Q)$(MAKE) $(build)=scripts/kconfig $@</FONT></P>
<P><FONT class=extract>else<BR># ===========================================================================<BR># Build targets only - this includes vmlinux, arch specific targets, clean<BR># targets and others. In general all targets except *config targets.</FONT></P>
<P><FONT class=extract>ifeq ($(KBUILD_EXTMOD),)<BR># Additional helpers built in scripts/<BR># Carefully list dependencies so we do not try to build scripts twice<BR># in parallel<BR>PHONY += scripts<BR>scripts: scripts_basic include/config/auto.conf include/config/tristate.conf \<BR>&nbsp; asm-generic<BR>&nbsp;$(Q)$(MAKE) $(build)=$(@)</FONT></P>
<P><FONT class=extract># Objects we will link into vmlinux / subdirs we need to visit<BR>init-y&nbsp;&nbsp;:= init/<BR>drivers-y&nbsp;:= drivers/ sound/ firmware/<BR>net-y&nbsp;&nbsp;:= net/<BR>libs-y&nbsp;&nbsp;:= lib/<BR>core-y&nbsp;&nbsp;:= usr/<BR>endif # KBUILD_EXTMOD</FONT></P>
<P><FONT class=extract>ifeq ($(dot-config),1)<BR># Read in config<BR>-include include/config/auto.conf</FONT></P>
<P><FONT class=extract>ifeq ($(KBUILD_EXTMOD),)<BR># Read in dependencies to all Kconfig* files, make sure to run<BR># oldconfig if changes are detected.<BR>-include include/config/auto.conf.cmd</FONT></P>
<P><FONT class=extract># To avoid any implicit rule to kick in, define an empty command<BR>$(KCONFIG_CONFIG) include/config/auto.conf.cmd: ;</FONT></P>
<P><FONT class=extract># If .config is newer than include/config/auto.conf, someone tinkered<BR># with it and forgot to run make oldconfig.<BR># if auto.conf.cmd is missing then we are probably in a cleaned tree so<BR># we execute the config step to be sure to catch updated Kconfig files<BR>include/config/%.conf: $(KCONFIG_CONFIG) include/config/auto.conf.cmd<BR>&nbsp;$(Q)$(MAKE) -f $(srctree)/Makefile silentoldconfig<BR>else<BR># external modules needs include/generated/autoconf.h and include/config/auto.conf<BR># but do not care if they are up-to-date. Use auto.conf to trigger the test<BR>PHONY += include/config/auto.conf</FONT></P>
<P><FONT class=extract>include/config/auto.conf:<BR>&nbsp;$(Q)test -e include/generated/autoconf.h -a -e $@ || (&nbsp;&nbsp;\<BR>&nbsp;echo &gt;&amp;2;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;echo &gt;&amp;2 "&nbsp; ERROR: Kernel configuration is invalid.";&nbsp;&nbsp;\<BR>&nbsp;echo &gt;&amp;2 "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; include/generated/autoconf.h or $@ are missing.";\<BR>&nbsp;echo &gt;&amp;2 "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Run 'make oldconfig &amp;&amp; make prepare' on kernel src to fix it.";&nbsp;\<BR>&nbsp;echo &gt;&amp;2 ;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;/bin/false)</FONT></P>
<P><FONT class=extract>endif # KBUILD_EXTMOD</FONT></P>
<P><FONT class=extract>else<BR># Dummy target needed, because used as prerequisite<BR>include/config/auto.conf: ;<BR>endif # $(dot-config)</FONT></P>
<P><FONT class=extract># The all: target is the default when no target is given on the<BR># command line.<BR># This allow a user to issue only 'make' to build a kernel including modules<BR># Defaults to vmlinux, but the arch makefile usually adds further targets<BR>all: vmlinux</FONT></P>
<P><FONT class=extract>include $(srctree)/arch/$(SRCARCH)/Makefile</FONT></P>
<P><FONT class=extract>KBUILD_CFLAGS&nbsp;+= $(call cc-option,-fno-delete-null-pointer-checks,)</FONT></P>
<P><FONT class=extract>ifdef CONFIG_CC_OPTIMIZE_FOR_SIZE<BR>KBUILD_CFLAGS&nbsp;+= -Os $(call cc-disable-warning,maybe-uninitialized,)<BR>else<BR>KBUILD_CFLAGS&nbsp;+= -O2<BR>endif</FONT></P>
<P><FONT class=extract># Tell gcc to never replace conditional load with a non-conditional one<BR>KBUILD_CFLAGS&nbsp;+= $(call cc-option,--param=allow-store-data-races=0)</FONT></P>
<P><FONT class=extract>ifdef CONFIG_READABLE_ASM<BR># Disable optimizations that make assembler listings hard to read.<BR># reorder blocks reorders the control in the function<BR># ipa clone creates specialized cloned functions<BR># partial inlining inlines only parts of functions<BR>KBUILD_CFLAGS += $(call cc-option,-fno-reorder-blocks,) \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(call cc-option,-fno-ipa-cp-clone,) \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(call cc-option,-fno-partial-inlining)<BR>endif</FONT></P>
<P><FONT class=extract>ifneq ($(CONFIG_FRAME_WARN),0)<BR>KBUILD_CFLAGS += $(call cc-option,-Wframe-larger-than=${CONFIG_FRAME_WARN})<BR>endif</FONT></P>
<P># Handle stack protector mode.<BR>#<BR># Since kbuild can potentially perform two passes (first with the old<BR># .config values and then with updated .config values), we cannot error out<BR># if a desired compiler option is unsupported. If we were to error, kbuild<BR># could never get to the second pass and actually notice that we changed<BR># the option to something that was supported.<BR><FONT class=extract>#<BR># Additionally, we don't want to fallback and/or silently change which compiler<BR># flags will be used, since that leads to producing kernels with different<BR># security feature characteristics depending on the compiler used. ("But I<BR># selected CC_STACKPROTECTOR_STRONG! Why did it build with _REGULAR?!")<BR>#<BR># The middle ground is to warn here so that the failed option is obvious, but<BR># to let the build fail with bad compiler flags so that we can't produce a<BR># kernel when there is a CONFIG and compiler mismatch.<BR>#<BR>ifdef CONFIG_CC_STACKPROTECTOR_REGULAR<BR>&nbsp; stackp-flag := -fstack-protector<BR>&nbsp; ifeq ($(call cc-option, $(stackp-flag)),)<BR>&nbsp;&nbsp;&nbsp; $(warning Cannot use CONFIG_CC_STACKPROTECTOR_REGULAR: \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -fstack-protector not supported by compiler)<BR>&nbsp; endif<BR>else<BR>ifdef CONFIG_CC_STACKPROTECTOR_STRONG<BR>&nbsp; stackp-flag := -fstack-protector-strong<BR>&nbsp; ifeq ($(call cc-option, $(stackp-flag)),)<BR>&nbsp;&nbsp;&nbsp; $(warning Cannot use CONFIG_CC_STACKPROTECTOR_STRONG: \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -fstack-protector-strong not supported by compiler)<BR>&nbsp; endif<BR>else<BR>&nbsp; # Force off for distro compilers that enable stack protector by default.<BR>&nbsp; stackp-flag := $(call cc-option, -fno-stack-protector)<BR>endif<BR>endif<BR>KBUILD_CFLAGS += $(stackp-flag)</FONT></P>
<P><FONT class=extract>ifeq ($(COMPILER),clang)<BR>KBUILD_CPPFLAGS += $(call cc-option,-Qunused-arguments,)<BR>KBUILD_CPPFLAGS += $(call cc-option,-Wno-unknown-warning-option,)<BR>KBUILD_CFLAGS += $(call cc-disable-warning, unused-variable)<BR>KBUILD_CFLAGS += $(call cc-disable-warning, format-invalid-specifier)<BR>KBUILD_CFLAGS += $(call cc-disable-warning, gnu)<BR># Quiet clang warning: comparison of unsigned expression &lt; 0 is always false<BR>KBUILD_CFLAGS += $(call cc-disable-warning, tautological-compare)<BR># CLANG uses a _MergedGlobals as optimization, but this breaks modpost, as the<BR># source of a reference will be _MergedGlobals and not on of the whitelisted names.<BR># See modpost pattern 2<BR>KBUILD_CFLAGS += $(call cc-option, -mno-global-merge,)<BR>KBUILD_CFLAGS += $(call cc-option, -fcatch-undefined-behavior)<BR>else</FONT></P>
<P><FONT class=extract># This warning generated too much noise in a regular build.<BR># Use make W=1 to enable this warning (see scripts/Makefile.build)<BR>KBUILD_CFLAGS += $(call cc-disable-warning, unused-but-set-variable)<BR>endif</FONT></P>
<P><FONT class=extract>ifdef CONFIG_FRAME_POINTER<BR>KBUILD_CFLAGS&nbsp;+= -fno-omit-frame-pointer -fno-optimize-sibling-calls<BR>else<BR># Some targets (ARM with Thumb2, for example), can't be built with frame<BR># pointers.&nbsp; For those, we don't have FUNCTION_TRACER automatically<BR># select FRAME_POINTER.&nbsp; However, FUNCTION_TRACER adds -pg, and this is<BR># incompatible with -fomit-frame-pointer with current GCC, so we don't use<BR># -fomit-frame-pointer with FUNCTION_TRACER.<BR>ifndef CONFIG_FUNCTION_TRACER<BR>KBUILD_CFLAGS&nbsp;+= -fomit-frame-pointer<BR>endif<BR>endif</FONT></P>
<P><FONT class=extract>KBUILD_CFLAGS&nbsp;&nbsp; += $(call cc-option, -fno-var-tracking-assignments)</FONT></P>
<P><FONT class=extract>ifdef CONFIG_DEBUG_INFO<BR>ifdef CONFIG_DEBUG_INFO_SPLIT<BR>KBUILD_CFLAGS&nbsp;&nbsp; += $(call cc-option, -gsplit-dwarf, -g)<BR>else<BR>KBUILD_CFLAGS&nbsp;+= -g<BR>endif<BR>KBUILD_AFLAGS&nbsp;+= -Wa,-gdwarf-2<BR>endif<BR>ifdef CONFIG_DEBUG_INFO_DWARF4<BR>KBUILD_CFLAGS&nbsp;+= $(call cc-option, -gdwarf-4,)<BR>endif</FONT></P>
<P><FONT class=extract>ifdef CONFIG_DEBUG_INFO_REDUCED<BR>KBUILD_CFLAGS &nbsp;+= $(call cc-option, -femit-struct-debug-baseonly) \<BR>&nbsp;&nbsp;&nbsp;&nbsp; $(call cc-option,-fno-var-tracking)<BR>endif</FONT></P>
<P><FONT class=extract>ifdef CONFIG_FUNCTION_TRACER<BR>ifndef CC_FLAGS_FTRACE<BR>CC_FLAGS_FTRACE := -pg<BR>endif<BR>export CC_FLAGS_FTRACE<BR>ifdef CONFIG_HAVE_FENTRY<BR>CC_USING_FENTRY&nbsp;:= $(call cc-option, -mfentry -DCC_USING_FENTRY)<BR>endif<BR>KBUILD_CFLAGS&nbsp;+= $(CC_FLAGS_FTRACE) $(CC_USING_FENTRY)<BR>KBUILD_AFLAGS&nbsp;+= $(CC_USING_FENTRY)<BR>ifdef CONFIG_DYNAMIC_FTRACE<BR>&nbsp;ifdef CONFIG_HAVE_C_RECORDMCOUNT<BR>&nbsp;&nbsp;BUILD_C_RECORDMCOUNT := y<BR>&nbsp;&nbsp;export BUILD_C_RECORDMCOUNT<BR>&nbsp;endif<BR>endif<BR>endif</FONT></P>
<P><FONT class=extract># We trigger additional mismatches with less inlining<BR>ifdef CONFIG_DEBUG_SECTION_MISMATCH<BR>KBUILD_CFLAGS += $(call cc-option, -fno-inline-functions-called-once)<BR>endif</FONT></P>
<P><FONT class=extract># arch Makefile may override CC so keep this after arch Makefile is included<BR>NOSTDINC_FLAGS += -nostdinc -isystem $(shell $(CC) -print-file-name=include)<BR>CHECKFLAGS&nbsp;&nbsp;&nbsp;&nbsp; += $(NOSTDINC_FLAGS)</FONT></P>
<P><FONT class=extract># warn about C99 declaration after statement<BR>KBUILD_CFLAGS += $(call cc-option,-Wdeclaration-after-statement,)</FONT></P>
<P><FONT class=extract># disable pointer signed / unsigned warnings in gcc 4.0<BR>KBUILD_CFLAGS += $(call cc-disable-warning, pointer-sign)</FONT></P>
<P><FONT class=extract># disable invalid "can't wrap" optimizations for signed / pointers<BR>KBUILD_CFLAGS&nbsp;+= $(call cc-option,-fno-strict-overflow)</FONT></P>
<P><FONT class=extract># conserve stack if available<BR>KBUILD_CFLAGS&nbsp;&nbsp; += $(call cc-option,-fconserve-stack)</FONT></P>
<P><FONT class=extract># disallow errors like 'EXPORT_GPL(foo);' with missing header<BR>KBUILD_CFLAGS&nbsp;&nbsp; += $(call cc-option,-Werror=implicit-int)</FONT></P>
<P><FONT class=extract># require functions to have arguments in prototypes, not empty 'int foo()'<BR>KBUILD_CFLAGS&nbsp;&nbsp; += $(call cc-option,-Werror=strict-prototypes)</FONT></P>
<P><FONT class=extract># Prohibit date/time macros, which would make the build non-deterministic<BR>KBUILD_CFLAGS&nbsp;&nbsp; += $(call cc-option,-Werror=date-time)</FONT></P>
<P><FONT class=extract># use the deterministic mode of AR if available<BR>KBUILD_ARFLAGS := $(call ar-option,D)</FONT></P>
<P><FONT class=extract># check for 'asm goto'<BR>ifeq ($(shell $(CONFIG_SHELL) $(srctree)/scripts/gcc-goto.sh $(CC)), y)<BR>&nbsp;KBUILD_CFLAGS += -DCC_HAVE_ASM_GOTO<BR>endif</FONT></P>
<P><FONT class=extract>include $(srctree)/scripts/Makefile.kasan<BR>include $(srctree)/scripts/Makefile.extrawarn</FONT></P>
<P><FONT class=extract># Add user supplied CPPFLAGS, AFLAGS and CFLAGS as the last assignments<BR>KBUILD_CPPFLAGS += $(KCPPFLAGS)<BR>KBUILD_AFLAGS += $(KAFLAGS)<BR>KBUILD_CFLAGS += $(KCFLAGS)</FONT></P>
<P><FONT class=extract># Use --build-id when available.<BR>LDFLAGS_BUILD_ID = $(patsubst -Wl$(comma)%,%,\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(call cc-ldoption, -Wl$(comma)--build-id,))<BR>KBUILD_LDFLAGS_MODULE += $(LDFLAGS_BUILD_ID)<BR>LDFLAGS_vmlinux += $(LDFLAGS_BUILD_ID)</FONT></P>
<P><FONT class=extract>ifeq ($(CONFIG_STRIP_ASM_SYMS),y)<BR>LDFLAGS_vmlinux&nbsp;+= $(call ld-option, -X,)<BR>endif</FONT></P>
<P><FONT class=extract># Default kernel image to build when no specific target is given.<BR># KBUILD_IMAGE may be overruled on the command line or<BR># set in the environment<BR># Also any assignments in arch/$(ARCH)/Makefile take precedence over<BR># this default value<BR>export KBUILD_IMAGE ?= vmlinux</FONT></P>
<P><FONT class=extract>#<BR># INSTALL_PATH specifies where to place the updated kernel and system map<BR># images. Default is /boot, but you can set it to other values<BR>export&nbsp;INSTALL_PATH ?= /boot</FONT></P>
<P><FONT class=extract>#<BR># INSTALL_DTBS_PATH specifies a prefix for relocations required by build roots.<BR># Like INSTALL_MOD_PATH, it isn't defined in the Makefile, but can be passed as<BR># an argument if needed. Otherwise it defaults to the kernel install path<BR>#<BR>export INSTALL_DTBS_PATH ?= $(INSTALL_PATH)/dtbs/$(KERNELRELEASE)</FONT></P>
<P><FONT class=extract>#<BR># INSTALL_MOD_PATH specifies a prefix to MODLIB for module directory<BR># relocations required by build roots.&nbsp; This is not defined in the<BR># makefile but the argument can be passed to make if needed.<BR>#</FONT></P>
<P><FONT class=extract>MODLIB&nbsp;= $(INSTALL_MOD_PATH)/lib/modules/$(KERNELRELEASE)<BR>export MODLIB</FONT></P>
<P><FONT class=extract>#<BR># INSTALL_MOD_STRIP, if defined, will cause modules to be<BR># stripped after they are installed.&nbsp; If INSTALL_MOD_STRIP is '1', then<BR># the default option --strip-debug will be used.&nbsp; Otherwise,<BR># INSTALL_MOD_STRIP value will be used as the options to the strip command.</FONT></P>
<P><FONT class=extract>ifdef INSTALL_MOD_STRIP<BR>ifeq ($(INSTALL_MOD_STRIP),1)<BR>mod_strip_cmd = $(STRIP) --strip-debug<BR>else<BR>mod_strip_cmd = $(STRIP) $(INSTALL_MOD_STRIP)<BR>endif # INSTALL_MOD_STRIP=1<BR>else<BR>mod_strip_cmd = true<BR>endif # INSTALL_MOD_STRIP<BR>export mod_strip_cmd</FONT></P>
<P><FONT class=extract># CONFIG_MODULE_COMPRESS, if defined, will cause module to be compressed<BR># after they are installed in agreement with CONFIG_MODULE_COMPRESS_GZIP<BR># or CONFIG_MODULE_COMPRESS_XZ.</FONT></P>
<P><FONT class=extract>mod_compress_cmd = true<BR>ifdef CONFIG_MODULE_COMPRESS<BR>&nbsp; ifdef CONFIG_MODULE_COMPRESS_GZIP<BR>&nbsp;&nbsp;&nbsp; mod_compress_cmd = gzip -n<BR>&nbsp; endif # CONFIG_MODULE_COMPRESS_GZIP<BR>&nbsp; ifdef CONFIG_MODULE_COMPRESS_XZ<BR>&nbsp;&nbsp;&nbsp; mod_compress_cmd = xz<BR>&nbsp; endif # CONFIG_MODULE_COMPRESS_XZ<BR>endif # CONFIG_MODULE_COMPRESS<BR>export mod_compress_cmd</FONT></P>
<P><FONT class=extract># Select initial ramdisk compression format, default is gzip(1).<BR># This shall be used by the dracut(8) tool while creating an initramfs image.<BR>#<BR>INITRD_COMPRESS-y&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := gzip<BR>INITRD_COMPRESS-$(CONFIG_RD_BZIP2) := bzip2<BR>INITRD_COMPRESS-$(CONFIG_RD_LZMA)&nbsp; := lzma<BR>INITRD_COMPRESS-$(CONFIG_RD_XZ)&nbsp;&nbsp;&nbsp; := xz<BR>INITRD_COMPRESS-$(CONFIG_RD_LZO)&nbsp;&nbsp; := lzo<BR>INITRD_COMPRESS-$(CONFIG_RD_LZ4)&nbsp;&nbsp; := lz4<BR># do not export INITRD_COMPRESS, since we didn't actually<BR># choose a sane default compression above.<BR># export INITRD_COMPRESS := $(INITRD_COMPRESS-y)</FONT></P>
<P><FONT class=extract>ifdef CONFIG_MODULE_SIG_ALL<BR>MODSECKEY = ./signing_key.priv<BR>MODPUBKEY = ./signing_key.x509<BR>export MODPUBKEY<BR>mod_sign_cmd = perl $(srctree)/scripts/sign-file $(CONFIG_MODULE_SIG_HASH) $(MODSECKEY) $(MODPUBKEY)<BR>else<BR>mod_sign_cmd = true<BR>endif<BR>export mod_sign_cmd</FONT></P>
<P><BR><FONT class=extract>ifeq ($(KBUILD_EXTMOD),)<BR>core-y&nbsp;&nbsp;+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/</FONT></P>
<P><FONT class=extract>vmlinux-dirs&nbsp;:= $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(core-y) $(core-m) $(drivers-y) $(drivers-m) \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(net-y) $(net-m) $(libs-y) $(libs-m)))</FONT></P>
<P><FONT class=extract>vmlinux-alldirs&nbsp;:= $(sort $(vmlinux-dirs) $(patsubst %/,%,$(filter %/, \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(init-) $(core-) $(drivers-) $(net-) $(libs-))))</FONT></P>
<P><FONT class=extract>init-y&nbsp;&nbsp;:= $(patsubst %/, %/built-in.o, $(init-y))<BR>core-y&nbsp;&nbsp;:= $(patsubst %/, %/built-in.o, $(core-y))<BR>drivers-y&nbsp;:= $(patsubst %/, %/built-in.o, $(drivers-y))<BR>net-y&nbsp;&nbsp;:= $(patsubst %/, %/built-in.o, $(net-y))<BR>libs-y1&nbsp;&nbsp;:= $(patsubst %/, %/lib.a, $(libs-y))<BR>libs-y2&nbsp;&nbsp;:= $(patsubst %/, %/built-in.o, $(libs-y))<BR>libs-y&nbsp;&nbsp;:= $(libs-y1) $(libs-y2)</FONT></P>
<P><FONT class=extract># Externally visible symbols (used by link-vmlinux.sh)<BR>export KBUILD_VMLINUX_INIT := $(head-y) $(init-y)<BR>export KBUILD_VMLINUX_MAIN := $(core-y) $(libs-y) $(drivers-y) $(net-y)<BR>export KBUILD_LDS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := arch/$(SRCARCH)/kernel/vmlinux.lds<BR>export LDFLAGS_vmlinux<BR># used by scripts/pacmage/Makefile<BR>export KBUILD_ALLDIRS := $(sort $(filter-out arch/%,$(vmlinux-alldirs)) arch Documentation include samples scripts tools virt)</FONT></P>
<P><FONT class=extract>vmlinux-deps := $(KBUILD_LDS) $(KBUILD_VMLINUX_INIT) $(KBUILD_VMLINUX_MAIN)</FONT></P>
<P><FONT class=extract># Final link of vmlinux<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmd_link-vmlinux = $(CONFIG_SHELL) $&lt; $(LD) $(LDFLAGS) $(LDFLAGS_vmlinux)<BR>quiet_cmd_link-vmlinux = LINK&nbsp;&nbsp;&nbsp; $@</FONT></P>
<P><FONT class=extract># Include targets which we want to<BR># execute if the rest of the kernel build went well.<BR>vmlinux: scripts/link-vmlinux.sh $(vmlinux-deps) FORCE<BR>ifdef CONFIG_HEADERS_CHECK<BR>&nbsp;$(Q)$(MAKE) -f $(srctree)/Makefile headers_check<BR>endif<BR>ifdef CONFIG_SAMPLES<BR>&nbsp;$(Q)$(MAKE) $(build)=samples<BR>endif<BR>ifdef CONFIG_BUILD_DOCSRC<BR>&nbsp;$(Q)$(MAKE) $(build)=Documentation<BR>endif<BR>ifdef CONFIG_GDB_SCRIPTS<BR>&nbsp;$(Q)ln -fsn `cd $(srctree) &amp;&amp; /bin/pwd`/scripts/gdb/vmlinux-gdb.py<BR>endif<BR>&nbsp;+$(call if_changed,link-vmlinux)</FONT></P>
<P><FONT class=extract># The actual objects are generated when descending,<BR># make sure no implicit rule kicks in<BR>$(sort $(vmlinux-deps)): $(vmlinux-dirs) ;</FONT></P>
<P><FONT class=extract># Handle descending into subdirectories listed in $(vmlinux-dirs)<BR># Preset locale variables to speed up the build process. Limit locale<BR># tweaks to this spot to avoid wrong language settings when running<BR># make menuconfig etc.<BR># Error messages still appears in the original language</FONT></P>
<P><FONT class=extract>PHONY += $(vmlinux-dirs)<BR>$(vmlinux-dirs): prepare scripts<BR>&nbsp;$(Q)$(MAKE) $(build)=$@</FONT></P>
<P><FONT class=extract>define filechk_kernel.release<BR>&nbsp;echo "$(KERNELVERSION)$$($(CONFIG_SHELL) $(srctree)/scripts/setlocalversion $(srctree))"<BR>endef</FONT></P>
<P><FONT class=extract># Store (new) KERNELRELEASE string in include/config/kernel.release<BR>include/config/kernel.release: include/config/auto.conf FORCE<BR>&nbsp;$(call filechk,kernel.release)</FONT></P>
<P><BR><FONT class=extract># Things we need to do before we recursively start building the kernel<BR># or the modules are listed in "prepare".<BR># A multi level approach is used. prepareN is processed before prepareN-1.<BR># archprepare is used in arch Makefiles and when processed asm symlink,<BR># version.h and scripts_basic is processed / created.</FONT></P>
<P><FONT class=extract># Listed in dependency order<BR>PHONY += prepare archprepare prepare0 prepare1 prepare2 prepare3</FONT></P>
<P><FONT class=extract># prepare3 is used to check if we are building in a separate output directory,<BR># and if so do:<BR># 1) Check that make has not been executed in the kernel src $(srctree)<BR>prepare3: include/config/kernel.release<BR>ifneq ($(KBUILD_SRC),)<BR>&nbsp;@$(kecho) '&nbsp; Using $(srctree) as source for kernel'<BR>&nbsp;$(Q)if [ -f $(srctree)/.config -o -d $(srctree)/include/config ]; then \<BR>&nbsp;&nbsp;echo &gt;&amp;2 "&nbsp; $(srctree) is not clean, please run 'make mrproper'"; \<BR>&nbsp;&nbsp;echo &gt;&amp;2 "&nbsp; in the '$(srctree)' directory.";\<BR>&nbsp;&nbsp;/bin/false; \<BR>&nbsp;fi;<BR>endif</FONT></P>
<P><FONT class=extract># prepare2 creates a makefile if using a separate output directory<BR>prepare2: prepare3 outputmakefile asm-generic</FONT></P>
<P><FONT class=extract>prepare1: prepare2 $(version_h) include/generated/utsrelease.h \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; include/config/auto.conf<BR>&nbsp;$(cmd_crmodverdir)</FONT></P>
<P><FONT class=extract>archprepare: archheaders archscripts prepare1 scripts_basic</FONT></P>
<P><FONT class=extract>prepare0: archprepare FORCE<BR>&nbsp;$(Q)$(MAKE) $(build)=.</FONT></P>
<P><FONT class=extract># All the preparing..<BR>prepare: prepare0</FONT></P>
<P><FONT class=extract># Generate some files<BR># ---------------------------------------------------------------------------</FONT></P>
<P><FONT class=extract># KERNELRELEASE can change from a few different places, meaning version.h<BR># needs to be updated, so this check is forced on all builds</FONT></P>
<P><FONT class=extract>uts_len := 64<BR>define filechk_utsrelease.h<BR>&nbsp;if [ `echo -n "$(KERNELRELEASE)" | wc -c ` -gt $(uts_len) ]; then \<BR>&nbsp;&nbsp; echo '"$(KERNELRELEASE)" exceeds $(uts_len) characters' &gt;&amp;2;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp; exit 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;fi;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;(echo \#define UTS_RELEASE \"$(KERNELRELEASE)\";)<BR>endef</FONT></P>
<P><FONT class=extract>define filechk_version.h<BR>&nbsp;(echo \#define LINUX_VERSION_CODE $(shell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;expr $(VERSION) \* 65536 + 0$(PATCHLEVEL) \* 256 + 0$(SUBLEVEL)); \<BR>&nbsp;echo '#define KERNEL_VERSION(a,b,c) (((a) &lt;&lt; 16) + ((b) &lt;&lt; 8) + (c))';)<BR>endef</FONT></P>
<P><FONT class=extract>$(version_h): $(srctree)/Makefile FORCE<BR>&nbsp;$(call filechk,version.h)<BR>&nbsp;$(Q)rm -f $(old_version_h)</FONT></P>
<P><FONT class=extract>include/generated/utsrelease.h: include/config/kernel.release FORCE<BR>&nbsp;$(call filechk,utsrelease.h)</FONT></P>
<P><FONT class=extract>PHONY += headerdep<BR>headerdep:<BR>&nbsp;$(Q)find $(srctree)/include/ -name '*.h' | xargs --max-args 1 \<BR>&nbsp;$(srctree)/scripts/headerdep.pl -I$(srctree)/include</FONT></P>
<P><FONT class=extract># ---------------------------------------------------------------------------</FONT></P>
<P><FONT class=extract>PHONY += depend dep<BR>depend dep:<BR>&nbsp;@echo '*** Warning: make $@ is unnecessary now.'</FONT></P>
<P><FONT class=extract># ---------------------------------------------------------------------------<BR># Firmware install<BR>INSTALL_FW_PATH=$(INSTALL_MOD_PATH)/lib/firmware<BR>export INSTALL_FW_PATH</FONT></P>
<P><FONT class=extract>PHONY += firmware_install<BR>firmware_install: FORCE<BR>&nbsp;@mkdir -p $(objtree)/firmware<BR>&nbsp;$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.fwinst obj=firmware __fw_install</FONT></P>
<P><FONT class=extract># ---------------------------------------------------------------------------<BR># Kernel headers</FONT></P>
<P><FONT class=extract>#Default location for installed headers<BR>export INSTALL_HDR_PATH = $(objtree)/usr</FONT></P>
<P><FONT class=extract># If we do an all arch process set dst to asm-$(hdr-arch)<BR>hdr-dst = $(if $(KBUILD_HEADERS), dst=include/asm-$(hdr-arch), dst=include/asm)</FONT></P>
<P><FONT class=extract>PHONY += archheaders<BR>archheaders:</FONT></P>
<P><FONT class=extract>PHONY += archscripts<BR>archscripts:</FONT></P>
<P><FONT class=extract>PHONY += __headers<BR>__headers: $(version_h) scripts_basic asm-generic archheaders archscripts FORCE<BR>&nbsp;$(Q)$(MAKE) $(build)=scripts build_unifdef</FONT></P>
<P><FONT class=extract>PHONY += headers_install_all<BR>headers_install_all:<BR>&nbsp;$(Q)$(CONFIG_SHELL) $(srctree)/scripts/headers.sh install</FONT></P>
<P><FONT class=extract>PHONY += headers_install<BR>headers_install: __headers<BR>&nbsp;$(if $(wildcard $(srctree)/arch/$(hdr-arch)/include/uapi/asm/Kbuild),, \<BR>&nbsp;&nbsp; $(error Headers not exportable for the $(SRCARCH) architecture))<BR>&nbsp;$(Q)$(MAKE) $(hdr-inst)=include/uapi<BR>&nbsp;$(Q)$(MAKE) $(hdr-inst)=arch/$(hdr-arch)/include/uapi/asm $(hdr-dst)</FONT></P>
<P><FONT class=extract>PHONY += headers_check_all<BR>headers_check_all: headers_install_all<BR>&nbsp;$(Q)$(CONFIG_SHELL) $(srctree)/scripts/headers.sh check</FONT></P>
<P><FONT class=extract>PHONY += headers_check<BR>headers_check: headers_install<BR>&nbsp;$(Q)$(MAKE) $(hdr-inst)=include/uapi HDRCHECK=1<BR>&nbsp;$(Q)$(MAKE) $(hdr-inst)=arch/$(hdr-arch)/include/uapi/asm $(hdr-dst) HDRCHECK=1</FONT></P>
<P><FONT class=extract># ---------------------------------------------------------------------------<BR># Kernel selftest</FONT></P>
<P><FONT class=extract>PHONY += kselftest<BR>kselftest:<BR>&nbsp;$(Q)$(MAKE) -C tools/testing/selftests run_tests</FONT></P>
<P><FONT class=extract># ---------------------------------------------------------------------------<BR># Modules</FONT></P>
<P><FONT class=extract>ifdef CONFIG_MODULES</FONT></P>
<P><FONT class=extract># By default, build modules as well</FONT></P>
<P><FONT class=extract>all: modules</FONT></P>
<P><FONT class=extract># Build modules<BR>#<BR># A module can be listed more than once in obj-m resulting in<BR># duplicate lines in modules.order files.&nbsp; Those are removed<BR># using awk while concatenating to the final file.</FONT></P>
<P><FONT class=extract>PHONY += modules<BR>modules: $(vmlinux-dirs) $(if $(KBUILD_BUILTIN),vmlinux) modules.builtin<BR>&nbsp;$(Q)$(AWK) '!x[$$0]++' $(vmlinux-dirs:%=$(objtree)/%/modules.order) &gt; $(objtree)/modules.order<BR>&nbsp;@$(kecho) '&nbsp; Building modules, stage 2.';<BR>&nbsp;$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.modpost<BR>&nbsp;$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.fwinst obj=firmware __fw_modbuild</FONT></P>
<P><FONT class=extract>modules.builtin: $(vmlinux-dirs:%=%/modules.builtin)<BR>&nbsp;$(Q)$(AWK) '!x[$$0]++' $^ &gt; $(objtree)/modules.builtin</FONT></P>
<P><FONT class=extract>%/modules.builtin: include/config/auto.conf<BR>&nbsp;$(Q)$(MAKE) $(modbuiltin)=$*</FONT></P>
<P><BR><FONT class=extract># Target to prepare building external modules<BR>PHONY += modules_prepare<BR>modules_prepare: prepare scripts</FONT></P>
<P><FONT class=extract># Target to install modules<BR>PHONY += modules_install<BR>modules_install: _modinst_ _modinst_post</FONT></P>
<P><FONT class=extract>PHONY += _modinst_<BR>_modinst_:<BR>&nbsp;@rm -rf $(MODLIB)/kernel<BR>&nbsp;@rm -f $(MODLIB)/source<BR>&nbsp;@mkdir -p $(MODLIB)/kernel<BR>&nbsp;@ln -s `cd $(srctree) &amp;&amp; /bin/pwd` $(MODLIB)/source<BR>&nbsp;@if [ ! $(objtree) -ef&nbsp; $(MODLIB)/build ]; then \<BR>&nbsp;&nbsp;rm -f $(MODLIB)/build ; \<BR>&nbsp;&nbsp;ln -s $(CURDIR) $(MODLIB)/build ; \<BR>&nbsp;fi<BR>&nbsp;@cp -f $(objtree)/modules.order $(MODLIB)/<BR>&nbsp;@cp -f $(objtree)/modules.builtin $(MODLIB)/<BR>&nbsp;$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.modinst</FONT></P>
<P><FONT class=extract># This depmod is only for convenience to give the initial<BR># boot a modules.dep even before / is mounted read-write.&nbsp; However the<BR># boot script depmod is the master version.<BR>PHONY += _modinst_post<BR>_modinst_post: _modinst_<BR>&nbsp;$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.fwinst obj=firmware __fw_modinst<BR>&nbsp;$(call cmd,depmod)</FONT></P>
<P><FONT class=extract>ifeq ($(CONFIG_MODULE_SIG), y)<BR>PHONY += modules_sign<BR>modules_sign:<BR>&nbsp;$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.modsign<BR>endif</FONT></P>
<P><FONT class=extract>else # CONFIG_MODULES</FONT></P>
<P><FONT class=extract># Modules not configured<BR># ---------------------------------------------------------------------------</FONT></P>
<P><FONT class=extract>modules modules_install: FORCE<BR>&nbsp;@echo &gt;&amp;2<BR>&nbsp;@echo &gt;&amp;2 "The present kernel configuration has modules disabled."<BR>&nbsp;@echo &gt;&amp;2 "Type 'make config' and enable loadable module support."<BR>&nbsp;@echo &gt;&amp;2 "Then build a kernel with module support enabled."<BR>&nbsp;@echo &gt;&amp;2<BR>&nbsp;@exit 1</FONT></P>
<P><FONT class=extract>endif # CONFIG_MODULES</FONT></P>
<P><FONT class=extract>###<BR># Cleaning is done on three levels.<BR># make clean&nbsp;&nbsp;&nbsp;&nbsp; Delete most generated files<BR>#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Leave enough to build external modules<BR># make mrproper&nbsp; Delete the current configuration, and all generated files<BR># make distclean Remove editor backup files, patch leftover files and the like</FONT></P>
<P><FONT class=extract># Directories &amp; files removed with 'make clean'<BR>CLEAN_DIRS&nbsp; += $(MODVERDIR)</FONT></P>
<P><FONT class=extract># Directories &amp; files removed with 'make mrproper'<BR>MRPROPER_DIRS&nbsp; += include/config usr/include include/generated&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp;&nbsp; arch/*/include/generated .tmp_objdiff<BR>MRPROPER_FILES += .config .config.old .version .old_version \<BR>&nbsp;&nbsp;&nbsp; Module.symvers tags TAGS cscope* GPATH GTAGS GRTAGS GSYMS \<BR>&nbsp;&nbsp;&nbsp; signing_key.priv signing_key.x509 x509.genkey&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp; extra_certificates signing_key.x509.keyid&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp; signing_key.x509.signer vmlinux-gdb.py</FONT></P>
<P><FONT class=extract># clean - Delete most, but leave enough to build external modules<BR>#<BR>clean: rm-dirs&nbsp; := $(CLEAN_DIRS)<BR>clean: rm-files := $(CLEAN_FILES)<BR>clean-dirs&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := $(addprefix _clean_, . $(vmlinux-alldirs) Documentation samples)</FONT></P>
<P><FONT class=extract>PHONY += $(clean-dirs) clean archclean vmlinuxclean<BR>$(clean-dirs):<BR>&nbsp;$(Q)$(MAKE) $(clean)=$(patsubst _clean_%,%,$@)</FONT></P>
<P><FONT class=extract>vmlinuxclean:<BR>&nbsp;$(Q)$(CONFIG_SHELL) $(srctree)/scripts/link-vmlinux.sh clean</FONT></P>
<P><FONT class=extract>clean: archclean vmlinuxclean</FONT></P>
<P><FONT class=extract># mrproper - Delete all generated files, including .config<BR>#<BR>mrproper: rm-dirs&nbsp; := $(wildcard $(MRPROPER_DIRS))<BR>mrproper: rm-files := $(wildcard $(MRPROPER_FILES))<BR>mrproper-dirs&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := $(addprefix _mrproper_,Documentation/DocBook scripts)</FONT></P>
<P><FONT class=extract>PHONY += $(mrproper-dirs) mrproper archmrproper<BR>$(mrproper-dirs):<BR>&nbsp;$(Q)$(MAKE) $(clean)=$(patsubst _mrproper_%,%,$@)</FONT></P>
<P><FONT class=extract>mrproper: clean archmrproper $(mrproper-dirs)<BR>&nbsp;$(call cmd,rmdirs)<BR>&nbsp;$(call cmd,rmfiles)</FONT></P>
<P><FONT class=extract># distclean<BR>#<BR>PHONY += distclean</FONT></P>
<P><FONT class=extract>distclean: mrproper<BR>&nbsp;@find $(srctree) $(RCS_FIND_IGNORE) \<BR>&nbsp;&nbsp;\( -name '*.orig' -o -name '*.rej' -o -name '*~' \<BR>&nbsp;&nbsp;-o -name '*.bak' -o -name '#*#' -o -name '.*.orig' \<BR>&nbsp;&nbsp;-o -name '.*.rej' -o -name '*%'&nbsp; -o -name 'core' \) \<BR>&nbsp;&nbsp;-type f -print | xargs rm -f</FONT></P>
<P><BR><FONT class=extract># Packaging of the kernel to various formats<BR># ---------------------------------------------------------------------------<BR># rpm target kept for backward compatibility<BR>package-dir&nbsp;:= scripts/package</FONT></P>
<P><FONT class=extract>%src-pkg: FORCE<BR>&nbsp;$(Q)$(MAKE) $(build)=$(package-dir) $@<BR>%pkg: include/config/kernel.release FORCE<BR>&nbsp;$(Q)$(MAKE) $(build)=$(package-dir) $@<BR>rpm: include/config/kernel.release FORCE<BR>&nbsp;$(Q)$(MAKE) $(build)=$(package-dir) $@</FONT></P>
<P><BR><FONT class=extract># Brief documentation of the typical targets used<BR># ---------------------------------------------------------------------------</FONT></P>
<P><FONT class=extract>boards := $(wildcard $(srctree)/arch/$(SRCARCH)/configs/*_defconfig)<BR>boards := $(sort $(notdir $(boards)))<BR>board-dirs := $(dir $(wildcard $(srctree)/arch/$(SRCARCH)/configs/*/*_defconfig))<BR>board-dirs := $(sort $(notdir $(board-dirs:/=)))</FONT></P>
<P><FONT class=extract>help:<BR>&nbsp;@echo&nbsp; 'Cleaning targets:'<BR>&nbsp;@echo&nbsp; '&nbsp; clean&nbsp;&nbsp;&nbsp; - Remove most generated files but keep the config and'<BR>&nbsp;@echo&nbsp; '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; enough build support to build external modules'<BR>&nbsp;@echo&nbsp; '&nbsp; mrproper&nbsp;&nbsp; - Remove all generated files + config + various backup files'<BR>&nbsp;@echo&nbsp; '&nbsp; distclean&nbsp;&nbsp; - mrproper + remove editor backup and patch files'<BR>&nbsp;@echo&nbsp; ''<BR>&nbsp;@echo&nbsp; 'Configuration targets:'<BR>&nbsp;@$(MAKE) -f $(srctree)/scripts/kconfig/Makefile help<BR>&nbsp;@echo&nbsp; ''<BR>&nbsp;@echo&nbsp; 'Other generic targets:'<BR>&nbsp;@echo&nbsp; '&nbsp; all&nbsp;&nbsp;&nbsp; - Build all targets marked with [*]'<BR>&nbsp;@echo&nbsp; '* vmlinux&nbsp;&nbsp; - Build the bare kernel'<BR>&nbsp;@echo&nbsp; '* modules&nbsp;&nbsp; - Build all modules'<BR>&nbsp;@echo&nbsp; '&nbsp; modules_install - Install all modules to INSTALL_MOD_PATH (default: /)'<BR>&nbsp;@echo&nbsp; '&nbsp; firmware_install- Install all firmware to INSTALL_FW_PATH'<BR>&nbsp;@echo&nbsp; '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (default: $$(INSTALL_MOD_PATH)/lib/firmware)'<BR>&nbsp;@echo&nbsp; '&nbsp; dir/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Build all files in dir and below'<BR>&nbsp;@echo&nbsp; '&nbsp; dir/file.[oisS] - Build specified target only'<BR>&nbsp;@echo&nbsp; '&nbsp; dir/file.lst&nbsp;&nbsp;&nbsp; - Build specified mixed source/assembly target only'<BR>&nbsp;@echo&nbsp; '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (requires a recent binutils and recent build (System.map))'<BR>&nbsp;@echo&nbsp; '&nbsp; dir/file.ko&nbsp;&nbsp;&nbsp;&nbsp; - Build module including final link'<BR>&nbsp;@echo&nbsp; '&nbsp; modules_prepare - Set up for building external modules'<BR>&nbsp;@echo&nbsp; '&nbsp; tags/TAGS&nbsp;&nbsp; - Generate tags file for editors'<BR>&nbsp;@echo&nbsp; '&nbsp; cscope&nbsp;&nbsp; - Generate cscope index'<BR>&nbsp;@echo&nbsp; '&nbsp; gtags&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Generate GNU GLOBAL index'<BR>&nbsp;@echo&nbsp; '&nbsp; kernelrelease&nbsp;&nbsp; - Output the release version string (use with make -s)'<BR>&nbsp;@echo&nbsp; '&nbsp; kernelversion&nbsp;&nbsp; - Output the version stored in Makefile (use with make -s)'<BR>&nbsp;@echo&nbsp; '&nbsp; image_name&nbsp;&nbsp; - Output the image name (use with make -s)'<BR>&nbsp;@echo&nbsp; '&nbsp; headers_install - Install sanitised kernel headers to INSTALL_HDR_PATH'; \<BR>&nbsp; echo&nbsp; '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (default: $(INSTALL_HDR_PATH))'; \<BR>&nbsp; echo&nbsp; ''<BR>&nbsp;@echo&nbsp; 'Static analysers'<BR>&nbsp;@echo&nbsp; '&nbsp; checkstack&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Generate a list of stack hogs'<BR>&nbsp;@echo&nbsp; '&nbsp; namespacecheck&nbsp; - Name space analysis on compiled kernel'<BR>&nbsp;@echo&nbsp; '&nbsp; versioncheck&nbsp;&nbsp;&nbsp; - Sanity check on version.h usage'<BR>&nbsp;@echo&nbsp; '&nbsp; includecheck&nbsp;&nbsp;&nbsp; - Check for duplicate included header files'<BR>&nbsp;@echo&nbsp; '&nbsp; export_report&nbsp;&nbsp; - List the usages of all exported symbols'<BR>&nbsp;@echo&nbsp; '&nbsp; headers_check&nbsp;&nbsp; - Sanity check on exported headers'<BR>&nbsp;@echo&nbsp; '&nbsp; headerdep&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Detect inclusion cycles in headers'<BR>&nbsp;@$(MAKE) -f $(srctree)/scripts/Makefile.help checker-help<BR>&nbsp;@echo&nbsp; ''<BR>&nbsp;@echo&nbsp; 'Kernel selftest'<BR>&nbsp;@echo&nbsp; '&nbsp; kselftest&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Build and run kernel selftest (run as root)'<BR>&nbsp;@echo&nbsp; '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Build, install, and boot kernel before'<BR>&nbsp;@echo&nbsp; '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; running kselftest on it'<BR>&nbsp;@echo&nbsp; ''<BR>&nbsp;@echo&nbsp; 'Kernel packaging:'<BR>&nbsp;@$(MAKE) $(build)=$(package-dir) help<BR>&nbsp;@echo&nbsp; ''<BR>&nbsp;@echo&nbsp; 'Documentation targets:'<BR>&nbsp;@$(MAKE) -f $(srctree)/Documentation/DocBook/Makefile dochelp<BR>&nbsp;@echo&nbsp; ''<BR>&nbsp;@echo&nbsp; 'Architecture specific targets ($(SRCARCH)):'<BR>&nbsp;@$(if $(archhelp),$(archhelp),\<BR>&nbsp;&nbsp;echo '&nbsp; No architecture specific help defined for $(SRCARCH)')<BR>&nbsp;@echo&nbsp; ''<BR>&nbsp;@$(if $(boards), \<BR>&nbsp;&nbsp;$(foreach b, $(boards), \<BR>&nbsp;&nbsp;printf "&nbsp; %-24s - Build for %s\\n" $(b) $(subst _defconfig,,$(b));) \<BR>&nbsp;&nbsp;echo '')<BR>&nbsp;@$(if $(board-dirs), \<BR>&nbsp;&nbsp;$(foreach b, $(board-dirs), \<BR>&nbsp;&nbsp;printf "&nbsp; %-16s - Show %s-specific targets\\n" help-$(b) $(b);) \<BR>&nbsp;&nbsp;printf "&nbsp; %-16s - Show all of the above\\n" help-boards; \<BR>&nbsp;&nbsp;echo '')</FONT></P>
<P><FONT class=extract>&nbsp;@echo&nbsp; '&nbsp; make V=0|1 [targets] 0 =&gt; quiet build (default), 1 =&gt; verbose build'<BR>&nbsp;@echo&nbsp; '&nbsp; make V=2&nbsp;&nbsp; [targets] 2 =&gt; give reason for rebuild of target'<BR>&nbsp;@echo&nbsp; '&nbsp; make O=dir [targets] Locate all output files in "dir", including .config'<BR>&nbsp;@echo&nbsp; '&nbsp; make C=1&nbsp;&nbsp; [targets] Check all c source with $$CHECK (sparse by default)'<BR>&nbsp;@echo&nbsp; '&nbsp; make C=2&nbsp;&nbsp; [targets] Force check of all c source with $$CHECK'<BR>&nbsp;@echo&nbsp; '&nbsp; make RECORDMCOUNT_WARN=1 [targets] Warn about ignored mcount sections'<BR>&nbsp;@echo&nbsp; '&nbsp; make W=n&nbsp;&nbsp; [targets] Enable extra gcc checks, n=1,2,3 where'<BR>&nbsp;@echo&nbsp; '&nbsp;&nbsp;1: warnings which may be relevant and do not occur too often'<BR>&nbsp;@echo&nbsp; '&nbsp;&nbsp;2: warnings which occur quite often but may still be relevant'<BR>&nbsp;@echo&nbsp; '&nbsp;&nbsp;3: more obscure warnings, can most likely be ignored'<BR>&nbsp;@echo&nbsp; '&nbsp;&nbsp;Multiple levels can be combined with W=12 or W=123'<BR>&nbsp;@echo&nbsp; ''<BR>&nbsp;@echo&nbsp; 'Execute "make" or "make all" to build all targets marked with [*] '<BR>&nbsp;@echo&nbsp; 'For further info see the ./README file'</FONT></P>
<P><BR><FONT class=extract>help-board-dirs := $(addprefix help-,$(board-dirs))</FONT></P>
<P><FONT class=extract>help-boards: $(help-board-dirs)</FONT></P>
<P><FONT class=extract>boards-per-dir = $(sort $(notdir $(wildcard $(srctree)/arch/$(SRCARCH)/configs/$*/*_defconfig)))</FONT></P>
<P><FONT class=extract>$(help-board-dirs): help-%:<BR>&nbsp;@echo&nbsp; 'Architecture specific targets ($(SRCARCH) $*):'<BR>&nbsp;@$(if $(boards-per-dir), \<BR>&nbsp;&nbsp;$(foreach b, $(boards-per-dir), \<BR>&nbsp;&nbsp;printf "&nbsp; %-24s - Build for %s\\n" $*/$(b) $(subst _defconfig,,$(b));) \<BR>&nbsp;&nbsp;echo '')</FONT></P>
<P><BR><FONT class=extract># Documentation targets<BR># ---------------------------------------------------------------------------<BR>%docs: scripts_basic FORCE<BR>&nbsp;$(Q)$(MAKE) $(build)=scripts build_docproc<BR>&nbsp;$(Q)$(MAKE) $(build)=Documentation/DocBook $@</FONT></P>
<P><FONT class=extract>else # KBUILD_EXTMOD</FONT></P>
<P><FONT class=extract>###<BR># External module support.<BR># When building external modules the kernel used as basis is considered<BR># read-only, and no consistency checks are made and the make<BR># system is not used on the basis kernel. If updates are required<BR># in the basis kernel ordinary make commands (without M=...) must<BR># be used.<BR>#<BR># The following are the only valid targets when building external<BR># modules.<BR># make M=dir clean&nbsp;&nbsp;&nbsp;&nbsp; Delete all automatically generated files<BR># make M=dir modules&nbsp;&nbsp; Make all modules in specified dir<BR># make M=dir&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Same as 'make M=dir modules'<BR># make M=dir modules_install<BR>#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Install the modules built in the module directory<BR>#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Assumes install directory is already created</FONT></P>
<P><FONT class=extract># We are always building modules<BR>KBUILD_MODULES := 1<BR>PHONY += crmodverdir<BR>crmodverdir:<BR>&nbsp;$(cmd_crmodverdir)</FONT></P>
<P><FONT class=extract>PHONY += $(objtree)/Module.symvers<BR>$(objtree)/Module.symvers:<BR>&nbsp;@test -e $(objtree)/Module.symvers || ( \<BR>&nbsp;echo; \<BR>&nbsp;echo "&nbsp; WARNING: Symbol version dump $(objtree)/Module.symvers"; \<BR>&nbsp;echo "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; is missing; modules will have no dependencies and modversions."; \<BR>&nbsp;echo )</FONT></P>
<P><FONT class=extract>module-dirs := $(addprefix _module_,$(KBUILD_EXTMOD))<BR>PHONY += $(module-dirs) modules<BR>$(module-dirs): crmodverdir $(objtree)/Module.symvers<BR>&nbsp;$(Q)$(MAKE) $(build)=$(patsubst _module_%,%,$@)</FONT></P>
<P><FONT class=extract>modules: $(module-dirs)<BR>&nbsp;@$(kecho) '&nbsp; Building modules, stage 2.';<BR>&nbsp;$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.modpost</FONT></P>
<P><FONT class=extract>PHONY += modules_install<BR>modules_install: _emodinst_ _emodinst_post</FONT></P>
<P><FONT class=extract>install-dir := $(if $(INSTALL_MOD_DIR),$(INSTALL_MOD_DIR),extra)<BR>PHONY += _emodinst_<BR>_emodinst_:<BR>&nbsp;$(Q)mkdir -p $(MODLIB)/$(install-dir)<BR>&nbsp;$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.modinst</FONT></P>
<P><FONT class=extract>PHONY += _emodinst_post<BR>_emodinst_post: _emodinst_<BR>&nbsp;$(call cmd,depmod)</FONT></P>
<P><FONT class=extract>clean-dirs := $(addprefix _clean_,$(KBUILD_EXTMOD))</FONT></P>
<P><FONT class=extract>PHONY += $(clean-dirs) clean<BR>$(clean-dirs):<BR>&nbsp;$(Q)$(MAKE) $(clean)=$(patsubst _clean_%,%,$@)</FONT></P>
<P><FONT class=extract>clean:&nbsp;rm-dirs := $(MODVERDIR)<BR>clean: rm-files := $(KBUILD_EXTMOD)/Module.symvers</FONT></P>
<P><FONT class=extract>help:<BR>&nbsp;@echo&nbsp; '&nbsp; Building external modules.'<BR>&nbsp;@echo&nbsp; '&nbsp; Syntax: make -C path/to/kernel/src M=$$PWD target'<BR>&nbsp;@echo&nbsp; ''<BR>&nbsp;@echo&nbsp; '&nbsp; modules&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - default target, build the module(s)'<BR>&nbsp;@echo&nbsp; '&nbsp; modules_install - install the module'<BR>&nbsp;@echo&nbsp; '&nbsp; clean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - remove generated files in module directory only'<BR>&nbsp;@echo&nbsp; ''</FONT></P>
<P><FONT class=extract># Dummies...<BR>PHONY += prepare scripts<BR>prepare: ;<BR>scripts: ;<BR>endif # KBUILD_EXTMOD</FONT></P>
<P><FONT class=extract>clean: $(clean-dirs)<BR>&nbsp;$(call cmd,rmdirs)<BR>&nbsp;$(call cmd,rmfiles)<BR>&nbsp;@find $(if $(KBUILD_EXTMOD), $(KBUILD_EXTMOD), .) $(RCS_FIND_IGNORE) \<BR>&nbsp;&nbsp;\( -name '*.[oas]' -o -name '*.ko' -o -name '.*.cmd' \<BR>&nbsp;&nbsp;-o -name '*.ko.*' \<BR>&nbsp;&nbsp;-o -name '*.dwo'&nbsp; \<BR>&nbsp;&nbsp;-o -name '.*.d' -o -name '.*.tmp' -o -name '*.mod.c' \<BR>&nbsp;&nbsp;-o -name '*.symtypes' -o -name 'modules.order' \<BR>&nbsp;&nbsp;-o -name modules.builtin -o -name '.tmp_*.o.*' \<BR>&nbsp;&nbsp;-o -name '*.gcno' \) -type f -print | xargs rm -f</FONT></P>
<P><FONT class=extract># Generate tags for editors<BR># ---------------------------------------------------------------------------<BR>quiet_cmd_tags = GEN&nbsp;&nbsp;&nbsp;&nbsp; $@<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmd_tags = $(CONFIG_SHELL) $(srctree)/scripts/tags.sh $@</FONT></P>
<P><FONT class=extract>tags TAGS cscope gtags: FORCE<BR>&nbsp;$(call cmd,tags)</FONT></P>
<P><FONT class=extract># Scripts to check various things for consistency<BR># ---------------------------------------------------------------------------</FONT></P>
<P><FONT class=extract>PHONY += includecheck versioncheck coccicheck namespacecheck export_report</FONT></P>
<P><FONT class=extract>includecheck:<BR>&nbsp;find $(srctree)/* $(RCS_FIND_IGNORE) \<BR>&nbsp;&nbsp;-name '*.[hcS]' -type f -print | sort \<BR>&nbsp;&nbsp;| xargs $(PERL) -w $(srctree)/scripts/checkincludes.pl</FONT></P>
<P><FONT class=extract>versioncheck:<BR>&nbsp;find $(srctree)/* $(RCS_FIND_IGNORE) \<BR>&nbsp;&nbsp;-name '*.[hcS]' -type f -print | sort \<BR>&nbsp;&nbsp;| xargs $(PERL) -w $(srctree)/scripts/checkversion.pl</FONT></P>
<P><FONT class=extract>coccicheck:<BR>&nbsp;$(Q)$(CONFIG_SHELL) $(srctree)/scripts/$@</FONT></P>
<P><FONT class=extract>namespacecheck:<BR>&nbsp;$(PERL) $(srctree)/scripts/namespace.pl</FONT></P>
<P><FONT class=extract>export_report:<BR>&nbsp;$(PERL) $(srctree)/scripts/export_report.pl</FONT></P>
<P><FONT class=extract>endif #ifeq ($(config-targets),1)<BR>endif #ifeq ($(mixed-targets),1)</FONT></P>
<P><FONT class=extract>PHONY += checkstack kernelrelease kernelversion image_name</FONT></P>
<P><FONT class=extract># UML needs a little special treatment here.&nbsp; It wants to use the host<BR># toolchain, so needs $(SUBARCH) passed to checkstack.pl.&nbsp; Everyone<BR># else wants $(ARCH), including people doing cross-builds, which means<BR># that $(SUBARCH) doesn't work here.<BR>ifeq ($(ARCH), um)<BR>CHECKSTACK_ARCH := $(SUBARCH)<BR>else<BR>CHECKSTACK_ARCH := $(ARCH)<BR>endif<BR>checkstack:<BR>&nbsp;$(OBJDUMP) -d vmlinux $$(find . -name '*.ko') | \<BR>&nbsp;$(PERL) $(src)/scripts/checkstack.pl $(CHECKSTACK_ARCH)</FONT></P>
<P><FONT class=extract>kernelrelease:<BR>&nbsp;@echo "$(KERNELVERSION)$$($(CONFIG_SHELL) $(srctree)/scripts/setlocalversion $(srctree))"</FONT></P>
<P><FONT class=extract>kernelversion:<BR>&nbsp;@echo $(KERNELVERSION)</FONT></P>
<P><FONT class=extract>image_name:<BR>&nbsp;@echo $(KBUILD_IMAGE)</FONT></P>
<P><FONT class=extract># Clear a bunch of variables before executing the submake<BR>tools/: FORCE<BR>&nbsp;$(Q)mkdir -p $(objtree)/tools<BR>&nbsp;$(Q)$(MAKE) LDFLAGS= MAKEFLAGS="$(filter --j% -j,$(MAKEFLAGS))" O=$(objtree) subdir=tools -C $(src)/tools/</FONT></P>
<P><FONT class=extract>tools/%: FORCE<BR>&nbsp;$(Q)mkdir -p $(objtree)/tools<BR>&nbsp;$(Q)$(MAKE) LDFLAGS= MAKEFLAGS="$(filter --j% -j,$(MAKEFLAGS))" O=$(objtree) subdir=tools -C $(src)/tools/ $*</FONT></P>
<P><FONT class=extract># Single targets<BR># ---------------------------------------------------------------------------<BR># Single targets are compatible with:<BR># - build with mixed source and output<BR># - build with separate output dir 'make O=...'<BR># - external modules<BR>#<BR>#&nbsp; target-dir =&gt; where to store outputfile<BR>#&nbsp; build-dir&nbsp; =&gt; directory in kernel source tree to use</FONT></P>
<P><FONT class=extract>ifeq ($(KBUILD_EXTMOD),)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; build-dir&nbsp; = $(patsubst %/,%,$(dir $@))<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; target-dir = $(dir $@)<BR>else<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; zap-slash=$(filter-out .,$(patsubst %/,%,$(dir $@)))<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; build-dir&nbsp; = $(KBUILD_EXTMOD)$(if $(zap-slash),/$(zap-slash))<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; target-dir = $(if $(KBUILD_EXTMOD),$(dir $&lt;),$(dir $@))<BR>endif</FONT></P>
<P><FONT class=extract>%.s: %.c prepare scripts FORCE<BR>&nbsp;$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)<BR>%.i: %.c prepare scripts FORCE<BR>&nbsp;$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)<BR>%.o: %.c prepare scripts FORCE<BR>&nbsp;$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)<BR>%.lst: %.c prepare scripts FORCE<BR>&nbsp;$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)<BR>%.s: %.S prepare scripts FORCE<BR>&nbsp;$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)<BR>%.o: %.S prepare scripts FORCE<BR>&nbsp;$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)<BR>%.symtypes: %.c prepare scripts FORCE<BR>&nbsp;$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)</FONT></P>
<P><FONT class=extract># Modules<BR>/: prepare scripts FORCE<BR>&nbsp;$(cmd_crmodverdir)<BR>&nbsp;$(Q)$(MAKE) KBUILD_MODULES=$(if $(CONFIG_MODULES),1) \<BR>&nbsp;$(build)=$(build-dir)<BR># Make sure the latest headers are built for Documentation<BR>Documentation/: headers_install<BR>%/: prepare scripts FORCE<BR>&nbsp;$(cmd_crmodverdir)<BR>&nbsp;$(Q)$(MAKE) KBUILD_MODULES=$(if $(CONFIG_MODULES),1) \<BR>&nbsp;$(build)=$(build-dir)<BR>%.ko: prepare scripts FORCE<BR>&nbsp;$(cmd_crmodverdir)<BR>&nbsp;$(Q)$(MAKE) KBUILD_MODULES=$(if $(CONFIG_MODULES),1)&nbsp;&nbsp; \<BR>&nbsp;$(build)=$(build-dir) $(@:.ko=.o)<BR>&nbsp;$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.modpost</FONT></P>
<P><FONT class=extract># FIXME Should go into a make.lib or something<BR># ===========================================================================</FONT></P>
<P><FONT class=extract>quiet_cmd_rmdirs = $(if $(wildcard $(rm-dirs)),CLEAN&nbsp;&nbsp; $(wildcard $(rm-dirs)))<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmd_rmdirs = rm -rf $(rm-dirs)</FONT></P>
<P><FONT class=extract>quiet_cmd_rmfiles = $(if $(wildcard $(rm-files)),CLEAN&nbsp;&nbsp; $(wildcard $(rm-files)))<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmd_rmfiles = rm -f $(rm-files)</FONT></P>
<P><FONT class=extract># Run depmod only if we have System.map and depmod is executable<BR>quiet_cmd_depmod = DEPMOD&nbsp; $(KERNELRELEASE)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmd_depmod = $(CONFIG_SHELL) $(srctree)/scripts/depmod.sh $(DEPMOD) \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(KERNELRELEASE) "$(patsubst y,_,$(CONFIG_HAVE_UNDERSCORE_SYMBOL_PREFIX))"</FONT></P>
<P><FONT class=extract># Create temporary dir for module support files<BR># clean it up only when building all modules<BR>cmd_crmodverdir = $(Q)mkdir -p $(MODVERDIR) \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(if $(KBUILD_MODULES),; rm -f $(MODVERDIR)/*)</FONT></P>
<P><FONT class=extract># read all saved command lines</FONT></P>
<P><FONT class=extract>targets := $(wildcard $(sort $(targets)))<BR>cmd_files := $(wildcard .*.cmd $(foreach f,$(targets),$(dir $(f)).$(notdir $(f)).cmd))</FONT></P>
<P><FONT class=extract>ifneq ($(cmd_files),)<BR>&nbsp; $(cmd_files): ;&nbsp;# Do not try to update included dependency files<BR>&nbsp; include $(cmd_files)<BR>endif</FONT></P>
<P>endif&nbsp;# skip-makefile