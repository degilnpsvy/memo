<H1><A name=IVR></A>Chapter 28. Indirect References</H1>
<P><A name=IVRREF></A></P>
<P>We have seen that <A href="http://tldp.org/LDP/abs/html/abs-guide.html#VARSUBN">referencing a variable</A>, <TT class=VARNAME>$var</TT>, fetches its <I class=FIRSTTERM>value</I>. <A name=EVALINDREF></A>But, what about the <EM>value of a value</EM>? What about <TT class=VARNAME>$$var</TT>?</P>
<P>The actual notation is <TT class=REPLACEABLE><I>\$$var</I></TT>, usually preceded by an <A href="http://tldp.org/LDP/abs/html/abs-guide.html#EVALREF">eval</A> (and sometimes an <A href="http://tldp.org/LDP/abs/html/abs-guide.html#ECHOREF">echo</A>). This is called an <I class=FIRSTTERM>indirect reference</I>.</P>
<DIV class=EXAMPLE><A name=INDREF></A>
<P><B>Example 28-1. Indirect Variable References</B></P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# ind-ref.sh: Indirect variable referencing.
# Accessing the contents of the contents of a variable.

# First, let's fool around a little.

var=23

echo "\$var   = $var"           # $var   = 23
# So far, everything as expected. But ...

echo "\$\$var  = $$var"         # $$var  = 4570var
#  Not useful ...
#  \$\$ expanded to PID of the script
#  -- refer to the entry on the $$ variable --
#+ and "var" is echoed as plain text.
#  (Thank you, Jakob Bohm, for pointing this out.)

echo "\\\$\$var = \$$var"       # \$$var = $23
#  As expected. The first $ is escaped and pasted on to
#+ the value of var ($var = 23 ).
#  Meaningful, but still not useful. 

# Now, let's start over and do it the right way.

# ============================================== #


a=letter_of_alphabet   # Variable "a" holds the name of another variable.
letter_of_alphabet=z

echo

# Direct reference.
echo "a = $a"          # a = letter_of_alphabet

# Indirect reference.
  eval a=\$$a
# ^^^        Forcing an eval(uation), and ...
#        ^   Escaping the first $ ...
# ------------------------------------------------------------------------
# The 'eval' forces an update of $a, sets it to the updated value of \$$a.
# So, we see why 'eval' so often shows up in indirect reference notation.
# ------------------------------------------------------------------------
  echo "Now a = $a"    # Now a = z

echo


# Now, let's try changing the second-order reference.

t=table_cell_3
table_cell_3=24
echo "\"table_cell_3\" = $table_cell_3"            # "table_cell_3" = 24
echo -n "dereferenced \"t\" = "; eval echo \$$t    # dereferenced "t" = 24
# In this simple case, the following also works (why?).
#         eval t=\$$t; echo "\"t\" = $t"

echo

t=table_cell_3
NEW_VAL=387
table_cell_3=$NEW_VAL
echo "Changing value of \"table_cell_3\" to $NEW_VAL."
echo "\"table_cell_3\" now $table_cell_3"
echo -n "dereferenced \"t\" now "; eval echo \$$t
# "eval" takes the two arguments "echo" and "\$$t" (set equal to $table_cell_3)


echo

# (Thanks, Stephane Chazelas, for clearing up the above behavior.)


#   A more straightforward method is the ${!t} notation, discussed in the
#+ "Bash, version 2" section.
#   See also ex78.sh.

exit 0</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<P><A name=IRRREF></A></P>
<TABLE class=SIDEBAR border=1 cellPadding=5>
<TBODY>
<TR>
<TD>
<DIV class=SIDEBAR><A name=AEN18998></A>
<P></P>
<P>Indirect referencing in Bash is a multi-step process. First, take the name of a variable: <TT class=VARNAME>varname</TT>. Then, reference it: <TT class=VARNAME>$varname</TT>. Then, reference the reference: <TT class=VARNAME>$$varname</TT>. Then, <I class=FIRSTTERM>escape</I> the first <SPAN class=TOKEN>$</SPAN>: <TT class=VARNAME>\$$varname</TT>. Finally, force a reevaluation of the expression and assign it: <B class=COMMAND>eval newvar=\$$varname</B>.</P>
<P></P></DIV></TD></TR></TBODY></TABLE>
<P>Of what practical use is indirect referencing of variables? It gives Bash a little of the functionality of <A href="http://tldp.org/LDP/abs/html/abs-guide.html#POINTERREF">pointers</A> in <I class=FIRSTTERM>C</I>, for instance, in <A href="http://tldp.org/LDP/abs/html/abs-guide.html#RESISTOR">table lookup</A>. And, it also has some other very interesting applications. . . .</P>
<P>Nils Radtke shows how to build <SPAN class=QUOTE>"dynamic"</SPAN> variable names and evaluate their contents. This can be useful when <A href="http://tldp.org/LDP/abs/html/abs-guide.html#SOURCEREF">sourcing</A> configuration files.</P>
<P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash


# ---------------------------------------------
# This could be "sourced" from a separate file.
isdnMyProviderRemoteNet=172.16.0.100
isdnYourProviderRemoteNet=10.0.0.10
isdnOnlineService="MyProvider"
# ---------------------------------------------
      

remoteNet=$(eval "echo \$$(echo isdn${isdnOnlineService}RemoteNet)")
remoteNet=$(eval "echo \$$(echo isdnMyProviderRemoteNet)")
remoteNet=$(eval "echo \$isdnMyProviderRemoteNet")
remoteNet=$(eval "echo $isdnMyProviderRemoteNet")

echo "$remoteNet"    # 172.16.0.100

# ================================================================

#  And, it gets even better.

#  Consider the following snippet given a variable named getSparc,
#+ but no such variable getIa64:

chkMirrorArchs () { 
  arch="$1";
  if [ "$(eval "echo \${$(echo get$(echo -ne $arch |
       sed 's/^\(.\).*/\1/g' | tr 'a-z' 'A-Z'; echo $arch |
       sed 's/^.\(.*\)/\1/g')):-false}")" = true ]
  then
     return 0;
  else
     return 1;
  fi;
}

getSparc="true"
unset getIa64
chkMirrorArchs sparc
echo $?        # 0
               # True

chkMirrorArchs Ia64
echo $?        # 1
               # False

# Notes:
# -----
# Even the to-be-substituted variable name part is built explicitly.
# The parameters to the chkMirrorArchs calls are all lower case.
# The variable name is composed of two parts: "get" and "Sparc" . . .</PRE></FONT></TD></TR></TBODY></TABLE></P>
<DIV class=EXAMPLE><A name=COLTOTALER2></A>
<P><B>Example 28-2. Passing an indirect reference to <I class=FIRSTTERM>awk</I></B></P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash

#  Another version of the "column totaler" script
#+ that adds up a specified column (of numbers) in the target file.
#  This one uses indirect references.

ARGS=2
E_WRONGARGS=85

if [ $# -ne "$ARGS" ] # Check for proper number of command-line args.
then
   echo "Usage: `basename $0` filename column-number"
   exit $E_WRONGARGS
fi

filename=$1         # Name of file to operate on.
column_number=$2    # Which column to total up.

#===== Same as original script, up to this point =====#


# A multi-line awk script is invoked by
#   awk "
#   ...
#   ...
#   ...
#   "


# Begin awk script.
# -------------------------------------------------
awk "

{ total += \$${column_number} # Indirect reference
}
END {
     print total
     }

     " "$filename"
# Note that awk doesn't need an eval preceding \$$.
# -------------------------------------------------
# End awk script.

#  Indirect variable reference avoids the hassles
#+ of referencing a shell variable within the embedded awk script.
#  Thanks, Stephane Chazelas.


exit $?</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<DIV class=CAUTION>
<P></P>
<TABLE class=CAUTION border=0 width="100%">
<TBODY>
<TR>
<TD vAlign=top width=25 align=middle><IMG hspace=5 alt=Caution src="http://tldp.org/LDP/abs/images/caution.gif"></TD>
<TD vAlign=top align=left>
<P>This method of indirect referencing is a bit tricky. If the second order variable changes its value, then the first order variable must be properly dereferenced (as in the above example). <A name=IVR2></A>Fortunately, the <TT class=REPLACEABLE><I>${!variable}</I></TT> notation introduced with <A href="http://tldp.org/LDP/abs/html/abs-guide.html#BASH2REF">version 2</A> of Bash (see <A href="http://tldp.org/LDP/abs/html/abs-guide.html#EX78">Example 37-2</A> and <A href="http://tldp.org/LDP/abs/html/abs-guide.html#HASHEX2">Example A-22</A>) makes indirect referencing more intuitive.</P></TD></TR></TBODY></TABLE></DIV>
<TABLE class=SIDEBAR border=1 cellPadding=5>
<TBODY>
<TR>
<TD>
<DIV class=SIDEBAR><A name=AEN19027></A>
<P></P>
<P>Bash does not support pointer arithmetic, and this severely limits the usefulness of indirect referencing. In fact, indirect referencing in a scripting language is, at best, something of an afterthought.</P>
<P></P></DIV></TD></TR></TBODY></TABLE>