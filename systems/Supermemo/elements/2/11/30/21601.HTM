<H1><A name=PROCESS-SUB></A>Chapter 23. Process Substitution</H1>
<P><A name=PROCESSSUBREF></A><A href="http://tldp.org/LDP/abs/html/abs-guide.html#PIPEREF">Piping</A> the <TT class=FILENAME>stdout</TT> of a command into the <TT class=FILENAME>stdin</TT> of another is a powerful technique. But, what if you need to pipe the <TT class=FILENAME>stdout</TT> of <EM>multiple</EM> commands? This is where <TT class=REPLACEABLE><I>process substitution</I></TT> comes in.</P>
<P><I class=FIRSTTERM>Process substitution</I> feeds the output of a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#PROCESSREF">process</A> (or processes) into the <TT class=FILENAME>stdin</TT> of another process.</P>
<P></P>
<DIV class=VARIABLELIST>
<P><B><A name=COMMANDSPARENS1></A>Template</B></P>
<DL>
<DT>Command list enclosed within parentheses 
<DD>
<P><B class=COMMAND>&gt;(command_list)</B></P>
<P><B class=COMMAND>&lt;(command_list)</B></P>
<P>Process substitution uses <TT class=FILENAME>/dev/fd/&lt;n&gt;</TT> files to send the results of the process(es) within parentheses to another process. <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FTN.AEN18244" name=AEN18244><SPAN class=footnote>[108]</SPAN></A> </P>
<DIV class=CAUTION>
<P></P>
<TABLE class=CAUTION border=0 width="90%">
<TBODY>
<TR>
<TD vAlign=top width=25 align=middle><IMG hspace=5 alt=Caution src="http://tldp.org/LDP/abs/images/caution.gif"></TD>
<TD vAlign=top align=left>
<P>There is <EM>no</EM> space between the the <SPAN class=QUOTE>"&lt;"</SPAN> or <SPAN class=QUOTE>"&gt;"</SPAN> and the parentheses. Space there would give an error message.</P></TD></TR></TBODY></TABLE></DIV></DD></DL></DIV>
<P>
<TABLE border=1 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=SCREEN><TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>echo &gt;(true)</B></TT>
<TT class=COMPUTEROUTPUT>/dev/fd/63</TT>

<TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>echo &lt;(true)</B></TT>
<TT class=COMPUTEROUTPUT>/dev/fd/63</TT>

<TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>echo &gt;(true) &lt;(true)</B></TT>
<TT class=COMPUTEROUTPUT>/dev/fd/63 /dev/fd/62</TT>



<TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>wc &lt;(cat /usr/share/dict/linux.words)</B></TT>
<TT class=COMPUTEROUTPUT> 483523  483523 4992010 /dev/fd/63</TT>

<TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>grep script /usr/share/dict/linux.words | wc</B></TT>
<TT class=COMPUTEROUTPUT>    262     262    3601</TT>

<TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>wc &lt;(grep script /usr/share/dict/linux.words)</B></TT>
<TT class=COMPUTEROUTPUT>    262     262    3601 /dev/fd/63</TT>
	      </PRE></FONT></TD></TR></TBODY></TABLE></P>
<DIV class=NOTE>
<P></P>
<TABLE class=NOTE border=0 width="100%">
<TBODY>
<TR>
<TD vAlign=top width=25 align=middle><IMG hspace=5 alt=Note src="http://tldp.org/LDP/abs/images/note.gif"></TD>
<TD vAlign=top align=left>
<P>Bash creates a pipe with two <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FDREF">file descriptors</A>, <TT class=FILENAME>--fIn</TT> and <TT class=FILENAME>fOut--</TT>. The <TT class=FILENAME>stdin</TT> of <A href="http://tldp.org/LDP/abs/html/abs-guide.html#TRUEREF">true</A> connects to <TT class=FILENAME>fOut</TT> (dup2(fOut, 0)), then Bash passes a <TT class=FILENAME>/dev/fd/fIn</TT> argument to <B class=COMMAND>echo</B>. On systems lacking <TT class=FILENAME>/dev/fd/&lt;n&gt;</TT> files, Bash may use temporary files. (Thanks, S.C.) </P></TD></TR></TBODY></TABLE></DIV>
<P>Process substitution can compare the output of two different commands, or even the output of different options to the same command.</P>
<TABLE border=1 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=SCREEN><TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>comm &lt;(ls -l) &lt;(ls -al)</B></TT>
<TT class=COMPUTEROUTPUT>total 12
-rw-rw-r--    1 bozo bozo       78 Mar 10 12:58 File0
-rw-rw-r--    1 bozo bozo       42 Mar 10 12:58 File2
-rw-rw-r--    1 bozo bozo      103 Mar 10 12:58 t2.sh
        total 20
        drwxrwxrwx    2 bozo bozo     4096 Mar 10 18:10 .
        drwx------   72 bozo bozo     4096 Mar 10 17:58 ..
        -rw-rw-r--    1 bozo bozo       78 Mar 10 12:58 File0
        -rw-rw-r--    1 bozo bozo       42 Mar 10 12:58 File2
        -rw-rw-r--    1 bozo bozo      103 Mar 10 12:58 t2.sh</TT></PRE></FONT></TD></TR></TBODY></TABLE>
<P><A name=PCC2DIR></A></P>
<P>Process substitution can compare the contents of two directories -- to see which filenames are in one, but not the other.</P>
<P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>diff &lt;(ls $first_directory) &lt;(ls $second_directory)</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>Some other usages and uses of process substitution:</P>
<P><A name=PSFDSTDIN></A></P>
<P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>read -a list &lt; &lt;( od -Ad -w24 -t u2 /dev/urandom )
#  Read a list of random numbers from /dev/urandom,
#+ process with "od"
#+ and feed into stdin of "read" . . .

#  From "insertion-sort.bash" example script.
#  Courtesy of JuanJo Ciarlante.</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P><A name=NETCATEXAMPLE></A></P>
<P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>PORT=6881   # bittorrent

# Scan the port to make sure nothing nefarious is going on.
netcat -l $PORT | tee&gt;(md5sum -&gt;mydata-orig.md5) |
gzip | tee&gt;(md5sum - | sed 's/-$/mydata.lz2/'&gt;mydata-gz.md5)&gt;mydata.gz

# Check the decompression:
  gzip -d&lt;mydata.gz | md5sum -c mydata-orig.md5)
# The MD5sum of the original checks stdin and detects compression issues.

#  Bill Davidsen contributed this example
#+ (with light edits by the ABS Guide author).</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>cat &lt;(ls -l)
# Same as     ls -l | cat

sort -k 9 &lt;(ls -l /bin) &lt;(ls -l /usr/bin) &lt;(ls -l /usr/X11R6/bin)
# Lists all the files in the 3 main 'bin' directories, and sorts by filename.
# Note that three (count 'em) distinct commands are fed to 'sort'.

 
diff &lt;(command1) &lt;(command2)    # Gives difference in command output.

tar cf &gt;(bzip2 -c &gt; file.tar.bz2) $directory_name
# Calls "tar cf /dev/fd/?? $directory_name", and "bzip2 -c &gt; file.tar.bz2".
#
# Because of the /dev/fd/&lt;n&gt; system feature,
# the pipe between both commands does not need to be named.
#
# This can be emulated.
#
bzip2 -c &lt; pipe &gt; file.tar.bz2&amp;
tar cf pipe $directory_name
rm pipe
#        or
exec 3&gt;&amp;1
tar cf /dev/fd/4 $directory_name 4&gt;&amp;1 &gt;&amp;3 3&gt;&amp;- | bzip2 -c &gt; file.tar.bz2 3&gt;&amp;-
exec 3&gt;&amp;-


# Thanks, St&#233;phane Chazelas</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P><A name=GOODREAD0></A>Here is a method of circumventing the problem of an <A href="http://tldp.org/LDP/abs/html/abs-guide.html#BADREAD0"><I class=FIRSTTERM>echo</I> piped to a <I class=FIRSTTERM>while-read loop</I></A> running in a subshell.</P>
<DIV class=EXAMPLE><A name=WRPS></A>
<P><B>Example 23-1. Code block redirection without forking</B></P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# wr-ps.bash: while-read loop with process substitution.

# This example contributed by Tomas Pospisek.
# (Heavily edited by the ABS Guide author.)

echo

echo "random input" | while read i
do
  global=3D": Not available outside the loop."
  # ... because it runs in a subshell.
done

echo "\$global (from outside the subprocess) = $global"
# $global (from outside the subprocess) =

echo; echo "--"; echo

while read i
do
  echo $i
  global=3D": Available outside the loop."
  # ... because it does NOT run in a subshell.
done &lt; &lt;( echo "random input" )
#    ^ ^

echo "\$global (using process substitution) = $global"
# Random input
# $global (using process substitution) = 3D: Available outside the loop.


echo; echo "##########"; echo



# And likewise . . .

declare -a inloop
index=0
cat $0 | while read line
do
  inloop[$index]="$line"
  ((index++))
  # It runs in a subshell, so ...
done
echo "OUTPUT = "
echo ${inloop[*]}           # ... nothing echoes.


echo; echo "--"; echo


declare -a outloop
index=0
while read line
do
  outloop[$index]="$line"
  ((index++))
  # It does NOT run in a subshell, so ...
done &lt; &lt;( cat $0 )
echo "OUTPUT = "
echo ${outloop[*]}          # ... the entire script echoes.

exit $?</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<P><A name=PSUBPIPING></A>This is a similar example.</P>
<DIV class=EXAMPLE><A name=PSUBP></A>
<P><B>Example 23-2. Redirecting the output of <I class=FIRSTTERM>process substitution</I> into a loop.</B></P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# psub.bash

# As inspired by Diego Molina (thanks!).

declare -a array0
while read
do
  array0[${#array0[@]}]="$REPLY"
done &lt; &lt;( sed -e 's/bash/CRASH-BANG!/' $0 | grep bin | awk '{print $1}' )
#  Sets the default 'read' variable, $REPLY, by process substitution,
#+ then copies it into an array.

echo "${array0[@]}"

exit $?

# ====================================== #

bash psub.bash

#!/bin/CRASH-BANG! done #!/bin/CRASH-BANG!</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<P>A reader sent in the following interesting example of process substitution.</P>
<P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING># Script fragment taken from SuSE distribution:

# --------------------------------------------------------------#
while read  des what mask iface; do
# Some commands ...
done &lt; &lt;(route -n)  
#    ^ ^  First &lt; is redirection, second is process substitution.

# To test it, let's make it do something.
while read  des what mask iface; do
  echo $des $what $mask $iface
done &lt; &lt;(route -n)  

# Output:
# Kernel IP routing table
# Destination Gateway Genmask Flags Metric Ref Use Iface
# 127.0.0.0 0.0.0.0 255.0.0.0 U 0 0 0 lo
# --------------------------------------------------------------#

#  As St&#233;phane Chazelas points out,
#+ an easier-to-understand equivalent is:
route -n |
  while read des what mask iface; do   # Variables set from output of pipe.
    echo $des $what $mask $iface
  done  #  This yields the same output as above.
        #  However, as Ulrich Gayer points out . . .
        #+ this simplified equivalent uses a subshell for the while loop,
        #+ and therefore the variables disappear when the pipe terminates.
	
# --------------------------------------------------------------#
	
#  However, Filip Moritz comments that there is a subtle difference
#+ between the above two examples, as the following shows.

(
route -n | while read x; do ((y++)); done
echo $y # $y is still unset

while read x; do ((y++)); done &lt; &lt;(route -n)
echo $y # $y has the number of lines of output of route -n
)

More generally spoken
(
: | x=x
# seems to start a subshell like
: | ( x=x )
# while
x=x &lt; &lt;(:)
# does not
)

# This is useful, when parsing csv and the like.
# That is, in effect, what the original SuSE code fragment does.</PRE></FONT></TD></TR></TBODY></TABLE>