<H1 class=SECT1><A name=AEN17129></A>18.1. A Brief Introduction to Regular Expressions</H1>
<P>An expression is a string of characters. Those characters having an interpretation above and beyond their literal meaning are called <I class=FIRSTTERM>metacharacters</I>. A quote symbol, for example, may denote speech by a person, <I class=FIRSTTERM>ditto</I>, or a meta-meaning <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FTN.AEN17134" name=AEN17134><SPAN class=footnote>[98]</SPAN></A> for the symbols that follow. Regular Expressions are sets of characters and/or metacharacters that match (or specify) patterns.</P>
<P>A Regular Expression contains one or more of the following:</P>
<P></P>
<UL>
<LI>
<P><I class=FIRSTTERM>A character set</I>. These are the characters retaining their literal meaning. The simplest type of Regular Expression consists <EM>only</EM> of a character set, with no metacharacters.</P>
<LI>
<P><A name=ANCHORREF></A></P>
<P><I class=FIRSTTERM>An anchor</I>. These designate (<I class=FIRSTTERM>anchor</I>) the position in the line of text that the RE is to match. For example, <SPAN class=TOKEN>^</SPAN>, and <SPAN class=TOKEN>$</SPAN> are anchors.</P>
<LI>
<P><I class=FIRSTTERM>Modifiers</I>. These expand or narrow (<I class=FIRSTTERM>modify</I>) the range of text the RE is to match. Modifiers include the asterisk, brackets, and the backslash.</P></LI></UL>
<P>The main uses for Regular Expressions (<I class=FIRSTTERM>RE</I>s) are text searches and string manipulation. An RE <I class=FIRSTTERM>matches</I> a single character or a set of characters -- a string or a part of a string.</P>
<P></P>
<UL>
<LI>
<P><A name=ASTERISKREG></A>The asterisk -- <SPAN class=TOKEN>*</SPAN> -- matches any number of repeats of the character string or RE preceding it, including <EM>zero</EM> instances.</P>
<P><SPAN class=QUOTE>"1133*"</SPAN> matches <TT class=REPLACEABLE><I>11 + one or more 3's</I></TT>: <TT class=REPLACEABLE><I>113</I></TT>, <TT class=REPLACEABLE><I>1133</I></TT>, <TT class=REPLACEABLE><I>1133333</I></TT>, and so forth.</P>
<LI>
<P><A name=REGEXDOT></A>The <I class=FIRSTTERM>dot</I> -- <SPAN class=TOKEN>.</SPAN> -- matches any one character, except a newline. <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FTN.AEN17189" name=AEN17189><SPAN class=footnote>[99]</SPAN></A> </P>
<P><SPAN class=QUOTE>"13."</SPAN> matches <TT class=REPLACEABLE><I>13 + at least one of any character (including a space)</I></TT>: <TT class=REPLACEABLE><I>1133</I></TT>, <TT class=REPLACEABLE><I>11333</I></TT>, but not <TT class=REPLACEABLE><I>13</I></TT> (additional character missing).</P>
<P>See <A href="http://tldp.org/LDP/abs/html/abs-guide.html#CWSOLVER">Example 16-18</A> for a demonstration of <I class=FIRSTTERM>dot single-character</I> matching.</P>
<LI>
<P><A name=CARETREF></A>The caret -- <SPAN class=TOKEN>^</SPAN> -- matches the beginning of a line, but sometimes, depending on context, negates the meaning of a set of characters in an RE.</P>
<LI>
<P><A name=DOLLARSIGNREF></A></P>
<P>The dollar sign -- <SPAN class=TOKEN>$</SPAN> -- at the end of an RE matches the end of a line.</P>
<P><SPAN class=QUOTE>"XXX$"</SPAN> matches <SPAN class=TOKEN>XXX</SPAN> at the end of a line.</P>
<P><SPAN class=QUOTE>"^$"</SPAN> matches blank lines.</P>
<LI>
<P><A name=BRACKETSREF></A></P>
<P>Brackets -- <SPAN class=TOKEN>[...]</SPAN> -- enclose a set of characters to match in a single RE.</P>
<P><SPAN class=QUOTE>"[xyz]"</SPAN> matches any one of the characters <TT class=REPLACEABLE><I>x</I></TT>, <TT class=REPLACEABLE><I>y</I></TT>, or <TT class=REPLACEABLE><I>z</I></TT>.</P>
<P><SPAN class=QUOTE>"[c-n]"</SPAN> matches any one of the characters in the range <TT class=REPLACEABLE><I>c</I></TT> to <TT class=REPLACEABLE><I>n</I></TT>.</P>
<P><SPAN class=QUOTE>"[B-Pk-y]"</SPAN> matches any one of the characters in the ranges <TT class=REPLACEABLE><I>B</I></TT> to <TT class=REPLACEABLE><I>P</I></TT> and <TT class=REPLACEABLE><I>k</I></TT> to <TT class=REPLACEABLE><I>y</I></TT>.</P>
<P><SPAN class=QUOTE>"[a-z0-9]"</SPAN> matches any single lowercase letter or any digit.</P>
<P><SPAN class=QUOTE>"[^b-d]"</SPAN> matches any character <EM>except</EM> those in the range <TT class=REPLACEABLE><I>b</I></TT> to <TT class=REPLACEABLE><I>d</I></TT>. This is an instance of <SPAN class=TOKEN>^</SPAN> negating or inverting the meaning of the following RE (taking on a role similar to <SPAN class=TOKEN>!</SPAN> in a different context).</P>
<P>Combined sequences of bracketed characters match common word patterns. <SPAN class=QUOTE>"[Yy][Ee][Ss]"</SPAN> matches <TT class=REPLACEABLE><I>yes</I></TT>, <TT class=REPLACEABLE><I>Yes</I></TT>, <TT class=REPLACEABLE><I>YES</I></TT>, <TT class=REPLACEABLE><I>yEs</I></TT>, and so forth. <SPAN class=QUOTE>"[0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9][0-9][0-9]"</SPAN> matches any Social Security number.</P>
<LI>
<P><A name=REGEXBS></A></P>
<P>The backslash -- <SPAN class=TOKEN>\</SPAN> -- <A href="http://tldp.org/LDP/abs/html/abs-guide.html#ESCP">escapes</A> a special character, which means that character gets interpreted literally (and is therefore no longer <I class=FIRSTTERM>special</I>).</P>
<P>A <SPAN class=QUOTE>"\$"</SPAN> reverts back to its literal meaning of <SPAN class=QUOTE>"$"</SPAN>, rather than its RE meaning of end-of-line. Likewise a <SPAN class=QUOTE>"\\"</SPAN> has the literal meaning of <SPAN class=QUOTE>"\"</SPAN>.</P>
<LI>
<P><A name=ANGLEBRAC></A></P>
<P><A href="http://tldp.org/LDP/abs/html/abs-guide.html#ESCP">Escaped</A> <SPAN class=QUOTE>"angle brackets"</SPAN> -- <SPAN class=TOKEN>\&lt;...\&gt;</SPAN> -- mark word boundaries.</P>
<P>The angle brackets must be escaped, since otherwise they have only their literal character meaning.</P>
<P><SPAN class=QUOTE>"\&lt;the\&gt;"</SPAN> matches the word <SPAN class=QUOTE>"the,"</SPAN> but not the words <SPAN class=QUOTE>"them,"</SPAN> <SPAN class=QUOTE>"there,"</SPAN> <SPAN class=QUOTE>"other,"</SPAN> etc.</P>
<P>
<TABLE border=1 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=SCREEN><TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>cat textfile</B></TT>
<TT class=COMPUTEROUTPUT>This is line 1, of which there is only one instance.
 This is the only instance of line 2.
 This is line 3, another line.
 This is line 4.</TT>


<TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>grep 'the' textfile</B></TT>
<TT class=COMPUTEROUTPUT>This is line 1, of which there is only one instance.
 This is the only instance of line 2.
 This is line 3, another line.</TT>


<TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>grep '\&lt;the\&gt;' textfile</B></TT>
<TT class=COMPUTEROUTPUT>This is the only instance of line 2.</TT>
	      </PRE></FONT></TD></TR></TBODY></TABLE></P></LI></UL>
<TABLE class=SIDEBAR border=1 cellPadding=5>
<TBODY>
<TR>
<TD>
<DIV class=SIDEBAR><A name=AEN17316></A>
<P></P>
<P>The only way to be certain that a particular RE works is to test it.</P>
<P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>TEST FILE: tstfile                          # No match.
                                            # No match.
Run   grep "1133*"  on this file.           # Match.
                                            # No match.
                                            # No match.
This line contains the number 113.          # Match.
This line contains the number 13.           # No match.
This line contains the number 133.          # No match.
This line contains the number 1133.         # Match.
This line contains the number 113312.       # Match.
This line contains the number 1112.         # No match.
This line contains the number 113312312.    # Match.
This line contains no numbers at all.       # No match.</PRE></FONT></TD></TR></TBODY></TABLE></P>
<TABLE border=1 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=SCREEN><TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>grep "1133*" tstfile</B></TT>
<TT class=COMPUTEROUTPUT>Run   grep "1133*"  on this file.           # Match.
 This line contains the number 113.          # Match.
 This line contains the number 1133.         # Match.
 This line contains the number 113312.       # Match.
 This line contains the number 113312312.    # Match.</TT>
	      </PRE></FONT></TD></TR></TBODY></TABLE>
<P></P></DIV></TD></TR></TBODY></TABLE>
<P></P>
<UL>
<LI style="LIST-STYLE-TYPE: square">
<DIV class=FORMALPARA>
<P><B><A name=EXTREGEX></A>Extended REs. </B>Additional metacharacters added to the basic set. Used in <A href="http://tldp.org/LDP/abs/html/abs-guide.html#EGREPREF">egrep</A>, <A href="http://tldp.org/LDP/abs/html/abs-guide.html#AWKREF">awk</A>, and <A href="http://tldp.org/LDP/abs/html/abs-guide.html#PERLREF">Perl</A>.</P></DIV>
<LI>
<P><A name=QUEXREGEX></A></P>
<P>The question mark -- <SPAN class=TOKEN>?</SPAN> -- matches zero or one of the previous RE. It is generally used for matching single characters.</P>
<LI>
<P><A name=PLUSREF></A></P>
<P>The plus -- <SPAN class=TOKEN>+</SPAN> -- matches one or more of the previous RE. It serves a role similar to the <SPAN class=TOKEN>*</SPAN>, but does <EM>not</EM> match zero occurrences.</P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING># GNU versions of sed and awk can use "+",
# but it needs to be escaped.

echo a111b | sed -ne '/a1\+b/p'
echo a111b | grep 'a1\+b'
echo a111b | gawk '/a1+b/'
# All of above are equivalent.

# Thanks, S.C.</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P><A name=ESCPCB></A></P>
<LI>
<P><A href="http://tldp.org/LDP/abs/html/abs-guide.html#ESCP">Escaped</A> <SPAN class=QUOTE>"curly brackets"</SPAN> -- <SPAN class=TOKEN>\{ \}</SPAN> -- indicate the number of occurrences of a preceding RE to match.</P>
<P>It is necessary to escape the curly brackets since they have only their literal character meaning otherwise. This usage is technically not part of the basic RE set.</P>
<P><SPAN class=QUOTE>"[0-9]\{5\}"</SPAN> matches exactly five digits (characters in the range of 0 to 9).</P>
<DIV class=NOTE>
<P></P>
<TABLE class=NOTE border=0 width="90%">
<TBODY>
<TR>
<TD vAlign=top width=25 align=middle><IMG hspace=5 alt=Note src="http://tldp.org/LDP/abs/images/note.gif"></TD>
<TD vAlign=top align=left>
<P>Curly brackets are not available as an RE in the <SPAN class=QUOTE>"classic"</SPAN> (non-POSIX compliant) version of <A href="http://tldp.org/LDP/abs/html/abs-guide.html#AWKREF">awk</A>. <A name=GNUGAWK></A>However, the GNU extended version of <I class=FIRSTTERM>awk</I>, <B class=COMMAND>gawk</B>, has the <TT class=OPTION>--re-interval</TT> option that permits them (without being escaped).</P>
<P>
<TABLE border=1 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=SCREEN><TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>echo 2222 | gawk --re-interval '/2{3}/'</B></TT>
<TT class=COMPUTEROUTPUT>2222</TT>
	      </PRE></FONT></TD></TR></TBODY></TABLE></P>
<P><B class=COMMAND>Perl</B> and some <B class=COMMAND>egrep</B> versions do not require escaping the curly brackets.</P></TD></TR></TBODY></TABLE></DIV>
<LI>
<P><A name=PARENGRPS></A></P>
<P>Parentheses -- <B class=COMMAND>( )</B> -- enclose a group of REs. They are useful with the following <SPAN class=QUOTE>"<SPAN class=TOKEN>|</SPAN>"</SPAN> operator and in <A href="http://tldp.org/LDP/abs/html/abs-guide.html#EXPRPAREN">substring extraction</A> using <A href="http://tldp.org/LDP/abs/html/abs-guide.html#EXPRREF">expr</A>.</P>
<LI>
<P>The -- <B class=COMMAND>|</B> -- <SPAN class=QUOTE>"or"</SPAN> RE operator matches any of a set of alternate characters.</P>
<P>
<TABLE border=1 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=SCREEN><TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>egrep 're(a|e)d' misc.txt</B></TT>
<TT class=COMPUTEROUTPUT>People who read seem to be better informed than those who do not.
 The clarinet produces sound by the vibration of its reed.</TT>
	      </PRE></FONT></TD></TR></TBODY></TABLE></P></LI></UL>
<DIV class=NOTE>
<P></P>
<TABLE class=NOTE border=0 width="100%">
<TBODY>
<TR>
<TD vAlign=top width=25 align=middle><IMG hspace=5 alt=Note src="http://tldp.org/LDP/abs/images/note.gif"></TD>
<TD vAlign=top align=left>
<P>Some versions of <B class=COMMAND>sed</B>, <B class=COMMAND>ed</B>, and <B class=COMMAND>ex</B> support escaped versions of the extended Regular Expressions described above, as do the GNU utilities.</P></TD></TR></TBODY></TABLE></DIV>
<P></P>
<UL>
<LI style="LIST-STYLE-TYPE: square">
<DIV class=FORMALPARA>
<P><B><A name=POSIXREF></A>POSIX Character Classes. </B><TT class=USERINPUT><B>[:class:]</B></TT></P></DIV>
<P>This is an alternate method of specifying a range of characters to match.</P>
<LI>
<P><TT class=USERINPUT><B>[:alnum:]</B></TT> matches alphabetic or numeric characters. This is equivalent to <TT class=USERINPUT><B>A-Za-z0-9</B></TT>.</P>
<LI>
<P><TT class=USERINPUT><B>[:alpha:]</B></TT> matches alphabetic characters. This is equivalent to <TT class=USERINPUT><B>A-Za-z</B></TT>.</P>
<LI>
<P><TT class=USERINPUT><B>[:blank:]</B></TT> matches a space or a tab.</P>
<LI>
<P><TT class=USERINPUT><B>[:cntrl:]</B></TT> matches control characters.</P>
<LI>
<P><TT class=USERINPUT><B>[:digit:]</B></TT> matches (decimal) digits. This is equivalent to <TT class=USERINPUT><B>0-9</B></TT>.</P>
<LI>
<P><TT class=USERINPUT><B>[:graph:]</B></TT> (graphic printable characters). Matches characters in the range of <A href="http://tldp.org/LDP/abs/html/abs-guide.html#ASCIIDEF">ASCII</A> 33 - 126. This is the same as <TT class=USERINPUT><B>[:print:]</B></TT>, below, but excluding the space character.</P>
<LI>
<P><TT class=USERINPUT><B>[:lower:]</B></TT> matches lowercase alphabetic characters. This is equivalent to <TT class=USERINPUT><B>a-z</B></TT>.</P>
<LI>
<P><TT class=USERINPUT><B>[:print:]</B></TT> (printable characters). Matches characters in the range of ASCII 32 - 126. This is the same as <TT class=USERINPUT><B>[:graph:]</B></TT>, above, but adding the space character.</P>
<LI>
<P><A name=WSPOSIX></A><TT class=USERINPUT><B>[:space:]</B></TT> matches whitespace characters (space and horizontal tab).</P>
<LI>
<P><TT class=USERINPUT><B>[:upper:]</B></TT> matches uppercase alphabetic characters. This is equivalent to <TT class=USERINPUT><B>A-Z</B></TT>.</P>
<LI>
<P><TT class=USERINPUT><B>[:xdigit:]</B></TT> matches hexadecimal digits. This is equivalent to <TT class=USERINPUT><B>0-9A-Fa-f</B></TT>.</P>
<DIV class=IMPORTANT>
<P></P>
<TABLE class=IMPORTANT border=0 width="90%">
<TBODY>
<TR>
<TD vAlign=top width=25 align=middle><IMG hspace=5 alt=Important src="http://tldp.org/LDP/abs/images/important.gif"></TD>
<TD vAlign=top align=left>
<P>POSIX character classes generally require quoting or <A href="http://tldp.org/LDP/abs/html/abs-guide.html#DBLBRACKETS">double brackets</A> ([[ ]]).</P></TD></TR></TBODY></TABLE></DIV>
<P>
<TABLE border=1 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=SCREEN><TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>grep [[:digit:]] test.file</B></TT>
<TT class=COMPUTEROUTPUT>abc=723</TT>
	      </PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING># ...
if [[ $arow =~ [[:digit:]] ]]   #  Numerical input?
then       #  POSIX char class
  if [[ $acol =~ [[:alpha:]] ]] # Number followed by a letter? Illegal!
# ...
# From ktour.sh example script.</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>These character classes may even be used with <A href="http://tldp.org/LDP/abs/html/abs-guide.html#GLOBBINGREF">globbing</A>, to a limited extent.</P>
<P>
<TABLE border=1 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=SCREEN><TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>ls -l ?[[:digit:]][[:digit:]]?</B></TT>
<TT class=COMPUTEROUTPUT>-rw-rw-r--    1 bozo  bozo         0 Aug 21 14:47 a33b</TT>
	      </PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>POSIX character classes are used in <A href="http://tldp.org/LDP/abs/html/abs-guide.html#EX49">Example 16-21</A> and <A href="http://tldp.org/LDP/abs/html/abs-guide.html#LOWERCASE">Example 16-22</A>.</P></LI></UL>
<P><A href="http://tldp.org/LDP/abs/html/abs-guide.html#SEDREF">Sed</A>, <A href="http://tldp.org/LDP/abs/html/abs-guide.html#AWKREF">awk</A>, and <A href="http://tldp.org/LDP/abs/html/abs-guide.html#PERLREF">Perl</A>, used as filters in scripts, take REs as arguments when "sifting" or transforming files or I/O streams. See <A href="http://tldp.org/LDP/abs/html/abs-guide.html#BEHEAD">Example A-12</A> and <A href="http://tldp.org/LDP/abs/html/abs-guide.html#TREE">Example A-16</A> for illustrations of this.</P>
<P>The standard reference on this complex topic is Friedl's <I class=CITETITLE>Mastering Regular Expressions</I>. <I class=CITETITLE>Sed &amp; Awk</I>, by Dougherty and Robbins, also gives a very lucid treatment of REs. See the <A href="http://tldp.org/LDP/abs/html/abs-guide.html#BIBLIO"><I>Bibliography</I></A> for more information on these books.