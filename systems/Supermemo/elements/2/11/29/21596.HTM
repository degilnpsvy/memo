<H1 class=SECT1><A name=AEN17974></A>20.1. Using <I class=FIRSTTERM>exec</I></H1>
<P><A name=USINGEXECREF></A></P>
<P>An <B class=COMMAND>exec &lt;filename</B> command redirects <TT class=FILENAME>stdin</TT> to a file. From that point on, all <TT class=FILENAME>stdin</TT> comes from that file, rather than its normal source (usually keyboard input). This provides a method of reading a file line by line and possibly parsing each line of input using <A href="http://tldp.org/LDP/abs/html/abs-guide.html#SEDREF">sed</A> and/or <A href="http://tldp.org/LDP/abs/html/abs-guide.html#AWKREF">awk</A>.</P>
<DIV class=EXAMPLE><A name=REDIR1></A>
<P><B>Example 20-1. Redirecting <TT class=FILENAME>stdin</TT> using <I class=FIRSTTERM>exec</I></B></P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# Redirecting stdin using 'exec'.


exec 6&lt;&amp;0          # Link file descriptor #6 with stdin.
                   # Saves stdin.

exec &lt; data-file   # stdin replaced by file "data-file"

read a1            # Reads first line of file "data-file".
read a2            # Reads second line of file "data-file."

echo
echo "Following lines read from file."
echo "-------------------------------"
echo $a1
echo $a2

echo; echo; echo

exec 0&lt;&amp;6 6&lt;&amp;-
#  Now restore stdin from fd #6, where it had been saved,
#+ and close fd #6 ( 6&lt;&amp;- ) to free it for other processes to use.
#
# &lt;&amp;6 6&lt;&amp;-    also works.

echo -n "Enter data  "
read b1  # Now "read" functions as expected, reading from normal stdin.
echo "Input read from stdin."
echo "----------------------"
echo "b1 = $b1"

echo

exit 0</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<P>Similarly, an <B class=COMMAND>exec &gt;filename</B> command redirects <TT class=FILENAME>stdout</TT> to a designated file. This sends all command output that would normally go to <TT class=FILENAME>stdout</TT> to that file.</P>
<DIV class=IMPORTANT>
<P></P>
<TABLE class=IMPORTANT border=0 width="100%">
<TBODY>
<TR>
<TD vAlign=top width=25 align=middle><IMG hspace=5 alt=Important src="http://tldp.org/LDP/abs/images/important.gif"></TD>
<TD vAlign=top align=left>
<P><B class=COMMAND>exec N &gt; filename</B> affects the entire script or <I class=FIRSTTERM>current shell</I>. Redirection in the <A href="http://tldp.org/LDP/abs/html/abs-guide.html#PROCESSIDREF">PID</A> of the script or shell from that point on has changed. However . . . </P>
<P><B class=COMMAND>N &gt; filename</B> affects only the newly-forked process, not the entire script or shell. </P>
<P>Thank you, Ahmed Darwish, for pointing this out.</P></TD></TR></TBODY></TABLE></DIV>
<DIV class=EXAMPLE><A name=REASSIGNSTDOUT></A>
<P><B>Example 20-2. Redirecting <TT class=FILENAME>stdout</TT> using <I class=FIRSTTERM>exec</I></B></P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# reassign-stdout.sh

LOGFILE=logfile.txt

exec 6&gt;&amp;1           # Link file descriptor #6 with stdout.
                    # Saves stdout.

exec &gt; $LOGFILE     # stdout replaced with file "logfile.txt".

# ----------------------------------------------------------- #
# All output from commands in this block sent to file $LOGFILE.

echo -n "Logfile: "
date
echo "-------------------------------------"
echo

echo "Output of \"ls -al\" command"
echo
ls -al
echo; echo
echo "Output of \"df\" command"
echo
df

# ----------------------------------------------------------- #

exec 1&gt;&amp;6 6&gt;&amp;-      # Restore stdout and close file descriptor #6.

echo
echo "== stdout now restored to default == "
echo
ls -al
echo

exit 0</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<DIV class=EXAMPLE><A name=UPPERCONV></A>
<P><B>Example 20-3. Redirecting both <TT class=FILENAME>stdin</TT> and <TT class=FILENAME>stdout</TT> in the same script with <I class=FIRSTTERM>exec</I></B></P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# upperconv.sh
# Converts a specified input file to uppercase.

E_FILE_ACCESS=70
E_WRONG_ARGS=71

if [ ! -r "$1" ]     # Is specified input file readable?
then
  echo "Can't read from input file!"
  echo "Usage: $0 input-file output-file"
  exit $E_FILE_ACCESS
fi                   #  Will exit with same error
                     #+ even if input file ($1) not specified (why?).

if [ -z "$2" ]
then
  echo "Need to specify output file."
  echo "Usage: $0 input-file output-file"
  exit $E_WRONG_ARGS
fi


exec 4&lt;&amp;0
exec &lt; $1            # Will read from input file.

exec 7&gt;&amp;1
exec &gt; $2            # Will write to output file.
                     # Assumes output file writable (add check?).

# -----------------------------------------------
    cat - | tr a-z A-Z   # Uppercase conversion.
#   ^^^^^                # Reads from stdin.
#           ^^^^^^^^^^   # Writes to stdout.
# However, both stdin and stdout were redirected.
# Note that the 'cat' can be omitted.
# -----------------------------------------------

exec 1&gt;&amp;7 7&gt;&amp;-       # Restore stout.
exec 0&lt;&amp;4 4&lt;&amp;-       # Restore stdin.

# After restoration, the following line prints to stdout as expected.
echo "File \"$1\" written to \"$2\" as uppercase conversion."

exit 0</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<P>I/O redirection is a clever way of avoiding the dreaded <A href="http://tldp.org/LDP/abs/html/abs-guide.html#PARVIS">inaccessible variables within a subshell</A> problem.</P>
<DIV class=EXAMPLE><A name=AVOIDSUBSHELL></A>
<P><B>Example 20-4. Avoiding a subshell</B></P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# avoid-subshell.sh
# Suggested by Matthew Walker.

Lines=0

echo

cat myfile.txt | while read line;
                 do {
                   echo $line
                   (( Lines++ ));  #  Incremented values of this variable
                                   #+ inaccessible outside loop.
                                   #  Subshell problem.
                 }
                 done

echo "Number of lines read = $Lines"     # 0
                                         # Wrong!

echo "------------------------"


exec 3&lt;&gt; myfile.txt
while read line &lt;&amp;3
do {
  echo "$line"
  (( Lines++ ));                   #  Incremented values of this variable
                                   #+ accessible outside loop.
                                   #  No subshell, no problem.
}
done
exec 3&gt;&amp;-

echo "Number of lines read = $Lines"     # 8

echo

exit 0

# Lines below not seen by script.

$ cat myfile.txt

Line 1.
Line 2.
Line 3.
Line 4.
Line 5.
Line 6.
Line 7.
Line 8.</PRE></FONT></TD></TR></TBODY></TABLE></DIV>