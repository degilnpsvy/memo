<H1 class=SECT1><A name=GLOBBINGREF></A>18.2. Globbing</H1>
<P><A name=GLOBBINGREF2></A></P>
<P>Bash itself cannot recognize Regular Expressions. Inside scripts, it is commands and utilities -- such as <A href="http://tldp.org/LDP/abs/html/abs-guide.html#SEDREF">sed</A> and <A href="http://tldp.org/LDP/abs/html/abs-guide.html#AWKREF">awk</A> -- that interpret RE's.</P>
<P>Bash <EM>does</EM> carry out <I class=FIRSTTERM>filename expansion</I> <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FTN.AEN17572" name=AEN17572><SPAN class=footnote>[100]</SPAN></A> -- a process known as <I class=FIRSTTERM>globbing</I> -- but this does <EM>not</EM> use the standard RE set. Instead, globbing recognizes and expands <I class=FIRSTTERM>wild cards</I>. Globbing interprets the standard wild card characters <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FTN.AEN17581" name=AEN17581><SPAN class=footnote>[101]</SPAN></A> -- <A href="http://tldp.org/LDP/abs/html/abs-guide.html#ASTERISKREF">*</A> and <A href="http://tldp.org/LDP/abs/html/abs-guide.html#WILDCARDQU">?</A>, character lists in square brackets, and certain other special characters (such as <SPAN class=TOKEN>^</SPAN> for negating the sense of a match). <A name=WDOTFILEWC></A>There are important limitations on wild card characters in globbing, however. Strings containing <TT class=REPLACEABLE><I>*</I></TT> will not match filenames that start with a dot, as, for example, <A href="http://tldp.org/LDP/abs/html/abs-guide.html#SAMPLE-BASHRC"><TT class=FILENAME>.bashrc</TT></A>. <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FTN.AEN17592" name=AEN17592><SPAN class=footnote>[102]</SPAN></A> Likewise, the <TT class=REPLACEABLE><I>?</I></TT> has a different meaning in globbing than as part of an RE.</P>
<P>
<TABLE border=1 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=SCREEN><TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>ls -l</B></TT>
<TT class=COMPUTEROUTPUT>total 2
 -rw-rw-r--    1 bozo  bozo         0 Aug  6 18:42 a.1
 -rw-rw-r--    1 bozo  bozo         0 Aug  6 18:42 b.1
 -rw-rw-r--    1 bozo  bozo         0 Aug  6 18:42 c.1
 -rw-rw-r--    1 bozo  bozo       466 Aug  6 17:48 t2.sh
 -rw-rw-r--    1 bozo  bozo       758 Jul 30 09:02 test1.txt</TT>

<TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>ls -l t?.sh</B></TT>
<TT class=COMPUTEROUTPUT>-rw-rw-r--    1 bozo  bozo       466 Aug  6 17:48 t2.sh</TT>

<TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>ls -l [ab]*</B></TT>
<TT class=COMPUTEROUTPUT>-rw-rw-r--    1 bozo  bozo         0 Aug  6 18:42 a.1
 -rw-rw-r--    1 bozo  bozo         0 Aug  6 18:42 b.1</TT>

<TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>ls -l [a-c]*</B></TT>
<TT class=COMPUTEROUTPUT>-rw-rw-r--    1 bozo  bozo         0 Aug  6 18:42 a.1
 -rw-rw-r--    1 bozo  bozo         0 Aug  6 18:42 b.1
 -rw-rw-r--    1 bozo  bozo         0 Aug  6 18:42 c.1</TT>

<TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>ls -l [^ab]*</B></TT>
<TT class=COMPUTEROUTPUT>-rw-rw-r--    1 bozo  bozo         0 Aug  6 18:42 c.1
 -rw-rw-r--    1 bozo  bozo       466 Aug  6 17:48 t2.sh
 -rw-rw-r--    1 bozo  bozo       758 Jul 30 09:02 test1.txt</TT>

<TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>ls -l {b*,c*,*est*}</B></TT>
<TT class=COMPUTEROUTPUT>-rw-rw-r--    1 bozo  bozo         0 Aug  6 18:42 b.1
 -rw-rw-r--    1 bozo  bozo         0 Aug  6 18:42 c.1
 -rw-rw-r--    1 bozo  bozo       758 Jul 30 09:02 test1.txt</TT>
	      </PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>Bash performs filename expansion on unquoted command-line arguments. The <A href="http://tldp.org/LDP/abs/html/abs-guide.html#ECHOREF">echo</A> command demonstrates this.</P>
<P>
<TABLE border=1 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=SCREEN><TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>echo *</B></TT>
<TT class=COMPUTEROUTPUT>a.1 b.1 c.1 t2.sh test1.txt</TT>

<TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>echo t*</B></TT>
<TT class=COMPUTEROUTPUT>t2.sh test1.txt</TT>

<TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>echo t?.sh</B></TT>
<TT class=COMPUTEROUTPUT>t2.sh</TT>
	      </PRE></FONT></TD></TR></TBODY></TABLE></P>
<DIV class=NOTE>
<P></P>
<TABLE class=NOTE border=0 width="100%">
<TBODY>
<TR>
<TD vAlign=top width=25 align=middle><IMG hspace=5 alt=Note src="http://tldp.org/LDP/abs/images/note.gif"></TD>
<TD vAlign=top align=left>
<P>It is possible to modify the way Bash interprets special characters in globbing. A <B class=COMMAND>set -f</B> command disables globbing, and the <TT class=OPTION>nocaseglob</TT> and <TT class=OPTION>nullglob</TT> options to <A href="http://tldp.org/LDP/abs/html/abs-guide.html#SHOPTREF">shopt</A> change globbing behavior.</P></TD></TR></TBODY></TABLE></DIV>
<P>See also <A href="http://tldp.org/LDP/abs/html/abs-guide.html#LISTGLOB">Example 11-5</A>.</P>
<DIV class=CAUTION>
<P></P>
<TABLE class=CAUTION border=0 width="100%">
<TBODY>
<TR>
<TD vAlign=top width=25 align=middle><IMG hspace=5 alt=Caution src="http://tldp.org/LDP/abs/images/caution.gif"></TD>
<TD vAlign=top align=left>
<P><A name=HANDLINGFNAMES></A>Filenames with embedded <A href="http://tldp.org/LDP/abs/html/abs-guide.html#WHITESPACEREF">whitespace</A> can cause <I class=FIRSTTERM>globbing</I> to choke. <A href="http://www.dwheeler.com/essays/filenames-in-shell.html" target=_top>David Wheeler</A> shows how to avoid many such pitfalls.</P>
<P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>IFS="$(printf '\n\t')"   # Remove space.

#  Correct glob use:
#  Always use for-loop, prefix glob, check if exists file.
for file in ./* ; do         # Use ./* ... NEVER bare *
  if [ -e "$file" ] ; then   # Check whether file exists.
     COMMAND ... "$file" ...
  fi
done

# This example taken from David Wheeler's site, with permission.</PRE></FONT></TD></TR></TBODY></TABLE></P></TD></TR></TBODY></TABLE></DIV>