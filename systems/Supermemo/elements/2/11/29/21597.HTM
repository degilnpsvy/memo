<H1 class=SECT1><A name=REDIRCB></A>20.2. Redirecting Code Blocks</H1>
<P><A name=REDIRREF></A>Blocks of code, such as <A href="http://tldp.org/LDP/abs/html/abs-guide.html#WHILELOOPREF">while</A>, <A href="http://tldp.org/LDP/abs/html/abs-guide.html#UNTILLOOPREF">until</A>, and <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FORLOOPREF1">for</A> loops, even <A href="http://tldp.org/LDP/abs/html/abs-guide.html#IFTHEN">if/then</A> test blocks can also incorporate redirection of <TT class=FILENAME>stdin</TT>. Even a function may use this form of redirection (see <A href="http://tldp.org/LDP/abs/html/abs-guide.html#REALNAME">Example 24-11</A>). The <SPAN class=TOKEN>&lt;</SPAN> operator at the end of the code block accomplishes this.</P>
<DIV class=EXAMPLE><A name=REDIR2></A>
<P><B>Example 20-5. Redirected <I class=FIRSTTERM>while</I> loop</B></P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# redir2.sh

if [ -z "$1" ]
then
  Filename=names.data       # Default, if no filename specified.
else
  Filename=$1
fi  
#+ Filename=${1:-names.data}
#  can replace the above test (parameter substitution).

count=0

echo

while [ "$name" != Smith ]  # Why is variable $name in quotes?
do
  read name                 # Reads from $Filename, rather than stdin.
  echo $name
  let "count += 1"
done &lt;"$Filename"           # Redirects stdin to file $Filename. 
#    ^^^^^^^^^^^^

echo; echo "$count names read"; echo

exit 0

#  Note that in some older shell scripting languages,
#+ the redirected loop would run as a subshell.
#  Therefore, $count would return 0, the initialized value outside the loop.
#  Bash and ksh avoid starting a subshell *whenever possible*,
#+ so that this script, for example, runs correctly.
#  (Thanks to Heiner Steven for pointing this out.)

#  However . . .
#  Bash *can* sometimes start a subshell in a PIPED "while-read" loop,
#+ as distinct from a REDIRECTED "while" loop.

abc=hi
echo -e "1\n2\n3" | while read l
     do abc="$l"
        echo $abc
     done
echo $abc

#  Thanks, Bruno de Oliveira Schneider, for demonstrating this
#+ with the above snippet of code.
#  And, thanks, Brian Onn, for correcting an annotation error.</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<DIV class=EXAMPLE><A name=REDIR2A></A>
<P><B>Example 20-6. Alternate form of redirected <I class=FIRSTTERM>while</I> loop</B></P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash

# This is an alternate form of the preceding script.

#  Suggested by Heiner Steven
#+ as a workaround in those situations when a redirect loop
#+ runs as a subshell, and therefore variables inside the loop
# +do not keep their values upon loop termination.


if [ -z "$1" ]
then
  Filename=names.data     # Default, if no filename specified.
else
  Filename=$1
fi  


exec 3&lt;&amp;0                 # Save stdin to file descriptor 3.
exec 0&lt;"$Filename"        # Redirect standard input.

count=0
echo


while [ "$name" != Smith ]
do
  read name               # Reads from redirected stdin ($Filename).
  echo $name
  let "count += 1"
done                      #  Loop reads from file $Filename
                          #+ because of line 20.

#  The original version of this script terminated the "while" loop with
#+      done &lt;"$Filename" 
#  Exercise:
#  Why is this unnecessary?


exec 0&lt;&amp;3                 # Restore old stdin.
exec 3&lt;&amp;-                 # Close temporary fd 3.

echo; echo "$count names read"; echo

exit 0</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<DIV class=EXAMPLE><A name=REDIR3></A>
<P><B>Example 20-7. Redirected <I class=FIRSTTERM>until</I> loop</B></P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# Same as previous example, but with "until" loop.

if [ -z "$1" ]
then
  Filename=names.data         # Default, if no filename specified.
else
  Filename=$1
fi  

# while [ "$name" != Smith ]
until [ "$name" = Smith ]     # Change  !=  to =.
do
  read name                   # Reads from $Filename, rather than stdin.
  echo $name
done &lt;"$Filename"             # Redirects stdin to file $Filename. 
#    ^^^^^^^^^^^^

# Same results as with "while" loop in previous example.

exit 0</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<DIV class=EXAMPLE><A name=REDIR4></A>
<P><B>Example 20-8. Redirected <I class=FIRSTTERM>for</I> loop</B></P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash

if [ -z "$1" ]
then
  Filename=names.data          # Default, if no filename specified.
else
  Filename=$1
fi  

line_count=`wc $Filename | awk '{ print $1 }'`
#           Number of lines in target file.
#
#  Very contrived and kludgy, nevertheless shows that
#+ it's possible to redirect stdin within a "for" loop...
#+ if you're clever enough.
#
# More concise is     line_count=$(wc -l &lt; "$Filename")


for name in `seq $line_count`  # Recall that "seq" prints sequence of numbers.
# while [ "$name" != Smith ]   --   more complicated than a "while" loop   --
do
  read name                    # Reads from $Filename, rather than stdin.
  echo $name
  if [ "$name" = Smith ]       # Need all this extra baggage here.
  then
    break
  fi  
done &lt;"$Filename"              # Redirects stdin to file $Filename. 
#    ^^^^^^^^^^^^

exit 0</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<P>We can modify the previous example to also redirect the output of the loop.</P>
<DIV class=EXAMPLE><A name=REDIR4A></A>
<P><B>Example 20-9. Redirected <I class=FIRSTTERM>for</I> loop (both <TT class=FILENAME>stdin</TT> and <TT class=FILENAME>stdout</TT> redirected)</B></P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash

if [ -z "$1" ]
then
  Filename=names.data          # Default, if no filename specified.
else
  Filename=$1
fi  

Savefile=$Filename.new         # Filename to save results in.
FinalName=Jonah                # Name to terminate "read" on.

line_count=`wc $Filename | awk '{ print $1 }'`  # Number of lines in target file.


for name in `seq $line_count`
do
  read name
  echo "$name"
  if [ "$name" = "$FinalName" ]
  then
    break
  fi  
done &lt; "$Filename" &gt; "$Savefile"     # Redirects stdin to file $Filename,
#    ^^^^^^^^^^^^^^^^^^^^^^^^^^^       and saves it to backup file.

exit 0</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<DIV class=EXAMPLE><A name=REDIR5></A>
<P><B>Example 20-10. Redirected <I class=FIRSTTERM>if/then</I> test</B></P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash

if [ -z "$1" ]
then
  Filename=names.data   # Default, if no filename specified.
else
  Filename=$1
fi  

TRUE=1

if [ "$TRUE" ]          # if true    and   if :   also work.
then
 read name
 echo $name
fi &lt;"$Filename"
#  ^^^^^^^^^^^^

# Reads only first line of file.
# An "if/then" test has no way of iterating unless embedded in a loop.

exit 0</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<DIV class=EXAMPLE><A name=NAMESDATA></A>
<P><B>Example 20-11. Data file <I class=FIRSTTERM>names.data</I> for above examples</B></P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>Aristotle
Arrhenius
Belisarius
Capablanca
Dickens
Euler
Goethe
Hegel
Jonah
Laplace
Maroczy
Purcell
Schmidt
Schopenhauer
Semmelweiss
Smith
Steinmetz
Tukhashevsky
Turing
Venn
Warshawski
Znosko-Borowski

#  This is a data file for
#+ "redir2.sh", "redir3.sh", "redir4.sh", "redir4a.sh", "redir5.sh".</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<P>Redirecting the <TT class=FILENAME>stdout</TT> of a code block has the effect of saving its output to a file. See <A href="http://tldp.org/LDP/abs/html/abs-guide.html#RPMCHECK">Example 3-2</A>.</P>
<P><A href="http://tldp.org/LDP/abs/html/abs-guide.html#HEREDOCREF">Here documents</A> are a special case of redirected code blocks. That being the case, it should be possible to feed the output of a <I class=FIRSTTERM>here document</I> into the <TT class=FILENAME>stdin</TT> for a <I class=FIRSTTERM>while loop</I>.</P>
<P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING># This example by Albert Siersema
# Used with permission (thanks!).

function doesOutput()
 # Could be an external command too, of course.
 # Here we show you can use a function as well.
{
  ls -al *.jpg | awk '{print $5,$9}'
}


nr=0          #  We want the while loop to be able to manipulate these and
totalSize=0   #+ to be able to see the changes after the 'while' finished.

while read fileSize fileName ; do
  echo "$fileName is $fileSize bytes"
  let nr++
  totalSize=$((totalSize+fileSize))   # Or: "let totalSize+=fileSize"
done&lt;&lt;EOF
$(doesOutput)
EOF

echo "$nr files totaling $totalSize bytes"</PRE></FONT></TD></TR></TBODY></TABLE>