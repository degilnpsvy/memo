<H1 class=SECT1><A name=STRING-MANIPULATION></A>10.1. Manipulating Strings</H1>
<P><A name=STRINGMANIP></A></P>
<P>Bash supports a surprising number of string manipulation operations. Unfortunately, these tools lack a unified focus. Some are a subset of <A href="http://tldp.org/LDP/abs/html/abs-guide.html#PARAMSUBREF">parameter substitution</A>, and others fall under the functionality of the UNIX <A href="http://tldp.org/LDP/abs/html/abs-guide.html#EXPRREF">expr</A> command. This results in inconsistent command syntax and overlap of functionality, not to mention confusion.</P>
<P></P>
<DIV class=VARIABLELIST>
<P><B>String Length</B></P>
<DL>
<DT>${#string} 
<DD>
<P></P>
<DT>expr length $string 
<DD>
<P><A name=STRLEN></A>These are the equivalent of <I class=FIRSTTERM>strlen()</I> in <I class=FIRSTTERM>C</I>.</P>
<DT>expr "$string" : '.*' 
<DD>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>stringZ=abcABC123ABCabc

echo ${#stringZ}                 # 15
echo `expr length $stringZ`      # 15
echo `expr "$stringZ" : '.*'`    # 15</PRE></FONT></TD></TR></TBODY></TABLE></P></DD></DL></DIV>
<DIV class=EXAMPLE><A name=PARAGRAPHSPACE></A>
<P><B>Example 10-1. Inserting a blank line between paragraphs in a text file</B></P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# paragraph-space.sh
# Ver. 2.1, Reldate 29Jul12 [fixup]

# Inserts a blank line between paragraphs of a single-spaced text file.
# Usage: $0 &lt;FILENAME

MINLEN=60        # Change this value? It's a judgment call.
#  Assume lines shorter than $MINLEN characters ending in a period
#+ terminate a paragraph. See exercises below.

while read line  # For as many lines as the input file has ...
do
  echo "$line"   # Output the line itself.

  len=${#line}
  if [[ "$len" -lt "$MINLEN" &amp;&amp; "$line" =~ [*{\.}]$ ]]
# if [[ "$len" -lt "$MINLEN" &amp;&amp; "$line" =~ \[*\.\] ]]
# An update to Bash broke the previous version of this script. Ouch!
# Thank you, Halim Srama, for pointing this out and suggesting a fix.
    then echo    #  Add a blank line immediately
  fi             #+ after a short line terminated by a period.
done

exit

# Exercises:
# ---------
#  1) The script usually inserts a blank line at the end
#+    of the target file. Fix this.
#  2) Line 17 only considers periods as sentence terminators.
#     Modify this to include other common end-of-sentence characters,
#+    such as ?, !, and ".</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<P></P>
<DIV class=VARIABLELIST>
<P><B>Length of Matching Substring at Beginning of String</B></P>
<DL>
<DT><A name=EXPRMATCH></A>expr match "$string" '$substring' 
<DD>
<P><TT class=REPLACEABLE><I>$substring</I></TT> is a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#REGEXREF">regular expression</A>.</P>
<DT>expr "$string" : '$substring' 
<DD>
<P><TT class=REPLACEABLE><I>$substring</I></TT> is a regular expression.</P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>stringZ=abcABC123ABCabc
#       |------|
#       12345678

echo `expr match "$stringZ" 'abc[A-Z]*.2'`   # 8
echo `expr "$stringZ" : 'abc[A-Z]*.2'`       # 8</PRE></FONT></TD></TR></TBODY></TABLE></P></DD></DL></DIV>
<P></P>
<DIV class=VARIABLELIST>
<P><B>Index</B></P>
<DL>
<DT><A name=SUBSTRINGINDEX2></A>expr index $string $substring 
<DD>
<P>Numerical position in $string of first character in $substring that matches.</P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>stringZ=abcABC123ABCabc
#       123456 ...
echo `expr index "$stringZ" C12`             # 6
                                             # C position.

echo `expr index "$stringZ" 1c`              # 3
# 'c' (in #3 position) matches before '1'.</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>This is the near equivalent of <I class=FIRSTTERM>strchr()</I> in <I class=FIRSTTERM>C</I>.</P></DD></DL></DIV>
<P></P>
<DIV class=VARIABLELIST>
<P><B>Substring Extraction</B></P>
<DL>
<DT><A name=SUBSTREXTR01></A>${string:position} 
<DD>
<P>Extracts substring from <TT class=REPLACEABLE><I>$string</I></TT> at <TT class=REPLACEABLE><I>$position</I></TT>.</P>
<P>If the <TT class=VARNAME>$string</TT> parameter is <SPAN class=QUOTE>"<SPAN class=TOKEN>*</SPAN>"</SPAN> or <SPAN class=QUOTE>"<SPAN class=TOKEN>@</SPAN>"</SPAN>, then this extracts the <A href="http://tldp.org/LDP/abs/html/abs-guide.html#POSPARAMREF">positional parameters</A>, <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FTN.AEN5987" name=AEN5987><SPAN class=footnote>[49]</SPAN></A> starting at <TT class=VARNAME>$position</TT>.</P>
<DT><A name=SUBSTREXTR02></A>${string:position:length} 
<DD>
<P>Extracts <TT class=REPLACEABLE><I>$length</I></TT> characters of substring from <TT class=REPLACEABLE><I>$string</I></TT> at <TT class=REPLACEABLE><I>$position</I></TT>.</P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>stringZ=abcABC123ABCabc
#       0123456789.....
#       0-based indexing.

echo ${stringZ:0}                            # abcABC123ABCabc
echo ${stringZ:1}                            # bcABC123ABCabc
echo ${stringZ:7}                            # 23ABCabc

echo ${stringZ:7:3}                          # 23A
                                             # Three characters of substring.



# Is it possible to index from the right end of the string?
    
echo ${stringZ:-4}                           # abcABC123ABCabc
# Defaults to full string, as in ${parameter:-default}.
# However . . .

echo ${stringZ:(-4)}                         # Cabc 
echo ${stringZ: -4}                          # Cabc
# Now, it works.
# Parentheses or added space "escape" the position parameter.

# Thank you, Dan Jacobson, for pointing this out.</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>The <I class=FIRSTTERM>position</I> and <I class=FIRSTTERM>length</I> arguments can be <SPAN class=QUOTE>"parameterized,"</SPAN> that is, represented as a variable, rather than as a numerical constant.</P>
<P><A name=RANDSTRING0></A></P>
<DIV class=EXAMPLE><A name=RANDSTRING></A>
<P><B>Example 10-2. Generating an 8-character <SPAN class=QUOTE>"random"</SPAN> string</B></P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# rand-string.sh
# Generating an 8-character "random" string.

if [ -n "$1" ]  #  If command-line argument present,
then            #+ then set start-string to it.
  str0="$1"
else            #  Else use PID of script as start-string.
  str0="$$"
fi

POS=2  # Starting from position 2 in the string.
LEN=8  # Extract eight characters.

str1=$( echo "$str0" | md5sum | md5sum )
#  Doubly scramble     ^^^^^^   ^^^^^^
#+ by piping and repiping to md5sum.

randstring="${str1:$POS:$LEN}"
# Can parameterize ^^^^ ^^^^

echo "$randstring"

exit $?

# bozo$ ./rand-string.sh my-password
# 1bdd88c4

#  No, this is is not recommended
#+ as a method of generating hack-proof passwords.</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<P><A name=SUBSTREXTRP></A></P>
<P>If the <TT class=VARNAME>$string</TT> parameter is <SPAN class=QUOTE>"<SPAN class=TOKEN>*</SPAN>"</SPAN> or <SPAN class=QUOTE>"<SPAN class=TOKEN>@</SPAN>"</SPAN>, then this extracts a maximum of <TT class=VARNAME>$length</TT> positional parameters, starting at <TT class=VARNAME>$position</TT>.</P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>echo ${*:2}          # Echoes second and following positional parameters.
echo ${@:2}          # Same as above.

echo ${*:2:3}        # Echoes three positional parameters, starting at second.</PRE></FONT></TD></TR></TBODY></TABLE></P>
<DT>expr substr $string $position $length 
<DD>
<P>Extracts <TT class=REPLACEABLE><I>$length</I></TT> characters from <TT class=REPLACEABLE><I>$string</I></TT> starting at <TT class=REPLACEABLE><I>$position</I></TT>.</P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>stringZ=abcABC123ABCabc
#       123456789......
#       1-based indexing.

echo `expr substr $stringZ 1 2`              # ab
echo `expr substr $stringZ 4 3`              # ABC</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P><A name=EXPRPAREN></A></P>
<DT>expr match "$string" '\($substring\)' 
<DD>
<P>Extracts <TT class=REPLACEABLE><I>$substring</I></TT> at beginning of <TT class=REPLACEABLE><I>$string</I></TT>, where <TT class=REPLACEABLE><I>$substring</I></TT> is a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#REGEXREF">regular expression</A>.</P>
<DT>expr "$string" : '\($substring\)' 
<DD>
<P>Extracts <TT class=REPLACEABLE><I>$substring</I></TT> at beginning of <TT class=REPLACEABLE><I>$string</I></TT>, where <TT class=REPLACEABLE><I>$substring</I></TT> is a regular expression.</P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>stringZ=abcABC123ABCabc
#       =======	    

echo `expr match "$stringZ" '\(.[b-c]*[A-Z]..[0-9]\)'`   # abcABC1
echo `expr "$stringZ" : '\(.[b-c]*[A-Z]..[0-9]\)'`       # abcABC1
echo `expr "$stringZ" : '\(.......\)'`                   # abcABC1
# All of the above forms give an identical result.</PRE></FONT></TD></TR></TBODY></TABLE></P>
<DT>expr match "$string" '.*\($substring\)' 
<DD>
<P>Extracts <TT class=REPLACEABLE><I>$substring</I></TT> at <EM>end</EM> of <TT class=REPLACEABLE><I>$string</I></TT>, where <TT class=REPLACEABLE><I>$substring</I></TT> is a regular expression.</P>
<DT>expr "$string" : '.*\($substring\)' 
<DD>
<P>Extracts <TT class=REPLACEABLE><I>$substring</I></TT> at <EM>end</EM> of <TT class=REPLACEABLE><I>$string</I></TT>, where <TT class=REPLACEABLE><I>$substring</I></TT> is a regular expression.</P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>stringZ=abcABC123ABCabc
#                ======

echo `expr match "$stringZ" '.*\([A-C][A-C][A-C][a-c]*\)'`    # ABCabc
echo `expr "$stringZ" : '.*\(......\)'`                       # ABCabc</PRE></FONT></TD></TR></TBODY></TABLE></P></DD></DL></DIV>
<P></P>
<DIV class=VARIABLELIST>
<P><B>Substring Removal</B></P>
<DL>
<DT>${string#substring} 
<DD>
<P>Deletes shortest match of <TT class=REPLACEABLE><I>$substring</I></TT> from <EM>front</EM> of <TT class=REPLACEABLE><I>$string</I></TT>.</P>
<DT>${string##substring} 
<DD>
<P>Deletes longest match of <TT class=REPLACEABLE><I>$substring</I></TT> from <EM>front</EM> of <TT class=REPLACEABLE><I>$string</I></TT>.</P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>stringZ=abcABC123ABCabc
#       |----|          shortest
#       |----------|    longest

echo ${stringZ#a*C}      # 123ABCabc
# Strip out shortest match between 'a' and 'C'.

echo ${stringZ##a*C}     # abc
# Strip out longest match between 'a' and 'C'.



# You can parameterize the substrings.

X='a*C'

echo ${stringZ#$X}      # 123ABCabc
echo ${stringZ##$X}     # abc
                        # As above.</PRE></FONT></TD></TR></TBODY></TABLE></P>
<DT>${string%substring} 
<DD>
<P>Deletes shortest match of <TT class=REPLACEABLE><I>$substring</I></TT> from <EM>back</EM> of <TT class=REPLACEABLE><I>$string</I></TT>.</P>
<P>For example: 
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING># Rename all filenames in $PWD with "TXT" suffix to a "txt" suffix.
# For example, "file1.TXT" becomes "file1.txt" . . .

SUFF=TXT
suff=txt

for i in $(ls *.$SUFF)
do
  mv -f $i ${i%.$SUFF}.$suff
  #  Leave unchanged everything *except* the shortest pattern match
  #+ starting from the right-hand-side of the variable $i . . .
done ### This could be condensed into a "one-liner" if desired.

# Thank you, Rory Winston.</PRE></FONT></TD></TR></TBODY></TABLE></P>
<DT>${string%%substring} 
<DD>
<P>Deletes longest match of <TT class=REPLACEABLE><I>$substring</I></TT> from <EM>back</EM> of <TT class=REPLACEABLE><I>$string</I></TT>.</P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>stringZ=abcABC123ABCabc
#                    ||     shortest
#        |------------|     longest

echo ${stringZ%b*c}      # abcABC123ABCa
# Strip out shortest match between 'b' and 'c', from back of $stringZ.

echo ${stringZ%%b*c}     # a
# Strip out longest match between 'b' and 'c', from back of $stringZ.</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>This operator is useful for generating filenames.</P>
<DIV class=EXAMPLE><A name=CVT></A>
<P><B>Example 10-3. Converting graphic file formats, with filename change</B></P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
#  cvt.sh:
#  Converts all the MacPaint image files in a directory to "pbm" format.

#  Uses the "macptopbm" binary from the "netpbm" package,
#+ which is maintained by Brian Henderson (bryanh@giraffe-data.com).
#  Netpbm is a standard part of most Linux distros.

OPERATION=macptopbm
SUFFIX=pbm          # New filename suffix. 

if [ -n "$1" ]
then
  directory=$1      # If directory name given as a script argument...
else
  directory=$PWD    # Otherwise use current working directory.
fi  
  
#  Assumes all files in the target directory are MacPaint image files,
#+ with a ".mac" filename suffix.

for file in $directory/*    # Filename globbing.
do
  filename=${file%.*c}      #  Strip ".mac" suffix off filename
                            #+ ('.*c' matches everything
			    #+ between '.' and 'c', inclusive).
  $OPERATION $file &gt; "$filename.$SUFFIX"
                            # Redirect conversion to new filename.
  rm -f $file               # Delete original files after converting.   
  echo "$filename.$SUFFIX"  # Log what is happening to stdout.
done

exit 0

# Exercise:
# --------
#  As it stands, this script converts *all* the files in the current
#+ working directory.
#  Modify it to work *only* on files with a ".mac" suffix.



# *** And here's another way to do it. *** #

#!/bin/bash
# Batch convert into different graphic formats.
# Assumes imagemagick installed (standard in most Linux distros).

INFMT=png   # Can be tif, jpg, gif, etc.
OUTFMT=pdf  # Can be tif, jpg, gif, pdf, etc.

for pic in *"$INFMT"
do
  p2=$(ls "$pic" | sed -e s/\.$INFMT//)
  # echo $p2
    convert "$pic" $p2.$OUTFMT
    done

exit $?</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<DIV class=EXAMPLE><A name=RA2OGG></A>
<P><B>Example 10-4. Converting streaming audio files to <I class=FIRSTTERM>ogg</I></B></P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# ra2ogg.sh: Convert streaming audio files (*.ra) to ogg.

# Uses the "mplayer" media player program:
#      http://www.mplayerhq.hu/homepage
# Uses the "ogg" library and "oggenc":
#      http://www.xiph.org/
#
# This script may need appropriate codecs installed, such as sipr.so ...
# Possibly also the compat-libstdc++ package.


OFILEPREF=${1%%ra}      # Strip off the "ra" suffix.
OFILESUFF=wav           # Suffix for wav file.
OUTFILE="$OFILEPREF""$OFILESUFF"
E_NOARGS=85

if [ -z "$1" ]          # Must specify a filename to convert.
then
  echo "Usage: `basename $0` [filename]"
  exit $E_NOARGS
fi


##########################################################################
mplayer "$1" -ao pcm:file=$OUTFILE
oggenc "$OUTFILE"  # Correct file extension automatically added by oggenc.
##########################################################################

rm "$OUTFILE"      # Delete intermediate *.wav file.
                   # If you want to keep it, comment out above line.

exit $?

#  Note:
#  ----
#  On a Website, simply clicking on a *.ram streaming audio file
#+ usually only downloads the URL of the actual *.ra audio file.
#  You can then use "wget" or something similar
#+ to download the *.ra file itself.


#  Exercises:
#  ---------
#  As is, this script converts only *.ra filenames.
#  Add flexibility by permitting use of *.ram and other filenames.
#
#  If you're really ambitious, expand the script
#+ to do automatic downloads and conversions of streaming audio files.
#  Given a URL, batch download streaming audio files (using "wget")
#+ and convert them on the fly.</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<P><A name=GETOPTSIMPLE1></A></P>
<P>A simple emulation of <A href="http://tldp.org/LDP/abs/html/abs-guide.html#GETOPTY">getopt</A> using substring-extraction constructs.</P>
<DIV class=EXAMPLE><A name=GETOPTSIMPLE></A>
<P><B>Example 10-5. Emulating <I class=FIRSTTERM>getopt</I></B></P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# getopt-simple.sh
# Author: Chris Morgan
# Used in the ABS Guide with permission.


getopt_simple()
{
    echo "getopt_simple()"
    echo "Parameters are '$*'"
    until [ -z "$1" ]
    do
      echo "Processing parameter of: '$1'"
      if [ ${1:0:1} = '/' ]
      then
          tmp=${1:1}               # Strip off leading '/' . . .
          parameter=${tmp%%=*}     # Extract name.
          value=${tmp##*=}         # Extract value.
          echo "Parameter: '$parameter', value: '$value'"
          eval $parameter=$value
      fi
      shift
    done
}

# Pass all options to getopt_simple().
getopt_simple $*

echo "test is '$test'"
echo "test2 is '$test2'"

exit 0  # See also, UseGetOpt.sh, a modified version of this script.

---

sh getopt_example.sh /test=value1 /test2=value2

Parameters are '/test=value1 /test2=value2'
Processing parameter of: '/test=value1'
Parameter: 'test', value: 'value1'
Processing parameter of: '/test2=value2'
Parameter: 'test2', value: 'value2'
test is 'value1'
test2 is 'value2'
</PRE></FONT></TD></TR></TBODY></TABLE></DIV></DD></DL></DIV>
<P></P>
<DIV class=VARIABLELIST>
<P><B>Substring Replacement</B></P>
<DL>
<DT><A name=SUBSTRREPL00></A>${string/substring/replacement} 
<DD>
<P>Replace first <I class=FIRSTTERM>match</I> of <TT class=REPLACEABLE><I>$substring</I></TT> with <TT class=REPLACEABLE><I>$replacement</I></TT>. <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FTN.AEN6164" name=AEN6164><SPAN class=footnote>[50]</SPAN></A> </P>
<DT><A name=SUBSTRREPL01></A>${string//substring/replacement} 
<DD>
<P>Replace all matches of <TT class=REPLACEABLE><I>$substring</I></TT> with <TT class=REPLACEABLE><I>$replacement</I></TT>.</P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>stringZ=abcABC123ABCabc

echo ${stringZ/abc/xyz}       # xyzABC123ABCabc
                              # Replaces first match of 'abc' with 'xyz'.

echo ${stringZ//abc/xyz}      # xyzABC123ABCxyz
                              # Replaces all matches of 'abc' with # 'xyz'.

echo  ---------------
echo "$stringZ"               # abcABC123ABCabc
echo  ---------------
                              # The string itself is not altered!

# Can the match and replacement strings be parameterized?
match=abc
repl=000
echo ${stringZ/$match/$repl}  # 000ABC123ABCabc
#              ^      ^         ^^^
echo ${stringZ//$match/$repl} # 000ABC123ABC000
# Yes!          ^      ^        ^^^         ^^^

echo

# What happens if no $replacement string is supplied?
echo ${stringZ/abc}           # ABC123ABCabc
echo ${stringZ//abc}          # ABC123ABC
# A simple deletion takes place.</PRE></FONT></TD></TR></TBODY></TABLE></P>
<DT><A name=SUBSTRREPL02></A>${string/#substring/replacement} 
<DD>
<P>If <TT class=REPLACEABLE><I>$substring</I></TT> matches <EM>front</EM> end of <TT class=REPLACEABLE><I>$string</I></TT>, substitute <TT class=REPLACEABLE><I>$replacement</I></TT> for <TT class=REPLACEABLE><I>$substring</I></TT>.</P>
<DT><A name=SUBSTRREPL03></A>${string/%substring/replacement} 
<DD>
<P>If <TT class=REPLACEABLE><I>$substring</I></TT> matches <EM>back</EM> end of <TT class=REPLACEABLE><I>$string</I></TT>, substitute <TT class=REPLACEABLE><I>$replacement</I></TT> for <TT class=REPLACEABLE><I>$substring</I></TT>.</P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>stringZ=abcABC123ABCabc

echo ${stringZ/#abc/XYZ}          # XYZABC123ABCabc
                                  # Replaces front-end match of 'abc' with 'XYZ'.

echo ${stringZ/%abc/XYZ}          # abcABC123ABCXYZ
                                  # Replaces back-end match of 'abc' with 'XYZ'.</PRE></FONT></TD></TR></TBODY></TABLE></P></DD></DL></DIV>