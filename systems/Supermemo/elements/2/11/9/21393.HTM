# The top Level README 
<P></P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Linux kernel release 3.x &lt;<A href="http://kernel.org/">http://kernel.org/</A>&gt; </P>
<P></P>
<P>These are the release notes for Linux version 3.&nbsp; Read them carefully,<BR>as they tell you what this is all about, explain how to install the<BR>kernel, and what to do if something goes wrong. </P>
<P>WHAT IS LINUX?</P>
<P>&nbsp; Linux is a clone of the operating system Unix, written from scratch by<BR>&nbsp; Linus Torvalds with assistance from a loosely-knit team of hackers across<BR>&nbsp; the Net. It aims towards POSIX and Single UNIX Specification compliance.</P>
<P><FONT class=extract>&nbsp; It has all the features you would expect in a modern fully-fledged Unix,<BR>&nbsp; including true multitasking, virtual memory, shared libraries, demand<BR>&nbsp; loading, shared copy-on-write executables, proper memory management,<BR>&nbsp; and multistack networking including IPv4 and IPv6.</FONT></P>
<P>&nbsp; It is distributed under the GNU General Public License - see the<BR>&nbsp; accompanying COPYING file for more details. </P>
<P>ON WHAT HARDWARE DOES IT RUN?</P>
<P>&nbsp; Although originally developed first for 32-bit x86-based PCs (386 or higher),<BR>&nbsp; today Linux also runs on (at least) the Compaq Alpha AXP, Sun SPARC and<BR>&nbsp; UltraSPARC, Motorola 68000, PowerPC, PowerPC64, ARM, Hitachi SuperH, Cell,<BR>&nbsp; IBM S/390, MIPS, HP PA-RISC, Intel IA-64, DEC VAX, AMD x86-64, AXIS CRIS,<BR>&nbsp; Xtensa, Tilera TILE, AVR32 and Renesas M32R architectures.</P>
<P><FONT class=extract>&nbsp; Linux is easily portable to most general-purpose 32- or 64-bit architectures<BR>&nbsp; as long as they have a paged memory management unit (PMMU) and a port of the<BR>&nbsp; GNU C compiler (gcc) (part of The GNU Compiler Collection, GCC). Linux has<BR>&nbsp; also been ported to a number of architectures without a PMMU, although<BR>&nbsp; functionality is then obviously somewhat limited.<BR></FONT><FONT class=extract>&nbsp; Linux has also been ported to itself. You can now run the kernel as a<BR>&nbsp; userspace application - this is called UserMode Linux (UML).</FONT></P>
<P>DOCUMENTATION:</P>
<P>&nbsp;- There is a lot of documentation available both in electronic form on<BR>&nbsp;&nbsp; the Internet and in books, both Linux-specific and pertaining to<BR>&nbsp;&nbsp; general UNIX questions.&nbsp; I'd recommend looking into the documentation<BR>&nbsp;&nbsp; subdirectories on any Linux FTP site for the <FONT class=extract>LDP (Linux Documentation<BR>&nbsp;&nbsp; Project) books</FONT>.&nbsp; This README is not meant to be documentation on the<BR>&nbsp;&nbsp; system: there are much better sources available.</P>
<P>&nbsp;- There are various README files in the Documentation/ subdirectory:<BR>&nbsp;&nbsp; these typically contain kernel-specific installation notes for some <BR>&nbsp;&nbsp; drivers for example. See Documentation/00-INDEX for a list of what<BR>&nbsp;&nbsp; is contained in each file.&nbsp; Please read the Changes file, as it<BR>&nbsp;&nbsp; contains information about the problems, which may result by upgrading<BR>&nbsp;&nbsp; your kernel.</P>
<P>&nbsp;- The Documentation/DocBook/ subdirectory contains several guides for<BR>&nbsp;&nbsp; kernel developers and users.&nbsp; These guides can be rendered in a<BR>&nbsp;&nbsp; number of formats:&nbsp; PostScript (.ps), PDF, HTML, &amp; man-pages, among others.<BR>&nbsp;&nbsp; After installation, "make psdocs", "make pdfdocs", "make htmldocs",<BR>&nbsp;&nbsp; or "make mandocs" will render the documentation in the requested format.</P>
<P>INSTALLING the kernel source:</P>
<P>&nbsp;- If you install the full sources, put the kernel tarball in a<BR>&nbsp;&nbsp; directory where you have permissions (eg. your home directory) and<BR>&nbsp;&nbsp; unpack it:</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp; gzip -cd linux-3.X.tar.gz | tar xvf -</P>
<P>&nbsp;&nbsp; or</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp; bzip2 -dc linux-3.X.tar.bz2 | tar xvf -</P>
<P>&nbsp;&nbsp; Replace "X" with the version number of the latest kernel.</P>
<P>&nbsp;&nbsp; Do NOT use the /usr/src/linux area! This area has a (usually<BR>&nbsp;&nbsp; incomplete) set of kernel headers that are used by the library header<BR>&nbsp;&nbsp; files.&nbsp; They should match the library, and not get messed up by<BR>&nbsp;&nbsp; whatever the kernel-du-jour happens to be.</P>
<P><FONT class=extract>&nbsp;- You can also upgrade between 3.x releases by patching.&nbsp; Patches are<BR>&nbsp;&nbsp; distributed in the traditional gzip and the newer bzip2 format.&nbsp; To<BR>&nbsp;&nbsp; install by patching, get all the newer patch files, enter the<BR>&nbsp;&nbsp; top level directory of the kernel source (linux-3.X) and execute:</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp;&nbsp; gzip -cd ../patch-3.x.gz | patch -p1</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp; or</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp;&nbsp; bzip2 -dc ../patch-3.x.bz2 | patch -p1</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp; Replace "x" for all versions bigger than the version "X" of your current<BR>&nbsp;&nbsp; source tree, _in_order_, and you should be ok.&nbsp; You may want to remove<BR>&nbsp;&nbsp; the backup files (some-file-name~ or some-file-name.orig), and make sure<BR>&nbsp;&nbsp; that there are no failed patches (some-file-name# or some-file-name.rej).<BR>&nbsp;&nbsp; If there are, either you or I have made a mistake.</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp; Unlike patches for the 3.x kernels, patches for the 3.x.y kernels<BR>&nbsp;&nbsp; (also known as the -stable kernels) are not incremental but instead apply<BR>&nbsp;&nbsp; directly to the base 3.x kernel.&nbsp; For example, if your base kernel is 3.0<BR>&nbsp;&nbsp; and you want to apply the 3.0.3 patch, you must not first apply the 3.0.1<BR>&nbsp;&nbsp; and 3.0.2 patches. Similarly, if you are running kernel version 3.0.2 and<BR>&nbsp;&nbsp; want to jump to 3.0.3, you must first reverse the 3.0.2 patch (that is,<BR>&nbsp;&nbsp; patch -R) _before_ applying the 3.0.3 patch. You can read more on this in<BR>&nbsp;&nbsp; Documentation/applying-patches.txt</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp; Alternatively, the script patch-kernel can be used to automate this<BR>&nbsp;&nbsp; process.&nbsp; It determines the current kernel version and applies any<BR>&nbsp;&nbsp; patches found.</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp;&nbsp; linux/scripts/patch-kernel linux</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp; The first argument in the command above is the location of the<BR>&nbsp;&nbsp; kernel source.&nbsp; Patches are applied from the current directory, but<BR>&nbsp;&nbsp; an alternative directory can be specified as the second argument.</FONT></P>
<P><FONT class=extract>&nbsp;- Make sure you have no stale .o files and dependencies lying around:</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp;&nbsp; cd linux<BR>&nbsp;&nbsp;&nbsp;&nbsp; make mrproper</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp; You should now have the sources correctly installed.</FONT></P>
<P><FONT class=extract>SOFTWARE REQUIREMENTS</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp; Compiling and running the 3.x kernels requires up-to-date<BR>&nbsp;&nbsp; versions of various software packages.&nbsp; Consult<BR>&nbsp;&nbsp; Documentation/Changes for the minimum version numbers required<BR>&nbsp;&nbsp; and how to get updates for these packages.&nbsp; Beware that using<BR>&nbsp;&nbsp; excessively old versions of these packages can cause indirect<BR>&nbsp;&nbsp; errors that are very difficult to track down, so don't assume that<BR>&nbsp;&nbsp; you can just update packages when obvious problems arise during<BR>&nbsp;&nbsp; build or operation.</FONT></P>
<P><FONT class=extract>BUILD directory for the kernel:</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp; When compiling the kernel, all output files will per default be<BR>&nbsp;&nbsp; stored together with the kernel source code.<BR>&nbsp;&nbsp; Using the option "make O=output/dir" allow you to specify an alternate<BR>&nbsp;&nbsp; place for the output files (including .config).<BR>&nbsp;&nbsp; Example:</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp;&nbsp; kernel source code: /usr/src/linux-3.X<BR>&nbsp;&nbsp;&nbsp;&nbsp; build directory:&nbsp;&nbsp;&nbsp; /home/name/build/kernel</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp; To configure and build the kernel, use:</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp;&nbsp; cd /usr/src/linux-3.X<BR>&nbsp;&nbsp;&nbsp;&nbsp; make O=/home/name/build/kernel menuconfig<BR>&nbsp;&nbsp;&nbsp;&nbsp; make O=/home/name/build/kernel<BR>&nbsp;&nbsp;&nbsp;&nbsp; sudo make O=/home/name/build/kernel modules_install install</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp; Please note: If the 'O=output/dir' option is used, then it must be<BR>&nbsp;&nbsp; used for all invocations of make.</FONT></P>
<P><FONT class=extract>CONFIGURING the kernel:</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp; Do not skip this step even if you are only upgrading one minor<BR>&nbsp;&nbsp; version.&nbsp; New configuration options are added in each release, and<BR>&nbsp;&nbsp; odd problems will turn up if the configuration files are not set up<BR>&nbsp;&nbsp; as expected.&nbsp; If you want to carry your existing configuration to a<BR>&nbsp;&nbsp; new version with minimal work, use "make oldconfig", which will<BR>&nbsp;&nbsp; only ask you for the answers to new questions.</FONT></P>
<P>&nbsp;- Alternative configuration commands are:</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp; "make config"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Plain text interface.</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp; "make menuconfig"&nbsp; Text based color menus, radiolists &amp; dialogs.</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp; "make nconfig"&nbsp;&nbsp;&nbsp;&nbsp; Enhanced text based color menus.</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp; "make xconfig"&nbsp;&nbsp;&nbsp;&nbsp; X windows (Qt) based configuration tool.</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp; "make gconfig"&nbsp;&nbsp;&nbsp;&nbsp; X windows (Gtk) based configuration tool.</P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp;&nbsp; "make oldconfig"&nbsp;&nbsp; Default all questions based on the contents of<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; your existing ./.config file and asking about<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; new config symbols.</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp;&nbsp; "make silentoldconfig"<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Like above, but avoids cluttering the screen<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; with questions already answered.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Additionally updates the dependencies.</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp;&nbsp; "make olddefconfig"<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Like above, but sets new symbols to their default<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; values without prompting.</FONT></P>
<P>&nbsp;<FONT class=extract>&nbsp;&nbsp;&nbsp; "make defconfig"&nbsp;&nbsp; Create a ./.config file by using the default<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; symbol values from either arch/$ARCH/defconfig<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; or arch/$ARCH/configs/${PLATFORM}_defconfig,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; depending on the architecture.</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp;&nbsp; "make ${PLATFORM}_defconfig"<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Create a ./.config file by using the default<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; symbol values from<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; arch/$ARCH/configs/${PLATFORM}_defconfig.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Use "make help" to get a list of all available<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; platforms of your architecture.</FONT></P>
<P>&nbsp;&nbsp;&nbsp;&nbsp; "make allyesconfig"<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Create a ./.config file by setting symbol<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; values to 'y' as much as possible.</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp; "make allmodconfig"<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Create a ./.config file by setting symbol<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; values to 'm' as much as possible.</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp; "make allnoconfig" Create a ./.config file by setting symbol<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; values to 'n' as much as possible.</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp; "make randconfig"&nbsp; Create a ./.config file by setting symbol<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; values to random values.</P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp;&nbsp; "make localmodconfig" Create a config based on current config and<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; loaded modules (lsmod). Disables any module<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; option that is not needed for the loaded modules.</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; To create a localmodconfig for another machine,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; store the lsmod of that machine into a file<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; and pass it in as a LSMOD parameter.</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; target$ lsmod &gt; /tmp/mylsmod<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; target$ scp /tmp/mylsmod host:/tmp</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; host$ make LSMOD=/tmp/mylsmod localmodconfig</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; The above also works when cross compiling.</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp;&nbsp; "make localyesconfig" Similar to localmodconfig, except it will convert<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; all module options to built in (=y) options.</FONT></P>
<P>&nbsp;&nbsp; You can find more information on using the Linux kernel config tools<BR>&nbsp;&nbsp; in Documentation/kbuild/kconfig.txt.</P>
<P><FONT class=extract>&nbsp;- NOTES on "make config":</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; - Having unnecessary drivers will make the kernel bigger, and can<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; under some circumstances lead to problems: probing for a<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; nonexistent controller card may confuse your other controllers</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; - Compiling the kernel with "Processor type" set higher than 386<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; will result in a kernel that does NOT work on a 386.&nbsp; The<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; kernel will detect this on bootup, and give up.</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; - A kernel with math-emulation compiled in will still use the<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; coprocessor if one is present: the math emulation will just<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; never get used in that case.&nbsp; The kernel will be slightly larger,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; but will work on different machines regardless of whether they<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; have a math coprocessor or not.</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; - The "kernel hacking" configuration details usually result in a<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bigger or slower kernel (or both), and can even make the kernel<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; less stable by configuring some routines to actively try to<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break bad code to find kernel problems (kmalloc()).&nbsp; Thus you<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; should probably answer 'n' to the questions for "development",<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "experimental", or "debugging" features.</FONT></P>
<P><FONT class=extract>COMPILING the kernel:</FONT></P>
<P><FONT class=extract>&nbsp;- Make sure you have at least gcc 3.2 available.<BR>&nbsp;&nbsp; For more information, refer to Documentation/Changes.</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp; Please note that you can still run a.out user programs with this kernel.</FONT></P>
<P><FONT class=extract>&nbsp;- Do a "make" to create a compressed kernel image. It is also<BR>&nbsp;&nbsp; possible to do "make install" if you have lilo installed to suit the<BR>&nbsp;&nbsp; kernel makefiles, but you may want to check your particular lilo setup first.</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp; To do the actual install, you have to be root, but none of the normal<BR>&nbsp;&nbsp; build should require that. Don't take the name of root in vain.</FONT></P>
<P><FONT class=extract>&nbsp;- If you configured any of the parts of the kernel as `modules', you<BR>&nbsp;&nbsp; will also have to do "make modules_install".</FONT></P>
<P><FONT class=extract>&nbsp;- Verbose kernel compile/build output:</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp; Normally, the kernel build system runs in a fairly quiet mode (but not<BR>&nbsp;&nbsp; totally silent).&nbsp; However, sometimes you or other kernel developers need<BR>&nbsp;&nbsp; to see compile, link, or other commands exactly as they are executed.<BR>&nbsp;&nbsp; For this, use "verbose" build mode.&nbsp; This is done by inserting<BR>&nbsp;&nbsp; "V=1" in the "make" command.&nbsp; E.g.:</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp;&nbsp; make V=1 all</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp; To have the build system also tell the reason for the rebuild of each<BR>&nbsp;&nbsp; target, use "V=2".&nbsp; The default is "V=0".</FONT></P>
<P><FONT class=extract>&nbsp;- Keep a backup kernel handy in case something goes wrong.&nbsp; This is <BR>&nbsp;&nbsp; especially true for the development releases, since each new release<BR>&nbsp;&nbsp; contains new code which has not been debugged.&nbsp; Make sure you keep a<BR>&nbsp;&nbsp; backup of the modules corresponding to that kernel, as well.&nbsp; If you<BR>&nbsp;&nbsp; are installing a new kernel with the same version number as your<BR>&nbsp;&nbsp; working kernel, make a backup of your modules directory before you<BR>&nbsp;&nbsp; do a "make modules_install".</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp; Alternatively, before compiling, use the kernel config option<BR>&nbsp;&nbsp; "LOCALVERSION" to append a unique suffix to the regular kernel version.<BR>&nbsp;&nbsp; LOCALVERSION can be set in the "General Setup" menu.</FONT></P>
<P><FONT class=extract>&nbsp;- In order to boot your new kernel, you'll need to copy the kernel<BR>&nbsp;&nbsp; image (e.g. .../linux/arch/i386/boot/bzImage after compilation)<BR>&nbsp;&nbsp; to the place where your regular bootable kernel is found. </FONT></P>
<P><FONT class=extract>&nbsp;- Booting a kernel directly from a floppy without the assistance of a<BR>&nbsp;&nbsp; bootloader such as LILO, is no longer supported.</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp; If you boot Linux from the hard drive, chances are you use LILO, which<BR>&nbsp;&nbsp; uses the kernel image as specified in the file /etc/lilo.conf.&nbsp; The<BR>&nbsp;&nbsp; kernel image file is usually /vmlinuz, /boot/vmlinuz, /bzImage or<BR>&nbsp;&nbsp; /boot/bzImage.&nbsp; To use the new kernel, save a copy of the old image<BR>&nbsp;&nbsp; and copy the new image over the old one.&nbsp; Then, you MUST RERUN LILO<BR>&nbsp;&nbsp; to update the loading map!! If you don't, you won't be able to boot<BR>&nbsp;&nbsp; the new kernel image.</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp; Reinstalling LILO is usually a matter of running /sbin/lilo. <BR>&nbsp;&nbsp; You may wish to edit /etc/lilo.conf to specify an entry for your<BR>&nbsp;&nbsp; old kernel image (say, /vmlinux.old) in case the new one does not<BR>&nbsp;&nbsp; work.&nbsp; See the LILO docs for more information. </FONT></P>
<P><FONT class=extract>&nbsp;&nbsp; After reinstalling LILO, you should be all set.&nbsp; Shutdown the system,<BR>&nbsp;&nbsp; reboot, and enjoy!</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp; If you ever need to change the default root device, video mode,<BR>&nbsp;&nbsp; ramdisk size, etc.&nbsp; in the kernel image, use the 'rdev' program (or<BR>&nbsp;&nbsp; alternatively the LILO boot options when appropriate).&nbsp; No need to<BR>&nbsp;&nbsp; recompile the kernel to change these parameters. </FONT></P>
<P><FONT class=extract>&nbsp;- Reboot with the new kernel and enjoy. </FONT></P>
<P>IF SOMETHING GOES WRONG:</P>
<P>&nbsp;- If you have problems that seem to be due to kernel bugs, please check<BR>&nbsp;&nbsp; the file MAINTAINERS to see if there is a particular person associated<BR>&nbsp;&nbsp; with the part of the kernel that you are having trouble with. If there<BR>&nbsp;&nbsp; isn't anyone listed there, then the second best thing is to mail<BR>&nbsp;&nbsp; them to me (<A href="mailto:torvalds@linux-foundation.org">torvalds@linux-foundation.org</A>), and possibly to any other<BR>&nbsp;&nbsp; relevant mailing-list or to the newsgroup.</P>
<P>&nbsp;- In all bug-reports, *please* tell what kernel you are talking about,<BR>&nbsp;&nbsp; how to duplicate the problem, and what your setup is (use your common<BR>&nbsp;&nbsp; sense).&nbsp; If the problem is new, tell me so, and if the problem is<BR>&nbsp;&nbsp; old, please try to tell me when you first noticed it.</P>
<P><FONT class=extract>&nbsp;- If the bug results in a message like</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp;&nbsp; unable to handle kernel paging request at address C0000010<BR>&nbsp;&nbsp;&nbsp;&nbsp; Oops: 0002<BR>&nbsp;&nbsp;&nbsp;&nbsp; EIP:&nbsp;&nbsp; 0010:XXXXXXXX<BR>&nbsp;&nbsp;&nbsp;&nbsp; eax: xxxxxxxx&nbsp;&nbsp; ebx: xxxxxxxx&nbsp;&nbsp; ecx: xxxxxxxx&nbsp;&nbsp; edx: xxxxxxxx<BR>&nbsp;&nbsp;&nbsp;&nbsp; esi: xxxxxxxx&nbsp;&nbsp; edi: xxxxxxxx&nbsp;&nbsp; ebp: xxxxxxxx<BR>&nbsp;&nbsp;&nbsp;&nbsp; ds: xxxx&nbsp; es: xxxx&nbsp; fs: xxxx&nbsp; gs: xxxx<BR>&nbsp;&nbsp;&nbsp;&nbsp; Pid: xx, process nr: xx<BR>&nbsp;&nbsp;&nbsp;&nbsp; xx xx xx xx xx xx xx xx xx xx</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp; or similar kernel debugging information on your screen or in your<BR>&nbsp;&nbsp; system log, please duplicate it *exactly*.&nbsp; The dump may look<BR>&nbsp;&nbsp; incomprehensible to you, but it does contain information that may<BR>&nbsp;&nbsp; help debugging the problem.&nbsp; The text above the dump is also<BR>&nbsp;&nbsp; important: it tells something about why the kernel dumped code (in<BR>&nbsp;&nbsp; the above example, it's due to a bad kernel pointer). More information<BR>&nbsp;&nbsp; on making sense of the dump is in Documentation/oops-tracing.txt</FONT></P>
<P>&nbsp;<FONT class=extract>- If you compiled the kernel with CONFIG_KALLSYMS you can send the dump<BR>&nbsp;&nbsp; as is, otherwise you will have to use the "ksymoops" program to make<BR>&nbsp;&nbsp; sense of the dump (but compiling with CONFIG_KALLSYMS is usually preferred).<BR>&nbsp;&nbsp; This utility can be downloaded from<BR>&nbsp;&nbsp; </FONT><A href="ftp://ftp.<country>.kernel.org/pub/linux/utils/kernel/ksymoops/"><FONT class=extract>ftp://ftp.&lt;country&gt;.kernel.org/pub/linux/utils/kernel/ksymoops/</FONT></A><FONT class=extract> .<BR>&nbsp;&nbsp; Alternatively, you can do the dump lookup by hand:</FONT></P>
<P><FONT class=extract>&nbsp;- In debugging dumps like the above, it helps enormously if you can<BR>&nbsp;&nbsp; look up what the EIP value means.&nbsp; The hex value as such doesn't help<BR>&nbsp;&nbsp; me or anybody else very much: it will depend on your particular<BR>&nbsp;&nbsp; kernel setup.&nbsp; What you should do is take the hex value from the EIP<BR>&nbsp;&nbsp; line (ignore the "0010:"), and look it up in the kernel namelist to<BR>&nbsp;&nbsp; see which kernel function contains the offending address.</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp; To find out the kernel function name, you'll need to find the system<BR>&nbsp;&nbsp; binary associated with the kernel that exhibited the symptom.&nbsp; This is<BR>&nbsp;&nbsp; the file 'linux/vmlinux'.&nbsp; To extract the namelist and match it against<BR>&nbsp;&nbsp; the EIP from the kernel crash, do:</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp;&nbsp; nm vmlinux | sort | less</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp; This will give you a list of kernel addresses sorted in ascending<BR>&nbsp;&nbsp; order, from which it is simple to find the function that contains the<BR>&nbsp;&nbsp; offending address.&nbsp; Note that the address given by the kernel<BR>&nbsp;&nbsp; debugging messages will not necessarily match exactly with the<BR>&nbsp;&nbsp; function addresses (in fact, that is very unlikely), so you can't<BR>&nbsp;&nbsp; just 'grep' the list: the list will, however, give you the starting<BR>&nbsp;&nbsp; point of each kernel function, so by looking for the function that<BR>&nbsp;&nbsp; has a starting address lower than the one you are searching for but<BR>&nbsp;&nbsp; is followed by a function with a higher address you will find the one<BR>&nbsp;&nbsp; you want.&nbsp; In fact, it may be a good idea to include a bit of<BR>&nbsp;&nbsp; "context" in your problem report, giving a few lines around the<BR>&nbsp;&nbsp; interesting one. </FONT></P>
<P><FONT class=extract>&nbsp;&nbsp; If you for some reason cannot do the above (you have a pre-compiled<BR>&nbsp;&nbsp; kernel image or similar), telling me as much about your setup as<BR>&nbsp;&nbsp; possible will help.&nbsp; Please read the REPORTING-BUGS document for details.</FONT></P>
<P><FONT class=extract>&nbsp;- Alternatively, you can use gdb on a running kernel. (read-only; i.e. you<BR>&nbsp;&nbsp; cannot change values or set break points.) To do this, first compile the<BR>&nbsp;&nbsp; kernel with -g; edit arch/i386/Makefile appropriately, then do a "make<BR>&nbsp;&nbsp; clean". You'll also need to enable CONFIG_PROC_FS (via "make config").</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp; After you've rebooted with the new kernel, do "gdb vmlinux /proc/kcore".<BR>&nbsp;&nbsp; You can now use all the usual gdb commands. The command to look up the<BR>&nbsp;&nbsp; point where your system crashed is "l *0xXXXXXXXX". (Replace the XXXes<BR>&nbsp;&nbsp; with the EIP value.)</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp; gdb'ing a non-running kernel currently fails because gdb (wrongly)<BR>&nbsp;&nbsp; disregards the starting offset for which the kernel is compiled.</FONT></P>
<P>&nbsp;