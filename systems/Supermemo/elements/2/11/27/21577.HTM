<H1 class=SECT1><A name=COMMUNICATIONS></A>16.6. Communications Commands</H1>
<P>Certain of the following commands find use in network data transfer and analysis, as well as in <A href="http://tldp.org/LDP/abs/html/abs-guide.html#CSPAMMERS">chasing spammers</A>.</P>
<P></P>
<DIV class=VARIABLELIST>
<P><B><A name=COMMUNINFO1></A>Information and Statistics</B></P>
<DL>
<DT><A name=HOSTREF></A><B class=COMMAND>host</B> 
<DD>
<P>Searches for information about an Internet host by name or IP address, using DNS.</P>
<P>
<TABLE border=1 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=SCREEN><TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>host surfacemail.com</B></TT>
<TT class=COMPUTEROUTPUT>surfacemail.com. has address 202.92.42.236</TT>
	      </PRE></FONT></TD></TR></TBODY></TABLE></P>
<DT><A name=IPCALCREF></A><B class=COMMAND>ipcalc</B> 
<DD>
<P>Displays IP information for a host. With the <TT class=OPTION>-h</TT> option, <B class=COMMAND>ipcalc</B> does a reverse DNS lookup, finding the name of the host (server) from the IP address.</P>
<P>
<TABLE border=1 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=SCREEN><TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>ipcalc -h 202.92.42.236</B></TT>
<TT class=COMPUTEROUTPUT>HOSTNAME=surfacemail.com</TT>
	      </PRE></FONT></TD></TR></TBODY></TABLE></P>
<DT><A name=NSLOOKUPREF></A><B class=COMMAND>nslookup</B> 
<DD>
<P>Do an Internet <SPAN class=QUOTE>"name server lookup"</SPAN> on a host by IP address. This is essentially equivalent to <B class=COMMAND>ipcalc -h</B> or <B class=COMMAND>dig -x </B>. The command may be run either interactively or noninteractively, i.e., from within a script.</P>
<P>The <B class=COMMAND>nslookup</B> command has allegedly been <SPAN class=QUOTE>"deprecated,"</SPAN> but it is still useful.</P>
<P>
<TABLE border=1 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=SCREEN><TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>nslookup -sil 66.97.104.180</B></TT>
<TT class=COMPUTEROUTPUT>nslookup kuhleersparnis.ch
 Server:         135.116.137.2
 Address:        135.116.137.2#53

 Non-authoritative answer:
 Name:   kuhleersparnis.ch</TT>
	      </PRE></FONT></TD></TR></TBODY></TABLE></P>
<DT><A name=DIGREF></A><B class=COMMAND>dig</B> 
<DD>
<P><B class=COMMAND>D</B>omain <B class=COMMAND>I</B>nformation <B class=COMMAND>G</B>roper. Similar to <B class=COMMAND>nslookup</B>, <I class=FIRSTTERM>dig</I> does an Internet <I class=FIRSTTERM>name server lookup</I> on a host. May be run from the command-line or from within a script.</P>
<P>Some interesting options to <I class=FIRSTTERM>dig</I> are <TT class=OPTION>+time=N</TT> for setting a query timeout to <TT class=PARAMETER><I>N</I></TT> seconds, <TT class=OPTION>+nofail</TT> for continuing to query servers until a reply is received, and <TT class=OPTION>-x</TT> for doing a reverse address lookup.</P>
<P>Compare the output of <B class=COMMAND>dig -x</B> with <B class=COMMAND>ipcalc -h</B> and <B class=COMMAND>nslookup</B>.</P>
<P>
<TABLE border=1 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=SCREEN><TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>dig -x 81.9.6.2</B></TT>
<TT class=COMPUTEROUTPUT>;; Got answer:
 ;; -&gt;&gt;HEADER&lt;&lt;- opcode: QUERY, status: NXDOMAIN, id: 11649
 ;; flags: qr rd ra; QUERY: 1, ANSWER: 0, AUTHORITY: 1, ADDITIONAL: 0

 ;; QUESTION SECTION:
 ;2.6.9.81.in-addr.arpa.         IN      PTR

 ;; AUTHORITY SECTION:
 6.9.81.in-addr.arpa.    3600    IN      SOA     ns.eltel.net. noc.eltel.net.
 2002031705 900 600 86400 3600

 ;; Query time: 537 msec
 ;; SERVER: 135.116.137.2#53(135.116.137.2)
 ;; WHEN: Wed Jun 26 08:35:24 2002
 ;; MSG SIZE  rcvd: 91</TT>
	      </PRE></FONT></TD></TR></TBODY></TABLE></P>
<P><A name=SPAMLOOKUP_0></A></P>
<DIV class=EXAMPLE><A name=SPAMLOOKUP></A>
<P><B>Example 16-40. Finding out where to report a spammer</B></P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# spam-lookup.sh: Look up abuse contact to report a spammer.
# Thanks, Michael Zick.

# Check for command-line arg.
ARGCOUNT=1
E_WRONGARGS=85
if [ $# -ne "$ARGCOUNT" ]
then
  echo "Usage: `basename $0` domain-name"
  exit $E_WRONGARGS
fi


dig +short $1.contacts.abuse.net -c in -t txt
# Also try:
#     dig +nssearch $1
#     Tries to find "authoritative name servers" and display SOA records.

# The following also works:
#     whois -h whois.abuse.net $1
#           ^^ ^^^^^^^^^^^^^^^  Specify host.  
#     Can even lookup multiple spammers with this, i.e."
#     whois -h whois.abuse.net $spamdomain1 $spamdomain2 . . .


#  Exercise:
#  --------
#  Expand the functionality of this script
#+ so that it automatically e-mails a notification
#+ to the responsible ISP's contact address(es).
#  Hint: use the "mail" command.

exit $?

# spam-lookup.sh chinatietong.com
#                A known spam domain.

# "crnet_mgr@chinatietong.com"
# "crnet_tec@chinatietong.com"
# "postmaster@chinatietong.com"


#  For a more elaborate version of this script,
#+ see the SpamViz home page, http://www.spamviz.net/index.html.</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<P><A name=ISSPAMMER_0></A></P>
<DIV class=EXAMPLE><A name=ISSPAMMER></A>
<P><B>Example 16-41. Analyzing a spam domain</B></P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#! /bin/bash
# is-spammer.sh: Identifying spam domains

# $Id: is-spammer, v 1.4 2004/09/01 19:37:52 mszick Exp $
# Above line is RCS ID info.
#
#  This is a simplified version of the "is_spammer.bash
#+ script in the Contributed Scripts appendix.

# is-spammer &lt;domain.name&gt;

# Uses an external program: 'dig'
# Tested with version: 9.2.4rc5

# Uses functions.
# Uses IFS to parse strings by assignment into arrays.
# And even does something useful: checks e-mail blacklists.

# Use the domain.name(s) from the text body:
# http://www.good_stuff.spammer.biz/just_ignore_everything_else
#                       ^^^^^^^^^^^
# Or the domain.name(s) from any e-mail address:
# Really_Good_Offer@spammer.biz
#
# as the only argument to this script.
#(PS: have your Inet connection running)
#
# So, to invoke this script in the above two instances:
#       is-spammer.sh spammer.biz


# Whitespace == :Space:Tab:Line Feed:Carriage Return:
WSP_IFS=$'\x20'$'\x09'$'\x0A'$'\x0D'

# No Whitespace == Line Feed:Carriage Return
No_WSP=$'\x0A'$'\x0D'

# Field separator for dotted decimal ip addresses
ADR_IFS=${No_WSP}'.'

# Get the dns text resource record.
# get_txt &lt;error_code&gt; &lt;list_query&gt;
get_txt() {

    # Parse $1 by assignment at the dots.
    local -a dns
    IFS=$ADR_IFS
    dns=( $1 )
    IFS=$WSP_IFS
    if [ "${dns[0]}" == '127' ]
    then
        # See if there is a reason.
        echo $(dig +short $2 -t txt)
    fi
}

# Get the dns address resource record.
# chk_adr &lt;rev_dns&gt; &lt;list_server&gt;
chk_adr() {
    local reply
    local server
    local reason

    server=${1}${2}
    reply=$( dig +short ${server} )

    # If reply might be an error code . . .
    if [ ${#reply} -gt 6 ]
    then
        reason=$(get_txt ${reply} ${server} )
        reason=${reason:-${reply}}
    fi
    echo ${reason:-' not blacklisted.'}
}

# Need to get the IP address from the name.
echo 'Get address of: '$1
ip_adr=$(dig +short $1)
dns_reply=${ip_adr:-' no answer '}
echo ' Found address: '${dns_reply}

# A valid reply is at least 4 digits plus 3 dots.
if [ ${#ip_adr} -gt 6 ]
then
    echo
    declare query

    # Parse by assignment at the dots.
    declare -a dns
    IFS=$ADR_IFS
    dns=( ${ip_adr} )
    IFS=$WSP_IFS

    # Reorder octets into dns query order.
    rev_dns="${dns[3]}"'.'"${dns[2]}"'.'"${dns[1]}"'.'"${dns[0]}"'.'

# See: http://www.spamhaus.org (Conservative, well maintained)
    echo -n 'spamhaus.org says: '
    echo $(chk_adr ${rev_dns} 'sbl-xbl.spamhaus.org')

# See: http://ordb.org (Open mail relays)
    echo -n '   ordb.org  says: '
    echo $(chk_adr ${rev_dns} 'relays.ordb.org')

# See: http://www.spamcop.net/ (You can report spammers here)
    echo -n ' spamcop.net says: '
    echo $(chk_adr ${rev_dns} 'bl.spamcop.net')

# # # other blacklist operations # # #

# See: http://cbl.abuseat.org.
    echo -n ' abuseat.org says: '
    echo $(chk_adr ${rev_dns} 'cbl.abuseat.org')

# See: http://dsbl.org/usage (Various mail relays)
    echo
    echo 'Distributed Server Listings'
    echo -n '       list.dsbl.org says: '
    echo $(chk_adr ${rev_dns} 'list.dsbl.org')

    echo -n '   multihop.dsbl.org says: '
    echo $(chk_adr ${rev_dns} 'multihop.dsbl.org')

    echo -n 'unconfirmed.dsbl.org says: '
    echo $(chk_adr ${rev_dns} 'unconfirmed.dsbl.org')

else
    echo
    echo 'Could not use that address.'
fi

exit 0

# Exercises:
# --------

# 1) Check arguments to script,
#    and exit with appropriate error message if necessary.

# 2) Check if on-line at invocation of script,
#    and exit with appropriate error message if necessary.

# 3) Substitute generic variables for "hard-coded" BHL domains.

# 4) Set a time-out for the script using the "+time=" option
     to the 'dig' command.</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<P>For a much more elaborate version of the above script, see <A href="http://tldp.org/LDP/abs/html/abs-guide.html#ISSPAMMER2">Example A-28</A>.</P>
<DT><A name=TRACEROUTEREF></A><B class=COMMAND>traceroute</B> 
<DD>
<P>Trace the route taken by packets sent to a remote host. This command works within a LAN, WAN, or over the Internet. The remote host may be specified by an IP address. The output of this command may be filtered by <A href="http://tldp.org/LDP/abs/html/abs-guide.html#GREPREF">grep</A> or <A href="http://tldp.org/LDP/abs/html/abs-guide.html#SEDREF">sed</A> in a pipe.</P>
<P>
<TABLE border=1 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=SCREEN><TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>traceroute 81.9.6.2</B></TT>
<TT class=COMPUTEROUTPUT>traceroute to 81.9.6.2 (81.9.6.2), 30 hops max, 38 byte packets
 1  tc43.xjbnnbrb.com (136.30.178.8)  191.303 ms  179.400 ms  179.767 ms
 2  or0.xjbnnbrb.com (136.30.178.1)  179.536 ms  179.534 ms  169.685 ms
 3  192.168.11.101 (192.168.11.101)  189.471 ms  189.556 ms *
 ...</TT>
	      </PRE></FONT></TD></TR></TBODY></TABLE></P>
<DT><A name=PINGREF></A><B class=COMMAND>ping</B> 
<DD>
<P>Broadcast an <TT class=REPLACEABLE><I>ICMP ECHO_REQUEST</I></TT> packet to another machine, either on a local or remote network. This is a diagnostic tool for testing network connections, and it should be used with caution.</P>
<P>
<TABLE border=1 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=SCREEN><TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>ping localhost</B></TT>
<TT class=COMPUTEROUTPUT>PING localhost.localdomain (127.0.0.1) from 127.0.0.1 : 56(84) bytes of data.
 64 bytes from localhost.localdomain (127.0.0.1): icmp_seq=0 ttl=255 time=709 usec
 64 bytes from localhost.localdomain (127.0.0.1): icmp_seq=1 ttl=255 time=286 usec

 --- localhost.localdomain ping statistics ---
 2 packets transmitted, 2 packets received, 0% packet loss
 round-trip min/avg/max/mdev = 0.286/0.497/0.709/0.212 ms</TT>
	      </PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>A successful <I class=FIRSTTERM>ping</I> returns an <A href="http://tldp.org/LDP/abs/html/abs-guide.html#EXITSTATUSREF">exit status</A> of <SPAN class=ERRORCODE>0</SPAN>. This can be tested for in a script.</P>
<P><A name=PING0></A></P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>  HNAME=news-15.net  # Notorious spammer.
# HNAME=$HOST     # Debug: test for localhost.
  count=2  # Send only two pings.

if [[ `ping -c $count "$HNAME"` ]]
then
  echo ""$HNAME" still up and broadcasting spam your way."
else
  echo ""$HNAME" seems to be down. Pity."
fi</PRE></FONT></TD></TR></TBODY></TABLE></P>
<DT><A name=WHOISREF></A><B class=COMMAND>whois</B> 
<DD>
<P>Perform a DNS (Domain Name System) lookup. The <TT class=OPTION>-h</TT> option permits specifying which particular <I class=FIRSTTERM>whois</I> server to query. See <A href="http://tldp.org/LDP/abs/html/abs-guide.html#EX18">Example 4-6</A> and <A href="http://tldp.org/LDP/abs/html/abs-guide.html#SPAMLOOKUP">Example 16-40</A>.</P>
<DT><A name=FINGERREF></A><B class=COMMAND>finger</B> 
<DD>
<P>Retrieve information about users on a network. Optionally, this command can display a user's <TT class=FILENAME>~/.plan</TT>, <TT class=FILENAME>~/.project</TT>, and <TT class=FILENAME>~/.forward</TT> files, if present.</P>
<P>
<TABLE border=1 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=SCREEN><TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>finger</B></TT>
<TT class=COMPUTEROUTPUT>Login  Name           Tty      Idle  Login Time   Office     Office Phone
 bozo   Bozo Bozeman   tty1        8  Jun 25 16:59                (:0)
 bozo   Bozo Bozeman   ttyp0          Jun 25 16:59                (:0.0)
 bozo   Bozo Bozeman   ttyp1          Jun 25 17:07                (:0.0)</TT>



<TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>finger bozo</B></TT>
<TT class=COMPUTEROUTPUT>Login: bozo                             Name: Bozo Bozeman
 Directory: /home/bozo                   Shell: /bin/bash
 Office: 2355 Clown St., 543-1234
 On since Fri Aug 31 20:13 (MST) on tty1    1 hour 38 minutes idle
 On since Fri Aug 31 20:13 (MST) on pts/0   12 seconds idle
 On since Fri Aug 31 20:13 (MST) on pts/1
 On since Fri Aug 31 20:31 (MST) on pts/2   1 hour 16 minutes idle
 Mail last read Tue Jul  3 10:08 2007 (MST) 
 No Plan.</TT>
	      </PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>Out of security considerations, many networks disable <B class=COMMAND>finger</B> and its associated daemon. <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FTN.AEN13320" name=AEN13320><SPAN class=footnote>[81]</SPAN></A> </P>
<DT><A name=CHFNREF></A><B class=COMMAND>chfn</B> 
<DD>
<P>Change information disclosed by the <B class=COMMAND>finger</B> command.</P>
<DT><A name=VRFYREF></A><B class=COMMAND>vrfy</B> 
<DD>
<P>Verify an Internet e-mail address.</P>
<P>This command seems to be missing from newer Linux distros.</P></DD></DL></DIV>
<P></P>
<DIV class=VARIABLELIST>
<P><B><A name=COMMREMOTE1></A>Remote Host Access</B></P>
<DL>
<DT><A name=RXREF></A><B class=COMMAND>sx</B>, <B class=COMMAND>rx</B> 
<DD>
<P>The <B class=COMMAND>sx</B> and <B class=COMMAND>rx</B> command set serves to transfer files to and from a remote host using the <I class=FIRSTTERM>xmodem</I> protocol. These are generally part of a communications package, such as <B class=COMMAND>minicom</B>.</P>
<DT><A name=RZREF></A><B class=COMMAND>sz</B>, <B class=COMMAND>rz</B> 
<DD>
<P>The <B class=COMMAND>sz</B> and <B class=COMMAND>rz</B> command set serves to transfer files to and from a remote host using the <I class=FIRSTTERM>zmodem</I> protocol. <I class=FIRSTTERM>Zmodem</I> has certain advantages over <I class=FIRSTTERM>xmodem</I>, such as faster transmission rate and resumption of interrupted file transfers. Like <B class=COMMAND>sx</B> and <B class=COMMAND>rx</B>, these are generally part of a communications package.</P>
<DT><A name=FTPREF></A><B class=COMMAND>ftp</B> 
<DD>
<P>Utility and protocol for uploading / downloading files to or from a remote host. An ftp session can be automated in a script (see <A href="http://tldp.org/LDP/abs/html/abs-guide.html#EX72">Example 19-6</A> and <A href="http://tldp.org/LDP/abs/html/abs-guide.html#ENCRYPTEDPW">Example A-4</A>).</P>
<DT><A name=UUCPREF></A><B class=COMMAND>uucp</B>, <A name=UUXREF></A><B class=COMMAND>uux</B>, <A name=CUREF></A><B class=COMMAND>cu</B> 
<DD>
<P><B class=COMMAND>uucp</B>: <I class=FIRSTTERM>UNIX to UNIX copy</I>. This is a communications package for transferring files between UNIX servers. A shell script is an effective way to handle a <B class=COMMAND>uucp</B> command sequence.</P>
<P>Since the advent of the Internet and e-mail, <B class=COMMAND>uucp</B> seems to have faded into obscurity, but it still exists and remains perfectly workable in situations where an Internet connection is not available or appropriate. The advantage of <B class=COMMAND>uucp</B> is that it is fault-tolerant, so even if there is a service interruption the copy operation will resume where it left off when the connection is restored.</P>
<P>---</P>
<P><B class=COMMAND>uux</B>: <I class=FIRSTTERM>UNIX to UNIX execute</I>. Execute a command on a remote system. This command is part of the <B class=COMMAND>uucp</B> package.</P>
<P>---</P>
<P><B class=COMMAND>cu</B>: <B class=COMMAND>C</B>all <B class=COMMAND>U</B>p a remote system and connect as a simple terminal. It is a sort of dumbed-down version of <A href="http://tldp.org/LDP/abs/html/abs-guide.html#TELNETREF">telnet</A>. This command is part of the <B class=COMMAND>uucp</B> package.</P>
<DT><A name=TELNETREF></A><B class=COMMAND>telnet</B> 
<DD>
<P>Utility and protocol for connecting to a remote host.</P>
<DIV class=CAUTION>
<P></P>
<TABLE class=CAUTION border=0 width="90%">
<TBODY>
<TR>
<TD vAlign=top width=25 align=middle><IMG hspace=5 alt=Caution src="http://tldp.org/LDP/abs/images/caution.gif"></TD>
<TD vAlign=top align=left>
<P>The <I class=FIRSTTERM>telnet</I> protocol contains security holes and should therefore probably be avoided. Its use within a shell script is <EM>not</EM> recommended.</P></TD></TR></TBODY></TABLE></DIV>
<DT><A name=WGETREF></A><B class=COMMAND>wget</B> 
<DD>
<P>The <B class=COMMAND>wget</B> utility <I class=FIRSTTERM>noninteractively</I> retrieves or downloads files from a Web or ftp site. It works well in a script.</P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>wget -p http://www.xyz23.com/file01.html
#  The -p or --page-requisite option causes wget to fetch all files
#+ required to display the specified page.

wget -r ftp://ftp.xyz24.net/~bozo/project_files/ -O $SAVEFILE
#  The -r option recursively follows and retrieves all links
#+ on the specified site.

wget -c ftp://ftp.xyz25.net/bozofiles/filename.tar.bz2
#  The -c option lets wget resume an interrupted download.
#  This works with ftp servers and many HTTP sites.</PRE></FONT></TD></TR></TBODY></TABLE></P>
<DIV class=EXAMPLE><A name=QUOTEFETCH></A>
<P><B>Example 16-42. Getting a stock quote</B></P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# quote-fetch.sh: Download a stock quote.


E_NOPARAMS=86

if [ -z "$1" ]  # Must specify a stock (symbol) to fetch.
  then echo "Usage: `basename $0` stock-symbol"
  exit $E_NOPARAMS
fi

stock_symbol=$1

file_suffix=.html
# Fetches an HTML file, so name it appropriately.
URL='http://finance.yahoo.com/q?s='
# Yahoo finance board, with stock query suffix.

# -----------------------------------------------------------
wget -O ${stock_symbol}${file_suffix} "${URL}${stock_symbol}"
# -----------------------------------------------------------


# To look up stuff on http://search.yahoo.com:
# -----------------------------------------------------------
# URL="http://search.yahoo.com/search?fr=ush-news&amp;p=${query}"
# wget -O "$savefilename" "${URL}"
# -----------------------------------------------------------
# Saves a list of relevant URLs.

exit $?

# Exercises:
# ---------
#
# 1) Add a test to ensure the user running the script is on-line.
#    (Hint: parse the output of 'ps -ax' for "ppp" or "connect."
#
# 2) Modify this script to fetch the local weather report,
#+   taking the user's zip code as an argument.</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<P>See also <A href="http://tldp.org/LDP/abs/html/abs-guide.html#WGETTER2">Example A-30</A> and <A href="http://tldp.org/LDP/abs/html/abs-guide.html#BASHPODDER">Example A-31</A>.</P>
<DT><A name=LYNXREF></A><B class=COMMAND>lynx</B> 
<DD>
<P>The <B class=COMMAND>lynx</B> Web and file browser can be used inside a script (with the <TT class=OPTION>-dump</TT> option) to retrieve a file from a Web or ftp site noninteractively.</P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>lynx -dump http://www.xyz23.com/file01.html &gt;$SAVEFILE</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>With the <TT class=OPTION>-traversal</TT> option, <B class=COMMAND>lynx</B> starts at the HTTP URL specified as an argument, then <SPAN class=QUOTE>"crawls"</SPAN> through all links located on that particular server. Used together with the <TT class=OPTION>-crawl</TT> option, outputs page text to a log file.</P>
<DT><A name=RLOGINREF></A><B class=COMMAND>rlogin</B> 
<DD>
<P><TT class=REPLACEABLE><I>Remote login</I></TT>, initates a session on a remote host. This command has security issues, so use <A href="http://tldp.org/LDP/abs/html/abs-guide.html#SSHREF">ssh</A> instead.</P>
<DT><A name=RSHREF></A><B class=COMMAND>rsh</B> 
<DD>
<P><TT class=REPLACEABLE><I>Remote shell</I></TT>, executes command(s) on a remote host. This has security issues, so use <B class=COMMAND>ssh</B> instead.</P>
<DT><A name=RCPREF></A><B class=COMMAND>rcp</B> 
<DD>
<P><TT class=REPLACEABLE><I>Remote copy</I></TT>, copies files between two different networked machines.</P>
<DT><A name=RSYNCREF></A><B class=COMMAND>rsync</B> 
<DD>
<P><TT class=REPLACEABLE><I>Remote synchronize</I></TT>, updates (synchronizes) files between two different networked machines.</P>
<P>
<TABLE border=1 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=SCREEN><TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>rsync -a ~/sourcedir/*txt /node1/subdirectory/</B></TT>
	      </PRE></FONT></TD></TR></TBODY></TABLE></P>
<DIV class=EXAMPLE><A name=FC4UPD></A>
<P><B>Example 16-43. Updating FC4</B></P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# fc4upd.sh

# Script author: Frank Wang.
# Slight stylistic modifications by ABS Guide author.
# Used in ABS Guide with permission.


#  Download Fedora Core 4 update from mirror site using rsync. 
#  Should also work for newer Fedora Cores -- 5, 6, . . .
#  Only download latest package if multiple versions exist,
#+ to save space.

URL=rsync://distro.ibiblio.org/fedora-linux-core/updates/
# URL=rsync://ftp.kddilabs.jp/fedora/core/updates/
# URL=rsync://rsync.planetmirror.com/fedora-linux-core/updates/

DEST=${1:-/var/www/html/fedora/updates/}
LOG=/tmp/repo-update-$(/bin/date +%Y-%m-%d).txt
PID_FILE=/var/run/${0##*/}.pid

E_RETURN=85        # Something unexpected happened.


# General rsync options
# -r: recursive download
# -t: reserve time
# -v: verbose

OPTS="-rtv --delete-excluded --delete-after --partial"

# rsync include pattern
# Leading slash causes absolute path name match.
INCLUDE=(
    "/4/i386/kde-i18n-Chinese*" 
#   ^                         ^
# Quoting is necessary to prevent globbing.
) 


# rsync exclude pattern
# Temporarily comment out unwanted pkgs using "#" . . .
EXCLUDE=(
    /1
    /2
    /3
    /testing
    /4/SRPMS
    /4/ppc
    /4/x86_64
    /4/i386/debug
   "/4/i386/kde-i18n-*"
   "/4/i386/openoffice.org-langpack-*"
   "/4/i386/*i586.rpm"
   "/4/i386/GFS-*"
   "/4/i386/cman-*"
   "/4/i386/dlm-*"
   "/4/i386/gnbd-*"
   "/4/i386/kernel-smp*"
#  "/4/i386/kernel-xen*" 
#  "/4/i386/xen-*" 
)


init () {
    # Let pipe command return possible rsync error, e.g., stalled network.
    set -o pipefail                  # Newly introduced in Bash, version 3.

    TMP=${TMPDIR:-/tmp}/${0##*/}.$$  # Store refined download list.
    trap "{
        rm -f $TMP 2&gt;/dev/null
    }" EXIT                          # Clear temporary file on exit.
}


check_pid () {
# Check if process exists.
    if [ -s "$PID_FILE" ]; then
        echo "PID file exists. Checking ..."
        PID=$(/bin/egrep -o "^[[:digit:]]+" $PID_FILE)
        if /bin/ps --pid $PID &amp;&gt;/dev/null; then
            echo "Process $PID found. ${0##*/} seems to be running!"
           /usr/bin/logger -t ${0##*/} \
                 "Process $PID found. ${0##*/} seems to be running!"
            exit $E_RETURN
        fi
        echo "Process $PID not found. Start new process . . ."
    fi
}


#  Set overall file update range starting from root or $URL,
#+ according to above patterns.
set_range () {
    include=
    exclude=
    for p in "${INCLUDE[@]}"; do
        include="$include --include \"$p\""
    done

    for p in "${EXCLUDE[@]}"; do
        exclude="$exclude --exclude \"$p\""
    done
}


# Retrieve and refine rsync update list.
get_list () {
    echo $$ &gt; $PID_FILE || {
        echo "Can't write to pid file $PID_FILE"
        exit $E_RETURN
    }

    echo -n "Retrieving and refining update list . . ."

    # Retrieve list -- 'eval' is needed to run rsync as a single command.
    # $3 and $4 is the date and time of file creation.
    # $5 is the full package name.
    previous=
    pre_file=
    pre_date=0
    eval /bin/nice /usr/bin/rsync \
        -r $include $exclude $URL | \
        egrep '^dr.x|^-r' | \
        awk '{print $3, $4, $5}' | \
        sort -k3 | \
        { while read line; do
            # Get seconds since epoch, to filter out obsolete pkgs.
            cur_date=$(date -d "$(echo $line | awk '{print $1, $2}')" +%s)
            #  echo $cur_date

            # Get file name.
            cur_file=$(echo $line | awk '{print $3}')
            #  echo $cur_file

            # Get rpm pkg name from file name, if possible.
            if [[ $cur_file == *rpm ]]; then
                pkg_name=$(echo $cur_file | sed -r -e \
                    's/(^([^_-]+[_-])+)[[:digit:]]+\..*[_-].*$/\1/')
            else
                pkg_name=
            fi
            # echo $pkg_name

            if [ -z "$pkg_name" ]; then   #  If not a rpm file,
                echo $cur_file &gt;&gt; $TMP    #+ then append to download list.
            elif [ "$pkg_name" != "$previous" ]; then   # A new pkg found.
                echo $pre_file &gt;&gt; $TMP                  # Output latest file.
                previous=$pkg_name                      # Save current.
                pre_date=$cur_date
                pre_file=$cur_file
            elif [ "$cur_date" -gt "$pre_date" ]; then
                                                #  If same pkg, but newer,
                pre_date=$cur_date              #+ then update latest pointer.
                pre_file=$cur_file
            fi
            done
            echo $pre_file &gt;&gt; $TMP              #  TMP contains ALL
                                                #+ of refined list now.
            # echo "subshell=$BASH_SUBSHELL"

    }       # Bracket required here to let final "echo $pre_file &gt;&gt; $TMP" 
            # Remained in the same subshell ( 1 ) with the entire loop.

    RET=$?  # Get return code of the pipe command.

    [ "$RET" -ne 0 ] &amp;&amp; {
        echo "List retrieving failed with code $RET"
        exit $E_RETURN
    }

    echo "done"; echo
}

# Real rsync download part.
get_file () {

    echo "Downloading..."
    /bin/nice /usr/bin/rsync \
        $OPTS \
        --filter "merge,+/ $TMP" \
        --exclude '*'  \
        $URL $DEST     \
        | /usr/bin/tee $LOG

    RET=$?

   #  --filter merge,+/ is crucial for the intention. 
   #  + modifier means include and / means absolute path.
   #  Then sorted list in $TMP will contain ascending dir name and 
   #+ prevent the following --exclude '*' from "shortcutting the circuit." 

    echo "Done"

    rm -f $PID_FILE 2&gt;/dev/null

    return $RET
}

# -------
# Main
init
check_pid
set_range
get_list
get_file
RET=$?
# -------

if [ "$RET" -eq 0 ]; then
    /usr/bin/logger -t ${0##*/} "Fedora update mirrored successfully."
else
    /usr/bin/logger -t ${0##*/} \
    "Fedora update mirrored with failure code: $RET"
fi

exit $RET</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<P>See also <A href="http://tldp.org/LDP/abs/html/abs-guide.html#NIGHTLYBACKUP">Example A-32</A>.</P>
<DIV class=NOTE>
<P></P>
<TABLE class=NOTE border=0 width="90%">
<TBODY>
<TR>
<TD vAlign=top width=25 align=middle><IMG hspace=5 alt=Note src="http://tldp.org/LDP/abs/images/note.gif"></TD>
<TD vAlign=top align=left>
<P>Using <A href="http://tldp.org/LDP/abs/html/abs-guide.html#RCPREF">rcp</A>, <A href="http://tldp.org/LDP/abs/html/abs-guide.html#RSYNCREF">rsync</A>, and similar utilities with security implications in a shell script may not be advisable. Consider, instead, using <B class=COMMAND>ssh</B>, <A href="http://tldp.org/LDP/abs/html/abs-guide.html#SCPREF">scp</A>, or an <B class=COMMAND>expect</B> script.</P></TD></TR></TBODY></TABLE></DIV>
<DT><A name=SSHREF></A><B class=COMMAND>ssh</B> 
<DD>
<P><TT class=REPLACEABLE><I>Secure shell</I></TT>, logs onto a remote host and executes commands there. This secure replacement for <B class=COMMAND>telnet</B>, <B class=COMMAND>rlogin</B>, <B class=COMMAND>rcp</B>, and <B class=COMMAND>rsh</B> uses identity authentication and encryption. See its <A href="http://tldp.org/LDP/abs/html/abs-guide.html#MANREF">manpage</A> for details.</P>
<DIV class=EXAMPLE><A name=REMOTE></A>
<P><B>Example 16-44. Using <I class=FIRSTTERM>ssh</I></B></P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# remote.bash: Using ssh.

# This example by Michael Zick.
# Used with permission.


#   Presumptions:
#   ------------
#   fd-2 isn't being captured ( '2&gt;/dev/null' ).
#   ssh/sshd presumes stderr ('2') will display to user.
#
#   sshd is running on your machine.
#   For any 'standard' distribution, it probably is,
#+  and without any funky ssh-keygen having been done.

# Try ssh to your machine from the command-line:
#
# $ ssh $HOSTNAME
# Without extra set-up you'll be asked for your password.
#   enter password
#   when done,  $ exit
#
# Did that work? If so, you're ready for more fun.

# Try ssh to your machine as 'root':
#
#   $  ssh -l root $HOSTNAME
#   When asked for password, enter root's, not yours.
#          Last login: Tue Aug 10 20:25:49 2004 from localhost.localdomain
#   Enter 'exit' when done.

#  The above gives you an interactive shell.
#  It is possible for sshd to be set up in a 'single command' mode,
#+ but that is beyond the scope of this example.
#  The only thing to note is that the following will work in
#+ 'single command' mode.


# A basic, write stdout (local) command.

ls -l

# Now the same basic command on a remote machine.
# Pass a different 'USERNAME' 'HOSTNAME' if desired:
USER=${USERNAME:-$(whoami)}
HOST=${HOSTNAME:-$(hostname)}

#  Now excute the above command-line on the remote host,
#+ with all transmissions encrypted.

ssh -l ${USER} ${HOST} " ls -l "

#  The expected result is a listing of your username's home
#+ directory on the remote machine.
#  To see any difference, run this script from somewhere
#+ other than your home directory.

#  In other words, the Bash command is passed as a quoted line
#+ to the remote shell, which executes it on the remote machine.
#  In this case, sshd does  ' bash -c "ls -l" '   on your behalf.

#  For information on topics such as not having to enter a
#+ password/passphrase for every command-line, see
#+    man ssh
#+    man ssh-keygen
#+    man sshd_config.

exit 0</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<DIV class=CAUTION>
<P></P>
<TABLE class=CAUTION border=0 width="90%">
<TBODY>
<TR>
<TD vAlign=top width=25 align=middle><IMG hspace=5 alt=Caution src="http://tldp.org/LDP/abs/images/caution.gif"></TD>
<TD vAlign=top align=left>
<P>Within a loop, <B class=COMMAND>ssh</B> may cause unexpected behavior. According to a <A href="http://groups-beta.google.com/group/comp.unix.shell/msg/dcb446b5fff7d230" target=_top>Usenet post</A> in the comp.unix shell archives, <B class=COMMAND>ssh</B> inherits the loop's <TT class=FILENAME>stdin</TT>. To remedy this, pass <B class=COMMAND>ssh</B> either the <TT class=OPTION>-n</TT> or <TT class=OPTION>-f</TT> option.</P>
<P>Thanks, Jason Bechtel, for pointing this out.</P></TD></TR></TBODY></TABLE></DIV>
<DT><A name=SCPREF></A><B class=COMMAND>scp</B> 
<DD>
<P><TT class=REPLACEABLE><I>Secure copy</I></TT>, similar in function to <B class=COMMAND>rcp</B>, copies files between two different networked machines, but does so using authentication, and with a security level similar to <B class=COMMAND>ssh</B>.</P></DD></DL></DIV>
<P></P>
<DIV class=VARIABLELIST>
<P><B><A name=COMMLOCAL1></A>Local Network</B></P>
<DL>
<DT><A name=WRITEREF></A><B class=COMMAND>write</B> 
<DD>
<P>This is a utility for terminal-to-terminal communication. It allows sending lines from your terminal (console or <I class=FIRSTTERM>xterm</I>) to that of another user. The <A href="http://tldp.org/LDP/abs/html/abs-guide.html#MESGREF">mesg</A> command may, of course, be used to disable write access to a terminal</P>
<P>Since <B class=COMMAND>write</B> is interactive, it would not normally find use in a script.</P>
<DT><A name=NETCONFIGREF></A><B class=COMMAND>netconfig</B> 
<DD>
<P>A command-line utility for configuring a network adapter (using <I class=FIRSTTERM>DHCP</I>). This command is native to Red Hat centric Linux distros.</P></DD></DL></DIV>
<P></P>
<DIV class=VARIABLELIST>
<P><B><A name=COMMMAIL1></A>Mail</B></P>
<DL>
<DT><B class=COMMAND>mail</B> 
<DD>
<P>Send or read e-mail messages.</P>
<P>This stripped-down command-line mail client works fine as a command embedded in a script.</P>
<DIV class=EXAMPLE><A name=SELFMAILER></A>
<P><B>Example 16-45. A script that mails itself</B></P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/sh
# self-mailer.sh: Self-mailing script

adr=${1:-`whoami`}     # Default to current user, if not specified.
#  Typing 'self-mailer.sh wiseguy@superdupergenius.com'
#+ sends this script to that addressee.
#  Just 'self-mailer.sh' (no argument) sends the script
#+ to the person invoking it, for example, bozo@localhost.localdomain.
#
#  For more on the ${parameter:-default} construct,
#+ see the "Parameter Substitution" section
#+ of the "Variables Revisited" chapter.

# ============================================================================
  cat $0 | mail -s "Script \"`basename $0`\" has mailed itself to you." "$adr"
# ============================================================================

# --------------------------------------------
#  Greetings from the self-mailing script.
#  A mischievous person has run this script,
#+ which has caused it to mail itself to you.
#  Apparently, some people have nothing better
#+ to do with their time.
# --------------------------------------------

echo "At `date`, script \"`basename $0`\" mailed to "$adr"."

exit 0

#  Note that the "mailx" command (in "send" mode) may be substituted
#+ for "mail" ... but with somewhat different options.</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<DT><A name=MAILTOREF></A><B class=COMMAND>mailto</B> 
<DD>
<P>Similar to the <B class=COMMAND>mail</B> command, <B class=COMMAND>mailto</B> sends e-mail messages from the command-line or in a script. However, <B class=COMMAND>mailto</B> also permits sending MIME (multimedia) messages.</P>
<DT><A name=MAILSTATSREF></A><B class=COMMAND>mailstats</B> 
<DD>
<P>Show <I class=FIRSTTERM>mail statistics</I>. This command may be invoked only by <I class=FIRSTTERM>root</I>.</P>
<P>
<TABLE border=1 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=SCREEN><TT class=PROMPT>root# </TT><TT class=USERINPUT><B>mailstats</B></TT>
<TT class=COMPUTEROUTPUT>Statistics from Tue Jan  1 20:32:08 2008
  M   msgsfr  bytes_from   msgsto    bytes_to  msgsrej msgsdis msgsqur  Mailer
  4     1682      24118K        0          0K        0       0       0  esmtp
  9      212        640K     1894      25131K        0       0       0  local
 =====================================================================
  T     1894      24758K     1894      25131K        0       0       0
  C      414                    0</TT>
	      </PRE></FONT></TD></TR></TBODY></TABLE></P>
<DT><A name=VACATIONREF></A><B class=COMMAND>vacation</B> 
<DD>
<P>This utility automatically replies to e-mails that the intended recipient is on vacation and temporarily unavailable. It runs on a network, in conjunction with <B class=COMMAND>sendmail</B>, and is not applicable to a dial-up POPmail account.</P></DD></DL></DIV>