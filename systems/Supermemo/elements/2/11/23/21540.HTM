<H1 class=SECT1><A name=FTO></A>7.2. File test operators</H1>
<P></P>
<DIV class=VARIABLELIST>
<P><B><A name=RTIF></A>Returns true if...</B></P>
<DL>
<DT><SPAN class=TOKEN>-e</SPAN> 
<DD>
<P>file exists</P>
<DT><SPAN class=TOKEN>-a</SPAN> 
<DD>
<P>file exists</P>
<P>This is identical in effect to <SPAN class=TOKEN>-e</SPAN>. It has been <SPAN class=QUOTE>"deprecated,"</SPAN> <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FTN.AEN3289" name=AEN3289><SPAN class=footnote>[34]</SPAN></A> and its use is discouraged.</P>
<DT><A name=REGULARFILE></A><SPAN class=TOKEN>-f</SPAN> 
<DD>
<P>file is a <TT class=REPLACEABLE><I>regular</I></TT> file (not a directory or <A href="http://tldp.org/LDP/abs/html/abs-guide.html#DEVFILEREF">device file</A>)</P>
<DT><SPAN class=TOKEN>-s</SPAN> 
<DD>
<P>file is not zero size</P>
<DT><SPAN class=TOKEN>-d</SPAN> 
<DD>
<P>file is a directory</P>
<DT><SPAN class=TOKEN>-b</SPAN> 
<DD>
<P>file is a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#BLOCKDEVREF">block device</A></P>
<P><A name=BLOCKDEVTEST></A></P>
<DT><SPAN class=TOKEN>-c</SPAN> 
<DD>
<P><A name=CHARDEVTEST></A>file is a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#CHARDEVREF">character device</A></P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>device0="/dev/sda2"    # /   (root directory)
if [ -b "$device0" ]
then
  echo "$device0 is a block device."
fi

# /dev/sda2 is a block device.



device1="/dev/ttyS1"   # PCMCIA modem card.
if [ -c "$device1" ]
then
  echo "$device1 is a character device."
fi

# /dev/ttyS1 is a character device.</PRE></FONT></TD></TR></TBODY></TABLE></P>
<DT><SPAN class=TOKEN>-p</SPAN> 
<DD>
<P>file is a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#PIPEREF">pipe</A></P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>function show_input_type()
{
   [ -p /dev/fd/0 ] &amp;&amp; echo PIPE || echo STDIN
}

show_input_type "Input"                           # STDIN
echo "Input" | show_input_type                    # PIPE

# This example courtesy of Carl Anderson.</PRE></FONT></TD></TR></TBODY></TABLE></P>
<DT><SPAN class=TOKEN>-h</SPAN> 
<DD>
<P>file is a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#SYMLINKREF">symbolic link</A></P>
<DT><SPAN class=TOKEN>-L</SPAN> 
<DD>
<P>file is a symbolic link</P>
<DT><SPAN class=TOKEN>-S</SPAN> 
<DD>
<P>file is a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#SOCKETREF">socket</A></P>
<DT><SPAN class=TOKEN>-t</SPAN> 
<DD>
<P><A name=TERMTEST></A>file (<A href="http://tldp.org/LDP/abs/html/abs-guide.html#FDREF">descriptor</A>) is associated with a terminal device</P>
<P>This test option <A href="http://tldp.org/LDP/abs/html/abs-guide.html#II2TEST">may be used to check</A> whether the <TT class=FILENAME>stdin</TT> <TT class=USERINPUT><B>[ -t 0 ]</B></TT> or <TT class=FILENAME>stdout</TT> <TT class=USERINPUT><B>[ -t 1 ]</B></TT> in a given script is a terminal.</P>
<DT><SPAN class=TOKEN>-r</SPAN> 
<DD>
<P>file has read permission (<EM>for the user running the test</EM>)</P>
<DT><SPAN class=TOKEN>-w</SPAN> 
<DD>
<P>file has write permission (for the user running the test)</P>
<DT><SPAN class=TOKEN>-x</SPAN> 
<DD>
<P>file has execute permission (for the user running the test)</P>
<DT><SPAN class=TOKEN>-g</SPAN> 
<DD>
<P>set-group-id (sgid) flag set on file or directory</P>
<P>If a directory has the <TT class=REPLACEABLE><I>sgid</I></TT> flag set, then a file created within that directory belongs to the group that owns the directory, not necessarily to the group of the user who created the file. This may be useful for a directory shared by a workgroup.</P>
<DT><SPAN class=TOKEN>-u</SPAN> 
<DD>
<P><A name=SUIDREF></A></P>
<P>set-user-id (suid) flag set on file</P>
<P>A binary owned by <I class=FIRSTTERM>root</I> with <TT class=REPLACEABLE><I>set-user-id</I></TT> flag set runs with <I class=FIRSTTERM>root</I> privileges, even when an ordinary user invokes it. <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FTN.AEN3400" name=AEN3400><SPAN class=footnote>[35]</SPAN></A> This is useful for executables (such as <B class=COMMAND>pppd</B> and <B class=COMMAND>cdrecord</B>) that need to access system hardware. Lacking the <I class=FIRSTTERM>suid</I> flag, these binaries could not be invoked by a <I class=FIRSTTERM>non-root</I> user.</P>
<P>
<TABLE border=1 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=SCREEN>	      <TT class=COMPUTEROUTPUT>-rwsr-xr-t    1 root       178236 Oct  2  2000 /usr/sbin/pppd</TT>
	      </PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>A file with the <TT class=REPLACEABLE><I>suid</I></TT> flag set shows an <I class=FIRSTTERM>s</I> in its permissions.</P>
<DT><SPAN class=TOKEN>-k</SPAN> 
<DD>
<P><TT class=REPLACEABLE><I>sticky bit</I></TT> set</P>
<P>Commonly known as the <I class=FIRSTTERM>sticky bit,</I> the <I class=FIRSTTERM>save-text-mode</I> flag is a special type of file permission. If a file has this flag set, that file will be kept in cache memory, for quicker access. <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FTN.AEN3423" name=AEN3423><SPAN class=footnote>[36]</SPAN></A> If set on a directory, it restricts write permission. Setting the sticky bit adds a <I class=FIRSTTERM>t</I> to the permissions on the file or directory listing. This restricts altering or deleting specific files in that directory to the owner of those files.</P>
<P>
<TABLE border=1 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=SCREEN>	      <TT class=COMPUTEROUTPUT>drwxrwxrwt    7 root         1024 May 19 21:26 tmp/</TT>
	      </PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>If a user does not own a directory that has the sticky bit set, but has write permission in that directory, she can only delete those files that she owns in it. This keeps users from inadvertently overwriting or deleting each other's files in a publicly accessible directory, such as <TT class=FILENAME>/tmp</TT>. (The <I class=FIRSTTERM>owner</I> of the directory or <I class=FIRSTTERM>root</I> can, of course, delete or rename files there.)</P>
<DT><SPAN class=TOKEN>-O</SPAN> 
<DD>
<P>you are owner of file</P>
<DT><SPAN class=TOKEN>-G</SPAN> 
<DD>
<P>group-id of file same as yours</P>
<DT><SPAN class=TOKEN>-N</SPAN> 
<DD>
<P>file modified since it was last read</P>
<DT><SPAN class=TOKEN>f1 -nt f2</SPAN> 
<DD>
<P>file <TT class=REPLACEABLE><I>f1</I></TT> is newer than <TT class=REPLACEABLE><I>f2</I></TT></P>
<DT><SPAN class=TOKEN>f1 -ot f2</SPAN> 
<DD>
<P>file <TT class=REPLACEABLE><I>f1</I></TT> is older than <TT class=REPLACEABLE><I>f2</I></TT></P>
<DT><SPAN class=TOKEN>f1 -ef f2</SPAN> 
<DD>
<P>files <TT class=REPLACEABLE><I>f1</I></TT> and <TT class=REPLACEABLE><I>f2</I></TT> are hard links to the same file</P>
<DT><SPAN class=TOKEN>!</SPAN> 
<DD>
<P><SPAN class=QUOTE>"not"</SPAN> -- reverses the sense of the tests above (returns true if condition absent).</P></DD></DL></DIV>
<DIV class=EXAMPLE><A name=BROKENLINK></A>
<P><B>Example 7-4. Testing for broken links</B></P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# broken-link.sh
# Written by Lee bigelow &lt;ligelowbee@yahoo.com&gt;
# Used in ABS Guide with permission.

#  A pure shell script to find dead symlinks and output them quoted
#+ so they can be fed to xargs and dealt with :)
#+ eg. sh broken-link.sh /somedir /someotherdir|xargs rm
#
#  This, however, is a better method:
#
#  find "somedir" -type l -print0|\
#  xargs -r0 file|\
#  grep "broken symbolic"|
#  sed -e 's/^\|: *broken symbolic.*$/"/g'
#
#+ but that wouldn't be pure Bash, now would it.
#  Caution: beware the /proc file system and any circular links!
################################################################


#  If no args are passed to the script set directories-to-search 
#+ to current directory.  Otherwise set the directories-to-search 
#+ to the args passed.
######################

[ $# -eq 0 ] &amp;&amp; directorys=`pwd` || directorys=$@


#  Setup the function linkchk to check the directory it is passed 
#+ for files that are links and don't exist, then print them quoted.
#  If one of the elements in the directory is a subdirectory then 
#+ send that subdirectory to the linkcheck function.
##########

linkchk () {
    for element in $1/*; do
      [ -h "$element" -a ! -e "$element" ] &amp;&amp; echo \"$element\"
      [ -d "$element" ] &amp;&amp; linkchk $element
    # Of course, '-h' tests for symbolic link, '-d' for directory.
    done
}

#  Send each arg that was passed to the script to the linkchk() function
#+ if it is a valid directoy.  If not, then print the error message
#+ and usage info.
##################
for directory in $directorys; do
    if [ -d $directory ]
	then linkchk $directory
	else 
	    echo "$directory is not a directory"
	    echo "Usage: $0 dir1 dir2 ..."
    fi
done

exit $?</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<P><A href="http://tldp.org/LDP/abs/html/abs-guide.html#COOKIES">Example 31-1</A>, <A href="http://tldp.org/LDP/abs/html/abs-guide.html#BINGREP">Example 11-8</A>, <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FILEINFO">Example 11-3</A>, <A href="http://tldp.org/LDP/abs/html/abs-guide.html#RAMDISK">Example 31-3</A>, and <A href="http://tldp.org/LDP/abs/html/abs-guide.html#MAILFORMAT">Example A-1</A> also illustrate uses of the file test operators.