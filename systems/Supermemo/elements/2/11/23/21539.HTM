<H1 class=SECT1><A name=TESTCONSTRUCTS></A>7.1. Test Constructs</H1>
<P><A name=TESTCONSTRUCTS1></A></P>
<P></P>
<UL>
<LI>
<P>An <B class=COMMAND>if/then</B> construct tests whether the <A href="http://tldp.org/LDP/abs/html/abs-guide.html#EXITSTATUSREF">exit status</A> of a list of commands is <SPAN class=RETURNVALUE>0</SPAN> (since 0 means <SPAN class=QUOTE>"success"</SPAN> by UNIX convention), and if so, executes one or more commands.</P>
<LI>
<P>There exists a dedicated command called <B class=COMMAND>[</B> (<A href="http://tldp.org/LDP/abs/html/abs-guide.html#LEFTBRACKET">left bracket</A> special character). It is a synonym for <B class=COMMAND>test</B>, and a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#BUILTINREF">builtin</A> for efficiency reasons. This command considers its arguments as comparison expressions or file tests and returns an exit status corresponding to the result of the comparison (0 for true, 1 for false).</P>
<LI>
<P>With version 2.02, Bash introduced the <A href="http://tldp.org/LDP/abs/html/abs-guide.html#DBLBRACKETS">[[ ... ]]</A> <I class=FIRSTTERM>extended test command</I>, which performs comparisons in a manner more familiar to programmers from other languages. Note that <B class=COMMAND>[[</B> is a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#KEYWORDREF">keyword</A>, not a command.</P>
<P>Bash sees <TT class=USERINPUT><B>[[ $a -lt $b ]]</B></TT> as a single element, which returns an exit status.</P>
<LI>
<P><A name=DBLPARENSTST></A></P>
<P>The <A href="http://tldp.org/LDP/abs/html/abs-guide.html#DBLPARENS">(( ... ))</A> and <A href="http://tldp.org/LDP/abs/html/abs-guide.html#LETREF">let ...</A> constructs return an <A href="http://tldp.org/LDP/abs/html/abs-guide.html#EXITSTATUSREF">exit status</A>, <EM>according to whether the arithmetic expressions they evaluate expand to a non-zero value</EM>. These <A href="http://tldp.org/LDP/abs/html/abs-guide.html#ARITHEXPREF">arithmetic-expansion</A> constructs may therefore be used to perform <A href="http://tldp.org/LDP/abs/html/abs-guide.html#ICOMPARISON1">arithmetic comparisons</A>.</P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>(( 0 &amp;&amp; 1 ))                 # Logical AND
echo $?     # 1     ***
# And so ...
let "num = (( 0 &amp;&amp; 1 ))"
echo $num   # 0
# But ...
let "num = (( 0 &amp;&amp; 1 ))"
echo $?     # 1     ***


(( 200 || 11 ))              # Logical OR
echo $?     # 0     ***
# ...
let "num = (( 200 || 11 ))"
echo $num   # 1
let "num = (( 200 || 11 ))"
echo $?     # 0     ***


(( 200 | 11 ))               # Bitwise OR
echo $?                      # 0     ***
# ...
let "num = (( 200 | 11 ))"
echo $num                    # 203
let "num = (( 200 | 11 ))"
echo $?                      # 0     ***

# The "let" construct returns the same exit status
#+ as the double-parentheses arithmetic expansion.</PRE></FONT></TD></TR></TBODY></TABLE></P>
<DIV class=CAUTION>
<P></P>
<TABLE class=CAUTION border=0 width="90%">
<TBODY>
<TR>
<TD vAlign=top width=25 align=middle><IMG hspace=5 alt=Caution src="http://tldp.org/LDP/abs/images/caution.gif"></TD>
<TD vAlign=top align=left>
<P><A name=ARXS></A>Again, note that the <I class=FIRSTTERM>exit status</I> of an arithmetic expression is <EM>not</EM> an error value. 
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>var=-2 &amp;&amp; (( var+=2 ))
echo $?                   # 1

var=-2 &amp;&amp; (( var+=2 )) &amp;&amp; echo $var
                          # Will not echo $var!</PRE></FONT></TD></TR></TBODY></TABLE></P></TD></TR></TBODY></TABLE></DIV>
<LI>
<P><A name=IFGREPREF></A></P>
<P>An <B class=COMMAND>if</B> can test any command, not just conditions enclosed within brackets.</P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>if cmp a b &amp;&gt; /dev/null  # Suppress output.
then echo "Files a and b are identical."
else echo "Files a and b differ."
fi

# The very useful "if-grep" construct:
# ----------------------------------- 
if grep -q Bash file
  then echo "File contains at least one occurrence of Bash."
fi

word=Linux
letter_sequence=inu
if echo "$word" | grep -q "$letter_sequence"
# The "-q" option to grep suppresses output.
then
  echo "$letter_sequence found in $word"
else
  echo "$letter_sequence not found in $word"
fi


if COMMAND_WHOSE_EXIT_STATUS_IS_0_UNLESS_ERROR_OCCURRED
  then echo "Command succeeded."
  else echo "Command failed."
fi</PRE></FONT></TD></TR></TBODY></TABLE></P>
<LI>
<P><EM>These last two examples courtesy of St&#233;phane Chazelas.</EM></P></LI></UL>
<DIV class=EXAMPLE><A name=EX10></A>
<P><B>Example 7-1. What is truth?</B></P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash

#  Tip:
#  If you're unsure how a certain condition might evaluate,
#+ test it in an if-test.

echo

echo "Testing \"0\""
if [ 0 ]      # zero
then
  echo "0 is true."
else          # Or else ...
  echo "0 is false."
fi            # 0 is true.

echo

echo "Testing \"1\""
if [ 1 ]      # one
then
  echo "1 is true."
else
  echo "1 is false."
fi            # 1 is true.

echo

echo "Testing \"-1\""
if [ -1 ]     # minus one
then
  echo "-1 is true."
else
  echo "-1 is false."
fi            # -1 is true.

echo

echo "Testing \"NULL\""
if [ ]        # NULL (empty condition)
then
  echo "NULL is true."
else
  echo "NULL is false."
fi            # NULL is false.

echo

echo "Testing \"xyz\""
if [ xyz ]    # string
then
  echo "Random string is true."
else
  echo "Random string is false."
fi            # Random string is true.

echo

echo "Testing \"\$xyz\""
if [ $xyz ]   # Tests if $xyz is null, but...
              # it's only an uninitialized variable.
then
  echo "Uninitialized variable is true."
else
  echo "Uninitialized variable is false."
fi            # Uninitialized variable is false.

echo

echo "Testing \"-n \$xyz\""
if [ -n "$xyz" ]            # More pedantically correct.
then
  echo "Uninitialized variable is true."
else
  echo "Uninitialized variable is false."
fi            # Uninitialized variable is false.

echo


xyz=          # Initialized, but set to null value.

echo "Testing \"-n \$xyz\""
if [ -n "$xyz" ]
then
  echo "Null variable is true."
else
  echo "Null variable is false."
fi            # Null variable is false.


echo


# When is "false" true?

echo "Testing \"false\""
if [ "false" ]              #  It seems that "false" is just a string ...
then
  echo "\"false\" is true." #+ and it tests true.
else
  echo "\"false\" is false."
fi            # "false" is true.

echo

echo "Testing \"\$false\""  # Again, uninitialized variable.
if [ "$false" ]
then
  echo "\"\$false\" is true."
else
  echo "\"\$false\" is false."
fi            # "$false" is false.
              # Now, we get the expected result.

#  What would happen if we tested the uninitialized variable "$true"?

echo

exit 0</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<DIV class=FORMALPARA>
<P><B>Exercise. </B>Explain the behavior of <A href="http://tldp.org/LDP/abs/html/abs-guide.html#EX10">Example 7-1</A>, above.</P></DIV>
<P><A name=ELSEREF></A>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>if [ condition-true ]
then
   command 1
   command 2
   ...
else  # Or else ...
      # Adds default code block executing if original condition tests false.
   command 3
   command 4
   ...
fi</PRE></FONT></TD></TR></TBODY></TABLE></P>
<DIV class=NOTE>
<P></P>
<TABLE class=NOTE border=0 width="100%">
<TBODY>
<TR>
<TD vAlign=top width=25 align=middle><IMG hspace=5 alt=Note src="http://tldp.org/LDP/abs/images/note.gif"></TD>
<TD vAlign=top align=left>
<P>When <I class=FIRSTTERM>if</I> and <I class=FIRSTTERM>then</I> are on same line in a condition test, a semicolon must terminate the <I class=FIRSTTERM>if</I> statement. Both <I class=FIRSTTERM>if</I> and <I class=FIRSTTERM>then</I> are <A href="http://tldp.org/LDP/abs/html/abs-guide.html#KEYWORDREF">keywords</A>. Keywords (or commands) begin statements, and before a new statement on the same line begins, the old one must terminate.</P>
<P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>if [ -x "$filename" ]; then</PRE></FONT></TD></TR></TBODY></TABLE></P></TD></TR></TBODY></TABLE></DIV>
<P></P>
<DIV class=VARIABLELIST>
<P><B><A name=ELIFREF1></A>Else if and elif</B></P>
<DL>
<DT><SPAN class=TOKEN>elif</SPAN> 
<DD>
<P><TT class=USERINPUT><B>elif</B></TT> is a contraction for <I class=FIRSTTERM>else if</I>. The effect is to nest an inner <SPAN class=TOKEN>if/then</SPAN> construct within an outer one.</P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>if [ condition1 ]
then
   command1
   command2
   command3
elif [ condition2 ]
# Same as else if
then
   command4
   command5
else
   default-command
fi</PRE></FONT></TD></TR></TBODY></TABLE></P></DD></DL></DIV>
<P><A name=IFREF2></A>The <TT class=USERINPUT><B>if test condition-true</B></TT> construct is the exact equivalent of <TT class=USERINPUT><B>if [ condition-true ]</B></TT>. As it happens, the left bracket, <B class=COMMAND>[</B> , is a <I class=FIRSTTERM>token</I> <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FTN.AEN3140" name=AEN3140><SPAN class=footnote>[33]</SPAN></A> which invokes the <B class=COMMAND>test</B> command. The closing right bracket, <B class=COMMAND>]</B> , in an if/test should not therefore be strictly necessary, however newer versions of Bash require it.</P>
<P><A name=TTESTREF></A></P>
<DIV class=NOTE>
<P></P>
<TABLE class=NOTE border=0 width="100%">
<TBODY>
<TR>
<TD vAlign=top width=25 align=middle><IMG hspace=5 alt=Note src="http://tldp.org/LDP/abs/images/note.gif"></TD>
<TD vAlign=top align=left>
<P>The <B class=COMMAND>test</B> command is a Bash <A href="http://tldp.org/LDP/abs/html/abs-guide.html#BUILTINREF">builtin</A> which tests file types and compares strings. Therefore, in a Bash script, <B class=COMMAND>test</B> does <EM>not</EM> call the external <TT class=FILENAME>/usr/bin/test</TT> binary, which is part of the <I class=FIRSTTERM>sh-utils</I> package. Likewise, <B class=COMMAND>[</B> does not call <TT class=FILENAME>/usr/bin/[</TT>, which is linked to <TT class=FILENAME>/usr/bin/test</TT>.</P>
<P>
<TABLE border=1 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=SCREEN><TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>type test</B></TT>
<TT class=COMPUTEROUTPUT>test is a shell builtin</TT>
<TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>type '['</B></TT>
<TT class=COMPUTEROUTPUT>[ is a shell builtin</TT>
<TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>type '[['</B></TT>
<TT class=COMPUTEROUTPUT>[[ is a shell keyword</TT>
<TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>type ']]'</B></TT>
<TT class=COMPUTEROUTPUT>]] is a shell keyword</TT>
<TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>type ']'</B></TT>
<TT class=COMPUTEROUTPUT>bash: type: ]: not found</TT>
	      </PRE></FONT></TD></TR></TBODY></TABLE></P>
<P><A name=USRBINTEST></A></P>
<P>If, for some reason, you wish to use <TT class=FILENAME>/usr/bin/test</TT> in a Bash script, then specify it by full pathname.</P></TD></TR></TBODY></TABLE></DIV>
<DIV class=EXAMPLE><A name=EX11></A>
<P><B>Example 7-2. Equivalence of <I class=FIRSTTERM>test</I>, <TT class=FILENAME>/usr/bin/test</TT>, <SPAN class=TOKEN>[ ]</SPAN>, and <TT class=FILENAME>/usr/bin/[</TT></B></P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash

echo

if test -z "$1"
then
  echo "No command-line arguments."
else
  echo "First command-line argument is $1."
fi

echo

if /usr/bin/test -z "$1"      # Equivalent to "test" builtin.
#  ^^^^^^^^^^^^^              # Specifying full pathname.
then
  echo "No command-line arguments."
else
  echo "First command-line argument is $1."
fi

echo

if [ -z "$1" ]                # Functionally identical to above code blocks.
#   if [ -z "$1"                should work, but...
#+  Bash responds to a missing close-bracket with an error message.
then
  echo "No command-line arguments."
else
  echo "First command-line argument is $1."
fi

echo


if /usr/bin/[ -z "$1" ]       # Again, functionally identical to above.
# if /usr/bin/[ -z "$1"       # Works, but gives an error message.
#                             # Note:
#                               This has been fixed in Bash, version 3.x.
then
  echo "No command-line arguments."
else
  echo "First command-line argument is $1."
fi

echo

exit 0</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<TABLE class=SIDEBAR border=1 cellPadding=5>
<TBODY>
<TR>
<TD>
<DIV class=SIDEBAR><A name=AEN3206></A>
<P></P>
<P><A name=DBLBRACKETS></A>The <SPAN class=TOKEN>[[ ]]</SPAN> construct is the more versatile Bash version of <SPAN class=TOKEN>[ ]</SPAN>. This is the <I class=FIRSTTERM>extended test command</I>, adopted from <I class=FIRSTTERM>ksh88</I>.</P>
<P>* * *</P>
<P>No filename expansion or word splitting takes place between <SPAN class=TOKEN>[[</SPAN> and <SPAN class=TOKEN>]]</SPAN>, but there is parameter expansion and command substitution. 
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>file=/etc/passwd

if [[ -e $file ]]
then
  echo "Password file exists."
fi</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>Using the <B class=COMMAND>[[ ... ]]</B> test construct, rather than <B class=COMMAND>[ ... ]</B> can prevent many logic errors in scripts. For example, the <SPAN class=TOKEN>&amp;&amp;</SPAN>, <SPAN class=TOKEN>||</SPAN>, <SPAN class=TOKEN>&lt;</SPAN>, and <SPAN class=TOKEN>&gt;</SPAN> operators work within a <SPAN class=TOKEN>[[ ]]</SPAN> test, despite giving an error within a <SPAN class=TOKEN>[ ]</SPAN> construct.</P>
<P><A name=DBLBRAEV></A></P>
<P><I class=FIRSTTERM>Arithmetic evaluation</I> of octal / hexadecimal constants takes place automatically within a <SPAN class=TOKEN>[[ ... ]]</SPAN> construct. 
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING># [[ Octal and hexadecimal evaluation ]]
# Thank you, Moritz Gronbach, for pointing this out.


decimal=15
octal=017   # = 15 (decimal)
hex=0x0f    # = 15 (decimal)

if [ "$decimal" -eq "$octal" ]
then
  echo "$decimal equals $octal"
else
  echo "$decimal is not equal to $octal"       # 15 is not equal to 017
fi      # Doesn't evaluate within [ single brackets ]!


if [[ "$decimal" -eq "$octal" ]]
then
  echo "$decimal equals $octal"                # 15 equals 017
else
  echo "$decimal is not equal to $octal"
fi      # Evaluates within [[ double brackets ]]!

if [[ "$decimal" -eq "$hex" ]]
then
  echo "$decimal equals $hex"                  # 15 equals 0x0f
else
  echo "$decimal is not equal to $hex"
fi      # [[ $hexadecimal ]] also evaluates!</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P></P></DIV></TD></TR></TBODY></TABLE>
<DIV class=NOTE>
<P></P>
<TABLE class=NOTE border=0 width="100%">
<TBODY>
<TR>
<TD vAlign=top width=25 align=middle><IMG hspace=5 alt=Note src="http://tldp.org/LDP/abs/images/note.gif"></TD>
<TD vAlign=top align=left>
<P>Following an <B class=COMMAND>if</B>, neither the <B class=COMMAND>test</B> command nor the test brackets ( [ ] or [[ ]] ) are strictly necessary. 
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>dir=/home/bozo

if cd "$dir" 2&gt;/dev/null; then   # "2&gt;/dev/null" hides error message.
  echo "Now in $dir."
else
  echo "Can't change to $dir."
fi</PRE></FONT></TD></TR></TBODY></TABLE>The "if COMMAND" construct returns the exit status of COMMAND.</P>
<P>Similarly, a condition within test brackets may stand alone without an <B class=COMMAND>if</B>, when used in combination with a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#LISTCONSREF">list construct</A>. 
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>var1=20
var2=22
[ "$var1" -ne "$var2" ] &amp;&amp; echo "$var1 is not equal to $var2"

home=/home/bozo
[ -d "$home" ] || echo "$home directory does not exist."</PRE></FONT></TD></TR></TBODY></TABLE></P></TD></TR></TBODY></TABLE></DIV>
<P><A name=DBLPRX></A>The <A href="http://tldp.org/LDP/abs/html/abs-guide.html#DBLPARENS">(( )) construct</A> expands and evaluates an arithmetic expression. If the expression evaluates as zero, it returns an <A href="http://tldp.org/LDP/abs/html/abs-guide.html#EXITSTATUSREF">exit status</A> of <SPAN class=RETURNVALUE>1</SPAN>, or <SPAN class=QUOTE>"false"</SPAN>. A non-zero expression returns an exit status of <SPAN class=RETURNVALUE>0</SPAN>, or <SPAN class=QUOTE>"true"</SPAN>. This is in marked contrast to using the <B class=COMMAND>test</B> and <SPAN class=TOKEN>[ ]</SPAN> constructs previously discussed.</P>
<DIV class=EXAMPLE><A name=ARITHTESTS></A>
<P><B>Example 7-3. Arithmetic Tests using <SPAN class=TOKEN>(( ))</SPAN></B></P>
<TABLE border=0 width="100%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# arith-tests.sh
# Arithmetic tests.

# The (( ... )) construct evaluates and tests numerical expressions.
# Exit status opposite from [ ... ] construct!

(( 0 ))
echo "Exit status of \"(( 0 ))\" is $?."         # 1

(( 1 ))
echo "Exit status of \"(( 1 ))\" is $?."         # 0

(( 5 &gt; 4 ))                                      # true
echo "Exit status of \"(( 5 &gt; 4 ))\" is $?."     # 0

(( 5 &gt; 9 ))                                      # false
echo "Exit status of \"(( 5 &gt; 9 ))\" is $?."     # 1

(( 5 == 5 ))                                     # true
echo "Exit status of \"(( 5 == 5 ))\" is $?."    # 0
# (( 5 = 5 ))  gives an error message.

(( 5 - 5 ))                                      # 0
echo "Exit status of \"(( 5 - 5 ))\" is $?."     # 1

(( 5 / 4 ))                                      # Division o.k.
echo "Exit status of \"(( 5 / 4 ))\" is $?."     # 0

(( 1 / 2 ))                                      # Division result &lt; 1.
echo "Exit status of \"(( 1 / 2 ))\" is $?."     # Rounded off to 0.
                                                 # 1

(( 1 / 0 )) 2&gt;/dev/null                          # Illegal division by 0.
#           ^^^^^^^^^^^
echo "Exit status of \"(( 1 / 0 ))\" is $?."     # 1

# What effect does the "2&gt;/dev/null" have?
# What would happen if it were removed?
# Try removing it, then rerunning the script.

# ======================================= #

# (( ... )) also useful in an if-then test.

var1=5
var2=4

if (( var1 &gt; var2 ))
then #^      ^      Note: Not $var1, $var2. Why?
  echo "$var1 is greater than $var2"
fi     # 5 is greater than 4

exit 0</PRE></FONT></TD></TR></TBODY></TABLE></DIV>