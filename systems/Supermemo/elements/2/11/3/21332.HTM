# The ``scripts/Kbuild.include'' 
<P></P>
<P>####<BR># kbuild: Generic definitions </P>
<P></P>
<P><FONT class=extract># Convenient variables<BR>comma&nbsp;&nbsp; := ,<BR>squote&nbsp; := '<BR>empty&nbsp;&nbsp; :=<BR>space&nbsp;&nbsp; := $(empty) $(empty)</FONT></P>
<P>###<BR><FONT class=extract># Name of target with a '.' as filename prefix. foo/bar.o =&gt; foo/.bar.o<BR>dot-target =$(dir $@).$(notdir $@)</FONT></P>
<P>###<BR><FONT class=extract># The temporary file to save gcc -MD generated dependencies must not<BR># contain a comma<BR>depfile = $(subst $(comma),_,$(dot-target).d)</FONT></P>
<P>###<BR><FONT class=extract># filename of target with directory and extension stripped<BR>basetarget = $(basename $(notdir $@))</FONT></P>
<P>###<BR><FONT class=extract># filename of first prerequisite with directory and extension stripped<BR>baseprereq = $(basename $(notdir $&lt;))</FONT></P>
<P>###<BR><FONT class=extract># Escape single quote for use in echo statements<BR>escsq = $(subst $(squote),'\$(squote)',$1)</FONT></P>
<P>###<BR><FONT class=extract># Easy method for doing a status message<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; kecho := :<BR>&nbsp;quiet_kecho := echo<BR>silent_kecho := :<BR>kecho := $($(quiet)kecho)</FONT></P>
<P>###<BR><FONT class=extract># filechk is used to check if the content of a generated file is updated.<BR># Sample usage:<BR># define filechk_sample<BR>#&nbsp;echo $KERNELRELEASE<BR># endef<BR># version.h : Makefile<BR>#&nbsp;$(call filechk,sample)<BR># The rule defined shall write to stdout the content of the new file.<BR># The existing file will be compared with the new one.<BR># - If no file exist it is created<BR># - If the content differ the new file is used<BR># - If they are equal no change, and no timestamp update<BR># - stdin is piped in from the first prerequisite ($&lt;) so one has<BR>#&nbsp;&nbsp; to specify a valid file as first prerequisite (often the kbuild file)<BR>define filechk<BR>&nbsp;$(Q)set -e;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;$(kecho) '&nbsp; CHK&nbsp;&nbsp;&nbsp;&nbsp; $@'; \<BR>&nbsp;mkdir -p $(dir $@);&nbsp;&nbsp;&nbsp;\<BR>&nbsp;$(filechk_$(1)) &lt; $&lt; &gt; $@.tmp;&nbsp;&nbsp;\<BR>&nbsp;if [ -r $@ ] &amp;&amp; cmp -s $@ $@.tmp; then \<BR>&nbsp;&nbsp;rm -f $@.tmp;&nbsp;&nbsp;\<BR>&nbsp;else&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;$(kecho) '&nbsp; UPD&nbsp;&nbsp;&nbsp;&nbsp; $@';&nbsp;\<BR>&nbsp;&nbsp;mv -f $@.tmp $@;&nbsp;&nbsp;\<BR>&nbsp;fi<BR>endef</FONT></P>
<P><FONT class=extract>######<BR></FONT><FONT class=extract># gcc support functions<BR># See documentation in Documentation/kbuild/makefiles.txt</FONT></P>
<P><FONT class=extract># cc-cross-prefix<BR># Usage: CROSS_COMPILE := $(call cc-cross-prefix, m68k-linux-gnu- m68k-linux-)<BR># Return first prefix where a prefix$(CC) is found in PATH.<BR># If no $(CC) found in PATH with listed prefixes return nothing<BR>cc-cross-prefix =&nbsp; \<BR>&nbsp;$(word 1, $(foreach c,$(1),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp;$(shell set -e;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp;if (which $(strip $(c))$(CC)) &gt; /dev/null 2&gt;&amp;1 ; then \<BR>&nbsp;&nbsp;&nbsp;echo $(c);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp;fi)))</FONT></P>
<P><FONT class=extract># output directory for tests below<BR>TMPOUT := $(if $(KBUILD_EXTMOD),$(firstword $(KBUILD_EXTMOD))/)</FONT></P>
<P><FONT class=extract># try-run<BR># Usage: option = $(call try-run, $(CC)...-o "$$TMP",option-ok,otherwise)<BR># Exit code chooses option. "$$TMP" is can be used as temporary file and<BR># is automatically cleaned up.<BR>try-run = $(shell set -e;&nbsp;&nbsp;\<BR>&nbsp;TMP="$(TMPOUT).$$$$.tmp";&nbsp;\<BR>&nbsp;TMPO="$(TMPOUT).$$$$.o";&nbsp;\<BR>&nbsp;if ($(1)) &gt;/dev/null 2&gt;&amp;1;&nbsp;\<BR>&nbsp;then echo "$(2)";&nbsp;&nbsp;\<BR>&nbsp;else echo "$(3)";&nbsp;&nbsp;\<BR>&nbsp;fi;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;rm -f "$$TMP" "$$TMPO")</FONT></P>
<P><FONT class=extract># as-option<BR># Usage: cflags-y += $(call as-option,-Wa$(comma)-isa=foo,)</FONT></P>
<P><FONT class=extract>as-option = $(call try-run,\<BR>&nbsp;$(CC) $(KBUILD_CFLAGS) $(1) -c -x assembler /dev/null -o "$$TMP",$(1),$(2))</FONT></P>
<P><FONT class=extract># as-instr<BR># Usage: cflags-y += $(call as-instr,instr,option1,option2)</FONT></P>
<P><FONT class=extract>as-instr = $(call try-run,\<BR>&nbsp;printf "%b\n" "$(1)" | $(CC) $(KBUILD_AFLAGS) -c -x assembler -o "$$TMP" -,$(2),$(3))</FONT></P>
<P><FONT class=extract># cc-option<BR># Usage: cflags-y += $(call cc-option,-march=winchip-c6,-march=i586)</FONT></P>
<P><FONT class=extract>cc-option = $(call try-run,\<BR>&nbsp;$(CC) $(KBUILD_CPPFLAGS) $(KBUILD_CFLAGS) $(1) -c -x c /dev/null -o "$$TMP",$(1),$(2))</FONT></P>
<P><FONT class=extract># cc-option-yn<BR># Usage: flag := $(call cc-option-yn,-march=winchip-c6)<BR>cc-option-yn = $(call try-run,\<BR>&nbsp;$(CC) $(KBUILD_CPPFLAGS) $(KBUILD_CFLAGS) $(1) -c -x c /dev/null -o "$$TMP",y,n)</FONT></P>
<P><FONT class=extract># cc-option-align<BR># Prefix align with either -falign or -malign<BR>cc-option-align = $(subst -functions=0,,\<BR>&nbsp;$(call cc-option,-falign-functions=0,-malign-functions=0))</FONT></P>
<P><FONT class=extract># cc-disable-warning<BR># Usage: cflags-y += $(call cc-disable-warning,unused-but-set-variable)<BR>cc-disable-warning = $(call try-run,\<BR>&nbsp;$(CC) $(KBUILD_CPPFLAGS) $(KBUILD_CFLAGS) -W$(strip $(1)) -c -x c /dev/null -o "$$TMP",-Wno-$(strip $(1)))</FONT></P>
<P><FONT class=extract># cc-version<BR># Usage gcc-ver := $(call cc-version)<BR>cc-version = $(shell $(CONFIG_SHELL) $(srctree)/scripts/gcc-version.sh $(CC))</FONT></P>
<P><FONT class=extract># cc-fullversion<BR># Usage gcc-ver := $(call cc-fullversion)<BR>cc-fullversion = $(shell $(CONFIG_SHELL) \<BR>&nbsp;$(srctree)/scripts/gcc-version.sh -p $(CC))</FONT></P>
<P><FONT class=extract># cc-ifversion<BR># Usage:&nbsp; EXTRA_CFLAGS += $(call cc-ifversion, -lt, 0402, -O1)<BR>cc-ifversion = $(shell [ $(call cc-version, $(CC)) $(1) $(2) ] &amp;&amp; echo $(3))</FONT></P>
<P><FONT class=extract># cc-ldoption<BR># Usage: ldflags += $(call cc-ldoption, -Wl$(comma)--hash-style=both)<BR>cc-ldoption = $(call try-run,\<BR>&nbsp;$(CC) $(1) -nostdlib -x c /dev/null -o "$$TMP",$(1),$(2))</FONT></P>
<P><FONT class=extract># ld-option<BR># Usage: LDFLAGS += $(call ld-option, -X)<BR>ld-option = $(call try-run,\<BR>&nbsp;$(CC) -x c /dev/null -c -o "$$TMPO" ; $(LD) $(1) "$$TMPO" -o "$$TMP",$(1),$(2))</FONT></P>
<P><FONT class=extract># ar-option<BR># Usage: KBUILD_ARFLAGS := $(call ar-option,D)<BR># Important: no spaces around options<BR>ar-option = $(call try-run, $(AR) rc$(1) "$$TMP",$(1),$(2))</FONT></P>
<P>######</P>
<P><FONT class=extract>###<BR># Shorthand for $(Q)$(MAKE) -f scripts/Makefile.build obj=<BR># Usage:<BR># $(Q)$(MAKE) $(build)=dir<BR>build := -f $(if $(KBUILD_SRC),$(srctree)/)scripts/Makefile.build obj</FONT></P>
<P><FONT class=extract>###<BR># Shorthand for $(Q)$(MAKE) -f scripts/Makefile.modbuiltin obj=<BR># Usage:<BR># $(Q)$(MAKE) $(modbuiltin)=dir<BR>modbuiltin := -f $(if $(KBUILD_SRC),$(srctree)/)scripts/Makefile.modbuiltin obj</FONT></P>
<P><FONT class=extract># Prefix -I with $(srctree) if it is not an absolute path.<BR># skip if -I has no parameter<BR>addtree = $(if $(patsubst -I%,%,$(1)), \<BR>$(if $(filter-out -I/%,$(1)),$(patsubst -I%,-I$(srctree)/%,$(1))) $(1))</FONT></P>
<P><FONT class=extract># Find all -I options and call addtree<BR>flags = $(foreach o,$($(1)),$(if $(filter -I%,$(o)),$(call addtree,$(o)),$(o)))</FONT></P>
<P><FONT class=extract># echo command.<BR># Short version is used, if $(quiet) equals `quiet_', otherwise full one.<BR>echo-cmd = $(if $($(quiet)cmd_$(1)),\<BR>&nbsp;echo '&nbsp; $(call escsq,$($(quiet)cmd_$(1)))$(echo-why)';)</FONT></P>
<P><FONT class=extract># printing commands<BR>cmd = @$(echo-cmd) $(cmd_$(1))</FONT></P>
<P><FONT class=extract># Add $(obj)/ for paths that are not absolute<BR>objectify = $(foreach o,$(1),$(if $(filter /%,$(o)),$(o),$(obj)/$(o)))</FONT></P>
<P><FONT class=extract>###<BR># if_changed&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - execute command if any prerequisite is newer than<BR>#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; target, or command line has changed<BR># if_changed_dep&nbsp; - as if_changed, but uses fixdep to reveal dependencies<BR>#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; including used config symbols<BR># if_changed_rule - as if_changed but execute rule instead<BR># See Documentation/kbuild/makefiles.txt for more info</FONT></P>
<P><FONT class=extract>ifneq ($(KBUILD_NOCMDDEP),1)<BR># Check if both arguments has same arguments. Result is empty string if equal.<BR># User may override this check using make KBUILD_NOCMDDEP=1<BR>arg-check = $(strip $(filter-out $(cmd_$(1)), $(cmd_$@)) \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(filter-out $(cmd_$@),&nbsp;&nbsp; $(cmd_$(1))) )<BR>else<BR>arg-check = $(if $(strip $(</FONT><A href="mailto:cmd_$@)),,1"><FONT class=extract>cmd_$@)),,1</FONT></A><FONT class=extract>)<BR>endif</FONT></P>
<P><FONT class=extract># &gt;'&lt; substitution is for echo to work,<BR># &gt;$&lt; substitution to preserve $ when reloading .cmd file<BR># note: when using inline perl scripts [perl -e '...$$t=1;...']<BR># in $(cmd_xxx) double $$ your perl vars<BR>make-cmd = $(subst </FONT><A href="file://\\,\\\\,$(subst"><FONT class=extract>\\,\\\\,$(subst</FONT></A><FONT class=extract> \#,\\\#,$(subst $$,$$$$,$(call escsq,$(cmd_$(1))))))</FONT></P>
<P><FONT class=extract># Find any prerequisites that is newer than target or that does not exist.<BR># PHONY targets skipped in both cases.<BR>any-prereq = $(filter-out $(PHONY),$?) $(filter-out $(PHONY) $(wildcard $^),$^)</FONT></P>
<P><FONT class=extract># Execute command if command has changed or prerequisite(s) are updated.<BR>#<BR>if_changed = $(if $(strip $(any-prereq) $(arg-check)),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;@set -e;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;$(echo-cmd) $(cmd_$(1));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;echo 'cmd_$@ := $(make-cmd)' &gt; $(dot-target).cmd)</FONT></P>
<P><FONT class=extract># Execute the command and also postprocess generated .d dependencies file.<BR>if_changed_dep = $(if $(strip $(any-prereq) $(arg-check) ),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;@set -e;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;$(echo-cmd) $(cmd_$(1));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;scripts/basic/fixdep $(depfile) $@ '$(make-cmd)' &gt; $(dot-target).tmp;\<BR>&nbsp;rm -f $(depfile);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;mv -f $(dot-target).tmp $(dot-target).cmd)</FONT></P>
<P><FONT class=extract># Usage: $(call if_changed_rule,foo)<BR># Will check if $(cmd_foo) or any of the prerequisites changed,<BR># and if so will execute $(rule_foo).<BR>if_changed_rule = $(if $(strip $(any-prereq) $(arg-check) ),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;@set -e;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;$(rule_$(1)))</FONT></P>
<P><FONT class=extract>###<BR># why - tell why a a target got build<BR>#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; enabled by make V=2<BR>#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Output (listed in the order they are checked):<BR>#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (1) - due to target is PHONY<BR>#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (2) - due to target missing<BR>#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (3) - due to: file1.h file2.h<BR>#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (4) - due to command line change<BR>#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (5) - due to missing .cmd file<BR>#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (6) - due to target not in $(targets)<BR># (1) PHONY targets are always build<BR># (2) No target, so we better build it<BR># (3) Prerequisite is newer than target<BR># (4) The command line stored in the file named dir/.target.cmd<BR>#&nbsp;&nbsp;&nbsp;&nbsp; differed from actual command line. This happens when compiler<BR>#&nbsp;&nbsp;&nbsp;&nbsp; options changes<BR># (5) No dir/.target.cmd file (used to store command line)<BR># (6) No dir/.target.cmd file and target not listed in $(targets)<BR>#&nbsp;&nbsp;&nbsp;&nbsp; This is a good hint that there is a bug in the kbuild file<BR>ifeq ($(KBUILD_VERBOSE),2)<BR>why =&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp;&nbsp; $(if $(filter $@, $(PHONY)),- due to target is PHONY,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(if $(wildcard $@),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(if $(strip $(any-prereq)),- due to: $(any-prereq),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(if $(arg-check),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(if $(cmd_$@),- due to command line change,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(if $(filter $@, $(targets)),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - due to missing .cmd file,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - due to $(notdir $@) not in $$(targets)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ),&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - due to target missing&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; )&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp;&nbsp;&nbsp; )</FONT></P>
<P><FONT class=extract>echo-why = $(call escsq, $(strip $(why)))<BR>endif</FONT>