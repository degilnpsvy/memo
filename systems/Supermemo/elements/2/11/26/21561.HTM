<H1 class=SECT1><A name=LOOPS1></A>11.1. Loops</H1>
<P>A <I class=FIRSTTERM>loop</I> is a block of code that <I class=FIRSTTERM>iterates</I> <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FTN.AEN6560" name=AEN6560><SPAN class=footnote>[52]</SPAN></A> a list of commands as long as the <I class=FIRSTTERM>loop control condition</I> is true.</P>
<P></P>
<DIV class=VARIABLELIST>
<P><B><A name=FORLOOPREF1></A>for loops</B></P>
<DL>
<DT><B class=COMMAND>for <TT class=PARAMETER><I>arg</I></TT> in <TT class=REPLACEABLE><I>[list]</I></TT></B> 
<DD>
<P>This is the basic looping construct. It differs significantly from its <I class=FIRSTTERM>C</I> counterpart.</P>
<P><A name=DOINREF></A></P>
<P>
<P><B class=COMMAND>for</B> <TT class=REPLACEABLE><I>arg</I></TT> in [<TT class=REPLACEABLE><I>list</I></TT>]<BR>do <BR><TT class=REPLACEABLE><I>&nbsp;command(s)</I></TT>... <BR>done </P>
<P></P>
<DIV class=NOTE>
<P></P>
<TABLE class=NOTE border=0 width="90%">
<TBODY>
<TR>
<TD vAlign=top width=25 align=middle><IMG hspace=5 alt=Note src="http://tldp.org/LDP/abs/images/note.gif"></TD>
<TD vAlign=top align=left>
<P>During each pass through the loop, <TT class=REPLACEABLE><I>arg</I></TT> takes on the value of each successive variable in the <TT class=REPLACEABLE><I>list</I></TT>.</P></TD></TR></TBODY></TABLE></DIV>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>for arg in "$var1" "$var2" "$var3" ... "$varN"  
# In pass 1 of the loop, arg = $var1	    
# In pass 2 of the loop, arg = $var2	    
# In pass 3 of the loop, arg = $var3	    
# ...
# In pass N of the loop, arg = $varN

# Arguments in [list] quoted to prevent possible word splitting.</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>The argument <TT class=REPLACEABLE><I>list</I></TT> may contain <A href="http://tldp.org/LDP/abs/html/abs-guide.html#ASTERISKREF">wild cards</A>.</P>
<P><A name=NEEDSEMICOLON></A></P>
<P>If <I class=FIRSTTERM>do</I> is on same line as <I class=FIRSTTERM>for</I>, there needs to be a semicolon after list.</P>
<P>
<P><B class=COMMAND>for</B> <TT class=REPLACEABLE><I>arg</I></TT> in [<TT class=REPLACEABLE><I>list</I></TT>] ; do <BR></P>
<P></P>
<DIV class=EXAMPLE><A name=EX22></A>
<P><B>Example 11-1. Simple <I class=FIRSTTERM>for</I> loops</B></P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# Listing the planets.

for planet in Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune Pluto
do
  echo $planet  # Each planet on a separate line.
done

echo; echo

for planet in "Mercury Venus Earth Mars Jupiter Saturn Uranus Neptune Pluto"
    # All planets on same line.
    # Entire 'list' enclosed in quotes creates a single variable.
    # Why? Whitespace incorporated into the variable.
do
  echo $planet
done

echo; echo "Whoops! Pluto is no longer a planet!"

exit 0</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<P><A name=MULTPARAML></A></P>
<P>Each <TT class=USERINPUT><B>[list]</B></TT> element may contain multiple parameters. This is useful when processing parameters in groups. In such cases, use the <A href="http://tldp.org/LDP/abs/html/abs-guide.html#SETREF">set</A> command (see <A href="http://tldp.org/LDP/abs/html/abs-guide.html#EX34">Example 15-16</A>) to force parsing of each <TT class=USERINPUT><B>[list]</B></TT> element and assignment of each component to the positional parameters.</P>
<DIV class=EXAMPLE><A name=EX22A></A>
<P><B>Example 11-2. <I class=FIRSTTERM>for</I> loop with two parameters in each [list] element</B></P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# Planets revisited.

# Associate the name of each planet with its distance from the sun.

for planet in "Mercury 36" "Venus 67" "Earth 93"  "Mars 142" "Jupiter 483"
do
  set -- $planet  #  Parses variable "planet"
                  #+ and sets positional parameters.
  #  The "--" prevents nasty surprises if $planet is null or
  #+ begins with a dash.

  #  May need to save original positional parameters,
  #+ since they get overwritten.
  #  One way of doing this is to use an array,
  #         original_params=("$@")

  echo "$1		$2,000,000 miles from the sun"
  #-------two  tabs---concatenate zeroes onto parameter $2
done

# (Thanks, S.C., for additional clarification.)

exit 0</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<P><A name=PARAMLI></A></P>
<P>A variable may supply the <TT class=USERINPUT><B>[list]</B></TT> in a <I class=FIRSTTERM>for loop</I>.</P>
<DIV class=EXAMPLE><A name=FILEINFO></A>
<P><B>Example 11-3. <EM>Fileinfo:</EM> operating on a file list contained in a variable</B></P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# fileinfo.sh

FILES="/usr/sbin/accept
/usr/sbin/pwck
/usr/sbin/chroot
/usr/bin/fakefile
/sbin/badblocks
/sbin/ypbind"     # List of files you are curious about.
                  # Threw in a dummy file, /usr/bin/fakefile.

echo

for file in $FILES
do

  if [ ! -e "$file" ]       # Check if file exists.
  then
    echo "$file does not exist."; echo
    continue                # On to next.
   fi

  ls -l $file | awk '{ print $8 "         file size: " $5 }'  # Print 2 fields.
  whatis `basename $file`   # File info.
  # Note that the whatis database needs to have been set up for this to work.
  # To do this, as root run /usr/bin/makewhatis.
  echo
done  

exit 0</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<P><A name=PARAMLI2></A></P>
<P>The <TT class=USERINPUT><B>[list]</B></TT> in a <I class=FIRSTTERM>for loop</I> may be parameterized.</P>
<DIV class=EXAMPLE><A name=FILEINFO01></A>
<P><B>Example 11-4. Operating on a parameterized file list</B></P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash

filename="*txt"

for file in $filename
do
 echo "Contents of $file"
 echo "---"
 cat "$file"
 echo
done</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<P><A name=LIGLOB></A></P>
<P>If the <TT class=USERINPUT><B>[list]</B></TT> in a <I class=FIRSTTERM>for loop</I> contains wild cards (<SPAN class=TOKEN>*</SPAN> and <SPAN class=TOKEN>?</SPAN>) used in filename expansion, then <A href="http://tldp.org/LDP/abs/html/abs-guide.html#GLOBBINGREF">globbing</A> takes place.</P>
<DIV class=EXAMPLE><A name=LISTGLOB></A>
<P><B>Example 11-5. Operating on files with a <I class=FIRSTTERM>for</I> loop</B></P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# list-glob.sh: Generating [list] in a for-loop, using "globbing" ...
# Globbing = filename expansion.

echo

for file in *
#           ^  Bash performs filename expansion
#+             on expressions that globbing recognizes.
do
  ls -l "$file"  # Lists all files in $PWD (current directory).
  #  Recall that the wild card character "*" matches every filename,
  #+ however, in "globbing," it doesn't match dot-files.

  #  If the pattern matches no file, it is expanded to itself.
  #  To prevent this, set the nullglob option
  #+   (shopt -s nullglob).
  #  Thanks, S.C.
done

echo; echo

for file in [jx]*
do
  rm -f $file    # Removes only files beginning with "j" or "x" in $PWD.
  echo "Removed file \"$file\"".
done

echo

exit 0</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<P><A name=OMITLIST></A></P>
<P>Omitting the <TT class=USERINPUT><B>in [list]</B></TT> part of a <I class=FIRSTTERM>for loop</I> causes the loop to operate on <SPAN class=TOKEN>$@</SPAN> -- the <A href="http://tldp.org/LDP/abs/html/abs-guide.html#POSPARAMREF">positional parameters</A>. A particularly clever illustration of this is <A href="http://tldp.org/LDP/abs/html/abs-guide.html#PRIMES">Example A-15</A>. See also <A href="http://tldp.org/LDP/abs/html/abs-guide.html#REVPOSPARAMS">Example 15-17</A>.</P>
<DIV class=EXAMPLE><A name=EX23></A>
<P><B>Example 11-6. Missing <TT class=USERINPUT><B>in [list]</B></TT> in a <I class=FIRSTTERM>for</I> loop</B></P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash

#  Invoke this script both with and without arguments,
#+ and see what happens.

for a
do
 echo -n "$a "
done

#  The 'in list' missing, therefore the loop operates on '$@'
#+ (command-line argument list, including whitespace).

echo

exit 0</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<P><A name=LOOPCS></A></P>
<P>It is possible to use <A href="http://tldp.org/LDP/abs/html/abs-guide.html#COMMANDSUBREF">command substitution</A> to generate the <TT class=USERINPUT><B>[list]</B></TT> in a <I class=FIRSTTERM>for loop</I>. See also <A href="http://tldp.org/LDP/abs/html/abs-guide.html#EX53">Example 16-54</A>, <A href="http://tldp.org/LDP/abs/html/abs-guide.html#SYMLINKS">Example 11-11</A> and <A href="http://tldp.org/LDP/abs/html/abs-guide.html#BASE">Example 16-48</A>.</P>
<DIV class=EXAMPLE><A name=FORLOOPCMD></A>
<P><B>Example 11-7. Generating the <TT class=USERINPUT><B>[list]</B></TT> in a <I class=FIRSTTERM>for</I> loop with command substitution</B></P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
#  for-loopcmd.sh: for-loop with [list]
#+ generated by command substitution.

NUMBERS="9 7 3 8 37.53"

for number in `echo $NUMBERS`  # for number in 9 7 3 8 37.53
do
  echo -n "$number "
done

echo 
exit 0</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<P>Here is a somewhat more complex example of using command substitution to create the <TT class=USERINPUT><B>[list]</B></TT>.</P>
<DIV class=EXAMPLE><A name=BINGREP></A>
<P><B>Example 11-8. A <I class=FIRSTTERM>grep</I> replacement for binary files</B></P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# bin-grep.sh: Locates matching strings in a binary file.

# A "grep" replacement for binary files.
# Similar effect to "grep -a"

E_BADARGS=65
E_NOFILE=66

if [ $# -ne 2 ]
then
  echo "Usage: `basename $0` search_string filename"
  exit $E_BADARGS
fi

if [ ! -f "$2" ]
then
  echo "File \"$2\" does not exist."
  exit $E_NOFILE
fi  


IFS=$'\012'       # Per suggestion of Anton Filippov.
                  # was:  IFS="\n"
for word in $( strings "$2" | grep "$1" )
# The "strings" command lists strings in binary files.
# Output then piped to "grep", which tests for desired string.
do
  echo $word
done

# As S.C. points out, lines 23 - 30 could be replaced with the simpler
#    strings "$2" | grep "$1" | tr -s "$IFS" '[\n*]'


#  Try something like  "./bin-grep.sh mem /bin/ls"
#+ to exercise this script.

exit 0</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<P>More of the same.</P>
<DIV class=EXAMPLE><A name=USERLIST></A>
<P><B>Example 11-9. Listing all users on the system</B></P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# userlist.sh

PASSWORD_FILE=/etc/passwd
n=1           # User number

for name in $(awk 'BEGIN{FS=":"}{print $1}' &lt; "$PASSWORD_FILE" )
# Field separator = :    ^^^^^^
# Print first field              ^^^^^^^^
# Get input from password file  /etc/passwd  ^^^^^^^^^^^^^^^^^
do
  echo "USER #$n = $name"
  let "n += 1"
done  


# USER #1 = root
# USER #2 = bin
# USER #3 = daemon
# ...
# USER #33 = bozo

exit $?

#  Discussion:
#  ----------
#  How is it that an ordinary user, or a script run by same,
#+ can read /etc/passwd? (Hint: Check the /etc/passwd file permissions.)
#  Is this a security hole? Why or why not?</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<P>Yet another example of the <TT class=USERINPUT><B>[list]</B></TT> resulting from command substitution.</P>
<DIV class=EXAMPLE><A name=FINDSTRING></A>
<P><B>Example 11-10. Checking all the binaries in a directory for authorship</B></P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# findstring.sh:
# Find a particular string in the binaries in a specified directory.

directory=/usr/bin/
fstring="Free Software Foundation"  # See which files come from the FSF.

for file in $( find $directory -type f -name '*' | sort )
do
  strings -f $file | grep "$fstring" | sed -e "s%$directory%%"
  #  In the "sed" expression,
  #+ it is necessary to substitute for the normal "/" delimiter
  #+ because "/" happens to be one of the characters filtered out.
  #  Failure to do so gives an error message. (Try it.)
done  

exit $?

#  Exercise (easy):
#  ---------------
#  Convert this script to take command-line parameters
#+ for $directory and $fstring.</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<P>A final example of <TT class=USERINPUT><B>[list]</B></TT> / command substitution, but this time the <SPAN class=QUOTE>"command"</SPAN> is a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FUNCTIONREF">function</A>.</P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>generate_list ()
{
  echo "one two three"
}

for word in $(generate_list)  # Let "word" grab output of function.
do
  echo "$word"
done

# one
# two
# three</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P><A name=LOOPREDIR></A></P>
<P>The output of a <I class=FIRSTTERM>for loop</I> may be piped to a command or commands.</P>
<DIV class=EXAMPLE><A name=SYMLINKS></A>
<P><B>Example 11-11. Listing the <I class=FIRSTTERM>symbolic links</I> in a directory</B></P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# symlinks.sh: Lists symbolic links in a directory.


directory=${1-`pwd`}
#  Defaults to current working directory,
#+ if not otherwise specified.
#  Equivalent to code block below.
# ----------------------------------------------------------
# ARGS=1                 # Expect one command-line argument.
#
# if [ $# -ne "$ARGS" ]  # If not 1 arg...
# then
#   directory=`pwd`      # current working directory
# else
#   directory=$1
# fi
# ----------------------------------------------------------

echo "symbolic links in directory \"$directory\""

for file in "$( find $directory -type l )"   # -type l = symbolic links
do
  echo "$file"
done | sort                                  # Otherwise file list is unsorted.
#  Strictly speaking, a loop isn't really necessary here,
#+ since the output of the "find" command is expanded into a single word.
#  However, it's easy to understand and illustrative this way.

#  As Dominik 'Aeneas' Schnitzer points out,
#+ failing to quote  $( find $directory -type l )
#+ will choke on filenames with embedded whitespace.
#  containing whitespace. 

exit 0


# --------------------------------------------------------
# Jean Helou proposes the following alternative:

echo "symbolic links in directory \"$directory\""
# Backup of the current IFS. One can never be too cautious.
OLDIFS=$IFS
IFS=:

for file in $(find $directory -type l -printf "%p$IFS")
do     #                              ^^^^^^^^^^^^^^^^
       echo "$file"
       done|sort

# And, James "Mike" Conley suggests modifying Helou's code thusly:

OLDIFS=$IFS
IFS='' # Null IFS means no word breaks
for file in $( find $directory -type l )
do
  echo $file
  done | sort

#  This works in the "pathological" case of a directory name having
#+ an embedded colon.
#  "This also fixes the pathological case of the directory name having
#+  a colon (or space in earlier example) as well."
</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<P>The <TT class=FILENAME>stdout</TT> of a loop may be <A href="http://tldp.org/LDP/abs/html/abs-guide.html#IOREDIRREF">redirected</A> to a file, as this slight modification to the previous example shows.</P>
<DIV class=EXAMPLE><A name=SYMLINKS2></A>
<P><B>Example 11-12. Symbolic links in a directory, saved to a file</B></P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# symlinks.sh: Lists symbolic links in a directory.

OUTFILE=symlinks.list                         # save-file

directory=${1-`pwd`}
#  Defaults to current working directory,
#+ if not otherwise specified.


echo "symbolic links in directory \"$directory\"" &gt; "$OUTFILE"
echo "---------------------------" &gt;&gt; "$OUTFILE"

for file in "$( find $directory -type l )"    # -type l = symbolic links
do
  echo "$file"
done | sort &gt;&gt; "$OUTFILE"                     # stdout of loop
#           ^^^^^^^^^^^^^                       redirected to save file.

# echo "Output file = $OUTFILE"

exit $?</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<P><A name=LOOPCSTYLE></A></P>
<P>There is an alternative syntax to a <I class=FIRSTTERM>for loop</I> that will look very familiar to C programmers. This requires <A href="http://tldp.org/LDP/abs/html/abs-guide.html#DBLPARENSREF">double parentheses</A>.</P>
<DIV class=EXAMPLE><A name=FORLOOPC></A>
<P><B>Example 11-13. A C-style <I class=FIRSTTERM>for</I> loop</B></P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# Multiple ways to count up to 10.

echo

# Standard syntax.
for a in 1 2 3 4 5 6 7 8 9 10
do
  echo -n "$a "
done  

echo; echo

# +==========================================+

# Using "seq" ...
for a in `seq 10`
do
  echo -n "$a "
done  

echo; echo

# +==========================================+

# Using brace expansion ...
# Bash, version 3+.
for a in {1..10}
do
  echo -n "$a "
done  

echo; echo

# +==========================================+

# Now, let's do the same, using C-like syntax.

LIMIT=10

for ((a=1; a &lt;= LIMIT ; a++))  # Double parentheses, and naked "LIMIT"
do
  echo -n "$a "
done                           # A construct borrowed from ksh93.

echo; echo

# +=========================================================================+

# Let's use the C "comma operator" to increment two variables simultaneously.

for ((a=1, b=1; a &lt;= LIMIT ; a++, b++))
do  # The comma concatenates operations.
  echo -n "$a-$b "
done

echo; echo

exit 0</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<P>See also <A href="http://tldp.org/LDP/abs/html/abs-guide.html#QFUNCTION">Example 27-16</A>, <A href="http://tldp.org/LDP/abs/html/abs-guide.html#TWODIM">Example 27-17</A>, and <A href="http://tldp.org/LDP/abs/html/abs-guide.html#COLLATZ">Example A-6</A>.</P>
<P>---</P>
<P>Now, a <I class=FIRSTTERM>for loop</I> used in a <SPAN class=QUOTE>"real-life"</SPAN> context.</P>
<DIV class=EXAMPLE><A name=EX24></A>
<P><B>Example 11-14. Using <I class=FIRSTTERM>efax</I> in batch mode</B></P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# Faxing (must have 'efax' package installed).

EXPECTED_ARGS=2
E_BADARGS=85
MODEM_PORT="/dev/ttyS2"   # May be different on your machine.
#                ^^^^^      PCMCIA modem card default port.

if [ $# -ne $EXPECTED_ARGS ]
# Check for proper number of command-line args.
then
   echo "Usage: `basename $0` phone# text-file"
   exit $E_BADARGS
fi


if [ ! -f "$2" ]
then
  echo "File $2 is not a text file."
  #     File is not a regular file, or does not exist.
  exit $E_BADARGS
fi
  

fax make $2              #  Create fax-formatted files from text files.

for file in $(ls $2.0*)  #  Concatenate the converted files.
                         #  Uses wild card (filename "globbing")
			 #+ in variable list.
do
  fil="$fil $file"
done  

efax -d "$MODEM_PORT"  -t "T$1" $fil   # Finally, do the work.
# Trying adding  -o1  if above line fails.


#  As S.C. points out, the for-loop can be eliminated with
#     efax -d /dev/ttyS2 -o1 -t "T$1" $2.0*
#+ but it's not quite as instructive [grin].

exit $?   # Also, efax sends diagnostic messages to stdout.</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<DIV class=NOTE>
<P></P>
<TABLE class=NOTE border=0 width="90%">
<TBODY>
<TR>
<TD vAlign=top width=25 align=middle><IMG hspace=5 alt=Note src="http://tldp.org/LDP/abs/images/note.gif"></TD>
<TD vAlign=top align=left>
<P><A name=NODODONE></A>The <A href="http://tldp.org/LDP/abs/html/abs-guide.html#KEYWORDREF">keywords</A> <B class=COMMAND>do</B> and <B class=COMMAND>done</B> delineate the <I class=FIRSTTERM>for-loop</I> command block. However, these may, in certain contexts, be omitted by framing the command block within <A href="http://tldp.org/LDP/abs/html/abs-guide.html#CODEBLOCKREF">curly brackets</A> 
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>for((n=1; n&lt;=10; n++)) 
# No do!
{
  echo -n "* $n *"
}
# No done!


# Outputs:
# * 1 ** 2 ** 3 ** 4 ** 5 ** 6 ** 7 ** 8 ** 9 ** 10 *
# And, echo $? returns 0, so Bash does not register an error.


echo


#  But, note that in a classic for-loop:    for n in [list] ...
#+ a terminal semicolon is required.

for n in 1 2 3
{  echo -n "$n "; }
#               ^


# Thank you, YongYe, for pointing this out.</PRE></FONT></TD></TR></TBODY></TABLE></P></TD></TR></TBODY></TABLE></DIV>
<DT><A name=WHILELOOPREF></A><B class=COMMAND>while</B> 
<DD>
<P>This construct tests for a condition at the top of a loop, and keeps looping as long as that condition is true (returns a <SPAN class=RETURNVALUE>0</SPAN> <A href="http://tldp.org/LDP/abs/html/abs-guide.html#EXITSTATUSREF">exit status</A>). In contrast to a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FORLOOPREF1">for loop</A>, a <I class=FIRSTTERM>while loop</I> finds use in situations where the number of loop repetitions is not known beforehand.</P>
<P>
<P><B class=COMMAND>while</B> [<TT class=REPLACEABLE><I> condition </I></TT>]<BR>do <BR><TT class=REPLACEABLE><I>&nbsp;command(s)</I></TT>... <BR>done </P>
<P></P>
<P>The bracket construct in a <I class=FIRSTTERM>while loop</I> is nothing more than our old friend, the <A href="http://tldp.org/LDP/abs/html/abs-guide.html#TESTCONSTRUCTS1">test brackets</A> used in an <I class=FIRSTTERM>if/then</I> test. In fact, a <I class=FIRSTTERM>while loop</I> can legally use the more versatile <A href="http://tldp.org/LDP/abs/html/abs-guide.html#DBLBRACKETS">double-brackets construct</A> (while [[ condition ]]).</P>
<P><A name=WHILENEEDSEMI></A></P>
<P><A href="http://tldp.org/LDP/abs/html/abs-guide.html#NEEDSEMICOLON">As is the case with <I class=FIRSTTERM>for loops</I></A>, placing the <I class=FIRSTTERM>do</I> on the same line as the condition test requires a semicolon.</P>
<P>
<P><B class=COMMAND>while</B> [<TT class=REPLACEABLE><I> condition </I></TT>] ; do </P>
<P></P>
<P>Note that the <I class=FIRSTTERM>test brackets</I> <A href="http://tldp.org/LDP/abs/html/abs-guide.html#WHILENOBRACKETS">are <EM>not</EM> mandatory</A> in a <I class=FIRSTTERM>while</I> loop. See, for example, the <A href="http://tldp.org/LDP/abs/html/abs-guide.html#GETOPTSX">getopts construct</A>.</P>
<DIV class=EXAMPLE><A name=EX25></A>
<P><B>Example 11-15. Simple <I class=FIRSTTERM>while</I> loop</B></P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash

var0=0
LIMIT=10

while [ "$var0" -lt "$LIMIT" ]
#      ^                    ^
# Spaces, because these are "test-brackets" . . .
do
  echo -n "$var0 "        # -n suppresses newline.
  #             ^           Space, to separate printed out numbers.

  var0=`expr $var0 + 1`   # var0=$(($var0+1))  also works.
                          # var0=$((var0 + 1)) also works.
                          # let "var0 += 1"    also works.
done                      # Various other methods also work.

echo

exit 0</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<DIV class=EXAMPLE><A name=EX26></A>
<P><B>Example 11-16. Another <I class=FIRSTTERM>while</I> loop</B></P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash

echo
                               # Equivalent to:
while [ "$var1" != "end" ]     # while test "$var1" != "end"
do
  echo "Input variable #1 (end to exit) "
  read var1                    # Not 'read $var1' (why?).
  echo "variable #1 = $var1"   # Need quotes because of "#" . . .
  # If input is 'end', echoes it here.
  # Does not test for termination condition until top of loop.
  echo
done  

exit 0</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<P><A name=WHMULTCOND></A></P>
<P>A <I class=FIRSTTERM>while loop</I> may have multiple conditions. Only the final condition determines when the loop terminates. This necessitates a slightly different loop syntax, however.</P>
<DIV class=EXAMPLE><A name=EX26A></A>
<P><B>Example 11-17. <I class=FIRSTTERM>while</I> loop with multiple conditions</B></P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash

var1=unset
previous=$var1

while echo "previous-variable = $previous"
      echo
      previous=$var1
      [ "$var1" != end ] # Keeps track of what $var1 was previously.
      # Four conditions on *while*, but only the final one controls loop.
      # The *last* exit status is the one that counts.
do
echo "Input variable #1 (end to exit) "
  read var1
  echo "variable #1 = $var1"
done  

# Try to figure out how this all works.
# It's a wee bit tricky.

exit 0</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<P><A name=WLOOPCSTYLE></A></P>
<P>As with a <I class=FIRSTTERM>for loop</I>, a <I class=FIRSTTERM>while loop</I> may employ C-style syntax by using the double-parentheses construct (see also <A href="http://tldp.org/LDP/abs/html/abs-guide.html#CVARS">Example 8-5</A>).</P>
<DIV class=EXAMPLE><A name=WHLOOPC></A>
<P><B>Example 11-18. C-style syntax in a <I class=FIRSTTERM>while</I> loop</B></P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# wh-loopc.sh: Count to 10 in a "while" loop.

LIMIT=10                 # 10 iterations.
a=1

while [ "$a" -le $LIMIT ]
do
  echo -n "$a "
  let "a+=1"
done                     # No surprises, so far.

echo; echo

# +=================================================================+

# Now, we'll repeat with C-like syntax.

((a = 1))      # a=1
# Double parentheses permit space when setting a variable, as in C.

while (( a &lt;= LIMIT ))   #  Double parentheses,
do                       #+ and no "$" preceding variables.
  echo -n "$a "
  ((a += 1))             # let "a+=1"
  # Yes, indeed.
  # Double parentheses permit incrementing a variable with C-like syntax.
done

echo

# C and Java programmers can feel right at home in Bash.

exit 0</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<P><A name=WHILEFUNC></A></P>
<P>Inside its test brackets, a <I class=FIRSTTERM>while loop</I> can call a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FUNCTIONREF">function</A>. 
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>t=0

condition ()
{
  ((t++))

  if [ $t -lt 5 ]
  then
    return 0  # true
  else
    return 1  # false
  fi
}

while condition
#     ^^^^^^^^^
#     Function call -- four loop iterations.
do
  echo "Still going: t = $t"
done

# Still going: t = 1
# Still going: t = 2
# Still going: t = 3
# Still going: t = 4</PRE></FONT></TD></TR></TBODY></TABLE></P>
<TABLE class=SIDEBAR border=1 cellPadding=5>
<TBODY>
<TR>
<TD>
<DIV class=SIDEBAR><A name=AEN6856></A>
<P></P>
<P><A name=WHILENOBRACKETS></A></P>
<P>Similar to the <A href="http://tldp.org/LDP/abs/html/abs-guide.html#IFGREPREF">if-test</A> construct, a <I class=FIRSTTERM>while</I> loop can omit the test brackets. 
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>while condition
do
   command(s) ...
done</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P></P></DIV></TD></TR></TBODY></TABLE>
<P><A name=WHILEREADREF2></A></P>
<P>By coupling the power of the <A href="http://tldp.org/LDP/abs/html/abs-guide.html#READREF">read</A> command with a <I class=FIRSTTERM>while loop</I>, we get the handy <A href="http://tldp.org/LDP/abs/html/abs-guide.html#WHILEREADREF">while read</A> construct, useful for reading and parsing files.</P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>cat $filename |   # Supply input from a file.
while read line   # As long as there is another line to read ...
do
  ...
done

# =========== Snippet from "sd.sh" example script ========== #

  while read value   # Read one data point at a time.
  do
    rt=$(echo "scale=$SC; $rt + $value" | bc)
    (( ct++ ))
  done

  am=$(echo "scale=$SC; $rt / $ct" | bc)

  echo $am; return $ct   # This function "returns" TWO values!
  #  Caution: This little trick will not work if $ct &gt; 255!
  #  To handle a larger number of data points,
  #+ simply comment out the "return $ct" above.
} &lt;"$datafile"   # Feed in data file.</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P><A name=WHREDIR></A></P>
<DIV class=NOTE>
<P></P>
<TABLE class=NOTE border=0 width="90%">
<TBODY>
<TR>
<TD vAlign=top width=25 align=middle><IMG hspace=5 alt=Note src="http://tldp.org/LDP/abs/images/note.gif"></TD>
<TD vAlign=top align=left>
<P>A <I class=FIRSTTERM>while loop</I> may have its <TT class=FILENAME>stdin</TT> <A href="http://tldp.org/LDP/abs/html/abs-guide.html#REDIRREF">redirected to a file</A> by a <SPAN class=TOKEN>&lt;</SPAN> at its end.</P>
<P>A <I class=FIRSTTERM>while loop</I> may have its <TT class=FILENAME>stdin</TT> <A href="http://tldp.org/LDP/abs/html/abs-guide.html#READPIPEREF">supplied by a pipe</A>.</P></TD></TR></TBODY></TABLE></DIV>
<DT><A name=UNTILLOOPREF></A><B class=COMMAND>until</B> 
<DD>
<P>This construct tests for a condition at the top of a loop, and keeps looping as long as that condition is <EM>false</EM> (opposite of <I class=FIRSTTERM>while loop</I>).</P>
<P>
<P><B class=COMMAND>until</B> [<TT class=REPLACEABLE><I> condition-is-true </I></TT>]<BR>do <BR><TT class=REPLACEABLE><I>&nbsp;command(s)</I></TT>... <BR>done </P>
<P></P>
<P>Note that an <I class=FIRSTTERM>until loop</I> tests for the terminating condition at the <EM>top</EM> of the loop, differing from a similar construct in some programming languages.</P>
<P>As is the case with <I class=FIRSTTERM>for loops</I>, placing the <I class=FIRSTTERM>do</I> on the same line as the condition test requires a semicolon.</P>
<P>
<P><B class=COMMAND>until</B> [<TT class=REPLACEABLE><I> condition-is-true </I></TT>] ; do </P>
<P></P>
<DIV class=EXAMPLE><A name=EX27></A>
<P><B>Example 11-19. <I class=FIRSTTERM>until</I> loop</B></P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash

END_CONDITION=end

until [ "$var1" = "$END_CONDITION" ]
# Tests condition here, at top of loop.
do
  echo "Input variable #1 "
  echo "($END_CONDITION to exit)"
  read var1
  echo "variable #1 = $var1"
  echo
done  

#                     ---                        #

#  As with "for" and "while" loops,
#+ an "until" loop permits C-like test constructs.

LIMIT=10
var=0

until (( var &gt; LIMIT ))
do  # ^^ ^     ^     ^^   No brackets, no $ prefixing variables.
  echo -n "$var "
  (( var++ ))
done    # 0 1 2 3 4 5 6 7 8 9 10 


exit 0</PRE></FONT></TD></TR></TBODY></TABLE></DIV></DD></DL></DIV>
<P><A name=CHOOSELOOP></A></P>
<P>How to choose between a <I class=FIRSTTERM>for</I> loop or a <I class=FIRSTTERM>while</I> loop or <I class=FIRSTTERM>until</I> loop? In <B class=COMMAND>C</B>, you would typically use a <I class=FIRSTTERM>for</I> loop when the number of loop iterations is known beforehand. With <I class=FIRSTTERM>Bash</I>, however, the situation is fuzzier. The Bash <I class=FIRSTTERM>for</I> loop is more loosely structured and more flexible than its equivalent in other languages. Therefore, feel free to use whatever type of loop gets the job done in the simplest way.