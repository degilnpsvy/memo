<H1 class=SECT1><A name=LOOPCONTROL></A>11.3. Loop Control</H1>
<TABLE class=EPIGRAPH border=0 cellSpacing=0 cellPadding=0 width="100%">
<TBODY>
<TR>
<TD width="45%">&nbsp;</TD>
<TD vAlign=top width="45%" align=left><I>
<P><I>Tournez cent tours, tournez mille tours,</I></P>
<P><I>Tournez souvent et tournez toujours . . .</I></P>
<P><I>--Verlaine, <SPAN class=QUOTE>"Chevaux de bois"</SPAN></I></P></I></TD></TR></TBODY></TABLE>
<P></P>
<DIV class=VARIABLELIST>
<P><B><A name=BRKCONT1></A>Commands affecting loop behavior</B></P>
<DL>
<DT><B class=COMMAND>break</B>, <B class=COMMAND>continue</B> 
<DD>
<P>The <B class=COMMAND>break</B> and <B class=COMMAND>continue</B> loop control commands <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FTN.AEN6981" name=AEN6981><SPAN class=footnote>[53]</SPAN></A> correspond exactly to their counterparts in other programming languages. The <B class=COMMAND>break</B> command terminates the loop (<EM>breaks</EM> out of it), while <B class=COMMAND>continue</B> causes a jump to the next <A href="http://tldp.org/LDP/abs/html/abs-guide.html#ITERATIONREF">iteration</A> of the loop, skipping all the remaining commands in that particular loop cycle.</P>
<DIV class=EXAMPLE><A name=EX28></A>
<P><B>Example 11-21. Effects of <I class=FIRSTTERM>break</I> and <B class=COMMAND>continue</B> in a loop</B></P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash

LIMIT=19  # Upper limit

echo
echo "Printing Numbers 1 through 20 (but not 3 and 11)."

a=0

while [ $a -le "$LIMIT" ]
do
 a=$(($a+1))

 if [ "$a" -eq 3 ] || [ "$a" -eq 11 ]  # Excludes 3 and 11.
 then
   continue      # Skip rest of this particular loop iteration.
 fi

 echo -n "$a "   # This will not execute for 3 and 11.
done 

# Exercise:
# Why does the loop print up to 20?

echo; echo

echo Printing Numbers 1 through 20, but something happens after 2.

##################################################################

# Same loop, but substituting 'break' for 'continue'.

a=0

while [ "$a" -le "$LIMIT" ]
do
 a=$(($a+1))

 if [ "$a" -gt 2 ]
 then
   break  # Skip entire rest of loop.
 fi

 echo -n "$a "
done

echo; echo; echo

exit 0</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<P><A name=BREAKPARAM></A></P>
<P>The <B class=COMMAND>break</B> command may optionally take a parameter. A plain <B class=COMMAND>break</B> terminates only the innermost loop in which it is embedded, but a <B class=COMMAND>break N</B> breaks out of <TT class=PARAMETER><I>N</I></TT> levels of loop.</P>
<DIV class=EXAMPLE><A name=BREAKLEVELS></A>
<P><B>Example 11-22. Breaking out of multiple loop levels</B></P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# break-levels.sh: Breaking out of loops.

# "break N" breaks out of N level loops.

for outerloop in 1 2 3 4 5
do
  echo -n "Group $outerloop:   "

  # --------------------------------------------------------
  for innerloop in 1 2 3 4 5
  do
    echo -n "$innerloop "

    if [ "$innerloop" -eq 3 ]
    then
      break  # Try   break 2   to see what happens.
             # ("Breaks" out of both inner and outer loops.)
    fi
  done
  # --------------------------------------------------------

  echo
done  

echo

exit 0</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<P>The <B class=COMMAND>continue</B> command, similar to <B class=COMMAND>break</B>, optionally takes a parameter. A plain <B class=COMMAND>continue</B> cuts short the current iteration within its loop and begins the next. A <B class=COMMAND>continue N</B> terminates all remaining iterations at its loop level and continues with the next iteration at the loop, <TT class=OPTION>N</TT> levels above.</P>
<DIV class=EXAMPLE><A name=CONTINUELEVELS></A>
<P><B>Example 11-23. Continuing at a higher loop level</B></P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# The "continue N" command, continuing at the Nth level loop.

for outer in I II III IV V           # outer loop
do
  echo; echo -n "Group $outer: "

  # --------------------------------------------------------------------
  for inner in 1 2 3 4 5 6 7 8 9 10  # inner loop
  do

    if [[ "$inner" -eq 7 &amp;&amp; "$outer" = "III" ]]
    then
      continue 2  # Continue at loop on 2nd level, that is "outer loop".
                  # Replace above line with a simple "continue"
                  # to see normal loop behavior.
    fi  

    echo -n "$inner "  # 7 8 9 10 will not echo on "Group III."
  done  
  # --------------------------------------------------------------------

done

echo; echo

# Exercise:
# Come up with a meaningful use for "continue N" in a script.

exit 0</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<DIV class=EXAMPLE><A name=CONTINUENEX></A>
<P><B>Example 11-24. Using <I class=FIRSTTERM>continue N</I> in an actual task</B></P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING># Albert Reiner gives an example of how to use "continue N":
# ---------------------------------------------------------

#  Suppose I have a large number of jobs that need to be run, with
#+ any data that is to be treated in files of a given name pattern
#+ in a directory. There are several machines that access
#+ this directory, and I want to distribute the work over these
#+ different boxen.
#  Then I usually nohup something like the following on every box:

while true
do
  for n in .iso.*
  do
    [ "$n" = ".iso.opts" ] &amp;&amp; continue
    beta=${n#.iso.}
    [ -r .Iso.$beta ] &amp;&amp; continue
    [ -r .lock.$beta ] &amp;&amp; sleep 10 &amp;&amp; continue
    lockfile -r0 .lock.$beta || continue
    echo -n "$beta: " `date`
    run-isotherm $beta
    date
    ls -alF .Iso.$beta
    [ -r .Iso.$beta ] &amp;&amp; rm -f .lock.$beta
    continue 2
  done
  break
done

exit 0

#  The details, in particular the sleep N, are particular to my
#+ application, but the general pattern is:

while true
do
  for job in {pattern}
  do
    {job already done or running} &amp;&amp; continue
    {mark job as running, do job, mark job as done}
    continue 2
  done
  break        # Or something like `sleep 600' to avoid termination.
done

#  This way the script will stop only when there are no more jobs to do
#+ (including jobs that were added during runtime). Through the use
#+ of appropriate lockfiles it can be run on several machines
#+ concurrently without duplication of calculations [which run a couple
#+ of hours in my case, so I really want to avoid this]. Also, as search
#+ always starts again from the beginning, one can encode priorities in
#+ the file names. Of course, one could also do this without `continue 2',
#+ but then one would have to actually check whether or not some job
#+ was done (so that we should immediately look for the next job) or not
#+ (in which case we terminate or sleep for a long time before checking
#+ for a new job).</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<DIV class=CAUTION>
<P></P>
<TABLE class=CAUTION border=0 width="90%">
<TBODY>
<TR>
<TD vAlign=top width=25 align=middle><IMG hspace=5 alt=Caution src="http://tldp.org/LDP/abs/images/caution.gif"></TD>
<TD vAlign=top align=left>
<P>The <B class=COMMAND>continue N</B> construct is difficult to understand and tricky to use in any meaningful context. It is probably best avoided.</P></TD></TR></TBODY></TABLE></DIV></DD></DL></DIV>