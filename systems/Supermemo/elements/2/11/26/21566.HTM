<H1><A name=ARITHEXP></A>Chapter 13. Arithmetic Expansion</H1>
<P><A name=ARITHEXPREF></A>Arithmetic expansion provides a powerful tool for performing (integer) arithmetic operations in scripts. Translating a string into a numerical expression is relatively straightforward using <I class=FIRSTTERM>backticks</I>, <I class=FIRSTTERM>double parentheses</I>, or <I class=FIRSTTERM>let</I>.</P>
<P></P>
<DIV class=VARIABLELIST>
<P><B><A name=ARITHEXPVAR1></A>Variations</B></P>
<DL>
<DT>Arithmetic expansion with <A href="http://tldp.org/LDP/abs/html/abs-guide.html#BACKQUOTESREF">backticks</A> (often used in conjunction with <A href="http://tldp.org/LDP/abs/html/abs-guide.html#EXPRREF">expr</A>) 
<DD>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>z=`expr $z + 3`          # The 'expr' command performs the expansion.</PRE></FONT></TD></TR></TBODY></TABLE></P>
<DT>Arithmetic expansion with <A href="http://tldp.org/LDP/abs/html/abs-guide.html#DBLPARENS">double parentheses</A>, and using <A href="http://tldp.org/LDP/abs/html/abs-guide.html#LETREF">let</A> 
<DD>
<P>The use of <I class=FIRSTTERM>backticks</I> (<I class=FIRSTTERM>backquotes</I>) in arithmetic expansion has been superseded by <I class=FIRSTTERM>double parentheses</I> -- <TT class=USERINPUT><B>((...))</B></TT> and <TT class=USERINPUT><B>$((...))</B></TT> -- and also by the very convenient <A href="http://tldp.org/LDP/abs/html/abs-guide.html#LETREF">let</A> construction.</P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>z=$(($z+3))
z=$((z+3))                                  #  Also correct.
                                            #  Within double parentheses,
                                            #+ parameter dereferencing
                                            #+ is optional.

# $((EXPRESSION)) is arithmetic expansion.  #  Not to be confused with
                                            #+ command substitution.



# You may also use operations within double parentheses without assignment.

  n=0
  echo "n = $n"                             # n = 0

  (( n += 1 ))                              # Increment.
# (( $n += 1 )) is incorrect!
  echo "n = $n"                             # n = 1


let z=z+3
let "z += 3"  #  Quotes permit the use of spaces in variable assignment.
              #  The 'let' operator actually performs arithmetic evaluation,
              #+ rather than expansion.</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>Examples of arithmetic expansion in scripts: 
<P></P>
<OL type=1>
<LI>
<P><A href="http://tldp.org/LDP/abs/html/abs-guide.html#EX45">Example 16-9</A></P>
<LI>
<P><A href="http://tldp.org/LDP/abs/html/abs-guide.html#EX25">Example 11-15</A></P>
<LI>
<P><A href="http://tldp.org/LDP/abs/html/abs-guide.html#EX66">Example 27-1</A></P>
<LI>
<P><A href="http://tldp.org/LDP/abs/html/abs-guide.html#BUBBLE">Example 27-11</A></P>
<LI>
<P><A href="http://tldp.org/LDP/abs/html/abs-guide.html#TREE">Example A-16</A></P></LI></OL>
<P></P></DD></DL></DIV>