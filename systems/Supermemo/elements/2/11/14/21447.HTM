KBUILD_CFLAGS&nbsp;+= $(call cc-option,-fno-delete-null-pointer-checks,)
<P></P>
<P>ifdef CONFIG_CC_OPTIMIZE_FOR_SIZE<BR>KBUILD_CFLAGS&nbsp;+= -Os $(call cc-disable-warning,maybe-uninitialized,)<BR>else<BR>KBUILD_CFLAGS&nbsp;+= -O2<BR>endif</P>
<P># Tell gcc to never replace conditional load with a non-conditional one<BR>KBUILD_CFLAGS&nbsp;+= $(call cc-option,--param=allow-store-data-races=0)</P>
<P>ifdef CONFIG_READABLE_ASM<BR># Disable optimizations that make assembler listings hard to read.<BR># reorder blocks reorders the control in the function<BR># ipa clone creates specialized cloned functions<BR># partial inlining inlines only parts of functions<BR>KBUILD_CFLAGS += $(call cc-option,-fno-reorder-blocks,) \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(call cc-option,-fno-ipa-cp-clone,) \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(call cc-option,-fno-partial-inlining)<BR>endif</P>
<P>ifneq ($(CONFIG_FRAME_WARN),0)<BR>KBUILD_CFLAGS += $(call cc-option,-Wframe-larger-than=${CONFIG_FRAME_WARN})<BR>endif