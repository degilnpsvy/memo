#<BR># Additionally, we don't want to fallback and/or silently change which compiler<BR># flags will be used, since that leads to producing kernels with different<BR># security feature characteristics depending on the compiler used. ("But I<BR># selected CC_STACKPROTECTOR_STRONG! Why did it build with _REGULAR?!")<BR>#<BR># The middle ground is to warn here so that the failed option is obvious, but<BR># to let the build fail with bad compiler flags so that we can't produce a<BR># kernel when there is a CONFIG and compiler mismatch.<BR>#<BR>ifdef CONFIG_CC_STACKPROTECTOR_REGULAR<BR>&nbsp; stackp-flag := -fstack-protector<BR>&nbsp; ifeq ($(call cc-option, $(stackp-flag)),)<BR>&nbsp;&nbsp;&nbsp; $(warning Cannot use CONFIG_CC_STACKPROTECTOR_REGULAR: \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -fstack-protector not supported by compiler)<BR>&nbsp; endif<BR>else<BR>ifdef CONFIG_CC_STACKPROTECTOR_STRONG<BR>&nbsp; stackp-flag := -fstack-protector-strong<BR>&nbsp; ifeq ($(call cc-option, $(stackp-flag)),)<BR>&nbsp;&nbsp;&nbsp; $(warning Cannot use CONFIG_CC_STACKPROTECTOR_STRONG: \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -fstack-protector-strong not supported by compiler)<BR>&nbsp; endif<BR>else<BR>&nbsp; # Force off for distro compilers that enable stack protector by default.<BR>&nbsp; stackp-flag := $(call cc-option, -fno-stack-protector)<BR>endif<BR>endif<BR>KBUILD_CFLAGS += $(stackp-flag)
<P></P>
<P>ifeq ($(COMPILER),clang)<BR>KBUILD_CPPFLAGS += $(call cc-option,-Qunused-arguments,)<BR>KBUILD_CPPFLAGS += $(call cc-option,-Wno-unknown-warning-option,)<BR>KBUILD_CFLAGS += $(call cc-disable-warning, unused-variable)<BR>KBUILD_CFLAGS += $(call cc-disable-warning, format-invalid-specifier)<BR>KBUILD_CFLAGS += $(call cc-disable-warning, gnu)<BR># Quiet clang warning: comparison of unsigned expression &lt; 0 is always false<BR>KBUILD_CFLAGS += $(call cc-disable-warning, tautological-compare)<BR># CLANG uses a _MergedGlobals as optimization, but this breaks modpost, as the<BR># source of a reference will be _MergedGlobals and not on of the whitelisted names.<BR># See modpost pattern 2<BR>KBUILD_CFLAGS += $(call cc-option, -mno-global-merge,)<BR>KBUILD_CFLAGS += $(call cc-option, -fcatch-undefined-behavior)<BR>else</P>
<P># This warning generated too much noise in a regular build.<BR># Use make W=1 to enable this warning (see scripts/Makefile.build)<BR>KBUILD_CFLAGS += $(call cc-disable-warning, unused-but-set-variable)<BR>endif</P>
<P>ifdef CONFIG_FRAME_POINTER<BR>KBUILD_CFLAGS&nbsp;+= -fno-omit-frame-pointer -fno-optimize-sibling-calls<BR>else<BR># Some targets (ARM with Thumb2, for example), can't be built with frame<BR># pointers.&nbsp; For those, we don't have FUNCTION_TRACER automatically<BR># select FRAME_POINTER.&nbsp; However, FUNCTION_TRACER adds -pg, and this is<BR># incompatible with -fomit-frame-pointer with current GCC, so we don't use<BR># -fomit-frame-pointer with FUNCTION_TRACER.<BR>ifndef CONFIG_FUNCTION_TRACER<BR>KBUILD_CFLAGS&nbsp;+= -fomit-frame-pointer<BR>endif<BR>endif</P>
<P>KBUILD_CFLAGS&nbsp;&nbsp; += $(call cc-option, -fno-var-tracking-assignments)</P>
<P>ifdef CONFIG_DEBUG_INFO<BR>ifdef CONFIG_DEBUG_INFO_SPLIT<BR>KBUILD_CFLAGS&nbsp;&nbsp; += $(call cc-option, -gsplit-dwarf, -g)<BR>else<BR>KBUILD_CFLAGS&nbsp;+= -g<BR>endif<BR>KBUILD_AFLAGS&nbsp;+= -Wa,-gdwarf-2<BR>endif<BR>ifdef CONFIG_DEBUG_INFO_DWARF4<BR>KBUILD_CFLAGS&nbsp;+= $(call cc-option, -gdwarf-4,)<BR>endif</P>
<P>ifdef CONFIG_DEBUG_INFO_REDUCED<BR>KBUILD_CFLAGS &nbsp;+= $(call cc-option, -femit-struct-debug-baseonly) \<BR>&nbsp;&nbsp;&nbsp;&nbsp; $(call cc-option,-fno-var-tracking)<BR>endif</P>
<P>ifdef CONFIG_FUNCTION_TRACER<BR>ifndef CC_FLAGS_FTRACE<BR>CC_FLAGS_FTRACE := -pg<BR>endif<BR>export CC_FLAGS_FTRACE<BR>ifdef CONFIG_HAVE_FENTRY<BR>CC_USING_FENTRY&nbsp;:= $(call cc-option, -mfentry -DCC_USING_FENTRY)<BR>endif<BR>KBUILD_CFLAGS&nbsp;+= $(CC_FLAGS_FTRACE) $(CC_USING_FENTRY)<BR>KBUILD_AFLAGS&nbsp;+= $(CC_USING_FENTRY)<BR>ifdef CONFIG_DYNAMIC_FTRACE<BR>&nbsp;ifdef CONFIG_HAVE_C_RECORDMCOUNT<BR>&nbsp;&nbsp;BUILD_C_RECORDMCOUNT := y<BR>&nbsp;&nbsp;export BUILD_C_RECORDMCOUNT<BR>&nbsp;endif<BR>endif<BR>endif</P>
<P># We trigger additional mismatches with less inlining<BR>ifdef CONFIG_DEBUG_SECTION_MISMATCH<BR>KBUILD_CFLAGS += $(call cc-option, -fno-inline-functions-called-once)<BR>endif</P>
<P># arch Makefile may override CC so keep this after arch Makefile is included<BR>NOSTDINC_FLAGS += -nostdinc -isystem $(shell $(CC) -print-file-name=include)<BR>CHECKFLAGS&nbsp;&nbsp;&nbsp;&nbsp; += $(NOSTDINC_FLAGS)</P>
<P># warn about C99 declaration after statement<BR>KBUILD_CFLAGS += $(call cc-option,-Wdeclaration-after-statement,)</P>
<P># disable pointer signed / unsigned warnings in gcc 4.0<BR>KBUILD_CFLAGS += $(call cc-disable-warning, pointer-sign)</P>
<P># disable invalid "can't wrap" optimizations for signed / pointers<BR>KBUILD_CFLAGS&nbsp;+= $(call cc-option,-fno-strict-overflow)</P>
<P># conserve stack if available<BR>KBUILD_CFLAGS&nbsp;&nbsp; += $(call cc-option,-fconserve-stack)</P>
<P># disallow errors like 'EXPORT_GPL(foo);' with missing header<BR>KBUILD_CFLAGS&nbsp;&nbsp; += $(call cc-option,-Werror=implicit-int)</P>
<P># require functions to have arguments in prototypes, not empty 'int foo()'<BR>KBUILD_CFLAGS&nbsp;&nbsp; += $(call cc-option,-Werror=strict-prototypes)</P>
<P># Prohibit date/time macros, which would make the build non-deterministic<BR>KBUILD_CFLAGS&nbsp;&nbsp; += $(call cc-option,-Werror=date-time)</P>
<P># use the deterministic mode of AR if available<BR>KBUILD_ARFLAGS := $(call ar-option,D)</P>
<P># check for 'asm goto'<BR>ifeq ($(shell $(CONFIG_SHELL) $(srctree)/scripts/gcc-goto.sh $(CC)), y)<BR>&nbsp;KBUILD_CFLAGS += -DCC_HAVE_ASM_GOTO<BR>endif</P>
<P>include $(srctree)/scripts/Makefile.kasan<BR>include $(srctree)/scripts/Makefile.extrawarn</P>
<P># Add user supplied CPPFLAGS, AFLAGS and CFLAGS as the last assignments<BR>KBUILD_CPPFLAGS += $(KCPPFLAGS)<BR>KBUILD_AFLAGS += $(KAFLAGS)<BR>KBUILD_CFLAGS += $(KCFLAGS)</P>
<P># Use --build-id when available.<BR>LDFLAGS_BUILD_ID = $(patsubst -Wl$(comma)%,%,\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(call cc-ldoption, -Wl$(comma)--build-id,))<BR>KBUILD_LDFLAGS_MODULE += $(LDFLAGS_BUILD_ID)<BR>LDFLAGS_vmlinux += $(LDFLAGS_BUILD_ID)</P>
<P>ifeq ($(CONFIG_STRIP_ASM_SYMS),y)<BR>LDFLAGS_vmlinux&nbsp;+= $(call ld-option, -X,)<BR>endif