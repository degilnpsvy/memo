# ===========================================================================<BR># Rules shared between *config targets and build targets</P>
<P># Basic helpers built in scripts/<BR>PHONY += scripts_basic<BR>scripts_basic:<BR>&nbsp;$(Q)$(MAKE) $(build)=scripts/basic<BR>&nbsp;$(Q)rm -f .tmp_quiet_recordmcount</P>
<P># To avoid any implicit rule to kick in, define an empty command.<BR>scripts/basic/%: scripts_basic ;</P>
<P>PHONY += outputmakefile<BR># outputmakefile generates a Makefile in the output directory, if using a<BR># separate output directory. This allows convenient use of make in the<BR># output directory.<BR>outputmakefile:<BR>ifneq ($(KBUILD_SRC),)<BR>&nbsp;$(Q)ln -fsn $(srctree) source<BR>&nbsp;$(Q)$(CONFIG_SHELL) $(srctree)/scripts/mkmakefile \<BR>&nbsp;&nbsp;&nbsp;&nbsp; $(srctree) $(objtree) $(VERSION) $(PATCHLEVEL)<BR>endif</P>
<P># Support for using generic headers in asm-generic<BR>PHONY += asm-generic<BR>asm-generic:<BR>&nbsp;$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.asm-generic \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; src=asm obj=arch/$(SRCARCH)/include/generated/asm<BR>&nbsp;$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.asm-generic \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; src=uapi/asm obj=arch/$(SRCARCH)/include/generated/uapi/asm</P>
<P># To make sure we do not include .config for any of the *config targets<BR># catch them early, and hand them over to scripts/kconfig/Makefile<BR># It is allowed to specify more targets when calling make, including<BR># mixing *config targets and build targets.<BR># For example 'make oldconfig all'.<BR># Detect when mixed targets is specified, and make a second invocation<BR># of make so .config is not included in this case either (for *config).</P>
<P>version_h := include/generated/uapi/linux/version.h<BR>old_version_h := include/linux/version.h</P>
<P>no-dot-config-targets := clean mrproper distclean \<BR>&nbsp;&nbsp;&nbsp; cscope gtags TAGS tags help% %docs check% coccicheck \<BR>&nbsp;&nbsp;&nbsp; $(version_h) headers_% archheaders archscripts \<BR>&nbsp;&nbsp;&nbsp; kernelversion %src-pkg</P>
<P>config-targets := 0<BR>mixed-targets&nbsp; := 0<BR>dot-config&nbsp;&nbsp;&nbsp;&nbsp; := 1</P>
<P>ifneq ($(filter $(no-dot-config-targets), $(MAKECMDGOALS)),)<BR>&nbsp;ifeq ($(filter-out $(no-dot-config-targets), $(MAKECMDGOALS)),)<BR>&nbsp;&nbsp;dot-config := 0<BR>&nbsp;endif<BR>endif</P>
<P>ifeq ($(KBUILD_EXTMOD),)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ifneq ($(filter config %config,$(MAKECMDGOALS)),)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; config-targets := 1<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ifneq ($(words $(MAKECMDGOALS)),1)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mixed-targets := 1<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; endif<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; endif<BR>endif</P>
<P>ifeq ($(mixed-targets),1)<BR># ===========================================================================<BR># We're called with mixed targets (*config and build targets).<BR># Handle them one by one.</P>
<P>PHONY += $(MAKECMDGOALS) __build_one_by_one</P>
<P>$(filter-out __build_one_by_one, $(MAKECMDGOALS)): __build_one_by_one<BR>&nbsp;@:</P>
<P>__build_one_by_one:<BR>&nbsp;$(Q)set -e; \<BR>&nbsp;for i in $(MAKECMDGOALS); do \<BR>&nbsp;&nbsp;$(MAKE) -f $(srctree)/Makefile $$i; \<BR>&nbsp;done</P>
<P>else<BR>ifeq ($(config-targets),1)<BR># ===========================================================================<BR># *config targets only - make sure prerequisites are updated, and descend<BR># in scripts/kconfig to make the *config target</P>
<P># Read arch specific Makefile to set KBUILD_DEFCONFIG as needed.<BR># KBUILD_DEFCONFIG may point out an alternative default configuration<BR># used for 'make defconfig'<BR>include $(srctree)/arch/$(SRCARCH)/Makefile<BR>export KBUILD_DEFCONFIG KBUILD_KCONFIG</P>
<P>config: scripts_basic outputmakefile FORCE<BR>&nbsp;$(Q)$(MAKE) $(build)=scripts/kconfig $@</P>
<P>%config: scripts_basic outputmakefile FORCE<BR>&nbsp;$(Q)$(MAKE) $(build)=scripts/kconfig $@</P>
<P>else<BR># ===========================================================================<BR># Build targets only - this includes vmlinux, arch specific targets, clean<BR># targets and others. In general all targets except *config targets.</P>
<P>ifeq ($(KBUILD_EXTMOD),)<BR># Additional helpers built in scripts/<BR># Carefully list dependencies so we do not try to build scripts twice<BR># in parallel<BR>PHONY += scripts<BR>scripts: scripts_basic include/config/auto.conf include/config/tristate.conf \<BR>&nbsp; asm-generic<BR>&nbsp;$(Q)$(MAKE) $(build)=$(@)</P>
<P># Objects we will link into vmlinux / subdirs we need to visit<BR>init-y&nbsp;&nbsp;:= init/<BR>drivers-y&nbsp;:= drivers/ sound/ firmware/<BR>net-y&nbsp;&nbsp;:= net/<BR>libs-y&nbsp;&nbsp;:= lib/<BR>core-y&nbsp;&nbsp;:= usr/<BR>endif # KBUILD_EXTMOD</P>
<P>ifeq ($(dot-config),1)<BR># Read in config<BR>-include include/config/auto.conf</P>
<P>ifeq ($(KBUILD_EXTMOD),)<BR># Read in dependencies to all Kconfig* files, make sure to run<BR># oldconfig if changes are detected.<BR>-include include/config/auto.conf.cmd</P>
<P># To avoid any implicit rule to kick in, define an empty command<BR>$(KCONFIG_CONFIG) include/config/auto.conf.cmd: ;</P>
<P># If .config is newer than include/config/auto.conf, someone tinkered<BR># with it and forgot to run make oldconfig.<BR># if auto.conf.cmd is missing then we are probably in a cleaned tree so<BR># we execute the config step to be sure to catch updated Kconfig files<BR>include/config/%.conf: $(KCONFIG_CONFIG) include/config/auto.conf.cmd<BR>&nbsp;$(Q)$(MAKE) -f $(srctree)/Makefile silentoldconfig<BR>else<BR># external modules needs include/generated/autoconf.h and include/config/auto.conf<BR># but do not care if they are up-to-date. Use auto.conf to trigger the test<BR>PHONY += include/config/auto.conf</P>
<P>include/config/auto.conf:<BR>&nbsp;$(Q)test -e include/generated/autoconf.h -a -e $@ || (&nbsp;&nbsp;\<BR>&nbsp;echo &gt;&amp;2;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;echo &gt;&amp;2 "&nbsp; ERROR: Kernel configuration is invalid.";&nbsp;&nbsp;\<BR>&nbsp;echo &gt;&amp;2 "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; include/generated/autoconf.h or $@ are missing.";\<BR>&nbsp;echo &gt;&amp;2 "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Run 'make oldconfig &amp;&amp; make prepare' on kernel src to fix it.";&nbsp;\<BR>&nbsp;echo &gt;&amp;2 ;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;/bin/false)</P>
<P>endif # KBUILD_EXTMOD</P>
<P>else<BR># Dummy target needed, because used as prerequisite<BR>include/config/auto.conf: ;<BR>endif # $(dot-config)