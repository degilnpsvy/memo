ifeq ($(KBUILD_EXTMOD),)<BR><FONT class=extract>core-y&nbsp;&nbsp;+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/ </FONT>
<P></P>
<P><FONT class=extract>vmlinux-dirs&nbsp;:= $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(core-y) $(core-m) $(drivers-y) $(drivers-m) \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(net-y) $(net-m) $(libs-y) $(libs-m)))</FONT></P>
<P><FONT class=extract>vmlinux-alldirs&nbsp;:= $(sort $(vmlinux-dirs) $(patsubst %/,%,$(filter %/, \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $(init-) $(core-) $(drivers-) $(net-) $(libs-))))</FONT></P>
<P><FONT class=extract>init-y&nbsp;&nbsp;:= $(patsubst %/, %/built-in.o, $(init-y))<BR>core-y&nbsp;&nbsp;:= $(patsubst %/, %/built-in.o, $(core-y))<BR>drivers-y&nbsp;:= $(patsubst %/, %/built-in.o, $(drivers-y))<BR>net-y&nbsp;&nbsp;:= $(patsubst %/, %/built-in.o, $(net-y))<BR>libs-y1&nbsp;&nbsp;:= $(patsubst %/, %/lib.a, $(libs-y))<BR>libs-y2&nbsp;&nbsp;:= $(patsubst %/, %/built-in.o, $(libs-y))<BR>libs-y&nbsp;&nbsp;:= $(libs-y1) $(libs-y2)</FONT></P>
<P><FONT class=extract># Externally visible symbols (used by link-vmlinux.sh)<BR>export KBUILD_VMLINUX_INIT := $(head-y) $(init-y)<BR>export KBUILD_VMLINUX_MAIN := $(core-y) $(libs-y) $(drivers-y) $(net-y)<BR>export KBUILD_LDS&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := arch/$(SRCARCH)/kernel/vmlinux.lds<BR>export LDFLAGS_vmlinux<BR># used by scripts/pacmage/Makefile<BR>export KBUILD_ALLDIRS := $(sort $(filter-out arch/%,$(vmlinux-alldirs)) arch Documentation include samples scripts tools virt)</FONT></P>
<P><FONT class=extract>vmlinux-deps := $(KBUILD_LDS) $(KBUILD_VMLINUX_INIT) $(KBUILD_VMLINUX_MAIN)</FONT></P>
<P><FONT class=extract># Final link of vmlinux<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cmd_link-vmlinux = $(CONFIG_SHELL) $&lt; $(LD) $(LDFLAGS) $(LDFLAGS_vmlinux)<BR>quiet_cmd_link-vmlinux = LINK&nbsp;&nbsp;&nbsp; $@</FONT></P>
<P><FONT class=extract># Include targets which we want to<BR># execute if the rest of the kernel build went well.<BR>vmlinux: scripts/link-vmlinux.sh $(vmlinux-deps) FORCE<BR>ifdef CONFIG_HEADERS_CHECK<BR>&nbsp;$(Q)$(MAKE) -f $(srctree)/Makefile headers_check<BR>endif<BR>ifdef CONFIG_SAMPLES<BR>&nbsp;$(Q)$(MAKE) $(build)=samples<BR>endif<BR>ifdef CONFIG_BUILD_DOCSRC<BR>&nbsp;$(Q)$(MAKE) $(build)=Documentation<BR>endif<BR>ifdef CONFIG_GDB_SCRIPTS<BR>&nbsp;$(Q)ln -fsn `cd $(srctree) &amp;&amp; /bin/pwd`/scripts/gdb/vmlinux-gdb.py<BR>endif<BR>&nbsp;+$(call if_changed,link-vmlinux)</FONT></P>
<P><FONT class=extract># The actual objects are generated when descending,<BR># make sure no implicit rule kicks in<BR>$(sort $(vmlinux-deps)): $(vmlinux-dirs) ;</FONT></P>
<P><FONT class=extract># Handle descending into subdirectories listed in $(vmlinux-dirs)<BR># Preset locale variables to speed up the build process. Limit locale<BR># tweaks to this spot to avoid wrong language settings when running<BR># make menuconfig etc.<BR># Error messages still appears in the original language</FONT></P>
<P><FONT class=extract>PHONY += $(vmlinux-dirs)<BR>$(vmlinux-dirs): prepare scripts<BR>&nbsp;$(Q)$(MAKE) $(build)=$@</FONT></P>
<P><FONT class=extract>define filechk_kernel.release<BR>&nbsp;echo "$(KERNELVERSION)$$($(CONFIG_SHELL) $(srctree)/scripts/setlocalversion $(srctree))"<BR>endef</FONT></P>
<P><FONT class=extract># Store (new) KERNELRELEASE string in include/config/kernel.release<BR>include/config/kernel.release: include/config/auto.conf FORCE<BR>&nbsp;$(call filechk,kernel.release)</FONT></P>
<P><BR><FONT class=extract># Things we need to do before we recursively start building the kernel<BR># or the modules are listed in "prepare".<BR># A multi level approach is used. prepareN is processed before prepareN-1.<BR># archprepare is used in arch Makefiles and when processed asm symlink,<BR># version.h and scripts_basic is processed / created.</FONT></P>
<P><FONT class=extract># Listed in dependency order<BR>PHONY += prepare archprepare prepare0 prepare1 prepare2 prepare3</FONT></P>
<P><FONT class=extract># prepare3 is used to check if we are building in a separate output directory,<BR># and if so do:<BR># 1) Check that make has not been executed in the kernel src $(srctree)<BR>prepare3: include/config/kernel.release<BR>ifneq ($(KBUILD_SRC),)<BR>&nbsp;@$(kecho) '&nbsp; Using $(srctree) as source for kernel'<BR>&nbsp;$(Q)if [ -f $(srctree)/.config -o -d $(srctree)/include/config ]; then \<BR>&nbsp;&nbsp;echo &gt;&amp;2 "&nbsp; $(srctree) is not clean, please run 'make mrproper'"; \<BR>&nbsp;&nbsp;echo &gt;&amp;2 "&nbsp; in the '$(srctree)' directory.";\<BR>&nbsp;&nbsp;/bin/false; \<BR>&nbsp;fi;<BR>endif</FONT></P>
<P><FONT class=extract># prepare2 creates a makefile if using a separate output directory<BR>prepare2: prepare3 outputmakefile asm-generic</FONT></P>
<P><FONT class=extract>prepare1: prepare2 $(version_h) include/generated/utsrelease.h \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; include/config/auto.conf<BR>&nbsp;$(cmd_crmodverdir)</FONT></P>
<P><FONT class=extract>archprepare: archheaders archscripts prepare1 scripts_basic</FONT></P>
<P><FONT class=extract>prepare0: archprepare FORCE<BR>&nbsp;$(Q)$(MAKE) $(build)=.</FONT></P>
<P><FONT class=extract># All the preparing..<BR>prepare: prepare0</FONT></P>
<P><FONT class=extract># Generate some files<BR># ---------------------------------------------------------------------------</FONT></P>
<P><FONT class=extract># KERNELRELEASE can change from a few different places, meaning version.h<BR># needs to be updated, so this check is forced on all builds</FONT></P>
<P><FONT class=extract>uts_len := 64<BR>define filechk_utsrelease.h<BR>&nbsp;if [ `echo -n "$(KERNELRELEASE)" | wc -c ` -gt $(uts_len) ]; then \<BR>&nbsp;&nbsp; echo '"$(KERNELRELEASE)" exceeds $(uts_len) characters' &gt;&amp;2;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp; exit 1;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;fi;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;(echo \#define UTS_RELEASE \"$(KERNELRELEASE)\";)<BR>endef</FONT></P>
<P><FONT class=extract>define filechk_version.h<BR>&nbsp;(echo \#define LINUX_VERSION_CODE $(shell&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;expr $(VERSION) \* 65536 + 0$(PATCHLEVEL) \* 256 + 0$(SUBLEVEL)); \<BR>&nbsp;echo '#define KERNEL_VERSION(a,b,c) (((a) &lt;&lt; 16) + ((b) &lt;&lt; 8) + (c))';)<BR>endef</FONT></P>
<P><FONT class=extract>$(version_h): $(srctree)/Makefile FORCE<BR>&nbsp;$(call filechk,version.h)<BR>&nbsp;$(Q)rm -f $(old_version_h)</FONT></P>
<P><FONT class=extract>include/generated/utsrelease.h: include/config/kernel.release FORCE<BR>&nbsp;$(call filechk,utsrelease.h)</FONT></P>
<P><FONT class=extract>PHONY += headerdep<BR>headerdep:<BR>&nbsp;$(Q)find $(srctree)/include/ -name '*.h' | xargs --max-args 1 \<BR>&nbsp;$(srctree)/scripts/headerdep.pl -I$(srctree)/include</FONT></P>
<P># ---------------------------------------------------------------------------</P>
<P><FONT class=extract>PHONY += depend dep<BR>depend dep:<BR>&nbsp;@echo '*** Warning: make $@ is unnecessary now.'</FONT></P>
<P># ---------------------------------------------------------------------------<BR><FONT class=extract># Firmware install<BR>INSTALL_FW_PATH=$(INSTALL_MOD_PATH)/lib/firmware<BR>export INSTALL_FW_PATH</FONT></P>
<P><FONT class=extract>PHONY += firmware_install<BR>firmware_install: FORCE<BR>&nbsp;@mkdir -p $(objtree)/firmware<BR>&nbsp;$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.fwinst obj=firmware __fw_install</FONT></P>
<P># ---------------------------------------------------------------------------<BR><FONT class=extract># Kernel headers</FONT></P>
<P><FONT class=extract>#Default location for installed headers<BR>export INSTALL_HDR_PATH = $(objtree)/usr</FONT></P>
<P><FONT class=extract># If we do an all arch process set dst to asm-$(hdr-arch)<BR>hdr-dst = $(if $(KBUILD_HEADERS), dst=include/asm-$(hdr-arch), dst=include/asm)</FONT></P>
<P><FONT class=extract>PHONY += archheaders<BR>archheaders:</FONT></P>
<P><FONT class=extract>PHONY += archscripts<BR>archscripts:</FONT></P>
<P><FONT class=extract>PHONY += __headers<BR>__headers: $(version_h) scripts_basic asm-generic archheaders archscripts FORCE<BR>&nbsp;$(Q)$(MAKE) $(build)=scripts build_unifdef</FONT></P>
<P><FONT class=extract>PHONY += headers_install_all<BR>headers_install_all:<BR>&nbsp;$(Q)$(CONFIG_SHELL) $(srctree)/scripts/headers.sh install</FONT></P>
<P><FONT class=extract>PHONY += headers_install<BR>headers_install: __headers<BR>&nbsp;$(if $(wildcard $(srctree)/arch/$(hdr-arch)/include/uapi/asm/Kbuild),, \<BR>&nbsp;&nbsp; $(error Headers not exportable for the $(SRCARCH) architecture))<BR>&nbsp;$(Q)$(MAKE) $(hdr-inst)=include/uapi<BR>&nbsp;$(Q)$(MAKE) $(hdr-inst)=arch/$(hdr-arch)/include/uapi/asm $(hdr-dst)</FONT></P>
<P><FONT class=extract>PHONY += headers_check_all<BR>headers_check_all: headers_install_all<BR>&nbsp;$(Q)$(CONFIG_SHELL) $(srctree)/scripts/headers.sh check</FONT></P>
<P><FONT class=extract>PHONY += headers_check<BR>headers_check: headers_install<BR>&nbsp;$(Q)$(MAKE) $(hdr-inst)=include/uapi HDRCHECK=1<BR>&nbsp;$(Q)$(MAKE) $(hdr-inst)=arch/$(hdr-arch)/include/uapi/asm $(hdr-dst) HDRCHECK=1</FONT></P>
<P># ---------------------------------------------------------------------------<BR><FONT class=extract># Kernel selftest</FONT></P>
<P><FONT class=extract>PHONY += kselftest<BR>kselftest:<BR>&nbsp;$(Q)$(MAKE) -C tools/testing/selftests run_tests</FONT></P>
<P># ---------------------------------------------------------------------------<BR><FONT class=extract># Modules</FONT></P>
<P><FONT class=extract>ifdef CONFIG_MODULES</FONT></P>
<P><FONT class=extract># By default, build modules as well</FONT></P>
<P><FONT class=extract>all: modules</FONT></P>
<P><FONT class=extract># Build modules<BR>#<BR># A module can be listed more than once in obj-m resulting in<BR># duplicate lines in modules.order files.&nbsp; Those are removed<BR># using awk while concatenating to the final file.</FONT></P>
<P><FONT class=extract>PHONY += modules<BR>modules: $(vmlinux-dirs) $(if $(KBUILD_BUILTIN),vmlinux) modules.builtin<BR>&nbsp;$(Q)$(AWK) '!x[$$0]++' $(vmlinux-dirs:%=$(objtree)/%/modules.order) &gt; $(objtree)/modules.order<BR>&nbsp;@$(kecho) '&nbsp; Building modules, stage 2.';<BR>&nbsp;$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.modpost<BR>&nbsp;$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.fwinst obj=firmware __fw_modbuild</FONT></P>
<P><FONT class=extract>modules.builtin: $(vmlinux-dirs:%=%/modules.builtin)<BR>&nbsp;$(Q)$(AWK) '!x[$$0]++' $^ &gt; $(objtree)/modules.builtin</FONT></P>
<P><FONT class=extract>%/modules.builtin: include/config/auto.conf<BR>&nbsp;$(Q)$(MAKE) $(modbuiltin)=$*</FONT></P>
<P><BR><FONT class=extract># Target to prepare building external modules<BR>PHONY += modules_prepare<BR>modules_prepare: prepare scripts</FONT></P>
<P><FONT class=extract># Target to install modules<BR>PHONY += modules_install<BR>modules_install: _modinst_ _modinst_post</FONT></P>
<P><FONT class=extract>PHONY += _modinst_<BR>_modinst_:<BR>&nbsp;@rm -rf $(MODLIB)/kernel<BR>&nbsp;@rm -f $(MODLIB)/source<BR>&nbsp;@mkdir -p $(MODLIB)/kernel<BR>&nbsp;@ln -s `cd $(srctree) &amp;&amp; /bin/pwd` $(MODLIB)/source<BR>&nbsp;@if [ ! $(objtree) -ef&nbsp; $(MODLIB)/build ]; then \<BR>&nbsp;&nbsp;rm -f $(MODLIB)/build ; \<BR>&nbsp;&nbsp;ln -s $(CURDIR) $(MODLIB)/build ; \<BR>&nbsp;fi<BR>&nbsp;@cp -f $(objtree)/modules.order $(MODLIB)/<BR>&nbsp;@cp -f $(objtree)/modules.builtin $(MODLIB)/<BR>&nbsp;$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.modinst</FONT></P>
<P><FONT class=extract># This depmod is only for convenience to give the initial<BR># boot a modules.dep even before / is mounted read-write.&nbsp; However the<BR># boot script depmod is the master version.<BR>PHONY += _modinst_post<BR>_modinst_post: _modinst_<BR>&nbsp;$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.fwinst obj=firmware __fw_modinst<BR>&nbsp;$(call cmd,depmod)</FONT></P>
<P><FONT class=extract>ifeq ($(CONFIG_MODULE_SIG), y)<BR>PHONY += modules_sign<BR>modules_sign:<BR>&nbsp;$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.modsign<BR>endif</FONT></P>
<P><FONT class=extract>else # CONFIG_MODULES</FONT></P>
<P><FONT class=extract># Modules not configured<BR># ---------------------------------------------------------------------------</FONT></P>
<P><FONT class=extract>modules modules_install: FORCE<BR>&nbsp;@echo &gt;&amp;2<BR>&nbsp;@echo &gt;&amp;2 "The present kernel configuration has modules disabled."<BR>&nbsp;@echo &gt;&amp;2 "Type 'make config' and enable loadable module support."<BR>&nbsp;@echo &gt;&amp;2 "Then build a kernel with module support enabled."<BR>&nbsp;@echo &gt;&amp;2<BR>&nbsp;@exit 1</FONT></P>
<P><FONT class=extract>endif # CONFIG_MODULES</FONT></P>
<P><FONT class=extract>###<BR># Cleaning is done on three levels.<BR># make clean&nbsp;&nbsp;&nbsp;&nbsp; Delete most generated files<BR>#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Leave enough to build external modules<BR># make mrproper&nbsp; Delete the current configuration, and all generated files<BR># make distclean Remove editor backup files, patch leftover files and the like</FONT></P>
<P><FONT class=extract># Directories &amp; files removed with 'make clean'<BR>CLEAN_DIRS&nbsp; += $(MODVERDIR)</FONT></P>
<P><FONT class=extract># Directories &amp; files removed with 'make mrproper'<BR>MRPROPER_DIRS&nbsp; += include/config usr/include include/generated&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \<BR>&nbsp;&nbsp;&nbsp; arch/*/include/generated .tmp_objdiff<BR>MRPROPER_FILES += .config .config.old .version .old_version \<BR>&nbsp;&nbsp;&nbsp; Module.symvers tags TAGS cscope* GPATH GTAGS GRTAGS GSYMS \<BR>&nbsp;&nbsp;&nbsp; signing_key.priv signing_key.x509 x509.genkey&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp; extra_certificates signing_key.x509.keyid&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp; signing_key.x509.signer vmlinux-gdb.py</FONT></P>
<P><FONT class=extract># clean - Delete most, but leave enough to build external modules<BR>#<BR>clean: rm-dirs&nbsp; := $(CLEAN_DIRS)<BR>clean: rm-files := $(CLEAN_FILES)<BR>clean-dirs&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := $(addprefix _clean_, . $(vmlinux-alldirs) Documentation samples)</FONT></P>
<P><FONT class=extract>PHONY += $(clean-dirs) clean archclean vmlinuxclean<BR>$(clean-dirs):<BR>&nbsp;$(Q)$(MAKE) $(clean)=$(patsubst _clean_%,%,$@)</FONT></P>
<P><FONT class=extract>vmlinuxclean:<BR>&nbsp;$(Q)$(CONFIG_SHELL) $(srctree)/scripts/link-vmlinux.sh clean</FONT></P>
<P><FONT class=extract>clean: archclean vmlinuxclean</FONT></P>
<P><FONT class=extract># mrproper - Delete all generated files, including .config<BR>#<BR>mrproper: rm-dirs&nbsp; := $(wildcard $(MRPROPER_DIRS))<BR>mrproper: rm-files := $(wildcard $(MRPROPER_FILES))<BR>mrproper-dirs&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := $(addprefix _mrproper_,Documentation/DocBook scripts)</FONT></P>
<P><FONT class=extract>PHONY += $(mrproper-dirs) mrproper archmrproper<BR>$(mrproper-dirs):<BR>&nbsp;$(Q)$(MAKE) $(clean)=$(patsubst _mrproper_%,%,$@)</FONT></P>
<P><FONT class=extract>mrproper: clean archmrproper $(mrproper-dirs)<BR>&nbsp;$(call cmd,rmdirs)<BR>&nbsp;$(call cmd,rmfiles)</FONT></P>
<P><FONT class=extract># distclean<BR>#<BR>PHONY += distclean</FONT></P>
<P><FONT class=extract>distclean: mrproper<BR>&nbsp;@find $(srctree) $(RCS_FIND_IGNORE) \<BR>&nbsp;&nbsp;\( -name '*.orig' -o -name '*.rej' -o -name '*~' \<BR>&nbsp;&nbsp;-o -name '*.bak' -o -name '#*#' -o -name '.*.orig' \<BR>&nbsp;&nbsp;-o -name '.*.rej' -o -name '*%'&nbsp; -o -name 'core' \) \<BR>&nbsp;&nbsp;-type f -print | xargs rm -f</FONT></P>
<P><BR><FONT class=extract># Packaging of the kernel to various formats<BR># ---------------------------------------------------------------------------<BR># rpm target kept for backward compatibility<BR>package-dir&nbsp;:= scripts/package</FONT></P>
<P><FONT class=extract>%src-pkg: FORCE<BR>&nbsp;$(Q)$(MAKE) $(build)=$(package-dir) $@<BR>%pkg: include/config/kernel.release FORCE<BR>&nbsp;$(Q)$(MAKE) $(build)=$(package-dir) $@<BR>rpm: include/config/kernel.release FORCE<BR>&nbsp;$(Q)$(MAKE) $(build)=$(package-dir) $@</FONT></P>
<P><BR><FONT class=extract># Brief documentation of the typical targets used<BR># ---------------------------------------------------------------------------</FONT></P>
<P><FONT class=extract>boards := $(wildcard $(srctree)/arch/$(SRCARCH)/configs/*_defconfig)<BR>boards := $(sort $(notdir $(boards)))<BR>board-dirs := $(dir $(wildcard $(srctree)/arch/$(SRCARCH)/configs/*/*_defconfig))<BR>board-dirs := $(sort $(notdir $(board-dirs:/=)))</FONT></P>
<P><FONT class=extract>help:<BR>&nbsp;@echo&nbsp; 'Cleaning targets:'<BR>&nbsp;@echo&nbsp; '&nbsp; clean&nbsp;&nbsp;&nbsp; - Remove most generated files but keep the config and'<BR>&nbsp;@echo&nbsp; '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; enough build support to build external modules'<BR>&nbsp;@echo&nbsp; '&nbsp; mrproper&nbsp;&nbsp; - Remove all generated files + config + various backup files'<BR>&nbsp;@echo&nbsp; '&nbsp; distclean&nbsp;&nbsp; - mrproper + remove editor backup and patch files'<BR>&nbsp;@echo&nbsp; ''<BR>&nbsp;@echo&nbsp; 'Configuration targets:'<BR>&nbsp;@$(MAKE) -f $(srctree)/scripts/kconfig/Makefile help<BR>&nbsp;@echo&nbsp; ''<BR>&nbsp;@echo&nbsp; 'Other generic targets:'<BR>&nbsp;@echo&nbsp; '&nbsp; all&nbsp;&nbsp;&nbsp; - Build all targets marked with [*]'<BR>&nbsp;@echo&nbsp; '* vmlinux&nbsp;&nbsp; - Build the bare kernel'<BR>&nbsp;@echo&nbsp; '* modules&nbsp;&nbsp; - Build all modules'<BR>&nbsp;@echo&nbsp; '&nbsp; modules_install - Install all modules to INSTALL_MOD_PATH (default: /)'<BR>&nbsp;@echo&nbsp; '&nbsp; firmware_install- Install all firmware to INSTALL_FW_PATH'<BR>&nbsp;@echo&nbsp; '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (default: $$(INSTALL_MOD_PATH)/lib/firmware)'<BR>&nbsp;@echo&nbsp; '&nbsp; dir/&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Build all files in dir and below'<BR>&nbsp;@echo&nbsp; '&nbsp; dir/file.[oisS] - Build specified target only'<BR>&nbsp;@echo&nbsp; '&nbsp; dir/file.lst&nbsp;&nbsp;&nbsp; - Build specified mixed source/assembly target only'<BR>&nbsp;@echo&nbsp; '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (requires a recent binutils and recent build (System.map))'<BR>&nbsp;@echo&nbsp; '&nbsp; dir/file.ko&nbsp;&nbsp;&nbsp;&nbsp; - Build module including final link'<BR>&nbsp;@echo&nbsp; '&nbsp; modules_prepare - Set up for building external modules'<BR>&nbsp;@echo&nbsp; '&nbsp; tags/TAGS&nbsp;&nbsp; - Generate tags file for editors'<BR>&nbsp;@echo&nbsp; '&nbsp; cscope&nbsp;&nbsp; - Generate cscope index'<BR>&nbsp;@echo&nbsp; '&nbsp; gtags&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Generate GNU GLOBAL index'<BR>&nbsp;@echo&nbsp; '&nbsp; kernelrelease&nbsp;&nbsp; - Output the release version string (use with make -s)'<BR>&nbsp;@echo&nbsp; '&nbsp; kernelversion&nbsp;&nbsp; - Output the version stored in Makefile (use with make -s)'<BR>&nbsp;@echo&nbsp; '&nbsp; image_name&nbsp;&nbsp; - Output the image name (use with make -s)'<BR>&nbsp;@echo&nbsp; '&nbsp; headers_install - Install sanitised kernel headers to INSTALL_HDR_PATH'; \<BR>&nbsp; echo&nbsp; '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (default: $(INSTALL_HDR_PATH))'; \<BR>&nbsp; echo&nbsp; ''<BR>&nbsp;@echo&nbsp; 'Static analysers'<BR>&nbsp;@echo&nbsp; '&nbsp; checkstack&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Generate a list of stack hogs'<BR>&nbsp;@echo&nbsp; '&nbsp; namespacecheck&nbsp; - Name space analysis on compiled kernel'<BR>&nbsp;@echo&nbsp; '&nbsp; versioncheck&nbsp;&nbsp;&nbsp; - Sanity check on version.h usage'<BR>&nbsp;@echo&nbsp; '&nbsp; includecheck&nbsp;&nbsp;&nbsp; - Check for duplicate included header files'<BR>&nbsp;@echo&nbsp; '&nbsp; export_report&nbsp;&nbsp; - List the usages of all exported symbols'<BR>&nbsp;@echo&nbsp; '&nbsp; headers_check&nbsp;&nbsp; - Sanity check on exported headers'<BR>&nbsp;@echo&nbsp; '&nbsp; headerdep&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Detect inclusion cycles in headers'<BR>&nbsp;@$(MAKE) -f $(srctree)/scripts/Makefile.help checker-help<BR>&nbsp;@echo&nbsp; ''<BR>&nbsp;@echo&nbsp; 'Kernel selftest'<BR>&nbsp;@echo&nbsp; '&nbsp; kselftest&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - Build and run kernel selftest (run as root)'<BR>&nbsp;@echo&nbsp; '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Build, install, and boot kernel before'<BR>&nbsp;@echo&nbsp; '&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; running kselftest on it'<BR>&nbsp;@echo&nbsp; ''<BR>&nbsp;@echo&nbsp; 'Kernel packaging:'<BR>&nbsp;@$(MAKE) $(build)=$(package-dir) help<BR>&nbsp;@echo&nbsp; ''<BR>&nbsp;@echo&nbsp; 'Documentation targets:'<BR>&nbsp;@$(MAKE) -f $(srctree)/Documentation/DocBook/Makefile dochelp<BR>&nbsp;@echo&nbsp; ''<BR>&nbsp;@echo&nbsp; 'Architecture specific targets ($(SRCARCH)):'<BR>&nbsp;@$(if $(archhelp),$(archhelp),\<BR>&nbsp;&nbsp;echo '&nbsp; No architecture specific help defined for $(SRCARCH)')<BR>&nbsp;@echo&nbsp; ''<BR>&nbsp;@$(if $(boards), \<BR>&nbsp;&nbsp;$(foreach b, $(boards), \<BR>&nbsp;&nbsp;printf "&nbsp; %-24s - Build for %s\\n" $(b) $(subst _defconfig,,$(b));) \<BR>&nbsp;&nbsp;echo '')<BR>&nbsp;@$(if $(board-dirs), \<BR>&nbsp;&nbsp;$(foreach b, $(board-dirs), \<BR>&nbsp;&nbsp;printf "&nbsp; %-16s - Show %s-specific targets\\n" help-$(b) $(b);) \<BR>&nbsp;&nbsp;printf "&nbsp; %-16s - Show all of the above\\n" help-boards; \<BR>&nbsp;&nbsp;echo '')</FONT></P>
<P><FONT class=extract>&nbsp;@echo&nbsp; '&nbsp; make V=0|1 [targets] 0 =&gt; quiet build (default), 1 =&gt; verbose build'<BR>&nbsp;@echo&nbsp; '&nbsp; make V=2&nbsp;&nbsp; [targets] 2 =&gt; give reason for rebuild of target'<BR>&nbsp;@echo&nbsp; '&nbsp; make O=dir [targets] Locate all output files in "dir", including .config'<BR>&nbsp;@echo&nbsp; '&nbsp; make C=1&nbsp;&nbsp; [targets] Check all c source with $$CHECK (sparse by default)'<BR>&nbsp;@echo&nbsp; '&nbsp; make C=2&nbsp;&nbsp; [targets] Force check of all c source with $$CHECK'<BR>&nbsp;@echo&nbsp; '&nbsp; make RECORDMCOUNT_WARN=1 [targets] Warn about ignored mcount sections'<BR>&nbsp;@echo&nbsp; '&nbsp; make W=n&nbsp;&nbsp; [targets] Enable extra gcc checks, n=1,2,3 where'<BR>&nbsp;@echo&nbsp; '&nbsp;&nbsp;1: warnings which may be relevant and do not occur too often'<BR>&nbsp;@echo&nbsp; '&nbsp;&nbsp;2: warnings which occur quite often but may still be relevant'<BR>&nbsp;@echo&nbsp; '&nbsp;&nbsp;3: more obscure warnings, can most likely be ignored'<BR>&nbsp;@echo&nbsp; '&nbsp;&nbsp;Multiple levels can be combined with W=12 or W=123'<BR>&nbsp;@echo&nbsp; ''<BR>&nbsp;@echo&nbsp; 'Execute "make" or "make all" to build all targets marked with [*] '<BR>&nbsp;@echo&nbsp; 'For further info see the ./README file'</FONT></P>
<P><BR><FONT class=extract>help-board-dirs := $(addprefix help-,$(board-dirs))</FONT></P>
<P><FONT class=extract>help-boards: $(help-board-dirs)</FONT></P>
<P><FONT class=extract>boards-per-dir = $(sort $(notdir $(wildcard $(srctree)/arch/$(SRCARCH)/configs/$*/*_defconfig)))</FONT></P>
<P><FONT class=extract>$(help-board-dirs): help-%:<BR>&nbsp;@echo&nbsp; 'Architecture specific targets ($(SRCARCH) $*):'<BR>&nbsp;@$(if $(boards-per-dir), \<BR>&nbsp;&nbsp;$(foreach b, $(boards-per-dir), \<BR>&nbsp;&nbsp;printf "&nbsp; %-24s - Build for %s\\n" $*/$(b) $(subst _defconfig,,$(b));) \<BR>&nbsp;&nbsp;echo '')</FONT></P>
<P><BR><FONT class=extract># Documentation targets<BR># ---------------------------------------------------------------------------<BR>%docs: scripts_basic FORCE<BR>&nbsp;$(Q)$(MAKE) $(build)=scripts build_docproc<BR>&nbsp;$(Q)$(MAKE) $(build)=Documentation/DocBook $@</FONT></P>
<P>else # KBUILD_EXTMOD</P>
<P><FONT class=extract>###<BR># External module support.<BR># When building external modules the kernel used as basis is considered<BR># read-only, and no consistency checks are made and the make<BR># system is not used on the basis kernel. If updates are required<BR># in the basis kernel ordinary make commands (without M=...) must<BR># be used.<BR>#<BR># The following are the only valid targets when building external<BR># modules.<BR># make M=dir clean&nbsp;&nbsp;&nbsp;&nbsp; Delete all automatically generated files<BR># make M=dir modules&nbsp;&nbsp; Make all modules in specified dir<BR># make M=dir&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Same as 'make M=dir modules'<BR># make M=dir modules_install<BR>#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Install the modules built in the module directory<BR>#&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Assumes install directory is already created</FONT></P>
<P><FONT class=extract># We are always building modules<BR>KBUILD_MODULES := 1<BR>PHONY += crmodverdir<BR>crmodverdir:<BR>&nbsp;$(cmd_crmodverdir)</FONT></P>
<P><FONT class=extract>PHONY += $(objtree)/Module.symvers<BR>$(objtree)/Module.symvers:<BR>&nbsp;@test -e $(objtree)/Module.symvers || ( \<BR>&nbsp;echo; \<BR>&nbsp;echo "&nbsp; WARNING: Symbol version dump $(objtree)/Module.symvers"; \<BR>&nbsp;echo "&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; is missing; modules will have no dependencies and modversions."; \<BR>&nbsp;echo )</FONT></P>
<P><FONT class=extract>module-dirs := $(addprefix _module_,$(KBUILD_EXTMOD))<BR>PHONY += $(module-dirs) modules<BR>$(module-dirs): crmodverdir $(objtree)/Module.symvers<BR>&nbsp;$(Q)$(MAKE) $(build)=$(patsubst _module_%,%,$@)</FONT></P>
<P><FONT class=extract>modules: $(module-dirs)<BR>&nbsp;@$(kecho) '&nbsp; Building modules, stage 2.';<BR>&nbsp;$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.modpost</FONT></P>
<P><FONT class=extract>PHONY += modules_install<BR>modules_install: _emodinst_ _emodinst_post</FONT></P>
<P><FONT class=extract>install-dir := $(if $(INSTALL_MOD_DIR),$(INSTALL_MOD_DIR),extra)<BR>PHONY += _emodinst_<BR>_emodinst_:<BR>&nbsp;$(Q)mkdir -p $(MODLIB)/$(install-dir)<BR>&nbsp;$(Q)$(MAKE) -f $(srctree)/scripts/Makefile.modinst</FONT></P>
<P><FONT class=extract>PHONY += _emodinst_post<BR>_emodinst_post: _emodinst_<BR>&nbsp;$(call cmd,depmod)</FONT></P>
<P><FONT class=extract>clean-dirs := $(addprefix _clean_,$(KBUILD_EXTMOD))</FONT></P>
<P><FONT class=extract>PHONY += $(clean-dirs) clean<BR>$(clean-dirs):<BR>&nbsp;$(Q)$(MAKE) $(clean)=$(patsubst _clean_%,%,$@)</FONT></P>
<P><FONT class=extract>clean:&nbsp;rm-dirs := $(MODVERDIR)<BR>clean: rm-files := $(KBUILD_EXTMOD)/Module.symvers</FONT></P>
<P><FONT class=extract>help:<BR>&nbsp;@echo&nbsp; '&nbsp; Building external modules.'<BR>&nbsp;@echo&nbsp; '&nbsp; Syntax: make -C path/to/kernel/src M=$$PWD target'<BR>&nbsp;@echo&nbsp; ''<BR>&nbsp;@echo&nbsp; '&nbsp; modules&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - default target, build the module(s)'<BR>&nbsp;@echo&nbsp; '&nbsp; modules_install - install the module'<BR>&nbsp;@echo&nbsp; '&nbsp; clean&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - remove generated files in module directory only'<BR>&nbsp;@echo&nbsp; ''</FONT></P>
<P><FONT class=extract># Dummies...<BR>PHONY += prepare scripts<BR>prepare: ;<BR>scripts: ;<BR></FONT>endif # KBUILD_EXTMOD