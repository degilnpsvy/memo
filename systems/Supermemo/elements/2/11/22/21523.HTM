<H1><A name=WHY-SHELL></A>Chapter 1. Shell Programming!</H1>
<TABLE class=EPIGRAPH border=0 cellSpacing=0 cellPadding=0 width="100%">
<TBODY>
<TR>
<TD width="45%">&nbsp;</TD>
<TD vAlign=top width="45%" align=left><I>
<P><I>No programming language is perfect. There is not even a single best language; there are only languages well suited or perhaps poorly suited for particular purposes.</I></P>
<P><I>--Herbert Mayer</I></P></I></TD></TR></TBODY></TABLE>
<P>A working knowledge of shell scripting is essential to anyone wishing to become reasonably proficient at system administration, even if they do not anticipate ever having to actually write a script. Consider that as a Linux machine boots up, it executes the shell scripts in <TT class=FILENAME>/etc/rc.d</TT> to restore the system configuration and set up services. A detailed understanding of these startup scripts is important for analyzing the behavior of a system, and possibly modifying it.</P>
<P>The craft of scripting is not hard to master, since scripts can be built in bite-sized sections and there is only a fairly small set of shell-specific operators and options <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FTN.AEN62" name=AEN62><SPAN class=footnote>[1]</SPAN></A> to learn. The syntax is simple -- even austere -- similar to that of invoking and chaining together utilities at the command line, and there are only a few <SPAN class=QUOTE>"rules"</SPAN> governing their use. Most short scripts work right the first time, and debugging even the longer ones is straightforward.</P>
<P><A name=AEN67></A>
<BLOCKQUOTE class=BLOCKQUOTE>
<P class=LITERALLAYOUT>&nbsp;&nbsp;&nbsp;&nbsp;In&nbsp;the&nbsp;early&nbsp;days&nbsp;of&nbsp;personal&nbsp;computing,&nbsp;the&nbsp;BASIC&nbsp;language&nbsp;enabled<BR>&nbsp;&nbsp;&nbsp;&nbsp;anyone&nbsp;reasonably&nbsp;computer&nbsp;proficient&nbsp;to&nbsp;write&nbsp;programs&nbsp;on&nbsp;an&nbsp;early<BR>&nbsp;&nbsp;&nbsp;&nbsp;generation&nbsp;of&nbsp;microcomputers.&nbsp;Decades&nbsp;later,&nbsp;the&nbsp;Bash&nbsp;scripting<BR>&nbsp;&nbsp;&nbsp;&nbsp;language&nbsp;enables&nbsp;anyone&nbsp;with&nbsp;a&nbsp;rudimentary&nbsp;knowledge&nbsp;of&nbsp;Linux&nbsp;or<BR>&nbsp;&nbsp;&nbsp;&nbsp;UNIX&nbsp;to&nbsp;do&nbsp;the&nbsp;same&nbsp;on&nbsp;modern&nbsp;machines.<BR><BR>&nbsp;&nbsp;&nbsp;&nbsp;We&nbsp;now&nbsp;have&nbsp;miniaturized&nbsp;single-board&nbsp;computers&nbsp;with&nbsp;amazing<BR>&nbsp;&nbsp;&nbsp;&nbsp;capabilities,&nbsp;such&nbsp;as&nbsp;the&nbsp;<A href="http://www.raspberrypi.org/" target=_top>Raspberry Pi</A>.<BR>&nbsp;&nbsp;&nbsp;&nbsp;Bash&nbsp;scripting&nbsp;provides&nbsp;a&nbsp;way&nbsp;to&nbsp;explore&nbsp;the&nbsp;capabilities&nbsp;of&nbsp;these<BR>&nbsp;&nbsp;&nbsp;&nbsp;fascinating&nbsp;devices.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;</P></BLOCKQUOTE>
<P></P>
<P>A shell script is a quick-and-dirty method of prototyping a complex application. Getting even a limited subset of the functionality to work in a script is often a useful first stage in project development. In this way, the structure of the application can be tested and tinkered with, and the major pitfalls found before proceeding to the final coding in <I class=FIRSTTERM>C</I>, <I class=FIRSTTERM>C++</I>, <I class=FIRSTTERM>Java</I>, <A href="http://tldp.org/LDP/abs/html/abs-guide.html#PERLREF">Perl</A>, or <I class=FIRSTTERM>Python</I>.</P>
<P>Shell scripting hearkens back to the classic UNIX philosophy of breaking complex projects into simpler subtasks, of chaining together components and utilities. Many consider this a better, or at least more esthetically pleasing approach to problem solving than using one of the new generation of high-powered all-in-one languages, such as <I class=FIRSTTERM>Perl</I>, which attempt to be all things to all people, but at the cost of forcing you to alter your thinking processes to fit the tool.</P>
<P>According to <A href="http://tldp.org/LDP/abs/html/abs-guide.html#MAYERREF">Herbert Mayer</A>, <SPAN class=QUOTE>"a useful language needs arrays, pointers, and a generic mechanism for building data structures."</SPAN> By these criteria, shell scripting falls somewhat short of being <SPAN class=QUOTE>"useful."</SPAN> Or, perhaps not. . . .</P>
<TABLE class=SIDEBAR border=1 cellPadding=5>
<TBODY>
<TR>
<TD>
<DIV class=SIDEBAR><A name=AEN82></A>
<P></P>
<P>When not to use shell scripts 
<P></P>
<UL>
<LI>
<P>Resource-intensive tasks, especially where speed is a factor (sorting, hashing, recursion <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FTN.AEN87" name=AEN87><SPAN class=footnote>[2]</SPAN></A> ...)</P>
<LI>
<P>Procedures involving heavy-duty math operations, especially floating point arithmetic, arbitrary precision calculations, or complex numbers (use <I class=FIRSTTERM>C++</I> or <I class=FIRSTTERM>FORTRAN</I> instead)</P>
<LI>
<P>Cross-platform portability required (use <I class=FIRSTTERM>C</I> or <I class=FIRSTTERM>Java</I> instead)</P>
<LI>
<P>Complex applications, where structured programming is a necessity (type-checking of variables, function prototypes, etc.)</P>
<LI>
<P>Mission-critical applications upon which you are betting the future of the company</P>
<LI>
<P>Situations where <EM>security</EM> is important, where you need to guarantee the integrity of your system and protect against intrusion, cracking, and vandalism</P>
<LI>
<P>Project consists of subcomponents with interlocking dependencies</P>
<LI>
<P>Extensive file operations required (<I class=FIRSTTERM>Bash</I> is limited to serial file access, and that only in a particularly clumsy and inefficient line-by-line fashion.)</P>
<LI>
<P>Need native support for multi-dimensional arrays</P>
<LI>
<P>Need data structures, such as linked lists or trees</P>
<LI>
<P>Need to generate / manipulate graphics or GUIs</P>
<LI>
<P>Need direct access to system hardware or external peripherals</P>
<LI>
<P>Need port or <A href="http://tldp.org/LDP/abs/html/abs-guide.html#SOCKETREF">socket</A> I/O</P>
<LI>
<P>Need to use libraries or interface with legacy code</P>
<LI>
<P>Proprietary, closed-source applications (Shell scripts put the source code right out in the open for all the world to see.)</P></LI></UL>
<P></P>
<P>If any of the above applies, consider a more powerful scripting language -- perhaps <I class=FIRSTTERM>Perl</I>, <I class=FIRSTTERM>Tcl</I>, <I class=FIRSTTERM>Python</I>, <I class=FIRSTTERM>Ruby</I> -- or possibly a compiled language such as <I class=FIRSTTERM>C</I>, <I class=FIRSTTERM>C++</I>, or <I class=FIRSTTERM>Java</I>. Even then, prototyping the application as a shell script might still be a useful development step.</P>
<P></P></DIV></TD></TR></TBODY></TABLE>
<P><A name=BASHDEF></A></P>
<P>We will be using <SPAN class=ACRONYM>Bash</SPAN>, an acronym <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FTN.AEN139" name=AEN139><SPAN class=footnote>[3]</SPAN></A> for <SPAN class=QUOTE>"Bourne-Again shell"</SPAN> and a pun on Stephen Bourne's now classic <I class=FIRSTTERM>Bourne</I> shell. Bash has become a <I class=FOREIGNPHRASE>de facto</I> standard for shell scripting on most flavors of UNIX. Most of the principles this book covers apply equally well to scripting with other shells, such as the <I class=FIRSTTERM>Korn Shell</I>, from which Bash derives some of its features, <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FTN.AEN147" name=AEN147><SPAN class=footnote>[4]</SPAN></A> and the <I class=FIRSTTERM>C Shell</I> and its variants. (Note that <I class=FIRSTTERM>C Shell</I> programming is not recommended due to certain inherent problems, as pointed out in an October, 1993 <A href="http://www.faqs.org/faqs/unix-faq/shell/csh-whynot/" target=_top>Usenet post</A> by Tom Christiansen.) </P>
<P>What follows is a tutorial on shell scripting. It relies heavily on examples to illustrate various features of the shell. The example scripts work -- they've been tested, insofar as possible -- and some of them are even useful in real life. The reader can play with the actual working code of the examples in the source archive (<TT class=FILENAME>scriptname.sh</TT> or <TT class=FILENAME>scriptname.bash</TT>), <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FTN.AEN157" name=AEN157><SPAN class=footnote>[5]</SPAN></A> give them <I class=FIRSTTERM>execute</I> permission (<TT class=USERINPUT><B>chmod u+rx scriptname</B></TT>), then run them to see what happens. Should the <A href="http://bash.deta.in/abs-guide-latest.tar.bz2" target=_top>source archive</A> not be available, then cut-and-paste from the <A href="http://www.tldp.org/LDP/abs/abs-guide.html.tar.gz" target=_top>HTML</A> or <A href="http://bash.deta.in/abs-guide.pdf" target=_top>pdf</A> rendered versions. Be aware that some of the scripts presented here introduce features before they are explained, and this may require the reader to temporarily skip ahead for enlightenment.</P>
<P>Unless otherwise noted, <A href="mailto:thegrendel.abs@gmail.com" target=_top>the author</A> of this book wrote the example scripts that follow.</P>
<TABLE class=EPIGRAPH border=0 cellSpacing=0 cellPadding=0 width="100%">
<TBODY>
<TR>
<TD width="45%">&nbsp;</TD>
<TD vAlign=top width="45%" align=left><I>
<P><I>His countenance was bold and bashed not.</I></P>
<P><I>--Edmund Spenser</I></P></I></TD></TR></TBODY></TABLE>