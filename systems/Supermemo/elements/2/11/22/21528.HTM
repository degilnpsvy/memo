<H1><A name=SPECIAL-CHARS></A>Chapter 3. Special Characters</H1>
<P>What makes a character <I class=FIRSTTERM>special</I>? If it has a meaning beyond its <I class=FIRSTTERM>literal meaning</I>, a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#METAMEANINGREF">meta-meaning</A>, then we refer to it as a <I class=FIRSTTERM>special character</I>. Along with commands and <A href="http://tldp.org/LDP/abs/html/abs-guide.html#KEYWORDREF">keywords</A>, <I class=FIRSTTERM>special characters</I> are building blocks of Bash scripts.</P>
<P></P>
<DIV class=VARIABLELIST>
<P><B><A name=SCHARLIST1></A>Special Characters Found In Scripts and Elsewhere</B></P>
<DL>
<DT><A name=HASHMARKREF></A><SPAN class=TOKEN>#</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B>Comments. </B>Lines beginning with a <SPAN class=TOKEN>#</SPAN> (with the exception of <A href="http://tldp.org/LDP/abs/html/abs-guide.html#MAGNUMREF"><SPAN class=TOKEN>#!</SPAN></A>) are comments and will <EM>not</EM> be executed.</P></DIV>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING># This line is a comment.</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>Comments may also occur following the end of a command.</P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>echo "A comment will follow." # Comment here.
#                            ^ Note whitespace before #</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P><A name=WSBCOMM></A>Comments may also follow <A href="http://tldp.org/LDP/abs/html/abs-guide.html#WHITESPACEREF">whitespace</A> at the beginning of a line.</P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>     # A tab precedes this comment.</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P><A name=COMMINPIPE></A>Comments may even be embedded within a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#PIPEREF">pipe</A>.</P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>initial=( `cat "$startfile" | sed -e '/#/d' | tr -d '\n' |\
# Delete lines containing '#' comment character.
           sed -e 's/\./\. /g' -e 's/_/_ /g'` )
# Excerpted from life.sh script</PRE></FONT></TD></TR></TBODY></TABLE></P>
<DIV class=CAUTION>
<P></P>
<TABLE class=CAUTION border=0 width="90%">
<TBODY>
<TR>
<TD vAlign=top width=25 align=middle><IMG hspace=5 alt=Caution src="http://tldp.org/LDP/abs/images/caution.gif"></TD>
<TD vAlign=top align=left>
<P>A command may not follow a comment on the same line. There is no method of terminating the comment, in order for <SPAN class=QUOTE>"live code"</SPAN> to begin on the same line. Use a new line for the next command.</P></TD></TR></TBODY></TABLE></DIV>
<DIV class=NOTE>
<P></P>
<TABLE class=NOTE border=0 width="90%">
<TBODY>
<TR>
<TD vAlign=top width=25 align=middle><IMG hspace=5 alt=Note src="http://tldp.org/LDP/abs/images/note.gif"></TD>
<TD vAlign=top align=left>
<P>Of course, a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#QUOTINGREF">quoted</A> or an <A href="http://tldp.org/LDP/abs/html/abs-guide.html#ESCP">escaped</A> <SPAN class=TOKEN>#</SPAN> in an <A href="http://tldp.org/LDP/abs/html/abs-guide.html#ECHOREF">echo</A> statement does <EM>not</EM> begin a comment. Likewise, a <SPAN class=TOKEN>#</SPAN> appears in <A href="http://tldp.org/LDP/abs/html/abs-guide.html#PSUB2">certain parameter-substitution constructs</A> and in <A href="http://tldp.org/LDP/abs/html/abs-guide.html#NUMCONSTANTS">numerical constant expressions</A>. 
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>echo "The # here does not begin a comment."
echo 'The # here does not begin a comment.'
echo The \# here does not begin a comment.
echo The # here begins a comment.

echo ${PATH#*:}       # Parameter substitution, not a comment.
echo $(( 2#101011 ))  # Base conversion, not a comment.

# Thanks, S.C.</PRE></FONT></TD></TR></TBODY></TABLE>The standard <A href="http://tldp.org/LDP/abs/html/abs-guide.html#QUOTINGREF">quoting and escape</A> characters (" ' \) escape the #. </P></TD></TR></TBODY></TABLE></DIV>
<P>Certain <A href="http://tldp.org/LDP/abs/html/abs-guide.html#PSOREX1">pattern matching operations</A> also use the <SPAN class=TOKEN>#</SPAN>.</P>
<DT><A name=SEMICOLONREF></A><SPAN class=TOKEN>;</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B>Command separator [semicolon]. </B>Permits putting two or more commands on the same line.</P></DIV>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>echo hello; echo there


if [ -x "$filename" ]; then    #  Note the space after the semicolon.
#+                   ^^
  echo "File $filename exists."; cp $filename $filename.bak
else   #                       ^^
  echo "File $filename not found."; touch $filename
fi; echo "File test complete."</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>Note that the <SPAN class=QUOTE>"<SPAN class=TOKEN>;</SPAN>"</SPAN> <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FINDREF0">sometimes needs to be <I class=FIRSTTERM>escaped</I></A>.</P>
<DT><SPAN class=TOKEN>;;</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B>Terminator in a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#CASEESAC1">case</A> option [double semicolon]. </B><A name=DOUBLESEMICOLON></A></P></DIV>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>case "$variable" in
  abc)  echo "\$variable = abc" ;;
  xyz)  echo "\$variable = xyz" ;;
esac</PRE></FONT></TD></TR></TBODY></TABLE></P>
<DT><SPAN class=TOKEN>;;&amp;</SPAN>, <SPAN class=TOKEN>;&amp;</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B><A href="http://tldp.org/LDP/abs/html/abs-guide.html#NCTERM">Terminators</A> in a <I class=FIRSTTERM>case</I> option (<A href="http://tldp.org/LDP/abs/html/abs-guide.html#BASH4REF">version 4+</A> of Bash). </B></P></DIV>
<DT><SPAN class=TOKEN>.</SPAN> 
<DD>
<P><A name=DOTREF></A></P>
<DIV class=FORMALPARA>
<P><B><SPAN class=QUOTE>"dot"</SPAN> command [period]. </B>Equivalent to <A href="http://tldp.org/LDP/abs/html/abs-guide.html#SOURCEREF">source</A> (see <A href="http://tldp.org/LDP/abs/html/abs-guide.html#EX38">Example 15-22</A>). This is a bash <A href="http://tldp.org/LDP/abs/html/abs-guide.html#BUILTINREF">builtin</A>.</P></DIV>
<DT><SPAN class=TOKEN>.</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B><SPAN class=QUOTE>"dot"</SPAN>, as a component of a filename. </B>When working with filenames, a leading dot is the prefix of a <SPAN class=QUOTE>"hidden"</SPAN> file, a file that an <A href="http://tldp.org/LDP/abs/html/abs-guide.html#LSREF">ls</A> will not normally show. 
<TABLE border=1 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=SCREEN><TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>touch .hidden-file</B></TT>
<TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>ls -l</B></TT>	      
<TT class=COMPUTEROUTPUT>total 10
 -rw-r--r--    1 bozo      4034 Jul 18 22:04 data1.addressbook
 -rw-r--r--    1 bozo      4602 May 25 13:58 data1.addressbook.bak
 -rw-r--r--    1 bozo       877 Dec 17  2000 employment.addressbook</TT>


<TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>ls -al</B></TT>	      
<TT class=COMPUTEROUTPUT>total 14
 drwxrwxr-x    2 bozo  bozo      1024 Aug 29 20:54 ./
 drwx------   52 bozo  bozo      3072 Aug 29 20:51 ../
 -rw-r--r--    1 bozo  bozo      4034 Jul 18 22:04 data1.addressbook
 -rw-r--r--    1 bozo  bozo      4602 May 25 13:58 data1.addressbook.bak
 -rw-r--r--    1 bozo  bozo       877 Dec 17  2000 employment.addressbook
 -rw-rw-r--    1 bozo  bozo         0 Aug 29 20:54 .hidden-file</TT>
	        </PRE></FONT></TD></TR></TBODY></TABLE></P></DIV>
<P><A name=DOTDIRECTORY></A></P>
<P>When considering directory names, <I class=FIRSTTERM>a single dot</I> represents the current working directory, and <I class=FIRSTTERM>two dots</I> denote the parent directory.</P>
<P>
<TABLE border=1 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=SCREEN><TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>pwd</B></TT>
<TT class=COMPUTEROUTPUT>/home/bozo/projects</TT>

<TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>cd .</B></TT>
<TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>pwd</B></TT>
<TT class=COMPUTEROUTPUT>/home/bozo/projects</TT>

<TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>cd ..</B></TT>
<TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>pwd</B></TT>
<TT class=COMPUTEROUTPUT>/home/bozo/</TT>
	        </PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>The <I class=FIRSTTERM>dot</I> often appears as the destination (directory) of a file movement command, in this context meaning <I class=FIRSTTERM>current directory</I>.</P>
<P>
<TABLE border=1 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=SCREEN><TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>cp /home/bozo/current_work/junk/* .</B></TT>
	        </PRE></FONT></TD></TR></TBODY></TABLE>Copy all the <SPAN class=QUOTE>"junk"</SPAN> files to <A href="http://tldp.org/LDP/abs/html/abs-guide.html#PWDREF">$PWD</A>.</P>
<DT><SPAN class=TOKEN>.</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B><SPAN class=QUOTE>"dot"</SPAN> character match. </B>When <A href="http://tldp.org/LDP/abs/html/abs-guide.html#REGEXDOT">matching characters</A>, as part of a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#REGEXREF">regular expression</A>, a <SPAN class=QUOTE>"dot"</SPAN> <A href="http://tldp.org/LDP/abs/html/abs-guide.html#REGEXDOT">matches a single character</A>.</P></DIV>
<DT><SPAN class=TOKEN>"</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B><A href="http://tldp.org/LDP/abs/html/abs-guide.html#DBLQUO">partial quoting</A> [double quote]. </B><EM>"STRING"</EM> preserves (from interpretation) most of the special characters within <EM>STRING</EM>. See <A href="http://tldp.org/LDP/abs/html/abs-guide.html#QUOTING">Chapter 5</A>.</P></DIV>
<DT><SPAN class=TOKEN>'</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B><A href="http://tldp.org/LDP/abs/html/abs-guide.html#SNGLQUO">full quoting</A> [single quote]. </B><EM>'STRING'</EM> preserves all special characters within <EM>STRING</EM>. This is a stronger form of quoting than <EM>"STRING"</EM>. See <A href="http://tldp.org/LDP/abs/html/abs-guide.html#QUOTING">Chapter 5</A>.</P></DIV>
<DT><SPAN class=TOKEN>,</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B><A href="http://tldp.org/LDP/abs/html/abs-guide.html#COMMAOP">comma operator</A>. </B>The <I class=FIRSTTERM>comma operator</I> <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FTN.AEN612" name=AEN612><SPAN class=footnote>[16]</SPAN></A> links together a series of arithmetic operations. All are evaluated, but only the last one is returned. 
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>let "t2 = ((a = 9, 15 / 3))"
# Set "a = 9" and "t2 = 15 / 3"</PRE></FONT></TD></TR></TBODY></TABLE></P></DIV>
<P><A name=COMMAOP2></A>The <I class=FIRSTTERM>comma</I> operator can also concatenate strings. 
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>for file in /{,usr/}bin/*calc
#             ^    Find all executable files ending in "calc"
#+                 in /bin and /usr/bin directories.
do
        if [ -x "$file" ]
        then
          echo $file
        fi
done

# /bin/ipcalc
# /usr/bin/kcalc
# /usr/bin/oidcalc
# /usr/bin/oocalc


# Thank you, Rory Winston, for pointing this out.</PRE></FONT></TD></TR></TBODY></TABLE></P>
<DT><SPAN class=TOKEN>,</SPAN>, <SPAN class=TOKEN>,</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B><A href="http://tldp.org/LDP/abs/html/abs-guide.html#CASEMODPARAMSUB">Lowercase conversion</A> in <I class=FIRSTTERM>parameter substitution</I> (added in <A href="http://tldp.org/LDP/abs/html/abs-guide.html#BASH4REF">version 4</A> of Bash). </B></P></DIV>
<DT><SPAN class=TOKEN>\</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B><A href="http://tldp.org/LDP/abs/html/abs-guide.html#ESCP">escape</A> [backslash]. </B>A quoting mechanism for single characters.</P></DIV>
<P><TT class=USERINPUT><B>\X</B></TT> <I class=FIRSTTERM>escapes</I> the character <EM>X</EM>. This has the effect of <SPAN class=QUOTE>"quoting"</SPAN> <EM>X</EM>, equivalent to <EM>'X'</EM>. The <SPAN class=TOKEN>\</SPAN> may be used to quote <SPAN class=TOKEN>"</SPAN> and <SPAN class=TOKEN>'</SPAN>, so they are expressed literally.</P>
<P>See <A href="http://tldp.org/LDP/abs/html/abs-guide.html#QUOTING">Chapter 5</A> for an in-depth explanation of escaped characters.</P>
<DT><SPAN class=TOKEN>/</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B>Filename path separator [forward slash]. </B>Separates the components of a filename (as in <TT class=FILENAME>/home/bozo/projects/Makefile</TT>).</P></DIV>
<P>This is also the division <A href="http://tldp.org/LDP/abs/html/abs-guide.html#AROPS1">arithmetic operator</A>.</P>
<DT><A name=BACKTICKSREF></A><SPAN class=TOKEN>`</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B><A href="http://tldp.org/LDP/abs/html/abs-guide.html#COMMANDSUBREF">command substitution</A>. </B>The <B class=COMMAND>`command`</B> construct makes available the output of <B class=COMMAND>command</B> for assignment to a variable. This is also known as <A href="http://tldp.org/LDP/abs/html/abs-guide.html#BACKQUOTESREF">backquotes</A> or backticks.</P></DIV>
<DT><A name=COLON0REF></A><SPAN class=TOKEN>:</SPAN> 
<DD>
<P><A name=NULLREF></A></P>
<DIV class=FORMALPARA>
<P><B>null command [colon]. </B>This is the shell equivalent of a <SPAN class=QUOTE>"NOP"</SPAN> (<TT class=REPLACEABLE><I>no op</I></TT>, a do-nothing operation). It may be considered a synonym for the shell builtin <A href="http://tldp.org/LDP/abs/html/abs-guide.html#TRUEREF">true</A>. The <SPAN class=QUOTE>"<SPAN class=TOKEN>:</SPAN>"</SPAN> command is itself a <I class=FIRSTTERM>Bash</I> <A href="http://tldp.org/LDP/abs/html/abs-guide.html#BUILTINREF">builtin</A>, and its <A href="http://tldp.org/LDP/abs/html/abs-guide.html#EXITSTATUSREF">exit status</A> is <I class=FIRSTTERM>true</I> (<SPAN class=RETURNVALUE>0</SPAN>).</P></DIV>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>:
echo $?   # 0</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>Endless loop:</P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>while :
do
   operation-1
   operation-2
   ...
   operation-n
done

# Same as:
#    while true
#    do
#      ...
#    done</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>Placeholder in if/then test:</P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>if condition
then :   # Do nothing and branch ahead
else     # Or else ...
   take-some-action
fi</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>Provide a placeholder where a binary operation is expected, see <A href="http://tldp.org/LDP/abs/html/abs-guide.html#ARITHOPS">Example 8-2</A> and <A href="http://tldp.org/LDP/abs/html/abs-guide.html#DEFPARAM">default parameters</A>.</P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>: ${username=`whoami`}
# ${username=`whoami`}   Gives an error without the leading :
#                        unless "username" is a command or builtin...

: ${1?"Usage: $0 ARGUMENT"}     # From "usage-message.sh example script.</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>Provide a placeholder where a command is expected in a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#HEREDOCREF">here document</A>. See <A href="http://tldp.org/LDP/abs/html/abs-guide.html#ANONHEREDOC">Example 19-10</A>.</P>
<P>Evaluate string of variables using <A href="http://tldp.org/LDP/abs/html/abs-guide.html#PARAMSUBREF">parameter substitution</A> (as in <A href="http://tldp.org/LDP/abs/html/abs-guide.html#EX6">Example 10-7</A>). 
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>: ${HOSTNAME?} ${USER?} ${MAIL?}
#  Prints error message
#+ if one or more of essential environmental variables not set.</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P><B class=COMMAND><A href="http://tldp.org/LDP/abs/html/abs-guide.html#EXPREPL1">Variable expansion / substring replacement</A></B>.</P>
<P>In combination with the <SPAN class=TOKEN>&gt;</SPAN> <A href="http://tldp.org/LDP/abs/html/abs-guide.html#IOREDIRREF">redirection operator</A>, truncates a file to zero length, without changing its permissions. If the file did not previously exist, creates it. 
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>: &gt; data.xxx   # File "data.xxx" now empty.	      

# Same effect as   cat /dev/null &gt;data.xxx
# However, this does not fork a new process, since ":" is a builtin.</PRE></FONT></TD></TR></TBODY></TABLE>See also <A href="http://tldp.org/LDP/abs/html/abs-guide.html#EX12">Example 16-15</A>.</P>
<P>In combination with the <SPAN class=TOKEN>&gt;&gt;</SPAN> redirection operator, has no effect on a pre-existing target file (<TT class=USERINPUT><B>: &gt;&gt; target_file</B></TT>). If the file did not previously exist, creates it.</P>
<DIV class=NOTE>
<P></P>
<TABLE class=NOTE border=0 width="90%">
<TBODY>
<TR>
<TD vAlign=top width=25 align=middle><IMG hspace=5 alt=Note src="http://tldp.org/LDP/abs/images/note.gif"></TD>
<TD vAlign=top align=left>
<P><A name=REGFILEREF></A>This applies to regular files, not pipes, symlinks, and certain special files.</P></TD></TR></TBODY></TABLE></DIV>
<P>May be used to begin a comment line, although this is not recommended. Using <SPAN class=TOKEN>#</SPAN> for a comment turns off error checking for the remainder of that line, so almost anything may appear in a comment. However, this is not the case with <SPAN class=TOKEN>:</SPAN>. 
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>: This is a comment that generates an error, ( if [ $x -eq 3] ).</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>The <SPAN class=QUOTE>"<SPAN class=TOKEN>:</SPAN>"</SPAN> serves as a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FIELDREF">field</A> separator, in <A href="http://tldp.org/LDP/abs/html/abs-guide.html#DATAFILESREF1"><TT class=FILENAME>/etc/passwd</TT></A>, and in the <A href="http://tldp.org/LDP/abs/html/abs-guide.html#PATHREF">$PATH</A> variable. 
<TABLE border=1 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=SCREEN><TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>echo $PATH</B></TT>
<TT class=COMPUTEROUTPUT>/usr/local/bin:/bin:/usr/bin:/usr/X11R6/bin:/sbin:/usr/sbin:/usr/games</TT></PRE></FONT></TD></TR></TBODY></TABLE></P>
<P><A name=COLONFNAME></A></P>
<P>A <I class=FIRSTTERM>colon</I> is <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FSTRANGEREF">acceptable as a function name</A>. 
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>:()
{
  echo "The name of this function is "$FUNCNAME" "
  # Why use a colon as a function name?
  # It's a way of obfuscating your code.
}

:

# The name of this function is :</PRE></FONT></TD></TR></TBODY></TABLE>This is not <A href="http://tldp.org/LDP/abs/html/abs-guide.html#PORTABILITYISSUES">portable</A> behavior, and therefore not a recommended practice. In fact, more recent releases of Bash do not permit this usage. An underscore <B class=COMMAND>_</B> works, though.</P>
<P><A name=COLONINFUNCTION></A></P>
<P>A <I class=FIRSTTERM>colon</I> can serve as a placeholder in an otherwise empty function.</P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>not_empty ()
{
  :
} # Contains a : (null command), and so is not empty.</PRE></FONT></TD></TR></TBODY></TABLE></P>
<DT><A name=NOTREF></A><SPAN class=TOKEN>!</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B>reverse (or negate) the sense of a test or exit status [bang]. </B>The <SPAN class=TOKEN>!</SPAN> operator inverts the <A href="http://tldp.org/LDP/abs/html/abs-guide.html#EXITSTATUSREF">exit status</A> of the command to which it is applied (see <A href="http://tldp.org/LDP/abs/html/abs-guide.html#NEGCOND">Example 6-2</A>). It also inverts the meaning of a test operator. This can, for example, change the sense of <I class=FIRSTTERM>equal</I> ( <A href="http://tldp.org/LDP/abs/html/abs-guide.html#EQUALSIGNREF">=</A> ) to <I class=FIRSTTERM>not-equal</I> ( != ). The <SPAN class=TOKEN>!</SPAN> operator is a Bash <A href="http://tldp.org/LDP/abs/html/abs-guide.html#KEYWORDREF">keyword</A>.</P></DIV>
<P>In a different context, the <SPAN class=TOKEN>!</SPAN> also appears in <A href="http://tldp.org/LDP/abs/html/abs-guide.html#IVRREF">indirect variable references</A>.</P>
<P>In yet another context, from the <I class=FIRSTTERM>command line</I>, the <SPAN class=TOKEN>!</SPAN> invokes the Bash <I class=FIRSTTERM>history mechanism</I> (see <A href="http://tldp.org/LDP/abs/html/abs-guide.html#HISTCOMMANDS">Appendix L</A>). Note that within a script, the history mechanism is disabled.</P>
<DT><A name=ASTERISKREF></A><SPAN class=TOKEN>*</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B>wild card [asterisk]. </B>The <SPAN class=TOKEN>*</SPAN> character serves as a <SPAN class=QUOTE>"wild card"</SPAN> for filename expansion in <A href="http://tldp.org/LDP/abs/html/abs-guide.html#GLOBBINGREF">globbing</A>. By itself, it matches every filename in a given directory.</P></DIV>
<P>
<TABLE border=1 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=SCREEN><TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>echo *</B></TT>
<TT class=COMPUTEROUTPUT>abs-book.sgml add-drive.sh agram.sh alias.sh</TT>
	      </PRE></FONT></TD></TR></TBODY></TABLE></P>
<P><A name=ASTERISKREF2></A></P>
<P>The <SPAN class=TOKEN>*</SPAN> also represents <A href="http://tldp.org/LDP/abs/html/abs-guide.html#ASTERISKREG">any number (or zero) characters</A> in a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#REGEXREF">regular expression</A>.</P>
<DT><SPAN class=TOKEN>*</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B><A href="http://tldp.org/LDP/abs/html/abs-guide.html#AROPS1">arithmetic operator</A>. </B>In the context of arithmetic operations, the <SPAN class=TOKEN>*</SPAN> denotes multiplication.</P></DIV>
<P><SPAN class=TOKEN>**</SPAN> A double asterisk can represent the <A href="http://tldp.org/LDP/abs/html/abs-guide.html#EXPONENTIATIONREF">exponentiation</A> operator or <A href="http://tldp.org/LDP/abs/html/abs-guide.html#GLOBSTARREF">extended file-match</A> <I class=FIRSTTERM>globbing</I>.</P>
<DT><SPAN class=TOKEN>?</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B>test operator. </B>Within certain expressions, the <SPAN class=TOKEN>?</SPAN> indicates a test for a condition.</P></DIV>
<P><A name=CSTRINARY></A></P>
<P>In a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#DBLPARENS">double-parentheses construct</A>, the <SPAN class=TOKEN>?</SPAN> can serve as an element of a C-style <I class=FIRSTTERM>trinary</I> operator. <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FTN.AEN888" name=AEN888><SPAN class=footnote>[17]</SPAN></A> </P>
<P><TT class=VARNAME>condition</TT><B class=COMMAND>?</B><TT class=VARNAME>result-if-true</TT><B class=COMMAND>:</B><TT class=VARNAME>result-if-false</TT></P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>(( var0 = var1&lt;98?9:21 ))
#                ^ ^

# if [ "$var1" -lt 98 ]
# then
#   var0=9
# else
#   var0=21
# fi</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>In a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#PARAMSUBREF">parameter substitution</A> expression, the <SPAN class=TOKEN>?</SPAN> <A href="http://tldp.org/LDP/abs/html/abs-guide.html#QERRMSG">tests whether a variable has been set</A>.</P>
<DT><A name=WILDCARDQU></A><SPAN class=TOKEN>?</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B>wild card. </B><A name=QUEXWC></A>The <SPAN class=TOKEN>?</SPAN> character serves as a single-character <SPAN class=QUOTE>"wild card"</SPAN> for filename expansion in <A href="http://tldp.org/LDP/abs/html/abs-guide.html#GLOBBINGREF">globbing</A>, as well as <A href="http://tldp.org/LDP/abs/html/abs-guide.html#QUEXREGEX">representing one character</A> in an <A href="http://tldp.org/LDP/abs/html/abs-guide.html#EXTREGEX">extended regular expression</A>.</P></DIV>
<DT><SPAN class=TOKEN>$</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B><A href="http://tldp.org/LDP/abs/html/abs-guide.html#VARSUBN">Variable substitution</A> (contents of a variable). </B>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>var1=5
var2=23skidoo

echo $var1     # 5
echo $var2     # 23skidoo</PRE></FONT></TD></TR></TBODY></TABLE></P></DIV>
<P><A name=VARPREFIXREF></A></P>
<P>A <SPAN class=TOKEN>$</SPAN> prefixing a variable name indicates the <I class=FIRSTTERM>value</I> the variable holds.</P>
<DT><SPAN class=TOKEN>$</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B>end-of-line. </B>In a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#REGEXREF">regular expression</A>, a <SPAN class=QUOTE>"$"</SPAN> addresses the <A href="http://tldp.org/LDP/abs/html/abs-guide.html#DOLLARSIGNREF">end of a line</A> of text.</P></DIV>
<DT><SPAN class=TOKEN>${}</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B><A href="http://tldp.org/LDP/abs/html/abs-guide.html#PARAMSUBREF">Parameter substitution</A>. </B></P></DIV>
<DT><SPAN class=TOKEN>$' ... '</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B><A href="http://tldp.org/LDP/abs/html/abs-guide.html#STRQ">Quoted string expansion</A>. </B>This construct expands single or multiple escaped octal or hex values into ASCII <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FTN.AEN1001" name=AEN1001><SPAN class=footnote>[18]</SPAN></A> or <A href="http://tldp.org/LDP/abs/html/abs-guide.html#UNICODEREF">Unicode</A> characters.</P></DIV>
<DT><SPAN class=TOKEN>$*</SPAN>, <SPAN class=TOKEN>$@</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B><A href="http://tldp.org/LDP/abs/html/abs-guide.html#APPREF">positional parameters</A>. </B></P></DIV>
<DT><SPAN class=TOKEN>$?</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B>exit status variable. </B>The <A href="http://tldp.org/LDP/abs/html/abs-guide.html#EXSREF">$? variable</A> holds the <A href="http://tldp.org/LDP/abs/html/abs-guide.html#EXITSTATUSREF">exit status</A> of a command, a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FUNCTIONREF">function</A>, or of the script itself.</P></DIV>
<DT><A name=PROCESSIDREF></A><SPAN class=TOKEN>$$</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B>process ID variable. </B>The <A href="http://tldp.org/LDP/abs/html/abs-guide.html#PROCCID">$$ variable</A> holds the <I class=FIRSTTERM>process ID</I> <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FTN.AEN1071" name=AEN1071><SPAN class=footnote>[19]</SPAN></A> of the script in which it appears.</P></DIV>
<DT><A name=PARENSREF></A><SPAN class=TOKEN>()</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B>command group. </B>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>(a=hello; echo $a)</PRE></FONT></TD></TR></TBODY></TABLE></P></DIV>
<DIV class=IMPORTANT>
<P></P>
<TABLE class=IMPORTANT border=0 width="90%">
<TBODY>
<TR>
<TD vAlign=top width=25 align=middle><IMG hspace=5 alt=Important src="http://tldp.org/LDP/abs/images/important.gif"></TD>
<TD vAlign=top align=left>
<P>A listing of commands within <TT class=REPLACEABLE><I>parentheses</I></TT> starts a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#SUBSHELLSREF">subshell</A>.</P>
<P>Variables inside parentheses, within the subshell, are not visible to the rest of the script. The parent process, the script, <A href="http://tldp.org/LDP/abs/html/abs-guide.html#PARVIS">cannot read variables created in the child process</A>, the subshell. 
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>a=123
( a=321; )	      

echo "a = $a"   # a = 123
# "a" within parentheses acts like a local variable.</PRE></FONT></TD></TR></TBODY></TABLE></P></TD></TR></TBODY></TABLE></DIV>
<DIV class=FORMALPARA>
<P><B>array initialization. </B><A name=ARRAYINIT1></A>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>Array=(element1 element2 element3)</PRE></FONT></TD></TR></TBODY></TABLE></P></DIV>
<DT><SPAN class=TOKEN>{xxx,yyy,zzz,...}</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B>Brace expansion. </B><A name=BRACEEXPREF></A>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>echo \"{These,words,are,quoted}\"   # " prefix and suffix
# "These" "words" "are" "quoted"


cat {file1,file2,file3} &gt; combined_file
# Concatenates the files file1, file2, and file3 into combined_file.

cp file22.{txt,backup}
# Copies "file22.txt" to "file22.backup"</PRE></FONT></TD></TR></TBODY></TABLE></P></DIV>
<P>A command may act upon a comma-separated list of file specs within <TT class=REPLACEABLE><I>braces</I></TT>. <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FTN.AEN1124" name=AEN1124><SPAN class=footnote>[20]</SPAN></A> Filename expansion (<A href="http://tldp.org/LDP/abs/html/abs-guide.html#GLOBBINGREF">globbing</A>) applies to the file specs between the braces.</P>
<DIV class=CAUTION>
<P></P>
<TABLE class=CAUTION border=0 width="90%">
<TBODY>
<TR>
<TD vAlign=top width=25 align=middle><IMG hspace=5 alt=Caution src="http://tldp.org/LDP/abs/images/caution.gif"></TD>
<TD vAlign=top align=left>
<P>No spaces allowed within the braces <EM>unless</EM> the spaces are quoted or escaped.</P>
<P><TT class=USERINPUT><B>echo {file1,file2}\ :{\ A," B",' C'}</B></TT></P>
<P><TT class=COMPUTEROUTPUT>file1 : A file1 : B file1 : C file2 : A file2 : B file2 : C</TT></P></TD></TR></TBODY></TABLE></DIV>
<DT><A name=BRACEEXPREF33></A><SPAN class=TOKEN>{a..z}</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B>Extended Brace expansion. </B>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>echo {a..z} # a b c d e f g h i j k l m n o p q r s t u v w x y z
# Echoes characters between a and z.

echo {0..3} # 0 1 2 3
# Echoes characters between 0 and 3.


base64_charset=( {A..Z} {a..z} {0..9} + / = )
# Initializing an array, using extended brace expansion.
# From vladz's "base64.sh" example script.</PRE></FONT></TD></TR></TBODY></TABLE></P></DIV>
<P>The <I class=FIRSTTERM>{a..z}</I> <A href="http://tldp.org/LDP/abs/html/abs-guide.html#BRACEEXPREF3">extended brace expansion</A> construction is a feature introduced in <A href="http://tldp.org/LDP/abs/html/abs-guide.html#BASH3REF">version 3</A> of <I class=FIRSTTERM>Bash</I>.</P>
<DT><A name=CODEBLOCKREF></A><SPAN class=TOKEN>{}</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B>Block of code [curly brackets]. </B>Also referred to as an <I class=FIRSTTERM>inline group</I>, this construct, in effect, creates an <I class=FIRSTTERM>anonymous function</I> (a function without a name). However, unlike in a <SPAN class=QUOTE>"standard"</SPAN> <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FUNCTIONREF">function</A>, the variables inside a code block remain visible to the remainder of the script.</P></DIV>
<P>
<TABLE border=1 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=SCREEN><TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>{ local a;
	      a=123; }</B></TT>
<TT class=COMPUTEROUTPUT>bash: local: can only be used in a
function</TT>
	      </PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>a=123
{ a=321; }
echo "a = $a"   # a = 321   (value inside code block)

# Thanks, S.C.</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P><A name=BLOCKIO></A></P>
<P>The code block enclosed in braces may have <A href="http://tldp.org/LDP/abs/html/abs-guide.html#IOREDIRREF">I/O redirected</A> to and from it.</P>
<DIV class=EXAMPLE><A name=EX8></A>
<P><B>Example 3-1. Code blocks and I/O redirection</B></P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# Reading lines in /etc/fstab.

File=/etc/fstab

{
read line1
read line2
} &lt; $File

echo "First line in $File is:"
echo "$line1"
echo
echo "Second line in $File is:"
echo "$line2"

exit 0

# Now, how do you parse the separate fields of each line?
# Hint: use awk, or . . .
# . . . Hans-Joerg Diers suggests using the "set" Bash builtin.</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<P><A name=BLOCKIO2></A></P>
<DIV class=EXAMPLE><A name=RPMCHECK></A>
<P><B>Example 3-2. Saving the output of a code block to a file</B></P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# rpm-check.sh

#  Queries an rpm file for description, listing,
#+ and whether it can be installed.
#  Saves output to a file.
# 
#  This script illustrates using a code block.

SUCCESS=0
E_NOARGS=65

if [ -z "$1" ]
then
  echo "Usage: `basename $0` rpm-file"
  exit $E_NOARGS
fi  

{ # Begin code block.
  echo
  echo "Archive Description:"
  rpm -qpi $1       # Query description.
  echo
  echo "Archive Listing:"
  rpm -qpl $1       # Query listing.
  echo
  rpm -i --test $1  # Query whether rpm file can be installed.
  if [ "$?" -eq $SUCCESS ]
  then
    echo "$1 can be installed."
  else
    echo "$1 cannot be installed."
  fi  
  echo              # End code block.
} &gt; "$1.test"       # Redirects output of everything in block to file.

echo "Results of rpm test in file $1.test"

# See rpm man page for explanation of options.

exit 0</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<DIV class=NOTE>
<P></P>
<TABLE class=NOTE border=0 width="90%">
<TBODY>
<TR>
<TD vAlign=top width=25 align=middle><IMG hspace=5 alt=Note src="http://tldp.org/LDP/abs/images/note.gif"></TD>
<TD vAlign=top align=left>
<P>Unlike a command group within (parentheses), as above, a code block enclosed by {braces} will <EM>not</EM> normally launch a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#SUBSHELLSREF">subshell</A>. <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FTN.AEN1199" name=AEN1199><SPAN class=footnote>[21]</SPAN></A> </P>
<P>It is possible to <A href="http://tldp.org/LDP/abs/html/abs-guide.html#ITERATIONREF">iterate</A> a code block using a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#NODODONE">non-standard <I class=FIRSTTERM>for-loop</I></A>.</P></TD></TR></TBODY></TABLE></DIV>
<DT><SPAN class=TOKEN>{}</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B>placeholder for text. </B>Used after <A href="http://tldp.org/LDP/abs/html/abs-guide.html#XARGSCURLYREF">xargs <TT class=OPTION>-i</TT></A> (<I class=FIRSTTERM>replace strings</I> option). The <SPAN class=TOKEN>{}</SPAN> double curly brackets are a placeholder for output text.</P></DIV>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>ls . | xargs -i -t cp ./{} $1
#            ^^         ^^

# From "ex42.sh" (copydir.sh) example.</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P><A name=SEMICOLONESC></A></P>
<DT><SPAN class=TOKEN>{} \;</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B>pathname. </B>Mostly used in <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FINDREF">find</A> constructs. This is <EM>not</EM> a shell <A href="http://tldp.org/LDP/abs/html/abs-guide.html#BUILTINREF">builtin</A>.</P></DIV>
<TABLE class=SIDEBAR border=1 cellPadding=5>
<TBODY>
<TR>
<TD>
<DIV class=SIDEBAR><A name=AEN1234></A>
<P></P>
<P><A name=PATHNAMEREF></A></P>
<P>Definition: A <I class=FIRSTTERM>pathname</I> is a <I class=FIRSTTERM>filename</I> that includes the complete <A href="http://tldp.org/LDP/abs/html/abs-guide.html#PATHREF">path</A>. As an example, <TT class=FILENAME>/home/bozo/Notes/Thursday/schedule.txt</TT>. This is sometimes referred to as the <I class=FIRSTTERM>absolute path</I>.</P>
<P></P></DIV></TD></TR></TBODY></TABLE>
<DIV class=NOTE>
<P></P>
<TABLE class=NOTE border=0 width="90%">
<TBODY>
<TR>
<TD vAlign=top width=25 align=middle><IMG hspace=5 alt=Note src="http://tldp.org/LDP/abs/images/note.gif"></TD>
<TD vAlign=top align=left>
<P>The <SPAN class=QUOTE>"<SPAN class=TOKEN>;</SPAN>"</SPAN> ends the <TT class=OPTION>-exec</TT> option of a <B class=COMMAND>find</B> command sequence. It needs to be escaped to protect it from interpretation by the shell.</P></TD></TR></TBODY></TABLE></DIV>
<DT><A name=LEFTBRACKET></A><SPAN class=TOKEN>[ ]</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B>test. </B><A name=BRACKTEST></A></P></DIV>
<P><A href="http://tldp.org/LDP/abs/html/abs-guide.html#IFTHEN">Test</A> expression between <B class=COMMAND>[ ]</B>. Note that <B class=COMMAND>[</B> is part of the shell <I class=FIRSTTERM>builtin</I> <A href="http://tldp.org/LDP/abs/html/abs-guide.html#TTESTREF">test</A> (and a synonym for it), <EM>not</EM> a link to the external command <TT class=FILENAME>/usr/bin/test</TT>.</P>
<DT><SPAN class=TOKEN>[[ ]]</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B>test. </B></P></DIV>
<P>Test expression between <SPAN class=TOKEN>[[ ]]</SPAN>. More flexible than the single-bracket <SPAN class=TOKEN>[ ]</SPAN> test, this is a shell <A href="http://tldp.org/LDP/abs/html/abs-guide.html#KEYWORDREF">keyword</A>.</P>
<P>See the discussion on the <A href="http://tldp.org/LDP/abs/html/abs-guide.html#DBLBRACKETS">[[ ... ]] construct</A>.</P>
<DT><SPAN class=TOKEN>[ ]</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B>array element. </B></P></DIV>
<P>In the context of an <A href="http://tldp.org/LDP/abs/html/abs-guide.html#ARRAYREF">array</A>, brackets set off the numbering of each element of that array. 
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>Array[1]=slot_1
echo ${Array[1]}</PRE></FONT></TD></TR></TBODY></TABLE></P>
<DT><SPAN class=TOKEN>[ ]</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B>range of characters. </B></P></DIV>
<P>As part of a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#REGEXREF">regular expression</A>, brackets delineate a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#BRACKETSREF">range of characters</A> to match.</P>
<DT><A name=BRACKETARITH></A><SPAN class=TOKEN>$[ ... ]</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B>integer expansion. </B></P></DIV>
<P>Evaluate integer expression between <SPAN class=TOKEN>$[ ]</SPAN>. 
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>a=3
b=7

echo $[$a+$b]   # 10
echo $[$a*$b]   # 21</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>Note that this usage is <EM>deprecated</EM>, and has been replaced by the <A href="http://tldp.org/LDP/abs/html/abs-guide.html#DBLPARENS">(( ... ))</A> construct.</P>
<DT><SPAN class=TOKEN>(( ))</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B>integer expansion. </B></P></DIV>
<P>Expand and evaluate integer expression between <SPAN class=TOKEN>(( ))</SPAN>.</P>
<P>See the discussion on the <A href="http://tldp.org/LDP/abs/html/abs-guide.html#DBLPARENS">(( ... )) construct</A>.</P>
<DT><SPAN class=TOKEN>&gt;</SPAN> <SPAN class=TOKEN>&amp;&gt;</SPAN> <SPAN class=TOKEN>&gt;&amp;</SPAN> <SPAN class=TOKEN>&gt;&gt;</SPAN> <SPAN class=TOKEN>&lt;</SPAN> <SPAN class=TOKEN>&lt;&gt;</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B><A href="http://tldp.org/LDP/abs/html/abs-guide.html#IOREDIRREF">redirection</A>. </B></P></DIV>
<P><TT class=USERINPUT><B>scriptname &gt;filename</B></TT> redirects the output of <TT class=FILENAME>scriptname</TT> to file <TT class=FILENAME>filename</TT>. Overwrite <TT class=FILENAME>filename</TT> if it already exists.</P>
<P><A name=REDIROUTERROR></A></P>
<P><TT class=USERINPUT><B>command &amp;&gt;filename</B></TT> redirects both the <A href="http://tldp.org/LDP/abs/html/abs-guide.html#STDINOUTDEF"><TT class=FILENAME>stdout</TT></A> and the <TT class=FILENAME>stderr</TT> of <TT class=FILENAME>command</TT> to <TT class=FILENAME>filename</TT>.</P>
<DIV class=NOTE>
<P></P>
<TABLE class=NOTE border=0 width="90%">
<TBODY>
<TR>
<TD vAlign=top width=25 align=middle><IMG hspace=5 alt=Note src="http://tldp.org/LDP/abs/images/note.gif"></TD>
<TD vAlign=top align=left>
<P><A name=DEVNULLREDIRECT></A>This is useful for suppressing output when testing for a condition. For example, let us test whether a certain command exists. </P>
<P>
<TABLE border=1 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=SCREEN><TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>type bogus_command &amp;&gt;/dev/null</B></TT>
<TT class=COMPUTEROUTPUT></TT>


<TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>echo $?</B></TT>
<TT class=COMPUTEROUTPUT>1</TT>
                    </PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>Or in a script:</P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>command_test () { type "$1" &amp;&gt;/dev/null; }
#                                      ^

cmd=rmdir            # Legitimate command.
command_test $cmd; echo $?   # 0


cmd=bogus_command    # Illegitimate command
command_test $cmd; echo $?   # 1</PRE></FONT></TD></TR></TBODY></TABLE></P></TD></TR></TBODY></TABLE></DIV>
<P><A name=REDIROUTERROR2></A></P>
<P><TT class=USERINPUT><B>command &gt;&amp;2</B></TT> redirects <TT class=FILENAME>stdout</TT> of <TT class=FILENAME>command</TT> to <TT class=FILENAME>stderr</TT>.</P>
<P><TT class=USERINPUT><B>scriptname &gt;&gt;filename</B></TT> appends the output of <TT class=FILENAME>scriptname</TT> to file <TT class=FILENAME>filename</TT>. If <TT class=FILENAME>filename</TT> does not already exist, it is created.</P>
<P><A name=REDIRRW></A></P>
<P><TT class=USERINPUT><B>[i]&lt;&gt;filename</B></TT> opens file <TT class=FILENAME>filename</TT> for reading and writing, and assigns <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FDREF">file descriptor</A> <SPAN class=TOKEN>i</SPAN> to it. If <TT class=FILENAME>filename</TT> does not exist, it is created.</P>
<DIV class=FORMALPARA>
<P><B><A href="http://tldp.org/LDP/abs/html/abs-guide.html#PROCESSSUBREF">process substitution</A>. </B></P></DIV>
<P><TT class=USERINPUT><B>(command)&gt;</B></TT></P>
<P><TT class=USERINPUT><B>&lt;(command)</B></TT></P>
<P><A href="http://tldp.org/LDP/abs/html/abs-guide.html#LTREF">In a different context</A>, the <SPAN class=QUOTE>"<SPAN class=TOKEN>&lt;</SPAN>"</SPAN> and <SPAN class=QUOTE>"<SPAN class=TOKEN>&gt;</SPAN>"</SPAN> characters act as <A href="http://tldp.org/LDP/abs/html/abs-guide.html#SCOMPARISON1">string comparison operators</A>.</P>
<P><A href="http://tldp.org/LDP/abs/html/abs-guide.html#INTLT">In yet another context</A>, the <SPAN class=QUOTE>"<SPAN class=TOKEN>&lt;</SPAN>"</SPAN> and <SPAN class=QUOTE>"<SPAN class=TOKEN>&gt;</SPAN>"</SPAN> characters act as <A href="http://tldp.org/LDP/abs/html/abs-guide.html#ICOMPARISON1">integer comparison operators</A>. See also <A href="http://tldp.org/LDP/abs/html/abs-guide.html#EX45">Example 16-9</A>.</P>
<DT><A name=HEREDOCRRREF></A><SPAN class=TOKEN>&lt;&lt;</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B>redirection used in a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#HEREDOCREF">here document</A>. </B></P></DIV>
<DT><A name=HERESTRINGREF></A><SPAN class=TOKEN>&lt;&lt;&lt;</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B>redirection used in a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#HERESTRINGSREF">here string</A>. </B></P></DIV>
<DT><SPAN class=TOKEN>&lt;</SPAN>, <SPAN class=TOKEN>&gt;</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B><A href="http://tldp.org/LDP/abs/html/abs-guide.html#LTREF">ASCII comparison</A>. </B>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>veg1=carrots
veg2=tomatoes

if [[ "$veg1" &lt; "$veg2" ]]
then
  echo "Although $veg1 precede $veg2 in the dictionary,"
  echo -n "this does not necessarily imply anything "
  echo "about my culinary preferences."
else
  echo "What kind of dictionary are you using, anyhow?"
fi</PRE></FONT></TD></TR></TBODY></TABLE></P></DIV>
<DT><SPAN class=TOKEN>\&lt;</SPAN>, <SPAN class=TOKEN>\&gt;</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B><A href="http://tldp.org/LDP/abs/html/abs-guide.html#ANGLEBRAC">word boundary</A> in a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#REGEXREF">regular expression</A>. </B></P></DIV>
<P><TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>grep '\&lt;the\&gt;' textfile</B></TT></P>
<DT><SPAN class=TOKEN>|</SPAN> 
<DD>
<P><A name=PIPEREF></A></P>
<DIV class=FORMALPARA>
<P><B>pipe. </B>Passes the output (<TT class=FILENAME>stdout</TT>) of a previous command to the input (<TT class=FILENAME>stdin</TT>) of the next one, or to the shell. This is a method of chaining commands together.</P></DIV>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>echo ls -l | sh
#  Passes the output of "echo ls -l" to the shell,
#+ with the same result as a simple "ls -l".


cat *.lst | sort | uniq
# Merges and sorts all ".lst" files, then deletes duplicate lines.</PRE></FONT></TD></TR></TBODY></TABLE></P>
<TABLE class=SIDEBAR border=1 cellPadding=5>
<TBODY>
<TR>
<TD>
<DIV class=SIDEBAR><A name=AEN1555></A>
<P></P>
<P>A pipe, as a classic method of interprocess communication, sends the <TT class=FILENAME>stdout</TT> of one <A href="http://tldp.org/LDP/abs/html/abs-guide.html#PROCESSREF">process</A> to the <TT class=FILENAME>stdin</TT> of another. In a typical case, a command, such as <A href="http://tldp.org/LDP/abs/html/abs-guide.html#CATREF">cat</A> or <A href="http://tldp.org/LDP/abs/html/abs-guide.html#ECHOREF">echo</A>, pipes a stream of data to a <A name=FILTERDEF></A><I class=FIRSTTERM>filter</I>, a command that transforms its input for processing. <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FTN.AEN1564" name=AEN1564><SPAN class=footnote>[22]</SPAN></A> </P>
<P><TT class=USERINPUT><B>cat $filename1 $filename2 | grep $search_word</B></TT> </P>
<P>For an interesting note on the complexity of using UNIX pipes, see <A href="http://www.faqs.org/faqs/unix-faq/faq/part3/" target=_top>the UNIX FAQ, Part 3</A>.</P>
<P></P></DIV></TD></TR></TBODY></TABLE>
<P><A name=UCREF></A>The output of a command or commands may be piped to a script. 
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# uppercase.sh : Changes input to uppercase.

tr 'a-z' 'A-Z'
#  Letter ranges must be quoted
#+ to prevent filename generation from single-letter filenames.

exit 0</PRE></FONT></TD></TR></TBODY></TABLE>Now, let us pipe the output of <B class=COMMAND>ls -l</B> to this script. 
<TABLE border=1 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=SCREEN><TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>ls -l | ./uppercase.sh</B></TT>
<TT class=COMPUTEROUTPUT>-RW-RW-R--    1 BOZO  BOZO       109 APR  7 19:49 1.TXT
 -RW-RW-R--    1 BOZO  BOZO       109 APR 14 16:48 2.TXT
 -RW-R--R--    1 BOZO  BOZO       725 APR 20 20:56 DATA-FILE</TT>
	      </PRE></FONT></TD></TR></TBODY></TABLE></P>
<DIV class=NOTE>
<P></P>
<TABLE class=NOTE border=0 width="90%">
<TBODY>
<TR>
<TD vAlign=top width=25 align=middle><IMG hspace=5 alt=Note src="http://tldp.org/LDP/abs/images/note.gif"></TD>
<TD vAlign=top align=left>
<P>The <TT class=FILENAME>stdout</TT> of each process in a pipe must be read as the <TT class=FILENAME>stdin</TT> of the next. If this is not the case, the data stream will <I class=FIRSTTERM>block</I>, and the pipe will not behave as expected. 
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>cat file1 file2 | ls -l | sort
# The output from "cat file1 file2" disappears.</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>A pipe runs as a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#CHILDREF">child process</A>, and therefore cannot alter script variables. 
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>variable="initial_value"
echo "new_value" | read variable
echo "variable = $variable"     # variable = initial_value</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>If one of the commands in the pipe aborts, this prematurely terminates execution of the pipe. Called a <I class=FIRSTTERM>broken pipe</I>, this condition sends a <TT class=REPLACEABLE><I>SIGPIPE</I></TT> <A href="http://tldp.org/LDP/abs/html/abs-guide.html#SIGNALD">signal</A>.</P></TD></TR></TBODY></TABLE></DIV>
<DT><SPAN class=TOKEN>&gt;|</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B>force redirection (even if the <A href="http://tldp.org/LDP/abs/html/abs-guide.html#NOCLOBBERREF">noclobber option</A> is set). </B>This will forcibly overwrite an existing file.</P></DIV>
<DT><SPAN class=TOKEN>||</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B><A href="http://tldp.org/LDP/abs/html/abs-guide.html#ORREF">OR logical operator</A>. </B>In a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#TESTCONSTRUCTS1">test construct</A>, the <SPAN class=TOKEN>||</SPAN> operator causes a return of <SPAN class=RETURNVALUE>0</SPAN> (success) if <EM>either</EM> of the linked test conditions is true.</P></DIV>
<DT><A name=BGJOB></A><SPAN class=TOKEN>&amp;</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B>Run job in background. </B>A command followed by an <SPAN class=TOKEN>&amp;</SPAN> will run in the background.</P></DIV>
<P>
<TABLE border=1 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=SCREEN><TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>sleep 10 &amp;</B></TT>
<TT class=COMPUTEROUTPUT>[1] 850</TT>
<TT class=COMPUTEROUTPUT>[1]+  Done                    sleep 10</TT>
	      </PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>Within a script, commands and even <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FORLOOPREF1">loops</A> may run in the background.</P>
<P><A name=BGLOOP0></A></P>
<DIV class=EXAMPLE><A name=BGLOOP></A>
<P><B>Example 3-3. Running a loop in the background</B></P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# background-loop.sh

for i in 1 2 3 4 5 6 7 8 9 10            # First loop.
do
  echo -n "$i "
done &amp; # Run this loop in background.
       # Will sometimes execute after second loop.

echo   # This 'echo' sometimes will not display.

for i in 11 12 13 14 15 16 17 18 19 20   # Second loop.
do
  echo -n "$i "
done  

echo   # This 'echo' sometimes will not display.

# ======================================================

# The expected output from the script:
# 1 2 3 4 5 6 7 8 9 10 
# 11 12 13 14 15 16 17 18 19 20 

# Sometimes, though, you get:
# 11 12 13 14 15 16 17 18 19 20 
# 1 2 3 4 5 6 7 8 9 10 bozo $
# (The second 'echo' doesn't execute. Why?)

# Occasionally also:
# 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20
# (The first 'echo' doesn't execute. Why?)

# Very rarely something like:
# 11 12 13 1 2 3 4 5 6 7 8 9 10 14 15 16 17 18 19 20 
# The foreground loop preempts the background one.

exit 0

#  Nasimuddin Ansari suggests adding    sleep 1
#+ after the   echo -n "$i"   in lines 6 and 14,
#+ for some real fun.</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<DIV class=CAUTION>
<P></P>
<TABLE class=CAUTION border=0 width="90%">
<TBODY>
<TR>
<TD vAlign=top width=25 align=middle><IMG hspace=5 alt=Caution src="http://tldp.org/LDP/abs/images/caution.gif"></TD>
<TD vAlign=top align=left>
<P>A command run in the background within a script may cause the script to hang, waiting for a keystroke. Fortunately, there is a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#WAITHANG">remedy</A> for this.</P></TD></TR></TBODY></TABLE></DIV>
<DT><A name=LOGICALAND></A><SPAN class=TOKEN>&amp;&amp;</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B><A href="http://tldp.org/LDP/abs/html/abs-guide.html#LOGOPS1">AND logical operator</A>. </B>In a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#TESTCONSTRUCTS1">test construct</A>, the <SPAN class=TOKEN>&amp;&amp;</SPAN> operator causes a return of <SPAN class=RETURNVALUE>0</SPAN> (success) only if <EM>both</EM> the linked test conditions are true.</P></DIV>
<DT><A name=DASHREF></A><SPAN class=TOKEN>-</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B>option, prefix. </B>Option flag for a command or filter. Prefix for an operator. Prefix for a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#DEFPARAM1">default parameter</A> in <A href="http://tldp.org/LDP/abs/html/abs-guide.html#PARAMSUBREF">parameter substitution</A>.</P></DIV>
<P><TT class=USERINPUT><B>COMMAND -[Option1][Option2][...]</B></TT></P>
<P><TT class=USERINPUT><B>ls -al</B></TT></P>
<P><TT class=USERINPUT><B>sort -dfu $filename</B></TT></P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>if [ $file1 -ot $file2 ]
then #      ^
  echo "File $file1 is older than $file2."
fi

if [ "$a" -eq "$b" ]
then #    ^
  echo "$a is equal to $b."
fi

if [ "$c" -eq 24 -a "$d" -eq 47 ]
then #    ^              ^
  echo "$c equals 24 and $d equals 47."
fi


param2=${param1:-$DEFAULTVAL}
#               ^</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P><A name=DOUBLEDASHREF></A></P>
<P><B class=COMMAND>--</B></P>
<P>The <I class=FIRSTTERM>double-dash</I> <TT class=OPTION>--</TT> prefixes <I class=FIRSTTERM>long</I> (verbatim) options to commands.</P>
<P><TT class=USERINPUT><B>sort --ignore-leading-blanks</B></TT></P>
<P>Used with a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#BUILTINREF">Bash builtin</A>, it means the <I class=FIRSTTERM>end of options</I> to that particular command.</P>
<DIV class=TIP>
<P></P>
<TABLE class=TIP border=0 width="90%">
<TBODY>
<TR>
<TD vAlign=top width=25 align=middle><IMG hspace=5 alt=Tip src="http://tldp.org/LDP/abs/images/tip.gif"></TD>
<TD vAlign=top align=left>
<P>This provides a handy means of removing files whose <EM>names begin with a dash</EM>. 
<TABLE border=1 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=SCREEN><TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>ls -l</B></TT>
<TT class=COMPUTEROUTPUT>-rw-r--r-- 1 bozo bozo 0 Nov 25 12:29 -badname</TT>


<TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>rm -- -badname</B></TT>

<TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>ls -l</B></TT>
<TT class=COMPUTEROUTPUT>total 0</TT></PRE></FONT></TD></TR></TBODY></TABLE></P></TD></TR></TBODY></TABLE></DIV>
<P>The <I class=FIRSTTERM>double-dash</I> is also used in conjunction with <A href="http://tldp.org/LDP/abs/html/abs-guide.html#SETREF">set</A>.</P>
<P><TT class=USERINPUT><B>set -- $variable</B></TT> (as in <A href="http://tldp.org/LDP/abs/html/abs-guide.html#SETPOS">Example 15-18</A>)</P>
<DT><A name=DASHREF2></A><SPAN class=TOKEN>-</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B>redirection from/to <TT class=FILENAME>stdin</TT> or <TT class=FILENAME>stdout</TT> [dash]. </B><A name=COXEX></A></P></DIV>
<P>
<TABLE border=1 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=SCREEN><TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>cat -</B></TT>
<TT class=USERINPUT><B>abc</B></TT>
<TT class=COMPUTEROUTPUT>abc</TT>

<TT class=COMPUTEROUTPUT>...</TT>

<TT class=USERINPUT><B>Ctl-D</B></TT></PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>As expected, <TT class=USERINPUT><B>cat -</B></TT> echoes <TT class=FILENAME>stdin</TT>, in this case keyboarded user input, to <TT class=FILENAME>stdout</TT>. But, does I/O redirection using <B class=COMMAND>-</B> have real-world applications?</P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>(cd /source/directory &amp;&amp; tar cf - . ) | (cd /dest/directory &amp;&amp; tar xpvf -)
# Move entire file tree from one directory to another
# [courtesy Alan Cox &lt;a.cox@swansea.ac.uk&gt;, with a minor change]

# 1) cd /source/directory
#    Source directory, where the files to be moved are.
# 2) &amp;&amp;
#   "And-list": if the 'cd' operation successful,
#    then execute the next command.
# 3) tar cf - .
#    The 'c' option 'tar' archiving command creates a new archive,
#    the 'f' (file) option, followed by '-' designates the target file
#    as stdout, and do it in current directory tree ('.').
# 4) |
#    Piped to ...
# 5) ( ... )
#    a subshell
# 6) cd /dest/directory
#    Change to the destination directory.
# 7) &amp;&amp;
#   "And-list", as above
# 8) tar xpvf -
#    Unarchive ('x'), preserve ownership and file permissions ('p'),
#    and send verbose messages to stdout ('v'),
#    reading data from stdin ('f' followed by '-').
#
#    Note that 'x' is a command, and 'p', 'v', 'f' are options.
#
# Whew!



# More elegant than, but equivalent to:
#   cd source/directory
#   tar cf - . | (cd ../dest/directory; tar xpvf -)
#
#     Also having same effect:
# cp -a /source/directory/* /dest/directory
#     Or:
# cp -a /source/directory/* /source/directory/.[^.]* /dest/directory
#     If there are hidden files in /source/directory.</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>bunzip2 -c linux-2.6.16.tar.bz2 | tar xvf -
#  --uncompress tar file--      | --then pass it to "tar"--
#  If "tar" has not been patched to handle "bunzip2",
#+ this needs to be done in two discrete steps, using a pipe.
#  The purpose of the exercise is to unarchive "bzipped" kernel source.</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>Note that in this context the <SPAN class=QUOTE>"-"</SPAN> is not itself a Bash operator, but rather an option recognized by certain UNIX utilities that write to <TT class=FILENAME>stdout</TT>, such as <B class=COMMAND>tar</B>, <B class=COMMAND>cat</B>, etc.</P>
<P>
<TABLE border=1 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=SCREEN><TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>echo "whatever" | cat -</B></TT>
<TT class=COMPUTEROUTPUT>whatever</TT> </PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>Where a filename is expected, <TT class=REPLACEABLE><I>-</I></TT> redirects output to <TT class=FILENAME>stdout</TT> (sometimes seen with <TT class=USERINPUT><B>tar cf</B></TT>), or accepts input from <TT class=FILENAME>stdin</TT>, rather than from a file. <A name=FILTERDASH></A>This is a method of using a file-oriented utility as a filter in a pipe.</P>
<P>
<TABLE border=1 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=SCREEN><TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>file</B></TT>
<TT class=COMPUTEROUTPUT>Usage: file [-bciknvzL] [-f namefile] [-m magicfiles] file...</TT>
	      </PRE></FONT></TD></TR></TBODY></TABLE>By itself on the command-line, <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FILEREF">file</A> fails with an error message. </P>
<P>Add a <SPAN class=QUOTE>"-"</SPAN> for a more useful result. This causes the shell to await user input. 
<TABLE border=1 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=SCREEN><TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>file -</B></TT>
<TT class=USERINPUT><B>abc</B></TT>
<TT class=COMPUTEROUTPUT>standard input:              ASCII text</TT>



<TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>file -</B></TT>
<TT class=USERINPUT><B>#!/bin/bash</B></TT>
<TT class=COMPUTEROUTPUT>standard input:              Bourne-Again shell script text executable</TT>
	      </PRE></FONT></TD></TR></TBODY></TABLE>Now the command accepts input from <TT class=FILENAME>stdin</TT> and analyzes it. </P>
<P>The <SPAN class=QUOTE>"-"</SPAN> can be used to pipe <TT class=FILENAME>stdout</TT> to other commands. This permits such stunts as <A href="http://tldp.org/LDP/abs/html/abs-guide.html#PREPENDREF">prepending lines to a file</A>.</P>
<P>Using <A href="http://tldp.org/LDP/abs/html/abs-guide.html#DIFFREF">diff</A> to compare a file with a <EM>section</EM> of another:</P>
<P><TT class=USERINPUT><B>grep Linux file1 | diff file2 -</B></TT></P>
<P>Finally, a real-world example using <TT class=REPLACEABLE><I>-</I></TT> with <A href="http://tldp.org/LDP/abs/html/abs-guide.html#TARREF">tar</A>.</P>
<DIV class=EXAMPLE><A name=EX58></A>
<P><B>Example 3-4. Backup of all files changed in last day</B></P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash

#  Backs up all files in current directory modified within last 24 hours
#+ in a "tarball" (tarred and gzipped file).

BACKUPFILE=backup-$(date +%m-%d-%Y)
#                 Embeds date in backup filename.
#                 Thanks, Joshua Tschida, for the idea.
archive=${1:-$BACKUPFILE}
#  If no backup-archive filename specified on command-line,
#+ it will default to "backup-MM-DD-YYYY.tar.gz."

tar cvf - `find . -mtime -1 -type f -print` &gt; $archive.tar
gzip $archive.tar
echo "Directory $PWD backed up in archive file \"$archive.tar.gz\"."


#  Stephane Chazelas points out that the above code will fail
#+ if there are too many files found
#+ or if any filenames contain blank characters.

# He suggests the following alternatives:
# -------------------------------------------------------------------
#   find . -mtime -1 -type f -print0 | xargs -0 tar rvf "$archive.tar"
#      using the GNU version of "find".


#   find . -mtime -1 -type f -exec tar rvf "$archive.tar" '{}' \;
#         portable to other UNIX flavors, but much slower.
# -------------------------------------------------------------------


exit 0</PRE></FONT></TD></TR></TBODY></TABLE></DIV>
<DIV class=CAUTION>
<P></P>
<TABLE class=CAUTION border=0 width="90%">
<TBODY>
<TR>
<TD vAlign=top width=25 align=middle><IMG hspace=5 alt=Caution src="http://tldp.org/LDP/abs/images/caution.gif"></TD>
<TD vAlign=top align=left>
<P>Filenames beginning with <SPAN class=QUOTE>"-"</SPAN> may cause problems when coupled with the <SPAN class=QUOTE>"-"</SPAN> redirection operator. A script should check for this and add an appropriate prefix to such filenames, for example <TT class=FILENAME>./-FILENAME</TT>, <TT class=FILENAME>$PWD/-FILENAME</TT>, or <TT class=FILENAME>$PATHNAME/-FILENAME</TT>.</P>
<P>If the value of a variable begins with a <TT class=REPLACEABLE><I>-</I></TT>, this may likewise create problems. 
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>var="-n"
echo $var		
# Has the effect of "echo -n", and outputs nothing.</PRE></FONT></TD></TR></TBODY></TABLE></P></TD></TR></TBODY></TABLE></DIV>
<DT><SPAN class=TOKEN>-</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B>previous working directory. </B>A <B class=COMMAND>cd -</B> command changes to the previous working directory. This uses the <A href="http://tldp.org/LDP/abs/html/abs-guide.html#OLDPWD">$OLDPWD</A> <A href="http://tldp.org/LDP/abs/html/abs-guide.html#ENVREF">environmental variable</A>.</P></DIV>
<DIV class=CAUTION>
<P></P>
<TABLE class=CAUTION border=0 width="90%">
<TBODY>
<TR>
<TD vAlign=top width=25 align=middle><IMG hspace=5 alt=Caution src="http://tldp.org/LDP/abs/images/caution.gif"></TD>
<TD vAlign=top align=left>
<P>Do not confuse the <SPAN class=QUOTE>"-"</SPAN> used in this sense with the <SPAN class=QUOTE>"-"</SPAN> redirection operator just discussed. The interpretation of the <SPAN class=QUOTE>"-"</SPAN> depends on the context in which it appears.</P></TD></TR></TBODY></TABLE></DIV>
<DT><SPAN class=TOKEN>-</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B>Minus. </B>Minus sign in an <A href="http://tldp.org/LDP/abs/html/abs-guide.html#AROPS1">arithmetic operation</A>.</P></DIV>
<DT><SPAN class=TOKEN>=</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B>Equals. </B><A href="http://tldp.org/LDP/abs/html/abs-guide.html#EQREF">Assignment operator</A> 
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>a=28
echo $a   # 28</PRE></FONT></TD></TR></TBODY></TABLE></P></DIV>
<P>In a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#EQUALSIGNREF">different context</A>, the <SPAN class=QUOTE>"<SPAN class=TOKEN>=</SPAN>"</SPAN> is a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#SCOMPARISON1">string comparison</A> operator.</P>
<DT><SPAN class=TOKEN>+</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B>Plus. </B>Addition <A href="http://tldp.org/LDP/abs/html/abs-guide.html#AROPS1">arithmetic operator</A>.</P></DIV>
<P>In a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#PLUSREF">different context</A>, the <SPAN class=TOKEN>+</SPAN> is a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#REGEXP">Regular Expression</A> operator.</P>
<DT><SPAN class=TOKEN>+</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B>Option. </B>Option flag for a command or filter.</P></DIV>
<P>Certain commands and <A href="http://tldp.org/LDP/abs/html/abs-guide.html#BUILTINREF">builtins</A> use the <TT class=OPTION>+</TT> to enable certain options and the <TT class=OPTION>-</TT> to disable them. In <A href="http://tldp.org/LDP/abs/html/abs-guide.html#PARAMSUBREF">parameter substitution</A>, the <TT class=OPTION>+</TT> prefixes an <A href="http://tldp.org/LDP/abs/html/abs-guide.html#PARAMALTV">alternate value</A> that a variable expands to.</P>
<DT><A name=MODULO00></A><SPAN class=TOKEN>%</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B><A href="http://tldp.org/LDP/abs/html/abs-guide.html#MODULOREF">modulo</A>. </B>Modulo (remainder of a division) <A href="http://tldp.org/LDP/abs/html/abs-guide.html#AROPS1">arithmetic operation</A>.</P></DIV>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>let "z = 5 % 3"
echo $z  # 2</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P>In a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#PCTPATREF">different context</A>, the <SPAN class=TOKEN>%</SPAN> is a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#PSUB2">pattern matching</A> operator.</P>
<DT><A name=TILDEREF></A><SPAN class=TOKEN>~</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B>home directory [tilde]. </B>This corresponds to the <A href="http://tldp.org/LDP/abs/html/abs-guide.html#HOMEDIRREF">$HOME</A> internal variable. <TT class=FILENAME>~bozo</TT> is bozo's home directory, and <B class=COMMAND>ls ~bozo</B> lists the contents of it. <SPAN class=TOKEN>~/</SPAN> is the current user's home directory, and <B class=COMMAND>ls ~/</B> lists the contents of it. 
<TABLE border=1 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=SCREEN><TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>echo ~bozo</B></TT>
<TT class=COMPUTEROUTPUT>/home/bozo</TT>

<TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>echo ~</B></TT>
<TT class=COMPUTEROUTPUT>/home/bozo</TT>

<TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>echo ~/</B></TT>
<TT class=COMPUTEROUTPUT>/home/bozo/</TT>

<TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>echo ~:</B></TT>
<TT class=COMPUTEROUTPUT>/home/bozo:</TT>

<TT class=PROMPT>bash$ </TT><TT class=USERINPUT><B>echo ~nonexistent-user</B></TT>
<TT class=COMPUTEROUTPUT>~nonexistent-user</TT>
	      </PRE></FONT></TD></TR></TBODY></TABLE></P></DIV>
<DT><A name=WORKINGDIRREF></A><SPAN class=TOKEN>~+</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B>current working directory. </B>This corresponds to the <A href="http://tldp.org/LDP/abs/html/abs-guide.html#PWDREF">$PWD</A> internal variable.</P></DIV>
<DT><A name=PREVWORKINGDIR></A><SPAN class=TOKEN>~-</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B>previous working directory. </B>This corresponds to the <A href="http://tldp.org/LDP/abs/html/abs-guide.html#OLDPWD">$OLDPWD</A> internal variable.</P></DIV>
<DT><SPAN class=TOKEN>=~</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B><A href="http://tldp.org/LDP/abs/html/abs-guide.html#REGEXMATCHREF">regular expression match</A>. </B>This operator was introduced with <A href="http://tldp.org/LDP/abs/html/abs-guide.html#BASH3REF">version 3</A> of Bash.</P></DIV>
<DT><A name=BEGLINEREF></A><SPAN class=TOKEN>^</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B>beginning-of-line. </B>In a <A href="http://tldp.org/LDP/abs/html/abs-guide.html#REGEXREF">regular expression</A>, a <SPAN class=QUOTE>"^"</SPAN> addresses the <A href="http://tldp.org/LDP/abs/html/abs-guide.html#CARETREF">beginning of a line</A> of text.</P></DIV>
<DT><SPAN class=TOKEN>^</SPAN>, <SPAN class=TOKEN>^^</SPAN> 
<DD>
<DIV class=FORMALPARA>
<P><B><A href="http://tldp.org/LDP/abs/html/abs-guide.html#CASEMODPARAMSUB">Uppercase conversion</A> in <I class=FIRSTTERM>parameter substitution</I> (added in <A href="http://tldp.org/LDP/abs/html/abs-guide.html#BASH4REF">version 4</A> of Bash). </B></P></DIV>
<DT><A name=CONTROLCHARREF></A>Control Characters 
<DD>
<DIV class=FORMALPARA>
<P><B>change the behavior of the terminal or text display. </B>A control character is a <B class=KEYCAP>CONTROL</B> + <B class=KEYCAP>key</B> combination (pressed simultaneously). A control character may also be written in <I class=FIRSTTERM>octal</I> or <I class=FIRSTTERM>hexadecimal</I> notation, following an <I class=FIRSTTERM>escape</I>.</P></DIV>
<P>Control characters are not normally useful inside a script.</P>
<P></P>
<UL>
<LI>
<P><TT class=USERINPUT><B>Ctl-A</B></TT></P>
<P>Moves cursor to beginning of line of text (on the command-line).</P>
<LI>
<P><TT class=USERINPUT><B>Ctl-B</B></TT></P>
<P><TT class=USERINPUT><B>Backspace</B></TT> (nondestructive).</P>
<LI>
<P><A name=CTLCREF></A></P>
<P><TT class=USERINPUT><B>Ctl-C</B></TT></P>
<P><TT class=USERINPUT><B>Break</B></TT>. Terminate a foreground job.</P>
<LI>
<P><A name=CTLDREF></A></P>
<P><TT class=USERINPUT><B>Ctl-D</B></TT></P>
<P><I class=FIRSTTERM>Log out</I> from a shell (similar to <A href="http://tldp.org/LDP/abs/html/abs-guide.html#EXITCOMMANDREF">exit</A>).</P>
<P><TT class=USERINPUT><B>EOF</B></TT> (end-of-file). This also terminates input from <TT class=FILENAME>stdin</TT>.</P>
<P>When typing text on the console or in an <I class=FIRSTTERM>xterm</I> window, <TT class=USERINPUT><B>Ctl-D</B></TT> erases the character under the cursor. When there are no characters present, <TT class=USERINPUT><B>Ctl-D</B></TT> logs out of the session, as expected. In an <I class=FIRSTTERM>xterm</I> window, this has the effect of closing the window.</P>
<LI>
<P><TT class=USERINPUT><B>Ctl-E</B></TT></P>
<P>Moves cursor to end of line of text (on the command-line).</P>
<LI>
<P><TT class=USERINPUT><B>Ctl-F</B></TT></P>
<P>Moves cursor forward one character position (on the command-line).</P>
<LI>
<P><A name=CTLGREF></A></P>
<P><TT class=USERINPUT><B>Ctl-G</B></TT></P>
<P><TT class=USERINPUT><B>BEL</B></TT>. On some old-time teletype terminals, this would actually ring a bell. In an <I class=FIRSTTERM>xterm</I> it might beep.</P>
<LI>
<P><A name=CTLHREF></A></P>
<P><TT class=USERINPUT><B>Ctl-H</B></TT></P>
<P><TT class=USERINPUT><B>Rubout</B></TT> (destructive backspace). Erases characters the cursor backs over while backspacing.</P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# Embedding Ctl-H in a string.

a="^H^H"                  # Two Ctl-H's -- backspaces
                          # ctl-V ctl-H, using vi/vim
echo "abcdef"             # abcdef
echo
echo -n "abcdef$a "       # abcd f
#  Space at end  ^              ^  Backspaces twice.
echo
echo -n "abcdef$a"        # abcdef
#  No space at end               ^ Doesn't backspace (why?).
                          # Results may not be quite as expected.
echo; echo

# Constantin Hagemeier suggests trying:
# a=$'\010\010'
# a=$'\b\b'
# a=$'\x08\x08'
# But, this does not change the results.

########################################

# Now, try this.

rubout="^H^H^H^H^H"       # 5 x Ctl-H.

echo -n "12345678"
sleep 2
echo -n "$rubout"
sleep 2</PRE></FONT></TD></TR></TBODY></TABLE></P>
<LI>
<P><TT class=USERINPUT><B>Ctl-I</B></TT></P>
<P><TT class=USERINPUT><B>Horizontal tab</B></TT>.</P>
<LI>
<P><A name=CTLJREF></A></P>
<P><TT class=USERINPUT><B>Ctl-J</B></TT></P>
<P><TT class=USERINPUT><B>Newline</B></TT> (line feed). In a script, may also be expressed in octal notation -- '\012' or in hexadecimal -- '\x0a'.</P>
<LI>
<P><TT class=USERINPUT><B>Ctl-K</B></TT></P>
<P><TT class=USERINPUT><B>Vertical tab</B></TT>.</P>
<P>When typing text on the console or in an <I class=FIRSTTERM>xterm</I> window, <TT class=USERINPUT><B>Ctl-K</B></TT> erases from the character under the cursor to end of line. Within a script, <TT class=USERINPUT><B>Ctl-K</B></TT> may behave differently, as in Lee Lee Maschmeyer's example, below.</P>
<LI>
<P><TT class=USERINPUT><B>Ctl-L</B></TT></P>
<P><TT class=USERINPUT><B>Formfeed</B></TT> (clear the terminal screen). In a terminal, this has the same effect as the <A href="http://tldp.org/LDP/abs/html/abs-guide.html#CLEARREF">clear</A> command. When sent to a printer, a <TT class=USERINPUT><B>Ctl-L</B></TT> causes an advance to end of the paper sheet.</P>
<LI>
<P><A name=CTLMREF></A></P>
<P><TT class=USERINPUT><B>Ctl-M</B></TT></P>
<P><TT class=USERINPUT><B>Carriage return</B></TT>.</P>
<P>
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>#!/bin/bash
# Thank you, Lee Maschmeyer, for this example.

read -n 1 -s -p \
$'Control-M leaves cursor at beginning of this line. Press Enter. \x0d'
           # Of course, '0d' is the hex equivalent of Control-M.
echo &gt;&amp;2   #  The '-s' makes anything typed silent,
           #+ so it is necessary to go to new line explicitly.

read -n 1 -s -p $'Control-J leaves cursor on next line. \x0a'
           #  '0a' is the hex equivalent of Control-J, linefeed.
echo &gt;&amp;2

###

read -n 1 -s -p $'And Control-K\x0bgoes straight down.'
echo &gt;&amp;2   #  Control-K is vertical tab.

# A better example of the effect of a vertical tab is:

var=$'\x0aThis is the bottom line\x0bThis is the top line\x0a'
echo "$var"
#  This works the same way as the above example. However:
echo "$var" | col
#  This causes the right end of the line to be higher than the left end.
#  It also explains why we started and ended with a line feed --
#+ to avoid a garbled screen.

# As Lee Maschmeyer explains:
# --------------------------
#  In the [first vertical tab example] . . . the vertical tab
#+ makes the printing go straight down without a carriage return.
#  This is true only on devices, such as the Linux console,
#+ that can't go "backward."
#  The real purpose of VT is to go straight UP, not down.
#  It can be used to print superscripts on a printer.
#  The col utility can be used to emulate the proper behavior of VT.

exit 0</PRE></FONT></TD></TR></TBODY></TABLE></P>
<LI>
<P><TT class=USERINPUT><B>Ctl-N</B></TT></P>
<P>Erases a line of text recalled from <I class=FIRSTTERM>history buffer</I> <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FTN.AEN2107" name=AEN2107><SPAN class=footnote>[23]</SPAN></A> (on the command-line).</P>
<LI>
<P><TT class=USERINPUT><B>Ctl-O</B></TT></P>
<P>Issues a <I class=FIRSTTERM>newline</I> (on the command-line).</P>
<LI>
<P><TT class=USERINPUT><B>Ctl-P</B></TT></P>
<P>Recalls last command from <I class=FIRSTTERM>history buffer</I> (on the command-line).</P>
<LI>
<P><TT class=USERINPUT><B>Ctl-Q</B></TT></P>
<P>Resume (<TT class=USERINPUT><B>XON</B></TT>).</P>
<P>This resumes <TT class=FILENAME>stdin</TT> in a terminal.</P>
<LI>
<P><TT class=USERINPUT><B>Ctl-R</B></TT></P>
<P>Backwards search for text in <I class=FIRSTTERM>history buffer</I> (on the command-line).</P>
<LI>
<P><TT class=USERINPUT><B>Ctl-S</B></TT></P>
<P>Suspend (<TT class=USERINPUT><B>XOFF</B></TT>).</P>
<P>This freezes <TT class=FILENAME>stdin</TT> in a terminal. (Use Ctl-Q to restore input.)</P>
<LI>
<P><TT class=USERINPUT><B>Ctl-T</B></TT></P>
<P>Reverses the position of the character the cursor is on with the previous character (on the command-line).</P>
<LI>
<P><TT class=USERINPUT><B>Ctl-U</B></TT></P>
<P>Erase a line of input, from the cursor backward to beginning of line. In some settings, <TT class=USERINPUT><B>Ctl-U</B></TT> erases the entire line of input, <EM>regardless of cursor position</EM>.</P>
<LI>
<P><TT class=USERINPUT><B>Ctl-V</B></TT></P>
<P>When inputting text, <TT class=USERINPUT><B>Ctl-V</B></TT> permits inserting control characters. For example, the following two are equivalent: 
<TABLE border=0 width="90%" bgColor=#e0e0e0>
<TBODY>
<TR>
<TD><FONT color=#000000><PRE class=PROGRAMLISTING>echo -e '\x0a'
echo &lt;Ctl-V&gt;&lt;Ctl-J&gt;</PRE></FONT></TD></TR></TBODY></TABLE></P>
<P><TT class=USERINPUT><B>Ctl-V</B></TT> is primarily useful from within a text editor.</P>
<LI>
<P><TT class=USERINPUT><B>Ctl-W</B></TT></P>
<P>When typing text on the console or in an xterm window, <TT class=USERINPUT><B>Ctl-W</B></TT> erases from the character under the cursor backwards to the first instance of <A href="http://tldp.org/LDP/abs/html/abs-guide.html#WHITESPACEREF">whitespace</A>. In some settings, <TT class=USERINPUT><B>Ctl-W</B></TT> erases backwards to first non-alphanumeric character.</P>
<LI>
<P><TT class=USERINPUT><B>Ctl-X</B></TT></P>
<P>In certain word processing programs, <I class=FIRSTTERM>Cuts</I> highlighted text and copies to <I class=FIRSTTERM>clipboard</I>.</P>
<LI>
<P><TT class=USERINPUT><B>Ctl-Y</B></TT></P>
<P><I class=FIRSTTERM>Pastes</I> back text previously erased (with <TT class=USERINPUT><B>Ctl-U</B></TT> or <TT class=USERINPUT><B>Ctl-W</B></TT>).</P>
<LI>
<P><TT class=USERINPUT><B>Ctl-Z</B></TT></P>
<P><I class=FIRSTTERM>Pauses</I> a foreground job.</P>
<P><I class=FIRSTTERM>Substitute</I> operation in certain word processing applications.</P>
<P><TT class=USERINPUT><B>EOF</B></TT> (end-of-file) character in the MSDOS filesystem.</P></LI></UL>
<DT><A name=WHITESPACEREF></A>Whitespace 
<DD>
<DIV class=FORMALPARA>
<P><B>functions as a separator between commands and/or variables. </B>Whitespace consists of either <I class=FIRSTTERM>spaces</I>, <I class=FIRSTTERM>tabs</I>, <I class=FIRSTTERM>blank lines</I>, or any combination thereof. <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FTN.AEN2198" name=AEN2198><SPAN class=footnote>[24]</SPAN></A> In some contexts, such as <A href="http://tldp.org/LDP/abs/html/abs-guide.html#WSBAD">variable assignment</A>, whitespace is not permitted, and results in a syntax error.</P></DIV>
<P>Blank lines have no effect on the action of a script, and are therefore useful for visually separating functional sections.</P>
<P><A href="http://tldp.org/LDP/abs/html/abs-guide.html#IFSREF">$IFS</A>, the special variable separating <I class=FIRSTTERM>fields</I> of input to certain commands. It defaults to whitespace.</P>
<TABLE class=SIDEBAR border=1 cellPadding=5>
<TBODY>
<TR>
<TD>
<DIV class=SIDEBAR><A name=AEN2207></A>
<P></P>
<P><A name=FIELDREF></A><TT class=USERINPUT><B>Definition:</B></TT> A <I class=FIRSTTERM>field</I> is a discrete chunk of data expressed as a string of consecutive characters. Separating each field from adjacent fields is either <I class=FIRSTTERM>whitespace</I> or some other designated character (often determined by the <SPAN class=TOKEN>$IFS</SPAN>). In some contexts, a field may be called a <I class=FIRSTTERM>record</I>. </P>
<P></P></DIV></TD></TR></TBODY></TABLE>
<P><A name=QUOTINGWS></A></P>
<P>To preserve <I class=FIRSTTERM>whitespace</I> within a string or in a variable, use <A href="http://tldp.org/LDP/abs/html/abs-guide.html#QUOTINGREF">quoting</A>.</P>
<P>UNIX <A href="http://tldp.org/LDP/abs/html/abs-guide.html#FILTERDEF">filters</A> can target and operate on <I class=FIRSTTERM>whitespace</I> using the <A href="http://tldp.org/LDP/abs/html/abs-guide.html#POSIXREF">POSIX</A> character class <A href="http://tldp.org/LDP/abs/html/abs-guide.html#WSPOSIX">[:space:]</A>.</P></DD></DL></DIV>