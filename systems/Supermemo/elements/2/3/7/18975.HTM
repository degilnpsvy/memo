<H1 style="BORDER-BOTTOM: rgb(238,238,238) 0px solid; LINE-HEIGHT: 23px; TEXT-TRANSFORM: none; FONT-VARIANT: normal; FONT-STYLE: normal; TEXT-INDENT: 0px; FONT-FAMILY: Georgia, Times, sans-serif, Arial, Verdana, Helvetica; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: 1.8em; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" id=toc_1>qemu internal part 1: the code path of memory load emulation</H1>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0.8em 0px; FONT: 18px/1.5em Georgia, Times, sans-serif, Arial, Verdana, Helvetica; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In qemu, there are two different meanings of target. The first meaning of &#8216;target&#8217; means the emulated target machine architecture. For example, when emulating mips machine on x86, the target is mips and host is x86. However, in tcg(tiny code generator), target has a different meaning. It means the generated binary architecture. <FONT class=extract>In the example of emulating mips on x86, in tcg the target means x86 because tcg will generate x86 binary.</FONT></P>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0.8em 0px; FONT: 18px/1.5em Georgia, Times, sans-serif, Arial, Verdana, Helvetica; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">This article is based on qemu version 0.10.5 and target machine emulated is little endian mips. I will summarize the code path of mips lw instruction emulation in qemu.</P><SPAN style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: 18px/23px Georgia, Times, sans-serif, Arial, Verdana, Helvetica; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Function<SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN><EM style="LINE-HEIGHT: 23px; TEXT-TRANSFORM: none; FONT-VARIANT: normal; TEXT-INDENT: 0px; FONT-FAMILY: Georgia, Times, sans-serif, Arial, Verdana, Helvetica; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: 18px; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">decode_opc</EM><SPAN style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: 18px/23px Georgia, Times, sans-serif, Arial, Verdana, Helvetica; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used for decoding all the fetched instructions before tcg generating the target binary.</SPAN><PRE style="BORDER-BOTTOM: rgb(238,238,238) 1px solid; BORDER-LEFT: rgb(238,238,238) 3px solid; PADDING-BOTTOM: 5px; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0.5em; PADDING-LEFT: 5px; PADDING-RIGHT: 5px; FONT: 0.9em/1.5em 'Courier New', &#23435;&#20307;; BACKGROUND: rgb(248,248,248); LETTER-SPACING: normal; COLOR: rgb(0,0,0); OVERFLOW: hidden; BORDER-TOP: rgb(238,238,238) 1px solid; BORDER-RIGHT: rgb(238,238,238) 0px solid; WORD-SPACING: 0px; PADDING-TOP: 5px; -webkit-text-stroke-width: 0px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px">target-mips/translate.c

7566 static void decode_opc (CPUState *env, DisasContext *ctx)

7960     case OPC_LB ... OPC_LWR: /* Load and stores */
7961     case OPC_SB ... OPC_SW:
7962     case OPC_SWR:
7963     case OPC_LL:
7964     case OPC_SC:
7965          gen_ldst(ctx, op, rt, rs, imm);
7966          break;
</PRE><SPAN style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: 18px/23px Georgia, Times, sans-serif, Arial, Verdana, Helvetica; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">It will call function<SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN><EM style="LINE-HEIGHT: 23px; TEXT-TRANSFORM: none; FONT-VARIANT: normal; TEXT-INDENT: 0px; FONT-FAMILY: Georgia, Times, sans-serif, Arial, Verdana, Helvetica; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: 18px; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">gen_ldst</EM><SPAN style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: 18px/23px Georgia, Times, sans-serif, Arial, Verdana, Helvetica; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><SPAN class=Apple-converted-space>&nbsp;</SPAN>which is also in<SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN><EM style="LINE-HEIGHT: 23px; TEXT-TRANSFORM: none; FONT-VARIANT: normal; TEXT-INDENT: 0px; FONT-FAMILY: Georgia, Times, sans-serif, Arial, Verdana, Helvetica; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: 18px; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">target-mips/translate.c</EM><SPAN style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: 18px/23px Georgia, Times, sans-serif, Arial, Verdana, Helvetica; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">.</SPAN><PRE style="BORDER-BOTTOM: rgb(238,238,238) 1px solid; BORDER-LEFT: rgb(238,238,238) 3px solid; PADDING-BOTTOM: 5px; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0.5em; PADDING-LEFT: 5px; PADDING-RIGHT: 5px; FONT: 0.9em/1.5em 'Courier New', &#23435;&#20307;; BACKGROUND: rgb(248,248,248); LETTER-SPACING: normal; COLOR: rgb(0,0,0); OVERFLOW: hidden; BORDER-TOP: rgb(238,238,238) 1px solid; BORDER-RIGHT: rgb(238,238,238) 0px solid; WORD-SPACING: 0px; PADDING-TOP: 5px; -webkit-text-stroke-width: 0px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px">target-mips/translate.c

973 static void gen_ldst (DisasContext *ctx, uint32_t opc, int rt,
974                       int base, int16_t offset)

1046     case OPC_LW:
1047         op_ldst_lw(t0, ctx);
1048         gen_store_gpr(t0, rt);
1049         opn = "lw";
1050         break;
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0.8em 0px; FONT: 18px/1.5em Georgia, Times, sans-serif, Arial, Verdana, Helvetica; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Function<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>op_ldst_lw</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>will generate the target binary which fetches the value from the emulated guest memory and<EM>gen_store_gpr</EM><SPAN class=Apple-converted-space>&nbsp;</SPAN>will store this value to the emulated cpu&#8217;s general register rt. Function<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>op_ldst_lw<SPAN class=Apple-converted-space>&nbsp;</SPAN></EM>is generated by the macro<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>OP_LD</EM>.</P><PRE style="BORDER-BOTTOM: rgb(238,238,238) 1px solid; BORDER-LEFT: rgb(238,238,238) 3px solid; PADDING-BOTTOM: 5px; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0.5em; PADDING-LEFT: 5px; PADDING-RIGHT: 5px; FONT: 0.9em/1.5em 'Courier New', &#23435;&#20307;; BACKGROUND: rgb(248,248,248); LETTER-SPACING: normal; COLOR: rgb(0,0,0); OVERFLOW: hidden; BORDER-TOP: rgb(238,238,238) 1px solid; BORDER-RIGHT: rgb(238,238,238) 0px solid; WORD-SPACING: 0px; PADDING-TOP: 5px; -webkit-text-stroke-width: 0px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px">target-mips/translate.c

901 #define OP_LD(insn,fname)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \
902 static inline void op_ldst_##insn(TCGv t0, DisasContext *ctx)&nbsp;&nbsp;&nbsp; \
903 {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \
904&nbsp;&nbsp;&nbsp;&nbsp; tcg_gen_qemu_##fname(t0, t0, ctx-&gt;mem_idx);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \
905 }

910 OP_LD(lw,ld32s);
</PRE>
<P style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0.8em 0px; FONT: 18px/1.5em Georgia, Times, sans-serif, Arial, Verdana, Helvetica; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">We can find that<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>op_ldst_lw<SPAN class=Apple-converted-space>&nbsp;</SPAN></EM>is a function which calls function<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>tcg_gen_qemu_ld32s</EM>. It will output the OPC(<EM>INDEX_op_qemu_ld32u</EM>) and args to<SPAN class=Apple-converted-space>&nbsp;</SPAN><EM>gen_opc_ptr</EM>.</P><PRE style="BORDER-BOTTOM: rgb(238,238,238) 1px solid; BORDER-LEFT: rgb(238,238,238) 3px solid; PADDING-BOTTOM: 5px; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0.5em; PADDING-LEFT: 5px; PADDING-RIGHT: 5px; FONT: 0.9em/1.5em 'Courier New', &#23435;&#20307;; BACKGROUND: rgb(248,248,248); LETTER-SPACING: normal; COLOR: rgb(0,0,0); OVERFLOW: hidden; BORDER-TOP: rgb(238,238,238) 1px solid; BORDER-RIGHT: rgb(238,238,238) 0px solid; WORD-SPACING: 0px; PADDING-TOP: 5px; -webkit-text-stroke-width: 0px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px">tcg/tcg-op.h

1793 static inline void tcg_gen_qemu_ld32s(TCGv ret, TCGv addr, int mem_index)
1794 {
1795 #if TARGET_LONG_BITS == 32
1796&nbsp;&nbsp;&nbsp;&nbsp; tcg_gen_op3i_i32(INDEX_op_qemu_ld32u, ret, addr, mem_index);
1797 #else
1798&nbsp;&nbsp;&nbsp;&nbsp; tcg_gen_op4i_i32(INDEX_op_qemu_ld32u, TCGV_LOW(ret), TCGV_LOW(addr),
1799&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TCGV_HIGH(addr), mem_index);
1800&nbsp;&nbsp;&nbsp;&nbsp; tcg_gen_sari_i32(TCGV_HIGH(ret), TCGV_LOW(ret), 31);
1801 #endif
1802 }

99 static inline void tcg_gen_op3i_i32(int opc, TCGv_i32 arg1, TCGv_i32 arg2,
100&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; TCGArg arg3)
101 {
102&nbsp;&nbsp;&nbsp;&nbsp; *gen_opc_ptr++ = opc;
103&nbsp;&nbsp;&nbsp;&nbsp; *gen_opparam_ptr++ = GET_TCGV_I32(arg1);
104&nbsp;&nbsp;&nbsp;&nbsp; *gen_opparam_ptr++ = GET_TCGV_I32(arg2);
105&nbsp;&nbsp;&nbsp;&nbsp; *gen_opparam_ptr++ = arg3;
106 }</PRE><SPAN style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: 18px/23px Georgia, Times, sans-serif, Arial, Verdana, Helvetica; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The path of generation of target binary code of tcg is as following.</SPAN><PRE style="BORDER-BOTTOM: rgb(238,238,238) 1px solid; BORDER-LEFT: rgb(238,238,238) 3px solid; PADDING-BOTTOM: 5px; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0.5em; PADDING-LEFT: 5px; PADDING-RIGHT: 5px; FONT: 0.9em/1.5em 'Courier New', &#23435;&#20307;; BACKGROUND: rgb(248,248,248); LETTER-SPACING: normal; COLOR: rgb(0,0,0); OVERFLOW: hidden; BORDER-TOP: rgb(238,238,238) 1px solid; BORDER-RIGHT: rgb(238,238,238) 0px solid; WORD-SPACING: 0px; PADDING-TOP: 5px; -webkit-text-stroke-width: 0px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px">cpu_gen_code-&gt;tcg_gen_code-&gt;tcg_gen_code_common-&gt;tcg_reg_alloc_op-&gt;tcg_out_op
</PRE><PRE style="BORDER-BOTTOM: rgb(238,238,238) 1px solid; BORDER-LEFT: rgb(238,238,238) 3px solid; PADDING-BOTTOM: 5px; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0.5em; PADDING-LEFT: 5px; PADDING-RIGHT: 5px; FONT: 0.9em/1.5em 'Courier New', &#23435;&#20307;; BACKGROUND: rgb(248,248,248); LETTER-SPACING: normal; COLOR: rgb(0,0,0); OVERFLOW: hidden; BORDER-TOP: rgb(238,238,238) 1px solid; BORDER-RIGHT: rgb(238,238,238) 0px solid; WORD-SPACING: 0px; PADDING-TOP: 5px; -webkit-text-stroke-width: 0px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px">tcg/i386/tcg-target.c

856 static inline void tcg_out_op(TCGContext *s, int opc,
857&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const TCGArg *args, const int *const_args)

1041&nbsp;&nbsp;&nbsp;&nbsp; case INDEX_op_qemu_ld32u:
1042&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; tcg_out_qemu_ld(s, args, 2);
1043&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break;

431 static void tcg_out_qemu_ld(TCGContext *s, const TCGArg *args,
432&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; int opc)

508 #if TARGET_LONG_BITS == 32
509&nbsp;&nbsp;&nbsp;&nbsp; tcg_out_movi(s, TCG_TYPE_I32, TCG_REG_EDX, mem_index);
510 #else
511&nbsp;&nbsp;&nbsp;&nbsp; tcg_out_mov(s, TCG_REG_EDX, addr_reg2);
512&nbsp;&nbsp;&nbsp;&nbsp; tcg_out_movi(s, TCG_TYPE_I32, TCG_REG_ECX, mem_index);
513 #endif
514&nbsp;&nbsp;&nbsp;&nbsp; tcg_out8(s, 0xe8);
515&nbsp;&nbsp;&nbsp;&nbsp; tcg_out32(s, (tcg_target_long)qemu_ld_helpers[s_bits] -
516&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (tcg_target_long)s-&gt;code_ptr - 4);
</PRE><SPAN style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: 18px/23px Georgia, Times, sans-serif, Arial, Verdana, Helvetica; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In line 514, tcg outputs 0xe8 which means a call instruction in x86. It will call the functions in array<SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN><EM style="LINE-HEIGHT: 23px; TEXT-TRANSFORM: none; FONT-VARIANT: normal; TEXT-INDENT: 0px; FONT-FAMILY: Georgia, Times, sans-serif, Arial, Verdana, Helvetica; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: 18px; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">qemu_ld_helpers.</EM><SPAN style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: 18px/23px Georgia, Times, sans-serif, Arial, Verdana, Helvetica; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The args to the functions is passed by registers EAX,EDX and ECX.</SPAN><PRE style="BORDER-BOTTOM: rgb(238,238,238) 1px solid; BORDER-LEFT: rgb(238,238,238) 3px solid; PADDING-BOTTOM: 5px; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0.5em; PADDING-LEFT: 5px; PADDING-RIGHT: 5px; FONT: 0.9em/1.5em 'Courier New', &#23435;&#20307;; BACKGROUND: rgb(248,248,248); LETTER-SPACING: normal; COLOR: rgb(0,0,0); OVERFLOW: hidden; BORDER-TOP: rgb(238,238,238) 1px solid; BORDER-RIGHT: rgb(238,238,238) 0px solid; WORD-SPACING: 0px; PADDING-TOP: 5px; -webkit-text-stroke-width: 0px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px">tcg/i386/tcg-target.c

413 static void *qemu_ld_helpers[4] = {
414&nbsp;&nbsp;&nbsp;&nbsp; __ldb_mmu,
415&nbsp;&nbsp;&nbsp;&nbsp; __ldw_mmu,
416&nbsp;&nbsp;&nbsp;&nbsp; __ldl_mmu,
417&nbsp;&nbsp;&nbsp;&nbsp; __ldq_mmu,
418 };</PRE><SPAN style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: 18px/23px Georgia, Times, sans-serif, Arial, Verdana, Helvetica; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">These functions<SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN><EM style="LINE-HEIGHT: 23px; TEXT-TRANSFORM: none; FONT-VARIANT: normal; TEXT-INDENT: 0px; FONT-FAMILY: Georgia, Times, sans-serif, Arial, Verdana, Helvetica; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: 18px; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">__ldb_mmu/__ldw_mmu</EM><SPAN style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: 18px/23px Georgia, Times, sans-serif, Arial, Verdana, Helvetica; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><SPAN class=Apple-converted-space>&nbsp;</SPAN>are defined in softmmu_template.h.</SPAN><PRE style="BORDER-BOTTOM: rgb(238,238,238) 1px solid; BORDER-LEFT: rgb(238,238,238) 3px solid; PADDING-BOTTOM: 5px; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0.5em; PADDING-LEFT: 5px; PADDING-RIGHT: 5px; FONT: 0.9em/1.5em 'Courier New', &#23435;&#20307;; BACKGROUND: rgb(248,248,248); LETTER-SPACING: normal; COLOR: rgb(0,0,0); OVERFLOW: hidden; BORDER-TOP: rgb(238,238,238) 1px solid; BORDER-RIGHT: rgb(238,238,238) 0px solid; WORD-SPACING: 0px; PADDING-TOP: 5px; -webkit-text-stroke-width: 0px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px">softmmu_tempate.h

DATA_TYPE REGPARM glue(glue(__ld, SUFFIX), MMUSUFFIX)(target_ulong addr,
int mmu_idx)
</PRE><SPAN style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: 18px/23px Georgia, Times, sans-serif, Arial, Verdana, Helvetica; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In sum, function<SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN><EM style="LINE-HEIGHT: 23px; TEXT-TRANSFORM: none; FONT-VARIANT: normal; TEXT-INDENT: 0px; FONT-FAMILY: Georgia, Times, sans-serif, Arial, Verdana, Helvetica; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: 18px; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">gen_ldst</EM><SPAN style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: 18px/23px Georgia, Times, sans-serif, Arial, Verdana, Helvetica; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><SPAN class=Apple-converted-space>&nbsp;</SPAN>outputs the OPC(INDEX_op_qemu_ld32u) to<SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN><EM style="LINE-HEIGHT: 23px; TEXT-TRANSFORM: none; FONT-VARIANT: normal; TEXT-INDENT: 0px; FONT-FAMILY: Georgia, Times, sans-serif, Arial, Verdana, Helvetica; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: 18px; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">gen_opc_ptr</EM><SPAN style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: 18px/23px Georgia, Times, sans-serif, Arial, Verdana, Helvetica; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN><EM style="LINE-HEIGHT: 23px; TEXT-TRANSFORM: none; FONT-VARIANT: normal; TEXT-INDENT: 0px; FONT-FAMILY: Georgia, Times, sans-serif, Arial, Verdana, Helvetica; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: 18px; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">tcg_out_op</EM><SPAN style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: 18px/23px Georgia, Times, sans-serif, Arial, Verdana, Helvetica; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><SPAN class=Apple-converted-space>&nbsp;</SPAN>will generates the target binary according to the OPC. In the lw instruction emulation, it will generate the x86 binary calls the functions in<SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN><EM style="LINE-HEIGHT: 23px; TEXT-TRANSFORM: none; FONT-VARIANT: normal; TEXT-INDENT: 0px; FONT-FAMILY: Georgia, Times, sans-serif, Arial, Verdana, Helvetica; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(0,0,0); FONT-SIZE: 18px; FONT-WEIGHT: normal; WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">softmmu_template.h</EM><SPAN style="TEXT-TRANSFORM: none; TEXT-INDENT: 0px; DISPLAY: inline !important; FONT: 18px/23px Georgia, Times, sans-serif, Arial, Verdana, Helvetica; WHITE-SPACE: normal; FLOAT: none; LETTER-SPACING: normal; COLOR: rgb(0,0,0); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">.</SPAN> 
<P style="TEXT-ALIGN: left; PADDING-BOTTOM: 4px; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0.8em 0px; PADDING-LEFT: 8px; PADDING-RIGHT: 8px; FONT: 18px/1.5em Georgia, Times, sans-serif, Arial, Verdana, Helvetica; WHITE-SPACE: normal; BACKGROUND: rgb(231,242,253); LETTER-SPACING: normal; COLOR: rgb(6,95,185); WORD-SPACING: 0px; PADDING-TOP: 4px; -webkit-text-stroke-width: 0px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px; -webkit-box-shadow: rgb(153, 153, 153) 0px 0px 8px; box-shadow: rgb(153, 153, 153) 0px 0px 8px">2009/07/08(YYYY/MM/DD) Category:<A style="COLOR: rgb(0,43,184); TEXT-DECORATION: underline" href="http://vm-kernel.org/blog/category.html?cat=QEMU">QEMU</A><SPAN class=Apple-converted-space>&nbsp;</SPAN><BR>Tag: QEMU, MIPS