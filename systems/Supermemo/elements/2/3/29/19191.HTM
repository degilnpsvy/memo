<H1 style="BOX-SIZING: border-box; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 20px 0px 10px; FONT: 500 72px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(51,51,51); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Lesson 5: Clipping Sprite Sheets</H1>
<P style="BOX-SIZING: border-box; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0px 0px 10px; FONT: 28px/40px 'Helvetica Neue', Helvetica, Arial, sans-serif; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(51,51,51); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">It&#8217;s common in sprite based games to use a larger image file containing many smaller images, such as the tiles for a tileset, instead of having a separate image file for each tile. This type of image is known as a sprite sheet and is very handy to work with since we don&#8217;t need to change which texture we&#8217;re drawing each time but rather just which subsection of the texture.</P>
<P style="BOX-SIZING: border-box; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0px 0px 10px; FONT: 28px/40px 'Helvetica Neue', Helvetica, Arial, sans-serif; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(51,51,51); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In this lesson we&#8217;ll see how to select subsections of textures using<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="BOX-SIZING: border-box; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(66,139,202); TEXT-DECORATION: none" href="http://wiki.libsdl.org/SDL_RenderCopy"><CODE style="BOX-SIZING: border-box; BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; PADDING-BOTTOM: 0px; BACKGROUND-COLOR: transparent; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; FONT-FAMILY: Menlo, Monaco, Consolas, 'Courier New', monospace; WHITE-SPACE: nowrap; COLOR: rgb(42,100,150); FONT-SIZE: 26px; BORDER-TOP: medium none; BORDER-RIGHT: medium none; PADDING-TOP: 0px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px">SDL_RenderCopy</CODE></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and also see a bit on detecting specific key press events, which we&#8217;ll use to pick which section of the texture to draw. The sprite sheet will contain four different colored circles:</P>
<P style="BOX-SIZING: border-box; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0px 0px 10px; FONT: 28px/40px 'Helvetica Neue', Helvetica, Arial, sans-serif; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(51,51,51); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><A style="BOX-SIZING: border-box; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(66,139,202); TEXT-DECORATION: none" href="https://github.com/Twinklebear/TwinklebearDev-Lessons/raw/master/res/Lesson5/image.png"><IMG style="BOX-SIZING: border-box; BORDER-BOTTOM: 0px; BORDER-LEFT: 0px; MARGIN: 0px auto; DISPLAY: block; VERTICAL-ALIGN: middle; BORDER-TOP: 0px; BORDER-RIGHT: 0px" class=centered src="https://github.com/Twinklebear/TwinklebearDev-Lessons/raw/master/res/Lesson5/image.png" width=200 height=auto></A><BR style="BOX-SIZING: border-box"></P>
<P style="BOX-SIZING: border-box; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0px 0px 10px; FONT: 28px/40px 'Helvetica Neue', Helvetica, Arial, sans-serif; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(51,51,51); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">A sprite sheet can be built up of many uniform sized sprites, in which case clipping is easy, or many different sized sprites. To handle a sheet with varying sized sprites we&#8217;d need a metadata file that contained the location information for the clips. For this lesson our sheet has 4 100x100 sprites. The code for this lesson builds off of lesson 4, if you don&#8217;t have the code to build on top of grab it from<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="BOX-SIZING: border-box; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(66,139,202); TEXT-DECORATION: none" href="https://github.com/Twinklebear/TwinklebearDev-Lessons/tree/master/Lesson4">Github</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and let&#8217;s get started!</P>
<H2 style="BOX-SIZING: border-box; TEXT-TRANSFORM: none; MARGIN-TOP: 20px; TEXT-INDENT: 0px; FONT: 500 60px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; WHITE-SPACE: normal; MARGIN-BOTTOM: 10px; LETTER-SPACING: normal; COLOR: rgb(51,51,51); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" id=selecting-a-subsection-of-an-image>Selecting a Subsection of an Image</H2>
<P style="BOX-SIZING: border-box; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0px 0px 10px; FONT: 28px/40px 'Helvetica Neue', Helvetica, Arial, sans-serif; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(51,51,51); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">Selecting the subsection of the texture that we want to draw is very easy with SDL. In Lesson 4, the remaining NULL parameter that we&#8217;re passing to<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="BOX-SIZING: border-box; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(66,139,202); TEXT-DECORATION: none" href="http://wiki.libsdl.org/SDL_RenderCopy"><CODE style="BOX-SIZING: border-box; BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; PADDING-BOTTOM: 0px; BACKGROUND-COLOR: transparent; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; FONT-FAMILY: Menlo, Monaco, Consolas, 'Courier New', monospace; WHITE-SPACE: nowrap; COLOR: rgb(42,100,150); FONT-SIZE: 26px; BORDER-TOP: medium none; BORDER-RIGHT: medium none; PADDING-TOP: 0px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px">SDL_RenderCopy</CODE></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>is the source rect, which specifies the section of the texture we want to draw. When passing NULL we specify that we want the entire texture, but we can easily add a clip rect and start drawing only portions of the texture. To do this we&#8217;ll be making some modifications to our renderTexture function to make it able to take a desired clipping rect, but still keep some of the shorter syntax and conveniences from before.</P>
<H2 style="BOX-SIZING: border-box; TEXT-TRANSFORM: none; MARGIN-TOP: 20px; TEXT-INDENT: 0px; FONT: 500 60px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; WHITE-SPACE: normal; MARGIN-BOTTOM: 10px; LETTER-SPACING: normal; COLOR: rgb(51,51,51); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" id=modifying-rendertexture>Modifying renderTexture</H2>
<P style="BOX-SIZING: border-box; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0px 0px 10px; FONT: 28px/40px 'Helvetica Neue', Helvetica, Arial, sans-serif; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(51,51,51); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">To keep from tacking on more and more parameters to our renderTexture function and still maintain the convenience the defaults provided we&#8217;ll split it up into two functions. One is practically an identical call to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BOX-SIZING: border-box; BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; PADDING-BOTTOM: 0px; BACKGROUND-COLOR: transparent; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; FONT-FAMILY: Menlo, Monaco, Consolas, 'Courier New', monospace; WHITE-SPACE: nowrap; COLOR: rgb(51,51,51); FONT-SIZE: 26px; BORDER-TOP: medium none; BORDER-RIGHT: medium none; PADDING-TOP: 0px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px">SDL_RenderCopy</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>but provides the clip parameter with a default<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BOX-SIZING: border-box; BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; PADDING-BOTTOM: 0px; BACKGROUND-COLOR: transparent; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; FONT-FAMILY: Menlo, Monaco, Consolas, 'Courier New', monospace; WHITE-SPACE: nowrap; COLOR: rgb(51,51,51); FONT-SIZE: 26px; BORDER-TOP: medium none; BORDER-RIGHT: medium none; PADDING-TOP: 0px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px">nullptr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>value. This version of renderTexture will take the destination as rect instead, which we can setup ourselves or have constructed by one of our other specialized renderTexture functions. The new base rendering function becomes very simple.</P>
<DIV style="BOX-SIZING: border-box; BORDER-BOTTOM: 1px solid; BORDER-LEFT: 1px solid; PADDING-BOTTOM: 8px; TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(73,72,62); TEXT-INDENT: 0px; MARGIN: 0px 2px 2px 0px; PADDING-LEFT: 8px; PADDING-RIGHT: 8px; DISPLAY: block; FONT: 24px/42px Monaco, 'Andale Mono', 'Courier New', monospace; WORD-WRAP: break-word; WHITE-SPACE: pre-wrap; LETTER-SPACING: normal; COLOR: rgb(248,248,242); BORDER-TOP: 1px solid; BORDER-RIGHT: 1px solid; WORD-SPACING: 0px; PADDING-TOP: 8px; -webkit-text-stroke-width: 0px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px" class=highlight><PRE style="BOX-SIZING: border-box; BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; PADDING-BOTTOM: 9px; LINE-HEIGHT: 1.4285; BACKGROUND-COLOR: transparent; MARGIN: 0px; PADDING-LEFT: 9px; PADDING-RIGHT: 9px; DISPLAY: block; FONT-FAMILY: Menlo, Monaco, Consolas, 'Courier New', monospace; WORD-WRAP: break-word; WHITE-SPACE: pre-wrap; COLOR: white; FONT-SIZE: 1em; WORD-BREAK: break-all; BORDER-TOP: medium none; BORDER-RIGHT: medium none; PADDING-TOP: 9px; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px"><CODE style="BOX-SIZING: border-box; BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; PADDING-BOTTOM: 9px; LINE-HEIGHT: 1.4285; BACKGROUND-COLOR: transparent; MARGIN: 0px; PADDING-LEFT: 9px; PADDING-RIGHT: 9px; DISPLAY: block; FONT-FAMILY: Menlo, Monaco, Consolas, 'Courier New', monospace; WORD-WRAP: break-word; WHITE-SPACE: pre-wrap; COLOR: white; FONT-SIZE: 1em; WORD-BREAK: break-all; BORDER-TOP: medium none; BORDER-RIGHT: medium none; PADDING-TOP: 9px; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px" class=language-c-- data-lang="c++"><SPAN style="BOX-SIZING: border-box; COLOR: rgb(166,166,166)" class=cm>/**</SPAN>
<SPAN style="BOX-SIZING: border-box; COLOR: rgb(166,166,166)" class=cm>* Draw an SDL_Texture to an SDL_Renderer at some destination rect</SPAN>
<SPAN style="BOX-SIZING: border-box; COLOR: rgb(166,166,166)" class=cm>* taking a clip of the texture if desired</SPAN>
<SPAN style="BOX-SIZING: border-box; COLOR: rgb(166,166,166)" class=cm>* @param tex The source texture we want to draw</SPAN>
<SPAN style="BOX-SIZING: border-box; COLOR: rgb(166,166,166)" class=cm>* @param ren The renderer we want to draw to</SPAN>
<SPAN style="BOX-SIZING: border-box; COLOR: rgb(166,166,166)" class=cm>* @param dst The destination rectangle to render the texture to</SPAN>
<SPAN style="BOX-SIZING: border-box; COLOR: rgb(166,166,166)" class=cm>* @param clip The sub-section of the texture to draw (clipping rect)</SPAN>
<SPAN style="BOX-SIZING: border-box; COLOR: rgb(166,166,166)" class=cm>*		default of nullptr draws the entire texture</SPAN>
<SPAN style="BOX-SIZING: border-box; COLOR: rgb(166,166,166)" class=cm>*/</SPAN>
<SPAN style="BOX-SIZING: border-box; COLOR: rgb(102,217,239)" class=kt>void</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(166,226,46)" class=nf>renderTexture</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>(</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>SDL_Texture</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>*</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>tex</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>,</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>SDL_Renderer</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>*</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>ren</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>,</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>SDL_Rect</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>dst</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>,</SPAN>
	<SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>SDL_Rect</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>*</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>clip</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>=</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(102,217,239)" class=k>nullptr</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>)</SPAN>
<SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>{</SPAN>
	<SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>SDL_RenderCopy</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>(</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>ren</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>,</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>tex</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>,</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>clip</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>,</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>&amp;</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>dst</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>);</SPAN>
<SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>}</SPAN></CODE></PRE></DIV>
<P style="BOX-SIZING: border-box; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0px 0px 10px; FONT: 28px/40px 'Helvetica Neue', Helvetica, Arial, sans-serif; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(51,51,51); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><BR style="BOX-SIZING: border-box"></P>
<P style="BOX-SIZING: border-box; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0px 0px 10px; FONT: 28px/40px 'Helvetica Neue', Helvetica, Arial, sans-serif; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(51,51,51); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">It was also really nice when we didn&#8217;t need to create an SDL_Rect for our destination but could just provide an x and y position and have our rendering function fill in the width and height of the texture. We&#8217;ll create an overloaded version of renderTexture that will do this, with some tweaks to handle clipping. We&#8217;ll add the clip rect as a parameter with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BOX-SIZING: border-box; BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; PADDING-BOTTOM: 0px; BACKGROUND-COLOR: transparent; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; FONT-FAMILY: Menlo, Monaco, Consolas, 'Courier New', monospace; WHITE-SPACE: nowrap; COLOR: rgb(51,51,51); FONT-SIZE: 26px; BORDER-TOP: medium none; BORDER-RIGHT: medium none; PADDING-TOP: 0px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px">nullptr</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>as a default value and in the case that a clip was passed, we&#8217;ll use the clip&#8217;s width and height instead of the texture&#8217;s width and height. This way we won&#8217;t stretch a small sprite to be the size of its potentially very large sprite sheet when it&#8217;s drawn. This function is a modification of our original renderTexture function, and should look pretty similar.</P>
<DIV style="BOX-SIZING: border-box; BORDER-BOTTOM: 1px solid; BORDER-LEFT: 1px solid; PADDING-BOTTOM: 8px; TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(73,72,62); TEXT-INDENT: 0px; MARGIN: 0px 2px 2px 0px; PADDING-LEFT: 8px; PADDING-RIGHT: 8px; DISPLAY: block; FONT: 24px/42px Monaco, 'Andale Mono', 'Courier New', monospace; WORD-WRAP: break-word; WHITE-SPACE: pre-wrap; LETTER-SPACING: normal; COLOR: rgb(248,248,242); BORDER-TOP: 1px solid; BORDER-RIGHT: 1px solid; WORD-SPACING: 0px; PADDING-TOP: 8px; -webkit-text-stroke-width: 0px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px" class=highlight><PRE style="BOX-SIZING: border-box; BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; PADDING-BOTTOM: 9px; LINE-HEIGHT: 1.4285; BACKGROUND-COLOR: transparent; MARGIN: 0px; PADDING-LEFT: 9px; PADDING-RIGHT: 9px; DISPLAY: block; FONT-FAMILY: Menlo, Monaco, Consolas, 'Courier New', monospace; WORD-WRAP: break-word; WHITE-SPACE: pre-wrap; COLOR: white; FONT-SIZE: 1em; WORD-BREAK: break-all; BORDER-TOP: medium none; BORDER-RIGHT: medium none; PADDING-TOP: 9px; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px"><CODE style="BOX-SIZING: border-box; BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; PADDING-BOTTOM: 9px; LINE-HEIGHT: 1.4285; BACKGROUND-COLOR: transparent; MARGIN: 0px; PADDING-LEFT: 9px; PADDING-RIGHT: 9px; DISPLAY: block; FONT-FAMILY: Menlo, Monaco, Consolas, 'Courier New', monospace; WORD-WRAP: break-word; WHITE-SPACE: pre-wrap; COLOR: white; FONT-SIZE: 1em; WORD-BREAK: break-all; BORDER-TOP: medium none; BORDER-RIGHT: medium none; PADDING-TOP: 9px; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px" class=language-c-- data-lang="c++"><SPAN style="BOX-SIZING: border-box; COLOR: rgb(166,166,166)" class=cm>/**</SPAN>
<SPAN style="BOX-SIZING: border-box; COLOR: rgb(166,166,166)" class=cm>* Draw an SDL_Texture to an SDL_Renderer at position x, y, preserving</SPAN>
<SPAN style="BOX-SIZING: border-box; COLOR: rgb(166,166,166)" class=cm>* the texture's width and height and taking a clip of the texture if desired</SPAN>
<SPAN style="BOX-SIZING: border-box; COLOR: rgb(166,166,166)" class=cm>* If a clip is passed, the clip's width and height will be used instead of</SPAN>
<SPAN style="BOX-SIZING: border-box; COLOR: rgb(166,166,166)" class=cm>*	the texture's</SPAN>
<SPAN style="BOX-SIZING: border-box; COLOR: rgb(166,166,166)" class=cm>* @param tex The source texture we want to draw</SPAN>
<SPAN style="BOX-SIZING: border-box; COLOR: rgb(166,166,166)" class=cm>* @param ren The renderer we want to draw to</SPAN>
<SPAN style="BOX-SIZING: border-box; COLOR: rgb(166,166,166)" class=cm>* @param x The x coordinate to draw to</SPAN>
<SPAN style="BOX-SIZING: border-box; COLOR: rgb(166,166,166)" class=cm>* @param y The y coordinate to draw to</SPAN>
<SPAN style="BOX-SIZING: border-box; COLOR: rgb(166,166,166)" class=cm>* @param clip The sub-section of the texture to draw (clipping rect)</SPAN>
<SPAN style="BOX-SIZING: border-box; COLOR: rgb(166,166,166)" class=cm>*		default of nullptr draws the entire texture</SPAN>
<SPAN style="BOX-SIZING: border-box; COLOR: rgb(166,166,166)" class=cm>*/</SPAN>
<SPAN style="BOX-SIZING: border-box; COLOR: rgb(102,217,239)" class=kt>void</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(166,226,46)" class=nf>renderTexture</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>(</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>SDL_Texture</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>*</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>tex</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>,</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>SDL_Renderer</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>*</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>ren</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>,</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(102,217,239)" class=kt>int</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>x</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>,</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(102,217,239)" class=kt>int</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>y</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>,</SPAN>
	<SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>SDL_Rect</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>*</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>clip</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>=</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(102,217,239)" class=k>nullptr</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>)</SPAN>
<SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>{</SPAN>
	<SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>SDL_Rect</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>dst</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>;</SPAN>
	<SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>dst</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>.</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>x</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>=</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>x</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>;</SPAN>
	<SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>dst</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>.</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>y</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>=</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>y</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>;</SPAN>
	<SPAN style="BOX-SIZING: border-box; COLOR: rgb(102,217,239)" class=k>if</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>(</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>clip</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>!=</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(102,217,239)" class=k>nullptr</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>){</SPAN>
		<SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>dst</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>.</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>w</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>=</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>clip</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>-&gt;</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>w</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>;</SPAN>
		<SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>dst</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>.</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>h</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>=</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>clip</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>-&gt;</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>h</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>;</SPAN>
	<SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>}</SPAN>
	<SPAN style="BOX-SIZING: border-box; COLOR: rgb(102,217,239)" class=k>else</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>{</SPAN>
		<SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>SDL_QueryTexture</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>(</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>tex</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>,</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=nb>NULL</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>,</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=nb>NULL</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>,</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>&amp;</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>dst</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>.</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>w</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>,</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>&amp;</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>dst</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>.</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>h</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>);</SPAN>
	<SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>}</SPAN>
	<SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>renderTexture</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>(</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>tex</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>,</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>ren</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>,</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>dst</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>,</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>clip</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>);</SPAN>
<SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>}</SPAN></CODE></PRE></DIV>
<P style="BOX-SIZING: border-box; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0px 0px 10px; FONT: 28px/40px 'Helvetica Neue', Helvetica, Arial, sans-serif; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(51,51,51); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><BR style="BOX-SIZING: border-box"></P>
<H2 style="BOX-SIZING: border-box; TEXT-TRANSFORM: none; MARGIN-TOP: 20px; TEXT-INDENT: 0px; FONT: 500 60px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; WHITE-SPACE: normal; MARGIN-BOTTOM: 10px; LETTER-SPACING: normal; COLOR: rgb(51,51,51); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" id=determining-the-clipping-rectangles>Determining the Clipping Rectangles</H2>
<P style="BOX-SIZING: border-box; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0px 0px 10px; FONT: 28px/40px 'Helvetica Neue', Helvetica, Arial, sans-serif; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(51,51,51); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In our case it&#8217;s very easy to automatically compute the clipping rectangles, using a method almost identical to the tiling method from<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="BOX-SIZING: border-box; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(66,139,202); TEXT-DECORATION: none" href="http://twinklebear.github.io/sdl2%20tutorials/2013/08/18/lesson-3-sdl-extension-libraries/#tiling_the_background">Lesson 3</A>, however instead of going row by row, we&#8217;ll go column by column. This way clip one will be green, two is red, three is blue and four is yellow. The idea behind the math is the same as in Lesson 3 but switched to wrap on columns. So our y coordinate is calculated by modding the tile index with the number of tiles (2), while the x coordinate is taken by dividing the index by the number of tiles. These x and y coordinates are the x and y indices, so we then scale them to the actual pixel coordinates by multiplying by the clip width and height, which is uniform (100x100). Finally we pick a clip to start drawing, in this case the first one.</P>
<P style="BOX-SIZING: border-box; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0px 0px 10px; FONT: 28px/40px 'Helvetica Neue', Helvetica, Arial, sans-serif; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(51,51,51); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">We also would like to draw our clips in the center of the screen, so we compute those x and y coordinates using the clip&#8217;s width and height instead of the texture&#8217;s.</P>
<DIV style="BOX-SIZING: border-box; BORDER-BOTTOM: 1px solid; BORDER-LEFT: 1px solid; PADDING-BOTTOM: 8px; TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(73,72,62); TEXT-INDENT: 0px; MARGIN: 0px 2px 2px 0px; PADDING-LEFT: 8px; PADDING-RIGHT: 8px; DISPLAY: block; FONT: 24px/42px Monaco, 'Andale Mono', 'Courier New', monospace; WORD-WRAP: break-word; WHITE-SPACE: pre-wrap; LETTER-SPACING: normal; COLOR: rgb(248,248,242); BORDER-TOP: 1px solid; BORDER-RIGHT: 1px solid; WORD-SPACING: 0px; PADDING-TOP: 8px; -webkit-text-stroke-width: 0px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px" class=highlight><PRE style="BOX-SIZING: border-box; BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; PADDING-BOTTOM: 9px; LINE-HEIGHT: 1.4285; BACKGROUND-COLOR: transparent; MARGIN: 0px; PADDING-LEFT: 9px; PADDING-RIGHT: 9px; DISPLAY: block; FONT-FAMILY: Menlo, Monaco, Consolas, 'Courier New', monospace; WORD-WRAP: break-word; WHITE-SPACE: pre-wrap; COLOR: white; FONT-SIZE: 1em; WORD-BREAK: break-all; BORDER-TOP: medium none; BORDER-RIGHT: medium none; PADDING-TOP: 9px; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px"><CODE style="BOX-SIZING: border-box; BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; PADDING-BOTTOM: 9px; LINE-HEIGHT: 1.4285; BACKGROUND-COLOR: transparent; MARGIN: 0px; PADDING-LEFT: 9px; PADDING-RIGHT: 9px; DISPLAY: block; FONT-FAMILY: Menlo, Monaco, Consolas, 'Courier New', monospace; WORD-WRAP: break-word; WHITE-SPACE: pre-wrap; COLOR: white; FONT-SIZE: 1em; WORD-BREAK: break-all; BORDER-TOP: medium none; BORDER-RIGHT: medium none; PADDING-TOP: 9px; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px" class=language-c-- data-lang="c++"><SPAN style="BOX-SIZING: border-box; COLOR: rgb(166,166,166)" class=c1>//iW and iH are the clip width and height</SPAN>
<SPAN style="BOX-SIZING: border-box; COLOR: rgb(166,166,166)" class=c1>//We'll be drawing only clips so get a center position for the w/h of a clip</SPAN>
<SPAN style="BOX-SIZING: border-box; COLOR: rgb(102,217,239)" class=kt>int</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>iW</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>=</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(174,129,255)" class=mi>100</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>,</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>iH</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>=</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(174,129,255)" class=mi>100</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>;</SPAN>
<SPAN style="BOX-SIZING: border-box; COLOR: rgb(102,217,239)" class=kt>int</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>x</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>=</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>SCREEN_WIDTH</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>/</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(174,129,255)" class=mi>2</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>-</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>iW</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>/</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(174,129,255)" class=mi>2</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>;</SPAN>
<SPAN style="BOX-SIZING: border-box; COLOR: rgb(102,217,239)" class=kt>int</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>y</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>=</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>SCREEN_HEIGHT</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>/</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(174,129,255)" class=mi>2</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>-</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>iH</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>/</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(174,129,255)" class=mi>2</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>;</SPAN>

<SPAN style="BOX-SIZING: border-box; COLOR: rgb(166,166,166)" class=c1>//Setup the clips for our image</SPAN>
<SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>SDL_Rect</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>clips</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>[</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(174,129,255)" class=mi>4</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>];</SPAN>
<SPAN style="BOX-SIZING: border-box; COLOR: rgb(102,217,239)" class=k>for</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>(</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(102,217,239)" class=kt>int</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>i</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>=</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(174,129,255)" class=mi>0</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>;</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>i</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>&lt;</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(174,129,255)" class=mi>4</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>;</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>++</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>i</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>){</SPAN>
	<SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>clips</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>[</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>i</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>].</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>x</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>=</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>i</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>/</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(174,129,255)" class=mi>2</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>*</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>iW</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>;</SPAN>
	<SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>clips</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>[</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>i</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>].</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>y</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>=</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>i</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>%</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(174,129,255)" class=mi>2</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>*</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>iH</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>;</SPAN>
	<SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>clips</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>[</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>i</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>].</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>w</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>=</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>iW</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>;</SPAN>
	<SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>clips</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>[</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>i</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>].</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>h</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>=</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>iH</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>;</SPAN>
<SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>}</SPAN>
<SPAN style="BOX-SIZING: border-box; COLOR: rgb(166,166,166)" class=c1>//Specify a default clip to start with</SPAN>
<SPAN style="BOX-SIZING: border-box; COLOR: rgb(102,217,239)" class=kt>int</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>useClip</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>=</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(174,129,255)" class=mi>0</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>;</SPAN></CODE></PRE></DIV>
<P style="BOX-SIZING: border-box; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0px 0px 10px; FONT: 28px/40px 'Helvetica Neue', Helvetica, Arial, sans-serif; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(51,51,51); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><BR style="BOX-SIZING: border-box"></P>
<P style="BOX-SIZING: border-box; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0px 0px 10px; FONT: 28px/40px 'Helvetica Neue', Helvetica, Arial, sans-serif; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(51,51,51); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">If instead we were using some more complicated sprite sheet with rotated and different sized sprites packed together we would need to store their location and rotation information in some kind of metadata file so that we could find the clips easily.</P>
<H2 style="BOX-SIZING: border-box; TEXT-TRANSFORM: none; MARGIN-TOP: 20px; TEXT-INDENT: 0px; FONT: 500 60px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; WHITE-SPACE: normal; MARGIN-BOTTOM: 10px; LETTER-SPACING: normal; COLOR: rgb(51,51,51); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" id=changing-clips-based-on-input>Changing Clips Based on Input</H2>
<P style="BOX-SIZING: border-box; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0px 0px 10px; FONT: 28px/40px 'Helvetica Neue', Helvetica, Arial, sans-serif; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(51,51,51); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">In order to examine all the clips we&#8217;ve created we&#8217;ll add some key input handling to our event loop and will make the keys 1-4 select which clip we want to display. To determine if a key press happened we can check if our event is of the type<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BOX-SIZING: border-box; BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; PADDING-BOTTOM: 0px; BACKGROUND-COLOR: transparent; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; FONT-FAMILY: Menlo, Monaco, Consolas, 'Courier New', monospace; WHITE-SPACE: nowrap; COLOR: rgb(51,51,51); FONT-SIZE: 26px; BORDER-TOP: medium none; BORDER-RIGHT: medium none; PADDING-TOP: 0px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px">SDL_KEYDOWN</CODE>and if it is we can check if the key pressed was one of the keys we&#8217;re interested in by checking the keycode information in the event,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="BOX-SIZING: border-box; BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; PADDING-BOTTOM: 0px; BACKGROUND-COLOR: transparent; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; FONT-FAMILY: Menlo, Monaco, Consolas, 'Courier New', monospace; WHITE-SPACE: nowrap; COLOR: rgb(51,51,51); FONT-SIZE: 26px; BORDER-TOP: medium none; BORDER-RIGHT: medium none; PADDING-TOP: 0px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px">e.key.keysym.sym</CODE>. A full list of<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="BOX-SIZING: border-box; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(66,139,202); TEXT-DECORATION: none" href="http://wiki.libsdl.org/SDL_EventType">event types</A>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="BOX-SIZING: border-box; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(66,139,202); TEXT-DECORATION: none" href="http://wiki.libsdl.org/SDL_Keycode">key codes</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>and other<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="BOX-SIZING: border-box; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(66,139,202); TEXT-DECORATION: none" href="http://wiki.libsdl.org/SDL_Event"><CODE style="BOX-SIZING: border-box; BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; PADDING-BOTTOM: 0px; BACKGROUND-COLOR: transparent; PADDING-LEFT: 0px; PADDING-RIGHT: 0px; FONT-FAMILY: Menlo, Monaco, Consolas, 'Courier New', monospace; WHITE-SPACE: nowrap; COLOR: rgb(42,100,150); FONT-SIZE: 26px; BORDER-TOP: medium none; BORDER-RIGHT: medium none; PADDING-TOP: 0px; border-top-left-radius: 4px; border-top-right-radius: 4px; border-bottom-right-radius: 4px; border-bottom-left-radius: 4px">SDL_Event</CODE></A><SPAN class=Apple-converted-space>&nbsp;</SPAN>information is available in the wiki.</P>
<P style="BOX-SIZING: border-box; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0px 0px 10px; FONT: 28px/40px 'Helvetica Neue', Helvetica, Arial, sans-serif; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(51,51,51); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When we receive the key input we&#8217;re interested in we&#8217;ll need to update the value of useClip to match the clip we want to draw. With these additions our event loop will become:</P>
<DIV style="BOX-SIZING: border-box; BORDER-BOTTOM: 1px solid; BORDER-LEFT: 1px solid; PADDING-BOTTOM: 8px; TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(73,72,62); TEXT-INDENT: 0px; MARGIN: 0px 2px 2px 0px; PADDING-LEFT: 8px; PADDING-RIGHT: 8px; DISPLAY: block; FONT: 24px/42px Monaco, 'Andale Mono', 'Courier New', monospace; WORD-WRAP: break-word; WHITE-SPACE: pre-wrap; LETTER-SPACING: normal; COLOR: rgb(248,248,242); BORDER-TOP: 1px solid; BORDER-RIGHT: 1px solid; WORD-SPACING: 0px; PADDING-TOP: 8px; -webkit-text-stroke-width: 0px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px" class=highlight><PRE style="BOX-SIZING: border-box; BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; PADDING-BOTTOM: 9px; LINE-HEIGHT: 1.4285; BACKGROUND-COLOR: transparent; MARGIN: 0px; PADDING-LEFT: 9px; PADDING-RIGHT: 9px; DISPLAY: block; FONT-FAMILY: Menlo, Monaco, Consolas, 'Courier New', monospace; WORD-WRAP: break-word; WHITE-SPACE: pre-wrap; COLOR: white; FONT-SIZE: 1em; WORD-BREAK: break-all; BORDER-TOP: medium none; BORDER-RIGHT: medium none; PADDING-TOP: 9px; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px"><CODE style="BOX-SIZING: border-box; BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; PADDING-BOTTOM: 9px; LINE-HEIGHT: 1.4285; BACKGROUND-COLOR: transparent; MARGIN: 0px; PADDING-LEFT: 9px; PADDING-RIGHT: 9px; DISPLAY: block; FONT-FAMILY: Menlo, Monaco, Consolas, 'Courier New', monospace; WORD-WRAP: break-word; WHITE-SPACE: pre-wrap; COLOR: white; FONT-SIZE: 1em; WORD-BREAK: break-all; BORDER-TOP: medium none; BORDER-RIGHT: medium none; PADDING-TOP: 9px; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px" class=language-c-- data-lang="c++"><SPAN style="BOX-SIZING: border-box; COLOR: rgb(102,217,239)" class=k>while</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>(</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>SDL_PollEvent</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>(</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>&amp;</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>e</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>)){</SPAN>
	<SPAN style="BOX-SIZING: border-box; COLOR: rgb(102,217,239)" class=k>if</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>(</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>e</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>.</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>type</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>==</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>SDL_QUIT</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>)</SPAN>
		<SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>quit</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>=</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=nb>true</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>;</SPAN>
	<SPAN style="BOX-SIZING: border-box; COLOR: rgb(166,166,166)" class=c1>//Use number input to select which clip should be drawn</SPAN>
	<SPAN style="BOX-SIZING: border-box; COLOR: rgb(102,217,239)" class=k>if</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>(</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>e</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>.</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>type</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>==</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>SDL_KEYDOWN</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>){</SPAN>
		<SPAN style="BOX-SIZING: border-box; COLOR: rgb(102,217,239)" class=k>switch</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>(</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>e</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>.</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>key</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>.</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>keysym</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>.</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>sym</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>){</SPAN>
			<SPAN style="BOX-SIZING: border-box; COLOR: rgb(102,217,239)" class=k>case</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=nl>SDLK_1</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>:</SPAN>
				<SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>useClip</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>=</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(174,129,255)" class=mi>0</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>;</SPAN>
				<SPAN style="BOX-SIZING: border-box; COLOR: rgb(102,217,239)" class=k>break</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>;</SPAN>
			<SPAN style="BOX-SIZING: border-box; COLOR: rgb(102,217,239)" class=k>case</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=nl>SDLK_2</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>:</SPAN>
				<SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>useClip</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>=</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(174,129,255)" class=mi>1</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>;</SPAN>
				<SPAN style="BOX-SIZING: border-box; COLOR: rgb(102,217,239)" class=k>break</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>;</SPAN>
			<SPAN style="BOX-SIZING: border-box; COLOR: rgb(102,217,239)" class=k>case</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=nl>SDLK_3</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>:</SPAN>
				<SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>useClip</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>=</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(174,129,255)" class=mi>2</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>;</SPAN>
				<SPAN style="BOX-SIZING: border-box; COLOR: rgb(102,217,239)" class=k>break</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>;</SPAN>
			<SPAN style="BOX-SIZING: border-box; COLOR: rgb(102,217,239)" class=k>case</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=nl>SDLK_4</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>:</SPAN>
				<SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>useClip</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>=</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(174,129,255)" class=mi>3</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>;</SPAN>
				<SPAN style="BOX-SIZING: border-box; COLOR: rgb(102,217,239)" class=k>break</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>;</SPAN>
			<SPAN style="BOX-SIZING: border-box; COLOR: rgb(102,217,239)" class=k>case</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=nl>SDLK_ESCAPE</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>:</SPAN>
				<SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>quit</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>=</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=nb>true</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>;</SPAN>
				<SPAN style="BOX-SIZING: border-box; COLOR: rgb(102,217,239)" class=k>break</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>;</SPAN>
			<SPAN style="BOX-SIZING: border-box; COLOR: rgb(102,217,239)" class=k>default</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>:</SPAN>
				<SPAN style="BOX-SIZING: border-box; COLOR: rgb(102,217,239)" class=k>break</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>;</SPAN>
		<SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>}</SPAN>
	<SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>}</SPAN>
<SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>}</SPAN></CODE></PRE></DIV>
<P style="BOX-SIZING: border-box; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0px 0px 10px; FONT: 28px/40px 'Helvetica Neue', Helvetica, Arial, sans-serif; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(51,51,51); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><BR style="BOX-SIZING: border-box"></P>
<H2 style="BOX-SIZING: border-box; TEXT-TRANSFORM: none; MARGIN-TOP: 20px; TEXT-INDENT: 0px; FONT: 500 60px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; WHITE-SPACE: normal; MARGIN-BOTTOM: 10px; LETTER-SPACING: normal; COLOR: rgb(51,51,51); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" id=drawing-our-clipped-image>Drawing our Clipped Image</H2>
<P style="BOX-SIZING: border-box; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0px 0px 10px; FONT: 28px/40px 'Helvetica Neue', Helvetica, Arial, sans-serif; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(51,51,51); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">The final thing to do is get the clip we want on the screen! We&#8217;ll do this by calling our more convenient version of renderTexture to draw the clip without any extra scaling and passing in the clip we want to use (the one at useClip).</P>
<DIV style="BOX-SIZING: border-box; BORDER-BOTTOM: 1px solid; BORDER-LEFT: 1px solid; PADDING-BOTTOM: 8px; TEXT-TRANSFORM: none; BACKGROUND-COLOR: rgb(73,72,62); TEXT-INDENT: 0px; MARGIN: 0px 2px 2px 0px; PADDING-LEFT: 8px; PADDING-RIGHT: 8px; DISPLAY: block; FONT: 24px/42px Monaco, 'Andale Mono', 'Courier New', monospace; WORD-WRAP: break-word; WHITE-SPACE: pre-wrap; LETTER-SPACING: normal; COLOR: rgb(248,248,242); BORDER-TOP: 1px solid; BORDER-RIGHT: 1px solid; WORD-SPACING: 0px; PADDING-TOP: 8px; -webkit-text-stroke-width: 0px; border-top-left-radius: 3px; border-top-right-radius: 3px; border-bottom-right-radius: 3px; border-bottom-left-radius: 3px" class=highlight><PRE style="BOX-SIZING: border-box; BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; PADDING-BOTTOM: 9px; LINE-HEIGHT: 1.4285; BACKGROUND-COLOR: transparent; MARGIN: 0px; PADDING-LEFT: 9px; PADDING-RIGHT: 9px; DISPLAY: block; FONT-FAMILY: Menlo, Monaco, Consolas, 'Courier New', monospace; WORD-WRAP: break-word; WHITE-SPACE: pre-wrap; COLOR: white; FONT-SIZE: 1em; WORD-BREAK: break-all; BORDER-TOP: medium none; BORDER-RIGHT: medium none; PADDING-TOP: 9px; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px"><CODE style="BOX-SIZING: border-box; BORDER-BOTTOM: medium none; BORDER-LEFT: medium none; PADDING-BOTTOM: 9px; LINE-HEIGHT: 1.4285; BACKGROUND-COLOR: transparent; MARGIN: 0px; PADDING-LEFT: 9px; PADDING-RIGHT: 9px; DISPLAY: block; FONT-FAMILY: Menlo, Monaco, Consolas, 'Courier New', monospace; WORD-WRAP: break-word; WHITE-SPACE: pre-wrap; COLOR: white; FONT-SIZE: 1em; WORD-BREAK: break-all; BORDER-TOP: medium none; BORDER-RIGHT: medium none; PADDING-TOP: 9px; border-top-left-radius: 0px; border-top-right-radius: 0px; border-bottom-right-radius: 0px; border-bottom-left-radius: 0px" class=language-c-- data-lang="c++"><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>SDL_RenderClear</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>(</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>renderer</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>);</SPAN>
<SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>renderTexture</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>(</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>image</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>,</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>renderer</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>,</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>x</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>,</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>y</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>,</SPAN> <SPAN style="BOX-SIZING: border-box; COLOR: rgb(249,38,114)" class=o>&amp;</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>clips</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>[</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>useClip</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>]);</SPAN>
<SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>SDL_RenderPresent</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>(</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=n>renderer</SPAN><SPAN style="BOX-SIZING: border-box; COLOR: rgb(248,248,242)" class=p>);</SPAN></CODE></PRE></DIV>
<P style="BOX-SIZING: border-box; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0px 0px 10px; FONT: 28px/40px 'Helvetica Neue', Helvetica, Arial, sans-serif; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(51,51,51); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px"><BR style="BOX-SIZING: border-box"></P>
<H2 style="BOX-SIZING: border-box; TEXT-TRANSFORM: none; MARGIN-TOP: 20px; TEXT-INDENT: 0px; FONT: 500 60px/1.1 'Helvetica Neue', Helvetica, Arial, sans-serif; WHITE-SPACE: normal; MARGIN-BOTTOM: 10px; LETTER-SPACING: normal; COLOR: rgb(51,51,51); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px" id=end-of-lesson-5>End of Lesson 5</H2>
<P style="BOX-SIZING: border-box; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0px 0px 10px; FONT: 28px/40px 'Helvetica Neue', Helvetica, Arial, sans-serif; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(51,51,51); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">When you run the program you should see clip 0 (green circle) draw in the center of the screen and should be able to select different clips to be drawn with the number keys. If you run into any issues double check your code and/or post a question below.</P>
<P style="BOX-SIZING: border-box; TEXT-TRANSFORM: none; TEXT-INDENT: 0px; MARGIN: 0px 0px 10px; FONT: 28px/40px 'Helvetica Neue', Helvetica, Arial, sans-serif; WHITE-SPACE: normal; LETTER-SPACING: normal; COLOR: rgb(51,51,51); WORD-SPACING: 0px; -webkit-text-stroke-width: 0px">I&#8217;ll see you again soon in<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="BOX-SIZING: border-box; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(66,139,202); TEXT-DECORATION: none" href="http://www.willusher.io/sdl2%20tutorials/2013/12/18/lesson-6-true-type-fonts-with-sdl_ttf">Lesson 6: True Type Fonts with SDL_ttf!</A>