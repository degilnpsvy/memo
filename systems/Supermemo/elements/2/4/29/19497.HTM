<H5 style="BORDER-BOTTOM-STYLE: none; PADDING-BOTTOM: 0px; LINE-HEIGHT: 1.6; MARGIN: 0.3em 0px 0px; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: black; FONT-SIZE: 14px; OVERFLOW: hidden; FONT-WEIGHT: bold; PADDING-TOP: 0.5em"><SPAN id=Assigning_Texture_Coordinates_.28UV_or_STRQ.29 class=mw-headline>Assigning Texture Coordinates (UV or STRQ)</SPAN><SPAN style="LINE-HEIGHT: 1em; DISPLAY: inline-block; FONT-FAMILY: sans-serif; WHITE-SPACE: nowrap; MARGIN-LEFT: 1em; FONT-SIZE: small; VERTICAL-ALIGN: baseline; FONT-WEIGHT: normal; -webkit-user-select: none" class=mw-editsection><SPAN style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0px; MARGIN-RIGHT: 0px" class=mw-editsection-bracket>[</SPAN><A style="BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(11,0,128); TEXT-DECORATION: none" title="Edit section: Assigning Texture Coordinates (UV or STRQ)" href="http://en.wikipedia.org/w/index.php?title=Texture_mapping&amp;action=edit&amp;section=19">edit</A><SPAN style="COLOR: rgb(85,85,85); MARGIN-LEFT: 0px; MARGIN-RIGHT: 0px" class=mw-editsection-bracket>]</SPAN></SPAN></H5>
<P style="MARGIN: 0.5em 0px">As you draw your texture-mapped scene, you must provide both object coordinates and texture coordinates for each vertex. After transformation, the object coordinates determine where on the screen that particular vertex is rendered. The texture coordinates determine which texel in the texture map is assigned to that vertex. In exactly the same way that colors are interpolated between two vertices of shaded polygons and lines, texture coordinates are also interpolated between vertices. (Remember that textures are rectangular arrays of data.) <FONT class=extract>Texture coordinates can comprise one, two, three, or four coordinates. They're usually referred to as the s, t, r, and q coordinates to distinguish them from object coordinates (x, y, z, and w) and from evaluator coordinates (u and v; see Chapter 12). For one-dimensional textures, you use the s coordinate; for two-dimensional textures, you use s and t. In Release 1.1, the r coordinate is ignored. (Some implementations have 3D texture mapping as an extension, and that extension uses the r coordinate.) The q coordinate, like w, is typically given the value 1 and can be used to create homogeneous coordinates; it's described as an advanced feature in "The q Coordinate."<BR style="CLEAR: both"></FONT><A style="PADDING-RIGHT: 13px; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(102,51,102); TEXT-DECORATION: none" class="external free" href="http://www.glprogramming.com/red/chapter09.html#name6" rel=nofollow>http://www.glprogramming.com/red/chapter09.html#name6</A><BR style="CLEAR: both">A Bezier curve is a vector-valued function of one variable C(u) = [X(u) Y(u) Z(u)] where u varies in some domain (say [0,1]). A Bezier surface patch is a vector-valued function of two variables S(u,v) = [X(u,v) Y(u,v) Z(u,v)] where u and v can both vary in some domain. The range isn't necessarily three-dimensional as shown here. You might want two-dimensional output for curves on a plane or texture coordinates, or you might want four-dimensional output to specify RGBA information. Even one-dimensional output may make sense for gray levels.<BR style="CLEAR: both"><A style="PADDING-RIGHT: 13px; BACKGROUND: none transparent scroll repeat 0% 0%; COLOR: rgb(102,51,102); TEXT-DECORATION: none" class="external free" href="http://www.glprogramming.com/red/chapter12.html#name2" rel=nofollow>http://www.glprogramming.com/red/chapter12.html#name2</A>