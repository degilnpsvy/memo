/**<BR>&nbsp;* class_create - create a struct class structure<BR>&nbsp;* @owner: pointer to the module that is to "own" this struct class<BR>&nbsp;* @name: pointer to a string for the name of this class.<BR>&nbsp;* @key: the lock_class_key for this class; used by mutex lock debugging<BR>&nbsp;*<BR>&nbsp;* This is used to create a struct class pointer that can then be used<BR>&nbsp;* in calls to device_create().<BR>&nbsp;*<BR>&nbsp;* Returns &amp;struct class pointer on success, or ERR_PTR() on error.<BR>&nbsp;*<BR>&nbsp;* Note, the pointer created here is to be destroyed when finished by<BR>&nbsp;* making a call to class_destroy().<BR>&nbsp;*/<BR>struct class *__class_create(struct module *owner, const char *name,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct lock_class_key *key)<BR>{<BR>&nbsp;struct class *cls;<BR>&nbsp;int retval; 
<P></P>
<P>&nbsp;cls = kzalloc(sizeof(*cls), GFP_KERNEL);<BR>&nbsp;if (!cls) {<BR>&nbsp;&nbsp;retval = -ENOMEM;<BR>&nbsp;&nbsp;goto error;<BR>&nbsp;}</P>
<P>&nbsp;cls-&gt;name = name;<BR>&nbsp;cls-&gt;owner = owner;<BR>&nbsp;cls-&gt;class_release = class_create_release;</P>
<P>&nbsp;retval = __class_register(cls, key);<BR>&nbsp;if (retval)<BR>&nbsp;&nbsp;goto error;</P>
<P>&nbsp;return cls;</P>
<P>error:<BR>&nbsp;kfree(cls);<BR>&nbsp;return ERR_PTR(retval);<BR>}<BR>EXPORT_SYMBOL_GPL(__class_create);