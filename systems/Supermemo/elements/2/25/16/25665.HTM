<H1 style="FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Emacs Lisp: Parsing Date Time</H1><SECTION class=buy-book style="BORDER-TOP: silver thin solid; BORDER-RIGHT: silver thin solid; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: silver thin solid; TEXT-TRANSFORM: none; FLOAT: right; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium sans-serif; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: silver thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(210,254,185); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; border-radius: 1rem">Buy<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html">Xah Emacs Tutorial</A>. Master emacs benefits for life.
</SECTION>
<DIV class=byline style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">
<ADDRESS class=author style="FONT-STYLE: normal; DISPLAY: inline"><A style="TEXT-DECORATION: none" href="mailto:xahlee@gmail.com" rel=author>Xah Lee</A></ADDRESS>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><TIME style="FONT-FAMILY: monospace; WHITE-SPACE: nowrap">2011-09-02</TIME>, &#8230;,<SPAN class=Apple-converted-space>&nbsp;</SPAN><TIME style="FONT-FAMILY: monospace; WHITE-SPACE: nowrap">2015-04-14</TIME></DIV>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">This page shows you how to parse a date time string.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">If you are only interested in printing current date time in various formats, see:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_datetime.html">Emacs Lisp Date Time Formats</A>.</P>
<H2 style="BORDER-TOP: gray thin solid; FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Problem</H2>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Write a elisp function. The function will take a string argument that's any of common date time format, example</P>
<UL style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">
<LI style="FONT-FAMILY: sans-serif"><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">2011-09-02T05:29:26-07:00</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(<A style="TEXT-DECORATION: none; COLOR: rgb(0,85,0); box-shadow: 0px 1px" href="http://en.wikipedia.org/wiki/ISO_8601">ISO 8601</A>)</LI>
<LI style="FONT-FAMILY: sans-serif"><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">2011-09-02</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(ISO 8601)</LI>
<LI style="FONT-FAMILY: sans-serif"><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">Fri, 2 Sep 2011 11:14:11 +0200</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(unixy)</LI>
<LI style="FONT-FAMILY: sans-serif"><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">09/02/2011</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>(USA)</LI>
<LI style="FONT-FAMILY: sans-serif"><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">Sep 2, 2011</CODE></LI>
<LI style="FONT-FAMILY: sans-serif"><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">2 Sep, 2011</CODE></LI>
<LI style="FONT-FAMILY: sans-serif"><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">2 September, 2011</CODE></LI></UL>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">and output a canonical form<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">2011-09-02T11:14:11+0200</CODE>.</P>
<H2 style="BORDER-TOP: gray thin solid; FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Solution</H2>
<H3 style="FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Using parse-time-string</H3>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">You can use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">parse-time-string</CODE>, from the file<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=path-&#945; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(8,74,78)">parse-time.el</CODE>, with feature name<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">'parse-time</CODE>. &#12308;&#10148;&nbsp;<A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_library_system.html">Emacs Lisp's Library System: What's require, load, load-file, autoload, feature?</A>&#12309;</P>
<BLOCKQUOTE style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium sans-serif; BORDER-LEFT: rgb(0,0,128) 2px solid; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><PRE class=code style="BORDER-TOP: gray thin solid; FONT-FAMILY: 'DejaVu Sans Mono', monospace; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(243,243,243); MARGIN-RIGHT: 0px">parse-time-string is a compiled Lisp function in `parse-time.el'.

(parse-time-string STRING)

Parse the time-string STRING into (SEC MIN HOUR DAY MON YEAR DOW DST TZ).
The values are identical to those of `decode-time', but any values that are
unknown are returned as nil.</PRE></BLOCKQUOTE>
<H3 style="FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Supported Formats of parse-time-string</H3><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">testing for supported formats for &#8220;parse-time-string&#8221;
</SPAN><SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">As of 2011-08-15 GNU Emacs 23.2.1
</SPAN>
(<SPAN class=keyword style="COLOR: rgb(160,32,240)">require</SPAN> 'parse-time)

<SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">unixy formats
</SPAN>(<SPAN class=function-name style="COLOR: rgb(0,0,255)">parse-time-string</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"Date: Mon, 01 Aug 2011 12:24:51 -0400"</SPAN>) <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">yes
</SPAN>(<SPAN class=function-name style="COLOR: rgb(0,0,255)">parse-time-string</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"Local: Mon, Aug 1 2011 9:24 am"</SPAN>)        <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">yes
</SPAN>
<SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">with English month names
</SPAN>(<SPAN class=function-name style="COLOR: rgb(0,0,255)">parse-time-string</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"2007, August 1"</SPAN>)    <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">yes
</SPAN>(<SPAN class=function-name style="COLOR: rgb(0,0,255)">parse-time-string</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"August 1, 2007"</SPAN>)    <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">yes
</SPAN>(<SPAN class=function-name style="COLOR: rgb(0,0,255)">parse-time-string</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"august 1, 2007"</SPAN>)    <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">yes. Lowercase ok.
</SPAN>(<SPAN class=function-name style="COLOR: rgb(0,0,255)">parse-time-string</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"August 1st, 2007"</SPAN>)  <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">no. The date is nil.
</SPAN>(<SPAN class=function-name style="COLOR: rgb(0,0,255)">parse-time-string</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"aug 1, 2007"</SPAN>)       <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">yes. Month abbr OK.
</SPAN>(<SPAN class=function-name style="COLOR: rgb(0,0,255)">parse-time-string</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"1 aug, 2007"</SPAN>)       <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">yes
</SPAN>
<SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">USA convention like
</SPAN>(<SPAN class=function-name style="COLOR: rgb(0,0,255)">parse-time-string</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"8/1/2007"</SPAN>)     <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">no. Takes the 8 as date, 1 as nil
</SPAN>(<SPAN class=function-name style="COLOR: rgb(0,0,255)">parse-time-string</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"08/01/2007"</SPAN>)   <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">no. Takes the 8 as date, 1 as nil
</SPAN>(<SPAN class=function-name style="COLOR: rgb(0,0,255)">parse-time-string</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"8,1,2007"</SPAN>)     <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">no
</SPAN>
<SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">ISO 8601 formats
</SPAN>(<SPAN class=function-name style="COLOR: rgb(0,0,255)">parse-time-string</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"2007-08-01"</SPAN>)   <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">yes
</SPAN>(<SPAN class=function-name style="COLOR: rgb(0,0,255)">parse-time-string</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"2007"</SPAN>)         <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">yes
</SPAN>(<SPAN class=function-name style="COLOR: rgb(0,0,255)">parse-time-string</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"2007-08"</SPAN>)      <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">no
</SPAN>(<SPAN class=function-name style="COLOR: rgb(0,0,255)">parse-time-string</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"2011-08-01T11:55:37-07:00"</SPAN>) <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">no. got nothing</SPAN></PRE>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">&#8220;parse-time-string&#8221; does not understand the following formats:</P>
<UL style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">
<LI style="FONT-FAMILY: sans-serif">ISO 8601 format<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">yyyy-mm</CODE></LI>
<LI style="FONT-FAMILY: sans-serif">ISO 8601 format<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">yyyy-mm-dd</CODE></LI>
<LI style="FONT-FAMILY: sans-serif">ISO 8601 format<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">yyyy-mm-ddThh:mm:ss-07:00</CODE></LI>
<LI style="FONT-FAMILY: sans-serif">USA convention<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">mm/dd/yyyy</CODE></LI>
<LI style="FONT-FAMILY: sans-serif">USA convention<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">August 1st, 2007</CODE></LI></UL>
<H2 style="BORDER-TOP: gray thin solid; FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Datetime Parser Function</H2>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">The simplest solution is just do a regex match on the form. I don't need the time info, so it makes the problem slightly simpler. Here's my code:</P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">(<SPAN class=keyword style="COLOR: rgb(160,32,240)">defun</SPAN> xah-fix-datetime-stamp (<SPAN class=xem-function-param>&#966;input-string</SPAN> <SPAN class=builtin style="COLOR: rgb(122,55,139)">&amp;optional</SPAN> <SPAN class=xem-function-param>&#966;from-to</SPAN>)
  <SPAN class=string style="COLOR: rgb(139,34,82)">"Change timestamp under cursor into a yyyy-mm-dd format.
If there's a text selection, use that as input, else use current line.

Any &#8220;day of week&#8221;, or &#8220;time&#8221; info, or any other parts of the string, are discarded.
For example:
 &#12300;TUESDAY, FEB 15, 2011 05:16 ET&#12301; &#8658; &#12300;2011-02-15&#12301;
 &#12300;November 28, 1994&#12301;              &#8658; &#12300;1994-11-28&#12301;
 &#12300;Nov. 28, 1994&#12301;                  &#8658; &#12300;1994-11-28&#12301;
 &#12300;11/28/1994&#12301;                     &#8658; &#12300;1994-11-28&#12301;
 &#12300;1994/11/28&#12301;                     &#8658; &#12300;1994-11-28&#12301;

When called in lisp program, the optional second argument &#8220;&#966;from-to&#8221; is a vector [from to] of region boundary. (it can also be a list)
If &#8220;&#966;from-to&#8221; is non-nil, the region is taken as input (and &#8220;&#966;input-string&#8221; is ignored).

URL `http://ergoemacs.org/emacs/elisp_parse_time.html'
Version 2015-04-14"</SPAN>

(<SPAN class=function-name style="COLOR: rgb(0,0,255)">interactive</SPAN>
   (<SPAN class=keyword style="COLOR: rgb(160,32,240)">list</SPAN> <SPAN class=keyword style="COLOR: rgb(160,32,240)">nil</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">vector</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">line-beginning-position</SPAN>) (<SPAN class=function-name style="COLOR: rgb(0,0,255)">line-end-position</SPAN>))))

  (<SPAN class=keyword style="COLOR: rgb(160,32,240)">let</SPAN> (
        (<SPAN class=xem-user-variable>&#958;str</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">if</SPAN> <SPAN class=xem-function-param>&#966;from-to</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">buffer-substring-no-properties</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">elt</SPAN> <SPAN class=xem-function-param>&#966;from-to</SPAN> 0) (<SPAN class=keyword style="COLOR: rgb(160,32,240)">elt</SPAN> <SPAN class=xem-function-param>&#966;from-to</SPAN> 1)) <SPAN class=xem-function-param>&#966;input-string</SPAN>))
        (<SPAN class=xem-user-variable>&#958;work-on-region-p</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">if</SPAN> <SPAN class=xem-function-param>&#966;from-to</SPAN> <SPAN class=keyword style="COLOR: rgb(160,32,240)">t</SPAN> <SPAN class=keyword style="COLOR: rgb(160,32,240)">nil</SPAN>)))
    (<SPAN class=keyword style="COLOR: rgb(160,32,240)">require</SPAN> 'parse-time)

    (<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">replace-regexp-in-string</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"^ *\\(.+\\) *$"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"\\1"</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN>)) <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">remove white spaces
</SPAN>
    (<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN>
          (<SPAN class=keyword style="COLOR: rgb(160,32,240)">cond</SPAN>
           <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">USA convention of mm/dd/yyyy
</SPAN>           ((<SPAN class=keyword style="COLOR: rgb(160,32,240)">string-match</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"\\([0-9][0-9]\\)/\\([0-9][0-9]\\)/\\([0-9][0-9][0-9][0-9]\\)"</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN>)
            (<SPAN class=keyword style="COLOR: rgb(160,32,240)">concat</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">match-string</SPAN> 3 <SPAN class=xem-user-variable>&#958;str</SPAN>) <SPAN class=string style="COLOR: rgb(139,34,82)">"-"</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">match-string</SPAN> 1 <SPAN class=xem-user-variable>&#958;str</SPAN>) <SPAN class=string style="COLOR: rgb(139,34,82)">"-"</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">match-string</SPAN> 2 <SPAN class=xem-user-variable>&#958;str</SPAN>)))
           <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">USA convention of m/dd/yyyy
</SPAN>           ((<SPAN class=keyword style="COLOR: rgb(160,32,240)">string-match</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"\\([0-9]\\)/\\([0-9][0-9]\\)/\\([0-9][0-9][0-9][0-9]\\)"</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN>)
            (<SPAN class=keyword style="COLOR: rgb(160,32,240)">concat</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">match-string</SPAN> 3 <SPAN class=xem-user-variable>&#958;str</SPAN>) <SPAN class=string style="COLOR: rgb(139,34,82)">"-0"</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">match-string</SPAN> 1 <SPAN class=xem-user-variable>&#958;str</SPAN>) <SPAN class=string style="COLOR: rgb(139,34,82)">"-"</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">match-string</SPAN> 2 <SPAN class=xem-user-variable>&#958;str</SPAN>)))

           <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">USA convention of mm/dd/yy
</SPAN>           ((<SPAN class=keyword style="COLOR: rgb(160,32,240)">string-match</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"\\([0-9][0-9]\\)/\\([0-9][0-9]\\)/\\([0-9][0-9]\\)"</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN>)
            (<SPAN class=keyword style="COLOR: rgb(160,32,240)">concat</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">format-time-string</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"%C"</SPAN>) (<SPAN class=function-name style="COLOR: rgb(0,0,255)">match-string</SPAN> 3 <SPAN class=xem-user-variable>&#958;str</SPAN>) <SPAN class=string style="COLOR: rgb(139,34,82)">"-"</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">match-string</SPAN> 1 <SPAN class=xem-user-variable>&#958;str</SPAN>) <SPAN class=string style="COLOR: rgb(139,34,82)">"-"</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">match-string</SPAN> 2 <SPAN class=xem-user-variable>&#958;str</SPAN>)))
           <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">USA convention of m/dd/yy
</SPAN>           ((<SPAN class=keyword style="COLOR: rgb(160,32,240)">string-match</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"\\([0-9]\\)/\\([0-9][0-9]\\)/\\([0-9][0-9]\\)"</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN>)
            (<SPAN class=keyword style="COLOR: rgb(160,32,240)">concat</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">format-time-string</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"%C"</SPAN>) (<SPAN class=function-name style="COLOR: rgb(0,0,255)">match-string</SPAN> 3 <SPAN class=xem-user-variable>&#958;str</SPAN>) <SPAN class=string style="COLOR: rgb(139,34,82)">"-0"</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">match-string</SPAN> 1 <SPAN class=xem-user-variable>&#958;str</SPAN>) <SPAN class=string style="COLOR: rgb(139,34,82)">"-"</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">match-string</SPAN> 2 <SPAN class=xem-user-variable>&#958;str</SPAN>)))

           <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">yyyy/mm/dd
</SPAN>           ((<SPAN class=keyword style="COLOR: rgb(160,32,240)">string-match</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"\\([0-9][0-9][0-9][0-9]\\)/\\([0-9][0-9]\\)/\\([0-9][0-9]\\)"</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN>)
            (<SPAN class=keyword style="COLOR: rgb(160,32,240)">concat</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">match-string</SPAN> 1 <SPAN class=xem-user-variable>&#958;str</SPAN>) <SPAN class=string style="COLOR: rgb(139,34,82)">"-"</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">match-string</SPAN> 2 <SPAN class=xem-user-variable>&#958;str</SPAN>) <SPAN class=string style="COLOR: rgb(139,34,82)">"-"</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">match-string</SPAN> 3 <SPAN class=xem-user-variable>&#958;str</SPAN>)))

           <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">some ISO 8601. yyyy-mm-ddThh:mm
</SPAN>           ((<SPAN class=keyword style="COLOR: rgb(160,32,240)">string-match</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"\\([0-9][0-9][0-9][0-9]\\)-\\([0-9][0-9]\\)-\\([0-9][0-9]\\)T[0-9][0-9]:[0-9][0-9]"</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN>)
            (<SPAN class=keyword style="COLOR: rgb(160,32,240)">concat</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">match-string</SPAN> 1 <SPAN class=xem-user-variable>&#958;str</SPAN>) <SPAN class=string style="COLOR: rgb(139,34,82)">"-"</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">match-string</SPAN> 2 <SPAN class=xem-user-variable>&#958;str</SPAN>) <SPAN class=string style="COLOR: rgb(139,34,82)">"-"</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">match-string</SPAN> 3 <SPAN class=xem-user-variable>&#958;str</SPAN>)))
           <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">some ISO 8601. yyyy-mm-dd
</SPAN>           ((<SPAN class=keyword style="COLOR: rgb(160,32,240)">string-match</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"\\([0-9][0-9][0-9][0-9]\\)-\\([0-9][0-9]\\)-\\([0-9][0-9]\\)"</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN>)
            (<SPAN class=keyword style="COLOR: rgb(160,32,240)">concat</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">match-string</SPAN> 1 <SPAN class=xem-user-variable>&#958;str</SPAN>) <SPAN class=string style="COLOR: rgb(139,34,82)">"-"</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">match-string</SPAN> 2 <SPAN class=xem-user-variable>&#958;str</SPAN>) <SPAN class=string style="COLOR: rgb(139,34,82)">"-"</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">match-string</SPAN> 3 <SPAN class=xem-user-variable>&#958;str</SPAN>)))
           <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">some ISO 8601. yyyy-mm
</SPAN>           ((<SPAN class=keyword style="COLOR: rgb(160,32,240)">string-match</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"\\([0-9][0-9][0-9][0-9]\\)-\\([0-9][0-9]\\)"</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN>)
            (<SPAN class=keyword style="COLOR: rgb(160,32,240)">concat</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">match-string</SPAN> 1 <SPAN class=xem-user-variable>&#958;str</SPAN>) <SPAN class=string style="COLOR: rgb(139,34,82)">"-"</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">match-string</SPAN> 2 <SPAN class=xem-user-variable>&#958;str</SPAN>)))

           <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">else
</SPAN>           (<SPAN class=keyword style="COLOR: rgb(160,32,240)">t</SPAN>
            (<SPAN class=keyword style="COLOR: rgb(160,32,240)">progn</SPAN>
              (<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">replace-regexp-in-string</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"January "</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"Jan. "</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN>))
              (<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">replace-regexp-in-string</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"February "</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"Feb. "</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN>))
              (<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">replace-regexp-in-string</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"March "</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"Mar. "</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN>))
              (<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">replace-regexp-in-string</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"April "</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"Apr. "</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN>))
              (<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">replace-regexp-in-string</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"May "</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"May. "</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN>))
              (<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">replace-regexp-in-string</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"June "</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"Jun. "</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN>))
              (<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">replace-regexp-in-string</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"July "</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"Jul. "</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN>))
              (<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">replace-regexp-in-string</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"August "</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"Aug. "</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN>))
              (<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">replace-regexp-in-string</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"September "</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"Sep. "</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN>))
              (<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">replace-regexp-in-string</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"October "</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"Oct. "</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN>))
              (<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">replace-regexp-in-string</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"November "</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"Nov. "</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN>))
              (<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">replace-regexp-in-string</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"December "</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"Dec. "</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN>))

              (<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">replace-regexp-in-string</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"\\([0-9]+\\)st"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"\\1"</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN>))
              (<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">replace-regexp-in-string</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"\\([0-9]+\\)nd"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"\\1"</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN>))
              (<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">replace-regexp-in-string</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"\\([0-9]+\\)rd"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"\\1"</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN>))
              (<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">replace-regexp-in-string</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"\\([0-9]\\)th"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"\\1"</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN>))

              (<SPAN class=keyword style="COLOR: rgb(160,32,240)">let</SPAN> (dateList <SPAN class=xem-user-variable>&#958;year</SPAN> <SPAN class=xem-user-variable>&#958;month</SPAN> <SPAN class=xem-user-variable>&#958;date</SPAN> <SPAN class=xem-user-variable>&#958;yyyy</SPAN> <SPAN class=xem-user-variable>&#958;mm</SPAN> <SPAN class=xem-user-variable>&#958;dd</SPAN> )
                (<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> dateList (<SPAN class=function-name style="COLOR: rgb(0,0,255)">parse-time-string</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN>))
                (<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> <SPAN class=xem-user-variable>&#958;year</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">nth</SPAN> 5 dateList))
                (<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> <SPAN class=xem-user-variable>&#958;month</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">nth</SPAN> 4 dateList))
                (<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> <SPAN class=xem-user-variable>&#958;date</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">nth</SPAN> 3 dateList))

                (<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> <SPAN class=xem-user-variable>&#958;yyyy</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">number-to-string</SPAN> <SPAN class=xem-user-variable>&#958;year</SPAN>))
                (<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> <SPAN class=xem-user-variable>&#958;mm</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">if</SPAN> <SPAN class=xem-user-variable>&#958;month</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">format</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"%02d"</SPAN> <SPAN class=xem-user-variable>&#958;month</SPAN>) <SPAN class=string style="COLOR: rgb(139,34,82)">""</SPAN> ))
                (<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> <SPAN class=xem-user-variable>&#958;dd</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">if</SPAN> <SPAN class=xem-user-variable>&#958;date</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">format</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"%02d"</SPAN> <SPAN class=xem-user-variable>&#958;date</SPAN>) <SPAN class=string style="COLOR: rgb(139,34,82)">""</SPAN> ))
                (<SPAN class=keyword style="COLOR: rgb(160,32,240)">concat</SPAN> <SPAN class=xem-user-variable>&#958;yyyy</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"-"</SPAN> <SPAN class=xem-user-variable>&#958;mm</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"-"</SPAN> <SPAN class=xem-user-variable>&#958;dd</SPAN>))))))

    (<SPAN class=keyword style="COLOR: rgb(160,32,240)">if</SPAN> <SPAN class=xem-user-variable>&#958;work-on-region-p</SPAN>
        (<SPAN class=keyword style="COLOR: rgb(160,32,240)">progn</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">delete-region</SPAN>  (<SPAN class=keyword style="COLOR: rgb(160,32,240)">elt</SPAN> <SPAN class=xem-function-param>&#966;from-to</SPAN> 0) (<SPAN class=keyword style="COLOR: rgb(160,32,240)">elt</SPAN> <SPAN class=xem-function-param>&#966;from-to</SPAN> 1))
               (<SPAN class=function-name style="COLOR: rgb(0,0,255)">insert</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN>))
      <SPAN class=xem-user-variable>&#958;str</SPAN> )))</PRE>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">This code looks big but is very easy to understand. The function takes a string, and returns a string.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">The whole code is just one giant conditional test.</P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">(<SPAN class=keyword style="COLOR: rgb(160,32,240)">cond</SPAN>
 (TEST2 BODY)
 (TEST2 BODY)
 &#8230;
 )</PRE>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">In the code, the first few tests are regex match of forms like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">nn/nn/nnnn</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>where each &#8220;n&#8221; is a digit. When any of these match, then basically i got what i want, and the code exits. Here's one of my<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(TEST BODY)</CODE>:</P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">USA convention of mm/dd/yyyy
</SPAN> ((<SPAN class=keyword style="COLOR: rgb(160,32,240)">string-match</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"\\([0-9][0-9]\\)/\\([0-9][0-9]\\)/\\([0-9][0-9][0-9][0-9]\\)"</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN>)
  (<SPAN class=keyword style="COLOR: rgb(160,32,240)">concat</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">match-string</SPAN> 3 <SPAN class=xem-user-variable>&#958;str</SPAN>) <SPAN class=string style="COLOR: rgb(139,34,82)">"-"</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">match-string</SPAN> 1 <SPAN class=xem-user-variable>&#958;str</SPAN>) <SPAN class=string style="COLOR: rgb(139,34,82)">"-"</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">match-string</SPAN> 2 <SPAN class=xem-user-variable>&#958;str</SPAN>)))</PRE>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">When none of these match, then it goes to the end of the test<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(t BODY)</CODE>, where the &#8220;t&#8221; there is always true, and run a big chunk of BODY. In the BODY, first i replace each full spelling of month names by their abbrev using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">replace-regexp-in-string</CODE>, example</P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">(<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">replace-regexp-in-string</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"January "</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"Jan. "</SPAN> <SPAN class=xem-user-variable>&#958;str</SPAN>))</PRE>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">This is done because in emacs 22 the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">parse-time-string</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>doesn't understand fully spelled month names. (this has been fixed in 23.2.1 or earlier.)</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Then, i also replace {1st, 2nd, nth} etc by {1, 2, n}, because emacs's<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">parse-time-string</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>doesn't understand those. Then, i simply feed it to<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">parse-time-string</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and get a parsed date time as a list. After that, just extract the elements from the list and reformat the way i want using<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">format</CODE>.</P>
<DIV class=rltd style="BORDER-TOP: silver thin solid; BORDER-RIGHT: silver thin solid; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: silver thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium sans-serif; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: silver thin solid; MARGIN-TOP: 0px; DISPLAY: table; LETTER-SPACING: normal; PADDING-RIGHT: 0px; MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; border-radius: 0.5rem">
<UL style="MARGIN: 0px">
<LI style="FONT-FAMILY: sans-serif"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/wrap-url.html">Emacs Lisp: Writing a Wrap-URL Function</A></LI>
<LI style="FONT-FAMILY: sans-serif"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/emacs_zap_gremlins.html">Emacs Lisp: Convert Unicode Chars to ASCII (Zap Gremlins)</A></LI>
<LI style="FONT-FAMILY: sans-serif"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_image_tag.html">Emacs Lisp: HTML image-link Command</A></LI>
<LI style="FONT-FAMILY: sans-serif"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_html-linkify.html">Emacs Lisp: Change URL into HTML Link</A></LI></UL></DIV>