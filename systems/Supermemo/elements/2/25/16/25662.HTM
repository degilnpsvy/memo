<H1 style="FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Emacs Lisp: Throw &#65286; Catch, Exit a Loop</H1><SECTION class=buy-book style="BORDER-TOP: silver thin solid; BORDER-RIGHT: silver thin solid; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: silver thin solid; TEXT-TRANSFORM: none; FLOAT: right; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium sans-serif; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: silver thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(210,254,185); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; border-radius: 1rem">Buy<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html">Xah Emacs Tutorial</A>. Master emacs benefits for life.
</SECTION>
<DIV class=byline style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">
<ADDRESS class=author style="FONT-STYLE: normal; DISPLAY: inline"><A style="TEXT-DECORATION: none" href="mailto:xahlee@gmail.com" rel=author>Xah Lee</A></ADDRESS>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><TIME style="FONT-FAMILY: monospace; WHITE-SPACE: nowrap">2012-07-11</TIME>, &#8230;,<SPAN class=Apple-converted-space>&nbsp;</SPAN><TIME style="FONT-FAMILY: monospace; WHITE-SPACE: nowrap">2015-03-26</TIME></DIV>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">This page shows you how to exit a loop in emacs lisp.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">In many languages, there's &#8220;break&#8221; or &#8220;exit&#8221; keywords that you can use to exit a loop. In functional programing, usually you don't use loop/iteration, but sometimes a loop is just what you need.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">In elisp, to exit loop, you can use a while loop and check a flag (set a variable to true/false), or use the built-in<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">throw</CODE>.</P>
<H2 style="BORDER-TOP: gray thin solid; FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Using throw &#65286; catch</H2>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">You can also use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">throw</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#65286;<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">catch</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to exit a map or loop.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(catch '<VAR class=d style="COLOR: rgb(39,68,88)">tagname</VAR> <VAR class=d style="COLOR: rgb(39,68,88)">body</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8594; evaluates<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR class=d style="COLOR: rgb(39,68,88)">body</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>and return<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR class=d style="COLOR: rgb(39,68,88)">body</VAR>'s last expression, but if<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR class=d style="COLOR: rgb(39,68,88)">body</VAR>contains<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(throw &#8230;)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and it is called, return the value throw passes.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(throw <VAR class=d style="COLOR: rgb(39,68,88)">tagName</VAR> <VAR class=d style="COLOR: rgb(39,68,88)">passValue</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8594; jump to a outer<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(catch '<VAR class=d style="COLOR: rgb(39,68,88)">tagName</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>and continue there, passing the value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR class=d style="COLOR: rgb(39,68,88)">passValue</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to it. Both<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR class=d style="COLOR: rgb(39,68,88)">tagName</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR class=d style="COLOR: rgb(39,68,88)">passValue</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>are evaluated.</P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">(<SPAN class=keyword style="COLOR: rgb(160,32,240)">let</SPAN> ((myList [0 1 2 3 4 5]))

  <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">map lambda onto a list. If value 3 is found, return 3, else nil
</SPAN>  (<SPAN class=keyword style="COLOR: rgb(160,32,240)">catch</SPAN> 'bbb
    (<SPAN class=keyword style="COLOR: rgb(160,32,240)">mapc</SPAN>
     (<SPAN class=keyword style="COLOR: rgb(160,32,240)">lambda</SPAN> (x)
       (<SPAN class=keyword style="COLOR: rgb(160,32,240)">message</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"%s"</SPAN> x)
       (<SPAN class=keyword style="COLOR: rgb(160,32,240)">when</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">equal</SPAN> x 3) (<SPAN class=keyword style="COLOR: rgb(160,32,240)">throw</SPAN> 'bbb x)))
     myList)
    <SPAN class=keyword style="COLOR: rgb(160,32,240)">nil</SPAN>
    ))</PRE>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><SPAN class=ref style="FONT-FAMILY: monospace; BACKGROUND-COLOR: rgb(232,255,255)"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs_manual/elisp/Catch-and-Throw.html">(info "(elisp) Catch and Throw")</A></SPAN></P>
<H2 style="BORDER-TOP: gray thin solid; FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Exit a While Loop by Flag</H2>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Here's a sample of setting flag:</P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">(<SPAN class=keyword style="COLOR: rgb(160,32,240)">let</SPAN> ((myList [0 1 2 3 4 5] )
      (foundFlag-p <SPAN class=keyword style="COLOR: rgb(160,32,240)">nil</SPAN> )
      (i 0))

  (<SPAN class=keyword style="COLOR: rgb(160,32,240)">while</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">and</SPAN>
          (<SPAN class=keyword style="COLOR: rgb(160,32,240)">not</SPAN> foundFlag-p)
          (&lt;= i (<SPAN class=keyword style="COLOR: rgb(160,32,240)">length</SPAN> myList)))

    <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">if found, set foundFlag-p
</SPAN>    (<SPAN class=keyword style="COLOR: rgb(160,32,240)">when</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">equal</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">elt</SPAN> myList i) 3)
      (<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> foundFlag-p <SPAN class=keyword style="COLOR: rgb(160,32,240)">t</SPAN> ))

    (<SPAN class=keyword style="COLOR: rgb(160,32,240)">message</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"value: %s"</SPAN> i)
    (<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> i (1+ i))))</PRE>
<DIV class=rltd style="BORDER-TOP: silver thin solid; BORDER-RIGHT: silver thin solid; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: silver thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium sans-serif; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: silver thin solid; MARGIN-TOP: 0px; DISPLAY: table; LETTER-SPACING: normal; PADDING-RIGHT: 0px; MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; border-radius: 0.5rem">
<UL style="MARGIN: 0px">
<LI style="FONT-FAMILY: sans-serif"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_examples.html">Emacs Lisp Examples</A></LI>
<LI style="FONT-FAMILY: sans-serif"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_common_functions.html">Common Emacs Lisp Functions</A></LI>
<LI style="FONT-FAMILY: sans-serif"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_list_vector.html">Emacs Lisp: List</A></LI>
<LI style="FONT-FAMILY: sans-serif"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_filter_list.html">Emacs Lisp: Filter a List</A></LI>
<LI style="FONT-FAMILY: sans-serif"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_hash_table.html">Emacs Lisp: Hash Table</A></LI>
<LI style="FONT-FAMILY: sans-serif"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_optional_params.html">Emacs Lisp: Function Optional Parameters</A></LI>
<LI style="FONT-FAMILY: sans-serif"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_unicode_representation_in_string.html">Emacs Lisp: Unicode Representation in String</A></LI>
<LI style="FONT-FAMILY: sans-serif"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_symbol.html">Emacs Lisp Symbol (tutorial)</A></LI>
<LI style="FONT-FAMILY: sans-serif"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_check_defined.html">Emacs Lisp: Check If a {function, variable, feature} is Defined/Loaded</A></LI></UL></DIV>