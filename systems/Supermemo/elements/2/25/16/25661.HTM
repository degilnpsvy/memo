<H1 style="FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Emacs Lisp: Hash Table</H1><SECTION class=buy-book style="BORDER-TOP: silver thin solid; BORDER-RIGHT: silver thin solid; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: silver thin solid; TEXT-TRANSFORM: none; FLOAT: right; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium sans-serif; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: silver thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(210,254,185); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; border-radius: 1rem">Buy<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html">Xah Emacs Tutorial</A>. Master emacs benefits for life.
</SECTION>
<DIV class=byline style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">
<ADDRESS class=author style="FONT-STYLE: normal; DISPLAY: inline"><A style="TEXT-DECORATION: none" href="mailto:xahlee@gmail.com" rel=author>Xah Lee</A></ADDRESS>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><TIME style="FONT-FAMILY: monospace; WHITE-SPACE: nowrap">2008-01-30</TIME>, &#8230;,<SPAN class=Apple-converted-space>&nbsp;</SPAN><TIME style="FONT-FAMILY: monospace; WHITE-SPACE: nowrap">2015-04-26</TIME></DIV>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">This page is a tutorial on emacs lisp hash table.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Emacs lisp has 2 types of list of key/value pairs.</P>
<UL style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">
<LI style="FONT-FAMILY: sans-serif">Association List (aka alist).<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=ref style="FONT-FAMILY: monospace; BACKGROUND-COLOR: rgb(232,255,255)"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs_manual/elisp/Association-Lists.html">(info "(elisp) Association Lists")</A></SPAN></LI>
<LI style="FONT-FAMILY: sans-serif">Hash Table.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=ref style="FONT-FAMILY: monospace; BACKGROUND-COLOR: rgb(232,255,255)"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs_manual/elisp/Hash-Tables.html">(info "(elisp) Hash Tables")</A></SPAN></LI></UL>
<DIV class=question-box32371 style="BORDER-TOP: rgb(235,170,169) thin solid; BORDER-RIGHT: rgb(235,170,169) thin solid; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: rgb(235,170,169) thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium sans-serif; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: rgb(235,170,169) thin solid; MARGIN-TOP: 0px; DISPLAY: inline-block; LETTER-SPACING: normal; PADDING-RIGHT: 0px; MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; border-radius: 0.5rem">
<P class=q style="WIDTH: auto; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; MARGIN-TOP: 0px; DISPLAY: inline-block; LINE-HEIGHT: 1.5; PADDING-RIGHT: 0px; MARGIN-RIGHT: 0px; border-radius: 0.5rem; box-shadow: rgb(72, 4, 3) 4px 4px 8px 2px">What's the Difference Between Alist and Hash Table?</P>
<UL>
<LI style="FONT-FAMILY: sans-serif">Alist items are ordered, and can have duplicate keys.</LI>
<LI style="FONT-FAMILY: sans-serif">Hash Table entries are unique. Hash Table items are not ordered. Hash Table is usually faster for random access when there are huge number of items (tens of thousands).</LI></UL></DIV><SPAN style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; COLOR: rgb(0,0,0); FONT: medium sans-serif; DISPLAY: inline !important; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H2 style="BORDER-TOP: gray thin solid; FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Create Hash Table</H2>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(make-hash-table :test 'equal)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8594; returns a new hashtable.</P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">create a hash table
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> myHash (<SPAN class=keyword style="COLOR: rgb(160,32,240)">make-hash-table</SPAN> :test '<SPAN class=keyword style="COLOR: rgb(160,32,240)">equal</SPAN>))</PRE>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">:test 'equal</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is to specify what function to use to test key existence. This is especially important if your keys are complex lisp objects.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Key or Value can be any lisp object (aka datatype)</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">There are more options for<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">make-hash-table</CODE>. Call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">describe-function</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>for detail.</P>
<H2 style="BORDER-TOP: gray thin solid; FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Add Entry</H2>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">puthash</CODE></P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">(<SPAN class=keyword style="COLOR: rgb(160,32,240)">puthash</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"joe"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"19"</SPAN> myHash)</PRE>
<H2 style="BORDER-TOP: gray thin solid; FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Remove Entry</H2>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">remhash</CODE></P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">(<SPAN class=keyword style="COLOR: rgb(160,32,240)">remhash</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"liz"</SPAN> myHash)</PRE>
<H2 style="BORDER-TOP: gray thin solid; FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Get Key's Value</H2>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">gethash</CODE></P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">(<SPAN class=keyword style="COLOR: rgb(160,32,240)">gethash</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"jane"</SPAN> myHash)</PRE>
<H3 style="FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Count Length</H3>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">hash-table-count</CODE></P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">(<SPAN class=keyword style="COLOR: rgb(160,32,240)">hash-table-count</SPAN> myHash)</PRE>
<H3 style="FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Remove All Entries</H3>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">To clear all entries in a hash table, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(clrhash <VAR class=d style="COLOR: rgb(39,68,88)">myHash</VAR>)</CODE>.</P>
<H3 style="FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Check If a Key Exists</H3>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">To check if a key exists, use the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(gethash <VAR class=d style="COLOR: rgb(39,68,88)">myKey</VAR> <VAR class=d style="COLOR: rgb(39,68,88)">myHash</VAR>)</CODE>. If it exists, its value is returned, else<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">nil</CODE>. Example:</P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">(<SPAN class=keyword style="COLOR: rgb(160,32,240)">let</SPAN> (myHash)
  (<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> myHash (<SPAN class=keyword style="COLOR: rgb(160,32,240)">make-hash-table</SPAN> :test '<SPAN class=keyword style="COLOR: rgb(160,32,240)">equal</SPAN>))
  (<SPAN class=keyword style="COLOR: rgb(160,32,240)">puthash</SPAN> 'joe <SPAN class=string style="COLOR: rgb(139,34,82)">"19"</SPAN> myHash)

  (<SPAN class=keyword style="COLOR: rgb(160,32,240)">gethash</SPAN> 'vicky myHash) <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">&#8658; nil
</SPAN>)</PRE>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">gethash</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>has a optional third parameter. If the key does not exist, that value is returned.</P>
<H2 style="BORDER-TOP: gray thin solid; FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Complete Hash Table Example</H2>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Here's a complete code that shows how to create a hash table, then add, change, remove, entries:</P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">(<SPAN class=keyword style="COLOR: rgb(160,32,240)">let</SPAN> (myHash val)

  <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">create a hash table
</SPAN>  (<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> myHash (<SPAN class=keyword style="COLOR: rgb(160,32,240)">make-hash-table</SPAN> :test '<SPAN class=keyword style="COLOR: rgb(160,32,240)">equal</SPAN>))

  <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">add entries
</SPAN>  (<SPAN class=keyword style="COLOR: rgb(160,32,240)">puthash</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"joe"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"19"</SPAN> myHash)
  (<SPAN class=keyword style="COLOR: rgb(160,32,240)">puthash</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"jane"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"20"</SPAN> myHash)
  (<SPAN class=keyword style="COLOR: rgb(160,32,240)">puthash</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"carrie"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"17"</SPAN> myHash)
  (<SPAN class=keyword style="COLOR: rgb(160,32,240)">puthash</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"liz"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"21"</SPAN> myHash)

  <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">modify a entry's value
</SPAN>  (<SPAN class=keyword style="COLOR: rgb(160,32,240)">puthash</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"jane"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"16"</SPAN> myHash)

  <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">remove a entry
</SPAN>  (<SPAN class=keyword style="COLOR: rgb(160,32,240)">remhash</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"liz"</SPAN> myHash)

  <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">get a entry's value
</SPAN>  (<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> val (<SPAN class=keyword style="COLOR: rgb(160,32,240)">gethash</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"jane"</SPAN> myHash))

  (<SPAN class=keyword style="COLOR: rgb(160,32,240)">message</SPAN> val) <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">print it
</SPAN>)</PRE>
<H2 style="BORDER-TOP: gray thin solid; FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Apply a Function to All Key-Value Pairs</H2>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(maphash <VAR class=d style="COLOR: rgb(39,68,88)">myfun</VAR> <VAR class=d style="COLOR: rgb(39,68,88)">myHashtable</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8594; apply a function to all entries in a hash table. The function<VAR class=d style="COLOR: rgb(39,68,88)">myfun</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>must take 2 arguments, key and value.</P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">from emacs 24.4 (require 'subr-x)
</SPAN>
(<SPAN class=function-name style="COLOR: rgb(0,0,255)">defsubst</SPAN> hash-table-keys (hash-table)
  <SPAN class=string style="COLOR: rgb(139,34,82)">"Return a list of keys in HASH-TABLE."</SPAN>
  (<SPAN class=keyword style="COLOR: rgb(160,32,240)">let</SPAN> ((keys '()))
    (<SPAN class=keyword style="COLOR: rgb(160,32,240)">maphash</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">lambda</SPAN> (k _v) (<SPAN class=keyword style="COLOR: rgb(160,32,240)">push</SPAN> k keys)) hash-table)
    keys))</PRE>
<H3 style="FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Get All Keys</H3>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">In emacs 24.4, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">hash-table-keys</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(require 'subr-x)</CODE></P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">emacs 24.4, example of getting all keys from a hash table
</SPAN>
<SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">creating a hash
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> myHash (<SPAN class=keyword style="COLOR: rgb(160,32,240)">make-hash-table</SPAN> :test '<SPAN class=keyword style="COLOR: rgb(160,32,240)">equal</SPAN>))
(<SPAN class=keyword style="COLOR: rgb(160,32,240)">puthash</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"joe"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"19"</SPAN> myHash)
(<SPAN class=keyword style="COLOR: rgb(160,32,240)">puthash</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"jane"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"20"</SPAN> myHash)

<SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">get all keys
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">require</SPAN> 'subr-x)
(hash-table-keys myHash) <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">&#8658; ("jane" "joe")</SPAN></PRE>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">With this function, you can use it like this:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(get-hash-keys <VAR class=d style="COLOR: rgb(39,68,88)">hashtable</VAR>)</CODE>.</P>
<H3 style="FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Get All Values</H3>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">in emacs 24.4, use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">hash-table-values</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>from<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(require 'subr-x)</CODE></P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">getting all keys from a hash table.
</SPAN>
<SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">creating a hash
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> myHash (<SPAN class=keyword style="COLOR: rgb(160,32,240)">make-hash-table</SPAN> :test '<SPAN class=keyword style="COLOR: rgb(160,32,240)">equal</SPAN>))
(<SPAN class=keyword style="COLOR: rgb(160,32,240)">puthash</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"joe"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"19"</SPAN> myHash)
(<SPAN class=keyword style="COLOR: rgb(160,32,240)">puthash</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"jane"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"20"</SPAN> myHash)

<SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">get all keys.
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">require</SPAN> 'subr-x)          <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">emacs 24.4
</SPAN>(hash-table-values myHash) <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">&#8658; ("20" "19")</SPAN></PRE><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">from emacs 24.4 (require 'subr-x)
</SPAN>
(<SPAN class=function-name style="COLOR: rgb(0,0,255)">defsubst</SPAN> hash-table-values (hash-table)
  <SPAN class=string style="COLOR: rgb(139,34,82)">"Return a list of values in HASH-TABLE."</SPAN>
  (<SPAN class=keyword style="COLOR: rgb(160,32,240)">let</SPAN> ((values '()))
    (<SPAN class=keyword style="COLOR: rgb(160,32,240)">maphash</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">lambda</SPAN> (_k v) (<SPAN class=keyword style="COLOR: rgb(160,32,240)">push</SPAN> v values)) hash-table)
    values))</PRE>
<H3 style="FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Hash to List</H3><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">(<SPAN class=keyword style="COLOR: rgb(160,32,240)">defun</SPAN> xah-hash-to-list (hash-table)
  <SPAN class=string style="COLOR: rgb(139,34,82)">"Return a list that represent the HASH-TABLE
Each element is a list: (list key value).

See also, emacs 24.4's new functions.
 (require 'subr-x)
 `hash-table-keys'
 `hash-table-values'

http://ergoemacs.org/emacs/elisp_hash_table.html
Version 2015-04-25"</SPAN>
  (<SPAN class=keyword style="COLOR: rgb(160,32,240)">let</SPAN> (result)
    (<SPAN class=keyword style="COLOR: rgb(160,32,240)">maphash</SPAN>
     (<SPAN class=keyword style="COLOR: rgb(160,32,240)">lambda</SPAN> (k v)
       (<SPAN class=keyword style="COLOR: rgb(160,32,240)">push</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">list</SPAN> k v) result))
     hash-table)
    result))</PRE>
<H3 style="FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Print All Entries Sorted by Key</H3>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Here's a example how you can print out all entries in a hash table by sorted key.</P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">example of turning a hash table into list then sort it
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">let</SPAN> (myHash myList)

  <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">add items to the hash
</SPAN>  (<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> myHash (<SPAN class=keyword style="COLOR: rgb(160,32,240)">make-hash-table</SPAN> :test '<SPAN class=keyword style="COLOR: rgb(160,32,240)">equal</SPAN>))
  (<SPAN class=keyword style="COLOR: rgb(160,32,240)">puthash</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"joe"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"19"</SPAN> myHash)
  (<SPAN class=keyword style="COLOR: rgb(160,32,240)">puthash</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"jane"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"20"</SPAN> myHash)
  (<SPAN class=keyword style="COLOR: rgb(160,32,240)">puthash</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"carrie"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"17"</SPAN> myHash)
  (<SPAN class=keyword style="COLOR: rgb(160,32,240)">puthash</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"liz"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"21"</SPAN> myHash)

  <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">get the hash table into a list
</SPAN>  (<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> myList (xah-hash-to-list myHash))

  <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">sort and print it out
</SPAN>  (<SPAN class=keyword style="COLOR: rgb(160,32,240)">sort</SPAN> myList (<SPAN class=keyword style="COLOR: rgb(160,32,240)">lambda</SPAN> (a b) (string&lt; (<SPAN class=keyword style="COLOR: rgb(160,32,240)">car</SPAN> a) (<SPAN class=keyword style="COLOR: rgb(160,32,240)">car</SPAN> b))))
)

<SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">prints (("carrie" "17") ("jane" "20") ("liz" "21") ("joe" "19"))</SPAN></PRE>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Warning: elisp's<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">sort</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function is destructive. Once<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">sort</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used on a variable, that variable's value is essentially destroyed. (the sorted result is returned.) If you want to keep the variable, make a copy first.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><SPAN class=ref style="FONT-FAMILY: monospace; BACKGROUND-COLOR: rgb(232,255,255)"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs_manual/elisp/Rearrangement.html">(info "(elisp) Rearrangement")</A></SPAN></P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><SPAN class=ref style="FONT-FAMILY: monospace; BACKGROUND-COLOR: rgb(232,255,255)"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs_manual/elisp/Hash-Tables.html">(info "(elisp) Hash Tables")</A></SPAN></P>
<DIV class=rltd style="BORDER-TOP: silver thin solid; BORDER-RIGHT: silver thin solid; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: silver thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium sans-serif; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: silver thin solid; MARGIN-TOP: 0px; DISPLAY: table; LETTER-SPACING: normal; PADDING-RIGHT: 0px; MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; border-radius: 0.5rem">
<UL style="MARGIN: 0px">
<LI style="FONT-FAMILY: sans-serif"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_list_vector.html">Emacs Lisp: List</A></LI>
<LI style="FONT-FAMILY: sans-serif"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_vector.html">Emacs Lisp: Vector</A></LI>
<LI style="FONT-FAMILY: sans-serif"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_filter_list.html">Emacs Lisp: Filter a List</A></LI>
<LI style="FONT-FAMILY: sans-serif"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_break_loop.html">Emacs Lisp: Throw &#65286; Catch, Exit a Loop</A></LI>
<LI style="FONT-FAMILY: sans-serif"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_symbol.html">Emacs Lisp Symbol (tutorial)</A></LI>
<LI style="FONT-FAMILY: sans-serif"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_check_defined.html">Emacs Lisp: Check If a {function, variable, feature} is Defined/Loaded</A></LI></UL></DIV>