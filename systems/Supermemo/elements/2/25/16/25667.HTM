<H1 style="FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Emacs Lisp Symbol (tutorial)</H1><SECTION class=buy-book style="BORDER-TOP: silver thin solid; BORDER-RIGHT: silver thin solid; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: silver thin solid; TEXT-TRANSFORM: none; FLOAT: right; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium sans-serif; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: silver thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(210,254,185); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; border-radius: 1rem">Buy<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html">Xah Emacs Tutorial</A>. Master emacs benefits for life.
</SECTION>
<DIV class=byline style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">
<ADDRESS class=author style="FONT-STYLE: normal; DISPLAY: inline"><A style="TEXT-DECORATION: none" href="mailto:xahlee@gmail.com" rel=author>Xah Lee</A></ADDRESS>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><TIME style="FONT-FAMILY: monospace; WHITE-SPACE: nowrap">2012-12-30</TIME>, &#8230;,<SPAN class=Apple-converted-space>&nbsp;</SPAN><TIME style="FONT-FAMILY: monospace; WHITE-SPACE: nowrap">2015-05-23</TIME></DIV>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Lisp has symbols concept. Lisp's concept of &#8220;symbols&#8221; is somewhat like identifiers in other languages, except that lisp symbol stores more than one value.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Each lisp symbol has the following &#8220;cells&#8221; to store things:</P>
<UL style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">
<LI style="FONT-FAMILY: sans-serif">&#8220;<STRONG>name</STRONG>&#8221; cell &#8594; a string, typically the same as the symbol.</LI>
<LI style="FONT-FAMILY: sans-serif">&#8220;<STRONG>value</STRONG>&#8221; cell &#8594; stores the symbol's value, typically when the symbol is used as variable.</LI>
<LI style="FONT-FAMILY: sans-serif">&#8220;<STRONG>function</STRONG>&#8221; cell &#8594; stores function definition object or lisp macros.</LI>
<LI style="FONT-FAMILY: sans-serif">&#8220;<STRONG>property list</STRONG>&#8221; cell &#8594; typically hold a list of name/value pairs. It is used for syntax coloring strings, for function's state, etc.</LI></UL>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">A symbol's {value, function} cell may be empty, it's said to be &#8220;void&#8221;. When you try to get a cell's value that's void, it's a lisp error. (a empty cell is not the same as having value of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">nil</CODE>.)</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">In normal coding, you don't need to worry about any of these. The only thing that's useful for most elisp code is property list, but many other higher-level functions do it for you. (i.e. add, remove, properties.)<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=ref style="FONT-FAMILY: monospace; BACKGROUND-COLOR: rgb(232,255,255)"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs_manual/elisp/Property-Lists.html">(info "(elisp) Property Lists")</A></SPAN></P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Understanding Lisp Symbol cells is important when you do advanced lisp programing. &#8278; macros, create and calling functions at run-time, function inside functions, manipulate evaluation, implementing a language, or any sort of meta-programing. If you don't have a need, you should not exploit these facilities in your program. keep your program normal and simple.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Here's ways to get cell values.</P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">check if a variable eval to a lisp symbol
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> x1 123 )
(<SPAN class=keyword style="COLOR: rgb(160,32,240)">symbolp</SPAN> x1)                            <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;</SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">nil
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> x2 'xx )
(<SPAN class=keyword style="COLOR: rgb(160,32,240)">symbolp</SPAN> x2)                            <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;</SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">t
</SPAN>
<SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">get a symbol's cell values
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">symbol-name</SPAN> 'x1)                       <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">"x1"
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">symbol-value</SPAN> 'x1)                      <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">123
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">symbol-function</SPAN> 'x1)                   <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">error. because it's void.
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">symbol-plist</SPAN> 'x1)                      <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;</SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">nil
</SPAN>
<SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">set a symbol's cell values
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">symbol-name</SPAN> '<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN>)                  <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">"setq"
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">symbol-value</SPAN> '<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN>)                 <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">error. because it's void.
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">symbol-function</SPAN> '<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN>)              <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;</SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">#&lt;subr setq&gt;
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">symbol-plist</SPAN> '<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN>)                 <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;</SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">(byte-compile byte-compile-setq)</SPAN></PRE>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Because a symbol can both hold a value and a function, a symbol can be both a variable and function. For example, the symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">buffer-file-name</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is both a variable and function.<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=ref style="FONT-FAMILY: monospace; BACKGROUND-COLOR: rgb(232,255,255)"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs_manual/elisp/Symbols.html">(info "(elisp) Symbols")</A></SPAN><SPAN class=ref style="FONT-FAMILY: monospace; BACKGROUND-COLOR: rgb(232,255,255)"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs_manual/elisp/Function-Cells.html">(info "(elisp) Function Cells")</A></SPAN></P><SECTION style="BORDER-TOP: silver thin solid; BORDER-RIGHT: silver thin solid; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: silver thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium sans-serif; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: silver thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(221,234,223); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; border-radius: 1rem">
<H4 style="FONT-FAMILY: serif">Examples of Using Emacs Lisp Properties</H4>
<P style="LINE-HEIGHT: 1.5">Emacs lisp property list is used extensively in emacs. It is also very useful if you want to write a function with state.</P>
<UL>
<LI style="FONT-FAMILY: sans-serif"><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">toggle-letter-case</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>at<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/modernization_upcase-word.html">Emacs's Letter-Case Changing Commands</A></LI>
<LI style="FONT-FAMILY: sans-serif"><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">cycle-hyphen-underscore-space</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>at<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_change_space-hyphen_underscore.html">Cycle Replace Space Hyphen Underscore</A></LI></UL></SECTION>
<DIV class=question-box32371 style="BORDER-TOP: rgb(235,170,169) thin solid; BORDER-RIGHT: rgb(235,170,169) thin solid; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: rgb(235,170,169) thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium sans-serif; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: rgb(235,170,169) thin solid; MARGIN-TOP: 0px; DISPLAY: inline-block; LETTER-SPACING: normal; PADDING-RIGHT: 0px; MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; border-radius: 0.5rem">
<P class=q style="WIDTH: auto; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; MARGIN-TOP: 0px; DISPLAY: inline-block; LINE-HEIGHT: 1.5; PADDING-RIGHT: 0px; MARGIN-RIGHT: 0px; border-radius: 0.5rem; box-shadow: rgb(72, 4, 3) 4px 4px 8px 2px">How to convert a symbol to string?</P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; FONT-FAMILY: 'DejaVu Sans Mono', monospace; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px"><SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">convert a symbol to string
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">symbol-name</SPAN> '<SPAN class=keyword style="COLOR: rgb(160,32,240)">defun</SPAN>)</PRE></DIV><SPAN style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; COLOR: rgb(0,0,0); FONT: medium sans-serif; DISPLAY: inline !important; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><SPAN class=Apple-converted-space>&nbsp;</SPAN></SPAN>
<DIV class=question-box32371 style="BORDER-TOP: rgb(235,170,169) thin solid; BORDER-RIGHT: rgb(235,170,169) thin solid; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: rgb(235,170,169) thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium sans-serif; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: rgb(235,170,169) thin solid; MARGIN-TOP: 0px; DISPLAY: inline-block; LETTER-SPACING: normal; PADDING-RIGHT: 0px; MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; border-radius: 0.5rem">
<P class=q style="WIDTH: auto; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; MARGIN-TOP: 0px; DISPLAY: inline-block; LINE-HEIGHT: 1.5; PADDING-RIGHT: 0px; MARGIN-RIGHT: 0px; border-radius: 0.5rem; box-shadow: rgb(72, 4, 3) 4px 4px 8px 2px">How to convert a string to symbol?</P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; FONT-FAMILY: 'DejaVu Sans Mono', monospace; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px"><SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">convert a string to symbol
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">intern</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"something"</SPAN>)</PRE></DIV><SPAN style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FLOAT: none; COLOR: rgb(0,0,0); FONT: medium sans-serif; DISPLAY: inline !important; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"></SPAN>
<H2 style="BORDER-TOP: gray thin solid; FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Classification of Emacs Lisp Function</H2>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">On a separate subject, Emacs Lisp functions are classified into several types.</P>
<UL style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">
<LI style="FONT-FAMILY: sans-serif"><STRONG>Function</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN>= Most common. Written in elisp. Usually<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(defun &#8230;)</CODE></LI>
<LI style="FONT-FAMILY: sans-serif"><STRONG>Primitive</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN>= elisp function written in C. &#8278; {<CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">list</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">car</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">append</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">point</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">defun</CODE>, &#8230;}. Typically the most fundamental ones.</LI>
<LI style="FONT-FAMILY: sans-serif"><STRONG>lambda expression</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN>= &#8278;<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(lambda &#8230;)</CODE>. Usually temp functions.</LI>
<LI style="FONT-FAMILY: sans-serif"><STRONG>special form</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN>= a function that doesn't eval in the normal way. &#8278; {<CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">if</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">cond</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">and</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">or</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">while</CODE>,<CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">progn</CODE>}. (normally, arguments to a function are all evaluated first.)</LI>
<LI style="FONT-FAMILY: sans-serif"><STRONG>macro</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN>= Similar to &#8220;special form&#8221;, but user-defined. i.e. the arguments are not eval'd, and you can manipulate them and eval them.</LI>
<LI style="FONT-FAMILY: sans-serif"><STRONG>command</STRONG><SPAN class=Apple-converted-space>&nbsp;</SPAN>= functions that can be called by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">command-execute</CODE>. Typically,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(defun &#8230;)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(interactive &#8230;)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>clause. All functions you can call by &#8220;M-x&#8221; are commands.</LI></UL>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><SPAN class=ref style="FONT-FAMILY: monospace; BACKGROUND-COLOR: rgb(232,255,255)"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs_manual/elisp/What-Is-a-Function.html">(info "(elisp) What Is a Function")</A></SPAN></P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">check if a function is a elisp primitive; i.e. a elisp function written in C
</SPAN><SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">arg to subrp is a lisp object, not symbol
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">subrp</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">symbol-function</SPAN> '<SPAN class=function-name style="COLOR: rgb(0,0,255)">goto-char</SPAN>))    <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;</SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">t
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">subrp</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">symbol-function</SPAN> '<SPAN class=keyword style="COLOR: rgb(160,32,240)">defun</SPAN>))        <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;</SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">t
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">subrp</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">symbol-function</SPAN> '<SPAN class=keyword style="COLOR: rgb(160,32,240)">list</SPAN>))         <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;</SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">t
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">subrp</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">symbol-function</SPAN> '<SPAN class=keyword style="COLOR: rgb(160,32,240)">while</SPAN>))        <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;</SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">t
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">subrp</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">symbol-function</SPAN> '+))            <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;</SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">t
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">subrp</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">symbol-function</SPAN> '<SPAN class=function-name style="COLOR: rgb(0,0,255)">goto-char</SPAN>))    <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;</SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">t
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">subrp</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">symbol-function</SPAN> '<SPAN class=function-name style="COLOR: rgb(0,0,255)">beginning-of-line</SPAN>)) <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;</SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">t
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">subrp</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">symbol-function</SPAN> 'forward-word)) <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;</SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">t
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">subrp</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">symbol-function</SPAN> '<SPAN class=function-name style="COLOR: rgb(0,0,255)">save-excursion</SPAN>)) <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;</SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">t
</SPAN>
(<SPAN class=keyword style="COLOR: rgb(160,32,240)">subrp</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">symbol-function</SPAN> '<SPAN class=keyword style="COLOR: rgb(160,32,240)">lambda</SPAN>))       <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;</SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">nil
</SPAN>
<SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">Return SYMBOL's function definition.  Error if that is void.
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">symbol-function</SPAN> '<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN>)                 <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;</SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">#&lt;subr setq&gt;</SPAN></PRE>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">You can use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">fboundp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to check if a function is defined first (it checks a symbol's definition cell), and use<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">boundp</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>to check if a variable is defined (it checkes a symbol's value cell) &#12308;&#10148;&nbsp;<A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_check_defined.html">Emacs Lisp: Check If a {function, variable, feature} is Defined/Loaded</A>&#12309;</P>
<H3 style="FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Command vs Non-Command</H3>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">For practical emacs lisp programing, the most important concept here is &#8220;command&#8221;. Commands are basically<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(defun &#8230;)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(interactive &#8230;)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>clause. Function defined without the &#8220;interactive&#8221; can only be called by other elisp functions. The &#8220;interactive&#8221; function also provide many ways to automatically feed arguments to your function when emacs user calls your function. &#12308;&#10148;&nbsp;<A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_idioms_prompting_input.html">Emacs Lisp Idioms: Prompting for User Input</A>&#12309; (<SPAN class=ref style="FONT-FAMILY: monospace; BACKGROUND-COLOR: rgb(232,255,255)"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs_manual/elisp/Defining-Commands.html">(info "(elisp) Defining Commands")</A></SPAN>)</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">When looking for command by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">apropos-command</CODE>, you can call it with &#12304;<KBD style="BORDER-TOP: rgb(194,194,194) 1px solid; FONT-FAMILY: sans-serif; BORDER-RIGHT: rgb(194,194,194) 1px solid; BORDER-BOTTOM: rgb(194,194,194) 1px solid; BORDER-LEFT: rgb(194,194,194) 1px solid; BACKGROUND-COLOR: rgb(240,240,240); border-radius: 4px; box-shadow: silver 1px 1px">Ctrl</KBD>+<KBD style="BORDER-TOP: rgb(194,194,194) 1px solid; FONT-FAMILY: sans-serif; BORDER-RIGHT: rgb(194,194,194) 1px solid; BORDER-BOTTOM: rgb(194,194,194) 1px solid; BORDER-LEFT: rgb(194,194,194) 1px solid; BACKGROUND-COLOR: rgb(240,240,240); border-radius: 4px; box-shadow: silver 1px 1px">u</KBD>&#12305; first. It'll then also list functions. &#12308;&#10148;&nbsp;<A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_function_eval_and_doc_lookup.html">Emacs: Finding Functions and Documentation Lookup</A>&#12309;</P>
<H3 style="FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Primitive</H3>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">When coding emacs lisp, it's always good to use elisp Primitive, because Primitive usually means it's fast. You can usually find out whether a function is a primitive by calling<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">describe-function</CODE>.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><SPAN class=ref style="FONT-FAMILY: monospace; BACKGROUND-COLOR: rgb(232,255,255)"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs_manual/elisp/Functions.html">(info "(elisp) Functions")</A></SPAN></P>
<DIV class=rltd style="BORDER-TOP: silver thin solid; BORDER-RIGHT: silver thin solid; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: silver thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium sans-serif; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: silver thin solid; MARGIN-TOP: 0px; DISPLAY: table; LETTER-SPACING: normal; PADDING-RIGHT: 0px; MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; border-radius: 0.5rem">
<UL style="MARGIN: 0px">
<LI style="FONT-FAMILY: sans-serif"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/function-frequency.html">Emacs Lisp Function Frequency</A></LI>
<LI style="FONT-FAMILY: sans-serif"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_optional_params.html">Emacs Lisp Functions Optional Parameters</A></LI>
<LI style="FONT-FAMILY: sans-serif"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_printing.html">Emacs Lisp: print, princ, prin1, format, message</A></LI>
<LI style="FONT-FAMILY: sans-serif"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_command_line_argv.html">Emacs Lisp: Getting Command Line Arguments</A></LI>
<LI style="FONT-FAMILY: sans-serif"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_break_loop.html">Emacs Lisp: Ways to Exit/Break a Loop</A></LI>
<LI style="FONT-FAMILY: sans-serif"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_universal_argument.html">Emacs Lisp: Writing Command to Accept universal-argument</A></LI>
<LI style="FONT-FAMILY: sans-serif"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/inline_doc.html">Emacs Function's Inline Doc String Markups</A></LI></UL></DIV><BR class=Apple-interchange-newline>