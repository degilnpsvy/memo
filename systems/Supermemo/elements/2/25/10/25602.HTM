<HEAD></HEAD>
<BODY>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 18pt; FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; mso-bidi-font-size: 11.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt">Ksets</SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><FONT face=Calibri><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold">In many ways, a kset looks like an extension of the </SPAN><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold">kobj_type </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold">structure; a kset is a collection of kobjects embedded within structures of the same type. However, while </SPAN><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold">struct kobj_type </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold">concerns itself with the type of an object, </SPAN><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold">struct kset </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold">is concerned with aggregation and collection. The two concepts have been separated so that objects of identical type can appear in distinct sets.</SPAN></FONT></FONT></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold"><FONT face=Calibri>Therefore, the main function of a kset is containment; it can be thought of as the top-level container class for kobjects. In fact, each kset contains its own kobject internally, and it can, in many ways, be treated the same way as a kobject. <FONT class=extract>It is worth noting that ksets are always represented in sysfs; once a kset has been set up and added to the system, there will be a sysfs directory for it.</FONT> Kobjects do not necessarily show up in sysfs, but every kobject that is a member of a kset is represented there.</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold"><FONT face=Calibri>Adding a kobject to a kset is usually done when the object is created; it is a two-step process. The kobject</FONT></SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka; mso-ascii-font-family: Birka">&#8217;</SPAN><FONT face=Calibri><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold">s </SPAN><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold">kset </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold">field must be pointed at the kset of interest; then the kobject should be passed to:</SPAN></FONT></FONT></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold"><FONT class=extract face=Calibri>int kobject_add(struct kobject *kobj);</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold"><FONT face=Calibri><FONT class=extract>As always, programmers should be aware that this function can fail (in which case it returns a negative error code) and respond accordingly.</FONT> There is a convenience function provided by the kernel:</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold"><FONT class=extract face=Calibri>extern int kobject_register(struct kobject *kobj);</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><FONT face=Calibri><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold">This function is simply a combination of </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold">kobject_init </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold">and </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold">kobject_add</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold">.</SPAN></FONT></FONT></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><FONT face=Calibri><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold">When a kobject is passed to </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold">kobject_add</SPAN></I></FONT><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold"><FONT class=extract>, its reference count is incremented.</FONT> <FONT class=extract>Containment within the kset is, after all, a reference to the object. At some point, the kobject will probably have to be removed from the kset to clear that reference; that is done with:</FONT></SPAN></FONT></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 11pt; FONT-FAMILY: TheSansMonoCondensed-SemiLight; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold"><FONT class=extract face=Calibri>void kobject_del(struct kobject *kobj);</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><FONT face=Calibri><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold">There is also a </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold">kobject_unregister </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold">function, which is a combination of </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold">kobject_del </SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold">and </SPAN><I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold">kobject_put</SPAN></I><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold">.</SPAN></FONT></FONT></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><FONT class=extract><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold"><FONT face=Calibri>A kset keeps its children in a standard kernel linked list. In almost all cases, the contained kobjects also have pointers to the kset (or, strictly, its embedded kobject) in their parent</FONT></SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka; mso-ascii-font-family: Birka">&#8217;</SPAN></FONT><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold"><FONT face=Calibri><FONT class=extract>s fields. So, typically, a kset and its kobjects look something like what you see in Figure 14-2.</FONT> <FONT class=extract>Bear in mind that:</FONT></FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><FONT class=extract><SPAN style="FONT-SIZE: 14pt; FONT-FAMILY: &#23435;&#20307;; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold"><FONT face=Calibri> All of the contained kobjects in the diagram are actually embedded within some other type, possibly even other ksets.</FONT></SPAN></FONT></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><FONT class=extract><SPAN style="FONT-SIZE: 14pt; FONT-FAMILY: &#23435;&#20307;; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold"><FONT face=Calibri> It is not required that a kobject</FONT></SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: 'Myriad-CnSemibold','sans-serif'; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-fareast-font-family: Birka; mso-ascii-font-family: Birka">&#8217;</SPAN><FONT face=Calibri><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold">s parent be </SPAN><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">the containing kset (although any other organization would be strange and rare).</SPAN></FONT></FONT></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 14pt; FONT-FAMILY: Birka; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt"><FONT face=Calibri>&nbsp;</FONT></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><SPAN lang=EN-US style="FONT-SIZE: 14.5pt; mso-bidi-font-size: 11.0pt; mso-no-proof: yes"><?xml:namespace prefix = "v" /><v:shape id=&#22270;&#29255;_x0020_2 style="HEIGHT: 150pt; WIDTH: 424.5pt; VISIBILITY: visible; mso-wrap-style: square" type="#_x0000_t75" o:spid="_x0000_i1026"><v:imagedata o:title="" src="file:///C:\Users\DONPOP~1\AppData\Local\Temp\msohtmlclip1\01\clip_image003.emz"><FONT face=Calibri></FONT></v:imagedata></v:shape></SPAN><SPAN lang=EN-US style="FONT-SIZE: 14.5pt; mso-bidi-font-size: 11.0pt"></SPAN></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><I><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt"><FONT face=Calibri>Figure 14-2. A simple kset hierarchy</FONT></SPAN></I></P>
<P class=MsoNormal style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" align=left><I><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt"><FONT face=Calibri></FONT></SPAN></I>&nbsp;</P><SPAN lang=EN-US style="FONT-SIZE: 12pt; FONT-FAMILY: Birka-Italic; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt"><PRE><A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/kobject.h#151" name=151>151</A><SPAN class=c>/**
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/kobject.h#152" name=152>152</A> * struct kset - a set of kobjects of a specific type, belonging to a specific subsystem.
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/kobject.h#153" name=153>153</A> *
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/kobject.h#154" name=154>154</A> * A kset defines a group of kobjects.  They can be individually
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/kobject.h#155" name=155>155</A> * different "types" but overall these kobjects all want to be grouped
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/kobject.h#156" name=156>156</A> * together and operated on in the same manner.  ksets are used to
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/kobject.h#157" name=157>157</A> * define the attribute callbacks and other common events that happen to
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/kobject.h#158" name=158>158</A> * a kobject.
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/kobject.h#159" name=159>159</A> *
<A class=hl href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/kobject.h#160" name=160>160</A> * @list: the list of all kobjects for this kset
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/kobject.h#161" name=161>161</A> * @list_lock: a lock for iterating over the kobjects
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/kobject.h#162" name=162>162</A> * @kobj: the embedded kobject for this kset (recursion, isn't it fun...)
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/kobject.h#163" name=163>163</A> * @uevent_ops: the set of uevent operations for this kset.  These are
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/kobject.h#164" name=164>164</A> * called whenever a kobject has something happen to it so that the kset
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/kobject.h#165" name=165>165</A> * can add new environment variables, or filter out the uevents if so
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/kobject.h#166" name=166>166</A> * desired.
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/kobject.h#167" name=167>167</A> */</SPAN>
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/kobject.h#168" name=168>168</A><B>struct</B> <A class=xs name=kset></A><A class=xs href="http://172.29.26.110:8080/source/s?refs=kset&amp;project=Linux-v4.6">kset</A> {
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/kobject.h#169" name=169>169</A>	<B>struct</B> <A href="http://172.29.26.110:8080/source/s?defs=list_head&amp;project=Linux-v4.6">list_head</A> <A class=xmb name=list></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=list&amp;project=Linux-v4.6">list</A>;
<A class=hl href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/kobject.h#170" name=170>170</A>	<A href="http://172.29.26.110:8080/source/s?defs=spinlock_t&amp;project=Linux-v4.6">spinlock_t</A> <A class=xmb name=list_lock></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=list_lock&amp;project=Linux-v4.6">list_lock</A>;
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/kobject.h#171" name=171>171</A>	<B>struct</B> <A class=d href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/kobject.h#kobject">kobject</A> <A class=xmb name=kobj></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=kobj&amp;project=Linux-v4.6">kobj</A>;
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/kobject.h#172" name=172>172</A>	<B>const</B> <B>struct</B> <A class=d href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/kobject.h#kset_uevent_ops">kset_uevent_ops</A> *<A class=xmb name=uevent_ops></A><A class=xmb href="http://172.29.26.110:8080/source/s?refs=uevent_ops&amp;project=Linux-v4.6">uevent_ops</A>;
<A class=l href="http://172.29.26.110:8080/source/xref/Linux-v4.6/include/linux/kobject.h#173" name=173>173</A>};</PRE></SPAN></BODY>