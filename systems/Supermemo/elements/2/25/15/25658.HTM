<H1 style="FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Emacs Lisp: List</H1><SECTION class=buy-book style="BORDER-TOP: silver thin solid; BORDER-RIGHT: silver thin solid; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: silver thin solid; TEXT-TRANSFORM: none; FLOAT: right; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium sans-serif; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: silver thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(210,254,185); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; border-radius: 1rem">Buy<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html">Xah Emacs Tutorial</A>. Master emacs benefits for life.
</SECTION>
<DIV class=byline style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">
<ADDRESS class=author style="FONT-STYLE: normal; DISPLAY: inline"><A style="TEXT-DECORATION: none" href="mailto:xahlee@gmail.com" rel=author>Xah Lee</A></ADDRESS>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><TIME style="FONT-FAMILY: monospace; WHITE-SPACE: nowrap">2011-02-21</TIME>, &#8230;,<SPAN class=Apple-converted-space>&nbsp;</SPAN><TIME style="FONT-FAMILY: monospace; WHITE-SPACE: nowrap">2015-08-27</TIME></DIV>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">This page is a basic tutorial of Emacs Lisp's list datatype.</P>
<H2 style="BORDER-TOP: gray thin solid; FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Create List</H2>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">To create a list, write it like this<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(list <VAR class=d style="COLOR: rgb(39,68,88)">a</VAR> <VAR class=d style="COLOR: rgb(39,68,88)">b</VAR> &#8230;)</CODE>.</P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">assign a list to a var
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> myList (<SPAN class=keyword style="COLOR: rgb(160,32,240)">list</SPAN> 1 <SPAN class=string style="COLOR: rgb(139,34,82)">"b"</SPAN> 3))</PRE><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">prints a list
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">message</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"%S"</SPAN> myList)</PRE>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">If you do not want the elements evaluated, write it like this:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">'(<VAR class=d style="COLOR: rgb(39,68,88)">a</VAR> <VAR class=d style="COLOR: rgb(39,68,88)">b</VAR> &#8230;)</CODE>. This is equivalent to<CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(quote (list <VAR class=d style="COLOR: rgb(39,68,88)">a</VAR> <VAR class=d style="COLOR: rgb(39,68,88)">b</VAR> &#8230;))</CODE></P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">assign a list to a var
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> myList '(a b c))

<SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">prints a list
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">message</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"%S"</SPAN> myList)</PRE><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">create a list of values of variables
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">let</SPAN> ((x 3) (y 4) (z 5))
  (<SPAN class=keyword style="COLOR: rgb(160,32,240)">message</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"%S"</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">list</SPAN> x y z))
  ) <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">prints "(3 4 5)"</SPAN></PRE>
<H2 style="BORDER-TOP: gray thin solid; FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Create Number Sequence (Range)</H2>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(number-sequence <VAR class=d style="COLOR: rgb(39,68,88)">n</VAR> <VAR class=d style="COLOR: rgb(39,68,88)">m</VAR> <VAR class=d style="COLOR: rgb(39,68,88)">step</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8594; returns a list of a range of numbers, from<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR class=d style="COLOR: rgb(39,68,88)">n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR class=d style="COLOR: rgb(39,68,88)">m</VAR>, in increment of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR class=d style="COLOR: rgb(39,68,88)">m</VAR>.</P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">creating a range of numbers
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">number-sequence</SPAN> 5) <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">(5)
</SPAN>
(<SPAN class=keyword style="COLOR: rgb(160,32,240)">number-sequence</SPAN> 2 9) <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">(2 3 4 5 6 7 8 9)
</SPAN>
(<SPAN class=keyword style="COLOR: rgb(160,32,240)">number-sequence</SPAN> 0 9 3) <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">(0 3 6 9)</SPAN></PRE>
<H2 style="BORDER-TOP: gray thin solid; FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Length</H2>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(length <VAR class=d style="COLOR: rgb(39,68,88)">list</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8594; return number of elements.</P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">(<SPAN class=keyword style="COLOR: rgb(160,32,240)">length</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">list</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"a"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"b"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"c"</SPAN>) ) <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">3</SPAN></PRE>
<H2 style="BORDER-TOP: gray thin solid; FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Get Elements of a List</H2>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">List index count starts from 0.</P>
<TABLE class=nrm style="WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-COLLAPSE: collapse; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium sans-serif; MARGIN-LEFT: 0px; MARGIN-TOP: 0px; LETTER-SPACING: normal; MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">
<CAPTION style="BORDER-TOP: black thin solid; BORDER-RIGHT: black thin solid; BORDER-BOTTOM: black thin solid; BORDER-LEFT: black thin solid; BACKGROUND-COLOR: rgb(225,225,225)">list element extraction functions</CAPTION>
<TBODY>
<TR>
<TH style="BORDER-TOP: rgb(128,128,128) thin solid; BORDER-RIGHT: rgb(128,128,128) thin solid; BORDER-BOTTOM: rgb(128,128,128) thin solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: rgb(128,128,128) thin solid; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(215,228,242)">Function</TH>
<TH style="BORDER-TOP: rgb(128,128,128) thin solid; BORDER-RIGHT: rgb(128,128,128) thin solid; BORDER-BOTTOM: rgb(128,128,128) thin solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: rgb(128,128,128) thin solid; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(215,228,242)">Purpose</TH></TR>
<TR>
<TD style="BORDER-TOP: rgb(128,128,128) thin solid; BORDER-RIGHT: rgb(128,128,128) thin solid; BORDER-BOTTOM: rgb(128,128,128) thin solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: rgb(128,128,128) thin solid; PADDING-RIGHT: 0px"><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(car <VAR class=d style="COLOR: rgb(39,68,88)">list</VAR>)</CODE></TD>
<TD style="BORDER-TOP: rgb(128,128,128) thin solid; BORDER-RIGHT: rgb(128,128,128) thin solid; BORDER-BOTTOM: rgb(128,128,128) thin solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: rgb(128,128,128) thin solid; PADDING-RIGHT: 0px">first element</TD></TR>
<TR>
<TD style="BORDER-TOP: rgb(128,128,128) thin solid; BORDER-RIGHT: rgb(128,128,128) thin solid; BORDER-BOTTOM: rgb(128,128,128) thin solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: rgb(128,128,128) thin solid; PADDING-RIGHT: 0px"><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(nth <VAR class=d style="COLOR: rgb(39,68,88)">n</VAR> <VAR class=d style="COLOR: rgb(39,68,88)">list</VAR>)</CODE></TD>
<TD style="BORDER-TOP: rgb(128,128,128) thin solid; BORDER-RIGHT: rgb(128,128,128) thin solid; BORDER-BOTTOM: rgb(128,128,128) thin solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: rgb(128,128,128) thin solid; PADDING-RIGHT: 0px"><VAR class=d style="COLOR: rgb(39,68,88)">n</VAR>th element</TD></TR>
<TR>
<TD style="BORDER-TOP: rgb(128,128,128) thin solid; BORDER-RIGHT: rgb(128,128,128) thin solid; BORDER-BOTTOM: rgb(128,128,128) thin solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: rgb(128,128,128) thin solid; PADDING-RIGHT: 0px"><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(car (last <VAR class=d style="COLOR: rgb(39,68,88)">list</VAR>))</CODE></TD>
<TD style="BORDER-TOP: rgb(128,128,128) thin solid; BORDER-RIGHT: rgb(128,128,128) thin solid; BORDER-BOTTOM: rgb(128,128,128) thin solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: rgb(128,128,128) thin solid; PADDING-RIGHT: 0px">last element</TD></TR></TBODY></TABLE><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">(<SPAN class=keyword style="COLOR: rgb(160,32,240)">car</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">list</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"a"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"b"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"c"</SPAN>) )   <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">"a"</SPAN></PRE><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">(<SPAN class=keyword style="COLOR: rgb(160,32,240)">nth</SPAN> 1 (<SPAN class=keyword style="COLOR: rgb(160,32,240)">list</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"a"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"b"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"c"</SPAN>) ) <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">"b"</SPAN></PRE><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">(<SPAN class=keyword style="COLOR: rgb(160,32,240)">car</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">last</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">list</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"a"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"b"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"c"</SPAN>)) )   <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">"c"</SPAN></PRE>
<TABLE class=nrm style="WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-COLLAPSE: collapse; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium sans-serif; MARGIN-LEFT: 0px; MARGIN-TOP: 0px; LETTER-SPACING: normal; MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">
<CAPTION style="BORDER-TOP: black thin solid; BORDER-RIGHT: black thin solid; BORDER-BOTTOM: black thin solid; BORDER-LEFT: black thin solid; BACKGROUND-COLOR: rgb(225,225,225)">sublist functions</CAPTION>
<TBODY>
<TR>
<TH style="BORDER-TOP: rgb(128,128,128) thin solid; BORDER-RIGHT: rgb(128,128,128) thin solid; BORDER-BOTTOM: rgb(128,128,128) thin solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: rgb(128,128,128) thin solid; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(215,228,242)">Function</TH>
<TH style="BORDER-TOP: rgb(128,128,128) thin solid; BORDER-RIGHT: rgb(128,128,128) thin solid; BORDER-BOTTOM: rgb(128,128,128) thin solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: rgb(128,128,128) thin solid; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(215,228,242)">Purpose</TH></TR>
<TR>
<TD style="BORDER-TOP: rgb(128,128,128) thin solid; BORDER-RIGHT: rgb(128,128,128) thin solid; BORDER-BOTTOM: rgb(128,128,128) thin solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: rgb(128,128,128) thin solid; PADDING-RIGHT: 0px"><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(cdr <VAR class=d style="COLOR: rgb(39,68,88)">list</VAR>)</CODE></TD>
<TD style="BORDER-TOP: rgb(128,128,128) thin solid; BORDER-RIGHT: rgb(128,128,128) thin solid; BORDER-BOTTOM: rgb(128,128,128) thin solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: rgb(128,128,128) thin solid; PADDING-RIGHT: 0px">2nd to last elements.</TD></TR>
<TR>
<TD style="BORDER-TOP: rgb(128,128,128) thin solid; BORDER-RIGHT: rgb(128,128,128) thin solid; BORDER-BOTTOM: rgb(128,128,128) thin solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: rgb(128,128,128) thin solid; PADDING-RIGHT: 0px"><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(nthcdr <VAR class=d style="COLOR: rgb(39,68,88)">n</VAR> <VAR class=d style="COLOR: rgb(39,68,88)">list</VAR>)</CODE></TD>
<TD style="BORDER-TOP: rgb(128,128,128) thin solid; BORDER-RIGHT: rgb(128,128,128) thin solid; BORDER-BOTTOM: rgb(128,128,128) thin solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: rgb(128,128,128) thin solid; PADDING-RIGHT: 0px"><VAR class=d style="COLOR: rgb(39,68,88)">n</VAR>th to last elements.</TD></TR>
<TR>
<TD style="BORDER-TOP: rgb(128,128,128) thin solid; BORDER-RIGHT: rgb(128,128,128) thin solid; BORDER-BOTTOM: rgb(128,128,128) thin solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: rgb(128,128,128) thin solid; PADDING-RIGHT: 0px"><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(butlast <VAR class=d style="COLOR: rgb(39,68,88)">list</VAR> <VAR class=d style="COLOR: rgb(39,68,88)">n</VAR>)</CODE></TD>
<TD style="BORDER-TOP: rgb(128,128,128) thin solid; BORDER-RIGHT: rgb(128,128,128) thin solid; BORDER-BOTTOM: rgb(128,128,128) thin solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: rgb(128,128,128) thin solid; PADDING-RIGHT: 0px">without the last<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR class=d style="COLOR: rgb(39,68,88)">n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>elements.</TD></TR></TBODY></TABLE><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">(<SPAN class=keyword style="COLOR: rgb(160,32,240)">cdr</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">list</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"a"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"b"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"c"</SPAN>) )   <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">("b" "c")</SPAN></PRE><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">(butlast (<SPAN class=keyword style="COLOR: rgb(160,32,240)">list</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"a"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"b"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"c"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"d"</SPAN>) )   <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">("a" "b" "c")
</SPAN>(butlast (<SPAN class=keyword style="COLOR: rgb(160,32,240)">list</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"a"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"b"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"c"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"d"</SPAN>) 2)   <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">("a" "b")</SPAN></PRE>
<H2 style="BORDER-TOP: gray thin solid; FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Prepend, Append</H2>
<TABLE class=nrm style="WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-COLLAPSE: collapse; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium sans-serif; MARGIN-LEFT: 0px; MARGIN-TOP: 0px; LETTER-SPACING: normal; MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">
<CAPTION style="BORDER-TOP: black thin solid; BORDER-RIGHT: black thin solid; BORDER-BOTTOM: black thin solid; BORDER-LEFT: black thin solid; BACKGROUND-COLOR: rgb(225,225,225)">Basic List Functions</CAPTION>
<TBODY>
<TR>
<TH style="BORDER-TOP: rgb(128,128,128) thin solid; BORDER-RIGHT: rgb(128,128,128) thin solid; BORDER-BOTTOM: rgb(128,128,128) thin solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: rgb(128,128,128) thin solid; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(215,228,242)">Function</TH>
<TH style="BORDER-TOP: rgb(128,128,128) thin solid; BORDER-RIGHT: rgb(128,128,128) thin solid; BORDER-BOTTOM: rgb(128,128,128) thin solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: rgb(128,128,128) thin solid; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(215,228,242)">Purpose</TH></TR>
<TR>
<TD style="BORDER-TOP: rgb(128,128,128) thin solid; BORDER-RIGHT: rgb(128,128,128) thin solid; BORDER-BOTTOM: rgb(128,128,128) thin solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: rgb(128,128,128) thin solid; PADDING-RIGHT: 0px"><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(cons <VAR class=d style="COLOR: rgb(39,68,88)">x</VAR> <VAR class=d style="COLOR: rgb(39,68,88)">list</VAR>)</CODE></TD>
<TD style="BORDER-TOP: rgb(128,128,128) thin solid; BORDER-RIGHT: rgb(128,128,128) thin solid; BORDER-BOTTOM: rgb(128,128,128) thin solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: rgb(128,128,128) thin solid; PADDING-RIGHT: 0px">Return a new list, with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR class=d style="COLOR: rgb(39,68,88)">x</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>added to front. (prepend)</TD></TR>
<TR>
<TD style="BORDER-TOP: rgb(128,128,128) thin solid; BORDER-RIGHT: rgb(128,128,128) thin solid; BORDER-BOTTOM: rgb(128,128,128) thin solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: rgb(128,128,128) thin solid; PADDING-RIGHT: 0px"><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(append <VAR class=d style="COLOR: rgb(39,68,88)">list1</VAR> <VAR class=d style="COLOR: rgb(39,68,88)">list2</VAR>)</CODE></TD>
<TD style="BORDER-TOP: rgb(128,128,128) thin solid; BORDER-RIGHT: rgb(128,128,128) thin solid; BORDER-BOTTOM: rgb(128,128,128) thin solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: rgb(128,128,128) thin solid; PADDING-RIGHT: 0px">Return a new list, of the two lists</TD></TR></TBODY></TABLE><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">(<SPAN class=keyword style="COLOR: rgb(160,32,240)">cons</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"a"</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">list</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"c"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"d"</SPAN>) ) <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">("a" "c" "d")
</SPAN>
(<SPAN class=keyword style="COLOR: rgb(160,32,240)">cons</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">list</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"a"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"b"</SPAN>) (<SPAN class=keyword style="COLOR: rgb(160,32,240)">list</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"c"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"d"</SPAN>) ) <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">(("a" "b") "c" "d")</SPAN></PRE><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">(<SPAN class=keyword style="COLOR: rgb(160,32,240)">append</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">list</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"a"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"b"</SPAN>) (<SPAN class=keyword style="COLOR: rgb(160,32,240)">list</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"c"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"d"</SPAN>) ) <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">("a" "b" "c" "d")</SPAN></PRE>
<H2 style="BORDER-TOP: gray thin solid; FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Modify List Variable</H2>
<TABLE class=nrm style="WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-COLLAPSE: collapse; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium sans-serif; MARGIN-LEFT: 0px; MARGIN-TOP: 0px; LETTER-SPACING: normal; MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">
<CAPTION style="BORDER-TOP: black thin solid; BORDER-RIGHT: black thin solid; BORDER-BOTTOM: black thin solid; BORDER-LEFT: black thin solid; BACKGROUND-COLOR: rgb(225,225,225)">Functions that modify a list variable</CAPTION>
<TBODY>
<TR>
<TH style="BORDER-TOP: rgb(128,128,128) thin solid; BORDER-RIGHT: rgb(128,128,128) thin solid; BORDER-BOTTOM: rgb(128,128,128) thin solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: rgb(128,128,128) thin solid; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(215,228,242)">Function</TH>
<TH style="BORDER-TOP: rgb(128,128,128) thin solid; BORDER-RIGHT: rgb(128,128,128) thin solid; BORDER-BOTTOM: rgb(128,128,128) thin solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: rgb(128,128,128) thin solid; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(215,228,242)">Purpose</TH></TR>
<TR>
<TD style="BORDER-TOP: rgb(128,128,128) thin solid; BORDER-RIGHT: rgb(128,128,128) thin solid; BORDER-BOTTOM: rgb(128,128,128) thin solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: rgb(128,128,128) thin solid; PADDING-RIGHT: 0px"><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(push <VAR class=d style="COLOR: rgb(39,68,88)">list</VAR>)</CODE></TD>
<TD style="BORDER-TOP: rgb(128,128,128) thin solid; BORDER-RIGHT: rgb(128,128,128) thin solid; BORDER-BOTTOM: rgb(128,128,128) thin solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: rgb(128,128,128) thin solid; PADDING-RIGHT: 0px">Add a element to the front variable. Returns the new list.</TD></TR>
<TR>
<TD style="BORDER-TOP: rgb(128,128,128) thin solid; BORDER-RIGHT: rgb(128,128,128) thin solid; BORDER-BOTTOM: rgb(128,128,128) thin solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: rgb(128,128,128) thin solid; PADDING-RIGHT: 0px"><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(pop <VAR class=d style="COLOR: rgb(39,68,88)">list</VAR>)</CODE></TD>
<TD style="BORDER-TOP: rgb(128,128,128) thin solid; BORDER-RIGHT: rgb(128,128,128) thin solid; BORDER-BOTTOM: rgb(128,128,128) thin solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: rgb(128,128,128) thin solid; PADDING-RIGHT: 0px">Remove first element from the variable. Returns the removed element.</TD></TR>
<TR>
<TD style="BORDER-TOP: rgb(128,128,128) thin solid; BORDER-RIGHT: rgb(128,128,128) thin solid; BORDER-BOTTOM: rgb(128,128,128) thin solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: rgb(128,128,128) thin solid; PADDING-RIGHT: 0px"><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(nbutlast <VAR class=d style="COLOR: rgb(39,68,88)">list</VAR> <VAR class=d style="COLOR: rgb(39,68,88)">n</VAR>)</CODE></TD>
<TD style="BORDER-TOP: rgb(128,128,128) thin solid; BORDER-RIGHT: rgb(128,128,128) thin solid; BORDER-BOTTOM: rgb(128,128,128) thin solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: rgb(128,128,128) thin solid; PADDING-RIGHT: 0px">Remove last<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR class=d style="COLOR: rgb(39,68,88)">n</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>elements from the variable. Returns the new value of the variable.</TD></TR>
<TR>
<TD style="BORDER-TOP: rgb(128,128,128) thin solid; BORDER-RIGHT: rgb(128,128,128) thin solid; BORDER-BOTTOM: rgb(128,128,128) thin solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: rgb(128,128,128) thin solid; PADDING-RIGHT: 0px"><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(setcar <VAR class=d style="COLOR: rgb(39,68,88)">list</VAR> <VAR class=d style="COLOR: rgb(39,68,88)">x</VAR>)</CODE></TD>
<TD style="BORDER-TOP: rgb(128,128,128) thin solid; BORDER-RIGHT: rgb(128,128,128) thin solid; BORDER-BOTTOM: rgb(128,128,128) thin solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: rgb(128,128,128) thin solid; PADDING-RIGHT: 0px">replaces the first element in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR class=d style="COLOR: rgb(39,68,88)">list</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR class=d style="COLOR: rgb(39,68,88)">x</VAR>. Returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR class=d style="COLOR: rgb(39,68,88)">x</VAR>.</TD></TR>
<TR>
<TD style="BORDER-TOP: rgb(128,128,128) thin solid; BORDER-RIGHT: rgb(128,128,128) thin solid; BORDER-BOTTOM: rgb(128,128,128) thin solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: rgb(128,128,128) thin solid; PADDING-RIGHT: 0px"><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(setcdr <VAR class=d style="COLOR: rgb(39,68,88)">list</VAR> <VAR class=d style="COLOR: rgb(39,68,88)">x</VAR>)</CODE></TD>
<TD style="BORDER-TOP: rgb(128,128,128) thin solid; BORDER-RIGHT: rgb(128,128,128) thin solid; BORDER-BOTTOM: rgb(128,128,128) thin solid; PADDING-TOP: 0px; PADDING-LEFT: 0px; BORDER-LEFT: rgb(128,128,128) thin solid; PADDING-RIGHT: 0px">replaces the rest of elements in<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR class=d style="COLOR: rgb(39,68,88)">list</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR class=d style="COLOR: rgb(39,68,88)">x</VAR>. Returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR class=d style="COLOR: rgb(39,68,88)">x</VAR>.</TD></TR></TBODY></TABLE><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">(<SPAN class=keyword style="COLOR: rgb(160,32,240)">let</SPAN> ((x '(1)))
  (<SPAN class=keyword style="COLOR: rgb(160,32,240)">push</SPAN> 2 x)
  (<SPAN class=keyword style="COLOR: rgb(160,32,240)">equal</SPAN> x '(2 1)) <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">true
</SPAN>  )</PRE><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">(<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> mylist '(<SPAN class=string style="COLOR: rgb(139,34,82)">"a"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"b"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"c"</SPAN>))
(<SPAN class=keyword style="COLOR: rgb(160,32,240)">pop</SPAN> mylist)   <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">"a"
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">print</SPAN> mylist) <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">("b" "c")</SPAN></PRE>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">The weird names {car, cdr, cons} are like that for historical reasons.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><SPAN class=ref style="FONT-FAMILY: monospace; BACKGROUND-COLOR: rgb(232,255,255)"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs_manual/elisp/Lists.html">(info "(elisp) Lists")</A></SPAN></P>
<H2 style="BORDER-TOP: gray thin solid; FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Map: mapcar, mapc</H2>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Here's a typical way of going thru a list. It is done with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">mapcar</CODE>.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(mapcar <VAR class=d style="COLOR: rgb(39,68,88)">function</VAR> <VAR class=d style="COLOR: rgb(39,68,88)">sequence</VAR>)</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8594; Apply<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR class=d style="COLOR: rgb(39,68,88)">function</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>to each element of<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR class=d style="COLOR: rgb(39,68,88)">sequence</VAR>, and make a list of the results.<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR class=d style="COLOR: rgb(39,68,88)">sequence</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>may be a list, a vector, a bool-vector, or a string.</P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">add one to each list member
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">mapcar</SPAN> '1+ (<SPAN class=keyword style="COLOR: rgb(160,32,240)">list</SPAN> 1 2 3 4)) <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">(2 3 4 5)</SPAN></PRE><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">take the 1st element of each
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">mapcar</SPAN> '<SPAN class=keyword style="COLOR: rgb(160,32,240)">car</SPAN> '((1 2) (3 4) (5 6))) <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">(1 3 5)</SPAN></PRE>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Examples use user-defined function &#8220;lambda&#8221; created inline:</P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">add one to each list member
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">mapcar</SPAN>
 (<SPAN class=keyword style="COLOR: rgb(160,32,240)">lambda</SPAN> (x) (+ x 1))
 (<SPAN class=keyword style="COLOR: rgb(160,32,240)">list</SPAN> 1 2 3 4)
) <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">(2 3 4 5)</SPAN></PRE><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">take the 2nd element of each
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">mapcar</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">lambda</SPAN> (x) (<SPAN class=keyword style="COLOR: rgb(160,32,240)">nth</SPAN> 1 x))
        '((1 2) (3 4) (5 6))) <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">(2 4 6)</SPAN></PRE>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">lambda</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>above means function. It let you define a function in the middle of your code. The form is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(lambda (<VAR class=d style="COLOR: rgb(39,68,88)">args</VAR>) <VAR class=d style="COLOR: rgb(39,68,88)">body</VAR>)</CODE>. For example,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(lambda (x y) (+ x y))</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is a function that takes two arguments, x and y, and returns their sum.</P>
<H2 style="BORDER-TOP: gray thin solid; FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Loop thru List</H2>
<H4 style="FONT-SIZE: medium; FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">mapc</H4>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">mapc</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8594; like<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">mapcar</CODE>, but returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR class=elisp style="WHITE-SPACE: nowrap; COLOR: green">nil</VAR>.</P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">apply a file processing function to a list of files
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">mapc</SPAN> 'my-update-html-footer
      (<SPAN class=keyword style="COLOR: rgb(160,32,240)">list</SPAN>
       <SPAN class=string style="COLOR: rgb(139,34,82)">"~/web/file1.html"</SPAN>
       <SPAN class=string style="COLOR: rgb(139,34,82)">"~/web/file2.html"</SPAN>
       <SPAN class=string style="COLOR: rgb(139,34,82)">"~/web/file3.html"</SPAN>
       ))</PRE>
<H4 style="FONT-SIZE: medium; FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">dotimes</H4>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">dotimes</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is useful when you want to go thru a list with a index.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">dotimes (<VAR class=d style="COLOR: rgb(39,68,88)">var</VAR> <VAR class=d style="COLOR: rgb(39,68,88)">n</VAR>) <VAR class=d style="COLOR: rgb(39,68,88)">body</VAR></CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8594; run<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR class=d style="COLOR: rgb(39,68,88)">body</VAR>, with<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR class=d style="COLOR: rgb(39,68,88)">var</VAR><SPAN class=Apple-converted-space>&nbsp;</SPAN>set to 0 to n-1.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">dotimes (<VAR class=d style="COLOR: rgb(39,68,88)">var</VAR> <VAR class=d style="COLOR: rgb(39,68,88)">n</VAR> <VAR class=d style="COLOR: rgb(39,68,88)">result</VAR>) <VAR class=d style="COLOR: rgb(39,68,88)">body</VAR></CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#8594; returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><VAR class=d style="COLOR: rgb(39,68,88)">result</VAR>.</P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">(<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> mylist (<SPAN class=keyword style="COLOR: rgb(160,32,240)">make-list</SPAN> 8 0) ) <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">creates '(0 0 0 0 0 0 0 0)
</SPAN>
(<SPAN class=function-name style="COLOR: rgb(0,0,255)">dotimes</SPAN> (i (<SPAN class=keyword style="COLOR: rgb(160,32,240)">length</SPAN> mylist))
  (<SPAN class=function-name style="COLOR: rgb(0,0,255)">insert</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">number-to-string</SPAN> i))) <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">inserts "01234567", returns nil</SPAN></PRE>
<H4 style="FONT-SIZE: medium; FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">using while</H4>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Another common form to loop thru a list is using the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">while</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>function. In each iteration,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">pop</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used to reduce the list.</P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">(<SPAN class=keyword style="COLOR: rgb(160,32,240)">let</SPAN> ((myList '(a b c)))
  (<SPAN class=keyword style="COLOR: rgb(160,32,240)">while</SPAN> myList
    (<SPAN class=keyword style="COLOR: rgb(160,32,240)">message</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"%s"</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">pop</SPAN> myList))
    (<SPAN class=keyword style="COLOR: rgb(160,32,240)">sleep-for</SPAN> 1)))</PRE>
<H2 style="BORDER-TOP: gray thin solid; FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">List vs Vector</H2><PRE style="FONT-VARIANT: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; FONT-WEIGHT: normal; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">     _____________________________________________
    |                                             |
    |          Sequence                           |
    |  ______   ________________________________  |
    | |      | |                                | |
    | | List | |             Array              | |
    | |      | |    ________       ________     | |
    | |______| |   |        |     |        |    | |
    |          |   | Vector |     | String |    | |
    |          |   |________|     |________|    | |
    |          |  ____________   _____________  | |
    |          | |            | |             | | |
    |          | | Char-table | | Bool-vector | | |
    |          | |____________| |_____________| | |
    |          |________________________________| |
    |_____________________________________________|</PRE>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Lisp's<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">list</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>&#65286;<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">vector</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>both are subtypes of the &#8220;sequences&#8221; datatype. Many functions, such as {<CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">elt</CODE>,<CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">mapcar</CODE>}, work on any sequence type. Here's their primary differences:</P>
<UL style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">
<LI style="FONT-FAMILY: sans-serif">Vector: Access time to any element is constant.</LI>
<LI style="FONT-FAMILY: sans-serif">List: Access time to a element is proportional to the distance of the element's position in the list.</LI></UL>
<UL style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">
<LI style="FONT-FAMILY: sans-serif">List's length can grow by prepending with<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">cons</CODE>, and can have the first element dropped by<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">cdr</CODE>. These operations have constant time.</LI>
<LI style="FONT-FAMILY: sans-serif">Vector's length cannot change. (if you create a new copy with extra item, the time is proportional to the vector's length)</LI></UL>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">&#12308;&#10148;&nbsp;<A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_vector.html">Emacs Lisp: Vector</A>&#12309;</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Lisp culture is to almost always use list. I recommend using vector as much as possible. Use list ONLY IF you need to constantly grow the list. Even for that case, i recommend using vector by starting with large length, using the function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">make-vector</CODE>. &#12308;&#10148;&nbsp;<A style="TEXT-DECORATION: none; box-shadow: 0px 1px" href="http://xahlee.info/comp/Guy_Steele_parallel_computing.html">Guy Steele on Parallel Programing: Get rid of cons!</A>&#12309;</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">You can nest list &#65286; vectors in any way. Example:</P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">mixed nested list/vector
</SPAN>
[ '(3 4) '(5 8) [4 2]]

(<SPAN class=keyword style="COLOR: rgb(160,32,240)">list</SPAN> [8 7] '(4 1))</PRE>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><SPAN class=ref style="FONT-FAMILY: monospace; BACKGROUND-COLOR: rgb(232,255,255)"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs_manual/elisp/Sequences-Arrays-Vectors.html">(info "(elisp) Sequences Arrays Vectors")</A></SPAN></P>
<H2 style="BORDER-TOP: gray thin solid; FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">List of Pairs: Association List &#65286; Hash Table</H2>
<H2 style="BORDER-TOP: gray thin solid; FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Association List (alist)</H2>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Another important datatype similar to list &#65286; vector is called Association List (aka alist). It is similar to<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="TEXT-DECORATION: none; box-shadow: 0px 1px" href="http://xahlee.info/perl-python/keyed_list.html">Python Dictionary</A>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="TEXT-DECORATION: none; box-shadow: 0px 1px" href="http://xahlee.info/ruby/ruby_keyed_list.html">Ruby Hash Table</A>. See:<SPAN class=Apple-converted-space>&nbsp;</SPAN><SPAN class=ref style="FONT-FAMILY: monospace; BACKGROUND-COLOR: rgb(232,255,255)"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs_manual/elisp/Association-Lists.html">(info "(elisp) Association Lists")</A></SPAN>.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">For a example of using alist, see:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_validate_matching_brackets.html">Emacs Lisp: Batch Script to Validate Matching Brackets</A>.</P>
<DIV class=rltd style="BORDER-TOP: silver thin solid; BORDER-RIGHT: silver thin solid; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: silver thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium sans-serif; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: silver thin solid; MARGIN-TOP: 0px; DISPLAY: table; LETTER-SPACING: normal; PADDING-RIGHT: 0px; MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; border-radius: 0.5rem">
<UL style="MARGIN: 0px">
<LI style="FONT-FAMILY: sans-serif"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_vector.html">Emacs Lisp: Vector</A></LI>
<LI style="FONT-FAMILY: sans-serif"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_examples.html">Emacs Lisp Examples</A></LI>
<LI style="FONT-FAMILY: sans-serif"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_filter_list.html">Emacs Lisp: Filter a List</A></LI>
<LI style="FONT-FAMILY: sans-serif"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_hash_table.html">Emacs Lisp: Hash Table</A></LI>
<LI style="FONT-FAMILY: sans-serif"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_symbol.html">Emacs Lisp Symbol (tutorial)</A></LI>
<LI style="FONT-FAMILY: sans-serif"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_check_defined.html">Emacs Lisp: Check If a {function, variable, feature} is Defined/Loaded</A></LI></UL></DIV>