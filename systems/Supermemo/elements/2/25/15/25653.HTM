<H1 style="FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Emacs Lisp Examples: Symbol Properties, Set Frame, Font, Fold, Shell Call</H1><SECTION class=buy-book style="BORDER-TOP: silver thin solid; BORDER-RIGHT: silver thin solid; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: silver thin solid; TEXT-TRANSFORM: none; FLOAT: right; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium sans-serif; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: silver thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(210,254,185); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; border-radius: 1rem">Buy<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html">Xah Emacs Tutorial</A>. Master emacs benefits for life.
</SECTION>
<DIV class=byline style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">
<ADDRESS class=author style="FONT-STYLE: normal; DISPLAY: inline"><A style="TEXT-DECORATION: none" href="mailto:xahlee@gmail.com" rel=author>Xah Lee</A></ADDRESS>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><TIME style="FONT-FAMILY: monospace; WHITE-SPACE: nowrap">2005-11-30</TIME>, &#8230;,<SPAN class=Apple-converted-space>&nbsp;</SPAN><TIME style="FONT-FAMILY: monospace; WHITE-SPACE: nowrap">2015-06-12</TIME></DIV>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">This page shows some short but advanced examples of elisp. For more basic elisp examples, goto:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_examples.html">Basic Elisp Examples</A>.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">This examples shows a simple use of<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">defadvice</CODE>.</P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">(defadvice kill-ring-save (before slick-copy activate compile)
  <SPAN class=string style="COLOR: rgb(139,34,82)">"When called interactively with no active region, copy the current line."</SPAN>
  (<SPAN class=function-name style="COLOR: rgb(0,0,255)">interactive</SPAN>
   (<SPAN class=keyword style="COLOR: rgb(160,32,240)">if</SPAN> <SPAN class=variable-name style="COLOR: rgb(159,81,45)">mark-active</SPAN>
       (<SPAN class=keyword style="COLOR: rgb(160,32,240)">list</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">region-beginning</SPAN>) (<SPAN class=function-name style="COLOR: rgb(0,0,255)">region-end</SPAN>))
     (<SPAN class=keyword style="COLOR: rgb(160,32,240)">progn</SPAN>
       (<SPAN class=keyword style="COLOR: rgb(160,32,240)">message</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"Current line is copied."</SPAN>)
       (<SPAN class=keyword style="COLOR: rgb(160,32,240)">list</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">line-beginning-position</SPAN>) (<SPAN class=function-name style="COLOR: rgb(0,0,255)">line-beginning-position</SPAN> 2)) ) ) ))</PRE><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">(defadvice kill-region (before slick-copy activate compile)
  <SPAN class=string style="COLOR: rgb(139,34,82)">"When called interactively with no active region, cut the current line."</SPAN>
  (<SPAN class=function-name style="COLOR: rgb(0,0,255)">interactive</SPAN>
   (<SPAN class=keyword style="COLOR: rgb(160,32,240)">if</SPAN> <SPAN class=variable-name style="COLOR: rgb(159,81,45)">mark-active</SPAN>
       (<SPAN class=keyword style="COLOR: rgb(160,32,240)">list</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">region-beginning</SPAN>) (<SPAN class=function-name style="COLOR: rgb(0,0,255)">region-end</SPAN>))
     (<SPAN class=keyword style="COLOR: rgb(160,32,240)">progn</SPAN>
       (<SPAN class=keyword style="COLOR: rgb(160,32,240)">list</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">line-beginning-position</SPAN>) (<SPAN class=function-name style="COLOR: rgb(0,0,255)">line-beginning-position</SPAN> 2)) ) ) ))</PRE>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><A class=sorc style="TEXT-DECORATION: none; box-shadow: 0px 1px" href="http://www.emacswiki.org/emacs/WholeLineOrRegion" data-accessed="2011-01-15">Source www.emacswiki.org</A></P>
<H2 style="BORDER-TOP: gray thin solid; FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Symbol Properties, Emacs Frame, Font</H2>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">The following example lets you press a key to change the font in the current window. When pressed again, it cycles among 2 fonts, one monospaced and one variable width.</P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">(<SPAN class=keyword style="COLOR: rgb(160,32,240)">defun</SPAN> cycle-font ()
  <SPAN class=string style="COLOR: rgb(139,34,82)">"Change font in current frame.
When called repeatedly, cycle thru a predefined set of fonts.
Warning: expected to work for Windows only. May not work in other OS."</SPAN>
  (<SPAN class=function-name style="COLOR: rgb(0,0,255)">interactive</SPAN>)
  (<SPAN class=keyword style="COLOR: rgb(160,32,240)">if</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">not</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">eq</SPAN> <SPAN class=variable-name style="COLOR: rgb(159,81,45)">last-command</SPAN> <SPAN class=variable-name style="COLOR: rgb(159,81,45)">this-command</SPAN>))
      (<SPAN class=keyword style="COLOR: rgb(160,32,240)">progn</SPAN>
        (set-frame-parameter <SPAN class=keyword style="COLOR: rgb(160,32,240)">nil</SPAN> 'font <SPAN class=string style="COLOR: rgb(139,34,82)">"Courier New-10"</SPAN>)
        (<SPAN class=keyword style="COLOR: rgb(160,32,240)">put</SPAN> <SPAN class=variable-name style="COLOR: rgb(159,81,45)">this-command</SPAN> 'state <SPAN class=string style="COLOR: rgb(139,34,82)">"2"</SPAN>))
    (<SPAN class=keyword style="COLOR: rgb(160,32,240)">cond</SPAN>
     ((<SPAN class=keyword style="COLOR: rgb(160,32,240)">string=</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">get</SPAN> <SPAN class=variable-name style="COLOR: rgb(159,81,45)">this-command</SPAN> 'state) <SPAN class=string style="COLOR: rgb(139,34,82)">"1"</SPAN>)
      (set-frame-parameter <SPAN class=keyword style="COLOR: rgb(160,32,240)">nil</SPAN> 'font <SPAN class=string style="COLOR: rgb(139,34,82)">"Courier New-10"</SPAN>) (<SPAN class=keyword style="COLOR: rgb(160,32,240)">put</SPAN> <SPAN class=variable-name style="COLOR: rgb(159,81,45)">this-command</SPAN> 'state <SPAN class=string style="COLOR: rgb(139,34,82)">"2"</SPAN>))
     ((<SPAN class=keyword style="COLOR: rgb(160,32,240)">string=</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">get</SPAN> <SPAN class=variable-name style="COLOR: rgb(159,81,45)">this-command</SPAN> 'state) <SPAN class=string style="COLOR: rgb(139,34,82)">"2"</SPAN> )
      (set-frame-parameter <SPAN class=keyword style="COLOR: rgb(160,32,240)">nil</SPAN> 'font <SPAN class=string style="COLOR: rgb(139,34,82)">"Lucida Sans Unicode-10"</SPAN>) (<SPAN class=keyword style="COLOR: rgb(160,32,240)">put</SPAN> <SPAN class=variable-name style="COLOR: rgb(159,81,45)">this-command</SPAN> 'state <SPAN class=string style="COLOR: rgb(139,34,82)">"1"</SPAN>))
     ) ) )</PRE>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Although the code is only 15 lines, but this example shows several advanced elisp use and emacs system. It shows you: &#9312; how to get and set properties to lisp symbols. &#9313; how to set font in a &#8220;frame&#8221;. &#9314; How to test if a command is called repeatedly.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">First, the code checks if it is being called repeatedly. If being called for the first time, then just set font to monospace. But if it is being called repeatedly, it will cycle between 2 fonts: one monospace (same width) and the other variable width.</P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">check if the command is being called repeatedly
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">if</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">not</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">eq</SPAN> <SPAN class=variable-name style="COLOR: rgb(159,81,45)">last-command</SPAN> <SPAN class=variable-name style="COLOR: rgb(159,81,45)">this-command</SPAN>))
&#8230;
)</PRE>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">In the above, the &#8220;this-command&#8221; and &#8220;last-command&#8221; are built-in variables. They store the command currently called or last called.</P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">(set-frame-parameter <SPAN class=keyword style="COLOR: rgb(160,32,240)">nil</SPAN> 'font <SPAN class=string style="COLOR: rgb(139,34,82)">"Courier New-10"</SPAN>) <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">set a font in current frame</SPAN></PRE>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">In the above,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">set-frame-parameter</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>is used to set a font in a frame. What we call a &#8220;window&#8221; is called a &#8220;frame&#8221; by emacs (and what we call a &#8220;pane&#8221; in a split window is called a &#8220;window&#8221; by emacs.).</P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">(<SPAN class=keyword style="COLOR: rgb(160,32,240)">get</SPAN> <SPAN class=variable-name style="COLOR: rgb(159,81,45)">this-command</SPAN> 'state) <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">get the value of a lisp symbol's property
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">put</SPAN> <SPAN class=variable-name style="COLOR: rgb(159,81,45)">this-command</SPAN> 'state <SPAN class=string style="COLOR: rgb(139,34,82)">"2"</SPAN>) <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">set the value of a lisp symbol's property</SPAN></PRE>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">In the above, it gets and sets lisp symbol's property. A lisp &#8220;symbol&#8221; is similar to a variable/function name in common languages. It stores a value. However, a lisp symbol can also hold other special values, called &#8220;properties&#8221;. You can almost think of it as a &#8220;object&#8221; of object oriented programing.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">In the line<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(put this-command 'state "2")</CODE>, the &#8220;this-command&#8221; evaluates to the symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">cycle-font</CODE>, so it becomes this:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(put 'cycle-font 'state "2")</CODE>, and that means set the value &#8220;2&#8221; to the &#8220;state&#8221; property of the symbol<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">cycle-font</CODE>.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">We are using a property to store the current state of the cycle point. The code checks the value of the &#8220;state&#8221; property to know what state it is in.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Symbols can have any number of properties, and each property can have any name, and each property's value can be almost any lisp datatype.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Lisp's symbol property is heavily used in elisp. For example, syntax coloring info are stored as property of strings, font faces use symbol property to store their definition such as color, size, font family.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><TIME style="FONT-FAMILY: monospace; WHITE-SPACE: nowrap">2010-04-09</TIME><SPAN class=Apple-converted-space>&nbsp;</SPAN>PS: for a much better cycle-font command, see:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/emacs_switching_fonts.html">How to Quickly Switch Fonts in Emacs</A>.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><SPAN class=ref style="FONT-FAMILY: monospace; BACKGROUND-COLOR: rgb(232,255,255)"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs_manual/elisp/Symbols.html">(info "(elisp) Symbols")</A></SPAN></P>
<H2 style="BORDER-TOP: gray thin solid; FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Fold, Reduce</H2>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">The following example shows a basic way to define the<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="TEXT-DECORATION: none; COLOR: rgb(0,85,0); box-shadow: 0px 1px" href="http://en.wikipedia.org/wiki/Fold_(higher-order_function)">Fold</A><SPAN class=Apple-converted-space>&nbsp;</SPAN>(aka &#8220;reduce&#8221;) function that's commonly found in functional programing languages. For a example documentation of Fold in Mathematica, see:<SPAN class=ref style="FONT-FAMILY: monospace; BACKGROUND-COLOR: rgb(232,255,255)"><A style="TEXT-DECORATION: none; box-shadow: 0px 1px" href="http://reference.wolfram.com/mathematica/ref/Fold.html">Mathematica: Fold</A></SPAN></P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">(<SPAN class=keyword style="COLOR: rgb(160,32,240)">defun</SPAN> fold (f x <SPAN class=keyword style="COLOR: rgb(160,32,240)">list</SPAN>)
  <SPAN class=string style="COLOR: rgb(139,34,82)">"Recursively applies (F i j) to LIST starting with X.
For example, (fold F X '(1 2 3)) computes (F (F (F X 1) 2) 3)."</SPAN>
 (<SPAN class=keyword style="COLOR: rgb(160,32,240)">let</SPAN> ((li <SPAN class=keyword style="COLOR: rgb(160,32,240)">list</SPAN>) (x2 x))
   (<SPAN class=keyword style="COLOR: rgb(160,32,240)">while</SPAN> li
     (<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> x2 (<SPAN class=keyword style="COLOR: rgb(160,32,240)">funcall</SPAN> f x2 (<SPAN class=keyword style="COLOR: rgb(160,32,240)">pop</SPAN> li)))
   )
   x2
  )
)</PRE>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Here's a example of usage:</P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">(<SPAN class=keyword style="COLOR: rgb(160,32,240)">defun</SPAN> sum2 (x y) (+ x y)) <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">add 2 numbers
</SPAN>
(fold 'sum2 1 '(2 3)) <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">returns 6</SPAN></PRE>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">In the following, we use fold to define replace-string-pairs, which does string replacement by a given list of find-replace pairs.</P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">(<SPAN class=keyword style="COLOR: rgb(160,32,240)">defun</SPAN> replace-string-pairs (str pairs)
  <SPAN class=string style="COLOR: rgb(139,34,82)">"replace the string STR repeatedy by the list PAIRS.
Example:
 (replace-string-pairs \"abcd\" '( (\"a\" \"1\") (\"b\" \"2\") (\"c\" \"3\")) )
 &#8658;  123d"</SPAN>
  (fold
   (<SPAN class=keyword style="COLOR: rgb(160,32,240)">lambda</SPAN>
     (x y) <SPAN class=string style="COLOR: rgb(139,34,82)">""</SPAN>
     (<SPAN class=function-name style="COLOR: rgb(0,0,255)">replace-regexp-in-string</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">nth</SPAN> 0 y) (<SPAN class=keyword style="COLOR: rgb(160,32,240)">nth</SPAN> 1 y) x)
   )
    str pairs
  )
)</PRE>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Note: this is just a toy example, not with practical considerations. Emacs lisp compiler does not optimize linear recursion (i.e.<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="TEXT-DECORATION: none; box-shadow: 0px 1px" href="http://xahlee.info/UnixResource_dir/writ/tailrecursion.html">Tail Recursion</A>). So the above is comparatively slow and resource hogging, also no error handling. In the Common Lisp package<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(require 'cl)</CODE>, there's the<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">reduce</CODE>function that is should be more practical.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">For a practical elisp function that does multiple replace pairs, see:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_replace_string_region.html">Emacs Lisp: Multi-Pair String Replacement Function</A>.</P>
<H2 style="BORDER-TOP: gray thin solid; FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Get Image Width Height</H2>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">moved to<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_image_tag.html">Emacs Lisp: HTML image-link Command</A></P>
<H2 style="BORDER-TOP: gray thin solid; FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Open File in OS</H2>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html">Emacs Lisp: Open File in External App</A></P>
<H2 style="BORDER-TOP: gray thin solid; FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Parsing Nested Text</H2>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">The following example is the solution to this challenge:</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Define a function f, such that<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(f "simple sexp")</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the argument as a lisp's list. Example:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(f "(a (b) c)")</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">(a (b) c)</CODE>.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">This problem is a simple example of a parser. The program reads a string that represents a tree, and turn this string into a actual tree structure.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">The following code is given by<SPAN class=Apple-converted-space>&nbsp;</SPAN><A class=sorc style="TEXT-DECORATION: none; box-shadow: 0px 1px" href="http://www.forcix.cx/" data-accessed="2012-02-01">Jorgen Sch&#228;fer</A>, 2006. If i recall correctly, it's written in less than 10 minutes.</P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">(<SPAN class=keyword style="COLOR: rgb(160,32,240)">defun</SPAN> parse-string (s)
  (<SPAN class=function-name style="COLOR: rgb(0,0,255)">with-temp-buffer</SPAN>
    (<SPAN class=function-name style="COLOR: rgb(0,0,255)">insert</SPAN> s)
    (<SPAN class=function-name style="COLOR: rgb(0,0,255)">goto-char</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">point-min</SPAN>))
    (parse)))

(<SPAN class=keyword style="COLOR: rgb(160,32,240)">defun</SPAN> parse ()
  (<SPAN class=keyword style="COLOR: rgb(160,32,240)">cond</SPAN>
   ((<SPAN class=function-name style="COLOR: rgb(0,0,255)">looking-at</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"\\s-*(\\s-*"</SPAN>)
    (<SPAN class=function-name style="COLOR: rgb(0,0,255)">goto-char</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">match-end</SPAN> 0))
    (<SPAN class=keyword style="COLOR: rgb(160,32,240)">let</SPAN> ((exprs <SPAN class=keyword style="COLOR: rgb(160,32,240)">nil</SPAN>)
          (this <SPAN class=keyword style="COLOR: rgb(160,32,240)">nil</SPAN>))
      (<SPAN class=keyword style="COLOR: rgb(160,32,240)">while</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">and</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">not</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">looking-at</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"\\s-*)\\s-*"</SPAN>))
                  (<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> this (parse)))
        (<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> exprs (<SPAN class=keyword style="COLOR: rgb(160,32,240)">cons</SPAN> this exprs)))
      (<SPAN class=function-name style="COLOR: rgb(0,0,255)">goto-char</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">match-end</SPAN> 0))
      (<SPAN class=keyword style="COLOR: rgb(160,32,240)">apply</SPAN> '<SPAN class=keyword style="COLOR: rgb(160,32,240)">list</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">reverse</SPAN> exprs))))
   ((<SPAN class=function-name style="COLOR: rgb(0,0,255)">looking-at</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"\\s-*\\([a-z]+\\)\\s-*"</SPAN>)
    (<SPAN class=function-name style="COLOR: rgb(0,0,255)">goto-char</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">match-end</SPAN> 0))
    (intern (<SPAN class=function-name style="COLOR: rgb(0,0,255)">match-string</SPAN> 1)))
   (else
    (<SPAN class=function-name style="COLOR: rgb(0,0,255)">error</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"Syntax error"</SPAN>))))

<SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">sample usage
</SPAN>(parse-string <SPAN class=string style="COLOR: rgb(139,34,82)">"(a (b (h h)) (c d))"</SPAN>)</PRE>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Thanks to Hauke Rehfeld for a improvment of &#8220;fold&#8221;.