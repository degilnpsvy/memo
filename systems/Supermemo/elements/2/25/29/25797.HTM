include/linux/typecheck.h 
<P></P>
<P>#ifndef TYPECHECK_H_INCLUDED<BR>#define TYPECHECK_H_INCLUDED</P>
<P></P>
<P><FONT class=extract>/*<BR>&nbsp;* Check at compile time that something is of a particular type.<BR>&nbsp;* Always evaluates to 1 so you may use it easily in comparisons.<BR>&nbsp;*/<BR>#define typecheck(type,x) \<BR>({&nbsp;type __dummy; \<BR>&nbsp;typeof(x) __dummy2; \<BR>&nbsp;(void)(&amp;__dummy == &amp;__dummy2); \<BR>&nbsp;1; \<BR>})</FONT></P>
<P><FONT class=extract>/*<BR>&nbsp;* Check at compile time that 'function' is a certain type, or is a pointer<BR>&nbsp;* to that type (needs to use typedef for the function type.)<BR>&nbsp;*/<BR>#define typecheck_fn(type,function) \<BR>({&nbsp;typeof(type) __tmp = function; \<BR>&nbsp;(void)__tmp; \<BR>})</FONT></P>
<P>#endif&nbsp;&nbsp;/* TYPECHECK_H_INCLUDED */