<H1 style="FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Emacs Lisp: How to Write Keyword Completion Command</H1><SECTION class=buy-book style="BORDER-TOP: silver thin solid; BORDER-RIGHT: silver thin solid; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: silver thin solid; TEXT-TRANSFORM: none; FLOAT: right; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium sans-serif; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: silver thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(210,254,185); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; border-radius: 1rem">Buy<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html">Xah Emacs Tutorial</A>. Master emacs benefits for life.
</SECTION>
<DIV class=byline style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">
<ADDRESS class=author style="FONT-STYLE: normal; DISPLAY: inline"><A style="TEXT-DECORATION: none" href="mailto:xahlee@gmail.com" rel=author>Xah Lee</A></ADDRESS>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><TIME style="FONT-FAMILY: monospace; WHITE-SPACE: nowrap">2009-03-06</TIME>, &#8230;,<SPAN class=Apple-converted-space>&nbsp;</SPAN><TIME style="FONT-FAMILY: monospace; WHITE-SPACE: nowrap">2015-09-03</TIME></DIV>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">This page shows you how to implement keyword completion in emacs.</P>
<H2 style="BORDER-TOP: gray thin solid; FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Problem</H2><FIGURE style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium sans-serif; MARGIN-LEFT: 0px; MARGIN-TOP: 0px; LETTER-SPACING: normal; MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><IMG style="MAX-WIDTH: 100%; HEIGHT: auto; MARGIN: 0px; box-shadow: silver 3px 3px 4px 3px" alt="xlsl-keyword completion" src="http://ergoemacs.org/emacs/i/xlsl-keyword_completion.png" width=555 height=482><FIGCAPTION style="MARGIN: 0px 0px 0px 1px">Keyword completion in emacs.</FIGCAPTION></FIGURE>
<H2 style="BORDER-TOP: gray thin solid; FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Solution</H2>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Suppose your language xyz has the following list of keywords.</P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">this is your lang's keywords
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> xyz-kwdList
      '(<SPAN class=string style="COLOR: rgb(139,34,82)">"touch"</SPAN>
       <SPAN class=string style="COLOR: rgb(139,34,82)">"touch_start"</SPAN>
       <SPAN class=string style="COLOR: rgb(139,34,82)">"touch_end"</SPAN>
       <SPAN class=string style="COLOR: rgb(139,34,82)">"for"</SPAN>
       <SPAN class=string style="COLOR: rgb(139,34,82)">"foreach"</SPAN>
       <SPAN class=string style="COLOR: rgb(139,34,82)">"forall"</SPAN>
       ))</PRE>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">The following is the code that does the completion.</P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">(<SPAN class=keyword style="COLOR: rgb(160,32,240)">defun</SPAN> xyz-complete-symbol ()
  <SPAN class=string style="COLOR: rgb(139,34,82)">"Perform keyword completion on word before cursor."</SPAN>
  (<SPAN class=function-name style="COLOR: rgb(0,0,255)">interactive</SPAN>)
  (<SPAN class=keyword style="COLOR: rgb(160,32,240)">let</SPAN> ((posEnd (<SPAN class=function-name style="COLOR: rgb(0,0,255)">point</SPAN>))
        (meat (<SPAN class=function-name style="COLOR: rgb(0,0,255)">thing-at-point</SPAN> 'symbol))
        maxMatchResult)

    <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">when nil, set it to empty string, so user can see all lang's keywords.
</SPAN>    <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">if not done, try-completion on nil result lisp error.
</SPAN>    (<SPAN class=keyword style="COLOR: rgb(160,32,240)">when</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">not</SPAN> meat) (<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> meat <SPAN class=string style="COLOR: rgb(139,34,82)">""</SPAN>))
    (<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> maxMatchResult (try-completion meat xyz-kwdList))

    (<SPAN class=keyword style="COLOR: rgb(160,32,240)">cond</SPAN> ((<SPAN class=keyword style="COLOR: rgb(160,32,240)">eq</SPAN> maxMatchResult <SPAN class=keyword style="COLOR: rgb(160,32,240)">t</SPAN>))
          ((<SPAN class=keyword style="COLOR: rgb(160,32,240)">null</SPAN> maxMatchResult)
           (<SPAN class=keyword style="COLOR: rgb(160,32,240)">message</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"Can't find completion for &#8220;%s&#8221;"</SPAN> meat)
           (ding))
          ((<SPAN class=keyword style="COLOR: rgb(160,32,240)">not</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">string=</SPAN> meat maxMatchResult))
           (<SPAN class=function-name style="COLOR: rgb(0,0,255)">delete-region</SPAN> (- posEnd (<SPAN class=keyword style="COLOR: rgb(160,32,240)">length</SPAN> meat)) posEnd)
           (<SPAN class=function-name style="COLOR: rgb(0,0,255)">insert</SPAN> maxMatchResult))
          (<SPAN class=keyword style="COLOR: rgb(160,32,240)">t</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">message</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"Making completion list&#8230;"</SPAN>)
             (<SPAN class=function-name style="COLOR: rgb(0,0,255)">with-output-to-temp-buffer</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"*Completions*"</SPAN>
               (display-completion-list
                (all-completions meat xyz-kwdList)
                meat))
             (<SPAN class=keyword style="COLOR: rgb(160,32,240)">message</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"Making completion list&#8230;%s"</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"done"</SPAN>)))))</PRE>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Now, to test it, just set a temp key for easy call:</P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">(<SPAN class=type style="COLOR: rgb(34,139,34)">global-set-key</SPAN> (<SPAN class=type style="COLOR: rgb(34,139,34)">kbd</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"&lt;f7&gt;"</SPAN>) 'xyz-complete-symbol)</PRE>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Then, open a new buffer, type any letter, say &#8220;t&#8221;, then press F7, type some more letter, press F7 again.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">The above code is very easy to understand. First, you grab the word before cursor, save it as &#8220;meat&#8221;. Then, you find the maximal match, save it as maxMatchResult. Then, we have a few cases:</P>
<UL style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">
<LI style="FONT-FAMILY: sans-serif">&#9312; If the max match is the same as the word under cursor, then do nothing, because the word is already complete.</LI>
<LI style="FONT-FAMILY: sans-serif">&#9313; If the max match is empty, then tell user there is no completion.</LI>
<LI style="FONT-FAMILY: sans-serif">&#9314; If not the above two cases, then expand the current word to max match.</LI>
<LI style="FONT-FAMILY: sans-serif">&#9315; Otherwise, pop up a dialog to list possible completions.</LI></UL>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Lucky for us, emacs does most of the tedious job. The core functions that do the job is<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">try-completion</CODE>,<CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">all-completions</CODE>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">display-completion-list</CODE>.</P>
<UL style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">
<LI style="FONT-FAMILY: sans-serif">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">try-completion</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns the maximal match.</LI>
<LI style="FONT-FAMILY: sans-serif">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">all-completions</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>returns all possible completions.</LI>
<LI style="FONT-FAMILY: sans-serif">The<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">display-completion-list</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>takes care of the user interface for displaying the possible completions, and making them clickable.</LI></UL>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">In the above, we used a simple list for our keywords, and fed them to emacs's completion functions. Emacs's completion functions can also take keyword argument in the form of a alist or hashtable. A alist looks like this:</P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">(<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> xyz-kwdList
 '((<SPAN class=string style="COLOR: rgb(139,34,82)">"touch"</SPAN> . <SPAN class=keyword style="COLOR: rgb(160,32,240)">nil</SPAN>)
   (<SPAN class=string style="COLOR: rgb(139,34,82)">"touch_start"</SPAN> . <SPAN class=keyword style="COLOR: rgb(160,32,240)">nil</SPAN>)
   (<SPAN class=string style="COLOR: rgb(139,34,82)">"touch_end"</SPAN> . <SPAN class=keyword style="COLOR: rgb(160,32,240)">nil</SPAN>)))</PRE>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">The keyword list can also be a hash table. See:<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_hash_table.html">Emacs Lisp Tutorial: Hash Table</A>.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><SPAN class=ref style="FONT-FAMILY: monospace; BACKGROUND-COLOR: rgb(232,255,255)"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs_manual/elisp/Completion.html">(info "(elisp) Completion")</A></SPAN></P>
<H2 style="BORDER-TOP: gray thin solid; FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Using ido for Completion</H2>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">A alternative mechanism of completion is to use ido-mode's interface.</P><FIGURE style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium sans-serif; MARGIN-LEFT: 0px; MARGIN-TOP: 0px; LETTER-SPACING: normal; MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><IMG style="MAX-WIDTH: 100%; HEIGHT: auto; MARGIN: 0px; box-shadow: silver 3px 3px 4px 3px" alt="emacs keyword completion ido" src="http://ergoemacs.org/emacs/i/emacs_keyword_completion_ido.png" width=640 height=511><FIGCAPTION style="MARGIN: 0px 0px 0px 1px">emacs keyword completion with ido</FIGCAPTION></FIGURE>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Here's a example.</P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">;; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">this is your lang's keywords
</SPAN>(<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> abc-kwdList
      '(<SPAN class=string style="COLOR: rgb(139,34,82)">"touch"</SPAN>
       <SPAN class=string style="COLOR: rgb(139,34,82)">"touch_start"</SPAN>
       <SPAN class=string style="COLOR: rgb(139,34,82)">"touch_end"</SPAN>
       <SPAN class=string style="COLOR: rgb(139,34,82)">"for"</SPAN>
       <SPAN class=string style="COLOR: rgb(139,34,82)">"foreach"</SPAN>
       <SPAN class=string style="COLOR: rgb(139,34,82)">"forall"</SPAN>
       ))

(<SPAN class=keyword style="COLOR: rgb(160,32,240)">defun</SPAN> abc-complete-symbol ()
  <SPAN class=string style="COLOR: rgb(139,34,82)">"Perform keyword completion on current symbol.
This uses `ido-mode' user interface for completion."</SPAN>
  (<SPAN class=function-name style="COLOR: rgb(0,0,255)">interactive</SPAN>)
  (<SPAN class=keyword style="COLOR: rgb(160,32,240)">let*</SPAN> (
         (<SPAN class=xah-elisp-user-variable>&#958;bds</SPAN> (<SPAN class=function-name style="COLOR: rgb(0,0,255)">bounds-of-thing-at-point</SPAN> 'symbol))
         (<SPAN class=xah-elisp-user-variable>&#958;p1</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">car</SPAN> <SPAN class=xah-elisp-user-variable>&#958;bds</SPAN>))
         (<SPAN class=xah-elisp-user-variable>&#958;p2</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">cdr</SPAN> <SPAN class=xah-elisp-user-variable>&#958;bds</SPAN>))
         (<SPAN class=xah-elisp-user-variable>&#958;current-sym</SPAN>
          (<SPAN class=keyword style="COLOR: rgb(160,32,240)">if</SPAN>  (<SPAN class=keyword style="COLOR: rgb(160,32,240)">or</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">null</SPAN> <SPAN class=xah-elisp-user-variable>&#958;p1</SPAN>) (<SPAN class=keyword style="COLOR: rgb(160,32,240)">null</SPAN> <SPAN class=xah-elisp-user-variable>&#958;p2</SPAN>) (<SPAN class=keyword style="COLOR: rgb(160,32,240)">equal</SPAN> <SPAN class=xah-elisp-user-variable>&#958;p1</SPAN> <SPAN class=xah-elisp-user-variable>&#958;p2</SPAN>))
              <SPAN class=string style="COLOR: rgb(139,34,82)">""</SPAN>
            (<SPAN class=function-name style="COLOR: rgb(0,0,255)">buffer-substring-no-properties</SPAN> <SPAN class=xah-elisp-user-variable>&#958;p1</SPAN> <SPAN class=xah-elisp-user-variable>&#958;p2</SPAN>)))
         <SPAN class=xah-elisp-user-variable>&#958;result-sym</SPAN>)
    (<SPAN class=keyword style="COLOR: rgb(160,32,240)">when</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">not</SPAN> <SPAN class=xah-elisp-user-variable>&#958;current-sym</SPAN>) (<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> <SPAN class=xah-elisp-user-variable>&#958;current-sym</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">""</SPAN>))
    (<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> <SPAN class=xah-elisp-user-variable>&#958;result-sym</SPAN>
          (<SPAN class=function-name style="COLOR: rgb(0,0,255)">ido-completing-read</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">""</SPAN> abc-kwdList <SPAN class=keyword style="COLOR: rgb(160,32,240)">nil</SPAN> <SPAN class=keyword style="COLOR: rgb(160,32,240)">nil</SPAN> <SPAN class=xah-elisp-user-variable>&#958;current-sym</SPAN> ))
    (<SPAN class=function-name style="COLOR: rgb(0,0,255)">delete-region</SPAN> <SPAN class=xah-elisp-user-variable>&#958;p1</SPAN> <SPAN class=xah-elisp-user-variable>&#958;p2</SPAN>)
    (<SPAN class=function-name style="COLOR: rgb(0,0,255)">insert</SPAN> <SPAN class=xah-elisp-user-variable>&#958;result-sym</SPAN>)))</PRE>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">This is much more convenient.</P>
<DIV class=rltd style="BORDER-TOP: silver thin solid; BORDER-RIGHT: silver thin solid; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: silver thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium sans-serif; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: silver thin solid; MARGIN-TOP: 0px; DISPLAY: table; LETTER-SPACING: normal; PADDING-RIGHT: 0px; MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; border-radius: 0.5rem">
<UL style="MARGIN: 0px">
<LI style="FONT-FAMILY: sans-serif"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_syntax_coloring.html">How to Write a Emacs Major Mode for Syntax Coloring</A></LI>
<LI style="FONT-FAMILY: sans-serif"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_comment_handling.html">Emacs Lisp: How to Write Comment/Uncomment Command in Major Mode</A></LI>
<LI style="FONT-FAMILY: sans-serif"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_menu_for_major_mode.html">How to Define Keymap and Menu in Your Emacs Major Mode</A></LI>
<LI style="FONT-FAMILY: sans-serif"><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/yasnippet_templates_howto.html">How to Define Templates In YASnippet</A></LI></UL></DIV><BR class=Apple-interchange-newline>