<H1 style="FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Emacs Lisp: Write Emacs Commands Using {Perl, Python, Ruby, &#8230;}</H1><SECTION class=buy-book style="BORDER-TOP: silver thin solid; BORDER-RIGHT: silver thin solid; WHITE-SPACE: normal; WORD-SPACING: 0px; BORDER-BOTTOM: silver thin solid; TEXT-TRANSFORM: none; FLOAT: right; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium sans-serif; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: silver thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(210,254,185); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px; border-radius: 1rem">Buy<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/buy_xah_emacs_tutorial.html">Xah Emacs Tutorial</A>. Master emacs benefits for life.
</SECTION>
<DIV class=byline style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">
<ADDRESS class=author style="FONT-STYLE: normal; DISPLAY: inline"><A style="TEXT-DECORATION: none" href="mailto:xahlee@gmail.com" rel=author>Xah Lee</A></ADDRESS>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><TIME style="FONT-FAMILY: monospace; WHITE-SPACE: nowrap">2008-10-30</TIME>, &#8230;,<SPAN class=Apple-converted-space>&nbsp;</SPAN><TIME style="FONT-FAMILY: monospace; WHITE-SPACE: nowrap">2015-06-30</TIME></DIV>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">This page shows you how you can write a text processing script in your favorite language, then make it available in emacs as a command.</P>
<H2 style="BORDER-TOP: gray thin solid; FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Problem</H2>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">If you are new to emacs lisp, it may take several months for you to become productive. However, you are probably familiar with<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="TEXT-DECORATION: none; box-shadow: 0px 1px" href="http://xahlee.info/perl-python/perl_basics.html">Perl</A>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="TEXT-DECORATION: none; box-shadow: 0px 1px" href="http://xahlee.info/python/python3_basics.html">Python</A>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="TEXT-DECORATION: none; box-shadow: 0px 1px" href="http://xahlee.info/ruby/ruby_basics.html">Ruby</A>,<SPAN class=Apple-converted-space>&nbsp;</SPAN><A style="TEXT-DECORATION: none; box-shadow: 0px 1px" href="http://xahlee.info/php/index.html">PHP</A>. You can use your existing knowledge to write many text processing scripts and make them available in emacs as commands, so that you can just select text, press a key, then the selected text will be transformed according to your script.</P>
<H2 style="BORDER-TOP: gray thin solid; FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Solution</H2>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Your shell script will need to:</P>
<UL style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">
<LI style="FONT-FAMILY: sans-serif">take input from Stdin.</LI>
<LI style="FONT-FAMILY: sans-serif">output to Stdout.</LI></UL>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Let's assume your script is the unix program &#8220;wc&#8221;. (the &#8220;wc&#8221; command counts the number of words, lines, chars in the text.) For example, try this in shell:<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: pre-wrap; COLOR: maroon">cat &#8249;file name&#8250; | wc</CODE>.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">You need a elisp command that:</P>
<OL style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">
<LI style="FONT-FAMILY: sans-serif">Grab the current region.</LI>
<LI style="FONT-FAMILY: sans-serif">Pass the text to a external program.</LI>
<LI style="FONT-FAMILY: sans-serif">Take the output from Stdout.</LI>
<LI style="FONT-FAMILY: sans-serif">Replace the current region by that text.</LI></OL>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Lucky for us, the elisp function<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">shell-command-on-region</CODE><SPAN class=Apple-converted-space>&nbsp;</SPAN>does this exactly.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Here's the elisp wrapper:</P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">(<SPAN class=keyword style="COLOR: rgb(160,32,240)">defun</SPAN> do-something-region (startPos endPos)
  <SPAN class=string style="COLOR: rgb(139,34,82)">"Do some text processing on region.
This command calls the external script &#8220;wc&#8221;."</SPAN>
(<SPAN class=function-name style="COLOR: rgb(0,0,255)">interactive</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"r"</SPAN>)
  (<SPAN class=keyword style="COLOR: rgb(160,32,240)">let</SPAN> (scriptName)
    (<SPAN class=keyword style="COLOR: rgb(160,32,240)">setq</SPAN> scriptName <SPAN class=string style="COLOR: rgb(139,34,82)">"/usr/bin/wc"</SPAN>) <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">; </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">full path to your script
</SPAN>    (<SPAN class=function-name style="COLOR: rgb(0,0,255)">shell-command-on-region</SPAN> startPos endPos scriptName <SPAN class=keyword style="COLOR: rgb(160,32,240)">nil</SPAN> <SPAN class=keyword style="COLOR: rgb(160,32,240)">t</SPAN> <SPAN class=keyword style="COLOR: rgb(160,32,240)">nil</SPAN> <SPAN class=keyword style="COLOR: rgb(160,32,240)">t</SPAN>)
    ))</PRE>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Select the lisp code and call<SPAN class=Apple-converted-space>&nbsp;</SPAN><CODE class=elisp-&#402; style="FONT-FAMILY: 'DejaVu Sans Mono', monospace; WHITE-SPACE: nowrap; COLOR: rgb(178,34,34); BACKGROUND-COLOR: transparent">eval-region</CODE>. &#12308;&#10148;&nbsp;<A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/elisp_eval_lisp_code.html">Emacs: How to Evaluate Emacs Lisp Code</A>&#12309;</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">To use your command, first make a text selection, then call the command by name (that is, M-x name). You can give it a key. &#12308;&#10148;&nbsp;<A style="TEXT-DECORATION: none" href="http://ergoemacs.org/emacs/keyboard_shortcuts.html">Emacs: How to Define Keys</A>&#12309;</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">With the above, you can write many little text processing scripts in your favorite language, and have them all available in emacs as commands.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">emacs &#9829;</P>
<H2 style="BORDER-TOP: gray thin solid; FONT-FAMILY: serif; FONT-VARIANT: normal; WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT-STYLE: normal; LETTER-SPACING: normal; LINE-HEIGHT: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Passing STDIN &#65286; Arg to Python</H2>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">In this example, the emacs wrapper command calls a python script.</P>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">The emacs command passes 2 things to the script:</P>
<OL style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">
<LI style="FONT-FAMILY: sans-serif">Takes region and pass to script as STDIN</LI>
<LI style="FONT-FAMILY: sans-serif">Takes current buffer file path and pass to the script as first arg</LI></OL>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">Here's the emacs command:</P><PRE class=emacs-lisp style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(245,255,245); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">(<SPAN class=keyword style="COLOR: rgb(160,32,240)">defun</SPAN> my-python-ref-linkify ()
  <SPAN class=string style="COLOR: rgb(139,34,82)">"Transform current line (a file path) into a link.
For example, this line:

/home/xah/web/xahlee_info/python_doc_2.7.6/library/stdtypes.html#mapping-types-dict

becomes

&lt;span class=\"ref\"&gt;&lt;a href=\"../python_doc_2.7.6/library/stdtypes.html#mapping-types-dict\"&gt;5. Built-in Types &#8212; Python v2.7.6 documentation #mapping-types-dict&lt;/a&gt;

The URL is relative to current file. The link text is the linked file's title, plus any fragment URL part.

Requires a python script. See code."</SPAN>
  (<SPAN class=function-name style="COLOR: rgb(0,0,255)">interactive</SPAN>)
  (<SPAN class=keyword style="COLOR: rgb(160,32,240)">let</SPAN> ((scriptName
         (<SPAN class=keyword style="COLOR: rgb(160,32,240)">format</SPAN>
          <SPAN class=string style="COLOR: rgb(139,34,82)">"/usr/bin/python3 /home/xah/git/xahscripts/emacs_pydoc_ref_linkify.py3 %s"</SPAN> 
          (<SPAN class=function-name style="COLOR: rgb(0,0,255)">buffer-file-name</SPAN>))) 
        (bds (<SPAN class=function-name style="COLOR: rgb(0,0,255)">bounds-of-thing-at-point</SPAN> 'filename)))
    (<SPAN class=function-name style="COLOR: rgb(0,0,255)">save-excursion</SPAN>
      (<SPAN class=type style="COLOR: rgb(34,139,34)">shell-command-on-region</SPAN> (<SPAN class=keyword style="COLOR: rgb(160,32,240)">car</SPAN> bds) (<SPAN class=keyword style="COLOR: rgb(160,32,240)">cdr</SPAN> bds) scriptName <SPAN class=keyword style="COLOR: rgb(160,32,240)">nil</SPAN> <SPAN class=string style="COLOR: rgb(139,34,82)">"REPLACE"</SPAN> <SPAN class=keyword style="COLOR: rgb(160,32,240)">nil</SPAN> <SPAN class=keyword style="COLOR: rgb(160,32,240)">t</SPAN>))))</PRE>
<P style="WHITE-SPACE: normal; WORD-SPACING: 0px; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); FONT: medium/1.5 sans-serif; LETTER-SPACING: normal; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px">here's the python script it calls:</P><PRE class=python3 style="BORDER-TOP: gray thin solid; BORDER-RIGHT: gray thin solid; WHITE-SPACE: pre-wrap; WORD-SPACING: 0px; MIN-WIDTH: 44%; BORDER-BOTTOM: gray thin solid; TEXT-TRANSFORM: none; COLOR: rgb(0,0,0); PADDING-TOP: 0px; FONT: medium 'DejaVu Sans Mono', monospace; PADDING-LEFT: 0px; MARGIN-LEFT: 0px; BORDER-LEFT: gray thin solid; MARGIN-TOP: 0px; LETTER-SPACING: normal; PADDING-RIGHT: 0px; BACKGROUND-COLOR: rgb(217,228,223); MARGIN-RIGHT: 0px; TEXT-INDENT: 0px; -webkit-text-stroke-width: 0px"><SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">#</SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">!/usr/bin/python3
</SPAN><SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)"># </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">-*- coding: utf-8 -*-
</SPAN>
<SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)"># </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">input: stdin and 1st arg from command line
</SPAN><SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)"># </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">output: stdout
</SPAN>
<SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)"># </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">input is a file path, like this:
</SPAN><SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)"># </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">/home/xah/web/xahlee_info/python_doc_2.7.6/library/stdtypes.html#mapping-types-dict
</SPAN><SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)"># </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">first arg is a file path like this
</SPAN><SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)"># </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">/home/xah/web/xahlee_info/python/python3_traverse_dir.html
</SPAN><SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)"># </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">output should be like this
</SPAN>
<SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)"># </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">&lt;span class="ref"&gt;&lt;a href="../python_doc_2.7.6/library/stdtypes.html#mapping-types-dict"&gt;5. Built-in Types &#8212; Python v2.7.6 documentation #mapping-types-dict&lt;/a&gt;&lt;/span&gt;
</SPAN>
<SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)"># </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">the path is a relative path, relative to script arg. The link text is from the file's title, plus the fragment url, if any
</SPAN>
<SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)"># </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">this is called by a emacs command python-ref-linkify
</SPAN>
<SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)"># </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">Xah Lee
</SPAN><SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)"># </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">http://xahlee.info/
</SPAN><SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)"># </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">2013-11-29
</SPAN>
<SPAN class=keyword style="COLOR: rgb(160,32,240)">import</SPAN> sys
<SPAN class=keyword style="COLOR: rgb(160,32,240)">import</SPAN> os.path
<SPAN class=keyword style="COLOR: rgb(160,32,240)">import</SPAN> re

<SPAN class=variable-name style="COLOR: rgb(159,81,45)">default_input</SPAN> = <SPAN class=string style="COLOR: rgb(139,34,82)">"/home/xah/web/xahlee_info/python_doc_3.3.3/library/os.html#os.walk"</SPAN>
<SPAN class=variable-name style="COLOR: rgb(159,81,45)">default_bufferpath</SPAN> = <SPAN class=string style="COLOR: rgb(139,34,82)">"/home/xah/web/xahlee_info/python/python3_traverse_dir.html"</SPAN>

<SPAN class=variable-name style="COLOR: rgb(159,81,45)">input_text</SPAN> = sys.stdin.read()
<SPAN class=variable-name style="COLOR: rgb(159,81,45)">input_text</SPAN> = default_input <SPAN class=keyword style="COLOR: rgb(160,32,240)">if</SPAN> input_text == <SPAN class=string style="COLOR: rgb(139,34,82)">""</SPAN> <SPAN class=keyword style="COLOR: rgb(160,32,240)">else</SPAN> input_text

buffer_path = sys.argv[1] <SPAN class=keyword style="COLOR: rgb(160,32,240)">if</SPAN> <SPAN class=builtin style="COLOR: rgb(122,55,139)">len</SPAN>(sys.argv) == 2 <SPAN class=keyword style="COLOR: rgb(160,32,240)">else</SPAN> default_bufferpath

<SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">########################</SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">
</SPAN>
input_text = re.sub(r<SPAN class=string style="COLOR: rgb(139,34,82)">"^file://"</SPAN>, <SPAN class=string style="COLOR: rgb(139,34,82)">""</SPAN> , input_text.strip())

<SPAN class=keyword style="COLOR: rgb(160,32,240)">if</SPAN> re.search(r<SPAN class=string style="COLOR: rgb(139,34,82)">"#"</SPAN>, input_text):
    <SPAN class=variable-name style="COLOR: rgb(159,81,45)">doc_path</SPAN>, frac = input_text.split(<SPAN class=string style="COLOR: rgb(139,34,82)">"#"</SPAN>)
<SPAN class=keyword style="COLOR: rgb(160,32,240)">else</SPAN>:
    <SPAN class=variable-name style="COLOR: rgb(159,81,45)">doc_path</SPAN>, frac = input_text, <SPAN class=string style="COLOR: rgb(139,34,82)">""</SPAN>

doc_title = <SPAN class=string style="COLOR: rgb(139,34,82)">""</SPAN>

<SPAN class=keyword style="COLOR: rgb(160,32,240)">with</SPAN> <SPAN class=builtin style="COLOR: rgb(122,55,139)">open</SPAN>(doc_path, <SPAN class=string style="COLOR: rgb(139,34,82)">"r"</SPAN>) <SPAN class=keyword style="COLOR: rgb(160,32,240)">as</SPAN> f1:
    <SPAN class=keyword style="COLOR: rgb(160,32,240)">for</SPAN> xline <SPAN class=keyword style="COLOR: rgb(160,32,240)">in</SPAN> f1:
        xmatch = re.search(r<SPAN class=string style="COLOR: rgb(139,34,82)">"&lt;title&gt;([^&lt;]+?)&lt;/title&gt;"</SPAN>, xline, re.UNICODE)
        <SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)"># </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">&lt;title&gt;16.1. os &#8212; Miscellaneous operating system interfaces &#8212; Python v3.3.3 documentation&lt;/title&gt;
</SPAN>        <SPAN class=keyword style="COLOR: rgb(160,32,240)">if</SPAN> xmatch:
            doc_title = xmatch.group(1)
            <SPAN class=keyword style="COLOR: rgb(160,32,240)">break</SPAN>

<SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)"># </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">if doc_title == "":
</SPAN><SPAN class=comment-delimiter style="COLOR: rgb(178,34,34)">#     </SPAN><SPAN class=comment style="COLOR: rgb(178,34,34)">sys.exit("no title found in &#12300;{}&#12301;".format(doc_path))
</SPAN>
relative_path = os.path.relpath( doc_path, start= os.path.dirname(buffer_path))

<SPAN class=keyword style="COLOR: rgb(160,32,240)">print</SPAN>(<SPAN class=string style="COLOR: rgb(139,34,82)">"""&lt;span class="ref"&gt;&lt;a href="{}"&gt;{}&lt;/a&gt;&lt;/span&gt;"""</SPAN>.<SPAN class=builtin style="COLOR: rgb(122,55,139)">format</SPAN>(relative_path + <SPAN class=string style="COLOR: rgb(139,34,82)">"#"</SPAN> + frac, doc_title + <SPAN class=string style="COLOR: rgb(139,34,82)">" #"</SPAN> + frac) )</PRE>