#include "linux/kthread.h" 
<P></P>
<P>kthread_run(my_thread, NULL, "%s", "my_thread") </P>
<P><A class=l href="http://localhost:8080/source/xref/Linux-v4.6/include/linux/kthread.h#22" name=22>22</A><SPAN class=c>/**<BR><A class=l href="http://localhost:8080/source/xref/Linux-v4.6/include/linux/kthread.h#23" name=23>23</A> * kthread_run - create and wake a thread.<BR><A class=l href="http://localhost:8080/source/xref/Linux-v4.6/include/linux/kthread.h#24" name=24>24</A> * @threadfn: the function to run until signal_pending(current).<BR><A class=l href="http://localhost:8080/source/xref/Linux-v4.6/include/linux/kthread.h#25" name=25>25</A> * @data: data ptr for @threadfn.<BR><A class=l href="http://localhost:8080/source/xref/Linux-v4.6/include/linux/kthread.h#26" name=26>26</A> * @namefmt: printf-style name for the thread.<BR><A class=l href="http://localhost:8080/source/xref/Linux-v4.6/include/linux/kthread.h#27" name=27>27</A> *<BR><A class=l href="http://localhost:8080/source/xref/Linux-v4.6/include/linux/kthread.h#28" name=28>28</A> * Description: Convenient wrapper for kthread_create() followed by<BR><A class=l href="http://localhost:8080/source/xref/Linux-v4.6/include/linux/kthread.h#29" name=29>29</A> * wake_up_process().&nbsp; Returns the kthread or ERR_PTR(-ENOMEM).<BR><A class=hl href="http://localhost:8080/source/xref/Linux-v4.6/include/linux/kthread.h#30" name=30>30</A> */</SPAN><BR><A class=l href="http://localhost:8080/source/xref/Linux-v4.6/include/linux/kthread.h#31" name=31>31</A>#<B>define</B> <A class=xm name=kthread_run></A><A class=xm href="http://localhost:8080/source/s?refs=kthread_run&amp;project=Linux-v4.6">kthread_run</A>(<A href="http://localhost:8080/source/s?defs=threadfn&amp;project=Linux-v4.6">threadfn</A>, <A href="http://localhost:8080/source/s?defs=data&amp;project=Linux-v4.6">data</A>, <A href="http://localhost:8080/source/s?defs=namefmt&amp;project=Linux-v4.6">namefmt</A>, ...)			&nbsp;&nbsp; \<BR><A class=l href="http://localhost:8080/source/xref/Linux-v4.6/include/linux/kthread.h#32" name=32>32</A>({									&nbsp;&nbsp; \<BR><A class=l href="http://localhost:8080/source/xref/Linux-v4.6/include/linux/kthread.h#33" name=33>33</A>	<B>struct</B> <A href="http://localhost:8080/source/s?defs=task_struct&amp;project=Linux-v4.6">task_struct</A> *<A href="http://localhost:8080/source/s?defs=__k&amp;project=Linux-v4.6">__k</A>						&nbsp;&nbsp; \<BR><A class=l href="http://localhost:8080/source/xref/Linux-v4.6/include/linux/kthread.h#34" name=34>34</A>		= <A class=d href="http://localhost:8080/source/xref/Linux-v4.6/include/linux/kthread.h#kthread_create">kthread_create</A>(<A href="http://localhost:8080/source/s?defs=threadfn&amp;project=Linux-v4.6">threadfn</A>, <A href="http://localhost:8080/source/s?defs=data&amp;project=Linux-v4.6">data</A>, <A href="http://localhost:8080/source/s?defs=namefmt&amp;project=Linux-v4.6">namefmt</A>, ## <A href="http://localhost:8080/source/s?defs=__VA_ARGS__&amp;project=Linux-v4.6">__VA_ARGS__</A>); \<BR><A class=l href="http://localhost:8080/source/xref/Linux-v4.6/include/linux/kthread.h#35" name=35>35</A>	<B>if</B> (!<A href="http://localhost:8080/source/s?defs=IS_ERR&amp;project=Linux-v4.6">IS_ERR</A>(<A href="http://localhost:8080/source/s?defs=__k&amp;project=Linux-v4.6">__k</A>))						&nbsp;&nbsp; \<BR><A class=l href="http://localhost:8080/source/xref/Linux-v4.6/include/linux/kthread.h#36" name=36>36</A>		<A href="http://localhost:8080/source/s?defs=wake_up_process&amp;project=Linux-v4.6">wake_up_process</A>(<A href="http://localhost:8080/source/s?defs=__k&amp;project=Linux-v4.6">__k</A>);					&nbsp;&nbsp; \<BR><A class=l href="http://localhost:8080/source/xref/Linux-v4.6/include/linux/kthread.h#37" name=37>37</A>	<A href="http://localhost:8080/source/s?defs=__k&amp;project=Linux-v4.6">__k</A>;								&nbsp;&nbsp; \<BR><A class=l href="http://localhost:8080/source/xref/Linux-v4.6/include/linux/kthread.h#38" name=38>38</A>})