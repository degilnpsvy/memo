<P class=docText>Command-line arguments affect the code path traversed during boot. As a simple example, assume that the command-line argument of interest is called <TT>bootmode</TT>. If this parameter is set to <TT>1</TT><A name="debug messages"></A>, you would like to print some debug messages during boot and switch to a runlevel of <TT>3</TT><A name="messages are"></A> at the end of the boot. (Wait until the boot messages are printed out by the init process to learn the semantics of runlevels.) If <TT>bootmode</TT><A name="instead set"></A> is instead set to <TT>0</TT><A name="runlevel set"></A>, you would prefer the boot to be relatively laconic, and the runlevel set to <TT>2</TT><A name="Because you"></A>. Because you are already familiar with <SPAN class=docEmphasis>init/main.c</SPAN><A name="following modification"></A>, let's add the following modification to it:</P>
<DIV class=docText>
<DIV class=codeSegmentsExpansionLinks>Code View:</DIV><PRE>static unsigned int bootmode = 1;
static int __init
is_bootmode_setup(char *str)
{
  get_option(&amp;str, &amp;bootmode);
  return 1;
}

/* Handle parameter "bootmode=" */
__setup("bootmode=", is_bootmode_setup);

if (bootmode) {
  /* Print verbose output */
  /* ... */
}

/* ... */

/* If bootmode is 1, choose an init runlevel of 3, else
   switch to a run level of 2 */
if (bootmode) {
  argv_init[++args] = "3";
} else {
  argv_init[++args] = "2";
}

/* ... */

					  </PRE></DIV><BR>
<P class=docText><A name="the kernel"></A>Rebuild the kernel as you did earlier and try out the change. We discuss more about kernel command-line arguments in the section "<A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch18lev1sec5.html#ch18lev1sec5">Memory Layout</A>" in <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch18.html#ch18">Chapter 18</A>, "Embedding Linux."