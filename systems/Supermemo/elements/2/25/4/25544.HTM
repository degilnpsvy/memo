include/linux/rwlock_types.h 
<P></P>
<P>#ifndef __LINUX_RWLOCK_TYPES_H<BR>#define __LINUX_RWLOCK_TYPES_H</P>
<P></P>
<P>/*<BR>&nbsp;* include/linux/rwlock_types.h - generic rwlock type definitions<BR>&nbsp;*&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; and initializers<BR>&nbsp;*<BR>&nbsp;* portions Copyright 2005, Red Hat, Inc., Ingo Molnar<BR>&nbsp;* Released under the General Public License (GPL).<BR>&nbsp;*/<BR><FONT class=extract>typedef struct {<BR>&nbsp;arch_rwlock_t raw_lock;<BR>#ifdef CONFIG_GENERIC_LOCKBREAK<BR>&nbsp;unsigned int break_lock;<BR>#endif<BR>#ifdef CONFIG_DEBUG_SPINLOCK<BR>&nbsp;unsigned int magic, owner_cpu;<BR>&nbsp;void *owner;<BR>#endif<BR>#ifdef CONFIG_DEBUG_LOCK_ALLOC<BR>&nbsp;struct lockdep_map dep_map;<BR>#endif<BR>} rwlock_t;</FONT></P>
<P>#define RWLOCK_MAGIC&nbsp;&nbsp;0xdeaf1eed</P>
<P>#ifdef CONFIG_DEBUG_LOCK_ALLOC<BR># define RW_DEP_MAP_INIT(lockname)&nbsp;.dep_map = { .name = #lockname }<BR>#else<BR># define RW_DEP_MAP_INIT(lockname)<BR>#endif</P>
<P><FONT class=extract>#ifdef CONFIG_DEBUG_SPINLOCK<BR>#define __RW_LOCK_UNLOCKED(lockname)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;(rwlock_t)&nbsp;{&nbsp;.raw_lock = __ARCH_RW_LOCK_UNLOCKED,&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;.magic = RWLOCK_MAGIC,&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;.owner = SPINLOCK_OWNER_INIT,&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;.owner_cpu = -1,&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;RW_DEP_MAP_INIT(lockname) }<BR>#else<BR>#define __RW_LOCK_UNLOCKED(lockname) \<BR>&nbsp;(rwlock_t)&nbsp;{&nbsp;.raw_lock = __ARCH_RW_LOCK_UNLOCKED,&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;RW_DEP_MAP_INIT(lockname) }<BR>#endif</FONT></P>
<P><FONT class=extract>#define DEFINE_RWLOCK(x)&nbsp;rwlock_t x = __RW_LOCK_UNLOCKED(x)</FONT></P>
<P>#endif /* __LINUX_RWLOCK_TYPES_H */