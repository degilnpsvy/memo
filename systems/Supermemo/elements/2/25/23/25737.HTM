/**<BR>&nbsp;* struct class - device classes<BR>&nbsp;* @name:&nbsp;Name of the class.<BR>&nbsp;* @owner:&nbsp;The module owner.<BR>&nbsp;* @class_attrs: Default attributes of this class.<BR>&nbsp;* @dev_groups:&nbsp;Default attributes of the devices that belong to the class.<BR>&nbsp;* @dev_kobj:&nbsp;The kobject that represents this class and links it into the hierarchy.<BR>&nbsp;* @dev_uevent:&nbsp;Called when a device is added, removed from this class, or a<BR>&nbsp;*&nbsp;&nbsp;few other things that generate uevents to add the environment<BR>&nbsp;*&nbsp;&nbsp;variables.<BR>&nbsp;* @devnode:&nbsp;Callback to provide the devtmpfs.<BR>&nbsp;* @class_release: Called to release this class.<BR>&nbsp;* @dev_release: Called to release the device.<BR>&nbsp;* @suspend:&nbsp;Used to put the device to sleep mode, usually to a low power<BR>&nbsp;*&nbsp;&nbsp;state.<BR>&nbsp;* @resume:&nbsp;Used to bring the device from the sleep mode.<BR>&nbsp;* @ns_type:&nbsp;Callbacks so sysfs can detemine namespaces.<BR>&nbsp;* @namespace:&nbsp;Namespace of the device belongs to this class.<BR>&nbsp;* @pm:&nbsp;&nbsp;The default device power management operations of this class.<BR>&nbsp;* @p:&nbsp;&nbsp;The private data of the driver core, no one other than the<BR>&nbsp;*&nbsp;&nbsp;driver core can touch this.<BR>&nbsp;*<BR>&nbsp;* A class is a higher-level view of a device that abstracts out low-level<BR>&nbsp;* implementation details. Drivers may see a SCSI disk or an ATA disk, but,<BR>&nbsp;* at the class level, they are all simply disks. Classes allow user space<BR>&nbsp;* to work with devices based on what they do, rather than how they are<BR>&nbsp;* connected or how they work.<BR>&nbsp;*/<BR>struct class {<BR>&nbsp;const char&nbsp;&nbsp;*name;<BR>&nbsp;struct module&nbsp;&nbsp;*owner; 
<P></P>
<P>&nbsp;struct class_attribute&nbsp;&nbsp;*class_attrs;<BR>&nbsp;const struct attribute_group&nbsp;**dev_groups;<BR>&nbsp;struct kobject&nbsp;&nbsp;&nbsp;*dev_kobj;</P>
<P>&nbsp;int (*dev_uevent)(struct device *dev, struct kobj_uevent_env *env);<BR>&nbsp;char *(*devnode)(struct device *dev, umode_t *mode);</P>
<P>&nbsp;void (*class_release)(struct class *class);<BR>&nbsp;void (*dev_release)(struct device *dev);</P>
<P>&nbsp;int (*suspend)(struct device *dev, pm_message_t state);<BR>&nbsp;int (*resume)(struct device *dev);</P>
<P>&nbsp;const struct kobj_ns_type_operations *ns_type;<BR>&nbsp;const void *(*namespace)(struct device *dev);</P>
<P>&nbsp;const struct dev_pm_ops *pm;</P>
<P>&nbsp;struct subsys_private *p;<BR>};