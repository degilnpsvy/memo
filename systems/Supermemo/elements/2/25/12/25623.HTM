include/linux/sysfs.h 
<P></P>
<P>/*<BR>&nbsp;* sysfs.h - definitions for the device driver filesystem<BR>&nbsp;*<BR>&nbsp;* Copyright (c) 2001,2002 Patrick Mochel<BR>&nbsp;* Copyright (c) 2004 Silicon Graphics, Inc.<BR>&nbsp;* Copyright (c) 2007 SUSE Linux Products GmbH<BR>&nbsp;* Copyright (c) 2007 Tejun Heo &lt;<A href="mailto:teheo@suse.de">teheo@suse.de</A>&gt;<BR>&nbsp;* <BR>&nbsp;* Please see Documentation/filesystems/sysfs.txt for more information.<BR>&nbsp;*/</P>
<P></P>
<P>#ifndef _SYSFS_H_<BR>#define _SYSFS_H_</P>
<P>#include &lt;linux/kernfs.h&gt;<BR>#include &lt;linux/compiler.h&gt;<BR>#include &lt;linux/errno.h&gt;<BR>#include &lt;linux/list.h&gt;<BR>#include &lt;linux/lockdep.h&gt;<BR>#include &lt;linux/kobject_ns.h&gt;<BR>#include &lt;linux/stat.h&gt;<BR>#include &lt;linux/atomic.h&gt;</P>
<P>struct kobject;<BR>struct module;<BR>struct bin_attribute;<BR>enum kobj_ns_type;</P>
<P><FONT class=extract>struct attribute {<BR>&nbsp;const char&nbsp;&nbsp;*name;<BR>&nbsp;umode_t&nbsp;&nbsp;&nbsp;mode;<BR>#ifdef CONFIG_DEBUG_LOCK_ALLOC<BR>&nbsp;bool&nbsp;&nbsp;&nbsp;ignore_lockdep:1;<BR>&nbsp;struct lock_class_key&nbsp;*key;<BR>&nbsp;struct lock_class_key&nbsp;skey;<BR>#endif<BR>};</FONT></P>
<P>/**<BR>&nbsp;*&nbsp;sysfs_attr_init - initialize a dynamically allocated sysfs attribute<BR>&nbsp;*&nbsp;@attr: struct attribute to initialize<BR>&nbsp;*<BR>&nbsp;*&nbsp;Initialize a dynamically allocated struct attribute so we can<BR>&nbsp;*&nbsp;make lockdep happy.&nbsp; This is a new requirement for attributes<BR>&nbsp;*&nbsp;and initially this is only needed when lockdep is enabled.<BR>&nbsp;*&nbsp;Lockdep gives a nice error when your attribute is added to<BR>&nbsp;*&nbsp;sysfs if you don't have this.<BR>&nbsp;*/<BR>#ifdef CONFIG_DEBUG_LOCK_ALLOC<BR>#define sysfs_attr_init(attr)&nbsp;&nbsp;&nbsp;&nbsp;\<BR>do {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;static struct lock_class_key __key;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;(attr)-&gt;key = &amp;__key;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>} while (0)<BR>#else<BR>#define sysfs_attr_init(attr) do {} while (0)<BR>#endif</P>
<P><FONT class=extract>/**<BR>&nbsp;* struct attribute_group - data structure used to declare an attribute group.<BR>&nbsp;* @name:&nbsp;Optional: Attribute group name<BR>&nbsp;*&nbsp;&nbsp;If specified, the attribute group will be created in<BR>&nbsp;*&nbsp;&nbsp;a new subdirectory with this name.<BR>&nbsp;* @is_visible:&nbsp;Optional: Function to return permissions associated with an<BR>&nbsp;*&nbsp;&nbsp;attribute of the group. Will be called repeatedly for each<BR>&nbsp;*&nbsp;&nbsp;attribute in the group. Only read/write permissions as well as<BR>&nbsp;*&nbsp;&nbsp;SYSFS_PREALLOC are accepted. Must return 0 if an attribute is<BR>&nbsp;*&nbsp;&nbsp;not visible. The returned value will replace static permissions<BR>&nbsp;*&nbsp;&nbsp;defined in struct attribute or struct bin_attribute.<BR>&nbsp;* @attrs:&nbsp;Pointer to NULL terminated list of attributes.<BR>&nbsp;* @bin_attrs:&nbsp;Pointer to NULL terminated list of binary attributes.<BR>&nbsp;*&nbsp;&nbsp;Either attrs or bin_attrs or both must be provided.<BR>&nbsp;*/<BR>struct attribute_group {<BR>&nbsp;const char&nbsp;&nbsp;*name;<BR>&nbsp;umode_t&nbsp;&nbsp;&nbsp;(*is_visible)(struct kobject *,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct attribute *, int);<BR>&nbsp;struct attribute&nbsp;**attrs;<BR>&nbsp;struct bin_attribute&nbsp;**bin_attrs;<BR>};</FONT></P>
<P><FONT class=extract>/**<BR>&nbsp;* Use these macros to make defining attributes easier. See include/linux/device.h<BR>&nbsp;* for examples..<BR>&nbsp;*/</FONT></P>
<P><FONT class=extract>#define SYSFS_PREALLOC 010000</FONT></P>
<P><FONT class=extract>#define __ATTR(_name, _mode, _show, _store) {&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;.attr = {.name = __stringify(_name),&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp; .mode = VERIFY_OCTAL_PERMISSIONS(_mode) },&nbsp;&nbsp;\<BR>&nbsp;.show&nbsp;= _show,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;.store&nbsp;= _store,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>}</FONT></P>
<P><FONT class=extract>#define __ATTR_PREALLOC(_name, _mode, _show, _store) {&nbsp;&nbsp;&nbsp;\<BR>&nbsp;.attr = {.name = __stringify(_name),&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp; .mode = SYSFS_PREALLOC | VERIFY_OCTAL_PERMISSIONS(_mode) },\<BR>&nbsp;.show&nbsp;= _show,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;.store&nbsp;= _store,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>}</FONT></P>
<P><FONT class=extract>#define __ATTR_RO(_name) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;.attr&nbsp;= { .name = __stringify(_name), .mode = S_IRUGO },&nbsp;\<BR>&nbsp;.show&nbsp;= _name##_show,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>}</FONT></P>
<P><FONT class=extract>#define __ATTR_WO(_name) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;.attr&nbsp;= { .name = __stringify(_name), .mode = S_IWUSR },&nbsp;\<BR>&nbsp;.store&nbsp;= _name##_store,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>}</FONT></P>
<P><FONT class=extract>#define __ATTR_RW(_name) __ATTR(_name, (S_IWUSR | S_IRUGO),&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp; _name##_show, _name##_store)</FONT></P>
<P><FONT class=extract>#define __ATTR_NULL { .attr = { .name = NULL } }</FONT></P>
<P><FONT class=extract>#ifdef CONFIG_DEBUG_LOCK_ALLOC<BR>#define __ATTR_IGNORE_LOCKDEP(_name, _mode, _show, _store) {&nbsp;\<BR>&nbsp;.attr = {.name = __stringify(_name), .mode = _mode,&nbsp;\<BR>&nbsp;&nbsp;&nbsp;.ignore_lockdep = true },&nbsp;&nbsp;\<BR>&nbsp;.show&nbsp;&nbsp;= _show,&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;.store&nbsp;&nbsp;= _store,&nbsp;&nbsp;&nbsp;&nbsp;\<BR>}<BR>#else<BR>#define __ATTR_IGNORE_LOCKDEP&nbsp;__ATTR<BR>#endif</FONT></P>
<P><FONT class=extract>#define __ATTRIBUTE_GROUPS(_name)&nbsp;&nbsp;&nbsp;&nbsp;\<BR>static const struct attribute_group *_name##_groups[] = {&nbsp;\<BR>&nbsp;&amp;_name##_group,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;NULL,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>}</FONT></P>
<P><FONT class=extract>#define ATTRIBUTE_GROUPS(_name)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>static const struct attribute_group _name##_group = {&nbsp;&nbsp;\<BR>&nbsp;.attrs = _name##_attrs,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>};&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>__ATTRIBUTE_GROUPS(_name)</FONT></P>
<P>struct file;<BR>struct vm_area_struct;</P>
<P><FONT class=extract>struct bin_attribute {<BR>&nbsp;struct attribute&nbsp;attr;<BR>&nbsp;size_t&nbsp;&nbsp;&nbsp;size;<BR>&nbsp;void&nbsp;&nbsp;&nbsp;*private;<BR>&nbsp;ssize_t (*read)(struct file *, struct kobject *, struct bin_attribute *,<BR>&nbsp;&nbsp;&nbsp;char *, loff_t, size_t);<BR>&nbsp;ssize_t (*write)(struct file *, struct kobject *, struct bin_attribute *,<BR>&nbsp;&nbsp;&nbsp; char *, loff_t, size_t);<BR>&nbsp;int (*mmap)(struct file *, struct kobject *, struct bin_attribute *attr,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct vm_area_struct *vma);<BR>};</FONT></P>
<P>/**<BR>&nbsp;*&nbsp;sysfs_bin_attr_init - initialize a dynamically allocated bin_attribute<BR>&nbsp;*&nbsp;@attr: struct bin_attribute to initialize<BR>&nbsp;*<BR>&nbsp;*&nbsp;Initialize a dynamically allocated struct bin_attribute so we<BR>&nbsp;*&nbsp;can make lockdep happy.&nbsp; This is a new requirement for<BR>&nbsp;*&nbsp;attributes and initially this is only needed when lockdep is<BR>&nbsp;*&nbsp;enabled.&nbsp; Lockdep gives a nice error when your attribute is<BR>&nbsp;*&nbsp;added to sysfs if you don't have this.<BR>&nbsp;*/<BR>#define sysfs_bin_attr_init(bin_attr) sysfs_attr_init(&amp;(bin_attr)-&gt;attr)</P>
<P>/* macros to create static binary attributes easier */<BR>#define __BIN_ATTR(_name, _mode, _read, _write, _size) {&nbsp;&nbsp;\<BR>&nbsp;.attr = { .name = __stringify(_name), .mode = _mode },&nbsp;&nbsp;\<BR>&nbsp;.read&nbsp;= _read,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;.write&nbsp;= _write,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;.size&nbsp;= _size,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>}</P>
<P>#define __BIN_ATTR_RO(_name, _size) {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;.attr&nbsp;= { .name = __stringify(_name), .mode = S_IRUGO },&nbsp;\<BR>&nbsp;.read&nbsp;= _name##_read,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;.size&nbsp;= _size,&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>}</P>
<P>#define __BIN_ATTR_RW(_name, _size) __BIN_ATTR(_name,&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (S_IWUSR | S_IRUGO), _name##_read,&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; _name##_write, _size)</P>
<P>#define __BIN_ATTR_NULL __ATTR_NULL</P>
<P>#define BIN_ATTR(_name, _mode, _read, _write, _size)&nbsp;&nbsp;&nbsp;\<BR>struct bin_attribute bin_attr_##_name = __BIN_ATTR(_name, _mode, _read,&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;_write, _size)</P>
<P>#define BIN_ATTR_RO(_name, _size)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>struct bin_attribute bin_attr_##_name = __BIN_ATTR_RO(_name, _size)</P>
<P>#define BIN_ATTR_RW(_name, _size)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>struct bin_attribute bin_attr_##_name = __BIN_ATTR_RW(_name, _size)</P>
<P><FONT class=extract>struct sysfs_ops {<BR>&nbsp;ssize_t&nbsp;(*show)(struct kobject *, struct attribute *, char *);<BR>&nbsp;ssize_t&nbsp;(*store)(struct kobject *, struct attribute *, const char *, size_t);<BR>};</FONT></P>
<P><FONT class=extract>#ifdef CONFIG_SYSFS</FONT></P>
<P><FONT class=extract>int __must_check sysfs_create_dir_ns(struct kobject *kobj, const void *ns);<BR>void sysfs_remove_dir(struct kobject *kobj);<BR>int __must_check sysfs_rename_dir_ns(struct kobject *kobj, const char *new_name,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const void *new_ns);<BR>int __must_check sysfs_move_dir_ns(struct kobject *kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct kobject *new_parent_kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const void *new_ns);<BR>int __must_check sysfs_create_mount_point(struct kobject *parent_kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const char *name);<BR>void sysfs_remove_mount_point(struct kobject *parent_kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const char *name);</FONT></P>
<P><FONT class=extract>int __must_check sysfs_create_file_ns(struct kobject *kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const struct attribute *attr,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const void *ns);<BR>int __must_check sysfs_create_files(struct kobject *kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const struct attribute **attr);<BR>int __must_check sysfs_chmod_file(struct kobject *kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const struct attribute *attr, umode_t mode);<BR>void sysfs_remove_file_ns(struct kobject *kobj, const struct attribute *attr,<BR>&nbsp;&nbsp;&nbsp;&nbsp; const void *ns);<BR>bool sysfs_remove_file_self(struct kobject *kobj, const struct attribute *attr);<BR>void sysfs_remove_files(struct kobject *kobj, const struct attribute **attr);</FONT></P>
<P><FONT class=extract>int __must_check sysfs_create_bin_file(struct kobject *kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const struct bin_attribute *attr);<BR>void sysfs_remove_bin_file(struct kobject *kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const struct bin_attribute *attr);</FONT></P>
<P><FONT class=extract>int __must_check sysfs_create_link(struct kobject *kobj, struct kobject *target,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const char *name);<BR>int __must_check sysfs_create_link_nowarn(struct kobject *kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct kobject *target,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const char *name);<BR>void sysfs_remove_link(struct kobject *kobj, const char *name);</FONT></P>
<P><FONT class=extract>int sysfs_rename_link_ns(struct kobject *kobj, struct kobject *target,<BR>&nbsp;&nbsp;&nbsp; const char *old_name, const char *new_name,<BR>&nbsp;&nbsp;&nbsp; const void *new_ns);</FONT></P>
<P><FONT class=extract>void sysfs_delete_link(struct kobject *dir, struct kobject *targ,<BR>&nbsp;&nbsp;&nbsp;const char *name);</FONT></P>
<P><FONT class=extract>int __must_check sysfs_create_group(struct kobject *kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const struct attribute_group *grp);<BR>int __must_check sysfs_create_groups(struct kobject *kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const struct attribute_group **groups);<BR>int sysfs_update_group(struct kobject *kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const struct attribute_group *grp);<BR>void sysfs_remove_group(struct kobject *kobj,<BR>&nbsp;&nbsp;&nbsp;const struct attribute_group *grp);<BR>void sysfs_remove_groups(struct kobject *kobj,<BR>&nbsp;&nbsp;&nbsp; const struct attribute_group **groups);<BR>int sysfs_add_file_to_group(struct kobject *kobj,<BR>&nbsp;&nbsp;&nbsp;const struct attribute *attr, const char *group);<BR>void sysfs_remove_file_from_group(struct kobject *kobj,<BR>&nbsp;&nbsp;&nbsp;const struct attribute *attr, const char *group);<BR>int sysfs_merge_group(struct kobject *kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const struct attribute_group *grp);<BR>void sysfs_unmerge_group(struct kobject *kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const struct attribute_group *grp);<BR>int sysfs_add_link_to_group(struct kobject *kobj, const char *group_name,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct kobject *target, const char *link_name);<BR>void sysfs_remove_link_from_group(struct kobject *kobj, const char *group_name,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const char *link_name);</FONT></P>
<P><FONT class=extract>void sysfs_notify(struct kobject *kobj, const char *dir, const char *attr);</FONT></P>
<P><FONT class=extract>int __must_check sysfs_init(void);</FONT></P>
<P><FONT class=extract>static inline void sysfs_enable_ns(struct kernfs_node *kn)<BR>{<BR>&nbsp;return kernfs_enable_ns(kn);<BR>}</FONT></P>
<P>#else /* CONFIG_SYSFS */</P>
<P>static inline int sysfs_create_dir_ns(struct kobject *kobj, const void *ns)<BR>{<BR>&nbsp;return 0;<BR>}</P>
<P>static inline void sysfs_remove_dir(struct kobject *kobj)<BR>{<BR>}</P>
<P>static inline int sysfs_rename_dir_ns(struct kobject *kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const char *new_name, const void *new_ns)<BR>{<BR>&nbsp;return 0;<BR>}</P>
<P>static inline int sysfs_move_dir_ns(struct kobject *kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct kobject *new_parent_kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const void *new_ns)<BR>{<BR>&nbsp;return 0;<BR>}</P>
<P>static inline int sysfs_create_mount_point(struct kobject *parent_kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const char *name)<BR>{<BR>&nbsp;return 0;<BR>}</P>
<P>static inline void sysfs_remove_mount_point(struct kobject *parent_kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const char *name)<BR>{<BR>}</P>
<P>static inline int sysfs_create_file_ns(struct kobject *kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const struct attribute *attr,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const void *ns)<BR>{<BR>&nbsp;return 0;<BR>}</P>
<P>static inline int sysfs_create_files(struct kobject *kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const struct attribute **attr)<BR>{<BR>&nbsp;return 0;<BR>}</P>
<P>static inline int sysfs_chmod_file(struct kobject *kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const struct attribute *attr, umode_t mode)<BR>{<BR>&nbsp;return 0;<BR>}</P>
<P>static inline void sysfs_remove_file_ns(struct kobject *kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const struct attribute *attr,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const void *ns)<BR>{<BR>}</P>
<P>static inline bool sysfs_remove_file_self(struct kobject *kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const struct attribute *attr)<BR>{<BR>&nbsp;return false;<BR>}</P>
<P>static inline void sysfs_remove_files(struct kobject *kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const struct attribute **attr)<BR>{<BR>}</P>
<P>static inline int sysfs_create_bin_file(struct kobject *kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const struct bin_attribute *attr)<BR>{<BR>&nbsp;return 0;<BR>}</P>
<P>static inline void sysfs_remove_bin_file(struct kobject *kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const struct bin_attribute *attr)<BR>{<BR>}</P>
<P>static inline int sysfs_create_link(struct kobject *kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct kobject *target, const char *name)<BR>{<BR>&nbsp;return 0;<BR>}</P>
<P>static inline int sysfs_create_link_nowarn(struct kobject *kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct kobject *target,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const char *name)<BR>{<BR>&nbsp;return 0;<BR>}</P>
<P>static inline void sysfs_remove_link(struct kobject *kobj, const char *name)<BR>{<BR>}</P>
<P>static inline int sysfs_rename_link_ns(struct kobject *k, struct kobject *t,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const char *old_name,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const char *new_name, const void *ns)<BR>{<BR>&nbsp;return 0;<BR>}</P>
<P>static inline void sysfs_delete_link(struct kobject *k, struct kobject *t,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const char *name)<BR>{<BR>}</P>
<P>static inline int sysfs_create_group(struct kobject *kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const struct attribute_group *grp)<BR>{<BR>&nbsp;return 0;<BR>}</P>
<P>static inline int sysfs_create_groups(struct kobject *kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const struct attribute_group **groups)<BR>{<BR>&nbsp;return 0;<BR>}</P>
<P>static inline int sysfs_update_group(struct kobject *kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;const struct attribute_group *grp)<BR>{<BR>&nbsp;return 0;<BR>}</P>
<P>static inline void sysfs_remove_group(struct kobject *kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const struct attribute_group *grp)<BR>{<BR>}</P>
<P>static inline void sysfs_remove_groups(struct kobject *kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const struct attribute_group **groups)<BR>{<BR>}</P>
<P>static inline int sysfs_add_file_to_group(struct kobject *kobj,<BR>&nbsp;&nbsp;const struct attribute *attr, const char *group)<BR>{<BR>&nbsp;return 0;<BR>}</P>
<P>static inline void sysfs_remove_file_from_group(struct kobject *kobj,<BR>&nbsp;&nbsp;const struct attribute *attr, const char *group)<BR>{<BR>}</P>
<P>static inline int sysfs_merge_group(struct kobject *kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const struct attribute_group *grp)<BR>{<BR>&nbsp;return 0;<BR>}</P>
<P>static inline void sysfs_unmerge_group(struct kobject *kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const struct attribute_group *grp)<BR>{<BR>}</P>
<P>static inline int sysfs_add_link_to_group(struct kobject *kobj,<BR>&nbsp;&nbsp;const char *group_name, struct kobject *target,<BR>&nbsp;&nbsp;const char *link_name)<BR>{<BR>&nbsp;return 0;<BR>}</P>
<P>static inline void sysfs_remove_link_from_group(struct kobject *kobj,<BR>&nbsp;&nbsp;const char *group_name, const char *link_name)<BR>{<BR>}</P>
<P>static inline void sysfs_notify(struct kobject *kobj, const char *dir,<BR>&nbsp;&nbsp;&nbsp;&nbsp;const char *attr)<BR>{<BR>}</P>
<P>static inline int __must_check sysfs_init(void)<BR>{<BR>&nbsp;return 0;<BR>}</P>
<P>static inline void sysfs_enable_ns(struct kernfs_node *kn)<BR>{<BR>}</P>
<P>#endif /* CONFIG_SYSFS */</P>
<P>static inline int __must_check sysfs_create_file(struct kobject *kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const struct attribute *attr)<BR>{<BR>&nbsp;return sysfs_create_file_ns(kobj, attr, NULL);<BR>}</P>
<P>static inline void sysfs_remove_file(struct kobject *kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const struct attribute *attr)<BR>{<BR>&nbsp;sysfs_remove_file_ns(kobj, attr, NULL);<BR>}</P>
<P>static inline int sysfs_rename_link(struct kobject *kobj, struct kobject *target,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const char *old_name, const char *new_name)<BR>{<BR>&nbsp;return sysfs_rename_link_ns(kobj, target, old_name, new_name, NULL);<BR>}</P>
<P>static inline void sysfs_notify_dirent(struct kernfs_node *kn)<BR>{<BR>&nbsp;kernfs_notify(kn);<BR>}</P>
<P>static inline struct kernfs_node *sysfs_get_dirent(struct kernfs_node *parent,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; const unsigned char *name)<BR>{<BR>&nbsp;return kernfs_find_and_get(parent, name);<BR>}</P>
<P>static inline struct kernfs_node *sysfs_get(struct kernfs_node *kn)<BR>{<BR>&nbsp;kernfs_get(kn);<BR>&nbsp;return kn;<BR>}</P>
<P>static inline void sysfs_put(struct kernfs_node *kn)<BR>{<BR>&nbsp;kernfs_put(kn);<BR>}</P>
<P>#endif /* _SYSFS_H_ */