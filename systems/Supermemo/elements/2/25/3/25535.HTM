/**<BR>&nbsp;* <FONT class=clozed>early_platform_driver_register</FONT> - register early platform driver<BR>&nbsp;* @epdrv: early_platform driver structure<BR>&nbsp;* @buf: string passed from early_param()<BR>&nbsp;*<BR>&nbsp;* Helper function for early_platform_init() / early_platform_init_buffer()<BR>&nbsp;*/<BR>int __init early_platform_driver_register(struct early_platform_driver *epdrv,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; char *buf)<BR>{<BR>&nbsp;char *tmp;<BR>&nbsp;int n; 
<P></P>
<P>&nbsp;/* Simply add the driver to the end of the global list.<BR>&nbsp; * Drivers will by default be put on the list in compiled-in order.<BR>&nbsp; */<BR>&nbsp;if (!epdrv-&gt;list.next) {<BR>&nbsp;&nbsp;INIT_LIST_HEAD(&amp;epdrv-&gt;list);<BR>&nbsp;&nbsp;list_add_tail(&amp;epdrv-&gt;list, &amp;early_platform_driver_list);<BR>&nbsp;}</P>
<P>&nbsp;/* If the user has specified device then make sure the driver<BR>&nbsp; * gets prioritized. The driver of the last device specified on<BR>&nbsp; * command line will be put first on the list.<BR>&nbsp; */<BR>&nbsp;n = strlen(epdrv-&gt;pdrv-&gt;driver.name);<BR>&nbsp;if (buf &amp;&amp; !strncmp(buf, epdrv-&gt;pdrv-&gt;driver.name, n)) {<BR>&nbsp;&nbsp;list_move(&amp;epdrv-&gt;list, &amp;early_platform_driver_list);</P>
<P>&nbsp;&nbsp;/* Allow passing parameters after device name */<BR>&nbsp;&nbsp;if (buf[n] == '\0' || buf[n] == ',')<BR>&nbsp;&nbsp;&nbsp;epdrv-&gt;requested_id = -1;<BR>&nbsp;&nbsp;else {<BR>&nbsp;&nbsp;&nbsp;epdrv-&gt;requested_id = simple_strtoul(&amp;buf[n + 1],<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;tmp, 10);</P>
<P>&nbsp;&nbsp;&nbsp;if (buf[n] != '.' || (tmp == &amp;buf[n + 1])) {<BR>&nbsp;&nbsp;&nbsp;&nbsp;epdrv-&gt;requested_id = EARLY_PLATFORM_ID_ERROR;<BR>&nbsp;&nbsp;&nbsp;&nbsp;n = 0;<BR>&nbsp;&nbsp;&nbsp;} else<BR>&nbsp;&nbsp;&nbsp;&nbsp;n += strcspn(&amp;buf[n + 1], ",") + 1;<BR>&nbsp;&nbsp;}</P>
<P>&nbsp;&nbsp;if (buf[n] == ',')<BR>&nbsp;&nbsp;&nbsp;n++;</P>
<P>&nbsp;&nbsp;if (epdrv-&gt;bufsize) {<BR>&nbsp;&nbsp;&nbsp;memcpy(epdrv-&gt;buffer, &amp;buf[n],<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; min_t(int, epdrv-&gt;bufsize, strlen(&amp;buf[n]) + 1));<BR>&nbsp;&nbsp;&nbsp;epdrv-&gt;buffer[epdrv-&gt;bufsize - 1] = '\0';<BR>&nbsp;&nbsp;}<BR>&nbsp;}</P>
<P>&nbsp;return 0;<BR>}