/**<BR>&nbsp;* platform_device_del - remove a platform-level device<BR>&nbsp;* @pdev: platform device we're removing<BR>&nbsp;*<BR>&nbsp;* Note that this function will also release all memory- and port-based<BR>&nbsp;* resources owned by the device (@dev-&gt;resource).&nbsp; This function must<BR>&nbsp;* <FONT class=clozed>_only_ be externally called in error cases</FONT>.&nbsp; All other usage is a bug.<BR>&nbsp;*/<BR>void platform_device_del(struct platform_device *pdev)<BR>{<BR>&nbsp;int i; 
<P></P>
<P>&nbsp;if (pdev) {<BR>&nbsp;&nbsp;<FONT class=clozed>device_del(&amp;pdev-&gt;dev)</FONT>;</P>
<P>&nbsp;&nbsp;if (pdev-&gt;id_auto) {<BR>&nbsp;&nbsp;&nbsp;ida_simple_remove(&amp;platform_devid_ida, pdev-&gt;id);<BR>&nbsp;&nbsp;&nbsp;pdev-&gt;id = PLATFORM_DEVID_AUTO;<BR>&nbsp;&nbsp;}</P>
<P><FONT class=clozed>&nbsp;&nbsp;for (i = 0; i &lt; pdev-&gt;num_resources; i++) {<BR>&nbsp;&nbsp;&nbsp;struct resource *r = &amp;pdev-&gt;resource[i];<BR>&nbsp;&nbsp;&nbsp;unsigned long type = resource_type(r);</FONT></P>
<P><FONT class=clozed>&nbsp;&nbsp;&nbsp;if (type == IORESOURCE_MEM || type == IORESOURCE_IO)<BR>&nbsp;&nbsp;&nbsp;&nbsp;release_resource(r);<BR>&nbsp;&nbsp;}</FONT><BR>&nbsp;}<BR>}<BR>EXPORT_SYMBOL_GPL(platform_device_del);