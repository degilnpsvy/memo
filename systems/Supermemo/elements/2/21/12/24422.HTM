extern struct workqueue_struct *<BR>__alloc_workqueue_key(const char *fmt, unsigned int flags, int max_active,<BR>&nbsp;struct lock_class_key *key, const char *lock_name, ...) __printf(1, 6);
<P></P>
<P>/**<BR>&nbsp;* alloc_workqueue - allocate a workqueue<BR>&nbsp;* @fmt: printf format for the name of the workqueue<BR>&nbsp;* @flags: WQ_* flags<BR>&nbsp;* @max_active: max in-flight work items, 0 for default<BR>&nbsp;* @args: args for @fmt<BR>&nbsp;*<BR>&nbsp;* Allocate a workqueue with the specified parameters.&nbsp; For detailed<BR>&nbsp;* information on WQ_* flags, please refer to Documentation/workqueue.txt.<BR>&nbsp;*<BR>&nbsp;* The __lock_name macro dance is to guarantee that single lock_class_key<BR>&nbsp;* doesn't end up with different namesm, which isn't allowed by lockdep.<BR>&nbsp;*<BR>&nbsp;* RETURNS:<BR>&nbsp;* Pointer to the allocated workqueue on success, %NULL on failure.<BR>&nbsp;*/<BR>#ifdef CONFIG_LOCKDEP<BR>#define alloc_workqueue(fmt, flags, max_active, args...)&nbsp;&nbsp;\<BR>({&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;static struct lock_class_key __key;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;const char *__lock_name;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;__lock_name = #fmt#args;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\<BR>&nbsp;__alloc_workqueue_key((fmt), (flags), (max_active),&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; &amp;__key, __lock_name, ##args);&nbsp;&nbsp;\<BR>})<BR>#else<BR>#define alloc_workqueue(fmt, flags, max_active, args...)&nbsp;&nbsp;\<BR>&nbsp;__alloc_workqueue_key((fmt), (flags), (max_active),&nbsp;&nbsp;\<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; NULL, NULL, ##args)<BR>#endif