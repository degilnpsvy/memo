<H2>Concurrency Managed Workqueue&#20043;&#65288;&#19968;&#65289;&#65306;workqueue&#30340;&#22522;&#26412;&#27010;&#24565;</H2>
<P class=date>&#20316;&#32773;&#65306;<A href="http://www.wowotech.net/author/3">linuxer</A> &#21457;&#24067;&#20110;&#65306;2015-7-15 18:47 &#20998;&#31867;&#65306;<A href="http://www.wowotech.net/sort/irq_subsystem">&#20013;&#26029;&#23376;&#31995;&#32479;</A> </P>
<P>&#19968;&#12289;&#21069;&#35328; </P>
<P>workqueue&#26159;&#19968;&#20010;&#39537;&#21160;&#24037;&#31243;&#24072;&#24120;&#29992;&#30340;&#24037;&#20855;&#65292;&#22312;&#26087;&#30340;&#20869;&#26680;&#20013;&#65288;&#25351;2.6.36&#20043;&#21069;&#30340;&#20869;&#26680;&#29256;&#26412;&#65289;workqueue&#20195;&#30721;&#27604;&#36739;&#31616;&#21333;&#65288;&#22823;&#27010;800&#34892;&#65289;&#65292;&#22312;2.6.36&#20869;&#26680;&#29256;&#26412;&#20013;&#24341;&#20837;&#20102;CMWQ&#65288;Concurrency Managed Workqueue&#65289;&#65292;workqueue.c&#30340;&#20195;&#30721;&#33192;&#32960;&#21040;5000&#22810;&#34892;&#65292;&#20026;&#20102;&#28145;&#20837;&#30340;&#29702;&#35299;CMWQ&#65292;&#21333;&#21333;&#19968;&#20221;&#25991;&#26723;&#24456;&#38590;&#23558;&#20854;&#25551;&#36848;&#30340;&#28165;&#26970;&#65292;&#22240;&#27492;CMWQ&#20316;&#20026;&#19968;&#20010;&#20027;&#39064;&#23558;&#20250;&#20135;&#29983;&#19968;&#31995;&#21015;&#30340;&#25991;&#26723;&#65292;&#26412;&#25991;&#26159;&#36825;&#19968;&#31995;&#21015;&#25991;&#26723;&#20013;&#30340;&#31532;&#19968;&#31687;&#65292;&#20027;&#35201;&#26159;&#22522;&#20110;2.6.23&#20869;&#26680;&#30340;&#20195;&#30721;&#23454;&#29616;&#26469;&#35762;&#36848;workqueue&#30340;&#19968;&#20123;&#22522;&#26412;&#27010;&#24565;&#65288;&#20043;&#25152;&#20197;&#36873;&#25321;&#36739;&#20302;&#29256;&#26412;&#30340;&#20869;&#26680;&#65292;&#20027;&#35201;&#26159;&#22240;&#20026;&#20195;&#30721;&#31616;&#21333;&#65292;&#36866;&#21512;&#29702;&#35299;&#22522;&#26412;&#27010;&#24565;&#65289;&#12290; </P>
<P>&nbsp; </P>
<P>&#20108;&#12289;&#20026;&#20309;&#38656;&#35201;workqueue </P>
<P>1&#12289;&#20160;&#20040;&#26159;&#20013;&#26029;&#19978;&#19979;&#25991;&#21644;&#36827;&#31243;&#19978;&#19979;&#25991;&#65311; </P>
<P>&#22312;&#32487;&#32493;&#25551;&#36848;workqueue&#20043;&#21069;&#65292;&#25105;&#20204;&#20808;&#26803;&#29702;&#19968;&#19979;&#20013;&#26029;&#19978;&#19979;&#25991;&#21644;&#36827;&#31243;&#19978;&#19979;&#25991;&#12290;&#23545;&#20110;&#20013;&#26029;&#19978;&#19979;&#25991;&#65292;&#20027;&#35201;&#21253;&#25324;&#20004;&#31181;&#24773;&#20917;&#65306; </P>
<P>&#65288;1&#65289;&#25191;&#34892;&#35813;&#20013;&#26029;&#30340;&#22788;&#29702;&#20989;&#25968;&#65288;&#25105;&#20204;&#19968;&#33324;&#31216;&#20043;interrupt handler&#25110;&#32773;&#21483;&#20570;top half&#65289;&#65292;&#20063;&#23601;&#26159;hard interrupt context </P>
<P>&#65288;2&#65289;&#25191;&#34892;&#36719;&#20013;&#26029;&#22788;&#29702;&#20989;&#25968;&#65292;&#25191;&#34892;tasklet&#20989;&#25968;&#65292;&#25191;&#34892;timer callback&#20989;&#25968;&#12290;&#65288;&#25110;&#32773;&#32479;&#31216;bottom half&#65289;&#65292;&#20063;&#23601;&#26159;software interrupt context&#12290; </P>
<P>top half&#24403;&#28982;&#26159;&#32477;&#23545;&#30340;interrupt context&#65292;&#20294;&#23545;&#20110;&#19978;&#38754;&#30340;&#31532;&#20108;&#31181;&#24773;&#20917;&#65292;&#31245;&#24494;&#26377;&#20123;&#22797;&#26434;&#65292;&#20854;&#25191;&#34892;&#30340;&#29616;&#22330;&#21253;&#25324;&#65306; </P>
<P>&#65288;1&#65289;&#25191;&#34892;&#23436;top half&#65292;&#31435;&#21051;&#21551;&#21160;bottom half&#30340;&#25191;&#34892; </P>
<P>&#65288;2&#65289;&#24403;&#36127;&#33655;&#27604;&#36739;&#37325;&#30340;&#26102;&#20505;&#65288;&#20013;&#26029;&#20135;&#29983;&#30340;&#27604;&#36739;&#22810;&#65289;&#65292;&#31995;&#32479;&#22312;&#19968;&#27573;&#26102;&#38388;&#20869;&#37117;&#22312;&#22788;&#29702;interrupt handler&#20197;&#21450;&#30456;&#20851;&#30340;softirq&#65292;&#20174;&#32780;&#23548;&#33268;&#26080;&#27861;&#35843;&#24230;&#21040;&#36827;&#31243;&#25191;&#34892;&#65292;&#36825;&#26102;&#20505;&#65292;linux kernel&#37319;&#29992;&#20102;&#23558;softirq&#25512;&#36831;&#21040;softirqd&#36825;&#20010;&#20869;&#26680;&#32447;&#31243;&#20013;&#25191;&#34892; </P>
<P>&#65288;3&#65289;&#36827;&#31243;&#22312;&#20869;&#26680;&#24577;&#36816;&#34892;&#30340;&#26102;&#20505;&#65292;&#30001;&#20110;&#20869;&#26680;&#21516;&#27493;&#30340;&#38656;&#27714;&#65292;&#38656;&#35201;&#20351;&#29992;local_bh_disable/local_bh_enable&#26469;&#20445;&#25252;&#20020;&#30028;&#21306;&#12290;&#22312;&#20020;&#30028;&#21306;&#20195;&#30721;&#25191;&#34892;&#30340;&#26102;&#20505;&#65292;&#26377;&#21487;&#33021;&#20013;&#26029;&#35302;&#21457;&#24182;raise softirq&#65292;&#20294;&#26159;&#30001;&#20110;softirq&#22788;&#20110;disable&#29366;&#24577;&#20174;&#32780;&#22312;&#20013;&#26029;&#36820;&#22238;&#30340;&#26102;&#20505;&#27809;&#26377;&#21150;&#27861;invoke softirq&#30340;&#25191;&#34892;&#65292;&#24403;&#35843;&#29992;local_bh_enable&#30340;&#26102;&#20505;&#65292;&#20250;&#35843;&#29992;&#24050;&#32463;&#35302;&#21457;&#30340;&#37027;&#20010;softirq handler&#12290; </P>
<P>&#23545;&#20110;&#19978;&#38754;&#30340;&#24773;&#20917;1&#21644;&#24773;&#20917;3&#65292;&#27627;&#26080;&#30097;&#38382;&#65292;&#32477;&#23545;&#30340;&#20013;&#26029;&#19978;&#19979;&#25991;&#65292;&#25191;&#34892;&#29616;&#22330;&#30340;current task&#21644;softirq handler&#27809;&#26377;&#20219;&#20309;&#30340;&#20851;&#31995;&#12290;&#23545;&#20110;&#24773;&#20917;2&#65292;&#34429;&#28982;&#26159;&#22312;&#19987;&#23646;&#30340;&#20869;&#26680;&#32447;&#31243;&#20013;&#25191;&#34892;&#65292;&#20294;&#26159;&#25105;&#20063;&#20542;&#21521;&#23558;&#20854;&#24402;&#20837;software interrupt context&#12290; </P>
<P>&#23545;&#20110;linux&#32780;&#35328;&#65292;&#20013;&#26029;&#19978;&#19979;&#25991;&#37117;&#26159;&#24778;&#40511;&#19968;&#30629;&#65292;&#21482;&#26377;&#36827;&#31243;&#65288;&#32447;&#31243;&#12289;&#25110;&#32773;&#21483;&#20570;task&#65289;&#26159;&#27704;&#24658;&#30340;&#12290;&#25972;&#20010;kernel&#37117;&#26159;&#22312;&#21508;&#31181;&#36827;&#31243;&#20013;&#20999;&#26469;&#20999;&#21435;&#65292;&#19968;&#20250;&#20799;&#36816;&#34892;&#22312;&#36827;&#31243;&#30340;&#29992;&#25143;&#31354;&#38388;&#65292;&#19968;&#20250;&#20799;&#36890;&#36807;&#31995;&#32479;&#35843;&#29992;&#36827;&#20837;&#20869;&#26680;&#31354;&#38388;&#12290;&#24403;&#28982;&#65292;&#31995;&#32479;&#19981;&#26159;&#23553;&#38381;&#30340;&#65292;&#36824;&#26159;&#38656;&#35201;&#36890;&#36807;&#22806;&#35774;&#21644;User&#25110;&#32773;&#20854;&#20182;&#30340;&#31995;&#32479;&#36827;&#34892;&#20132;&#20114;&#65292;&#36825;&#37324;&#23601;&#38656;&#35201;&#20013;&#26029;&#19978;&#19979;&#25991;&#20102;&#65292;&#22312;&#20013;&#26029;&#19978;&#19979;&#25991;&#20013;&#65292;&#23436;&#25104;&#30828;&#20214;&#30340;&#20132;&#20114;&#65292;&#26368;&#32456;&#25226;&#25968;&#25454;&#20132;&#20184;&#36827;&#31243;&#25110;&#32773;&#36827;&#31243;&#23558;&#25968;&#25454;&#20256;&#36882;&#32473;&#22806;&#35774;&#12290;&#36827;&#31243;&#19978;&#19979;&#25991;&#26377;&#20016;&#23500;&#30340;&#12289;&#23646;&#20110;&#33258;&#24049;&#30340;&#36164;&#28304;&#65306;&#20363;&#22914;&#26377;&#30828;&#20214;&#19978;&#19979;&#25991;&#65292;&#26377;&#29992;&#25143;&#26632;&#12289;&#26377;&#20869;&#26680;&#26632;&#65292;&#26377;&#29992;&#25143;&#31354;&#38388;&#30340;&#27491;&#25991;&#27573;&#12289;&#25968;&#25454;&#27573;&#31561;&#31561;&#12290;&#32780;&#20013;&#26029;&#19978;&#19979;&#25991;&#20160;&#20040;&#20063;&#27809;&#26377;&#65292;&#21482;&#26377;&#19968;&#27573;&#25191;&#34892;&#20195;&#30721;&#21450;&#20854;&#38468;&#23646;&#30340;&#25968;&#25454;&#12290;&#37027;&#20040;&#38382;&#39064;&#26469;&#20102;&#65306;&#20013;&#26029;&#25191;&#34892;thread&#20013;&#30340;&#20020;&#26102;&#21464;&#37327;&#24212;&#35813;&#20445;&#23384;&#22312;&#26632;&#19978;&#65292;&#37027;&#20040;&#20013;&#26029;&#19978;&#19979;&#25991;&#30340;&#26632;&#22312;&#21738;&#37324;&#65311;&#20013;&#26029;&#19978;&#19979;&#25991;&#27809;&#26377;&#23646;&#20110;&#33258;&#24049;&#30340;&#26632;&#65292;&#32959;&#20040;&#21150;&#65311;&#37027;&#20040;&#21482;&#33021;&#20511;&#20102;&#65292;&#24403;&#20013;&#26029;&#21457;&#29983;&#30340;&#26102;&#20505;&#65292;&#36935;&#21040;&#21738;&#19968;&#20010;&#36827;&#31243;&#23601;&#20511;&#29992;&#21738;&#19968;&#20010;&#36827;&#31243;&#30340;&#36164;&#28304;&#65288;&#36935;&#21040;&#23601;&#26159;&#32536;&#20998;&#21584;&#65289;&#12290; </P>
<P>2&#12289;&#22914;&#20309;&#21028;&#23450;&#24403;&#21069;&#30340;context&#65311; </P>
<P>OK&#65292;&#19978;&#19968;&#33410;&#25551;&#36848;&#20013;&#26029;&#19978;&#19979;&#25991;&#21644;&#36827;&#31243;&#19978;&#19979;&#25991;&#30340;&#21547;&#20041;&#65292;&#37027;&#20040;&#20195;&#30721;&#22914;&#20309;&#30693;&#36947;&#33258;&#24049;&#30340;&#19978;&#19979;&#25991;&#21602;&#65311;&#19979;&#38754;&#25105;&#20204;&#32467;&#21512;&#20195;&#30721;&#26469;&#36827;&#19968;&#27493;&#20998;&#26512;&#12290;in_irq()&#26159;&#29992;&#26469;&#21028;&#26029;&#26159;&#21542;&#22312;hard interrupt context&#30340;&#65292;&#25105;&#20204;&#19968;&#36215;&#26469;&#26469;&#30475;&#30475;in_irq()&#26159;&#22914;&#20309;&#23450;&#20041;&#30340;&#65306; </P>
<BLOCKQUOTE>
<P>#define in_irq()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (hardirq_count()) </P>
<P>#define hardirq_count()&nbsp;&nbsp;&nbsp; (preempt_count() &amp; HARDIRQ_MASK) </P></BLOCKQUOTE>
<P>top half&#30340;&#22788;&#29702;&#26159;&#34987;irq_enter()&#21644;irq_exit()&#25152;&#21253;&#22260;&#65292;&#22312;irq_enter&#20989;&#25968;&#20013;&#20250;&#35843;&#29992;preempt_count_add(HARDIRQ_OFFSET)&#65292;&#20026;hardirq count&#30340;bit field&#22686;&#21152;1&#12290;&#22312;irq_exit&#20989;&#25968;&#20013;&#65292;&#20250;&#35843;&#29992;preempt_count_sub(HARDIRQ_OFFSET)&#65292;&#20026;hardirq count&#30340;bit field&#20943;&#21435;1&#12290;&#22240;&#27492;&#65292;&#21482;&#35201;in_irq&#38750;&#38646;&#65292;&#21017;&#35828;&#26126;&#22312;&#20013;&#26029;&#19978;&#19979;&#25991;&#24182;&#19988;&#22788;&#20110;top half&#37096;&#20998;&#12290; </P>
<P>&#35299;&#20915;&#20102;hard interrupt context&#65292;&#25105;&#20204;&#26469;&#30475;software interrupt context&#12290;&#22914;&#20309;&#21028;&#23450;&#20195;&#30721;&#24403;&#21069;&#27491;&#22312;&#25191;&#34892;bottom half&#65288;softirq&#12289;tasklet&#12289;timer&#65289;&#21602;&#65311;in_serving_softirq&#32473;&#20986;&#20102;&#31572;&#26696;&#65306; </P>
<BLOCKQUOTE>
<P>#define in_serving_softirq()&nbsp;&nbsp;&nbsp; (softirq_count() &amp; SOFTIRQ_OFFSET) </P></BLOCKQUOTE>
<P>&#38656;&#35201;&#27880;&#24847;&#30340;&#26159;&#65306;&#22312;2.6.23&#20869;&#26680;&#20013;&#27809;&#26377;&#36825;&#20010;&#23450;&#20041;&#65288;&#19978;&#38754;&#30340;&#20195;&#30721;&#26469;&#33258;4.0&#30340;&#20869;&#26680;&#65289;&#12290;&#20869;&#26680;&#20013;&#36824;&#26377;&#19968;&#20010;&#31867;&#20284;&#30340;&#23450;&#20041;&#65306; </P>
<BLOCKQUOTE>
<P>#define in_softirq()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (softirq_count()) </P>
<P>#define softirq_count()&nbsp;&nbsp;&nbsp; (preempt_count() &amp; SOFTIRQ_MASK) </P></BLOCKQUOTE>
<P>in_softirq&#23450;&#20041;&#20102;&#26356;&#22823;&#30340;&#19968;&#20010;&#21306;&#22495;&#65292;&#19981;&#20165;&#20165;&#21253;&#25324;&#20102;in_serving_softirq&#19978;&#19979;&#25991;&#65292;&#36824;&#21253;&#25324;&#20102;disable bottom half&#30340;&#22330;&#26223;&#12290;&#25105;&#20204;&#29992;&#19979;&#38754;&#19968;&#20010;&#22270;&#29255;&#26469;&#25551;&#36848;&#65306; </P>
<P><A href="http://www.wowotech.net/content/uploadfile/201507/84d72f610311e1d3289ed70eb8da5d3420150715104303.gif"><IMG title=sir-context style="BORDER-LEFT-WIDTH: 0px; BORDER-RIGHT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; DISPLAY: inline; BORDER-TOP-WIDTH: 0px" border=0 alt=sir-context src="http://www.wowotech.net/content/uploadfile/201507/77076337836fe9a30a3e8ac3044a605b20150715104416.gif" width=675 height=347></A> </P>
<P>&#25105;&#20204;&#30693;&#36947;&#65292;&#22312;&#36827;&#31243;&#19978;&#19979;&#25991;&#20013;&#65292;&#30001;&#20110;&#20869;&#26680;&#21516;&#27493;&#30340;&#35201;&#27714;&#21487;&#33021;&#20250;&#31105;&#27490;softirq&#12290;&#36825;&#26102;&#20505;&#65292;kernel&#25552;&#20379;&#20102;local_bf_enable&#21644;local_bf_disable&#36825;&#26679;&#30340;&#25509;&#21475;&#20989;&#25968;&#65292;&#36825;&#31181;&#22330;&#26223;&#19979;&#65292;&#22312;local_bf_enable&#20989;&#25968;&#20013;&#20250;&#25191;&#34892;&#36719;&#20013;&#26029;handler&#65288;&#22312;&#20020;&#30028;&#21306;&#20013;&#65292;&#34429;&#28982;raise&#20102;softirq&#65292;&#20294;&#26159;&#30001;&#20110;disable&#20102;bottom half&#65292;&#22240;&#27492;&#26080;&#27861;&#25191;&#34892;&#65292;&#21482;&#26377;&#31561;&#21040;enable&#30340;&#26102;&#20505;&#31532;&#19968;&#26102;&#38388;&#25191;&#34892;&#35813;softirq handler&#65289;&#12290;in_softirq&#21253;&#25324;&#20102;&#36827;&#31243;&#19978;&#19979;&#25991;&#20013;disable bottom half&#30340;&#20020;&#30028;&#21306;&#37096;&#20998;&#65292;&#32780;in_serving_softirq&#31934;&#20934;&#30340;&#21629;&#20013;&#20102;software interrupt context&#12290; </P>
<P>&#20869;&#26680;&#20013;&#36824;&#26377;&#19968;&#20010;in_interrupt&#30340;&#23439;&#23450;&#20041;&#65292;&#20174;&#23427;&#30340;&#21517;&#23383;&#19978;&#30475;&#20284;&#20046;&#26159;&#23450;&#20041;&#20102;hard interrupt context&#21644;software interrupt context&#65292;&#21040;&#24213;&#26159;&#24590;&#26679;&#30340;&#21602;&#65311;&#25105;&#20204;&#26469;&#30475;&#30475;&#23450;&#20041;&#65306; </P>
<BLOCKQUOTE>#define in_interrupt()&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (irq_count()) <BR>#define irq_count()&nbsp;&nbsp;&nbsp; (preempt_count() &amp; (HARDIRQ_MASK | SOFTIRQ_MASK \ <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; | NMI_MASK)) </BLOCKQUOTE>
<P>&#27880;&#65306;&#19978;&#38754;&#30340;&#20195;&#30721;&#26469;&#33258;4.0&#30340;&#20869;&#26680;&#12290;HARDIRQ_MASK&#23450;&#20041;&#20102;hard interrupt contxt&#65292;NMI_MASK&#23450;&#20041;&#20102;NMI&#65288;&#23545;&#20110;ARM&#26159;FIQ&#65289;&#31867;&#22411;&#30340;hard interrupt context&#65292;SOFTIRQ_MASK&#21253;&#25324;software interrupt context&#21152;&#19978;&#31105;&#27490;softirq&#24773;&#20917;&#19979;&#30340;&#36827;&#31243;&#19978;&#19979;&#25991;&#12290;&#22240;&#27492;&#65292;in_interrupt()&#38500;&#20102;&#21253;&#25324;&#20102;&#20013;&#26029;&#19978;&#19979;&#25991;&#30340;&#22330;&#26223;&#65292;&#36824;&#21253;&#25324;&#20102;&#36827;&#31243;&#19978;&#19979;&#25991;&#31105;&#27490;softirq&#30340;&#22330;&#26223;&#12290; </P>
<P>&#36824;&#26377;&#19968;&#20010;in_atomic&#30340;&#23439;&#23450;&#20041;&#65292;&#22823;&#23478;&#21487;&#20197;&#33258;&#34892;&#23398;&#20064;&#65292;&#36825;&#37324;&#19981;&#20877;&#25551;&#36848;&#20102;&#12290; </P>
<P>3&#12289;&#20026;&#20309;&#20013;&#26029;&#19978;&#19979;&#25991;&#19981;&#33021;sleep&#65311; </P>
<P>linux&#39537;&#21160;&#24037;&#31243;&#24072;&#24212;&#35813;&#37117;&#20250;&#21548;&#35828;&#36807;&#36825;&#21477;&#35805;&#65306;&#20013;&#26029;&#19978;&#19979;&#25991;&#19981;&#33021;sleep&#65292;&#20294;&#26159;&#20026;&#20160;&#20040;&#21602;&#65311;&#36825;&#20010;&#38382;&#39064;&#21487;&#20197;&#20180;&#32454;&#24605;&#32771;&#19968;&#19979;&#12290;&#25152;&#35859;sleep&#23601;&#26159;&#35843;&#24230;&#22120;&#25346;&#36215;&#24403;&#21069;&#30340;task&#65292;&#28982;&#21518;&#22312;run queue&#20013;&#36873;&#25321;&#21478;&#22806;&#19968;&#20010;&#21512;&#36866;&#30340;task&#36816;&#34892;&#12290;&#35268;&#21017;&#24456;&#31616;&#21333;&#65292;&#19981;&#36807;&#23454;&#38469;&#25805;&#20316;&#23601;&#27809;&#26377;&#37027;&#20040;&#23481;&#26131;&#20102;&#12290;&#26377;&#19968;&#27425;&#65292;&#25105;&#20204;&#35843;&#35797;wifi&#39537;&#21160;&#30340;&#26102;&#20505;&#65292;&#26377;&#19968;&#20010;issue&#24456;&#26377;&#24847;&#24605;&#65306;&#27491;&#24120;&#24037;&#20316;&#30340;&#26102;&#20505;&#19968;&#20999;&#37117;&#26159;OK&#30340;&#65292;&#20294;&#26159;&#24403;&#36827;&#34892;&#21387;&#21147;&#27979;&#35797;&#30340;&#26102;&#20505;&#65292;&#31995;&#32479;&#23601;&#20250;down&#25481;&#12290;&#26368;&#21518;&#21457;&#29616;&#26159;&#22312;timer&#30340;callback&#20989;&#25968;&#20013;&#36759;&#36716;&#22810;&#27425;&#35843;&#29992;&#20102;kmalloc&#20989;&#25968;&#65292;&#25105;&#20204;&#37117;&#30693;&#36947;&#65292;&#22312;&#26576;&#20123;&#24773;&#20917;&#19979;&#65292;kmalloc&#20250;&#23548;&#33268;&#24403;&#21069;&#36827;&#31243;&#34987;block&#12290; </P>
<P>&#20174;&#25805;&#20316;&#31995;&#32479;&#35774;&#35745;&#30340;&#35282;&#24230;&#26469;&#30475;&#65292;&#22823;&#37096;&#20998;&#30340;OS&#37117;&#35268;&#23450;&#20013;&#26029;&#19978;&#19979;&#25991;&#19981;&#33021;sleep&#65292;&#26377;&#20123;&#26159;&#20363;&#22806;&#30340;&#65292;&#27604;&#22914;solaris&#65292;&#27599;&#20010;&#20013;&#26029;&#30340;handler&#37117;&#26159;&#22312;&#23427;&#33258;&#24049;&#30340;task&#20013;&#22788;&#29702;&#30340;&#65292;&#22240;&#27492;&#21487;&#20197;&#22312;&#20013;&#26029;handler&#20013;sleep&#12290;&#19981;&#36807;&#22312;&#36825;&#26679;&#30340;&#31995;&#32479;&#20013;&#65288;&#24456;&#22810;RTOS&#20063;&#26159;&#22914;&#27492;&#22788;&#29702;&#30340;&#65289;&#65292;&#23454;&#38469;&#30340;&#20013;&#26029;&#19978;&#19979;&#25991;&#38750;&#24120;&#30340;&#34180;&#65292;&#21487;&#33021;&#23601;&#26159;&#21521;&#35813;&#20013;&#26029;handler&#23545;&#24212;&#30340;task&#21457;&#36865;&#19968;&#20010;message&#65292;&#25152;&#26377;&#30340;&#22788;&#29702;&#65288;ack&#20013;&#26029;&#12289;mask&#20013;&#26029;&#12289;copy FIFO&#31561;&#65289;&#37117;&#26159;&#22312;&#35813;&#20013;&#26029;&#30340;task&#20013;&#22788;&#29702;&#12290;&#36825;&#26679;&#30340;&#31995;&#32479;&#20013;&#65292;&#24403;&#28982;&#21487;&#20197;&#22312;&#20013;&#26029;handler&#20013;sleep&#65292;&#19981;&#36807;&#36825;&#26377;&#28857;&#20599;&#25442;&#27010;&#24565;&#65292;&#27605;&#31455;&#36825;&#26102;&#20505;&#30340;&#19978;&#19979;&#25991;&#19981;&#26159;interrupt context&#65292;&#26356;&#20934;&#30830;&#30340;&#35828;&#26159;&#20013;&#26029;&#22788;&#29702;&#30340;process context&#65292;&#36825;&#26679;&#30340;&#31995;&#32479;interrupt context&#38750;&#24120;&#38750;&#24120;&#30340;&#31616;&#21333;&#65292;&#20960;&#20046;&#27809;&#26377;&#12290; </P>
<P>&#24403;&#28982;&#65292;linux&#30340;&#35774;&#35745;&#24182;&#38750;&#22914;&#27492;&#65288;&#20854;&#23454;&#22312;rt linux&#20013;&#24050;&#32463;&#26377;&#20102;&#36825;&#26679;&#30340;&#33495;&#22836;&#65292;&#21487;&#20197;&#21442;&#32771;&#20013;&#26029;&#32447;&#31243;&#21270;&#30340;&#25991;&#31456;&#65289;&#65292;&#20013;&#26029;handler&#20197;&#21450;bottom half&#65288;&#19981;&#21253;&#25324;workqueue&#65289;&#37117;&#26159;&#22312;interrupt context&#20013;&#25191;&#34892;&#12290;&#24403;&#28982;&#19968;&#25552;&#21040;context&#65292;&#21508;&#31181;&#36164;&#28304;&#36824;&#26159;&#35201;&#23384;&#22312;&#30340;&#65292;&#20363;&#22914;&#35828;&#20869;&#26680;&#26632;&#12289;&#20363;&#22914;&#35828;memory space&#31561;&#65292;interrupt context&#34429;&#28982;&#21333;&#34180;&#65292;&#20294;&#26159;&#21487;&#20197;&#20511;&#23608;&#36824;&#39746;&#12290;&#24403;&#20013;&#26029;&#20135;&#29983;&#30340;&#37027;&#19968;&#20010;&#26102;&#21051;&#65292;&#24403;&#21069;&#36827;&#31243;&#26377;&#24184;&#25104;&#20026;interrupt context&#30340;&#22771;&#65292;&#25552;&#20379;&#20102;&#20869;&#26680;&#26632;&#65292;&#20445;&#23384;&#20102;hardware context&#65292;&#27492;&#22806;&#21508;&#31181;&#36164;&#28304;&#65288;&#20363;&#22914;mm_struct&#65289;&#20063;&#26159;&#20511;&#29992;&#24403;&#21069;&#36827;&#31243;&#30340;&#12290;&#26412;&#26469;&#21602;interrupt context&#36523;&#36731;&#22914;&#29141;&#65292;&#27809;&#26377;&#20381;&#36182;&#30340;task&#65292;&#35843;&#24230;&#22120;&#20854;&#23454;&#26159;&#19981;&#30693;&#36947;&#22914;&#20309;&#35843;&#24230;interrupt context&#30340;&#65288;&#23427;&#22788;&#29702;&#30340;&#37117;&#26159;task&#65289;&#65292;&#22312;interrupt context&#20511;&#20102;&#19968;&#20010;&#22806;&#22771;&#21518;&#65292;&#20174;&#29702;&#35770;&#19978;&#23558;&#65292;&#35843;&#24230;&#22120;&#26159;&#23436;&#20840;&#21487;&#20197;block&#35813;interrupt context&#25191;&#34892;&#65292;&#24182;&#23558;&#20854;&#20182;&#30340;task&#35843;&#20837;&#36827;&#20837;running&#29366;&#24577;&#12290;&#28982;&#32780;&#65292;block&#35813;interrupt context&#25191;&#34892;&#20063;&#23601;block&#20854;&#22806;&#22771;task&#30340;&#25191;&#34892;&#65292;&#22810;&#20040;&#30340;&#19981;&#20844;&#24179;&#65292;&#22810;&#20040;&#30340;&#19981;&#30830;&#23450;&#65292;&#20013;&#26029;&#21629;&#20013;&#20320;&#65292;&#20320;&#23601;&#27963;&#35813;&#34987;schedule out&#65292;&#25317;&#26377;&#27491;&#24120;&#24605;&#32500;&#30340;linux&#24212;&#35813;&#19981;&#20250;&#36825;&#20040;&#20570;&#30340;&#12290; </P>
<P>&#22240;&#27492;&#65292;&#22312;&#20013;&#26029;&#19978;&#19979;&#25991;&#20013;&#65288;&#21253;&#25324;hard interrupt context&#21644;software interrupt context&#65289;&#19981;&#33021;&#30561;&#30496;&#12290; </P>
<P>4&#12289;&#20026;&#20309;&#38656;&#35201;workqueue </P>
<P>workqueue&#21644;&#20854;&#20182;&#30340;bottom half&#26368;&#22823;&#30340;&#19981;&#21516;&#26159;&#23427;&#26159;&#36816;&#34892;&#22312;&#36827;&#31243;&#19978;&#19979;&#25991;&#20013;&#30340;&#65292;&#23427;&#21487;&#20197;&#30561;&#30496;&#65292;&#36825;&#21644;&#20854;&#20182;bottom half&#26426;&#21046;&#26377;&#26412;&#36136;&#30340;&#19981;&#21516;&#65292;&#22823;&#22823;&#26041;&#20415;&#20102;&#39537;&#21160;&#24037;&#31243;&#24072;&#25776;&#20889;&#20013;&#26029;&#22788;&#29702;&#20195;&#30721;&#12290;&#24403;&#28982;&#65292;&#39537;&#21160;&#27169;&#22359;&#20063;&#21487;&#20197;&#33258;&#24049;&#21019;&#24314;&#19968;&#20010;kernel thread&#26469;&#35299;&#20915;defering work&#65292;&#20294;&#26159;&#65292;&#22914;&#26524;&#27599;&#20010;driver&#37117;&#21019;&#24314;&#33258;&#24049;&#30340;kernel thread&#65292;&#37027;&#20040;&#20869;&#26680;&#32447;&#31243;&#25968;&#37327;&#36807;&#22810;&#65292;&#36825;&#20250;&#24433;&#21709;&#25972;&#20307;&#30340;&#24615;&#33021;&#12290;&#22240;&#27492;&#65292;&#26368;&#22909;&#30340;&#26041;&#27861;&#23601;&#26159;&#25226;&#36825;&#20123;&#38656;&#27714;&#27719;&#38598;&#36215;&#26469;&#65292;&#25552;&#20379;&#19968;&#20010;&#32479;&#19968;&#30340;&#26426;&#21046;&#65292;&#20063;&#23601;&#26159;&#20256;&#35828;&#20013;&#30340;work queue&#20102;&#12290; </P>
<P>&nbsp; </P>
<P>&#19977;&#12289;&#25968;&#25454;&#25277;&#35937; </P>
<P>1&#12289;workqueue&#12290;&#23450;&#20041;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>struct workqueue_struct { <BR>&nbsp;&nbsp;&nbsp; struct cpu_workqueue_struct *cpu_wq; &#65293;&#65293;&#65293;&#65293;&#65293;per-cpu work queue struct <BR>&nbsp;&nbsp;&nbsp; struct list_head list; &#65293;&#65293;&#65293;workqueue list <BR>&nbsp;&nbsp;&nbsp; const char *name; <BR>&nbsp;&nbsp;&nbsp; int singlethread; &#65293;&#65293;&#65293;&#65293;single thread or multi thread <BR>&nbsp;&nbsp;&nbsp; int freezeable;&nbsp; &#65293;&#65293;&#65293;&#65293;&#21644;&#30005;&#28304;&#31649;&#29702;&#30456;&#20851;&#30340;&#19968;&#20010;flag <BR>}; </P></BLOCKQUOTE>
<P>&#25105;&#20204;&#30693;&#36947;&#65292;workqueue&#23601;&#26159;&#19968;&#31181;&#25226;&#26576;&#20123;&#20219;&#21153;&#65288;work&#65289;&#25512;&#36831;&#21040;&#19968;&#20010;&#25110;&#32773;&#19968;&#32452;&#20869;&#26680;&#32447;&#31243;&#20013;&#21435;&#25191;&#34892;&#65292;&#37027;&#20010;&#20869;&#26680;&#32447;&#31243;&#34987;&#31216;&#20316;worker thread&#65288;&#27599;&#20010;processor&#19978;&#26377;&#19968;&#20010;work thread&#65289;&#12290;&#31995;&#32479;&#20013;&#25152;&#26377;&#30340;workqueue&#20250;&#25346;&#20837;&#19968;&#20010;&#20840;&#23616;&#38142;&#34920;&#65292;&#38142;&#34920;&#22836;&#23450;&#20041;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>static LIST_HEAD(workqueues); </P></BLOCKQUOTE>
<P>list&#25104;&#21592;&#23601;&#26159;&#29992;&#26469;&#25346;&#20837;workqueue&#38142;&#34920;&#30340;&#12290;singlethread&#26159;workqueue&#30340;&#19968;&#20010;&#29305;&#27530;&#27169;&#24335;&#65292;&#19968;&#33324;&#32780;&#35328;&#65292;&#24403;&#21019;&#24314;&#19968;&#20010;workqueue&#30340;&#26102;&#20505;&#20250;&#20026;&#27599;&#19968;&#20010;&#31995;&#32479;&#20869;&#30340;processor&#21019;&#24314;&#19968;&#20010;&#20869;&#26680;&#32447;&#31243;&#65292;&#35813;&#32447;&#31243;&#22788;&#29702;&#26412;cpu&#35843;&#24230;&#30340;work&#12290;&#20294;&#26159;&#26377;&#20123;&#22330;&#26223;&#20013;&#65292;&#21019;&#24314;per-cpu&#30340;worker thread&#26377;&#20123;&#28010;&#36153;&#65288;&#25110;&#32773;&#26377;&#19968;&#20123;&#20854;&#20182;&#29305;&#27530;&#30340;&#32771;&#37327;&#65289;&#65292;&#36825;&#26102;&#20505;&#21019;&#24314;single-threaded workqueue&#26159;&#19968;&#20010;&#26356;&#21512;&#36866;&#30340;&#36873;&#25321;&#12290;freezeable&#25104;&#21592;&#26159;&#19968;&#20010;&#21644;&#30005;&#28304;&#31649;&#29702;&#30456;&#20851;&#30340;&#19968;&#20010;flag&#65292;&#24403;&#31995;&#32479;suspend&#30340;&#26102;&#20505;&#65292;&#26377;&#19968;&#20010;&#38454;&#27573;&#20250;&#23558;&#25152;&#26377;&#30340;&#29992;&#25143;&#31354;&#38388;&#30340;&#36827;&#31243;&#20923;&#32467;&#65292;&#37027;&#20040;&#26159;&#21542;&#20063;&#20923;&#32467;&#20869;&#26680;&#32447;&#31243;&#65288;&#21253;&#25324;workqueue&#65289;&#21602;&#65311;&#32570;&#30465;&#24773;&#20917;&#19979;&#65292;&#25152;&#26377;&#30340;&#20869;&#26680;&#32447;&#31243;&#37117;&#26159;nofrezable&#30340;&#65292;&#24403;&#28982;&#20063;&#21487;&#20197;&#35843;&#29992;set_freezable&#35753;&#19968;&#20010;&#20869;&#26680;&#32447;&#31243;&#26159;&#21487;&#20197;&#34987;&#20923;&#32467;&#30340;&#12290;&#20855;&#20307;&#26159;&#21542;&#38656;&#35201;&#35774;&#23450;&#35813;flag&#26159;&#21644;&#31243;&#24207;&#36923;&#36753;&#30456;&#20851;&#30340;&#65292;&#20855;&#20307;&#24773;&#20917;&#20855;&#20307;&#20998;&#26512;&#12290;OK&#65292;&#19978;&#38754;&#25551;&#36848;&#30340;&#37117;&#26159;workqueue&#20013;&#21508;&#20010;processor&#20849;&#20139;&#30340;&#25104;&#21592;&#65292;&#19979;&#38754;&#25105;&#20204;&#30475;&#30475;per-cpu&#30340;&#25968;&#25454;&#32467;&#26500;&#65306; </P>
<BLOCKQUOTE>
<P>struct cpu_workqueue_struct { </P>
<P>&nbsp;&nbsp;&nbsp; spinlock_t lock; &#65293;&#65293;&#65293;&#65293;&#29992;&#26469;&#20445;&#25252;worklist&#36164;&#28304;&#30340;&#35775;&#38382; </P>
<P>&nbsp;&nbsp;&nbsp; struct list_head worklist; <BR>&nbsp;&nbsp;&nbsp; wait_queue_head_t more_work; &#65293;&#65293;&#65293;&#65293;&#65293;&#31561;&#24453;&#38431;&#21015;&#22836; <BR>&nbsp;&nbsp;&nbsp; struct work_struct *current_work; &#65293;&#65293;&#65293;&#65293;&#24403;&#21069;&#27491;&#22312;&#22788;&#29702;&#30340;work </P>
<P>&nbsp;&nbsp;&nbsp; struct workqueue_struct *wq; &#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#25351;&#21521;work queue struct <BR>&nbsp;&nbsp;&nbsp; struct task_struct *thread; &#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;worker thread task </P>
<P>&nbsp;&nbsp;&nbsp; int run_depth;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /* Detect run_workqueue() recursion depth */ <BR>} ____cacheline_aligned; </P></BLOCKQUOTE>
<P>worker thread&#35201;&#22788;&#29702;work&#65292;&#36825;&#20123;work&#34987;&#25346;&#20837;work queue&#20013;&#30340;&#38142;&#34920;&#32467;&#26500;&#12290;&#30001;&#20110;&#27599;&#20010;processor&#37117;&#38656;&#35201;&#22788;&#29702;&#33258;&#24049;&#30340;work&#65292;&#22240;&#27492;&#36825;&#20010;work list&#26159;per cpu&#30340;&#12290;worklist&#25104;&#21592;&#23601;&#26159;&#36825;&#20010;per cpu&#30340;&#38142;&#34920;&#22836;&#65292;&#24403;worker thread&#34987;&#35843;&#24230;&#21040;&#30340;&#26102;&#20505;&#65292;&#23601;&#20174;&#36825;&#20010;&#38431;&#21015;&#20013;&#19968;&#20010;&#20010;&#30340;&#25688;&#19979;work&#26469;&#22788;&#29702;&#12290; </P>
<P>2&#12289;work&#12290;&#23450;&#20041;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>struct work_struct { <BR>&nbsp;&nbsp;&nbsp; atomic_long_t data; <BR>&nbsp;&nbsp;&nbsp; struct list_head entry; <BR>&nbsp;&nbsp;&nbsp; work_func_t func; <BR>}; </P></BLOCKQUOTE>
<P>&#25152;&#35859;work&#23601;&#26159;&#24322;&#27493;&#25191;&#34892;&#30340;&#20989;&#25968;&#12290;&#20320;&#21487;&#33021;&#20250;&#35273;&#24471;&#65292;&#21453;&#27491;&#26159;&#20989;&#25968;&#65292;&#30452;&#25509;&#35843;&#29992;&#19981;&#23601;OK&#20102;&#21527;&#65311;&#20294;&#26159;&#65292;&#20107;&#24773;&#27809;&#26377;&#37027;&#20040;&#31616;&#21333;&#65292;&#22914;&#26524;&#35813;&#20989;&#25968;&#30340;&#20195;&#30721;&#20013;&#26377;&#20123;&#38656;&#35201;sleep&#30340;&#22330;&#26223;&#30340;&#26102;&#20505;&#65292;&#37027;&#20040;&#22312;&#20013;&#26029;&#19978;&#19979;&#25991;&#20013;&#30452;&#25509;&#35843;&#29992;&#23558;&#20135;&#29983;&#20005;&#37325;&#30340;&#38382;&#39064;&#12290;&#36825;&#26102;&#20505;&#65292;&#23601;&#38656;&#35201;&#21040;&#36827;&#31243;&#19978;&#19979;&#25991;&#20013;&#24322;&#27493;&#25191;&#34892;&#12290;&#19979;&#38754;&#25105;&#20204;&#20180;&#32454;&#30475;&#30475;&#21508;&#20010;&#25104;&#21592;&#65306;func&#23601;&#26159;&#36825;&#20010;&#24322;&#27493;&#25191;&#34892;&#30340;&#20989;&#25968;&#65292;&#24403;work&#34987;&#35843;&#24230;&#25191;&#34892;&#30340;&#26102;&#20505;&#20854;&#23454;&#23601;&#26159;&#35843;&#29992;func&#36825;&#20010;callback&#20989;&#25968;&#65292;&#35813;&#20989;&#25968;&#30340;&#23450;&#20041;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>typedef void (*work_func_t)(struct work_struct *work); </P></BLOCKQUOTE>
<P>work&#23545;&#24212;&#30340;callback&#20989;&#25968;&#38656;&#35201;&#20256;&#36882;&#35813;work&#30340;struct&#20316;&#20026;callback&#20989;&#25968;&#30340;&#21442;&#25968;&#12290;work&#26159;&#34987;&#32452;&#32455;&#25104;&#38431;&#21015;&#30340;&#65292;entry&#25104;&#21592;&#23601;&#26159;&#25346;&#20837;&#38431;&#21015;&#30340;&#37027;&#20010;&#33410;&#28857;&#65292;data&#21253;&#21547;&#20102;&#35813;work&#30340;&#29366;&#24577;flag&#21644;&#25346;&#20837;workqueue&#30340;&#20449;&#24687;&#12290; </P>
<P>3&#12289;&#24635;&#32467; </P>
<P>&#25105;&#20204;&#25226;&#19978;&#25991;&#20013;&#25551;&#36848;&#30340;&#21508;&#20010;&#25968;&#25454;&#32467;&#26500;&#38598;&#21512;&#22312;&#19968;&#36215;&#65292;&#20855;&#20307;&#35831;&#21442;&#32771;&#19979;&#22270;&#65306; </P>
<P><A href="http://www.wowotech.net/content/uploadfile/201507/3f0b279644ba4646b73f303367bbe47220150715104521.gif"><IMG title=workqueue style="BORDER-LEFT-WIDTH: 0px; BORDER-RIGHT-WIDTH: 0px; BORDER-BOTTOM-WIDTH: 0px; DISPLAY: inline; BORDER-TOP-WIDTH: 0px" border=0 alt=workqueue src="http://www.wowotech.net/content/uploadfile/201507/8ac4ad9d9021a359edb98d1713c3ff2c20150715104623.gif" width=709 height=350></A> </P>
<P>&#25105;&#20204;&#33258;&#19978;&#32780;&#19979;&#26469;&#25551;&#36848;&#21508;&#20010;&#25968;&#25454;&#32467;&#26500;&#12290;&#39318;&#20808;&#65292;&#31995;&#32479;&#20013;&#21253;&#25324;&#33509;&#24178;&#30340;workqueue&#65292;&#26368;&#33879;&#21517;&#30340;workqueue&#23601;&#26159;&#31995;&#32479;&#32570;&#30465;&#30340;&#30340;workqueue&#20102;&#65292;&#23450;&#20041;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>static struct workqueue_struct *keventd_wq __read_mostly; </P></BLOCKQUOTE>
<P>&#22914;&#26524;&#27809;&#26377;&#29305;&#21035;&#30340;&#24615;&#33021;&#38656;&#27714;&#65292;&#37027;&#20040;&#19968;&#33324;&#39537;&#21160;&#20351;&#29992;keventd_wq&#23601;OK&#20102;&#65292;&#27605;&#31455;&#31995;&#32479;&#21019;&#24314;&#22826;&#22810;&#20869;&#26680;&#32447;&#31243;&#20063;&#19981;&#26159;&#20160;&#20040;&#22909;&#20107;&#24773;&#65288;&#28040;&#32791;&#22826;&#22810;&#36164;&#28304;&#65289;&#12290;&#24403;&#28982;&#65292;&#22914;&#26524;&#26377;&#38656;&#35201;&#65292;&#39537;&#21160;&#27169;&#22359;&#21487;&#20197;&#21019;&#24314;&#33258;&#24049;&#30340;workqueue&#12290;&#22240;&#27492;&#65292;&#31995;&#32479;&#20013;&#23384;&#22312;&#19968;&#20010;workqueues&#30340;&#38142;&#34920;&#65292;&#31649;&#29702;&#20102;&#25152;&#26377;&#30340;workqueue&#23454;&#20363;&#12290;&#19968;&#20010;workqueue&#23545;&#24212;&#19968;&#32452;work thread&#65288;&#20808;&#19981;&#32771;&#34385;single thread&#30340;&#22330;&#26223;&#65289;&#65292;&#27599;&#20010;cpu&#19968;&#20010;&#65292;&#30001;cpu_workqueue_struct&#26469;&#25277;&#35937;&#65292;&#36825;&#20123;cpu_workqueue_struct&#20204;&#20849;&#20139;&#19968;&#20010;workqueue&#65292;&#27605;&#31455;&#36825;&#20123;worker thread&#26159;&#21516;&#19968;&#31181;type&#12290; </P>
<P>&#20174;&#24213;&#23618;&#39537;&#21160;&#30340;&#35282;&#24230;&#26469;&#30475;&#65292;&#25105;&#20204;&#21482;&#20851;&#24515;&#22914;&#20309;&#22788;&#29702;deferable task&#65288;&#30001;work_struct&#25277;&#35937;&#65289;&#12290;&#39537;&#21160;&#31243;&#24207;&#23450;&#20041;&#20102;work_struct&#65292;&#20854;func&#25104;&#21592;&#23601;&#26159;deferred work&#65292;&#28982;&#21518;&#25346;&#20837;work list&#23601;OK&#20102;&#65288;&#24403;&#28982;&#35201;&#21796;&#37266;worker thread&#20102;&#65289;&#65292;&#31995;&#32479;&#30340;&#35843;&#24230;&#22120;&#35843;&#24230;&#21040;worker thread&#30340;&#26102;&#20505;&#65292;&#35813;work&#33258;&#28982;&#20250;&#34987;&#22788;&#29702;&#20102;&#12290;&#24403;&#28982;&#65292;&#25346;&#20837;&#21738;&#19968;&#20010;workqueue&#30340;&#37027;&#19968;&#20010;worker thread&#21602;&#65311;&#22914;&#20309;&#36873;&#25321;workqueue&#26159;driver&#33258;&#24049;&#30340;&#20107;&#24773;&#65292;&#21487;&#20197;&#20351;&#29992;&#31995;&#32479;&#32570;&#30465;&#30340;workqueue&#65292;&#31616;&#21333;&#65292;&#23454;&#29992;&#12290;&#24403;&#28982;&#20063;&#21487;&#20197;&#33258;&#24049;&#21019;&#24314;&#19968;&#20010;workqueue&#65292;&#24182;&#25226;work&#25346;&#20837;&#20854;&#20013;&#12290;&#36873;&#25321;&#21738;&#19968;&#20010;worker thread&#27604;&#36739;&#31616;&#21333;&#65306;work&#22312;&#21738;&#19968;&#20010;cpu&#19978;&#34987;&#35843;&#24230;&#65292;&#37027;&#20040;&#23601;&#25346;&#20837;&#21738;&#19968;&#20010;worker thread&#12290; </P>
<P>&nbsp; </P>
<P>&#22235;&#12289;&#25509;&#21475;&#20197;&#21450;&#20869;&#37096;&#23454;&#29616; </P>
<P>1&#12289;&#21021;&#22987;&#21270;&#19968;&#20010;work&#12290;&#25105;&#20204;&#21487;&#20197;&#38745;&#24577;&#23450;&#20041;&#19968;&#20010;work&#65292;&#25509;&#21475;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>#define DECLARE_WORK(n, f)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \ <BR>&nbsp;&nbsp;&nbsp; struct work_struct n = __WORK_INITIALIZER(n, f) </P>
<P>#define DECLARE_DELAYED_WORK(n, f)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \ <BR>&nbsp;&nbsp;&nbsp; struct delayed_work n = __DELAYED_WORK_INITIALIZER(n, f) </P></BLOCKQUOTE>
<P>&#19968;&#33324;&#32780;&#35328;&#65292;work&#37117;&#26159;&#25512;&#36831;&#21040;worker thread&#34987;&#35843;&#24230;&#30340;&#26102;&#21051;&#65292;&#20294;&#26159;&#26377;&#26102;&#20505;&#65292;&#25105;&#20204;&#24076;&#26395;&#22312;&#25351;&#23450;&#30340;&#26102;&#38388;&#36807;&#21435;&#20043;&#21518;&#20877;&#35843;&#24230;worker thread&#26469;&#22788;&#29702;&#35813;work&#65292;&#36825;&#31181;&#31867;&#22411;&#30340;work&#34987;&#31216;&#20316;delayed work&#65292;DECLARE_DELAYED_WORK&#29992;&#26469;&#21021;&#22987;&#21270;delayed work&#65292;&#23427;&#30340;&#27010;&#24565;&#21644;&#26222;&#36890;work&#31867;&#20284;&#65292;&#26412;&#25991;&#19981;&#20877;&#25551;&#36848;&#12290; </P>
<P>&#21160;&#24577;&#21019;&#24314;&#20063;&#26159;OK&#30340;&#65292;&#19981;&#36807;&#21021;&#22987;&#21270;&#30340;&#26102;&#20505;&#38656;&#35201;&#25226;work&#30340;&#25351;&#38024;&#20256;&#36882;&#32473;INIT_WORK&#65292;&#23450;&#20041;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>#define INIT_WORK(_work, _func)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \ <BR>&nbsp;&nbsp;&nbsp; do {&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \ <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (_work)-&gt;data = (atomic_long_t) WORK_DATA_INIT();&nbsp;&nbsp;&nbsp; \ <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; INIT_LIST_HEAD(&amp;(_work)-&gt;entry);&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \ <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PREPARE_WORK((_work), (_func));&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; \ <BR>&nbsp;&nbsp;&nbsp; } while (0) </P></BLOCKQUOTE>
<P>2&#12289;&#35843;&#24230;&#19968;&#20010;work&#25191;&#34892;&#12290;&#35843;&#24230;work&#25191;&#34892;&#26377;&#20004;&#20010;&#25509;&#21475;&#65292;&#19968;&#20010;&#26159;schedule_work&#65292;&#23558;work&#25346;&#20837;&#32570;&#30465;&#30340;&#31995;&#32479;workqueue&#65288;keventd_wq&#65289;&#65292;&#21478;&#22806;&#19968;&#20010;&#26159;queue_work&#65292;&#21487;&#20197;&#23558;work&#25346;&#20837;&#25351;&#23450;&#30340;workqueue&#12290;&#20855;&#20307;&#20195;&#30721;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>int fastcall queue_work(struct workqueue_struct *wq, struct work_struct *work) <BR>{ <BR>&nbsp;&nbsp;&nbsp; int ret = 0; </P>
<P>&nbsp;&nbsp;&nbsp; if (!test_and_set_bit(WORK_STRUCT_PENDING, work_data_bits(work))) { <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __queue_work(wq_per_cpu(wq, get_cpu()), work);&#65293;&#65293;&#65293;&#25346;&#20837;work list&#24182;&#21796;&#37266;worker thread <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; put_cpu(); <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ret = 1; <BR>&nbsp;&nbsp;&nbsp; } <BR>&nbsp;&nbsp;&nbsp; return ret; <BR>} </P></BLOCKQUOTE>
<P>&#22788;&#20110;pending&#29366;&#24577;&#30340;work&#19981;&#20250;&#37325;&#22797;&#25346;&#20837;workqueue&#12290;&#25105;&#20204;&#20551;&#35774;A&#39537;&#21160;&#27169;&#22359;&#38745;&#24577;&#23450;&#20041;&#20102;&#19968;&#20010;work&#65292;&#24403;&#20013;&#26029;&#21040;&#26469;&#24182;&#20998;&#21457;&#32473;cpu0&#30340;&#26102;&#20505;&#65292;&#20013;&#26029;handler&#20250;&#22312;cpu0&#19978;&#25191;&#34892;&#65292;&#25105;&#20204;&#22312;handler&#20013;&#20250;&#35843;&#29992;schedule_work&#23558;&#35813;work&#25346;&#20837;cpu0&#30340;worker thread&#65292;&#20063;&#23601;&#26159;keventd 0&#30340;work list&#12290;&#22312;worker thread&#22788;&#29702;A&#39537;&#21160;&#30340;work&#20043;&#21069;&#65292;&#20013;&#26029;&#24456;&#21487;&#33021;&#20877;&#27425;&#35302;&#21457;&#24182;&#20998;&#21457;&#32473;cpu1&#25191;&#34892;&#65292;&#36825;&#26102;&#20505;&#65292;&#22312;cpu1&#19978;&#25191;&#34892;&#30340;handler&#22312;&#35843;&#29992;schedule_work&#30340;&#26102;&#20505;&#23454;&#38469;&#19978;&#26159;&#27809;&#26377;&#20219;&#20309;&#20855;&#20307;&#30340;&#21160;&#20316;&#30340;&#65292;&#20063;&#23601;&#26159;&#35828;&#35813;work&#19981;&#20250;&#25346;&#20837;keventd 1&#30340;work list&#65292;&#22240;&#20026;&#35813;work&#36824;pending&#22312;keventd 0&#30340;work list&#20013;&#12290; </P>
<P>&#21040;&#24213;&#25554;&#20837;workqueue&#30340;&#21738;&#19968;&#20010;worker thread&#21602;&#65311;&#36825;&#26159;&#30001;wq_per_cpu&#23450;&#20041;&#30340;&#65306; </P>
<BLOCKQUOTE>
<P>static struct cpu_workqueue_struct *wq_per_cpu(struct workqueue_struct *wq, int cpu) <BR>{ <BR>&nbsp;&nbsp;&nbsp; if (unlikely(is_single_threaded(wq))) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cpu = singlethread_cpu; <BR>&nbsp;&nbsp;&nbsp; return per_cpu_ptr(wq-&gt;cpu_wq, cpu); <BR>} </P></BLOCKQUOTE>
<P>&#26222;&#36890;&#24773;&#20917;&#19979;&#65292;&#37117;&#26159;&#26681;&#25454;&#24403;&#21069;&#30340;cpu id&#65292;&#36890;&#36807;per_cpu_ptr&#33719;&#21462;cpu_workqueue_struct&#30340;&#25968;&#25454;&#32467;&#26500;&#65292;&#23545;&#20110;single thread&#32780;&#35328;&#65292;cpu&#26159;&#22266;&#23450;&#30340;&#12290; </P>
<P>3&#12289;&#21019;&#24314;workqueue&#65292;&#25509;&#21475;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>#define create_workqueue(name) __create_workqueue((name), 0, 0) <BR>#define create_freezeable_workqueue(name) __create_workqueue((name), 1, 1) <BR>#define create_singlethread_workqueue(name) __create_workqueue((name), 1, 0) </P></BLOCKQUOTE>
<P>create_workqueue&#26159;&#21019;&#24314;&#26222;&#36890;workqueue&#65292;&#20063;&#23601;&#26159;&#27599;&#20010;cpu&#21019;&#24314;&#19968;&#20010;worker thread&#30340;&#37027;&#31181;&#12290;&#24403;&#28982;&#65292;&#20316;&#20026;&#8220;&#26222;&#36890;&#8221;&#30340;workqueue&#65292;&#22312;freezeable&#23646;&#24615;&#19978;&#20063;&#26159;&#36319;&#38543;&#32570;&#30465;&#30340;&#34892;&#20026;&#65292;&#21363;&#22312;suspend&#30340;&#26102;&#20505;&#19981;&#20923;&#32467;&#35813;&#20869;&#26680;&#32447;&#31243;&#30340;worker thread&#12290;create_freezeable_workqueue&#21644;create_singlethread_workqueue&#37117;&#26159;&#21019;&#24314;single thread workqueue&#65292;&#21482;&#19981;&#36807;&#19968;&#20010;&#26159;freezeable&#30340;&#65292;&#21478;&#22806;&#19968;&#20010;&#26159;non-freezeable&#30340;&#12290;&#30340;&#20195;&#30721;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>struct workqueue_struct *__create_workqueue(const char *name, int singlethread, int freezeable) <BR>{ <BR>&nbsp;&nbsp;&nbsp; struct workqueue_struct *wq; <BR>&nbsp;&nbsp;&nbsp; struct cpu_workqueue_struct *cwq; <BR>&nbsp;&nbsp;&nbsp; int err = 0, cpu; </P>
<P>&nbsp;&nbsp;&nbsp; wq = kzalloc(sizeof(*wq), GFP_KERNEL);&#65293;&#65293;&#65293;&#65293;&#20998;&#37197;workqueue&#30340;&#25968;&#25454;&#32467;&#26500; </P>
<P>&nbsp;&nbsp;&nbsp; wq-&gt;cpu_wq = alloc_percpu(struct cpu_workqueue_struct);&#65293;&#65293;&#65293;&#20998;&#37197;worker thread&#30340;&#25968;&#25454;&#32467;&#26500; </P>
<P>&nbsp;&nbsp;&nbsp; wq-&gt;name = name;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#21021;&#22987;&#21270;workqueue <BR>&nbsp;&nbsp;&nbsp; wq-&gt;singlethread = singlethread; <BR>&nbsp;&nbsp;&nbsp; wq-&gt;freezeable = freezeable; <BR>&nbsp;&nbsp;&nbsp; INIT_LIST_HEAD(&amp;wq-&gt;list); </P>
<P>&nbsp;&nbsp;&nbsp; if (singlethread) {&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;1&#65289; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cwq = init_cpu_workqueue(wq, singlethread_cpu); &#65293;&#65293;&#65293;&#21021;&#22987;&#21270;cpu_workqueue_struct <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; err = create_workqueue_thread(cwq, singlethread_cpu); &#65293;&#65293;&#65293;&#21019;&#24314;worker thread <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; start_workqueue_thread(cwq, -1); &#65293;&#65293;&#65293;&#65293;wakeup worker thread <BR>&nbsp;&nbsp;&nbsp; } else { &#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;2&#65289; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mutex_lock(&amp;workqueue_mutex); <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; list_add(&amp;wq-&gt;list, &amp;workqueues); </P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for_each_possible_cpu(cpu) { <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; cwq = init_cpu_workqueue(wq, cpu); <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (err || !cpu_online(cpu)) &#65293;&#65293;&#65293;&#65293;&#27809;&#26377;online&#30340;cpu&#23601;&#19981;&#38656;&#35201;&#21019;&#24314;worker thread&#20102; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; continue; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; err = create_workqueue_thread(cwq, cpu); <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; start_workqueue_thread(cwq, cpu); <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; } <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; mutex_unlock(&amp;workqueue_mutex); <BR>&nbsp;&nbsp;&nbsp; }&nbsp; <BR>&nbsp;&nbsp;&nbsp; return wq; <BR>} </P></BLOCKQUOTE>
<P>&#65288;1&#65289;&#19981;&#31649;&#26159;&#21542;&#26159;single thread workqueue&#65292;worker thread&#65288;cpu_workqueue_struct&#65289;&#30340;&#25968;&#25454;&#32467;&#26500;&#24635;&#26159;per cpu&#20998;&#37197;&#30340;&#65288;&#31245;&#26174;&#28010;&#36153;&#65289;&#65292;&#19981;&#36807;&#23454;&#38469;&#19978;&#23545;&#20110;single thread workqueue&#32780;&#35328;&#65292;&#21482;&#20250;&#20351;&#29992;&#20854;&#20013;&#20043;&#19968;&#65292;&#37027;&#20040;&#38382;&#39064;&#26469;&#20102;&#65306;&#20351;&#29992;&#21738;&#19968;&#20010;processor&#30340;cpu_workqueue_struct&#21602;&#65311;workqueue&#20195;&#30721;&#23450;&#20041;&#20102;&#19968;&#20010;singlethread_cpu&#30340;&#21464;&#37327;&#65292;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>static int singlethread_cpu __read_mostly; </P></BLOCKQUOTE>
<P>&#35813;&#21464;&#37327;&#20250;&#22312;init_workqueues&#20989;&#25968;&#20013;&#36827;&#34892;&#21021;&#22987;&#21270;&#12290;&#23454;&#38469;&#19978;&#65292;&#20351;&#29992;&#21738;&#19968;&#20010;cpu&#30340;cpu_workqueue_struct&#26159;&#26080;&#25152;&#35859;&#30340;&#65292;&#36873;&#25321;&#20854;&#19968;&#23601;OK&#20102;&#12290;&#30001;&#20110;&#26159;single thread workqueue&#65292;&#22240;&#27492;&#21019;&#24314;&#30340;worker thread&#24182;&#19981;&#32465;&#23450;&#22312;&#20219;&#20309;&#30340;cpu&#19978;&#65292;&#35843;&#24230;&#22120;&#21487;&#20197;&#33258;&#30001;&#30340;&#35843;&#24230;&#35813;&#20869;&#26680;&#32447;&#31243;&#22312;&#20219;&#20309;&#30340;cpu&#19978;&#36816;&#34892;&#12290; </P>
<P>&#65288;2&#65289;&#23545;&#20110;&#26222;&#36890;&#30340;workqueue&#65292;&#21644;single thread&#30340;&#22788;&#29702;&#26377;&#25152;&#26377;&#19981;&#21516;&#12290;&#19968;&#26041;&#38754;&#65292;single thread&#30340;workqueue&#27809;&#26377;&#25346;&#20837;workqueues&#30340;&#20840;&#23616;&#38142;&#34920;&#65292;&#21478;&#22806;&#19968;&#26041;&#38754;for_each_possible_cpu&#30830;&#20445;&#22312;&#27599;&#19968;&#20010;cpu&#19978;&#21019;&#24314;&#20102;&#19968;&#20010;worker thread&#24182;&#36890;&#36807;start_workqueue_thread&#21551;&#21160;&#20854;&#36816;&#34892;&#65292;&#20855;&#20307;&#20195;&#30721;&#22914;&#19979;&#65306; </P>
<BLOCKQUOTE>
<P>static void start_workqueue_thread(struct cpu_workqueue_struct *cwq, int cpu) <BR>{ <BR>&nbsp;&nbsp;&nbsp; struct task_struct *p = cwq-&gt;thread; </P>
<P>&nbsp;&nbsp;&nbsp; if (p != NULL) { <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (cpu &gt;= 0) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; kthread_bind(p, cpu); <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; wake_up_process(p); <BR>&nbsp;&nbsp;&nbsp; } <BR>} </P></BLOCKQUOTE>
<P>&#23545;&#20110;single thread&#65292;kthread_bind&#19981;&#20250;&#25191;&#34892;&#65292;&#23545;&#20110;&#26222;&#36890;&#30340;workqueue&#65292;&#25105;&#20204;&#24517;&#39035;&#35843;&#29992;kthread_bind&#20197;&#20415;&#35753;worker thread&#22312;&#29305;&#23450;&#30340;cpu&#19978;&#25191;&#34892;&#12290; </P>
<P>4&#12289;work&#25191;&#34892;&#30340;&#26102;&#26426; </P>
<P>work&#25191;&#34892;&#30340;&#26102;&#26426;&#26159;&#21644;&#35843;&#24230;&#22120;&#30456;&#20851;&#30340;&#65292;&#24403;&#31995;&#32479;&#35843;&#24230;&#21040;worker thread&#36825;&#20010;&#20869;&#26680;&#32447;&#31243;&#21518;&#65292;&#35813;thread&#23601;&#20250;&#24320;&#22987;&#24037;&#20316;&#12290;&#27599;&#20010;cpu&#19978;&#25191;&#34892;&#30340;worker thread&#30340;&#20869;&#26680;&#32447;&#31243;&#30340;&#20195;&#30721;&#36923;&#36753;&#37117;&#26159;&#19968;&#26679;&#30340;&#65292;&#22312;worker_thread&#20013;&#23454;&#29616;&#65306; </P>
<BLOCKQUOTE>
<P>static int worker_thread(void *__cwq) <BR>{ <BR>&nbsp;&nbsp;&nbsp; struct cpu_workqueue_struct *cwq = __cwq; <BR>&nbsp;&nbsp;&nbsp; DEFINE_WAIT(wait); </P>
<P>&nbsp;&nbsp;&nbsp; if (cwq-&gt;wq-&gt;freezeable)&#65293;&#65293;&#65293;&#22914;&#26524;&#26159;freezeable&#30340;&#20869;&#26680;&#32447;&#31243;&#65292;&#37027;&#20040;&#38656;&#35201;&#28165;&#38500;task flag&#20013;&#30340; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; set_freezable();&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; PF_NOFREEZE&#26631;&#35760;&#65292;&#20197;&#20415;&#22312;&#31995;&#32479;suspend&#30340;&#26102;&#20505;&#20923;&#32467;&#35813;thread </P>
<P>&nbsp;&nbsp;&nbsp; set_user_nice(current, -5); &#65293;&#65293;&#65293;&#65293;&#25552;&#39640;&#36827;&#31243;&#20248;&#20808;&#32423;&#65292;&#21621;&#21621;&#65292;worker thread&#36824;&#26159;&#26377;&#20123;&#29305;&#26435;&#30340;&#21734; </P>
<P>&nbsp;&nbsp;&nbsp; for (;;) { <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; prepare_to_wait(&amp;cwq-&gt;more_work, &amp;wait, TASK_INTERRUPTIBLE); <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (!freezing(current) &amp;&amp;&nbsp; !kthread_should_stop() &amp;&amp;&nbsp; list_empty(&amp;cwq-&gt;worklist)) <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; schedule();&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#65288;1&#65289; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; finish_wait(&amp;cwq-&gt;more_work, &amp;wait); </P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; try_to_freeze(); &#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#22788;&#29702;&#26469;&#33258;&#30005;&#28304;&#31649;&#29702;&#27169;&#22359;&#30340;&#20923;&#32467;&#35831;&#27714; </P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; if (kthread_should_stop()) &#65293;&#65293;&#65293;&#65293;&#65293;&#22788;&#29702;&#20572;&#27490;&#35813;thread&#30340;&#35831;&#27714; <BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; break; </P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; run_workqueue(cwq); &#65293;&#65293;&#65293;&#65293;&#65293;&#65293;&#20381;&#27425;&#22788;&#29702;work list&#19978;&#30340;&#21508;&#20010;work <BR>&nbsp;&nbsp;&nbsp; } </P>
<P>&nbsp;&nbsp;&nbsp; return 0; <BR>} </P></BLOCKQUOTE>
<P>&#65288;1&#65289;&#23548;&#33268;worker thread&#36827;&#20837;sleep&#29366;&#24577;&#26377;&#19977;&#20010;&#26465;&#20214;&#65306;&#65288;a&#65289;&#30005;&#28304;&#31649;&#29702;&#27169;&#22359;&#27809;&#26377;&#35831;&#27714;&#20923;&#32467;&#35813;worker thread&#12290;&#65288;b&#65289;&#35813;thread&#27809;&#26377;&#34987;&#20854;&#20182;&#27169;&#22359;&#35831;&#27714;&#20572;&#25481;&#12290;&#65288;c&#65289;work list&#20026;&#31354;&#65292;&#20063;&#23601;&#26159;&#35828;&#27809;&#26377;work&#35201;&#22788;&#29702;