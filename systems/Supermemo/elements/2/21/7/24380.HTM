<P class=docText>The work queue helper library exposes two interface structures to users: a <TT>workqueue_struct</TT> and a <TT>work_struct</TT><A name="steps to"></A>. Follow these steps to use work queues:</P><A name=ch03pro01></A>
<TABLE class=docText border=0>
<TBODY>
<TR>
<TD vAlign=top width=25>
<DIV class=docText><B><FONT class=clozed>1. </FONT></B></DIV></TD>
<TD>
<DIV class=docText><FONT class=clozed><FONT class=extract>Create a work queue (or a <TT>workqueue_struct</TT>) with one or more associated kernel threads.</FONT> <FONT class=extract>To create a kernel thread to service a <TT>workqueue_struct</TT>, use <TT>create_singlethread_workqueue()</TT>.</FONT> <FONT class=extract>To create one worker thread per CPU in the system, use the <TT>create_workqueue()</TT> variant.</FONT> <FONT class=extract>The kernel also has default per-CPU worker threads (<SPAN class=docEmphasis>events/n</SPAN>, where <SPAN class=docEmphasis>n</SPAN> is the CPU number) that you can timeshare instead of requesting a separate worker thread. </FONT>Depending on your application, you might incur a performance hit if you don't have a dedicated worker thread.<BR><BR></FONT></DIV></TD></TR>
<TR>
<TD vAlign=top width=25>
<DIV class=docText><B><FONT class=clozed>2. </FONT></B></DIV></TD>
<TD>
<DIV class=docText><FONT class=clozed>Create a work element (or a <TT>work_struct</TT>). A <TT>work_struct</TT> is initialized using <TT>INIT_WORK()</TT>, which populates it with the address and argument of your work function.<BR><BR></FONT></DIV></TD></TR>
<TR>
<TD vAlign=top width=25>
<DIV class=docText><B><FONT class=clozed>3. </FONT></B></DIV></TD>
<TD>
<DIV class=docText><FONT class=clozed>Submit the work element to the work queue. <FONT class=extract>A <TT>work_struct</TT> can be submitted to a dedicated queue using <TT>queue_work()</TT>, or to the default kernel worker thread using <TT>schedule_work()</TT>.</FONT><BR></FONT></DIV></TD></TR></TBODY></TABLE>