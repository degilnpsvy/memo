<H4 id=title-ID0ERPPM class=docSection2Title>Softirqs and Tasklets</H4>
<P class=docText><A name="responsible for"></A><FONT class=extract>As discussed previously, interrupt handlers have two conflicting requirements: They are responsible for the bulk of device data processing, but they have to exit as fast as possible. To bail out of this situation, interrupt handlers are designed in two parts: a hurried and harried top half that interacts with the hardware, and a relaxed bottom half that does most of the processing with all interrupts enabled. Unlike interrupts, bottom halves are synchronous because the kernel decides when to execute them. The following mechanisms are available in the kernel to defer work to a bottom half: softirqs, tasklets, and work queues.</FONT></P>
<P class=docText><A name=iddle2438></A><A name=iddle3825></A><A name=iddle3826></A><A name=iddle3836></A><A name=iddle4079></A><A name=iddle4080></A><A name="half mechanism"></A><FONT class=extract>Softirqs are the basic bottom half mechanism and have strong locking requirements. They are used only by a few performance-sensitive subsystems such as the networking layer, SCSI layer, and kernel timers. Tasklets are built on top of softirqs and are easier to use. It's recommended to use tasklets unless you have crucial scalability or speed requirements. A primary difference between a softirq and a tasklet is that the former is reentrant whereas the latter isn't. Different instances of a softirq can run simultaneously on different processors, but that is not the case with tasklets.</FONT></P>
<P class=docText><A name="the roller"></A><FONT class=extract>To illustrate the usage of softirqs and tasklets, assume that the roller wheel in the previous example has inherent hardware problems due to the presence of moving parts (say, the wheel gets stuck occasionally) resulting in the generation of out-of-spec waveforms. A stuck wheel can continuously generate spurious interrupts and potentially freeze the system. To get around this problem, capture the wave stream, run some analysis on it, and dynamically switch from interrupt mode to a polled mode if the wheel looks stuck, and vice versa if it's unstuck. Capture the wave stream from the interrupt handler and perform the analysis from a bottom half. </FONT><A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch04lev1sec2.html#ch04ex02"><FONT class=extract>Listing 4.2</FONT></A><FONT class=extract> implements this using softirqs, and </FONT><A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch04lev1sec2.html#ch04ex03"><FONT class=extract>Listing 4.3</FONT></A><FONT class=extract> uses tasklets. Both are simplified variants of </FONT><A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch04lev1sec2.html#ch04ex01"><FONT class=extract>Listing 4.1</FONT></A><FONT class=extract>. This reduces the handler to two functions: <TT>roller_capture()</TT></FONT><A name="GPIO Port"></A><FONT class=extract> that obtains a wave snippet from GPIO Port D, and <TT>roller_analyze()</TT></FONT><A name="and switches"></A><FONT class=extract> that runs an algorithmic analysis on the wave and switches to polled mode if required.</FONT></P><A name=ch04ex02></A>
<H5 id=title-ID0EWSPM class=docExampleTitle><FONT class=extract>Listing 4.2. Using Softirqs to Offload Work from Interrupt Handlers</FONT></H5>
<P>
<TABLE cellSpacing=0 cellPadding=5 border=1>
<TBODY>
<TR>
<TD>
<DIV class=codeSegmentsExpansionLinks><FONT class=extract>Code View:</FONT></DIV><PRE><FONT class=extract>void __init
roller_init()
{
  /* ... */

  /* Open the softirq. Add an entry for ROLLER_SOFT_IRQ in
     the enum list in <SPAN class=docEmphasis>include/linux/interrupt.h</SPAN> */
  open_softirq(ROLLER_SOFT_IRQ, roller_analyze, NULL);
}


/* The bottom half */
void
roller_analyze()
{
  /* Analyze the waveforms and switch to polled mode if required */
}
/* The interrupt handler */
static irqreturn_t
roller_interrupt(int irq, void *dev_id)
{
  /* Capture the wave stream */
  roller_capture();

  /* Mark softirq as pending */
  raise_softirq(ROLLER_SOFT_IRQ);

  return IRQ_HANDLED;
}

					  </FONT></PRE><BR></TD></TR></TBODY></TABLE></P>
<P class=docText><A name=iddle2439></A><A name=iddle3711></A><A name=iddle3837></A><A name="define a"></A><FONT class=extract>To define a softirq, you have to statically add an entry to <SPAN class=docEmphasis>include/linux/interrupt.h.</SPAN> You can't define one dynamically. <TT>raise_softirq()</TT></FONT><A name="execute it"></A><FONT class=extract> announces that the corresponding softirq is pending execution. The kernel will execute it at the next available opportunity. This can be during exit from an interrupt handler or via the <SPAN class=docEmphasis>ksoftirqd</SPAN></FONT><A name="kernel thread"></A><FONT class=extract> kernel thread.</FONT></P><A name=ch04ex03></A>
<H5 id=title-ID0EWUPM class=docExampleTitle><FONT class=extract>Listing 4.3. Using Tasklets to Offload Work from Interrupt Handlers</FONT></H5>
<P>
<TABLE cellSpacing=0 cellPadding=5 border=1>
<TBODY>
<TR>
<TD>
<DIV class=codeSegmentsExpansionLinks><FONT class=extract>Code View:</FONT></DIV><PRE><FONT class=extract>struct roller_device_struct { /* Device-specific structure */
  /* ... */
  struct tasklet_struct tsklt;
  /* ... */
}

void __init roller_init()
{
  struct roller_device_struct *dev_struct;
  /* ... */

  /* Initialize tasklet */
  tasklet_init(&amp;dev_struct-&gt;tsklt, roller_analyze, dev);
}


/* The bottom half */
void
roller_analyze()
{
/* Analyze the waveforms and switch to
   polled mode if required */
}
/* The interrupt handler */
static irqreturn_t
roller_interrupt(int irq, void *dev_id)
{
  struct roller_device_struct *dev_struct;

  /* Capture the wave stream */
  roller_capture();

  /* Mark tasklet as pending */
  tasklet_schedule(&amp;dev_struct-&gt;tsklt);

  return IRQ_HANDLED;
}

					  </FONT></PRE><BR></TD></TR></TBODY></TABLE></P>
<P class=docText><A name=iddle4217></A><A name=iddle4219></A><A name=iddle4221></A><A name=iddle4223></A><A name=iddle4225></A><TT><FONT class=extract>tasklet_init()</FONT></TT><A name="a tasklet"></A><FONT class=extract> dynamically initializes a tasklet. The function does not allocate memory for a <TT>tasklet_struct</TT></FONT><A name="you have"></A><FONT class=extract>, rather you have to pass the address of an allocated one. <TT>tasklet_schedule()</TT></FONT><A name="the kernel"></A><FONT class=extract> announces that the corresponding tasklet is pending execution. Like for interrupts, the kernel offers a bunch of functions to control the execution state of tasklets on systems having multiple processors:</FONT></P>
<UL>
<LI>
<P class=docList><FONT class=extract><TT>tasklet_enable()</TT> enables tasklets.</FONT></P>
<LI>
<P class=docList><TT><FONT class=extract>tasklet_disable()</FONT></TT><A name="any currently"></A><FONT class=extract> disables tasklets and waits until any currently executing tasklet instance has exited.</FONT></P>
<LI>
<P class=docList><FONT class=extract><TT>tasklet_disable_nosync()</TT> has semantics similar to <TT>disable_irq_nosync()</TT></FONT><A name="the tasklet"></A><FONT class=extract>. The function does not wait for active instances of the tasklet to finish execution.</FONT></P></LI></UL>
<P class=docText><A name="interrupt handlers"></A><FONT class=extract>You have seen the differences between interrupt handlers and bottom halves, but there are a few similarities, too. Interrupt handlers and tasklets are both not reentrant. And neither of them can go to sleep. Also, interrupt handlers, tasklets, and softirqs cannot be preempted.</FONT></P>
<P class=docText><A name="work from"></A><FONT class=extract>Work queues are a third way to defer work from interrupt handlers. They execute in process context and are allowed to sleep, so they can use drowsy functions such as mutexes. We discussed work queues in the preceding chapter when we looked at various kernel helper facilities. </FONT><A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch04lev1sec2.html#ch04tab01"><FONT class=extract>Table 4.1</FONT></A><A name="and work"></A><FONT class=extract> compares softirqs, tasklets, and work queues.</FONT></P>
<P class=docText><FONT class=extract></FONT></P><A name=ch04tab01></A>
<P>
<TABLE cellSpacing=0 cellPadding=5 rules=groups frame=hsides>
<CAPTION>
<H5 class=docTableTitle><FONT class=extract>Table 4.1. Comparing Softirqs, Tasklets, and Work Queues</FONT></H5></CAPTION>
<COLGROUP span=4 align=left><FONT class=extract>
<COL width=100>
<COL width=150>
<COL width=150>
<COL width=150></FONT></COLGROUP>
<THEAD>
<TR>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left><FONT class=extract>&nbsp;</FONT></TH>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left><A name=iddle1785></A><A name=iddle1787></A><A name=iddle2779></A><A name=iddle2781></A><A name=iddle3703></A><A name=iddle4379></A><A name=iddle4649></A><FONT class=extract>Softirqs</FONT></TH>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left><FONT class=extract>Tasklets</FONT></TH>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left><FONT class=extract>Work Queues</FONT></TH></TR></THEAD>
<TBODY>
<TR>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphStrong><FONT class=extract>Execution context</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Deferred work runs in interrupt context.</FONT></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Deferred work runs in interrupt context.</FONT></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Deferred work runs in process context.</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphStrong><FONT class=extract>Reentrancy</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Can run simultaneously on different CPUs.</FONT></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Cannot run simultaneously on different CPUs. Different CPUs can run different tasklets, however.</FONT></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Can run simultaneously on different CPUs.</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphStrong><FONT class=extract>Sleep semantics</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Cannot go to sleep.</FONT></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Cannot go to sleep.</FONT></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>May go to sleep.</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphStrong><FONT class=extract>Preemption</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Cannot be preempted/scheduled.</FONT></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Cannot be preempted/scheduled.</FONT></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>May be preempted/scheduled.</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphStrong><FONT class=extract>Ease of use</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Not easy to use.</FONT></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Easy to use.</FONT></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Easy to use.</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphStrong><FONT class=extract>When to use</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="you have"></A><FONT class=extract>If deferred work will not go to sleep and if you have crucial scalability or speed requirements.</FONT></TD>
<TD class=docTableCell vAlign=top align=left><A name="If deferred"></A><FONT class=extract>If deferred work will not go to sleep.</FONT></TD>
<TD class=docTableCell vAlign=top align=left><A name="work may"></A><FONT class=extract>If deferred work may go to sleep.</FONT></TD></TR></TBODY></TABLE></P><BR><A name=ch04note02></A>
<DIV class=docNote>
<P>
<P class=docText><A name="is an"></A><FONT class=extract>There is an ongoing debate in LKML on the feasibility of getting rid of the tasklet interface. Tasklets enjoy more priority than process context code, so they present latency problems. Moreover, as you learned, they are constrained not to sleep and to execute on the same CPU. It's being suggested that all existing tasklets be converted to softirqs or work queues on a case-by-case basis.</FONT></P>
<P class=docText>The <TT>&#37413;&#25617;t</TT> patch-set alluded to in <A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch02.html#ch02">Chapter 2</A><A name="preemption coverage"></A> moves interrupt handling to kernel threads to achieve wider preemption coverage.</P></DIV>