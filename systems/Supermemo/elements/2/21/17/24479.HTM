<P class=docText>Let's end this section by introducing some functions that enable and disable interrupts on a particular IRQ. <FONT class=clozed><TT>enable_irq(ROLLER_IRQ)</TT> enables interrupt generation when the roller wheel moves, while <TT>disable_irq(ROLLER_IRQ)</TT> does the reverse. <TT>disable_irq_nosync(ROLLER_IRQ)</TT></FONT><A name="executing instance"></A><FONT class=clozed> disables roller interrupts but does not wait for any currently executing instance of <TT>roller_interrupt()</TT></FONT><A name="to return"></A><FONT class=clozed> to return. This <TT>nosync</TT> flavor of <TT>disable_irq()</TT></FONT><A name="but can"></A><FONT class=clozed> is faster but can potentially cause race conditions. Use this only when you know that there can be no races. An example user of <TT>disable_irq_nosync()</TT> is <SPAN class=docEmphasis>drivers/ide/ide-io.c</SPAN></FONT><A name="blocks interrupts"></A><FONT class=clozed>, which blocks interrupts during initialization, because some systems have trouble with that.</FONT>