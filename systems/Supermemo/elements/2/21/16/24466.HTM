<TABLE cellSpacing=0 cellPadding=5 rules=groups frame=hsides>
<CAPTION>
<H5 class=docTableTitle>Table 3.4. Summary of Kernel Programming Interfaces</H5></CAPTION>
<COLGROUP span=3 align=left>
<COL width=150>
<COL width=150>
<COL width=200></COLGROUP>
<THEAD>
<TR>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left><A name=iddle1050></A><A name=iddle1094></A><A name=iddle1268></A><A name=iddle1270></A><A name=iddle1363></A><A name=iddle1647></A><A name=iddle1739></A><A name=iddle2524></A><A name=iddle3764></A><A name=iddle3765></A><A name=iddle3770></A><A name=iddle3795></A><A name=iddle3883></A><A name=iddle3986></A><A name=iddle4000></A><A name=iddle4623></A>Kernel Interface</TH>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left>Location</TH>
<TH class="docTableCell bottomBorder thead" style="TEXT-ALIGN: left" vAlign=top scope=col align=left>Description</TH></TR></THEAD>
<TBODY>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>DECLARE_WAITQUEUE()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>include/linux/wait.h</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Declares a wait queue.</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>add_wait_queue()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>kernel/wait.c</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="goes to"></A><FONT class=extract>Queues a task to a wait queue. The task goes to sleep until it's woken up by another thread or interrupt handler.</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>remove_wait_queue()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>kernel/wait.c</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="a task"></A><FONT class=extract>Dequeues a task from a wait queue.</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>wake_up_interruptible()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract><SPAN class=docEmphasis>include/linux/wait.h</SPAN> <SPAN class=docEmphasis>kernel/sched.c</SPAN></FONT></TD>
<TD class=docTableCell vAlign=top align=left><A name="puts it"></A><FONT class=extract>Wakes up a task sleeping inside a wait queue and puts it back into the scheduler run queue.</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>schedule()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>kernel/sched.c</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="Relinquishes the"></A><FONT class=extract>Relinquishes the processor and allows other parts of the kernel to run.</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>set_current_state()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>include/linux/sched.h</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="run state"></A><FONT class=extract>Sets the run state of a process. The state can be one of <TT>TASK_RUNNING</TT>, <TT>TASK_INTERRUPTIBLE</TT>, <TT>TASK_UNINTERRUPTIBLE</TT>, <TT>TASK_STOPPED</TT>, <TT>TASK_TRACED</TT>, <TT>EXIT_ZOMBIE</TT>, or <TT>EXIT_DEAD</TT>.</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>kernel_thread()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>arch/your-arch/kernel/process.c</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="a kernel"></A><FONT class=extract>Creates a kernel thread.</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>daemonize()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>kernel/exit.c</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="changes the"></A><FONT class=extract>Activates a kernel thread without attaching user resources and changes the parent of the calling thread to kthreadd.</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>allow_signal()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>kernel/exit.c</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Enables delivery of a specified signal.</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>signal_pending()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>include/linux/sched.h</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="been delivered"></A><FONT class=extract>Checks whether a signal has been delivered. There are no signal handlers inside the kernel, so you have to explicitly check whether a signal has been delivered<FONT class=extract>.</FONT></FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>call_usermodehelper()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract><SPAN class=docEmphasis>include/linux/kmod.h</SPAN> <SPAN class=docEmphasis>kernel/kmod.c</SPAN></FONT></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Executes a user mode program.</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>Linked list library functions</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>include/linux/list.h</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>See </FONT><A class=docLink href="http://www.embeddedlinux.org.cn/EssentialLinuxDeviceDrivers/final/ch03lev1sec2.html#ch03tab01"><FONT class=extract>Table 3.1</FONT></A><FONT class=extract>.</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>register_die_notifier()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>arch/your-arch/kernel/traps.c</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Registers a die notifier.</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>register_netdevice_notifier()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>net/core/dev.c</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Registers a netdevice notifier.</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>register_inetaddr_notifier()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>net/ipv4/devinet.c</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Registers an inetaddr notifier.</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>BLOCKING_NOTIFIER_HEAD()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>include/linux/notifier.h</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Creates a user-defined blocking notifier.</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>blocking_notifier_chain_register()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>kernel/sys.c</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Registers a blocking notifier.</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>blocking_notifier_call_chain()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>kernel/sys.c</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Dispatches an event to a blocking notifier chain.</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>ATOMIC_NOTIFIER_HEAD()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>include/linux/notifier.h</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Creates an atomic notifier.</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>atomic_notifier_chain_register()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>kernel/sys.c</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Registers an atomic notifier.</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>DECLARE_COMPLETION()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>include/linux/completion.h</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Statically declares a completion object.</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>init_completion()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>include/linux/completion.h</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Dynamically declares a completion object.</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>complete()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>kernel/sched.c</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Announces completion.</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>wait_for_completion()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>kernel/sched.c</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Waits until the completion object completes.</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>complete_and_exit()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>kernel/exit.c</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Atomically signals completion and exit.</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>kthread_create()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>kernel/kthread.c</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Creates a kernel thread.</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>kthread_stop()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>kernel/kthread.c</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><FONT class=extract>Asks a kernel thread to stop.</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>kthread_should_stop()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>kernel/kthread.c</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="detect whether"></A><FONT class=extract>A kernel thread can poll on this function to detect whether another thread has asked it to stop via <TT>kthread_stop()</TT>.</FONT></TD></TR>
<TR>
<TD class=docTableCell vAlign=top align=left><TT><FONT class=extract>IS_ERR()</FONT></TT></TD>
<TD class=docTableCell vAlign=top align=left><SPAN class=docEmphasis><FONT class=extract>include/linux/err.h</FONT></SPAN></TD>
<TD class=docTableCell vAlign=top align=left><A name="is an"></A><FONT class=extract>Finds out whether the return value is an error code.</FONT></TD></TR></TBODY></TABLE>