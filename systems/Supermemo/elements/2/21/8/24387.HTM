# Uboot README
<P></P>
<P>#<BR># (C) Copyright 2000 - 2013<BR># Wolfgang Denk, DENX Software Engineering, <A href="mailto:wd@denx.de">wd@denx.de</A>.<BR>#<BR># SPDX-License-Identifier:&nbsp;GPL-2.0+<BR>#</P>
<P></P>
<P>Summary:<BR>========</P>
<P>This directory contains the source code for U-Boot, a boot loader for<BR>Embedded boards based on PowerPC, ARM, MIPS and several other<BR>processors, which can be installed in a boot ROM and used to<BR>initialize and test the hardware or to download and run application<BR>code.</P>
<P>The development of U-Boot is closely related to Linux: some parts of<BR>the source code originate in the Linux source tree, we have some<BR>header files in common, and special provision has been made to<BR>support booting of Linux images.</P>
<P>Some attention has been paid to make this software easily<BR>configurable and extendable. For instance, all monitor commands are<BR>implemented with the same call interface, so that it's very easy to<BR>add new commands. Also, instead of permanently adding rarely used<BR>code (for instance hardware test utilities) to the monitor, you can<BR>load and run it dynamically.</P>
<P><BR>Status:<BR>=======</P>
<P>In general, all boards for which a configuration option exists in the<BR>Makefile have been tested to some extent and can be considered<BR>"working". In fact, many of them are used in production systems.</P>
<P>In case of problems see the CHANGELOG and CREDITS files to find out<BR>who contributed the specific port. The boards.cfg file lists board<BR>maintainers.</P>
<P>Note: There is no CHANGELOG file in the actual U-Boot source tree;<BR>it can be created dynamically from the Git log using:</P>
<P>&nbsp;make CHANGELOG</P>
<P><BR>Where to get help:<BR>==================</P>
<P>In case you have questions about, problems with or contributions for<BR>U-Boot you should send a message to the U-Boot mailing list at<BR>&lt;<A href="mailto:u-boot@lists.denx.de">u-boot@lists.denx.de</A>&gt;. There is also an archive of previous traffic<BR>on the mailing list - please search the archive before asking FAQ's.<BR>Please see <A href="http://lists.denx.de/pipermail/u-boot">http://lists.denx.de/pipermail/u-boot</A> and<BR><A href="http://dir.gmane.org/gmane.comp.boot-loaders.u-boot">http://dir.gmane.org/gmane.comp.boot-loaders.u-boot</A></P>
<P><BR>Where to get source code:<BR>=========================</P>
<P>The U-Boot source code is maintained in the git repository at<BR>git://www.denx.de/git/u-boot.git ; you can browse it online at<BR><A href="http://www.denx.de/cgi-bin/gitweb.cgi?p=u-boot.git;a=summary">http://www.denx.de/cgi-bin/gitweb.cgi?p=u-boot.git;a=summary</A></P>
<P>The "snapshot" links on this page allow you to download tarballs of<BR>any version you might be interested in. Official releases are also<BR>available for FTP download from the <A href="ftp://ftp.denx.de/pub/u-boot/">ftp://ftp.denx.de/pub/u-boot/</A><BR>directory.</P>
<P>Pre-built (and tested) images are available from<BR><A href="ftp://ftp.denx.de/pub/u-boot/images/">ftp://ftp.denx.de/pub/u-boot/images/</A></P>
<P><BR>Where we come from:<BR>===================</P>
<P>- start from 8xxrom sources<BR>- create PPCBoot project (<A href="http://sourceforge.net/projects/ppcboot">http://sourceforge.net/projects/ppcboot</A>)<BR>- clean up code<BR>- make it easier to add custom boards<BR>- make it possible to add other [PowerPC] CPUs<BR>- extend functions, especially:<BR>&nbsp; * Provide extended interface to Linux boot loader<BR>&nbsp; * S-Record download<BR>&nbsp; * network boot<BR>&nbsp; * PCMCIA / CompactFlash / ATA disk / SCSI ... boot<BR>- create ARMBoot project (<A href="http://sourceforge.net/projects/armboot">http://sourceforge.net/projects/armboot</A>)<BR>- add other CPU families (starting with ARM)<BR>- create U-Boot project (<A href="http://sourceforge.net/projects/u-boot">http://sourceforge.net/projects/u-boot</A>)<BR>- current project page: see <A href="http://www.denx.de/wiki/U-Boot">http://www.denx.de/wiki/U-Boot</A></P>
<P><BR>Names and Spelling:<BR>===================</P>
<P>The "official" name of this project is "Das U-Boot". The spelling<BR>"U-Boot" shall be used in all written text (documentation, comments<BR>in source files etc.). Example:</P>
<P>&nbsp;This is the README file for the U-Boot project.</P>
<P>File names etc. shall be based on the string "u-boot". Examples:</P>
<P>&nbsp;include/asm-ppc/u-boot.h</P>
<P>&nbsp;#include &lt;asm/u-boot.h&gt;</P>
<P>Variable names, preprocessor constants etc. shall be either based on<BR>the string "u_boot" or on "U_BOOT". Example:</P>
<P>&nbsp;U_BOOT_VERSION&nbsp;&nbsp;u_boot_logo<BR>&nbsp;IH_OS_U_BOOT&nbsp;&nbsp;u_boot_hush_start</P>
<P><BR>Versioning:<BR>===========</P>
<P>Starting with the release in October 2008, the names of the releases<BR>were changed from numerical release numbers without deeper meaning<BR>into a time stamp based numbering. Regular releases are identified by<BR>names consisting of the calendar year and month of the release date.<BR>Additional fields (if present) indicate release candidates or bug fix<BR>releases in "stable" maintenance trees.</P>
<P>Examples:<BR>&nbsp;U-Boot v2009.11&nbsp;&nbsp;&nbsp;&nbsp; - Release November 2009<BR>&nbsp;U-Boot v2009.11.1&nbsp;&nbsp; - Release 1 in version November 2009 stable tree<BR>&nbsp;U-Boot v2010.09-rc1 - Release candiate 1 for September 2010 release</P>
<P><BR>Directory Hierarchy:<BR>====================</P>
<P>/arch&nbsp;&nbsp;&nbsp;Architecture specific files<BR>&nbsp; /arc&nbsp;&nbsp;&nbsp;Files generic to ARC architecture<BR>&nbsp;&nbsp;&nbsp; /cpu&nbsp;&nbsp;CPU specific files<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /arc700&nbsp;&nbsp;Files specific to ARC 700 CPUs<BR>&nbsp;&nbsp;&nbsp; /lib&nbsp;&nbsp;Architecture specific library files<BR>&nbsp; /arm&nbsp;&nbsp;&nbsp;Files generic to ARM architecture<BR>&nbsp;&nbsp;&nbsp; /cpu&nbsp;&nbsp;CPU specific files<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /arm720t&nbsp;&nbsp;Files specific to ARM 720 CPUs<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /arm920t&nbsp;&nbsp;Files specific to ARM 920 CPUs<BR>&nbsp;/at91&nbsp;&nbsp;Files specific to Atmel AT91RM9200 CPU<BR>&nbsp;/imx&nbsp;&nbsp;Files specific to Freescale MC9328 i.MX CPUs<BR>&nbsp;/s3c24x0&nbsp;Files specific to Samsung S3C24X0 CPUs<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /arm926ejs&nbsp;Files specific to ARM 926 CPUs<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /arm1136&nbsp;&nbsp;Files specific to ARM 1136 CPUs<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /pxa&nbsp;&nbsp;Files specific to Intel XScale PXA CPUs<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /sa1100&nbsp;&nbsp;Files specific to Intel StrongARM SA1100 CPUs<BR>&nbsp;&nbsp;&nbsp; /lib&nbsp;&nbsp;Architecture specific library files<BR>&nbsp; /avr32&nbsp;&nbsp;Files generic to AVR32 architecture<BR>&nbsp;&nbsp;&nbsp; /cpu&nbsp;&nbsp;CPU specific files<BR>&nbsp;&nbsp;&nbsp; /lib&nbsp;&nbsp;Architecture specific library files<BR>&nbsp; /blackfin&nbsp;&nbsp;Files generic to Analog Devices Blackfin architecture<BR>&nbsp;&nbsp;&nbsp; /cpu&nbsp;&nbsp;CPU specific files<BR>&nbsp;&nbsp;&nbsp; /lib&nbsp;&nbsp;Architecture specific library files<BR>&nbsp; /m68k&nbsp;&nbsp;&nbsp;Files generic to m68k architecture<BR>&nbsp;&nbsp;&nbsp; /cpu&nbsp;&nbsp;CPU specific files<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /mcf52x2&nbsp;&nbsp;Files specific to Freescale ColdFire MCF52x2 CPUs<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /mcf5227x&nbsp;&nbsp;Files specific to Freescale ColdFire MCF5227x CPUs<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /mcf532x&nbsp;&nbsp;Files specific to Freescale ColdFire MCF5329 CPUs<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /mcf5445x&nbsp;&nbsp;Files specific to Freescale ColdFire MCF5445x CPUs<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /mcf547x_8x&nbsp;Files specific to Freescale ColdFire MCF547x_8x CPUs<BR>&nbsp;&nbsp;&nbsp; /lib&nbsp;&nbsp;Architecture specific library files<BR>&nbsp; /microblaze&nbsp;&nbsp;Files generic to microblaze architecture<BR>&nbsp;&nbsp;&nbsp; /cpu&nbsp;&nbsp;CPU specific files<BR>&nbsp;&nbsp;&nbsp; /lib&nbsp;&nbsp;Architecture specific library files<BR>&nbsp; /mips&nbsp;&nbsp;&nbsp;Files generic to MIPS architecture<BR>&nbsp;&nbsp;&nbsp; /cpu&nbsp;&nbsp;CPU specific files<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /mips32&nbsp;&nbsp;Files specific to MIPS32 CPUs<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /mips64&nbsp;&nbsp;Files specific to MIPS64 CPUs<BR>&nbsp;&nbsp;&nbsp; /lib&nbsp;&nbsp;Architecture specific library files<BR>&nbsp; /nds32&nbsp;&nbsp;Files generic to NDS32 architecture<BR>&nbsp;&nbsp;&nbsp; /cpu&nbsp;&nbsp;CPU specific files<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /n1213&nbsp;&nbsp;Files specific to Andes Technology N1213 CPUs<BR>&nbsp;&nbsp;&nbsp; /lib&nbsp;&nbsp;Architecture specific library files<BR>&nbsp; /nios2&nbsp;&nbsp;Files generic to Altera NIOS2 architecture<BR>&nbsp;&nbsp;&nbsp; /cpu&nbsp;&nbsp;CPU specific files<BR>&nbsp;&nbsp;&nbsp; /lib&nbsp;&nbsp;Architecture specific library files<BR>&nbsp; /openrisc&nbsp;&nbsp;Files generic to OpenRISC architecture<BR>&nbsp;&nbsp;&nbsp; /cpu&nbsp;&nbsp;CPU specific files<BR>&nbsp;&nbsp;&nbsp; /lib&nbsp;&nbsp;Architecture specific library files<BR>&nbsp; /powerpc&nbsp;&nbsp;Files generic to PowerPC architecture<BR>&nbsp;&nbsp;&nbsp; /cpu&nbsp;&nbsp;CPU specific files<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /mpc5xx&nbsp;&nbsp;Files specific to Freescale MPC5xx CPUs<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /mpc5xxx&nbsp;&nbsp;Files specific to Freescale MPC5xxx CPUs<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /mpc8xx&nbsp;&nbsp;Files specific to Freescale MPC8xx CPUs<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /mpc8260&nbsp;&nbsp;Files specific to Freescale MPC8260 CPUs<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /mpc85xx&nbsp;&nbsp;Files specific to Freescale MPC85xx CPUs<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /ppc4xx&nbsp;&nbsp;Files specific to AMCC PowerPC 4xx CPUs<BR>&nbsp;&nbsp;&nbsp; /lib&nbsp;&nbsp;Architecture specific library files<BR>&nbsp; /sh&nbsp;&nbsp;&nbsp;Files generic to SH architecture<BR>&nbsp;&nbsp;&nbsp; /cpu&nbsp;&nbsp;CPU specific files<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /sh2&nbsp;&nbsp;Files specific to sh2 CPUs<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /sh3&nbsp;&nbsp;Files specific to sh3 CPUs<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /sh4&nbsp;&nbsp;Files specific to sh4 CPUs<BR>&nbsp;&nbsp;&nbsp; /lib&nbsp;&nbsp;Architecture specific library files<BR>&nbsp; /sparc&nbsp;&nbsp;Files generic to SPARC architecture<BR>&nbsp;&nbsp;&nbsp; /cpu&nbsp;&nbsp;CPU specific files<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /leon2&nbsp;&nbsp;Files specific to Gaisler LEON2 SPARC CPU<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; /leon3&nbsp;&nbsp;Files specific to Gaisler LEON3 SPARC CPU<BR>&nbsp;&nbsp;&nbsp; /lib&nbsp;&nbsp;Architecture specific library files<BR>&nbsp; /x86&nbsp;&nbsp;&nbsp;Files generic to x86 architecture<BR>&nbsp;&nbsp;&nbsp; /cpu&nbsp;&nbsp;CPU specific files<BR>&nbsp;&nbsp;&nbsp; /lib&nbsp;&nbsp;Architecture specific library files<BR>/api&nbsp;&nbsp;&nbsp;Machine/arch independent API for external apps<BR>/board&nbsp;&nbsp;&nbsp;Board dependent files<BR>/common&nbsp;&nbsp;&nbsp;Misc architecture independent functions<BR>/disk&nbsp;&nbsp;&nbsp;Code for disk drive partition handling<BR>/doc&nbsp;&nbsp;&nbsp;Documentation (don't expect too much)<BR>/drivers&nbsp;&nbsp;Commonly used device drivers<BR>/dts&nbsp;&nbsp;&nbsp;Contains Makefile for building internal U-Boot fdt.<BR>/examples&nbsp;&nbsp;Example code for standalone applications, etc.<BR>/fs&nbsp;&nbsp;&nbsp;Filesystem code (cramfs, ext2, jffs2, etc.)<BR>/include&nbsp;&nbsp;Header Files<BR>/lib&nbsp;&nbsp;&nbsp;Files generic to all architectures<BR>&nbsp; /libfdt&nbsp;&nbsp;Library files to support flattened device trees<BR>&nbsp; /lzma&nbsp;&nbsp;&nbsp;Library files to support LZMA decompression<BR>&nbsp; /lzo&nbsp;&nbsp;&nbsp;Library files to support LZO decompression<BR>/net&nbsp;&nbsp;&nbsp;Networking code<BR>/post&nbsp;&nbsp;&nbsp;Power On Self Test<BR>/spl&nbsp;&nbsp;&nbsp;Secondary Program Loader framework<BR>/tools&nbsp;&nbsp;&nbsp;Tools to build S-Record or U-Boot images, etc.</P>
<P>Software Configuration:<BR>=======================</P>
<P>Configuration is usually done using C preprocessor defines; the<BR>rationale behind that is to avoid dead code whenever possible.</P>
<P>There are two classes of configuration variables:</P>
<P>* Configuration _OPTIONS_:<BR>&nbsp; These are selectable by the user and have names beginning with<BR>&nbsp; "CONFIG_".</P>
<P>* Configuration _SETTINGS_:<BR>&nbsp; These depend on the hardware etc. and should not be meddled with if<BR>&nbsp; you don't know what you're doing; they have names beginning with<BR>&nbsp; "CONFIG_SYS_".</P>
<P>Later we will add a configuration tool - probably similar to or even<BR>identical to what's used for the Linux kernel. Right now, we have to<BR>do the configuration by hand, which means creating some symbolic<BR>links and editing some configuration files. We use the TQM8xxL boards<BR>as an example here.</P>
<P><BR>Selection of Processor Architecture and Board Type:<BR>---------------------------------------------------</P>
<P>For all supported boards there are ready-to-use default<BR>configurations available; just type "make &lt;board_name&gt;_defconfig".</P>
<P>Example: For a TQM823L module type:</P>
<P>&nbsp;cd u-boot<BR>&nbsp;make TQM823L_defconfig</P>
<P>For the Cogent platform, you need to specify the CPU type as well;<BR>e.g. "make cogent_mpc8xx_defconfig". And also configure the cogent<BR>directory according to the instructions in cogent/README.</P>
<P><BR>Sandbox Environment:<BR>--------------------</P>
<P>U-Boot can be built natively to run on a Linux host using the 'sandbox'<BR>board. This allows feature development which is not board- or architecture-<BR>specific to be undertaken on a native platform. The sandbox is also used to<BR>run some of U-Boot's tests.</P>
<P>See board/sandbox/README.sandbox for more details.</P>
<P><BR>Board Initialisation Flow:<BR>--------------------------</P>
<P>This is the intended start-up flow for boards. This should apply for both<BR>SPL and U-Boot proper (i.e. they both follow the same rules). At present SPL<BR>mostly uses a separate code path, but the funtion names and roles of each<BR>function are the same. Some boards or architectures may not conform to this.<BR>At least most ARM boards which use CONFIG_SPL_FRAMEWORK conform to this.</P>
<P>Execution starts with start.S with three functions called during init after<BR>that. The purpose and limitations of each is described below.</P>
<P>lowlevel_init():<BR>&nbsp;- purpose: essential init to permit execution to reach board_init_f()<BR>&nbsp;- no global_data or BSS<BR>&nbsp;- there is no stack (ARMv7 may have one but it will soon be removed)<BR>&nbsp;- must not set up SDRAM or use console<BR>&nbsp;- must only do the bare minimum to allow execution to continue to<BR>&nbsp;&nbsp;board_init_f()<BR>&nbsp;- this is almost never needed<BR>&nbsp;- return normally from this function</P>
<P>board_init_f():<BR>&nbsp;- purpose: set up the machine ready for running board_init_r():<BR>&nbsp;&nbsp;i.e. SDRAM and serial UART<BR>&nbsp;- global_data is available<BR>&nbsp;- stack is in SRAM<BR>&nbsp;- BSS is not available, so you cannot use global/static variables,<BR>&nbsp;&nbsp;only stack variables and global_data</P>
<P>&nbsp;Non-SPL-specific notes:<BR>&nbsp;- dram_init() is called to set up DRAM. If already done in SPL this<BR>&nbsp;&nbsp;can do nothing</P>
<P>&nbsp;SPL-specific notes:<BR>&nbsp;- you can override the entire board_init_f() function with your own<BR>&nbsp;&nbsp;version as needed.<BR>&nbsp;- preloader_console_init() can be called here in extremis<BR>&nbsp;- should set up SDRAM, and anything needed to make the UART work<BR>&nbsp;- these is no need to clear BSS, it will be done by crt0.S<BR>&nbsp;- must return normally from this function (don't call board_init_r()<BR>&nbsp;&nbsp;directly)</P>
<P>Here the BSS is cleared. For SPL, if CONFIG_SPL_STACK_R is defined, then at<BR>this point the stack and global_data are relocated to below<BR>CONFIG_SPL_STACK_R_ADDR. For non-SPL, U-Boot is relocated to run at the top of<BR>memory.</P>
<P>board_init_r():<BR>&nbsp;- purpose: main execution, common code<BR>&nbsp;- global_data is available<BR>&nbsp;- SDRAM is available<BR>&nbsp;- BSS is available, all static/global variables can be used<BR>&nbsp;- execution eventually continues to main_loop()</P>
<P>&nbsp;Non-SPL-specific notes:<BR>&nbsp;- U-Boot is relocated to the top of memory and is now running from<BR>&nbsp;&nbsp;there.</P>
<P>&nbsp;SPL-specific notes:<BR>&nbsp;- stack is optionally in SDRAM, if CONFIG_SPL_STACK_R is defined and<BR>&nbsp;&nbsp;CONFIG_SPL_STACK_R_ADDR points into SDRAM<BR>&nbsp;- preloader_console_init() can be called here - typically this is<BR>&nbsp;&nbsp;done by defining CONFIG_SPL_BOARD_INIT and then supplying a<BR>&nbsp;&nbsp;spl_board_init() function containing this call<BR>&nbsp;- loads U-Boot or (in falcon mode) Linux</P>
<P>&nbsp;</P>
<P>Configuration Options:<BR>----------------------</P>
<P>Configuration depends on the combination of board and CPU type; all<BR>such information is kept in a configuration file<BR>"include/configs/&lt;board_name&gt;.h".</P>
<P>Example: For a TQM823L module, all configuration settings are in<BR>"include/configs/TQM823L.h".</P>
<P><BR>Many of the options are named exactly as the corresponding Linux<BR>kernel configuration options. The intention is to make it easier to<BR>build a config tool - later.</P>
<P><BR>The following options need to be configured:</P>
<P>- CPU Type:&nbsp;Define exactly one, e.g. CONFIG_MPC85XX.</P>
<P>- Board Type:&nbsp;Define exactly one, e.g. CONFIG_MPC8540ADS.</P>
<P>- CPU Daughterboard Type: (if CONFIG_ATSTK1000 is defined)<BR>&nbsp;&nbsp;Define exactly one, e.g. CONFIG_ATSTK1002</P>
<P>- CPU Module Type: (if CONFIG_COGENT is defined)<BR>&nbsp;&nbsp;Define exactly one of<BR>&nbsp;&nbsp;CONFIG_CMA286_60_OLD<BR>--- FIXME --- not tested yet:<BR>&nbsp;&nbsp;CONFIG_CMA286_60, CONFIG_CMA286_21, CONFIG_CMA286_60P,<BR>&nbsp;&nbsp;CONFIG_CMA287_23, CONFIG_CMA287_50</P>
<P>- Motherboard Type: (if CONFIG_COGENT is defined)<BR>&nbsp;&nbsp;Define exactly one of<BR>&nbsp;&nbsp;CONFIG_CMA101, CONFIG_CMA102</P>
<P>- Motherboard I/O Modules: (if CONFIG_COGENT is defined)<BR>&nbsp;&nbsp;Define one or more of<BR>&nbsp;&nbsp;CONFIG_CMA302</P>
<P>- Motherboard Options: (if CONFIG_CMA101 or CONFIG_CMA102 are defined)<BR>&nbsp;&nbsp;Define one or more of<BR>&nbsp;&nbsp;CONFIG_LCD_HEARTBEAT&nbsp;- update a character position on<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; the LCD display every second with<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; a "rotator" |\-/|\-/</P>
<P>- Marvell Family Member<BR>&nbsp;&nbsp;CONFIG_SYS_MVFS&nbsp;&nbsp;- define it if you want to enable<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; multiple fs option at one time<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for marvell soc family</P>
<P>- 8xx CPU Options: (if using an MPC8xx CPU)<BR>&nbsp;&nbsp;CONFIG_8xx_GCLK_FREQ&nbsp;- deprecated: CPU clock if<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; get_gclk_freq() cannot work<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; e.g. if there is no 32KHz<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; reference PIT/RTC clock<BR>&nbsp;&nbsp;CONFIG_8xx_OSCLK&nbsp;- PLL input clock (either EXTCLK<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; or XTAL/EXTAL)</P>
<P>- 859/866/885 CPU options: (if using a MPC859 or MPC866 or MPC885 CPU):<BR>&nbsp;&nbsp;CONFIG_SYS_8xx_CPUCLK_MIN<BR>&nbsp;&nbsp;CONFIG_SYS_8xx_CPUCLK_MAX<BR>&nbsp;&nbsp;CONFIG_8xx_CPUCLK_DEFAULT<BR>&nbsp;&nbsp;&nbsp;See doc/README.MPC866</P>
<P>&nbsp;&nbsp;CONFIG_SYS_MEASURE_CPUCLK</P>
<P>&nbsp;&nbsp;Define this to measure the actual CPU clock instead<BR>&nbsp;&nbsp;of relying on the correctness of the configured<BR>&nbsp;&nbsp;values. Mostly useful for board bringup to make sure<BR>&nbsp;&nbsp;the PLL is locked at the intended frequency. Note<BR>&nbsp;&nbsp;that this requires a (stable) reference clock (32 kHz<BR>&nbsp;&nbsp;RTC clock or CONFIG_SYS_8XX_XIN)</P>
<P>&nbsp;&nbsp;CONFIG_SYS_DELAYED_ICACHE</P>
<P>&nbsp;&nbsp;Define this option if you want to enable the<BR>&nbsp;&nbsp;ICache only when Code runs from RAM.</P>
<P>- 85xx CPU Options:<BR>&nbsp;&nbsp;CONFIG_SYS_PPC64</P>
<P>&nbsp;&nbsp;Specifies that the core is a 64-bit PowerPC implementation (implements<BR>&nbsp;&nbsp;the "64" category of the Power ISA). This is necessary for ePAPR<BR>&nbsp;&nbsp;compliance, among other possible reasons.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FSL_TBCLK_DIV</P>
<P>&nbsp;&nbsp;Defines the core time base clock divider ratio compared to the<BR>&nbsp;&nbsp;system clock.&nbsp; On most PQ3 devices this is 8, on newer QorIQ<BR>&nbsp;&nbsp;devices it can be 16 or 32.&nbsp; The ratio varies from SoC to Soc.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FSL_PCIE_COMPAT</P>
<P>&nbsp;&nbsp;Defines the string to utilize when trying to match PCIe device<BR>&nbsp;&nbsp;tree nodes for the given platform.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_PPC_E500_DEBUG_TLB</P>
<P>&nbsp;&nbsp;Enables a temporary TLB entry to be used during boot to work<BR>&nbsp;&nbsp;around limitations in e500v1 and e500v2 external debugger<BR>&nbsp;&nbsp;support. This reduces the portions of the boot code where<BR>&nbsp;&nbsp;breakpoints and single stepping do not work.&nbsp; The value of this<BR>&nbsp;&nbsp;symbol should be set to the TLB1 entry to be used for this<BR>&nbsp;&nbsp;purpose.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FSL_ERRATUM_A004510</P>
<P>&nbsp;&nbsp;Enables a workaround for erratum A004510.&nbsp; If set,<BR>&nbsp;&nbsp;then CONFIG_SYS_FSL_ERRATUM_A004510_SVR_REV and<BR>&nbsp;&nbsp;CONFIG_SYS_FSL_CORENET_SNOOPVEC_COREONLY must be set.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FSL_ERRATUM_A004510_SVR_REV<BR>&nbsp;&nbsp;CONFIG_SYS_FSL_ERRATUM_A004510_SVR_REV2 (optional)</P>
<P>&nbsp;&nbsp;Defines one or two SoC revisions (low 8 bits of SVR)<BR>&nbsp;&nbsp;for which the A004510 workaround should be applied.</P>
<P>&nbsp;&nbsp;The rest of SVR is either not relevant to the decision<BR>&nbsp;&nbsp;of whether the erratum is present (e.g. p2040 versus<BR>&nbsp;&nbsp;p2041) or is implied by the build target, which controls<BR>&nbsp;&nbsp;whether CONFIG_SYS_FSL_ERRATUM_A004510 is set.</P>
<P>&nbsp;&nbsp;See Freescale App Note 4493 for more information about<BR>&nbsp;&nbsp;this erratum.</P>
<P>&nbsp;&nbsp;CONFIG_A003399_NOR_WORKAROUND<BR>&nbsp;&nbsp;Enables a workaround for IFC erratum A003399. It is only<BR>&nbsp;&nbsp;required during NOR boot.</P>
<P>&nbsp;&nbsp;CONFIG_A008044_WORKAROUND<BR>&nbsp;&nbsp;Enables a workaround for T1040/T1042 erratum A008044. It is only<BR>&nbsp;&nbsp;required during NAND boot and valid for Rev 1.0 SoC revision</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FSL_CORENET_SNOOPVEC_COREONLY</P>
<P>&nbsp;&nbsp;This is the value to write into CCSR offset 0x18600<BR>&nbsp;&nbsp;according to the A004510 workaround.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FSL_DSP_DDR_ADDR<BR>&nbsp;&nbsp;This value denotes start offset of DDR memory which is<BR>&nbsp;&nbsp;connected exclusively to the DSP cores.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FSL_DSP_M2_RAM_ADDR<BR>&nbsp;&nbsp;This value denotes start offset of M2 memory<BR>&nbsp;&nbsp;which is directly connected to the DSP core.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FSL_DSP_M3_RAM_ADDR<BR>&nbsp;&nbsp;This value denotes start offset of M3 memory which is directly<BR>&nbsp;&nbsp;connected to the DSP core.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FSL_DSP_CCSRBAR_DEFAULT<BR>&nbsp;&nbsp;This value denotes start offset of DSP CCSR space.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FSL_SINGLE_SOURCE_CLK<BR>&nbsp;&nbsp;Single Source Clock is clocking mode present in some of FSL SoC's.<BR>&nbsp;&nbsp;In this mode, a single differential clock is used to supply<BR>&nbsp;&nbsp;clocks to the sysclock, ddrclock and usbclock.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_CPC_REINIT_F<BR>&nbsp;&nbsp;This CONFIG is defined when the CPC is configured as SRAM at the<BR>&nbsp;&nbsp;time of U-boot entry and is required to be re-initialized.</P>
<P>&nbsp;&nbsp;CONFIG_DEEP_SLEEP<BR>&nbsp;&nbsp;Indicates this SoC supports deep sleep feature. If deep sleep is<BR>&nbsp;&nbsp;supported, core will start to execute uboot when wakes up.</P>
<P>- Generic CPU options:<BR>&nbsp;&nbsp;CONFIG_SYS_GENERIC_GLOBAL_DATA<BR>&nbsp;&nbsp;Defines global data is initialized in generic board board_init_f().<BR>&nbsp;&nbsp;If this macro is defined, global data is created and cleared in<BR>&nbsp;&nbsp;generic board board_init_f(). Without this macro, architecture/board<BR>&nbsp;&nbsp;should initialize global data before calling board_init_f().</P>
<P>&nbsp;&nbsp;CONFIG_SYS_BIG_ENDIAN, CONFIG_SYS_LITTLE_ENDIAN</P>
<P>&nbsp;&nbsp;Defines the endianess of the CPU. Implementation of those<BR>&nbsp;&nbsp;values is arch specific.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FSL_DDR<BR>&nbsp;&nbsp;Freescale DDR driver in use. This type of DDR controller is<BR>&nbsp;&nbsp;found in mpc83xx, mpc85xx, mpc86xx as well as some ARM core<BR>&nbsp;&nbsp;SoCs.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FSL_DDR_ADDR<BR>&nbsp;&nbsp;Freescale DDR memory-mapped register base.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FSL_DDR_EMU<BR>&nbsp;&nbsp;Specify emulator support for DDR. Some DDR features such as<BR>&nbsp;&nbsp;deskew training are not available.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FSL_DDRC_GEN1<BR>&nbsp;&nbsp;Freescale DDR1 controller.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FSL_DDRC_GEN2<BR>&nbsp;&nbsp;Freescale DDR2 controller.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FSL_DDRC_GEN3<BR>&nbsp;&nbsp;Freescale DDR3 controller.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FSL_DDRC_GEN4<BR>&nbsp;&nbsp;Freescale DDR4 controller.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FSL_DDRC_ARM_GEN3<BR>&nbsp;&nbsp;Freescale DDR3 controller for ARM-based SoCs.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FSL_DDR1<BR>&nbsp;&nbsp;Board config to use DDR1. It can be enabled for SoCs with<BR>&nbsp;&nbsp;Freescale DDR1 or DDR2 controllers, depending on the board<BR>&nbsp;&nbsp;implemetation.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FSL_DDR2<BR>&nbsp;&nbsp;Board config to use DDR2. It can be eanbeld for SoCs with<BR>&nbsp;&nbsp;Freescale DDR2 or DDR3 controllers, depending on the board<BR>&nbsp;&nbsp;implementation.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FSL_DDR3<BR>&nbsp;&nbsp;Board config to use DDR3. It can be enabled for SoCs with<BR>&nbsp;&nbsp;Freescale DDR3 or DDR3L controllers.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FSL_DDR3L<BR>&nbsp;&nbsp;Board config to use DDR3L. It can be enabled for SoCs with<BR>&nbsp;&nbsp;DDR3L controllers.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FSL_DDR4<BR>&nbsp;&nbsp;Board config to use DDR4. It can be enabled for SoCs with<BR>&nbsp;&nbsp;DDR4 controllers.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FSL_IFC_BE<BR>&nbsp;&nbsp;Defines the IFC controller register space as Big Endian</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FSL_IFC_LE<BR>&nbsp;&nbsp;Defines the IFC controller register space as Little Endian</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FSL_PBL_PBI<BR>&nbsp;&nbsp;It enables addition of RCW (Power on reset configuration) in built image.<BR>&nbsp;&nbsp;Please refer doc/README.pblimage for more details</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FSL_PBL_RCW<BR>&nbsp;&nbsp;It adds PBI(pre-boot instructions) commands in u-boot build image.<BR>&nbsp;&nbsp;PBI commands can be used to configure SoC before it starts the execution.<BR>&nbsp;&nbsp;Please refer doc/README.pblimage for more details</P>
<P>&nbsp;&nbsp;CONFIG_SPL_FSL_PBL<BR>&nbsp;&nbsp;It adds a target to create boot binary having SPL binary in PBI format<BR>&nbsp;&nbsp;concatenated with u-boot binary.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FSL_DDR_BE<BR>&nbsp;&nbsp;Defines the DDR controller register space as Big Endian</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FSL_DDR_LE<BR>&nbsp;&nbsp;Defines the DDR controller register space as Little Endian</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FSL_DDR_SDRAM_BASE_PHY<BR>&nbsp;&nbsp;Physical address from the view of DDR controllers. It is the<BR>&nbsp;&nbsp;same as CONFIG_SYS_DDR_SDRAM_BASE for&nbsp; all Power SoCs. But<BR>&nbsp;&nbsp;it could be different for ARM SoCs.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FSL_DDR_INTLV_256B<BR>&nbsp;&nbsp;DDR controller interleaving on 256-byte. This is a special<BR>&nbsp;&nbsp;interleaving mode, handled by Dickens for Freescale layerscape<BR>&nbsp;&nbsp;SoCs with ARM core.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FSL_DDR_MAIN_NUM_CTRLS<BR>&nbsp;&nbsp;Number of controllers used as main memory.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FSL_OTHER_DDR_NUM_CTRLS<BR>&nbsp;&nbsp;Number of controllers used for other than main memory.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FSL_SEC_BE<BR>&nbsp;&nbsp;Defines the SEC controller register space as Big Endian</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FSL_SEC_LE<BR>&nbsp;&nbsp;Defines the SEC controller register space as Little Endian</P>
<P>- Intel Monahans options:<BR>&nbsp;&nbsp;CONFIG_SYS_MONAHANS_RUN_MODE_OSC_RATIO</P>
<P>&nbsp;&nbsp;Defines the Monahans run mode to oscillator<BR>&nbsp;&nbsp;ratio. Valid values are 8, 16, 24, 31. The core<BR>&nbsp;&nbsp;frequency is this value multiplied by 13 MHz.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_MONAHANS_TURBO_RUN_MODE_RATIO</P>
<P>&nbsp;&nbsp;Defines the Monahans turbo mode to oscillator<BR>&nbsp;&nbsp;ratio. Valid values are 1 (default if undefined) and<BR>&nbsp;&nbsp;2. The core frequency as calculated above is multiplied<BR>&nbsp;&nbsp;by this value.</P>
<P>- MIPS CPU options:<BR>&nbsp;&nbsp;CONFIG_SYS_INIT_SP_OFFSET</P>
<P>&nbsp;&nbsp;Offset relative to CONFIG_SYS_SDRAM_BASE for initial stack<BR>&nbsp;&nbsp;pointer. This is needed for the temporary stack before<BR>&nbsp;&nbsp;relocation.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_MIPS_CACHE_MODE</P>
<P>&nbsp;&nbsp;Cache operation mode for the MIPS CPU.<BR>&nbsp;&nbsp;See also arch/mips/include/asm/mipsregs.h.<BR>&nbsp;&nbsp;Possible values are:<BR>&nbsp;&nbsp;&nbsp;CONF_CM_CACHABLE_NO_WA<BR>&nbsp;&nbsp;&nbsp;CONF_CM_CACHABLE_WA<BR>&nbsp;&nbsp;&nbsp;CONF_CM_UNCACHED<BR>&nbsp;&nbsp;&nbsp;CONF_CM_CACHABLE_NONCOHERENT<BR>&nbsp;&nbsp;&nbsp;CONF_CM_CACHABLE_CE<BR>&nbsp;&nbsp;&nbsp;CONF_CM_CACHABLE_COW<BR>&nbsp;&nbsp;&nbsp;CONF_CM_CACHABLE_CUW<BR>&nbsp;&nbsp;&nbsp;CONF_CM_CACHABLE_ACCELERATED</P>
<P>&nbsp;&nbsp;CONFIG_SYS_XWAY_EBU_BOOTCFG</P>
<P>&nbsp;&nbsp;Special option for Lantiq XWAY SoCs for booting from NOR flash.<BR>&nbsp;&nbsp;See also arch/mips/cpu/mips32/start.S.</P>
<P>&nbsp;&nbsp;CONFIG_XWAY_SWAP_BYTES</P>
<P>&nbsp;&nbsp;Enable compilation of tools/xway-swap-bytes needed for Lantiq<BR>&nbsp;&nbsp;XWAY SoCs for booting from NOR flash. The U-Boot image needs to<BR>&nbsp;&nbsp;be swapped if a flash programmer is used.</P>
<P>- ARM options:<BR>&nbsp;&nbsp;CONFIG_SYS_EXCEPTION_VECTORS_HIGH</P>
<P>&nbsp;&nbsp;Select high exception vectors of the ARM core, e.g., do not<BR>&nbsp;&nbsp;clear the V bit of the c1 register of CP15.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_THUMB_BUILD</P>
<P>&nbsp;&nbsp;Use this flag to build U-Boot using the Thumb instruction<BR>&nbsp;&nbsp;set for ARM architectures. Thumb instruction set provides<BR>&nbsp;&nbsp;better code density. For ARM architectures that support<BR>&nbsp;&nbsp;Thumb2 this flag will result in Thumb2 code generated by<BR>&nbsp;&nbsp;GCC.</P>
<P>&nbsp;&nbsp;CONFIG_ARM_ERRATA_716044<BR>&nbsp;&nbsp;CONFIG_ARM_ERRATA_742230<BR>&nbsp;&nbsp;CONFIG_ARM_ERRATA_743622<BR>&nbsp;&nbsp;CONFIG_ARM_ERRATA_751472<BR>&nbsp;&nbsp;CONFIG_ARM_ERRATA_794072<BR>&nbsp;&nbsp;CONFIG_ARM_ERRATA_761320</P>
<P>&nbsp;&nbsp;If set, the workarounds for these ARM errata are applied early<BR>&nbsp;&nbsp;during U-Boot startup. Note that these options force the<BR>&nbsp;&nbsp;workarounds to be applied; no CPU-type/version detection<BR>&nbsp;&nbsp;exists, unlike the similar options in the Linux kernel. Do not<BR>&nbsp;&nbsp;set these options unless they apply!</P>
<P>&nbsp;&nbsp;NOTE: The following can be machine specific errata. These<BR>&nbsp;&nbsp;do have ability to provide rudimentary version and machine<BR>&nbsp;&nbsp;specific checks, but expect no product checks.<BR>&nbsp;&nbsp;CONFIG_ARM_ERRATA_430973<BR>&nbsp;&nbsp;CONFIG_ARM_ERRATA_454179<BR>&nbsp;&nbsp;CONFIG_ARM_ERRATA_621766<BR>&nbsp;&nbsp;CONFIG_ARM_ERRATA_798870</P>
<P>- Tegra SoC options:<BR>&nbsp;&nbsp;CONFIG_TEGRA_SUPPORT_NON_SECURE</P>
<P>&nbsp;&nbsp;Support executing U-Boot in non-secure (NS) mode. Certain<BR>&nbsp;&nbsp;impossible actions will be skipped if the CPU is in NS mode,<BR>&nbsp;&nbsp;such as ARM architectural timer initialization.</P>
<P>- Linux Kernel Interface:<BR>&nbsp;&nbsp;CONFIG_CLOCKS_IN_MHZ</P>
<P>&nbsp;&nbsp;U-Boot stores all clock information in Hz<BR>&nbsp;&nbsp;internally. For binary compatibility with older Linux<BR>&nbsp;&nbsp;kernels (which expect the clocks passed in the<BR>&nbsp;&nbsp;bd_info data to be in MHz) the environment variable<BR>&nbsp;&nbsp;"clocks_in_mhz" can be defined so that U-Boot<BR>&nbsp;&nbsp;converts clock data to MHZ before passing it to the<BR>&nbsp;&nbsp;Linux kernel.<BR>&nbsp;&nbsp;When CONFIG_CLOCKS_IN_MHZ is defined, a definition of<BR>&nbsp;&nbsp;"clocks_in_mhz=1" is automatically included in the<BR>&nbsp;&nbsp;default environment.</P>
<P>&nbsp;&nbsp;CONFIG_MEMSIZE_IN_BYTES&nbsp;&nbsp;[relevant for MIPS only]</P>
<P>&nbsp;&nbsp;When transferring memsize parameter to Linux, some versions<BR>&nbsp;&nbsp;expect it to be in bytes, others in MB.<BR>&nbsp;&nbsp;Define CONFIG_MEMSIZE_IN_BYTES to make it in bytes.</P>
<P>&nbsp;&nbsp;CONFIG_OF_LIBFDT</P>
<P>&nbsp;&nbsp;New kernel versions are expecting firmware settings to be<BR>&nbsp;&nbsp;passed using flattened device trees (based on open firmware<BR>&nbsp;&nbsp;concepts).</P>
<P>&nbsp;&nbsp;CONFIG_OF_LIBFDT<BR>&nbsp;&nbsp; * New libfdt-based support<BR>&nbsp;&nbsp; * Adds the "fdt" command<BR>&nbsp;&nbsp; * The bootm command automatically updates the fdt</P>
<P>&nbsp;&nbsp;OF_CPU - The proper name of the cpus node (only required for<BR>&nbsp;&nbsp;&nbsp;MPC512X and MPC5xxx based boards).<BR>&nbsp;&nbsp;OF_SOC - The proper name of the soc node (only required for<BR>&nbsp;&nbsp;&nbsp;MPC512X and MPC5xxx based boards).<BR>&nbsp;&nbsp;OF_TBCLK - The timebase frequency.<BR>&nbsp;&nbsp;OF_STDOUT_PATH - The path to the console device</P>
<P>&nbsp;&nbsp;boards with QUICC Engines require OF_QE to set UCC MAC<BR>&nbsp;&nbsp;addresses</P>
<P>&nbsp;&nbsp;CONFIG_OF_BOARD_SETUP</P>
<P>&nbsp;&nbsp;Board code has addition modification that it wants to make<BR>&nbsp;&nbsp;to the flat device tree before handing it off to the kernel</P>
<P>&nbsp;&nbsp;CONFIG_OF_SYSTEM_SETUP</P>
<P>&nbsp;&nbsp;Other code has addition modification that it wants to make<BR>&nbsp;&nbsp;to the flat device tree before handing it off to the kernel.<BR>&nbsp;&nbsp;This causes ft_system_setup() to be called before booting<BR>&nbsp;&nbsp;the kernel.</P>
<P>&nbsp;&nbsp;CONFIG_OF_BOOT_CPU</P>
<P>&nbsp;&nbsp;This define fills in the correct boot CPU in the boot<BR>&nbsp;&nbsp;param header, the default value is zero if undefined.</P>
<P>&nbsp;&nbsp;CONFIG_OF_IDE_FIXUP</P>
<P>&nbsp;&nbsp;U-Boot can detect if an IDE device is present or not.<BR>&nbsp;&nbsp;If not, and this new config option is activated, U-Boot<BR>&nbsp;&nbsp;removes the ATA node from the DTS before booting Linux,<BR>&nbsp;&nbsp;so the Linux IDE driver does not probe the device and<BR>&nbsp;&nbsp;crash. This is needed for buggy hardware (uc101) where<BR>&nbsp;&nbsp;no pull down resistor is connected to the signal IDE5V_DD7.</P>
<P>&nbsp;&nbsp;CONFIG_MACH_TYPE&nbsp;[relevant for ARM only][mandatory]</P>
<P>&nbsp;&nbsp;This setting is mandatory for all boards that have only one<BR>&nbsp;&nbsp;machine type and must be used to specify the machine type<BR>&nbsp;&nbsp;number as it appears in the ARM machine registry<BR>&nbsp;&nbsp;(see <A href="http://www.arm.linux.org.uk/developer/machines/">http://www.arm.linux.org.uk/developer/machines/</A>).<BR>&nbsp;&nbsp;Only boards that have multiple machine types supported<BR>&nbsp;&nbsp;in a single configuration file and the machine type is<BR>&nbsp;&nbsp;runtime discoverable, do not have to use this setting.</P>
<P>- vxWorks boot parameters:</P>
<P>&nbsp;&nbsp;bootvx constructs a valid bootline using the following<BR>&nbsp;&nbsp;environments variables: bootfile, ipaddr, serverip, hostname.<BR>&nbsp;&nbsp;It loads the vxWorks image pointed bootfile.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_VXWORKS_BOOT_DEVICE - The vxworks device name<BR>&nbsp;&nbsp;CONFIG_SYS_VXWORKS_MAC_PTR - Ethernet 6 byte MA -address<BR>&nbsp;&nbsp;CONFIG_SYS_VXWORKS_SERVERNAME - Name of the server<BR>&nbsp;&nbsp;CONFIG_SYS_VXWORKS_BOOT_ADDR - Address of boot parameters</P>
<P>&nbsp;&nbsp;CONFIG_SYS_VXWORKS_ADD_PARAMS</P>
<P>&nbsp;&nbsp;Add it at the end of the bootline. E.g "u=username pw=secret"</P>
<P>&nbsp;&nbsp;Note: If a "bootargs" environment is defined, it will overwride<BR>&nbsp;&nbsp;the defaults discussed just above.</P>
<P>- Cache Configuration:<BR>&nbsp;&nbsp;CONFIG_SYS_ICACHE_OFF - Do not enable instruction cache in U-Boot<BR>&nbsp;&nbsp;CONFIG_SYS_DCACHE_OFF - Do not enable data cache in U-Boot<BR>&nbsp;&nbsp;CONFIG_SYS_L2CACHE_OFF- Do not enable L2 cache in U-Boot</P>
<P>- Cache Configuration for ARM:<BR>&nbsp;&nbsp;CONFIG_SYS_L2_PL310 - Enable support for ARM PL310 L2 cache<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; controller<BR>&nbsp;&nbsp;CONFIG_SYS_PL310_BASE - Physical base address of PL310<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;controller register space</P>
<P>- Serial Ports:<BR>&nbsp;&nbsp;CONFIG_PL010_SERIAL</P>
<P>&nbsp;&nbsp;Define this if you want support for Amba PrimeCell PL010 UARTs.</P>
<P>&nbsp;&nbsp;CONFIG_PL011_SERIAL</P>
<P>&nbsp;&nbsp;Define this if you want support for Amba PrimeCell PL011 UARTs.</P>
<P>&nbsp;&nbsp;CONFIG_PL011_CLOCK</P>
<P>&nbsp;&nbsp;If you have Amba PrimeCell PL011 UARTs, set this variable to<BR>&nbsp;&nbsp;the clock speed of the UARTs.</P>
<P>&nbsp;&nbsp;CONFIG_PL01x_PORTS</P>
<P>&nbsp;&nbsp;If you have Amba PrimeCell PL010 or PL011 UARTs on your board,<BR>&nbsp;&nbsp;define this to a list of base addresses for each (supported)<BR>&nbsp;&nbsp;port. See e.g. include/configs/versatile.h</P>
<P>&nbsp;&nbsp;CONFIG_PL011_SERIAL_RLCR</P>
<P>&nbsp;&nbsp;Some vendor versions of PL011 serial ports (e.g. ST-Ericsson U8500)<BR>&nbsp;&nbsp;have separate receive and transmit line control registers.&nbsp; Set<BR>&nbsp;&nbsp;this variable to initialize the extra register.</P>
<P>&nbsp;&nbsp;CONFIG_PL011_SERIAL_FLUSH_ON_INIT</P>
<P>&nbsp;&nbsp;On some platforms (e.g. U8500) U-Boot is loaded by a second stage<BR>&nbsp;&nbsp;boot loader that has already initialized the UART.&nbsp; Define this<BR>&nbsp;&nbsp;variable to flush the UART at init time.</P>
<P>&nbsp;&nbsp;CONFIG_SERIAL_HW_FLOW_CONTROL</P>
<P>&nbsp;&nbsp;Define this variable to enable hw flow control in serial driver.<BR>&nbsp;&nbsp;Current user of this option is drivers/serial/nsl16550.c driver</P>
<P>- Console Interface:<BR>&nbsp;&nbsp;Depending on board, define exactly one serial port<BR>&nbsp;&nbsp;(like CONFIG_8xx_CONS_SMC1, CONFIG_8xx_CONS_SMC2,<BR>&nbsp;&nbsp;CONFIG_8xx_CONS_SCC1, ...), or switch off the serial<BR>&nbsp;&nbsp;console by defining CONFIG_8xx_CONS_NONE</P>
<P>&nbsp;&nbsp;Note: if CONFIG_8xx_CONS_NONE is defined, the serial<BR>&nbsp;&nbsp;port routines must be defined elsewhere<BR>&nbsp;&nbsp;(i.e. serial_init(), serial_getc(), ...)</P>
<P>&nbsp;&nbsp;CONFIG_CFB_CONSOLE<BR>&nbsp;&nbsp;Enables console device for a color framebuffer. Needs following<BR>&nbsp;&nbsp;defines (cf. smiLynxEM, i8042)<BR>&nbsp;&nbsp;&nbsp;VIDEO_FB_LITTLE_ENDIAN&nbsp;graphic memory organisation<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(default big endian)<BR>&nbsp;&nbsp;&nbsp;VIDEO_HW_RECTFILL&nbsp;graphic chip supports<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;rectangle fill<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(cf. smiLynxEM)<BR>&nbsp;&nbsp;&nbsp;VIDEO_HW_BITBLT&nbsp;&nbsp;graphic chip supports<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;bit-blit (cf. smiLynxEM)<BR>&nbsp;&nbsp;&nbsp;VIDEO_VISIBLE_COLS&nbsp;visible pixel columns<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(cols=pitch)<BR>&nbsp;&nbsp;&nbsp;VIDEO_VISIBLE_ROWS&nbsp;visible pixel rows<BR>&nbsp;&nbsp;&nbsp;VIDEO_PIXEL_SIZE&nbsp;bytes per pixel<BR>&nbsp;&nbsp;&nbsp;VIDEO_DATA_FORMAT&nbsp;graphic data format<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(0-5, cf. cfb_console.c)<BR>&nbsp;&nbsp;&nbsp;VIDEO_FB_ADRS&nbsp;&nbsp;framebuffer address<BR>&nbsp;&nbsp;&nbsp;VIDEO_KBD_INIT_FCT&nbsp;keyboard int fct<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(i.e. i8042_kbd_init())<BR>&nbsp;&nbsp;&nbsp;VIDEO_TSTC_FCT&nbsp;&nbsp;test char fct<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(i.e. i8042_tstc)<BR>&nbsp;&nbsp;&nbsp;VIDEO_GETC_FCT&nbsp;&nbsp;get char fct<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(i.e. i8042_getc)<BR>&nbsp;&nbsp;&nbsp;CONFIG_CONSOLE_CURSOR&nbsp;cursor drawing on/off<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(requires blink timer<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;cf. i8042.c)<BR>&nbsp;&nbsp;&nbsp;CONFIG_SYS_CONSOLE_BLINK_COUNT blink interval (cf. i8042.c)<BR>&nbsp;&nbsp;&nbsp;CONFIG_CONSOLE_TIME&nbsp;display time/date info in<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;upper right corner<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;(requires CONFIG_CMD_DATE)<BR>&nbsp;&nbsp;&nbsp;CONFIG_VIDEO_LOGO&nbsp;display Linux logo in<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;upper left corner<BR>&nbsp;&nbsp;&nbsp;CONFIG_VIDEO_BMP_LOGO&nbsp;use bmp_logo.h instead of<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;linux_logo.h for logo.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Requires CONFIG_VIDEO_LOGO<BR>&nbsp;&nbsp;&nbsp;CONFIG_CONSOLE_EXTRA_INFO<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;additional board info beside<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;the logo</P>
<P>&nbsp;&nbsp;When CONFIG_CFB_CONSOLE_ANSI is defined, console will support<BR>&nbsp;&nbsp;a limited number of ANSI escape sequences (cursor control,<BR>&nbsp;&nbsp;erase functions and limited graphics rendition control).</P>
<P>&nbsp;&nbsp;When CONFIG_CFB_CONSOLE is defined, video console is<BR>&nbsp;&nbsp;default i/o. Serial console can be forced with<BR>&nbsp;&nbsp;environment 'console=serial'.</P>
<P>&nbsp;&nbsp;When CONFIG_SILENT_CONSOLE is defined, all console<BR>&nbsp;&nbsp;messages (by U-Boot and Linux!) can be silenced with<BR>&nbsp;&nbsp;the "silent" environment variable. See<BR>&nbsp;&nbsp;doc/README.silent for more information.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_CONSOLE_BG_COL: define the backgroundcolor, default<BR>&nbsp;&nbsp;&nbsp;is 0x00.<BR>&nbsp;&nbsp;CONFIG_SYS_CONSOLE_FG_COL: define the foregroundcolor, default<BR>&nbsp;&nbsp;&nbsp;is 0xa0.</P>
<P>- Console Baudrate:<BR>&nbsp;&nbsp;CONFIG_BAUDRATE - in bps<BR>&nbsp;&nbsp;Select one of the baudrates listed in<BR>&nbsp;&nbsp;CONFIG_SYS_BAUDRATE_TABLE, see below.<BR>&nbsp;&nbsp;CONFIG_SYS_BRGCLK_PRESCALE, baudrate prescale</P>
<P>- Console Rx buffer length<BR>&nbsp;&nbsp;With CONFIG_SYS_SMC_RXBUFLEN it is possible to define<BR>&nbsp;&nbsp;the maximum receive buffer length for the SMC.<BR>&nbsp;&nbsp;This option is actual only for 82xx and 8xx possible.<BR>&nbsp;&nbsp;If using CONFIG_SYS_SMC_RXBUFLEN also CONFIG_SYS_MAXIDLE<BR>&nbsp;&nbsp;must be defined, to setup the maximum idle timeout for<BR>&nbsp;&nbsp;the SMC.</P>
<P>- Pre-Console Buffer:<BR>&nbsp;&nbsp;Prior to the console being initialised (i.e. serial UART<BR>&nbsp;&nbsp;initialised etc) all console output is silently discarded.<BR>&nbsp;&nbsp;Defining CONFIG_PRE_CONSOLE_BUFFER will cause U-Boot to<BR>&nbsp;&nbsp;buffer any console messages prior to the console being<BR>&nbsp;&nbsp;initialised to a buffer of size CONFIG_PRE_CON_BUF_SZ<BR>&nbsp;&nbsp;bytes located at CONFIG_PRE_CON_BUF_ADDR. The buffer is<BR>&nbsp;&nbsp;a circular buffer, so if more than CONFIG_PRE_CON_BUF_SZ<BR>&nbsp;&nbsp;bytes are output before the console is initialised, the<BR>&nbsp;&nbsp;earlier bytes are discarded.</P>
<P>&nbsp;&nbsp;'Sane' compilers will generate smaller code if<BR>&nbsp;&nbsp;CONFIG_PRE_CON_BUF_SZ is a power of 2</P>
<P>- Safe printf() functions<BR>&nbsp;&nbsp;Define CONFIG_SYS_VSNPRINTF to compile in safe versions of<BR>&nbsp;&nbsp;the printf() functions. These are defined in<BR>&nbsp;&nbsp;include/vsprintf.h and include snprintf(), vsnprintf() and<BR>&nbsp;&nbsp;so on. Code size increase is approximately 300-500 bytes.<BR>&nbsp;&nbsp;If this option is not given then these functions will<BR>&nbsp;&nbsp;silently discard their buffer size argument - this means<BR>&nbsp;&nbsp;you are not getting any overflow checking in this case.</P>
<P>- Boot Delay:&nbsp;CONFIG_BOOTDELAY - in seconds<BR>&nbsp;&nbsp;Delay before automatically booting the default image;<BR>&nbsp;&nbsp;set to -1 to disable autoboot.<BR>&nbsp;&nbsp;set to -2 to autoboot with no delay and not check for abort<BR>&nbsp;&nbsp;(even when CONFIG_ZERO_BOOTDELAY_CHECK is defined).</P>
<P>&nbsp;&nbsp;See doc/README.autoboot for these options that<BR>&nbsp;&nbsp;work with CONFIG_BOOTDELAY. None are required.<BR>&nbsp;&nbsp;CONFIG_BOOT_RETRY_TIME<BR>&nbsp;&nbsp;CONFIG_BOOT_RETRY_MIN<BR>&nbsp;&nbsp;CONFIG_AUTOBOOT_KEYED<BR>&nbsp;&nbsp;CONFIG_AUTOBOOT_PROMPT<BR>&nbsp;&nbsp;CONFIG_AUTOBOOT_DELAY_STR<BR>&nbsp;&nbsp;CONFIG_AUTOBOOT_STOP_STR<BR>&nbsp;&nbsp;CONFIG_AUTOBOOT_DELAY_STR2<BR>&nbsp;&nbsp;CONFIG_AUTOBOOT_STOP_STR2<BR>&nbsp;&nbsp;CONFIG_ZERO_BOOTDELAY_CHECK<BR>&nbsp;&nbsp;CONFIG_RESET_TO_RETRY</P>
<P>- Autoboot Command:<BR>&nbsp;&nbsp;CONFIG_BOOTCOMMAND<BR>&nbsp;&nbsp;Only needed when CONFIG_BOOTDELAY is enabled;<BR>&nbsp;&nbsp;define a command string that is automatically executed<BR>&nbsp;&nbsp;when no character is read on the console interface<BR>&nbsp;&nbsp;within "Boot Delay" after reset.</P>
<P>&nbsp;&nbsp;CONFIG_BOOTARGS<BR>&nbsp;&nbsp;This can be used to pass arguments to the bootm<BR>&nbsp;&nbsp;command. The value of CONFIG_BOOTARGS goes into the<BR>&nbsp;&nbsp;environment value "bootargs".</P>
<P>&nbsp;&nbsp;CONFIG_RAMBOOT and CONFIG_NFSBOOT<BR>&nbsp;&nbsp;The value of these goes into the environment as<BR>&nbsp;&nbsp;"ramboot" and "nfsboot" respectively, and can be used<BR>&nbsp;&nbsp;as a convenience, when switching between booting from<BR>&nbsp;&nbsp;RAM and NFS.</P>
<P>- Bootcount:<BR>&nbsp;&nbsp;CONFIG_BOOTCOUNT_LIMIT<BR>&nbsp;&nbsp;Implements a mechanism for detecting a repeating reboot<BR>&nbsp;&nbsp;cycle, see:<BR>&nbsp;&nbsp;<A href="http://www.denx.de/wiki/view/DULG/UBootBootCountLimit">http://www.denx.de/wiki/view/DULG/UBootBootCountLimit</A></P>
<P>&nbsp;&nbsp;CONFIG_BOOTCOUNT_ENV<BR>&nbsp;&nbsp;If no softreset save registers are found on the hardware<BR>&nbsp;&nbsp;"bootcount" is stored in the environment. To prevent a<BR>&nbsp;&nbsp;saveenv on all reboots, the environment variable<BR>&nbsp;&nbsp;"upgrade_available" is used. If "upgrade_available" is<BR>&nbsp;&nbsp;0, "bootcount" is always 0, if "upgrade_available" is<BR>&nbsp;&nbsp;1 "bootcount" is incremented in the environment.<BR>&nbsp;&nbsp;So the Userspace Applikation must set the "upgrade_available"<BR>&nbsp;&nbsp;and "bootcount" variable to 0, if a boot was successfully.</P>
<P>- Pre-Boot Commands:<BR>&nbsp;&nbsp;CONFIG_PREBOOT</P>
<P>&nbsp;&nbsp;When this option is #defined, the existence of the<BR>&nbsp;&nbsp;environment variable "preboot" will be checked<BR>&nbsp;&nbsp;immediately before starting the CONFIG_BOOTDELAY<BR>&nbsp;&nbsp;countdown and/or running the auto-boot command resp.<BR>&nbsp;&nbsp;entering interactive mode.</P>
<P>&nbsp;&nbsp;This feature is especially useful when "preboot" is<BR>&nbsp;&nbsp;automatically generated or modified. For an example<BR>&nbsp;&nbsp;see the LWMON board specific code: here "preboot" is<BR>&nbsp;&nbsp;modified when the user holds down a certain<BR>&nbsp;&nbsp;combination of keys on the (special) keyboard when<BR>&nbsp;&nbsp;booting the systems</P>
<P>- Serial Download Echo Mode:<BR>&nbsp;&nbsp;CONFIG_LOADS_ECHO<BR>&nbsp;&nbsp;If defined to 1, all characters received during a<BR>&nbsp;&nbsp;serial download (using the "loads" command) are<BR>&nbsp;&nbsp;echoed back. This might be needed by some terminal<BR>&nbsp;&nbsp;emulations (like "cu"), but may as well just take<BR>&nbsp;&nbsp;time on others. This setting #define's the initial<BR>&nbsp;&nbsp;value of the "loads_echo" environment variable.</P>
<P>- Kgdb Serial Baudrate: (if CONFIG_CMD_KGDB is defined)<BR>&nbsp;&nbsp;CONFIG_KGDB_BAUDRATE<BR>&nbsp;&nbsp;Select one of the baudrates listed in<BR>&nbsp;&nbsp;CONFIG_SYS_BAUDRATE_TABLE, see below.</P>
<P>- Monitor Functions:<BR>&nbsp;&nbsp;Monitor commands can be included or excluded<BR>&nbsp;&nbsp;from the build by using the #include files<BR>&nbsp;&nbsp;&lt;config_cmd_all.h&gt; and #undef'ing unwanted<BR>&nbsp;&nbsp;commands, or using &lt;config_cmd_default.h&gt;<BR>&nbsp;&nbsp;and augmenting with additional #define's<BR>&nbsp;&nbsp;for wanted commands.</P>
<P>&nbsp;&nbsp;The default command configuration includes all commands<BR>&nbsp;&nbsp;except those marked below with a "*".</P>
<P>&nbsp;&nbsp;CONFIG_CMD_AES&nbsp;&nbsp;&nbsp; AES 128 CBC encrypt/decrypt<BR>&nbsp;&nbsp;CONFIG_CMD_ASKENV&nbsp;* ask for env variable<BR>&nbsp;&nbsp;CONFIG_CMD_BDI&nbsp;&nbsp;&nbsp; bdinfo<BR>&nbsp;&nbsp;CONFIG_CMD_BEDBUG&nbsp;* Include BedBug Debugger<BR>&nbsp;&nbsp;CONFIG_CMD_BMP&nbsp;&nbsp;* BMP support<BR>&nbsp;&nbsp;CONFIG_CMD_BSP&nbsp;&nbsp;* Board specific commands<BR>&nbsp;&nbsp;CONFIG_CMD_BOOTD&nbsp;&nbsp; bootd<BR>&nbsp;&nbsp;CONFIG_CMD_BOOTI&nbsp;* ARM64 Linux kernel Image support<BR>&nbsp;&nbsp;CONFIG_CMD_CACHE&nbsp;* icache, dcache<BR>&nbsp;&nbsp;CONFIG_CMD_CLK&nbsp;&nbsp; &nbsp;* clock command support<BR>&nbsp;&nbsp;CONFIG_CMD_CONSOLE&nbsp;&nbsp; coninfo<BR>&nbsp;&nbsp;CONFIG_CMD_CRC32&nbsp;* crc32<BR>&nbsp;&nbsp;CONFIG_CMD_DATE&nbsp;&nbsp;* support for RTC, date/time...<BR>&nbsp;&nbsp;CONFIG_CMD_DHCP&nbsp;&nbsp;* DHCP support<BR>&nbsp;&nbsp;CONFIG_CMD_DIAG&nbsp;&nbsp;* Diagnostics<BR>&nbsp;&nbsp;CONFIG_CMD_DS4510&nbsp;* ds4510 I2C gpio commands<BR>&nbsp;&nbsp;CONFIG_CMD_DS4510_INFO&nbsp;* ds4510 I2C info command<BR>&nbsp;&nbsp;CONFIG_CMD_DS4510_MEM&nbsp;* ds4510 I2C eeprom/sram commansd<BR>&nbsp;&nbsp;CONFIG_CMD_DS4510_RST&nbsp;* ds4510 I2C rst command<BR>&nbsp;&nbsp;CONFIG_CMD_DTT&nbsp;&nbsp;* Digital Therm and Thermostat<BR>&nbsp;&nbsp;CONFIG_CMD_ECHO&nbsp;&nbsp;&nbsp; echo arguments<BR>&nbsp;&nbsp;CONFIG_CMD_EDITENV&nbsp;&nbsp; edit env variable<BR>&nbsp;&nbsp;CONFIG_CMD_EEPROM&nbsp;* EEPROM read/write support<BR>&nbsp;&nbsp;CONFIG_CMD_ELF&nbsp;&nbsp;* bootelf, bootvx<BR>&nbsp;&nbsp;CONFIG_CMD_ENV_CALLBACK&nbsp;* display details about env callbacks<BR>&nbsp;&nbsp;CONFIG_CMD_ENV_FLAGS&nbsp;* display details about env flags<BR>&nbsp;&nbsp;CONFIG_CMD_ENV_EXISTS&nbsp;* check existence of env variable<BR>&nbsp;&nbsp;CONFIG_CMD_EXPORTENV&nbsp;* export the environment<BR>&nbsp;&nbsp;CONFIG_CMD_EXT2&nbsp;&nbsp;* ext2 command support<BR>&nbsp;&nbsp;CONFIG_CMD_EXT4&nbsp;&nbsp;* ext4 command support<BR>&nbsp;&nbsp;CONFIG_CMD_FS_GENERIC&nbsp;* filesystem commands (e.g. load, ls)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; that work for multiple fs types<BR>&nbsp;&nbsp;CONFIG_CMD_FS_UUID&nbsp;* Look up a filesystem UUID<BR>&nbsp;&nbsp;CONFIG_CMD_SAVEENV&nbsp;&nbsp; saveenv<BR>&nbsp;&nbsp;CONFIG_CMD_FDC&nbsp;&nbsp;* Floppy Disk Support<BR>&nbsp;&nbsp;CONFIG_CMD_FAT&nbsp;&nbsp;* FAT command support<BR>&nbsp;&nbsp;CONFIG_CMD_FLASH&nbsp;&nbsp; flinfo, erase, protect<BR>&nbsp;&nbsp;CONFIG_CMD_FPGA&nbsp;&nbsp;&nbsp; FPGA device initialization support<BR>&nbsp;&nbsp;CONFIG_CMD_FUSE&nbsp;&nbsp;* Device fuse support<BR>&nbsp;&nbsp;CONFIG_CMD_GETTIME&nbsp;* Get time since boot<BR>&nbsp;&nbsp;CONFIG_CMD_GO&nbsp;&nbsp;* the 'go' command (exec code)<BR>&nbsp;&nbsp;CONFIG_CMD_GREPENV&nbsp;* search environment<BR>&nbsp;&nbsp;CONFIG_CMD_HASH&nbsp;&nbsp;* calculate hash / digest<BR>&nbsp;&nbsp;CONFIG_CMD_HWFLOW&nbsp;* RTS/CTS hw flow control<BR>&nbsp;&nbsp;CONFIG_CMD_I2C&nbsp;&nbsp;* I2C serial bus support<BR>&nbsp;&nbsp;CONFIG_CMD_IDE&nbsp;&nbsp;* IDE harddisk support<BR>&nbsp;&nbsp;CONFIG_CMD_IMI&nbsp;&nbsp;&nbsp; iminfo<BR>&nbsp;&nbsp;CONFIG_CMD_IMLS&nbsp;&nbsp;&nbsp; List all images found in NOR flash<BR>&nbsp;&nbsp;CONFIG_CMD_IMLS_NAND&nbsp;* List all images found in NAND flash<BR>&nbsp;&nbsp;CONFIG_CMD_IMMAP&nbsp;* IMMR dump support<BR>&nbsp;&nbsp;CONFIG_CMD_IOTRACE&nbsp;* I/O tracing for debugging<BR>&nbsp;&nbsp;CONFIG_CMD_IMPORTENV&nbsp;* import an environment<BR>&nbsp;&nbsp;CONFIG_CMD_INI&nbsp;&nbsp;* import data from an ini file into the env<BR>&nbsp;&nbsp;CONFIG_CMD_IRQ&nbsp;&nbsp;* irqinfo<BR>&nbsp;&nbsp;CONFIG_CMD_ITEST&nbsp;&nbsp; Integer/string test of 2 values<BR>&nbsp;&nbsp;CONFIG_CMD_JFFS2&nbsp;* JFFS2 Support<BR>&nbsp;&nbsp;CONFIG_CMD_KGDB&nbsp;&nbsp;* kgdb<BR>&nbsp;&nbsp;CONFIG_CMD_LDRINFO&nbsp;* ldrinfo (display Blackfin loader)<BR>&nbsp;&nbsp;CONFIG_CMD_LINK_LOCAL&nbsp;* link-local IP address auto-configuration<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (169.254.*.*)<BR>&nbsp;&nbsp;CONFIG_CMD_LOADB&nbsp;&nbsp; loadb<BR>&nbsp;&nbsp;CONFIG_CMD_LOADS&nbsp;&nbsp; loads<BR>&nbsp;&nbsp;CONFIG_CMD_MD5SUM&nbsp;* print md5 message digest<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (requires CONFIG_CMD_MEMORY and CONFIG_MD5)<BR>&nbsp;&nbsp;CONFIG_CMD_MEMINFO&nbsp;* Display detailed memory information<BR>&nbsp;&nbsp;CONFIG_CMD_MEMORY&nbsp;&nbsp; md, mm, nm, mw, cp, cmp, crc, base,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; loop, loopw<BR>&nbsp;&nbsp;CONFIG_CMD_MEMTEST&nbsp;* mtest<BR>&nbsp;&nbsp;CONFIG_CMD_MISC&nbsp;&nbsp;&nbsp; Misc functions like sleep etc<BR>&nbsp;&nbsp;CONFIG_CMD_MMC&nbsp;&nbsp;* MMC memory mapped support<BR>&nbsp;&nbsp;CONFIG_CMD_MII&nbsp;&nbsp;* MII utility commands<BR>&nbsp;&nbsp;CONFIG_CMD_MTDPARTS&nbsp;* MTD partition support<BR>&nbsp;&nbsp;CONFIG_CMD_NAND&nbsp;&nbsp;* NAND support<BR>&nbsp;&nbsp;CONFIG_CMD_NET&nbsp;&nbsp;&nbsp; bootp, tftpboot, rarpboot<BR>&nbsp;&nbsp;CONFIG_CMD_NFS&nbsp;&nbsp;&nbsp; NFS support<BR>&nbsp;&nbsp;CONFIG_CMD_PCA953X&nbsp;* PCA953x I2C gpio commands<BR>&nbsp;&nbsp;CONFIG_CMD_PCA953X_INFO * PCA953x I2C gpio info command<BR>&nbsp;&nbsp;CONFIG_CMD_PCI&nbsp;&nbsp;* pciinfo<BR>&nbsp;&nbsp;CONFIG_CMD_PCMCIA&nbsp;&nbsp;* PCMCIA support<BR>&nbsp;&nbsp;CONFIG_CMD_PING&nbsp;&nbsp;* send ICMP ECHO_REQUEST to network<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; host<BR>&nbsp;&nbsp;CONFIG_CMD_PORTIO&nbsp;* Port I/O<BR>&nbsp;&nbsp;CONFIG_CMD_READ&nbsp;&nbsp;* Read raw data from partition<BR>&nbsp;&nbsp;CONFIG_CMD_REGINFO&nbsp;* Register dump<BR>&nbsp;&nbsp;CONFIG_CMD_RUN&nbsp;&nbsp;&nbsp; run command in env variable<BR>&nbsp;&nbsp;CONFIG_CMD_SANDBOX&nbsp;* sb command to access sandbox features<BR>&nbsp;&nbsp;CONFIG_CMD_SAVES&nbsp;* save S record dump<BR>&nbsp;&nbsp;CONFIG_CMD_SCSI&nbsp;&nbsp;* SCSI Support<BR>&nbsp;&nbsp;CONFIG_CMD_SDRAM&nbsp;* print SDRAM configuration information<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (requires CONFIG_CMD_I2C)<BR>&nbsp;&nbsp;CONFIG_CMD_SETGETDCR&nbsp;&nbsp; Support for DCR Register access<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (4xx only)<BR>&nbsp;&nbsp;CONFIG_CMD_SF&nbsp;&nbsp;* Read/write/erase SPI NOR flash<BR>&nbsp;&nbsp;CONFIG_CMD_SHA1SUM&nbsp;* print sha1 memory digest<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (requires CONFIG_CMD_MEMORY)<BR>&nbsp;&nbsp;CONFIG_CMD_SOFTSWITCH&nbsp;* Soft switch setting command for BF60x<BR>&nbsp;&nbsp;CONFIG_CMD_SOURCE&nbsp;&nbsp; "source" command Support<BR>&nbsp;&nbsp;CONFIG_CMD_SPI&nbsp;&nbsp;* SPI serial bus support<BR>&nbsp;&nbsp;CONFIG_CMD_TFTPSRV&nbsp;* TFTP transfer in server mode<BR>&nbsp;&nbsp;CONFIG_CMD_TFTPPUT&nbsp;* TFTP put command (upload)<BR>&nbsp;&nbsp;CONFIG_CMD_TIME&nbsp;&nbsp;* run command and report execution time (ARM specific)<BR>&nbsp;&nbsp;CONFIG_CMD_TIMER&nbsp;* access to the system tick timer<BR>&nbsp;&nbsp;CONFIG_CMD_USB&nbsp;&nbsp;* USB support<BR>&nbsp;&nbsp;CONFIG_CMD_CDP&nbsp;&nbsp;* Cisco Discover Protocol support<BR>&nbsp;&nbsp;CONFIG_CMD_MFSL&nbsp;&nbsp;* Microblaze FSL support<BR>&nbsp;&nbsp;CONFIG_CMD_XIMG&nbsp;&nbsp;&nbsp; Load part of Multi Image<BR>&nbsp;&nbsp;CONFIG_CMD_UUID&nbsp;&nbsp;* Generate random UUID or GUID string</P>
<P>&nbsp;&nbsp;EXAMPLE: If you want all functions except of network<BR>&nbsp;&nbsp;support you can write:</P>
<P>&nbsp;&nbsp;#include "config_cmd_all.h"<BR>&nbsp;&nbsp;#undef CONFIG_CMD_NET</P>
<P>&nbsp;Other Commands:<BR>&nbsp;&nbsp;fdt (flattened device tree) command: CONFIG_OF_LIBFDT</P>
<P>&nbsp;Note:&nbsp;Don't enable the "icache" and "dcache" commands<BR>&nbsp;&nbsp;(configuration option CONFIG_CMD_CACHE) unless you know<BR>&nbsp;&nbsp;what you (and your U-Boot users) are doing. Data<BR>&nbsp;&nbsp;cache cannot be enabled on systems like the 8xx or<BR>&nbsp;&nbsp;8260 (where accesses to the IMMR region must be<BR>&nbsp;&nbsp;uncached), and it cannot be disabled on all other<BR>&nbsp;&nbsp;systems where we (mis-) use the data cache to hold an<BR>&nbsp;&nbsp;initial stack and some data.</P>
<P><BR>&nbsp;&nbsp;XXX - this list needs to get updated!</P>
<P>- Regular expression support:<BR>&nbsp;&nbsp;CONFIG_REGEX<BR>&nbsp;&nbsp;If this variable is defined, U-Boot is linked against<BR>&nbsp;&nbsp;the SLRE (Super Light Regular Expression) library,<BR>&nbsp;&nbsp;which adds regex support to some commands, as for<BR>&nbsp;&nbsp;example "env grep" and "setexpr".</P>
<P>- Device tree:<BR>&nbsp;&nbsp;CONFIG_OF_CONTROL<BR>&nbsp;&nbsp;If this variable is defined, U-Boot will use a device tree<BR>&nbsp;&nbsp;to configure its devices, instead of relying on statically<BR>&nbsp;&nbsp;compiled #defines in the board file. This option is<BR>&nbsp;&nbsp;experimental and only available on a few boards. The device<BR>&nbsp;&nbsp;tree is available in the global data as gd-&gt;fdt_blob.</P>
<P>&nbsp;&nbsp;U-Boot needs to get its device tree from somewhere. This can<BR>&nbsp;&nbsp;be done using one of the two options below:</P>
<P>&nbsp;&nbsp;CONFIG_OF_EMBED<BR>&nbsp;&nbsp;If this variable is defined, U-Boot will embed a device tree<BR>&nbsp;&nbsp;binary in its image. This device tree file should be in the<BR>&nbsp;&nbsp;board directory and called &lt;soc&gt;-&lt;board&gt;.dts. The binary file<BR>&nbsp;&nbsp;is then picked up in board_init_f() and made available through<BR>&nbsp;&nbsp;the global data structure as gd-&gt;blob.</P>
<P>&nbsp;&nbsp;CONFIG_OF_SEPARATE<BR>&nbsp;&nbsp;If this variable is defined, U-Boot will build a device tree<BR>&nbsp;&nbsp;binary. It will be called u-boot.dtb. Architecture-specific<BR>&nbsp;&nbsp;code will locate it at run-time. Generally this works by:</P>
<P>&nbsp;&nbsp;&nbsp;cat u-boot.bin u-boot.dtb &gt;image.bin</P>
<P>&nbsp;&nbsp;and in fact, U-Boot does this for you, creating a file called<BR>&nbsp;&nbsp;u-boot-dtb.bin which is useful in the common case. You can<BR>&nbsp;&nbsp;still use the individual files if you need something more<BR>&nbsp;&nbsp;exotic.</P>
<P>- Watchdog:<BR>&nbsp;&nbsp;CONFIG_WATCHDOG<BR>&nbsp;&nbsp;If this variable is defined, it enables watchdog<BR>&nbsp;&nbsp;support for the SoC. There must be support in the SoC<BR>&nbsp;&nbsp;specific code for a watchdog. For the 8xx and 8260<BR>&nbsp;&nbsp;CPUs, the SIU Watchdog feature is enabled in the SYPCR<BR>&nbsp;&nbsp;register.&nbsp; When supported for a specific SoC is<BR>&nbsp;&nbsp;available, then no further board specific code should<BR>&nbsp;&nbsp;be needed to use it.</P>
<P>&nbsp;&nbsp;CONFIG_HW_WATCHDOG<BR>&nbsp;&nbsp;When using a watchdog circuitry external to the used<BR>&nbsp;&nbsp;SoC, then define this variable and provide board<BR>&nbsp;&nbsp;specific code for the "hw_watchdog_reset" function.</P>
<P>&nbsp;&nbsp;CONFIG_AT91_HW_WDT_TIMEOUT<BR>&nbsp;&nbsp;specify the timeout in seconds. default 2 seconds.</P>
<P>- U-Boot Version:<BR>&nbsp;&nbsp;CONFIG_VERSION_VARIABLE<BR>&nbsp;&nbsp;If this variable is defined, an environment variable<BR>&nbsp;&nbsp;named "ver" is created by U-Boot showing the U-Boot<BR>&nbsp;&nbsp;version as printed by the "version" command.<BR>&nbsp;&nbsp;Any change to this variable will be reverted at the<BR>&nbsp;&nbsp;next reset.</P>
<P>- Real-Time Clock:</P>
<P>&nbsp;&nbsp;When CONFIG_CMD_DATE is selected, the type of the RTC<BR>&nbsp;&nbsp;has to be selected, too. Define exactly one of the<BR>&nbsp;&nbsp;following options:</P>
<P>&nbsp;&nbsp;CONFIG_RTC_MPC8xx&nbsp;- use internal RTC of MPC8xx<BR>&nbsp;&nbsp;CONFIG_RTC_PCF8563&nbsp;- use Philips PCF8563 RTC<BR>&nbsp;&nbsp;CONFIG_RTC_MC13XXX&nbsp;- use MC13783 or MC13892 RTC<BR>&nbsp;&nbsp;CONFIG_RTC_MC146818&nbsp;- use MC146818 RTC<BR>&nbsp;&nbsp;CONFIG_RTC_DS1307&nbsp;- use Maxim, Inc. DS1307 RTC<BR>&nbsp;&nbsp;CONFIG_RTC_DS1337&nbsp;- use Maxim, Inc. DS1337 RTC<BR>&nbsp;&nbsp;CONFIG_RTC_DS1338&nbsp;- use Maxim, Inc. DS1338 RTC<BR>&nbsp;&nbsp;CONFIG_RTC_DS1339&nbsp;- use Maxim, Inc. DS1339 RTC<BR>&nbsp;&nbsp;CONFIG_RTC_DS164x&nbsp;- use Dallas DS164x RTC<BR>&nbsp;&nbsp;CONFIG_RTC_ISL1208&nbsp;- use Intersil ISL1208 RTC<BR>&nbsp;&nbsp;CONFIG_RTC_MAX6900&nbsp;- use Maxim, Inc. MAX6900 RTC<BR>&nbsp;&nbsp;CONFIG_SYS_RTC_DS1337_NOOSC&nbsp;- Turn off the OSC output for DS1337<BR>&nbsp;&nbsp;CONFIG_SYS_RV3029_TCR&nbsp;- enable trickle charger on<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RV3029 RTC.</P>
<P>&nbsp;&nbsp;Note that if the RTC uses I2C, then the I2C interface<BR>&nbsp;&nbsp;must also be configured. See I2C Support, below.</P>
<P>- GPIO Support:<BR>&nbsp;&nbsp;CONFIG_PCA953X&nbsp;&nbsp;- use NXP's PCA953X series I2C GPIO</P>
<P>&nbsp;&nbsp;The CONFIG_SYS_I2C_PCA953X_WIDTH option specifies a list of<BR>&nbsp;&nbsp;chip-ngpio pairs that tell the PCA953X driver the number of<BR>&nbsp;&nbsp;pins supported by a particular chip.</P>
<P>&nbsp;&nbsp;Note that if the GPIO device uses I2C, then the I2C interface<BR>&nbsp;&nbsp;must also be configured. See I2C Support, below.</P>
<P>- I/O tracing:<BR>&nbsp;&nbsp;When CONFIG_IO_TRACE is selected, U-Boot intercepts all I/O<BR>&nbsp;&nbsp;accesses and can checksum them or write a list of them out<BR>&nbsp;&nbsp;to memory. See the 'iotrace' command for details. This is<BR>&nbsp;&nbsp;useful for testing device drivers since it can confirm that<BR>&nbsp;&nbsp;the driver behaves the same way before and after a code<BR>&nbsp;&nbsp;change. Currently this is supported on sandbox and arm. To<BR>&nbsp;&nbsp;add support for your architecture, add '#include &lt;iotrace.h&gt;'<BR>&nbsp;&nbsp;to the bottom of arch/&lt;arch&gt;/include/asm/io.h and test.</P>
<P>&nbsp;&nbsp;Example output from the 'iotrace stats' command is below.<BR>&nbsp;&nbsp;Note that if the trace buffer is exhausted, the checksum will<BR>&nbsp;&nbsp;still continue to operate.</P>
<P>&nbsp;&nbsp;&nbsp;iotrace is enabled<BR>&nbsp;&nbsp;&nbsp;Start:&nbsp; 10000000&nbsp;(buffer start address)<BR>&nbsp;&nbsp;&nbsp;Size:&nbsp;&nbsp; 00010000&nbsp;(buffer size)<BR>&nbsp;&nbsp;&nbsp;Offset: 00000120&nbsp;(current buffer offset)<BR>&nbsp;&nbsp;&nbsp;Output: 10000120&nbsp;(start + offset)<BR>&nbsp;&nbsp;&nbsp;Count:&nbsp; 00000018&nbsp;(number of trace records)<BR>&nbsp;&nbsp;&nbsp;CRC32:&nbsp; 9526fb66&nbsp;(CRC32 of all trace records)</P>
<P>- Timestamp Support:</P>
<P>&nbsp;&nbsp;When CONFIG_TIMESTAMP is selected, the timestamp<BR>&nbsp;&nbsp;(date and time) of an image is printed by image<BR>&nbsp;&nbsp;commands like bootm or iminfo. This option is<BR>&nbsp;&nbsp;automatically enabled when you select CONFIG_CMD_DATE .</P>
<P>- Partition Labels (disklabels) Supported:<BR>&nbsp;&nbsp;Zero or more of the following:<BR>&nbsp;&nbsp;CONFIG_MAC_PARTITION&nbsp;&nbsp; Apple's MacOS partition table.<BR>&nbsp;&nbsp;CONFIG_DOS_PARTITION&nbsp;&nbsp; MS Dos partition table, traditional on the<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Intel architecture, USB sticks, etc.<BR>&nbsp;&nbsp;CONFIG_ISO_PARTITION&nbsp;&nbsp; ISO partition table, used on CDROM etc.<BR>&nbsp;&nbsp;CONFIG_EFI_PARTITION&nbsp;&nbsp; GPT partition table, common when EFI is the<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bootloader.&nbsp; Note 2TB partition limit; see<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; disk/part_efi.c<BR>&nbsp;&nbsp;CONFIG_MTD_PARTITIONS&nbsp; Memory Technology Device partition table.</P>
<P>&nbsp;&nbsp;If IDE or SCSI support is enabled (CONFIG_CMD_IDE or<BR>&nbsp;&nbsp;CONFIG_CMD_SCSI) you must configure support for at<BR>&nbsp;&nbsp;least one non-MTD partition type as well.</P>
<P>- IDE Reset method:<BR>&nbsp;&nbsp;CONFIG_IDE_RESET_ROUTINE - this is defined in several<BR>&nbsp;&nbsp;board configurations files but used nowhere!</P>
<P>&nbsp;&nbsp;CONFIG_IDE_RESET - is this is defined, IDE Reset will<BR>&nbsp;&nbsp;be performed by calling the function<BR>&nbsp;&nbsp;&nbsp;ide_set_reset(int reset)<BR>&nbsp;&nbsp;which has to be defined in a board specific file</P>
<P>- ATAPI Support:<BR>&nbsp;&nbsp;CONFIG_ATAPI</P>
<P>&nbsp;&nbsp;Set this to enable ATAPI support.</P>
<P>- LBA48 Support<BR>&nbsp;&nbsp;CONFIG_LBA48</P>
<P>&nbsp;&nbsp;Set this to enable support for disks larger than 137GB<BR>&nbsp;&nbsp;Also look at CONFIG_SYS_64BIT_LBA.<BR>&nbsp;&nbsp;Whithout these , LBA48 support uses 32bit variables and will 'only'<BR>&nbsp;&nbsp;support disks up to 2.1TB.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_64BIT_LBA:<BR>&nbsp;&nbsp;&nbsp;When enabled, makes the IDE subsystem use 64bit sector addresses.<BR>&nbsp;&nbsp;&nbsp;Default is 32bit.</P>
<P>- SCSI Support:<BR>&nbsp;&nbsp;At the moment only there is only support for the<BR>&nbsp;&nbsp;SYM53C8XX SCSI controller; define<BR>&nbsp;&nbsp;CONFIG_SCSI_SYM53C8XX to enable it.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_SCSI_MAX_LUN [8], CONFIG_SYS_SCSI_MAX_SCSI_ID [7] and<BR>&nbsp;&nbsp;CONFIG_SYS_SCSI_MAX_DEVICE [CONFIG_SYS_SCSI_MAX_SCSI_ID *<BR>&nbsp;&nbsp;CONFIG_SYS_SCSI_MAX_LUN] can be adjusted to define the<BR>&nbsp;&nbsp;maximum numbers of LUNs, SCSI ID's and target<BR>&nbsp;&nbsp;devices.<BR>&nbsp;&nbsp;CONFIG_SYS_SCSI_SYM53C8XX_CCF to fix clock timing (80Mhz)</P>
<P>&nbsp;&nbsp;The environment variable 'scsidevs' is set to the number of<BR>&nbsp;&nbsp;SCSI devices found during the last scan.</P>
<P>- NETWORK Support (PCI):<BR>&nbsp;&nbsp;CONFIG_E1000<BR>&nbsp;&nbsp;Support for Intel 8254x/8257x gigabit chips.</P>
<P>&nbsp;&nbsp;CONFIG_E1000_SPI<BR>&nbsp;&nbsp;Utility code for direct access to the SPI bus on Intel 8257x.<BR>&nbsp;&nbsp;This does not do anything useful unless you set at least one<BR>&nbsp;&nbsp;of CONFIG_CMD_E1000 or CONFIG_E1000_SPI_GENERIC.</P>
<P>&nbsp;&nbsp;CONFIG_E1000_SPI_GENERIC<BR>&nbsp;&nbsp;Allow generic access to the SPI bus on the Intel 8257x, for<BR>&nbsp;&nbsp;example with the "sspi" command.</P>
<P>&nbsp;&nbsp;CONFIG_CMD_E1000<BR>&nbsp;&nbsp;Management command for E1000 devices.&nbsp; When used on devices<BR>&nbsp;&nbsp;with SPI support you can reprogram the EEPROM from U-Boot.</P>
<P>&nbsp;&nbsp;CONFIG_E1000_FALLBACK_MAC<BR>&nbsp;&nbsp;default MAC for empty EEPROM after production.</P>
<P>&nbsp;&nbsp;CONFIG_EEPRO100<BR>&nbsp;&nbsp;Support for Intel 82557/82559/82559ER chips.<BR>&nbsp;&nbsp;Optional CONFIG_EEPRO100_SROM_WRITE enables EEPROM<BR>&nbsp;&nbsp;write routine for first time initialisation.</P>
<P>&nbsp;&nbsp;CONFIG_TULIP<BR>&nbsp;&nbsp;Support for Digital 2114x chips.<BR>&nbsp;&nbsp;Optional CONFIG_TULIP_SELECT_MEDIA for board specific<BR>&nbsp;&nbsp;modem chip initialisation (KS8761/QS6611).</P>
<P>&nbsp;&nbsp;CONFIG_NATSEMI<BR>&nbsp;&nbsp;Support for National dp83815 chips.</P>
<P>&nbsp;&nbsp;CONFIG_NS8382X<BR>&nbsp;&nbsp;Support for National dp8382[01] gigabit chips.</P>
<P>- NETWORK Support (other):</P>
<P>&nbsp;&nbsp;CONFIG_DRIVER_AT91EMAC<BR>&nbsp;&nbsp;Support for AT91RM9200 EMAC.</P>
<P>&nbsp;&nbsp;&nbsp;CONFIG_RMII<BR>&nbsp;&nbsp;&nbsp;Define this to use reduced MII inteface</P>
<P>&nbsp;&nbsp;&nbsp;CONFIG_DRIVER_AT91EMAC_QUIET<BR>&nbsp;&nbsp;&nbsp;If this defined, the driver is quiet.<BR>&nbsp;&nbsp;&nbsp;The driver doen't show link status messages.</P>
<P>&nbsp;&nbsp;CONFIG_CALXEDA_XGMAC<BR>&nbsp;&nbsp;Support for the Calxeda XGMAC device</P>
<P>&nbsp;&nbsp;CONFIG_LAN91C96<BR>&nbsp;&nbsp;Support for SMSC's LAN91C96 chips.</P>
<P>&nbsp;&nbsp;&nbsp;CONFIG_LAN91C96_BASE<BR>&nbsp;&nbsp;&nbsp;Define this to hold the physical address<BR>&nbsp;&nbsp;&nbsp;of the LAN91C96's I/O space</P>
<P>&nbsp;&nbsp;&nbsp;CONFIG_LAN91C96_USE_32_BIT<BR>&nbsp;&nbsp;&nbsp;Define this to enable 32 bit addressing</P>
<P>&nbsp;&nbsp;CONFIG_SMC91111<BR>&nbsp;&nbsp;Support for SMSC's LAN91C111 chip</P>
<P>&nbsp;&nbsp;&nbsp;CONFIG_SMC91111_BASE<BR>&nbsp;&nbsp;&nbsp;Define this to hold the physical address<BR>&nbsp;&nbsp;&nbsp;of the device (I/O space)</P>
<P>&nbsp;&nbsp;&nbsp;CONFIG_SMC_USE_32_BIT<BR>&nbsp;&nbsp;&nbsp;Define this if data bus is 32 bits</P>
<P>&nbsp;&nbsp;&nbsp;CONFIG_SMC_USE_IOFUNCS<BR>&nbsp;&nbsp;&nbsp;Define this to use i/o functions instead of macros<BR>&nbsp;&nbsp;&nbsp;(some hardware wont work with macros)</P>
<P>&nbsp;&nbsp;CONFIG_DRIVER_TI_EMAC<BR>&nbsp;&nbsp;Support for davinci emac</P>
<P>&nbsp;&nbsp;&nbsp;CONFIG_SYS_DAVINCI_EMAC_PHY_COUNT<BR>&nbsp;&nbsp;&nbsp;Define this if you have more then 3 PHYs.</P>
<P>&nbsp;&nbsp;CONFIG_FTGMAC100<BR>&nbsp;&nbsp;Support for Faraday's FTGMAC100 Gigabit SoC Ethernet</P>
<P>&nbsp;&nbsp;&nbsp;CONFIG_FTGMAC100_EGIGA<BR>&nbsp;&nbsp;&nbsp;Define this to use GE link update with gigabit PHY.<BR>&nbsp;&nbsp;&nbsp;Define this if FTGMAC100 is connected to gigabit PHY.<BR>&nbsp;&nbsp;&nbsp;If your system has 10/100 PHY only, it might not occur<BR>&nbsp;&nbsp;&nbsp;wrong behavior. Because PHY usually return timeout or<BR>&nbsp;&nbsp;&nbsp;useless data when polling gigabit status and gigabit<BR>&nbsp;&nbsp;&nbsp;control registers. This behavior won't affect the<BR>&nbsp;&nbsp;&nbsp;correctnessof 10/100 link speed update.</P>
<P>&nbsp;&nbsp;CONFIG_SMC911X<BR>&nbsp;&nbsp;Support for SMSC's LAN911x and LAN921x chips</P>
<P>&nbsp;&nbsp;&nbsp;CONFIG_SMC911X_BASE<BR>&nbsp;&nbsp;&nbsp;Define this to hold the physical address<BR>&nbsp;&nbsp;&nbsp;of the device (I/O space)</P>
<P>&nbsp;&nbsp;&nbsp;CONFIG_SMC911X_32_BIT<BR>&nbsp;&nbsp;&nbsp;Define this if data bus is 32 bits</P>
<P>&nbsp;&nbsp;&nbsp;CONFIG_SMC911X_16_BIT<BR>&nbsp;&nbsp;&nbsp;Define this if data bus is 16 bits. If your processor<BR>&nbsp;&nbsp;&nbsp;automatically converts one 32 bit word to two 16 bit<BR>&nbsp;&nbsp;&nbsp;words you may also try CONFIG_SMC911X_32_BIT.</P>
<P>&nbsp;&nbsp;CONFIG_SH_ETHER<BR>&nbsp;&nbsp;Support for Renesas on-chip Ethernet controller</P>
<P>&nbsp;&nbsp;&nbsp;CONFIG_SH_ETHER_USE_PORT<BR>&nbsp;&nbsp;&nbsp;Define the number of ports to be used</P>
<P>&nbsp;&nbsp;&nbsp;CONFIG_SH_ETHER_PHY_ADDR<BR>&nbsp;&nbsp;&nbsp;Define the ETH PHY's address</P>
<P>&nbsp;&nbsp;&nbsp;CONFIG_SH_ETHER_CACHE_WRITEBACK<BR>&nbsp;&nbsp;&nbsp;If this option is set, the driver enables cache flush.</P>
<P>- PWM Support:<BR>&nbsp;&nbsp;CONFIG_PWM_IMX<BR>&nbsp;&nbsp;Support for PWM modul on the imx6.</P>
<P>- TPM Support:<BR>&nbsp;&nbsp;CONFIG_TPM<BR>&nbsp;&nbsp;Support TPM devices.</P>
<P>&nbsp;&nbsp;CONFIG_TPM_TIS_I2C<BR>&nbsp;&nbsp;Support for i2c bus TPM devices. Only one device<BR>&nbsp;&nbsp;per system is supported at this time.</P>
<P>&nbsp;&nbsp;&nbsp;CONFIG_TPM_TIS_I2C_BUS_NUMBER<BR>&nbsp;&nbsp;&nbsp;Define the the i2c bus number for the TPM device</P>
<P>&nbsp;&nbsp;&nbsp;CONFIG_TPM_TIS_I2C_SLAVE_ADDRESS<BR>&nbsp;&nbsp;&nbsp;Define the TPM's address on the i2c bus</P>
<P>&nbsp;&nbsp;&nbsp;CONFIG_TPM_TIS_I2C_BURST_LIMITATION<BR>&nbsp;&nbsp;&nbsp;Define the burst count bytes upper limit</P>
<P>&nbsp;&nbsp;CONFIG_TPM_ATMEL_TWI<BR>&nbsp;&nbsp;Support for Atmel TWI TPM device. Requires I2C support.</P>
<P>&nbsp;&nbsp;CONFIG_TPM_TIS_LPC<BR>&nbsp;&nbsp;Support for generic parallel port TPM devices. Only one device<BR>&nbsp;&nbsp;per system is supported at this time.</P>
<P>&nbsp;&nbsp;&nbsp;CONFIG_TPM_TIS_BASE_ADDRESS<BR>&nbsp;&nbsp;&nbsp;Base address where the generic TPM device is mapped<BR>&nbsp;&nbsp;&nbsp;to. Contemporary x86 systems usually map it at<BR>&nbsp;&nbsp;&nbsp;0xfed40000.</P>
<P>&nbsp;&nbsp;CONFIG_CMD_TPM<BR>&nbsp;&nbsp;Add tpm monitor functions.<BR>&nbsp;&nbsp;Requires CONFIG_TPM. If CONFIG_TPM_AUTH_SESSIONS is set, also<BR>&nbsp;&nbsp;provides monitor access to authorized functions.</P>
<P>&nbsp;&nbsp;CONFIG_TPM<BR>&nbsp;&nbsp;Define this to enable the TPM support library which provides<BR>&nbsp;&nbsp;functional interfaces to some TPM commands.<BR>&nbsp;&nbsp;Requires support for a TPM device.</P>
<P>&nbsp;&nbsp;CONFIG_TPM_AUTH_SESSIONS<BR>&nbsp;&nbsp;Define this to enable authorized functions in the TPM library.<BR>&nbsp;&nbsp;Requires CONFIG_TPM and CONFIG_SHA1.</P>
<P>- USB Support:<BR>&nbsp;&nbsp;At the moment only the UHCI host controller is<BR>&nbsp;&nbsp;supported (PIP405, MIP405, MPC5200); define<BR>&nbsp;&nbsp;CONFIG_USB_UHCI to enable it.<BR>&nbsp;&nbsp;define CONFIG_USB_KEYBOARD to enable the USB Keyboard<BR>&nbsp;&nbsp;and define CONFIG_USB_STORAGE to enable the USB<BR>&nbsp;&nbsp;storage devices.<BR>&nbsp;&nbsp;Note:<BR>&nbsp;&nbsp;Supported are USB Keyboards and USB Floppy drives<BR>&nbsp;&nbsp;(TEAC FD-05PUB).<BR>&nbsp;&nbsp;MPC5200 USB requires additional defines:<BR>&nbsp;&nbsp;&nbsp;CONFIG_USB_CLOCK<BR>&nbsp;&nbsp;&nbsp;&nbsp;for 528 MHz Clock: 0x0001bbbb<BR>&nbsp;&nbsp;&nbsp;CONFIG_PSC3_USB<BR>&nbsp;&nbsp;&nbsp;&nbsp;for USB on PSC3<BR>&nbsp;&nbsp;&nbsp;CONFIG_USB_CONFIG<BR>&nbsp;&nbsp;&nbsp;&nbsp;for differential drivers: 0x00001000<BR>&nbsp;&nbsp;&nbsp;&nbsp;for single ended drivers: 0x00005000<BR>&nbsp;&nbsp;&nbsp;&nbsp;for differential drivers on PSC3: 0x00000100<BR>&nbsp;&nbsp;&nbsp;&nbsp;for single ended drivers on PSC3: 0x00004100<BR>&nbsp;&nbsp;&nbsp;CONFIG_SYS_USB_EVENT_POLL<BR>&nbsp;&nbsp;&nbsp;&nbsp;May be defined to allow interrupt polling<BR>&nbsp;&nbsp;&nbsp;&nbsp;instead of using asynchronous interrupts</P>
<P>&nbsp;&nbsp;CONFIG_USB_EHCI_TXFIFO_THRESH enables setting of the<BR>&nbsp;&nbsp;txfilltuning field in the EHCI controller on reset.</P>
<P>&nbsp;&nbsp;CONFIG_USB_DWC2_REG_ADDR the physical CPU address of the DWC2<BR>&nbsp;&nbsp;HW module registers.</P>
<P>- USB Device:<BR>&nbsp;&nbsp;Define the below if you wish to use the USB console.<BR>&nbsp;&nbsp;Once firmware is rebuilt from a serial console issue the<BR>&nbsp;&nbsp;command "setenv stdin usbtty; setenv stdout usbtty" and<BR>&nbsp;&nbsp;attach your USB cable. The Unix command "dmesg" should print<BR>&nbsp;&nbsp;it has found a new device. The environment variable usbtty<BR>&nbsp;&nbsp;can be set to gserial or cdc_acm to enable your device to<BR>&nbsp;&nbsp;appear to a USB host as a Linux gserial device or a<BR>&nbsp;&nbsp;Common Device Class Abstract Control Model serial device.<BR>&nbsp;&nbsp;If you select usbtty = gserial you should be able to enumerate<BR>&nbsp;&nbsp;a Linux host by<BR>&nbsp;&nbsp;# modprobe usbserial vendor=0xVendorID product=0xProductID<BR>&nbsp;&nbsp;else if using cdc_acm, simply setting the environment<BR>&nbsp;&nbsp;variable usbtty to be cdc_acm should suffice. The following<BR>&nbsp;&nbsp;might be defined in YourBoardName.h</P>
<P>&nbsp;&nbsp;&nbsp;CONFIG_USB_DEVICE<BR>&nbsp;&nbsp;&nbsp;Define this to build a UDC device</P>
<P>&nbsp;&nbsp;&nbsp;CONFIG_USB_TTY<BR>&nbsp;&nbsp;&nbsp;Define this to have a tty type of device available to<BR>&nbsp;&nbsp;&nbsp;talk to the UDC device</P>
<P>&nbsp;&nbsp;&nbsp;CONFIG_USBD_HS<BR>&nbsp;&nbsp;&nbsp;Define this to enable the high speed support for usb<BR>&nbsp;&nbsp;&nbsp;device and usbtty. If this feature is enabled, a routine<BR>&nbsp;&nbsp;&nbsp;int is_usbd_high_speed(void)<BR>&nbsp;&nbsp;&nbsp;also needs to be defined by the driver to dynamically poll<BR>&nbsp;&nbsp;&nbsp;whether the enumeration has succeded at high speed or full<BR>&nbsp;&nbsp;&nbsp;speed.</P>
<P>&nbsp;&nbsp;&nbsp;CONFIG_SYS_CONSOLE_IS_IN_ENV<BR>&nbsp;&nbsp;&nbsp;Define this if you want stdin, stdout &amp;/or stderr to<BR>&nbsp;&nbsp;&nbsp;be set to usbtty.</P>
<P>&nbsp;&nbsp;&nbsp;mpc8xx:<BR>&nbsp;&nbsp;&nbsp;&nbsp;CONFIG_SYS_USB_EXTC_CLK 0xBLAH<BR>&nbsp;&nbsp;&nbsp;&nbsp;Derive USB clock from external clock "blah"<BR>&nbsp;&nbsp;&nbsp;&nbsp;- CONFIG_SYS_USB_EXTC_CLK 0x02</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;CONFIG_SYS_USB_BRG_CLK 0xBLAH<BR>&nbsp;&nbsp;&nbsp;&nbsp;Derive USB clock from brgclk<BR>&nbsp;&nbsp;&nbsp;&nbsp;- CONFIG_SYS_USB_BRG_CLK 0x04</P>
<P>&nbsp;&nbsp;If you have a USB-IF assigned VendorID then you may wish to<BR>&nbsp;&nbsp;define your own vendor specific values either in BoardName.h<BR>&nbsp;&nbsp;or directly in usbd_vendor_info.h. If you don't define<BR>&nbsp;&nbsp;CONFIG_USBD_MANUFACTURER, CONFIG_USBD_PRODUCT_NAME,<BR>&nbsp;&nbsp;CONFIG_USBD_VENDORID and CONFIG_USBD_PRODUCTID, then U-Boot<BR>&nbsp;&nbsp;should pretend to be a Linux device to it's target host.</P>
<P>&nbsp;&nbsp;&nbsp;CONFIG_USBD_MANUFACTURER<BR>&nbsp;&nbsp;&nbsp;Define this string as the name of your company for<BR>&nbsp;&nbsp;&nbsp;- CONFIG_USBD_MANUFACTURER "my company"</P>
<P>&nbsp;&nbsp;&nbsp;CONFIG_USBD_PRODUCT_NAME<BR>&nbsp;&nbsp;&nbsp;Define this string as the name of your product<BR>&nbsp;&nbsp;&nbsp;- CONFIG_USBD_PRODUCT_NAME "acme usb device"</P>
<P>&nbsp;&nbsp;&nbsp;CONFIG_USBD_VENDORID<BR>&nbsp;&nbsp;&nbsp;Define this as your assigned Vendor ID from the USB<BR>&nbsp;&nbsp;&nbsp;Implementors Forum. This *must* be a genuine Vendor ID<BR>&nbsp;&nbsp;&nbsp;to avoid polluting the USB namespace.<BR>&nbsp;&nbsp;&nbsp;- CONFIG_USBD_VENDORID 0xFFFF</P>
<P>&nbsp;&nbsp;&nbsp;CONFIG_USBD_PRODUCTID<BR>&nbsp;&nbsp;&nbsp;Define this as the unique Product ID<BR>&nbsp;&nbsp;&nbsp;for your device<BR>&nbsp;&nbsp;&nbsp;- CONFIG_USBD_PRODUCTID 0xFFFF</P>
<P>- ULPI Layer Support:<BR>&nbsp;&nbsp;The ULPI (UTMI Low Pin (count) Interface) PHYs are supported via<BR>&nbsp;&nbsp;the generic ULPI layer. The generic layer accesses the ULPI PHY<BR>&nbsp;&nbsp;via the platform viewport, so you need both the genric layer and<BR>&nbsp;&nbsp;the viewport enabled. Currently only Chipidea/ARC based<BR>&nbsp;&nbsp;viewport is supported.<BR>&nbsp;&nbsp;To enable the ULPI layer support, define CONFIG_USB_ULPI and<BR>&nbsp;&nbsp;CONFIG_USB_ULPI_VIEWPORT in your board configuration file.<BR>&nbsp;&nbsp;If your ULPI phy needs a different reference clock than the<BR>&nbsp;&nbsp;standard 24 MHz then you have to define CONFIG_ULPI_REF_CLK to<BR>&nbsp;&nbsp;the appropriate value in Hz.</P>
<P>- MMC Support:<BR>&nbsp;&nbsp;The MMC controller on the Intel PXA is supported. To<BR>&nbsp;&nbsp;enable this define CONFIG_MMC. The MMC can be<BR>&nbsp;&nbsp;accessed from the boot prompt by mapping the device<BR>&nbsp;&nbsp;to physical memory similar to flash. Command line is<BR>&nbsp;&nbsp;enabled with CONFIG_CMD_MMC. The MMC driver also works with<BR>&nbsp;&nbsp;the FAT fs. This is enabled with CONFIG_CMD_FAT.</P>
<P>&nbsp;&nbsp;CONFIG_SH_MMCIF<BR>&nbsp;&nbsp;Support for Renesas on-chip MMCIF controller</P>
<P>&nbsp;&nbsp;&nbsp;CONFIG_SH_MMCIF_ADDR<BR>&nbsp;&nbsp;&nbsp;Define the base address of MMCIF registers</P>
<P>&nbsp;&nbsp;&nbsp;CONFIG_SH_MMCIF_CLK<BR>&nbsp;&nbsp;&nbsp;Define the clock frequency for MMCIF</P>
<P>&nbsp;&nbsp;CONFIG_GENERIC_MMC<BR>&nbsp;&nbsp;Enable the generic MMC driver</P>
<P>&nbsp;&nbsp;CONFIG_SUPPORT_EMMC_BOOT<BR>&nbsp;&nbsp;Enable some additional features of the eMMC boot partitions.</P>
<P>&nbsp;&nbsp;CONFIG_SUPPORT_EMMC_RPMB<BR>&nbsp;&nbsp;Enable the commands for reading, writing and programming the<BR>&nbsp;&nbsp;key for the Replay Protection Memory Block partition in eMMC.</P>
<P>- USB Device Firmware Update (DFU) class support:<BR>&nbsp;&nbsp;CONFIG_DFU_FUNCTION<BR>&nbsp;&nbsp;This enables the USB portion of the DFU USB class</P>
<P>&nbsp;&nbsp;CONFIG_CMD_DFU<BR>&nbsp;&nbsp;This enables the command "dfu" which is used to have<BR>&nbsp;&nbsp;U-Boot create a DFU class device via USB.&nbsp; This command<BR>&nbsp;&nbsp;requires that the "dfu_alt_info" environment variable be<BR>&nbsp;&nbsp;set and define the alt settings to expose to the host.</P>
<P>&nbsp;&nbsp;CONFIG_DFU_MMC<BR>&nbsp;&nbsp;This enables support for exposing (e)MMC devices via DFU.</P>
<P>&nbsp;&nbsp;CONFIG_DFU_NAND<BR>&nbsp;&nbsp;This enables support for exposing NAND devices via DFU.</P>
<P>&nbsp;&nbsp;CONFIG_DFU_RAM<BR>&nbsp;&nbsp;This enables support for exposing RAM via DFU.<BR>&nbsp;&nbsp;Note: DFU spec refer to non-volatile memory usage, but<BR>&nbsp;&nbsp;allow usages beyond the scope of spec - here RAM usage,<BR>&nbsp;&nbsp;one that would help mostly the developer.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_DFU_DATA_BUF_SIZE<BR>&nbsp;&nbsp;Dfu transfer uses a buffer before writing data to the<BR>&nbsp;&nbsp;raw storage device. Make the size (in bytes) of this buffer<BR>&nbsp;&nbsp;configurable. The size of this buffer is also configurable<BR>&nbsp;&nbsp;through the "dfu_bufsiz" environment variable.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_DFU_MAX_FILE_SIZE<BR>&nbsp;&nbsp;When updating files rather than the raw storage device,<BR>&nbsp;&nbsp;we use a static buffer to copy the file into and then write<BR>&nbsp;&nbsp;the buffer once we've been given the whole file.&nbsp; Define<BR>&nbsp;&nbsp;this to the maximum filesize (in bytes) for the buffer.<BR>&nbsp;&nbsp;Default is 4 MiB if undefined.</P>
<P>&nbsp;&nbsp;DFU_DEFAULT_POLL_TIMEOUT<BR>&nbsp;&nbsp;Poll timeout [ms], is the timeout a device can send to the<BR>&nbsp;&nbsp;host. The host must wait for this timeout before sending<BR>&nbsp;&nbsp;a subsequent DFU_GET_STATUS request to the device.</P>
<P>&nbsp;&nbsp;DFU_MANIFEST_POLL_TIMEOUT<BR>&nbsp;&nbsp;Poll timeout [ms], which the device sends to the host when<BR>&nbsp;&nbsp;entering dfuMANIFEST state. Host waits this timeout, before<BR>&nbsp;&nbsp;sending again an USB request to the device.</P>
<P>- USB Device Android Fastboot support:<BR>&nbsp;&nbsp;CONFIG_CMD_FASTBOOT<BR>&nbsp;&nbsp;This enables the command "fastboot" which enables the Android<BR>&nbsp;&nbsp;fastboot mode for the platform's USB device. Fastboot is a USB<BR>&nbsp;&nbsp;protocol for downloading images, flashing and device control<BR>&nbsp;&nbsp;used on Android devices.<BR>&nbsp;&nbsp;See doc/README.android-fastboot for more information.</P>
<P>&nbsp;&nbsp;CONFIG_ANDROID_BOOT_IMAGE<BR>&nbsp;&nbsp;This enables support for booting images which use the Android<BR>&nbsp;&nbsp;image format header.</P>
<P>&nbsp;&nbsp;CONFIG_USB_FASTBOOT_BUF_ADDR<BR>&nbsp;&nbsp;The fastboot protocol requires a large memory buffer for<BR>&nbsp;&nbsp;downloads. Define this to the starting RAM address to use for<BR>&nbsp;&nbsp;downloaded images.</P>
<P>&nbsp;&nbsp;CONFIG_USB_FASTBOOT_BUF_SIZE<BR>&nbsp;&nbsp;The fastboot protocol requires a large memory buffer for<BR>&nbsp;&nbsp;downloads. This buffer should be as large as possible for a<BR>&nbsp;&nbsp;platform. Define this to the size available RAM for fastboot.</P>
<P>&nbsp;&nbsp;CONFIG_FASTBOOT_FLASH<BR>&nbsp;&nbsp;The fastboot protocol includes a "flash" command for writing<BR>&nbsp;&nbsp;the downloaded image to a non-volatile storage device. Define<BR>&nbsp;&nbsp;this to enable the "fastboot flash" command.</P>
<P>&nbsp;&nbsp;CONFIG_FASTBOOT_FLASH_MMC_DEV<BR>&nbsp;&nbsp;The fastboot "flash" command requires additional information<BR>&nbsp;&nbsp;regarding the non-volatile storage device. Define this to<BR>&nbsp;&nbsp;the eMMC device that fastboot should use to store the image.</P>
<P>&nbsp;&nbsp;CONFIG_FASTBOOT_GPT_NAME<BR>&nbsp;&nbsp;The fastboot "flash" command supports writing the downloaded<BR>&nbsp;&nbsp;image to the Protective MBR and the Primary GUID Partition<BR>&nbsp;&nbsp;Table. (Additionally, this downloaded image is post-processed<BR>&nbsp;&nbsp;to generate and write the Backup GUID Partition Table.)<BR>&nbsp;&nbsp;This occurs when the specified "partition name" on the<BR>&nbsp;&nbsp;"fastboot flash" command line matches this value.<BR>&nbsp;&nbsp;Default is GPT_ENTRY_NAME (currently "gpt") if undefined.</P>
<P>- Journaling Flash filesystem support:<BR>&nbsp;&nbsp;CONFIG_JFFS2_NAND, CONFIG_JFFS2_NAND_OFF, CONFIG_JFFS2_NAND_SIZE,<BR>&nbsp;&nbsp;CONFIG_JFFS2_NAND_DEV<BR>&nbsp;&nbsp;Define these for a default partition on a NAND device</P>
<P>&nbsp;&nbsp;CONFIG_SYS_JFFS2_FIRST_SECTOR,<BR>&nbsp;&nbsp;CONFIG_SYS_JFFS2_FIRST_BANK, CONFIG_SYS_JFFS2_NUM_BANKS<BR>&nbsp;&nbsp;Define these for a default partition on a NOR device</P>
<P>&nbsp;&nbsp;CONFIG_SYS_JFFS_CUSTOM_PART<BR>&nbsp;&nbsp;Define this to create an own partition. You have to provide a<BR>&nbsp;&nbsp;function struct part_info* jffs2_part_info(int part_num)</P>
<P>&nbsp;&nbsp;If you define only one JFFS2 partition you may also want to<BR>&nbsp;&nbsp;#define CONFIG_SYS_JFFS_SINGLE_PART&nbsp;1<BR>&nbsp;&nbsp;to disable the command chpart. This is the default when you<BR>&nbsp;&nbsp;have not defined a custom partition</P>
<P>- FAT(File Allocation Table) filesystem write function support:<BR>&nbsp;&nbsp;CONFIG_FAT_WRITE</P>
<P>&nbsp;&nbsp;Define this to enable support for saving memory data as a<BR>&nbsp;&nbsp;file in FAT formatted partition.</P>
<P>&nbsp;&nbsp;This will also enable the command "fatwrite" enabling the<BR>&nbsp;&nbsp;user to write files to FAT.</P>
<P>CBFS (Coreboot Filesystem) support<BR>&nbsp;&nbsp;CONFIG_CMD_CBFS</P>
<P>&nbsp;&nbsp;Define this to enable support for reading from a Coreboot<BR>&nbsp;&nbsp;filesystem. Available commands are cbfsinit, cbfsinfo, cbfsls<BR>&nbsp;&nbsp;and cbfsload.</P>
<P>- FAT(File Allocation Table) filesystem cluster size:<BR>&nbsp;&nbsp;CONFIG_FS_FAT_MAX_CLUSTSIZE</P>
<P>&nbsp;&nbsp;Define the max cluster size for fat operations else<BR>&nbsp;&nbsp;a default value of 65536 will be defined.</P>
<P>- Keyboard Support:<BR>&nbsp;&nbsp;CONFIG_ISA_KEYBOARD</P>
<P>&nbsp;&nbsp;Define this to enable standard (PC-Style) keyboard<BR>&nbsp;&nbsp;support</P>
<P>&nbsp;&nbsp;CONFIG_I8042_KBD<BR>&nbsp;&nbsp;Standard PC keyboard driver with US (is default) and<BR>&nbsp;&nbsp;GERMAN key layout (switch via environment 'keymap=de') support.<BR>&nbsp;&nbsp;Export function i8042_kbd_init, i8042_tstc and i8042_getc<BR>&nbsp;&nbsp;for cfb_console. Supports cursor blinking.</P>
<P>&nbsp;&nbsp;CONFIG_CROS_EC_KEYB<BR>&nbsp;&nbsp;Enables a Chrome OS keyboard using the CROS_EC interface.<BR>&nbsp;&nbsp;This uses CROS_EC to communicate with a second microcontroller<BR>&nbsp;&nbsp;which provides key scans on request.</P>
<P>- Video support:<BR>&nbsp;&nbsp;CONFIG_VIDEO</P>
<P>&nbsp;&nbsp;Define this to enable video support (for output to<BR>&nbsp;&nbsp;video).</P>
<P>&nbsp;&nbsp;CONFIG_VIDEO_CT69000</P>
<P>&nbsp;&nbsp;Enable Chips &amp; Technologies 69000 Video chip</P>
<P>&nbsp;&nbsp;CONFIG_VIDEO_SMI_LYNXEM<BR>&nbsp;&nbsp;Enable Silicon Motion SMI 712/710/810 Video chip. The<BR>&nbsp;&nbsp;video output is selected via environment 'videoout'<BR>&nbsp;&nbsp;(1 = LCD and 2 = CRT). If videoout is undefined, CRT is<BR>&nbsp;&nbsp;assumed.</P>
<P>&nbsp;&nbsp;For the CT69000 and SMI_LYNXEM drivers, videomode is<BR>&nbsp;&nbsp;selected via environment 'videomode'. Two different ways<BR>&nbsp;&nbsp;are possible:<BR>&nbsp;&nbsp;- "videomode=num"&nbsp;&nbsp; 'num' is a standard LiLo mode numbers.<BR>&nbsp;&nbsp;Following standard modes are supported&nbsp;(* is default):</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Colors&nbsp;640x480 800x600 1024x768 1152x864 1280x1024<BR>&nbsp;&nbsp;-------------+---------------------------------------------<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 8 bits |&nbsp;0x301*&nbsp;0x303&nbsp; 0x305&nbsp;&nbsp; 0x161&nbsp;&nbsp;&nbsp;&nbsp; 0x307<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 15 bits |&nbsp;0x310&nbsp;0x313&nbsp; 0x316&nbsp;&nbsp; 0x162&nbsp;&nbsp;&nbsp;&nbsp; 0x319<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 16 bits |&nbsp;0x311&nbsp;0x314&nbsp; 0x317&nbsp;&nbsp; 0x163&nbsp;&nbsp;&nbsp;&nbsp; 0x31A<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 24 bits |&nbsp;0x312&nbsp;0x315&nbsp; 0x318&nbsp;&nbsp;&nbsp;&nbsp; ?&nbsp;&nbsp;&nbsp;&nbsp; 0x31B<BR>&nbsp;&nbsp;-------------+---------------------------------------------<BR>&nbsp;&nbsp;(i.e. setenv videomode 317; saveenv; reset;)</P>
<P>&nbsp;&nbsp;- "videomode=bootargs" all the video parameters are parsed<BR>&nbsp;&nbsp;from the bootargs. (See drivers/video/videomodes.c)</P>
<P><BR>&nbsp;&nbsp;CONFIG_VIDEO_SED13806<BR>&nbsp;&nbsp;Enable Epson SED13806 driver. This driver supports 8bpp<BR>&nbsp;&nbsp;and 16bpp modes defined by CONFIG_VIDEO_SED13806_8BPP<BR>&nbsp;&nbsp;or CONFIG_VIDEO_SED13806_16BPP</P>
<P>&nbsp;&nbsp;CONFIG_FSL_DIU_FB<BR>&nbsp;&nbsp;Enable the Freescale DIU video driver.&nbsp;Reference boards for<BR>&nbsp;&nbsp;SOCs that have a DIU should define this macro to enable DIU<BR>&nbsp;&nbsp;support, and should also define these other macros:</P>
<P>&nbsp;&nbsp;&nbsp;CONFIG_SYS_DIU_ADDR<BR>&nbsp;&nbsp;&nbsp;CONFIG_VIDEO<BR>&nbsp;&nbsp;&nbsp;CONFIG_CMD_BMP<BR>&nbsp;&nbsp;&nbsp;CONFIG_CFB_CONSOLE<BR>&nbsp;&nbsp;&nbsp;CONFIG_VIDEO_SW_CURSOR<BR>&nbsp;&nbsp;&nbsp;CONFIG_VGA_AS_SINGLE_DEVICE<BR>&nbsp;&nbsp;&nbsp;CONFIG_VIDEO_LOGO<BR>&nbsp;&nbsp;&nbsp;CONFIG_VIDEO_BMP_LOGO</P>
<P>&nbsp;&nbsp;The DIU driver will look for the 'video-mode' environment<BR>&nbsp;&nbsp;variable, and if defined, enable the DIU as a console during<BR>&nbsp;&nbsp;boot.&nbsp; See the documentation file README.video for a<BR>&nbsp;&nbsp;description of this variable.</P>
<P>&nbsp;&nbsp;CONFIG_VIDEO_VGA</P>
<P>&nbsp;&nbsp;Enable the VGA video / BIOS for x86. The alternative if you<BR>&nbsp;&nbsp;are using coreboot is to use the coreboot frame buffer<BR>&nbsp;&nbsp;driver.</P>
<P><BR>- Keyboard Support:<BR>&nbsp;&nbsp;CONFIG_KEYBOARD</P>
<P>&nbsp;&nbsp;Define this to enable a custom keyboard support.<BR>&nbsp;&nbsp;This simply calls drv_keyboard_init() which must be<BR>&nbsp;&nbsp;defined in your board-specific files.<BR>&nbsp;&nbsp;The only board using this so far is RBC823.</P>
<P>- LCD Support:&nbsp;CONFIG_LCD</P>
<P>&nbsp;&nbsp;Define this to enable LCD support (for output to LCD<BR>&nbsp;&nbsp;display); also select one of the supported displays<BR>&nbsp;&nbsp;by defining one of these:</P>
<P>&nbsp;&nbsp;CONFIG_ATMEL_LCD:</P>
<P>&nbsp;&nbsp;&nbsp;HITACHI TX09D70VM1CCA, 3.5", 240x320.</P>
<P>&nbsp;&nbsp;CONFIG_NEC_NL6448AC33:</P>
<P>&nbsp;&nbsp;&nbsp;NEC NL6448AC33-18. Active, color, single scan.</P>
<P>&nbsp;&nbsp;CONFIG_NEC_NL6448BC20</P>
<P>&nbsp;&nbsp;&nbsp;NEC NL6448BC20-08. 6.5", 640x480.<BR>&nbsp;&nbsp;&nbsp;Active, color, single scan.</P>
<P>&nbsp;&nbsp;CONFIG_NEC_NL6448BC33_54</P>
<P>&nbsp;&nbsp;&nbsp;NEC NL6448BC33-54. 10.4", 640x480.<BR>&nbsp;&nbsp;&nbsp;Active, color, single scan.</P>
<P>&nbsp;&nbsp;CONFIG_SHARP_16x9</P>
<P>&nbsp;&nbsp;&nbsp;Sharp 320x240. Active, color, single scan.<BR>&nbsp;&nbsp;&nbsp;It isn't 16x9, and I am not sure what it is.</P>
<P>&nbsp;&nbsp;CONFIG_SHARP_LQ64D341</P>
<P>&nbsp;&nbsp;&nbsp;Sharp LQ64D341 display, 640x480.<BR>&nbsp;&nbsp;&nbsp;Active, color, single scan.</P>
<P>&nbsp;&nbsp;CONFIG_HLD1045</P>
<P>&nbsp;&nbsp;&nbsp;HLD1045 display, 640x480.<BR>&nbsp;&nbsp;&nbsp;Active, color, single scan.</P>
<P>&nbsp;&nbsp;CONFIG_OPTREX_BW</P>
<P>&nbsp;&nbsp;&nbsp;Optrex&nbsp; CBL50840-2 NF-FW 99 22 M5<BR>&nbsp;&nbsp;&nbsp;or<BR>&nbsp;&nbsp;&nbsp;Hitachi&nbsp; LMG6912RPFC-00T<BR>&nbsp;&nbsp;&nbsp;or<BR>&nbsp;&nbsp;&nbsp;Hitachi&nbsp; SP14Q002</P>
<P>&nbsp;&nbsp;&nbsp;320x240. Black &amp; white.</P>
<P>&nbsp;&nbsp;Normally display is black on white background; define<BR>&nbsp;&nbsp;CONFIG_SYS_WHITE_ON_BLACK to get it inverted.</P>
<P>&nbsp;&nbsp;CONFIG_LCD_ALIGNMENT</P>
<P>&nbsp;&nbsp;Normally the LCD is page-aligned (typically 4KB). If this is<BR>&nbsp;&nbsp;defined then the LCD will be aligned to this value instead.<BR>&nbsp;&nbsp;For ARM it is sometimes useful to use MMU_SECTION_SIZE<BR>&nbsp;&nbsp;here, since it is cheaper to change data cache settings on<BR>&nbsp;&nbsp;a per-section basis.</P>
<P>&nbsp;&nbsp;CONFIG_CONSOLE_SCROLL_LINES</P>
<P>&nbsp;&nbsp;When the console need to be scrolled, this is the number of<BR>&nbsp;&nbsp;lines to scroll by. It defaults to 1. Increasing this makes<BR>&nbsp;&nbsp;the console jump but can help speed up operation when scrolling<BR>&nbsp;&nbsp;is slow.</P>
<P>&nbsp;&nbsp;CONFIG_LCD_BMP_RLE8</P>
<P>&nbsp;&nbsp;Support drawing of RLE8-compressed bitmaps on the LCD.</P>
<P>&nbsp;&nbsp;CONFIG_I2C_EDID</P>
<P>&nbsp;&nbsp;Enables an 'i2c edid' command which can read EDID<BR>&nbsp;&nbsp;information over I2C from an attached LCD display.</P>
<P>- Splash Screen Support: CONFIG_SPLASH_SCREEN</P>
<P>&nbsp;&nbsp;If this option is set, the environment is checked for<BR>&nbsp;&nbsp;a variable "splashimage". If found, the usual display<BR>&nbsp;&nbsp;of logo, copyright and system information on the LCD<BR>&nbsp;&nbsp;is suppressed and the BMP image at the address<BR>&nbsp;&nbsp;specified in "splashimage" is loaded instead. The<BR>&nbsp;&nbsp;console is redirected to the "nulldev", too. This<BR>&nbsp;&nbsp;allows for a "silent" boot where a splash screen is<BR>&nbsp;&nbsp;loaded very quickly after power-on.</P>
<P>&nbsp;&nbsp;CONFIG_SPLASHIMAGE_GUARD</P>
<P>&nbsp;&nbsp;If this option is set, then U-Boot will prevent the environment<BR>&nbsp;&nbsp;variable "splashimage" from being set to a problematic address<BR>&nbsp;&nbsp;(see README.displaying-bmps).<BR>&nbsp;&nbsp;This option is useful for targets where, due to alignment<BR>&nbsp;&nbsp;restrictions, an improperly aligned BMP image will cause a data<BR>&nbsp;&nbsp;abort. If you think you will not have problems with unaligned<BR>&nbsp;&nbsp;accesses (for example because your toolchain prevents them)<BR>&nbsp;&nbsp;there is no need to set this option.</P>
<P>&nbsp;&nbsp;CONFIG_SPLASH_SCREEN_ALIGN</P>
<P>&nbsp;&nbsp;If this option is set the splash image can be freely positioned<BR>&nbsp;&nbsp;on the screen. Environment variable "splashpos" specifies the<BR>&nbsp;&nbsp;position as "x,y". If a positive number is given it is used as<BR>&nbsp;&nbsp;number of pixel from left/top. If a negative number is given it<BR>&nbsp;&nbsp;is used as number of pixel from right/bottom. You can also<BR>&nbsp;&nbsp;specify 'm' for centering the image.</P>
<P>&nbsp;&nbsp;Example:<BR>&nbsp;&nbsp;setenv splashpos m,m<BR>&nbsp;&nbsp;&nbsp;=&gt; image at center of screen</P>
<P>&nbsp;&nbsp;setenv splashpos 30,20<BR>&nbsp;&nbsp;&nbsp;=&gt; image at x = 30 and y = 20</P>
<P>&nbsp;&nbsp;setenv splashpos -10,m<BR>&nbsp;&nbsp;&nbsp;=&gt; vertically centered image<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; at x = dspWidth - bmpWidth - 9</P>
<P>- Gzip compressed BMP image support: CONFIG_VIDEO_BMP_GZIP</P>
<P>&nbsp;&nbsp;If this option is set, additionally to standard BMP<BR>&nbsp;&nbsp;images, gzipped BMP images can be displayed via the<BR>&nbsp;&nbsp;splashscreen support or the bmp command.</P>
<P>- Run length encoded BMP image (RLE8) support: CONFIG_VIDEO_BMP_RLE8</P>
<P>&nbsp;&nbsp;If this option is set, 8-bit RLE compressed BMP images<BR>&nbsp;&nbsp;can be displayed via the splashscreen support or the<BR>&nbsp;&nbsp;bmp command.</P>
<P>- Do compressing for memory range:<BR>&nbsp;&nbsp;CONFIG_CMD_ZIP</P>
<P>&nbsp;&nbsp;If this option is set, it would use zlib deflate method<BR>&nbsp;&nbsp;to compress the specified memory at its best effort.</P>
<P>- Compression support:<BR>&nbsp;&nbsp;CONFIG_GZIP</P>
<P>&nbsp;&nbsp;Enabled by default to support gzip compressed images.</P>
<P>&nbsp;&nbsp;CONFIG_BZIP2</P>
<P>&nbsp;&nbsp;If this option is set, support for bzip2 compressed<BR>&nbsp;&nbsp;images is included. If not, only uncompressed and gzip<BR>&nbsp;&nbsp;compressed images are supported.</P>
<P>&nbsp;&nbsp;NOTE: the bzip2 algorithm requires a lot of RAM, so<BR>&nbsp;&nbsp;the malloc area (as defined by CONFIG_SYS_MALLOC_LEN) should<BR>&nbsp;&nbsp;be at least 4MB.</P>
<P>&nbsp;&nbsp;CONFIG_LZMA</P>
<P>&nbsp;&nbsp;If this option is set, support for lzma compressed<BR>&nbsp;&nbsp;images is included.</P>
<P>&nbsp;&nbsp;Note: The LZMA algorithm adds between 2 and 4KB of code and it<BR>&nbsp;&nbsp;requires an amount of dynamic memory that is given by the<BR>&nbsp;&nbsp;formula:</P>
<P>&nbsp;&nbsp;&nbsp;(1846 + 768 &lt;&lt; (lc + lp)) * sizeof(uint16)</P>
<P>&nbsp;&nbsp;Where lc and lp stand for, respectively, Literal context bits<BR>&nbsp;&nbsp;and Literal pos bits.</P>
<P>&nbsp;&nbsp;This value is upper-bounded by 14MB in the worst case. Anyway,<BR>&nbsp;&nbsp;for a ~4MB large kernel image, we have lc=3 and lp=0 for a<BR>&nbsp;&nbsp;total amount of (1846 + 768 &lt;&lt; (3 + 0)) * 2 = ~41KB... that is<BR>&nbsp;&nbsp;a very small buffer.</P>
<P>&nbsp;&nbsp;Use the lzmainfo tool to determinate the lc and lp values and<BR>&nbsp;&nbsp;then calculate the amount of needed dynamic memory (ensuring<BR>&nbsp;&nbsp;the appropriate CONFIG_SYS_MALLOC_LEN value).</P>
<P>&nbsp;&nbsp;CONFIG_LZO</P>
<P>&nbsp;&nbsp;If this option is set, support for LZO compressed images<BR>&nbsp;&nbsp;is included.</P>
<P>- MII/PHY support:<BR>&nbsp;&nbsp;CONFIG_PHY_ADDR</P>
<P>&nbsp;&nbsp;The address of PHY on MII bus.</P>
<P>&nbsp;&nbsp;CONFIG_PHY_CLOCK_FREQ (ppc4xx)</P>
<P>&nbsp;&nbsp;The clock frequency of the MII bus</P>
<P>&nbsp;&nbsp;CONFIG_PHY_GIGE</P>
<P>&nbsp;&nbsp;If this option is set, support for speed/duplex<BR>&nbsp;&nbsp;detection of gigabit PHY is included.</P>
<P>&nbsp;&nbsp;CONFIG_PHY_RESET_DELAY</P>
<P>&nbsp;&nbsp;Some PHY like Intel LXT971A need extra delay after<BR>&nbsp;&nbsp;reset before any MII register access is possible.<BR>&nbsp;&nbsp;For such PHY, set this option to the usec delay<BR>&nbsp;&nbsp;required. (minimum 300usec for LXT971A)</P>
<P>&nbsp;&nbsp;CONFIG_PHY_CMD_DELAY (ppc4xx)</P>
<P>&nbsp;&nbsp;Some PHY like Intel LXT971A need extra delay after<BR>&nbsp;&nbsp;command issued before MII status register can be read</P>
<P>- Ethernet address:<BR>&nbsp;&nbsp;CONFIG_ETHADDR<BR>&nbsp;&nbsp;CONFIG_ETH1ADDR<BR>&nbsp;&nbsp;CONFIG_ETH2ADDR<BR>&nbsp;&nbsp;CONFIG_ETH3ADDR<BR>&nbsp;&nbsp;CONFIG_ETH4ADDR<BR>&nbsp;&nbsp;CONFIG_ETH5ADDR</P>
<P>&nbsp;&nbsp;Define a default value for Ethernet address to use<BR>&nbsp;&nbsp;for the respective Ethernet interface, in case this<BR>&nbsp;&nbsp;is not determined automatically.</P>
<P>- IP address:<BR>&nbsp;&nbsp;CONFIG_IPADDR</P>
<P>&nbsp;&nbsp;Define a default value for the IP address to use for<BR>&nbsp;&nbsp;the default Ethernet interface, in case this is not<BR>&nbsp;&nbsp;determined through e.g. bootp.<BR>&nbsp;&nbsp;(Environment variable "ipaddr")</P>
<P>- Server IP address:<BR>&nbsp;&nbsp;CONFIG_SERVERIP</P>
<P>&nbsp;&nbsp;Defines a default value for the IP address of a TFTP<BR>&nbsp;&nbsp;server to contact when using the "tftboot" command.<BR>&nbsp;&nbsp;(Environment variable "serverip")</P>
<P>&nbsp;&nbsp;CONFIG_KEEP_SERVERADDR</P>
<P>&nbsp;&nbsp;Keeps the server's MAC address, in the env 'serveraddr'<BR>&nbsp;&nbsp;for passing to bootargs (like Linux's netconsole option)</P>
<P>- Gateway IP address:<BR>&nbsp;&nbsp;CONFIG_GATEWAYIP</P>
<P>&nbsp;&nbsp;Defines a default value for the IP address of the<BR>&nbsp;&nbsp;default router where packets to other networks are<BR>&nbsp;&nbsp;sent to.<BR>&nbsp;&nbsp;(Environment variable "gatewayip")</P>
<P>- Subnet mask:<BR>&nbsp;&nbsp;CONFIG_NETMASK</P>
<P>&nbsp;&nbsp;Defines a default value for the subnet mask (or<BR>&nbsp;&nbsp;routing prefix) which is used to determine if an IP<BR>&nbsp;&nbsp;address belongs to the local subnet or needs to be<BR>&nbsp;&nbsp;forwarded through a router.<BR>&nbsp;&nbsp;(Environment variable "netmask")</P>
<P>- Multicast TFTP Mode:<BR>&nbsp;&nbsp;CONFIG_MCAST_TFTP</P>
<P>&nbsp;&nbsp;Defines whether you want to support multicast TFTP as per<BR>&nbsp;&nbsp;rfc-2090; for example to work with atftp.&nbsp; Lets lots of targets<BR>&nbsp;&nbsp;tftp down the same boot image concurrently.&nbsp; Note: the Ethernet<BR>&nbsp;&nbsp;driver in use must provide a function: mcast() to join/leave a<BR>&nbsp;&nbsp;multicast group.</P>
<P>- BOOTP Recovery Mode:<BR>&nbsp;&nbsp;CONFIG_BOOTP_RANDOM_DELAY</P>
<P>&nbsp;&nbsp;If you have many targets in a network that try to<BR>&nbsp;&nbsp;boot using BOOTP, you may want to avoid that all<BR>&nbsp;&nbsp;systems send out BOOTP requests at precisely the same<BR>&nbsp;&nbsp;moment (which would happen for instance at recovery<BR>&nbsp;&nbsp;from a power failure, when all systems will try to<BR>&nbsp;&nbsp;boot, thus flooding the BOOTP server. Defining<BR>&nbsp;&nbsp;CONFIG_BOOTP_RANDOM_DELAY causes a random delay to be<BR>&nbsp;&nbsp;inserted before sending out BOOTP requests. The<BR>&nbsp;&nbsp;following delays are inserted then:</P>
<P>&nbsp;&nbsp;1st BOOTP request:&nbsp;delay 0 ... 1 sec<BR>&nbsp;&nbsp;2nd BOOTP request:&nbsp;delay 0 ... 2 sec<BR>&nbsp;&nbsp;3rd BOOTP request:&nbsp;delay 0 ... 4 sec<BR>&nbsp;&nbsp;4th and following<BR>&nbsp;&nbsp;BOOTP requests:&nbsp;&nbsp;delay 0 ... 8 sec</P>
<P>&nbsp;&nbsp;CONFIG_BOOTP_ID_CACHE_SIZE</P>
<P>&nbsp;&nbsp;BOOTP packets are uniquely identified using a 32-bit ID. The<BR>&nbsp;&nbsp;server will copy the ID from client requests to responses and<BR>&nbsp;&nbsp;U-Boot will use this to determine if it is the destination of<BR>&nbsp;&nbsp;an incoming response. Some servers will check that addresses<BR>&nbsp;&nbsp;aren't in use before handing them out (usually using an ARP<BR>&nbsp;&nbsp;ping) and therefore take up to a few hundred milliseconds to<BR>&nbsp;&nbsp;respond. Network congestion may also influence the time it<BR>&nbsp;&nbsp;takes for a response to make it back to the client. If that<BR>&nbsp;&nbsp;time is too long, U-Boot will retransmit requests. In order<BR>&nbsp;&nbsp;to allow earlier responses to still be accepted after these<BR>&nbsp;&nbsp;retransmissions, U-Boot's BOOTP client keeps a small cache of<BR>&nbsp;&nbsp;IDs. The CONFIG_BOOTP_ID_CACHE_SIZE controls the size of this<BR>&nbsp;&nbsp;cache. The default is to keep IDs for up to four outstanding<BR>&nbsp;&nbsp;requests. Increasing this will allow U-Boot to accept offers<BR>&nbsp;&nbsp;from a BOOTP client in networks with unusually high latency.</P>
<P>- DHCP Advanced Options:<BR>&nbsp;&nbsp;You can fine tune the DHCP functionality by defining<BR>&nbsp;&nbsp;CONFIG_BOOTP_* symbols:</P>
<P>&nbsp;&nbsp;CONFIG_BOOTP_SUBNETMASK<BR>&nbsp;&nbsp;CONFIG_BOOTP_GATEWAY<BR>&nbsp;&nbsp;CONFIG_BOOTP_HOSTNAME<BR>&nbsp;&nbsp;CONFIG_BOOTP_NISDOMAIN<BR>&nbsp;&nbsp;CONFIG_BOOTP_BOOTPATH<BR>&nbsp;&nbsp;CONFIG_BOOTP_BOOTFILESIZE<BR>&nbsp;&nbsp;CONFIG_BOOTP_DNS<BR>&nbsp;&nbsp;CONFIG_BOOTP_DNS2<BR>&nbsp;&nbsp;CONFIG_BOOTP_SEND_HOSTNAME<BR>&nbsp;&nbsp;CONFIG_BOOTP_NTPSERVER<BR>&nbsp;&nbsp;CONFIG_BOOTP_TIMEOFFSET<BR>&nbsp;&nbsp;CONFIG_BOOTP_VENDOREX<BR>&nbsp;&nbsp;CONFIG_BOOTP_MAY_FAIL</P>
<P>&nbsp;&nbsp;CONFIG_BOOTP_SERVERIP - TFTP server will be the serverip<BR>&nbsp;&nbsp;environment variable, not the BOOTP server.</P>
<P>&nbsp;&nbsp;CONFIG_BOOTP_MAY_FAIL - If the DHCP server is not found<BR>&nbsp;&nbsp;after the configured retry count, the call will fail<BR>&nbsp;&nbsp;instead of starting over.&nbsp; This can be used to fail over<BR>&nbsp;&nbsp;to Link-local IP address configuration if the DHCP server<BR>&nbsp;&nbsp;is not available.</P>
<P>&nbsp;&nbsp;CONFIG_BOOTP_DNS2 - If a DHCP client requests the DNS<BR>&nbsp;&nbsp;serverip from a DHCP server, it is possible that more<BR>&nbsp;&nbsp;than one DNS serverip is offered to the client.<BR>&nbsp;&nbsp;If CONFIG_BOOTP_DNS2 is enabled, the secondary DNS<BR>&nbsp;&nbsp;serverip will be stored in the additional environment<BR>&nbsp;&nbsp;variable "dnsip2". The first DNS serverip is always<BR>&nbsp;&nbsp;stored in the variable "dnsip", when CONFIG_BOOTP_DNS<BR>&nbsp;&nbsp;is defined.</P>
<P>&nbsp;&nbsp;CONFIG_BOOTP_SEND_HOSTNAME - Some DHCP servers are capable<BR>&nbsp;&nbsp;to do a dynamic update of a DNS server. To do this, they<BR>&nbsp;&nbsp;need the hostname of the DHCP requester.<BR>&nbsp;&nbsp;If CONFIG_BOOTP_SEND_HOSTNAME is defined, the content<BR>&nbsp;&nbsp;of the "hostname" environment variable is passed as<BR>&nbsp;&nbsp;option 12 to the DHCP server.</P>
<P>&nbsp;&nbsp;CONFIG_BOOTP_DHCP_REQUEST_DELAY</P>
<P>&nbsp;&nbsp;A 32bit value in microseconds for a delay between<BR>&nbsp;&nbsp;receiving a "DHCP Offer" and sending the "DHCP Request".<BR>&nbsp;&nbsp;This fixes a problem with certain DHCP servers that don't<BR>&nbsp;&nbsp;respond 100% of the time to a "DHCP request". E.g. On an<BR>&nbsp;&nbsp;AT91RM9200 processor running at 180MHz, this delay needed<BR>&nbsp;&nbsp;to be *at least* 15,000 usec before a Windows Server 2003<BR>&nbsp;&nbsp;DHCP server would reply 100% of the time. I recommend at<BR>&nbsp;&nbsp;least 50,000 usec to be safe. The alternative is to hope<BR>&nbsp;&nbsp;that one of the retries will be successful but note that<BR>&nbsp;&nbsp;the DHCP timeout and retry process takes a longer than<BR>&nbsp;&nbsp;this delay.</P>
<P>&nbsp;- Link-local IP address negotiation:<BR>&nbsp;&nbsp;Negotiate with other link-local clients on the local network<BR>&nbsp;&nbsp;for an address that doesn't require explicit configuration.<BR>&nbsp;&nbsp;This is especially useful if a DHCP server cannot be guaranteed<BR>&nbsp;&nbsp;to exist in all environments that the device must operate.</P>
<P>&nbsp;&nbsp;See doc/README.link-local for more information.</P>
<P>&nbsp;- CDP Options:<BR>&nbsp;&nbsp;CONFIG_CDP_DEVICE_ID</P>
<P>&nbsp;&nbsp;The device id used in CDP trigger frames.</P>
<P>&nbsp;&nbsp;CONFIG_CDP_DEVICE_ID_PREFIX</P>
<P>&nbsp;&nbsp;A two character string which is prefixed to the MAC address<BR>&nbsp;&nbsp;of the device.</P>
<P>&nbsp;&nbsp;CONFIG_CDP_PORT_ID</P>
<P>&nbsp;&nbsp;A printf format string which contains the ascii name of<BR>&nbsp;&nbsp;the port. Normally is set to "eth%d" which sets<BR>&nbsp;&nbsp;eth0 for the first Ethernet, eth1 for the second etc.</P>
<P>&nbsp;&nbsp;CONFIG_CDP_CAPABILITIES</P>
<P>&nbsp;&nbsp;A 32bit integer which indicates the device capabilities;<BR>&nbsp;&nbsp;0x00000010 for a normal host which does not forwards.</P>
<P>&nbsp;&nbsp;CONFIG_CDP_VERSION</P>
<P>&nbsp;&nbsp;An ascii string containing the version of the software.</P>
<P>&nbsp;&nbsp;CONFIG_CDP_PLATFORM</P>
<P>&nbsp;&nbsp;An ascii string containing the name of the platform.</P>
<P>&nbsp;&nbsp;CONFIG_CDP_TRIGGER</P>
<P>&nbsp;&nbsp;A 32bit integer sent on the trigger.</P>
<P>&nbsp;&nbsp;CONFIG_CDP_POWER_CONSUMPTION</P>
<P>&nbsp;&nbsp;A 16bit integer containing the power consumption of the<BR>&nbsp;&nbsp;device in .1 of milliwatts.</P>
<P>&nbsp;&nbsp;CONFIG_CDP_APPLIANCE_VLAN_TYPE</P>
<P>&nbsp;&nbsp;A byte containing the id of the VLAN.</P>
<P>- Status LED:&nbsp;CONFIG_STATUS_LED</P>
<P>&nbsp;&nbsp;Several configurations allow to display the current<BR>&nbsp;&nbsp;status using a LED. For instance, the LED will blink<BR>&nbsp;&nbsp;fast while running U-Boot code, stop blinking as<BR>&nbsp;&nbsp;soon as a reply to a BOOTP request was received, and<BR>&nbsp;&nbsp;start blinking slow once the Linux kernel is running<BR>&nbsp;&nbsp;(supported by a status LED driver in the Linux<BR>&nbsp;&nbsp;kernel). Defining CONFIG_STATUS_LED enables this<BR>&nbsp;&nbsp;feature in U-Boot.</P>
<P>&nbsp;&nbsp;Additional options:</P>
<P>&nbsp;&nbsp;CONFIG_GPIO_LED<BR>&nbsp;&nbsp;The status LED can be connected to a GPIO pin.<BR>&nbsp;&nbsp;In such cases, the gpio_led driver can be used as a<BR>&nbsp;&nbsp;status LED backend implementation. Define CONFIG_GPIO_LED<BR>&nbsp;&nbsp;to include the gpio_led driver in the U-Boot binary.</P>
<P>&nbsp;&nbsp;CONFIG_GPIO_LED_INVERTED_TABLE<BR>&nbsp;&nbsp;Some GPIO connected LEDs may have inverted polarity in which<BR>&nbsp;&nbsp;case the GPIO high value corresponds to LED off state and<BR>&nbsp;&nbsp;GPIO low value corresponds to LED on state.<BR>&nbsp;&nbsp;In such cases CONFIG_GPIO_LED_INVERTED_TABLE may be defined<BR>&nbsp;&nbsp;with a list of GPIO LEDs that have inverted polarity.</P>
<P>- CAN Support:&nbsp;CONFIG_CAN_DRIVER</P>
<P>&nbsp;&nbsp;Defining CONFIG_CAN_DRIVER enables CAN driver support<BR>&nbsp;&nbsp;on those systems that support this (optional)<BR>&nbsp;&nbsp;feature, like the TQM8xxL modules.</P>
<P>- I2C Support:&nbsp;CONFIG_SYS_I2C</P>
<P>&nbsp;&nbsp;This enable the NEW i2c subsystem, and will allow you to use<BR>&nbsp;&nbsp;i2c commands at the u-boot command line (as long as you set<BR>&nbsp;&nbsp;CONFIG_CMD_I2C in CONFIG_COMMANDS) and communicate with i2c<BR>&nbsp;&nbsp;based realtime clock chips or other i2c devices. See<BR>&nbsp;&nbsp;common/cmd_i2c.c for a description of the command line<BR>&nbsp;&nbsp;interface.</P>
<P>&nbsp;&nbsp;ported i2c driver to the new framework:<BR>&nbsp;&nbsp;- drivers/i2c/soft_i2c.c:<BR>&nbsp;&nbsp;&nbsp; - activate first bus with CONFIG_SYS_I2C_SOFT define<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CONFIG_SYS_I2C_SOFT_SPEED and CONFIG_SYS_I2C_SOFT_SLAVE<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for defining speed and slave address<BR>&nbsp;&nbsp;&nbsp; - activate second bus with I2C_SOFT_DECLARATIONS2 define<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CONFIG_SYS_I2C_SOFT_SPEED_2 and CONFIG_SYS_I2C_SOFT_SLAVE_2<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for defining speed and slave address<BR>&nbsp;&nbsp;&nbsp; - activate third bus with I2C_SOFT_DECLARATIONS3 define<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CONFIG_SYS_I2C_SOFT_SPEED_3 and CONFIG_SYS_I2C_SOFT_SLAVE_3<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for defining speed and slave address<BR>&nbsp;&nbsp;&nbsp; - activate fourth bus with I2C_SOFT_DECLARATIONS4 define<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CONFIG_SYS_I2C_SOFT_SPEED_4 and CONFIG_SYS_I2C_SOFT_SLAVE_4<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; for defining speed and slave address</P>
<P>&nbsp;&nbsp;- drivers/i2c/fsl_i2c.c:<BR>&nbsp;&nbsp;&nbsp; - activate i2c driver with CONFIG_SYS_I2C_FSL<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; define CONFIG_SYS_FSL_I2C_OFFSET for setting the register<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; offset CONFIG_SYS_FSL_I2C_SPEED for the i2c speed and<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CONFIG_SYS_FSL_I2C_SLAVE for the slave addr of the first<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; bus.<BR>&nbsp;&nbsp;&nbsp; - If your board supports a second fsl i2c bus, define<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CONFIG_SYS_FSL_I2C2_OFFSET for the register offset<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CONFIG_SYS_FSL_I2C2_SPEED for the speed and<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CONFIG_SYS_FSL_I2C2_SLAVE for the slave address of the<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; second bus.</P>
<P>&nbsp;&nbsp;- drivers/i2c/tegra_i2c.c:<BR>&nbsp;&nbsp;&nbsp; - activate this driver with CONFIG_SYS_I2C_TEGRA<BR>&nbsp;&nbsp;&nbsp; - This driver adds 4 i2c buses with a fix speed from<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 100000 and the slave addr 0!</P>
<P>&nbsp;&nbsp;- drivers/i2c/ppc4xx_i2c.c<BR>&nbsp;&nbsp;&nbsp; - activate this driver with CONFIG_SYS_I2C_PPC4XX<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_I2C_PPC4XX_CH0 activate hardware channel 0<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_I2C_PPC4XX_CH1 activate hardware channel 1</P>
<P>&nbsp;&nbsp;- drivers/i2c/i2c_mxc.c<BR>&nbsp;&nbsp;&nbsp; - activate this driver with CONFIG_SYS_I2C_MXC<BR>&nbsp;&nbsp;&nbsp; - define speed for bus 1 with CONFIG_SYS_MXC_I2C1_SPEED<BR>&nbsp;&nbsp;&nbsp; - define slave for bus 1 with CONFIG_SYS_MXC_I2C1_SLAVE<BR>&nbsp;&nbsp;&nbsp; - define speed for bus 2 with CONFIG_SYS_MXC_I2C2_SPEED<BR>&nbsp;&nbsp;&nbsp; - define slave for bus 2 with CONFIG_SYS_MXC_I2C2_SLAVE<BR>&nbsp;&nbsp;&nbsp; - define speed for bus 3 with CONFIG_SYS_MXC_I2C3_SPEED<BR>&nbsp;&nbsp;&nbsp; - define slave for bus 3 with CONFIG_SYS_MXC_I2C3_SLAVE<BR>&nbsp;&nbsp;If those defines are not set, default value is 100000<BR>&nbsp;&nbsp;for speed, and 0 for slave.</P>
<P>&nbsp;&nbsp;- drivers/i2c/rcar_i2c.c:<BR>&nbsp;&nbsp;&nbsp; - activate this driver with CONFIG_SYS_I2C_RCAR<BR>&nbsp;&nbsp;&nbsp; - This driver adds 4 i2c buses</P>
<P>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_RCAR_I2C0_BASE for setting the register channel 0<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_RCAR_I2C0_SPEED for for the speed channel 0<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_RCAR_I2C1_BASE for setting the register channel 1<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_RCAR_I2C1_SPEED for for the speed channel 1<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_RCAR_I2C2_BASE for setting the register channel 2<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_RCAR_I2C2_SPEED for for the speed channel 2<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_RCAR_I2C3_BASE for setting the register channel 3<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_RCAR_I2C3_SPEED for for the speed channel 3<BR>&nbsp;&nbsp;&nbsp; - CONFIF_SYS_RCAR_I2C_NUM_CONTROLLERS for number of i2c buses</P>
<P>&nbsp;&nbsp;- drivers/i2c/sh_i2c.c:<BR>&nbsp;&nbsp;&nbsp; - activate this driver with CONFIG_SYS_I2C_SH<BR>&nbsp;&nbsp;&nbsp; - This driver adds from 2 to 5 i2c buses</P>
<P>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_I2C_SH_BASE0 for setting the register channel 0<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_I2C_SH_SPEED0 for for the speed channel 0<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_I2C_SH_BASE1 for setting the register channel 1<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_I2C_SH_SPEED1 for for the speed channel 1<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_I2C_SH_BASE2 for setting the register channel 2<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_I2C_SH_SPEED2 for for the speed channel 2<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_I2C_SH_BASE3 for setting the register channel 3<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_I2C_SH_SPEED3 for for the speed channel 3<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_I2C_SH_BASE4 for setting the register channel 4<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_I2C_SH_SPEED4 for for the speed channel 4<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_I2C_SH_BASE5 for setting the register channel 5<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_I2C_SH_SPEED5 for for the speed channel 5<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_I2C_SH_NUM_CONTROLLERS for number of i2c buses</P>
<P>&nbsp;&nbsp;- drivers/i2c/omap24xx_i2c.c<BR>&nbsp;&nbsp;&nbsp; - activate this driver with CONFIG_SYS_I2C_OMAP24XX<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_OMAP24_I2C_SPEED speed channel 0<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_OMAP24_I2C_SLAVE slave addr channel 0<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_OMAP24_I2C_SPEED1 speed channel 1<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_OMAP24_I2C_SLAVE1 slave addr channel 1<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_OMAP24_I2C_SPEED2 speed channel 2<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_OMAP24_I2C_SLAVE2 slave addr channel 2<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_OMAP24_I2C_SPEED3 speed channel 3<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_OMAP24_I2C_SLAVE3 slave addr channel 3<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_OMAP24_I2C_SPEED4 speed channel 4<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_OMAP24_I2C_SLAVE4 slave addr channel 4</P>
<P>&nbsp;&nbsp;- drivers/i2c/zynq_i2c.c<BR>&nbsp;&nbsp;&nbsp; - activate this driver with CONFIG_SYS_I2C_ZYNQ<BR>&nbsp;&nbsp;&nbsp; - set CONFIG_SYS_I2C_ZYNQ_SPEED for speed setting<BR>&nbsp;&nbsp;&nbsp; - set CONFIG_SYS_I2C_ZYNQ_SLAVE for slave addr</P>
<P>&nbsp;&nbsp;- drivers/i2c/s3c24x0_i2c.c:<BR>&nbsp;&nbsp;&nbsp; - activate this driver with CONFIG_SYS_I2C_S3C24X0<BR>&nbsp;&nbsp;&nbsp; - This driver adds i2c buses (11 for Exynos5250, Exynos5420<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 9 i2c buses for Exynos4 and 1 for S3C24X0 SoCs from Samsung)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; with a fix speed from 100000 and the slave addr 0!</P>
<P>&nbsp;&nbsp;- drivers/i2c/ihs_i2c.c<BR>&nbsp;&nbsp;&nbsp; - activate this driver with CONFIG_SYS_I2C_IHS<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_I2C_IHS_CH0 activate hardware channel 0<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_I2C_IHS_SPEED_0 speed channel 0<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_I2C_IHS_SLAVE_0 slave addr channel 0<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_I2C_IHS_CH1 activate hardware channel 1<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_I2C_IHS_SPEED_1 speed channel 1<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_I2C_IHS_SLAVE_1 slave addr channel 1<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_I2C_IHS_CH2 activate hardware channel 2<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_I2C_IHS_SPEED_2 speed channel 2<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_I2C_IHS_SLAVE_2 slave addr channel 2<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_I2C_IHS_CH3 activate hardware channel 3<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_I2C_IHS_SPEED_3 speed channel 3<BR>&nbsp;&nbsp;&nbsp; - CONFIG_SYS_I2C_IHS_SLAVE_3 slave addr channel 3</P>
<P>&nbsp;&nbsp;additional defines:</P>
<P>&nbsp;&nbsp;CONFIG_SYS_NUM_I2C_BUSES<BR>&nbsp;&nbsp;Hold the number of i2c buses you want to use. If you<BR>&nbsp;&nbsp;don't use/have i2c muxes on your i2c bus, this<BR>&nbsp;&nbsp;is equal to CONFIG_SYS_NUM_I2C_ADAPTERS, and you can<BR>&nbsp;&nbsp;omit this define.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_I2C_DIRECT_BUS<BR>&nbsp;&nbsp;define this, if you don't use i2c muxes on your hardware.<BR>&nbsp;&nbsp;if CONFIG_SYS_I2C_MAX_HOPS is not defined or == 0 you can<BR>&nbsp;&nbsp;omit this define.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_I2C_MAX_HOPS<BR>&nbsp;&nbsp;define how many muxes are maximal consecutively connected<BR>&nbsp;&nbsp;on one i2c bus. If you not use i2c muxes, omit this<BR>&nbsp;&nbsp;define.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_I2C_BUSES<BR>&nbsp;&nbsp;hold a list of buses you want to use, only used if<BR>&nbsp;&nbsp;CONFIG_SYS_I2C_DIRECT_BUS is not defined, for example<BR>&nbsp;&nbsp;a board with CONFIG_SYS_I2C_MAX_HOPS = 1 and<BR>&nbsp;&nbsp;CONFIG_SYS_NUM_I2C_BUSES = 9:</P>
<P>&nbsp;&nbsp; CONFIG_SYS_I2C_BUSES&nbsp;{{0, {I2C_NULL_HOP}}, \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{0, {{I2C_MUX_PCA9547, 0x70, 1}}}, \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{0, {{I2C_MUX_PCA9547, 0x70, 2}}}, \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{0, {{I2C_MUX_PCA9547, 0x70, 3}}}, \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{0, {{I2C_MUX_PCA9547, 0x70, 4}}}, \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{0, {{I2C_MUX_PCA9547, 0x70, 5}}}, \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{1, {I2C_NULL_HOP}}, \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{1, {{I2C_MUX_PCA9544, 0x72, 1}}}, \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;{1, {{I2C_MUX_PCA9544, 0x72, 2}}}, \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;}</P>
<P>&nbsp;&nbsp;which defines<BR>&nbsp;&nbsp;&nbsp;bus 0 on adapter 0 without a mux<BR>&nbsp;&nbsp;&nbsp;bus 1 on adapter 0 with a PCA9547 on address 0x70 port 1<BR>&nbsp;&nbsp;&nbsp;bus 2 on adapter 0 with a PCA9547 on address 0x70 port 2<BR>&nbsp;&nbsp;&nbsp;bus 3 on adapter 0 with a PCA9547 on address 0x70 port 3<BR>&nbsp;&nbsp;&nbsp;bus 4 on adapter 0 with a PCA9547 on address 0x70 port 4<BR>&nbsp;&nbsp;&nbsp;bus 5 on adapter 0 with a PCA9547 on address 0x70 port 5<BR>&nbsp;&nbsp;&nbsp;bus 6 on adapter 1 without a mux<BR>&nbsp;&nbsp;&nbsp;bus 7 on adapter 1 with a PCA9544 on address 0x72 port 1<BR>&nbsp;&nbsp;&nbsp;bus 8 on adapter 1 with a PCA9544 on address 0x72 port 2</P>
<P>&nbsp;&nbsp;If you do not have i2c muxes on your board, omit this define.</P>
<P>- Legacy I2C Support:&nbsp;CONFIG_HARD_I2C</P>
<P>&nbsp;&nbsp;NOTE: It is intended to move drivers to CONFIG_SYS_I2C which<BR>&nbsp;&nbsp;provides the following compelling advantages:</P>
<P>&nbsp;&nbsp;- more than one i2c adapter is usable<BR>&nbsp;&nbsp;- approved multibus support<BR>&nbsp;&nbsp;- better i2c mux support</P>
<P>&nbsp;&nbsp;** Please consider updating your I2C driver now. **</P>
<P>&nbsp;&nbsp;These enable legacy I2C serial bus commands. Defining<BR>&nbsp;&nbsp;CONFIG_HARD_I2C will include the appropriate I2C driver<BR>&nbsp;&nbsp;for the selected CPU.</P>
<P>&nbsp;&nbsp;This will allow you to use i2c commands at the u-boot<BR>&nbsp;&nbsp;command line (as long as you set CONFIG_CMD_I2C in<BR>&nbsp;&nbsp;CONFIG_COMMANDS) and communicate with i2c based realtime<BR>&nbsp;&nbsp;clock chips. See common/cmd_i2c.c for a description of the<BR>&nbsp;&nbsp;command line interface.</P>
<P>&nbsp;&nbsp;CONFIG_HARD_I2C selects a hardware I2C controller.</P>
<P>&nbsp;&nbsp;There are several other quantities that must also be<BR>&nbsp;&nbsp;defined when you define CONFIG_HARD_I2C.</P>
<P>&nbsp;&nbsp;In both cases you will need to define CONFIG_SYS_I2C_SPEED<BR>&nbsp;&nbsp;to be the frequency (in Hz) at which you wish your i2c bus<BR>&nbsp;&nbsp;to run and CONFIG_SYS_I2C_SLAVE to be the address of this node (ie<BR>&nbsp;&nbsp;the CPU's i2c node address).</P>
<P>&nbsp;&nbsp;Now, the u-boot i2c code for the mpc8xx<BR>&nbsp;&nbsp;(arch/powerpc/cpu/mpc8xx/i2c.c) sets the CPU up as a master node<BR>&nbsp;&nbsp;and so its address should therefore be cleared to 0 (See,<BR>&nbsp;&nbsp;eg, MPC823e User's Manual p.16-473). So, set<BR>&nbsp;&nbsp;CONFIG_SYS_I2C_SLAVE to 0.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_I2C_INIT_MPC5XXX</P>
<P>&nbsp;&nbsp;When a board is reset during an i2c bus transfer<BR>&nbsp;&nbsp;chips might think that the current transfer is still<BR>&nbsp;&nbsp;in progress.&nbsp; Reset the slave devices by sending start<BR>&nbsp;&nbsp;commands until the slave device responds.</P>
<P>&nbsp;&nbsp;That's all that's required for CONFIG_HARD_I2C.</P>
<P>&nbsp;&nbsp;If you use the software i2c interface (CONFIG_SYS_I2C_SOFT)<BR>&nbsp;&nbsp;then the following macros need to be defined (examples are<BR>&nbsp;&nbsp;from include/configs/lwmon.h):</P>
<P>&nbsp;&nbsp;I2C_INIT</P>
<P>&nbsp;&nbsp;(Optional). Any commands necessary to enable the I2C<BR>&nbsp;&nbsp;controller or configure ports.</P>
<P>&nbsp;&nbsp;eg: #define I2C_INIT (immr-&gt;im_cpm.cp_pbdir |=&nbsp;PB_SCL)</P>
<P>&nbsp;&nbsp;I2C_PORT</P>
<P>&nbsp;&nbsp;(Only for MPC8260 CPU). The I/O port to use (the code<BR>&nbsp;&nbsp;assumes both bits are on the same port). Valid values<BR>&nbsp;&nbsp;are 0..3 for ports A..D.</P>
<P>&nbsp;&nbsp;I2C_ACTIVE</P>
<P>&nbsp;&nbsp;The code necessary to make the I2C data line active<BR>&nbsp;&nbsp;(driven).&nbsp; If the data line is open collector, this<BR>&nbsp;&nbsp;define can be null.</P>
<P>&nbsp;&nbsp;eg: #define I2C_ACTIVE (immr-&gt;im_cpm.cp_pbdir |=&nbsp; PB_SDA)</P>
<P>&nbsp;&nbsp;I2C_TRISTATE</P>
<P>&nbsp;&nbsp;The code necessary to make the I2C data line tri-stated<BR>&nbsp;&nbsp;(inactive).&nbsp; If the data line is open collector, this<BR>&nbsp;&nbsp;define can be null.</P>
<P>&nbsp;&nbsp;eg: #define I2C_TRISTATE (immr-&gt;im_cpm.cp_pbdir &amp;= ~PB_SDA)</P>
<P>&nbsp;&nbsp;I2C_READ</P>
<P>&nbsp;&nbsp;Code that returns true if the I2C data line is high,<BR>&nbsp;&nbsp;false if it is low.</P>
<P>&nbsp;&nbsp;eg: #define I2C_READ ((immr-&gt;im_cpm.cp_pbdat &amp; PB_SDA) != 0)</P>
<P>&nbsp;&nbsp;I2C_SDA(bit)</P>
<P>&nbsp;&nbsp;If &lt;bit&gt; is true, sets the I2C data line high. If it<BR>&nbsp;&nbsp;is false, it clears it (low).</P>
<P>&nbsp;&nbsp;eg: #define I2C_SDA(bit) \<BR>&nbsp;&nbsp;&nbsp;if(bit) immr-&gt;im_cpm.cp_pbdat |=&nbsp; PB_SDA; \<BR>&nbsp;&nbsp;&nbsp;else&nbsp;immr-&gt;im_cpm.cp_pbdat &amp;= ~PB_SDA</P>
<P>&nbsp;&nbsp;I2C_SCL(bit)</P>
<P>&nbsp;&nbsp;If &lt;bit&gt; is true, sets the I2C clock line high. If it<BR>&nbsp;&nbsp;is false, it clears it (low).</P>
<P>&nbsp;&nbsp;eg: #define I2C_SCL(bit) \<BR>&nbsp;&nbsp;&nbsp;if(bit) immr-&gt;im_cpm.cp_pbdat |=&nbsp; PB_SCL; \<BR>&nbsp;&nbsp;&nbsp;else&nbsp;immr-&gt;im_cpm.cp_pbdat &amp;= ~PB_SCL</P>
<P>&nbsp;&nbsp;I2C_DELAY</P>
<P>&nbsp;&nbsp;This delay is invoked four times per clock cycle so this<BR>&nbsp;&nbsp;controls the rate of data transfer.&nbsp; The data rate thus<BR>&nbsp;&nbsp;is 1 / (I2C_DELAY * 4). Often defined to be something<BR>&nbsp;&nbsp;like:</P>
<P>&nbsp;&nbsp;#define I2C_DELAY&nbsp; udelay(2)</P>
<P>&nbsp;&nbsp;CONFIG_SOFT_I2C_GPIO_SCL / CONFIG_SOFT_I2C_GPIO_SDA</P>
<P>&nbsp;&nbsp;If your arch supports the generic GPIO framework (asm/gpio.h),<BR>&nbsp;&nbsp;then you may alternatively define the two GPIOs that are to be<BR>&nbsp;&nbsp;used as SCL / SDA.&nbsp; Any of the previous I2C_xxx macros will<BR>&nbsp;&nbsp;have GPIO-based defaults assigned to them as appropriate.</P>
<P>&nbsp;&nbsp;You should define these to the GPIO value as given directly to<BR>&nbsp;&nbsp;the generic GPIO functions.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_I2C_INIT_BOARD</P>
<P>&nbsp;&nbsp;When a board is reset during an i2c bus transfer<BR>&nbsp;&nbsp;chips might think that the current transfer is still<BR>&nbsp;&nbsp;in progress. On some boards it is possible to access<BR>&nbsp;&nbsp;the i2c SCLK line directly, either by using the<BR>&nbsp;&nbsp;processor pin as a GPIO or by having a second pin<BR>&nbsp;&nbsp;connected to the bus. If this option is defined a<BR>&nbsp;&nbsp;custom i2c_init_board() routine in boards/xxx/board.c<BR>&nbsp;&nbsp;is run early in the boot sequence.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_I2C_BOARD_LATE_INIT</P>
<P>&nbsp;&nbsp;An alternative to CONFIG_SYS_I2C_INIT_BOARD. If this option is<BR>&nbsp;&nbsp;defined a custom i2c_board_late_init() routine in<BR>&nbsp;&nbsp;boards/xxx/board.c is run AFTER the operations in i2c_init()<BR>&nbsp;&nbsp;is completed. This callpoint can be used to unreset i2c bus<BR>&nbsp;&nbsp;using CPU i2c controller register accesses for CPUs whose i2c<BR>&nbsp;&nbsp;controller provide such a method. It is called at the end of<BR>&nbsp;&nbsp;i2c_init() to allow i2c_init operations to setup the i2c bus<BR>&nbsp;&nbsp;controller on the CPU (e.g. setting bus speed &amp; slave address).</P>
<P>&nbsp;&nbsp;CONFIG_I2CFAST (PPC405GP|PPC405EP only)</P>
<P>&nbsp;&nbsp;This option enables configuration of bi_iic_fast[] flags<BR>&nbsp;&nbsp;in u-boot bd_info structure based on u-boot environment<BR>&nbsp;&nbsp;variable "i2cfast". (see also i2cfast)</P>
<P>&nbsp;&nbsp;CONFIG_I2C_MULTI_BUS</P>
<P>&nbsp;&nbsp;This option allows the use of multiple I2C buses, each of which<BR>&nbsp;&nbsp;must have a controller.&nbsp; At any point in time, only one bus is<BR>&nbsp;&nbsp;active.&nbsp; To switch to a different bus, use the 'i2c dev' command.<BR>&nbsp;&nbsp;Note that bus numbering is zero-based.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_I2C_NOPROBES</P>
<P>&nbsp;&nbsp;This option specifies a list of I2C devices that will be skipped<BR>&nbsp;&nbsp;when the 'i2c probe' command is issued.&nbsp; If CONFIG_I2C_MULTI_BUS<BR>&nbsp;&nbsp;is set, specify a list of bus-device pairs.&nbsp; Otherwise, specify<BR>&nbsp;&nbsp;a 1D array of device addresses</P>
<P>&nbsp;&nbsp;e.g.<BR>&nbsp;&nbsp;&nbsp;#undef&nbsp;CONFIG_I2C_MULTI_BUS<BR>&nbsp;&nbsp;&nbsp;#define CONFIG_SYS_I2C_NOPROBES {0x50,0x68}</P>
<P>&nbsp;&nbsp;will skip addresses 0x50 and 0x68 on a board with one I2C bus</P>
<P>&nbsp;&nbsp;&nbsp;#define CONFIG_I2C_MULTI_BUS<BR>&nbsp;&nbsp;&nbsp;#define CONFIG_SYS_I2C_MULTI_NOPROBES&nbsp;{{0,0x50},{0,0x68},{1,0x54}}</P>
<P>&nbsp;&nbsp;will skip addresses 0x50 and 0x68 on bus 0 and address 0x54 on bus 1</P>
<P>&nbsp;&nbsp;CONFIG_SYS_SPD_BUS_NUM</P>
<P>&nbsp;&nbsp;If defined, then this indicates the I2C bus number for DDR SPD.<BR>&nbsp;&nbsp;If not defined, then U-Boot assumes that SPD is on I2C bus 0.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_RTC_BUS_NUM</P>
<P>&nbsp;&nbsp;If defined, then this indicates the I2C bus number for the RTC.<BR>&nbsp;&nbsp;If not defined, then U-Boot assumes that RTC is on I2C bus 0.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_DTT_BUS_NUM</P>
<P>&nbsp;&nbsp;If defined, then this indicates the I2C bus number for the DTT.<BR>&nbsp;&nbsp;If not defined, then U-Boot assumes that DTT is on I2C bus 0.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_I2C_DTT_ADDR:</P>
<P>&nbsp;&nbsp;If defined, specifies the I2C address of the DTT device.<BR>&nbsp;&nbsp;If not defined, then U-Boot uses predefined value for<BR>&nbsp;&nbsp;specified DTT device.</P>
<P>&nbsp;&nbsp;CONFIG_SOFT_I2C_READ_REPEATED_START</P>
<P>&nbsp;&nbsp;defining this will force the i2c_read() function in<BR>&nbsp;&nbsp;the soft_i2c driver to perform an I2C repeated start<BR>&nbsp;&nbsp;between writing the address pointer and reading the<BR>&nbsp;&nbsp;data.&nbsp; If this define is omitted the default behaviour<BR>&nbsp;&nbsp;of doing a stop-start sequence will be used.&nbsp; Most I2C<BR>&nbsp;&nbsp;devices can use either method, but some require one or<BR>&nbsp;&nbsp;the other.</P>
<P>- SPI Support:&nbsp;CONFIG_SPI</P>
<P>&nbsp;&nbsp;Enables SPI driver (so far only tested with<BR>&nbsp;&nbsp;SPI EEPROM, also an instance works with Crystal A/D and<BR>&nbsp;&nbsp;D/As on the SACSng board)</P>
<P>&nbsp;&nbsp;CONFIG_SH_SPI</P>
<P>&nbsp;&nbsp;Enables the driver for SPI controller on SuperH. Currently<BR>&nbsp;&nbsp;only SH7757 is supported.</P>
<P>&nbsp;&nbsp;CONFIG_SPI_X</P>
<P>&nbsp;&nbsp;Enables extended (16-bit) SPI EEPROM addressing.<BR>&nbsp;&nbsp;(symmetrical to CONFIG_I2C_X)</P>
<P>&nbsp;&nbsp;CONFIG_SOFT_SPI</P>
<P>&nbsp;&nbsp;Enables a software (bit-bang) SPI driver rather than<BR>&nbsp;&nbsp;using hardware support. This is a general purpose<BR>&nbsp;&nbsp;driver that only requires three general I/O port pins<BR>&nbsp;&nbsp;(two outputs, one input) to function. If this is<BR>&nbsp;&nbsp;defined, the board configuration must define several<BR>&nbsp;&nbsp;SPI configuration items (port pins to use, etc). For<BR>&nbsp;&nbsp;an example, see include/configs/sacsng.h.</P>
<P>&nbsp;&nbsp;CONFIG_HARD_SPI</P>
<P>&nbsp;&nbsp;Enables a hardware SPI driver for general-purpose reads<BR>&nbsp;&nbsp;and writes.&nbsp; As with CONFIG_SOFT_SPI, the board configuration<BR>&nbsp;&nbsp;must define a list of chip-select function pointers.<BR>&nbsp;&nbsp;Currently supported on some MPC8xxx processors.&nbsp; For an<BR>&nbsp;&nbsp;example, see include/configs/mpc8349emds.h.</P>
<P>&nbsp;&nbsp;CONFIG_MXC_SPI</P>
<P>&nbsp;&nbsp;Enables the driver for the SPI controllers on i.MX and MXC<BR>&nbsp;&nbsp;SoCs. Currently i.MX31/35/51 are supported.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_SPI_MXC_WAIT<BR>&nbsp;&nbsp;Timeout for waiting until spi transfer completed.<BR>&nbsp;&nbsp;default: (CONFIG_SYS_HZ/100)&nbsp;&nbsp;&nbsp;&nbsp; /* 10 ms */</P>
<P>- FPGA Support: CONFIG_FPGA</P>
<P>&nbsp;&nbsp;Enables FPGA subsystem.</P>
<P>&nbsp;&nbsp;CONFIG_FPGA_&lt;vendor&gt;</P>
<P>&nbsp;&nbsp;Enables support for specific chip vendors.<BR>&nbsp;&nbsp;(ALTERA, XILINX)</P>
<P>&nbsp;&nbsp;CONFIG_FPGA_&lt;family&gt;</P>
<P>&nbsp;&nbsp;Enables support for FPGA family.<BR>&nbsp;&nbsp;(SPARTAN2, SPARTAN3, VIRTEX2, CYCLONE2, ACEX1K, ACEX)</P>
<P>&nbsp;&nbsp;CONFIG_FPGA_COUNT</P>
<P>&nbsp;&nbsp;Specify the number of FPGA devices to support.</P>
<P>&nbsp;&nbsp;CONFIG_CMD_FPGA_LOADMK</P>
<P>&nbsp;&nbsp;Enable support for fpga loadmk command</P>
<P>&nbsp;&nbsp;CONFIG_CMD_FPGA_LOADP</P>
<P>&nbsp;&nbsp;Enable support for fpga loadp command - load partial bitstream</P>
<P>&nbsp;&nbsp;CONFIG_CMD_FPGA_LOADBP</P>
<P>&nbsp;&nbsp;Enable support for fpga loadbp command - load partial bitstream<BR>&nbsp;&nbsp;(Xilinx only)</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FPGA_PROG_FEEDBACK</P>
<P>&nbsp;&nbsp;Enable printing of hash marks during FPGA configuration.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FPGA_CHECK_BUSY</P>
<P>&nbsp;&nbsp;Enable checks on FPGA configuration interface busy<BR>&nbsp;&nbsp;status by the configuration function. This option<BR>&nbsp;&nbsp;will require a board or device specific function to<BR>&nbsp;&nbsp;be written.</P>
<P>&nbsp;&nbsp;CONFIG_FPGA_DELAY</P>
<P>&nbsp;&nbsp;If defined, a function that provides delays in the FPGA<BR>&nbsp;&nbsp;configuration driver.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FPGA_CHECK_CTRLC<BR>&nbsp;&nbsp;Allow Control-C to interrupt FPGA configuration</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FPGA_CHECK_ERROR</P>
<P>&nbsp;&nbsp;Check for configuration errors during FPGA bitfile<BR>&nbsp;&nbsp;loading. For example, abort during Virtex II<BR>&nbsp;&nbsp;configuration if the INIT_B line goes low (which<BR>&nbsp;&nbsp;indicated a CRC error).</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FPGA_WAIT_INIT</P>
<P>&nbsp;&nbsp;Maximum time to wait for the INIT_B line to de-assert<BR>&nbsp;&nbsp;after PROB_B has been de-asserted during a Virtex II<BR>&nbsp;&nbsp;FPGA configuration sequence. The default time is 500<BR>&nbsp;&nbsp;ms.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FPGA_WAIT_BUSY</P>
<P>&nbsp;&nbsp;Maximum time to wait for BUSY to de-assert during<BR>&nbsp;&nbsp;Virtex II FPGA configuration. The default is 5 ms.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_FPGA_WAIT_CONFIG</P>
<P>&nbsp;&nbsp;Time to wait after FPGA configuration. The default is<BR>&nbsp;&nbsp;200 ms.</P>
<P>- Configuration Management:<BR>&nbsp;&nbsp;CONFIG_BUILD_TARGET</P>
<P>&nbsp;&nbsp;Some SoCs need special image types (e.g. U-Boot binary<BR>&nbsp;&nbsp;with a special header) as build targets. By defining<BR>&nbsp;&nbsp;CONFIG_BUILD_TARGET in the SoC / board header, this<BR>&nbsp;&nbsp;special image will be automatically built upon calling<BR>&nbsp;&nbsp;make / MAKEALL.</P>
<P>&nbsp;&nbsp;CONFIG_IDENT_STRING</P>
<P>&nbsp;&nbsp;If defined, this string will be added to the U-Boot<BR>&nbsp;&nbsp;version information (U_BOOT_VERSION)</P>
<P>- Vendor Parameter Protection:</P>
<P>&nbsp;&nbsp;U-Boot considers the values of the environment<BR>&nbsp;&nbsp;variables "serial#" (Board Serial Number) and<BR>&nbsp;&nbsp;"ethaddr" (Ethernet Address) to be parameters that<BR>&nbsp;&nbsp;are set once by the board vendor / manufacturer, and<BR>&nbsp;&nbsp;protects these variables from casual modification by<BR>&nbsp;&nbsp;the user. Once set, these variables are read-only,<BR>&nbsp;&nbsp;and write or delete attempts are rejected. You can<BR>&nbsp;&nbsp;change this behaviour:</P>
<P>&nbsp;&nbsp;If CONFIG_ENV_OVERWRITE is #defined in your config<BR>&nbsp;&nbsp;file, the write protection for vendor parameters is<BR>&nbsp;&nbsp;completely disabled. Anybody can change or delete<BR>&nbsp;&nbsp;these parameters.</P>
<P>&nbsp;&nbsp;Alternatively, if you #define _both_ CONFIG_ETHADDR<BR>&nbsp;&nbsp;_and_ CONFIG_OVERWRITE_ETHADDR_ONCE, a default<BR>&nbsp;&nbsp;Ethernet address is installed in the environment,<BR>&nbsp;&nbsp;which can be changed exactly ONCE by the user. [The<BR>&nbsp;&nbsp;serial# is unaffected by this, i. e. it remains<BR>&nbsp;&nbsp;read-only.]</P>
<P>&nbsp;&nbsp;The same can be accomplished in a more flexible way<BR>&nbsp;&nbsp;for any variable by configuring the type of access<BR>&nbsp;&nbsp;to allow for those variables in the ".flags" variable<BR>&nbsp;&nbsp;or define CONFIG_ENV_FLAGS_LIST_STATIC.</P>
<P>- Protected RAM:<BR>&nbsp;&nbsp;CONFIG_PRAM</P>
<P>&nbsp;&nbsp;Define this variable to enable the reservation of<BR>&nbsp;&nbsp;"protected RAM", i. e. RAM which is not overwritten<BR>&nbsp;&nbsp;by U-Boot. Define CONFIG_PRAM to hold the number of<BR>&nbsp;&nbsp;kB you want to reserve for pRAM. You can overwrite<BR>&nbsp;&nbsp;this default value by defining an environment<BR>&nbsp;&nbsp;variable "pram" to the number of kB you want to<BR>&nbsp;&nbsp;reserve. Note that the board info structure will<BR>&nbsp;&nbsp;still show the full amount of RAM. If pRAM is<BR>&nbsp;&nbsp;reserved, a new environment variable "mem" will<BR>&nbsp;&nbsp;automatically be defined to hold the amount of<BR>&nbsp;&nbsp;remaining RAM in a form that can be passed as boot<BR>&nbsp;&nbsp;argument to Linux, for instance like that:</P>
<P>&nbsp;&nbsp;&nbsp;setenv bootargs ... mem=\${mem}<BR>&nbsp;&nbsp;&nbsp;saveenv</P>
<P>&nbsp;&nbsp;This way you can tell Linux not to use this memory,<BR>&nbsp;&nbsp;either, which results in a memory region that will<BR>&nbsp;&nbsp;not be affected by reboots.</P>
<P>&nbsp;&nbsp;*WARNING* If your board configuration uses automatic<BR>&nbsp;&nbsp;detection of the RAM size, you must make sure that<BR>&nbsp;&nbsp;this memory test is non-destructive. So far, the<BR>&nbsp;&nbsp;following board configurations are known to be<BR>&nbsp;&nbsp;"pRAM-clean":</P>
<P>&nbsp;&nbsp;&nbsp;IVMS8, IVML24, SPD8xx, TQM8xxL,<BR>&nbsp;&nbsp;&nbsp;HERMES, IP860, RPXlite, LWMON,<BR>&nbsp;&nbsp;&nbsp;FLAGADM, TQM8260</P>
<P>- Access to physical memory region (&gt; 4GB)<BR>&nbsp;&nbsp;Some basic support is provided for operations on memory not<BR>&nbsp;&nbsp;normally accessible to U-Boot - e.g. some architectures<BR>&nbsp;&nbsp;support access to more than 4GB of memory on 32-bit<BR>&nbsp;&nbsp;machines using physical address extension or similar.<BR>&nbsp;&nbsp;Define CONFIG_PHYSMEM to access this basic support, which<BR>&nbsp;&nbsp;currently only supports clearing the memory.</P>
<P>- Error Recovery:<BR>&nbsp;&nbsp;CONFIG_PANIC_HANG</P>
<P>&nbsp;&nbsp;Define this variable to stop the system in case of a<BR>&nbsp;&nbsp;fatal error, so that you have to reset it manually.<BR>&nbsp;&nbsp;This is probably NOT a good idea for an embedded<BR>&nbsp;&nbsp;system where you want the system to reboot<BR>&nbsp;&nbsp;automatically as fast as possible, but it may be<BR>&nbsp;&nbsp;useful during development since you can try to debug<BR>&nbsp;&nbsp;the conditions that lead to the situation.</P>
<P>&nbsp;&nbsp;CONFIG_NET_RETRY_COUNT</P>
<P>&nbsp;&nbsp;This variable defines the number of retries for<BR>&nbsp;&nbsp;network operations like ARP, RARP, TFTP, or BOOTP<BR>&nbsp;&nbsp;before giving up the operation. If not defined, a<BR>&nbsp;&nbsp;default value of 5 is used.</P>
<P>&nbsp;&nbsp;CONFIG_ARP_TIMEOUT</P>
<P>&nbsp;&nbsp;Timeout waiting for an ARP reply in milliseconds.</P>
<P>&nbsp;&nbsp;CONFIG_NFS_TIMEOUT</P>
<P>&nbsp;&nbsp;Timeout in milliseconds used in NFS protocol.<BR>&nbsp;&nbsp;If you encounter "ERROR: Cannot umount" in nfs command,<BR>&nbsp;&nbsp;try longer timeout such as<BR>&nbsp;&nbsp;#define CONFIG_NFS_TIMEOUT 10000UL</P>
<P>- Command Interpreter:<BR>&nbsp;&nbsp;CONFIG_AUTO_COMPLETE</P>
<P>&nbsp;&nbsp;Enable auto completion of commands using TAB.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_PROMPT_HUSH_PS2</P>
<P>&nbsp;&nbsp;This defines the secondary prompt string, which is<BR>&nbsp;&nbsp;printed when the command interpreter needs more input<BR>&nbsp;&nbsp;to complete a command. Usually "&gt; ".</P>
<P>&nbsp;Note:</P>
<P>&nbsp;&nbsp;In the current implementation, the local variables<BR>&nbsp;&nbsp;space and global environment variables space are<BR>&nbsp;&nbsp;separated. Local variables are those you define by<BR>&nbsp;&nbsp;simply typing `name=value'. To access a local<BR>&nbsp;&nbsp;variable later on, you have write `$name' or<BR>&nbsp;&nbsp;`${name}'; to execute the contents of a variable<BR>&nbsp;&nbsp;directly type `$name' at the command prompt.</P>
<P>&nbsp;&nbsp;Global environment variables are those you use<BR>&nbsp;&nbsp;setenv/printenv to work with. To run a command stored<BR>&nbsp;&nbsp;in such a variable, you need to use the run command,<BR>&nbsp;&nbsp;and you must not use the '$' sign to access them.</P>
<P>&nbsp;&nbsp;To store commands and special characters in a<BR>&nbsp;&nbsp;variable, please use double quotation marks<BR>&nbsp;&nbsp;surrounding the whole text of the variable, instead<BR>&nbsp;&nbsp;of the backslashes before semicolons and special<BR>&nbsp;&nbsp;symbols.</P>
<P>- Command Line Editing and History:<BR>&nbsp;&nbsp;CONFIG_CMDLINE_EDITING</P>
<P>&nbsp;&nbsp;Enable editing and History functions for interactive<BR>&nbsp;&nbsp;command line input operations</P>
<P>- Default Environment:<BR>&nbsp;&nbsp;CONFIG_EXTRA_ENV_SETTINGS</P>
<P>&nbsp;&nbsp;Define this to contain any number of null terminated<BR>&nbsp;&nbsp;strings (variable = value pairs) that will be part of<BR>&nbsp;&nbsp;the default environment compiled into the boot image.</P>
<P>&nbsp;&nbsp;For example, place something like this in your<BR>&nbsp;&nbsp;board's config file:</P>
<P>&nbsp;&nbsp;#define CONFIG_EXTRA_ENV_SETTINGS \<BR>&nbsp;&nbsp;&nbsp;"myvar1=value1\0" \<BR>&nbsp;&nbsp;&nbsp;"myvar2=value2\0"</P>
<P>&nbsp;&nbsp;Warning: This method is based on knowledge about the<BR>&nbsp;&nbsp;internal format how the environment is stored by the<BR>&nbsp;&nbsp;U-Boot code. This is NOT an official, exported<BR>&nbsp;&nbsp;interface! Although it is unlikely that this format<BR>&nbsp;&nbsp;will change soon, there is no guarantee either.<BR>&nbsp;&nbsp;You better know what you are doing here.</P>
<P>&nbsp;&nbsp;Note: overly (ab)use of the default environment is<BR>&nbsp;&nbsp;discouraged. Make sure to check other ways to preset<BR>&nbsp;&nbsp;the environment like the "source" command or the<BR>&nbsp;&nbsp;boot command first.</P>
<P>&nbsp;&nbsp;CONFIG_ENV_VARS_UBOOT_CONFIG</P>
<P>&nbsp;&nbsp;Define this in order to add variables describing the<BR>&nbsp;&nbsp;U-Boot build configuration to the default environment.<BR>&nbsp;&nbsp;These will be named arch, cpu, board, vendor, and soc.</P>
<P>&nbsp;&nbsp;Enabling this option will cause the following to be defined:</P>
<P>&nbsp;&nbsp;- CONFIG_SYS_ARCH<BR>&nbsp;&nbsp;- CONFIG_SYS_CPU<BR>&nbsp;&nbsp;- CONFIG_SYS_BOARD<BR>&nbsp;&nbsp;- CONFIG_SYS_VENDOR<BR>&nbsp;&nbsp;- CONFIG_SYS_SOC</P>
<P>&nbsp;&nbsp;CONFIG_ENV_VARS_UBOOT_RUNTIME_CONFIG</P>
<P>&nbsp;&nbsp;Define this in order to add variables describing certain<BR>&nbsp;&nbsp;run-time determined information about the hardware to the<BR>&nbsp;&nbsp;environment.&nbsp; These will be named board_name, board_rev.</P>
<P>&nbsp;&nbsp;CONFIG_DELAY_ENVIRONMENT</P>
<P>&nbsp;&nbsp;Normally the environment is loaded when the board is<BR>&nbsp;&nbsp;initialised so that it is available to U-Boot. This inhibits<BR>&nbsp;&nbsp;that so that the environment is not available until<BR>&nbsp;&nbsp;explicitly loaded later by U-Boot code. With CONFIG_OF_CONTROL<BR>&nbsp;&nbsp;this is instead controlled by the value of<BR>&nbsp;&nbsp;/config/load-environment.</P>
<P>- DataFlash Support:<BR>&nbsp;&nbsp;CONFIG_HAS_DATAFLASH</P>
<P>&nbsp;&nbsp;Defining this option enables DataFlash features and<BR>&nbsp;&nbsp;allows to read/write in Dataflash via the standard<BR>&nbsp;&nbsp;commands cp, md...</P>
<P>- Serial Flash support<BR>&nbsp;&nbsp;CONFIG_CMD_SF</P>
<P>&nbsp;&nbsp;Defining this option enables SPI flash commands<BR>&nbsp;&nbsp;'sf probe/read/write/erase/update'.</P>
<P>&nbsp;&nbsp;Usage requires an initial 'probe' to define the serial<BR>&nbsp;&nbsp;flash parameters, followed by read/write/erase/update<BR>&nbsp;&nbsp;commands.</P>
<P>&nbsp;&nbsp;The following defaults may be provided by the platform<BR>&nbsp;&nbsp;to handle the common case when only a single serial<BR>&nbsp;&nbsp;flash is present on the system.</P>
<P>&nbsp;&nbsp;CONFIG_SF_DEFAULT_BUS&nbsp;&nbsp;Bus identifier<BR>&nbsp;&nbsp;CONFIG_SF_DEFAULT_CS&nbsp;&nbsp;Chip-select<BR>&nbsp;&nbsp;CONFIG_SF_DEFAULT_MODE &nbsp;&nbsp;(see include/spi.h)<BR>&nbsp;&nbsp;CONFIG_SF_DEFAULT_SPEED&nbsp;&nbsp;in Hz</P>
<P>&nbsp;&nbsp;CONFIG_CMD_SF_TEST</P>
<P>&nbsp;&nbsp;Define this option to include a destructive SPI flash<BR>&nbsp;&nbsp;test ('sf test').</P>
<P>&nbsp;&nbsp;CONFIG_SPI_FLASH_BAR&nbsp;&nbsp;Ban/Extended Addr Reg</P>
<P>&nbsp;&nbsp;Define this option to use the Bank addr/Extended addr<BR>&nbsp;&nbsp;support on SPI flashes which has size &gt; 16Mbytes.</P>
<P>&nbsp;&nbsp;CONFIG_SF_DUAL_FLASH&nbsp;&nbsp;Dual flash memories</P>
<P>&nbsp;&nbsp;Define this option to use dual flash support where two flash<BR>&nbsp;&nbsp;memories can be connected with a given cs line.<BR>&nbsp;&nbsp;Currently Xilinx Zynq qspi supports these type of connections.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_SPI_ST_ENABLE_WP_PIN<BR>&nbsp;&nbsp;enable the W#/Vpp signal to disable writing to the status<BR>&nbsp;&nbsp;register on ST MICRON flashes like the N25Q128.<BR>&nbsp;&nbsp;The status register write enable/disable bit, combined with<BR>&nbsp;&nbsp;the W#/VPP signal provides hardware data protection for the<BR>&nbsp;&nbsp;device as follows: When the enable/disable bit is set to 1,<BR>&nbsp;&nbsp;and the W#/VPP signal is driven LOW, the status register<BR>&nbsp;&nbsp;nonvolatile bits become read-only and the WRITE STATUS REGISTER<BR>&nbsp;&nbsp;operation will not execute. The only way to exit this<BR>&nbsp;&nbsp;hardware-protected mode is to drive W#/VPP HIGH.</P>
<P>- SystemACE Support:<BR>&nbsp;&nbsp;CONFIG_SYSTEMACE</P>
<P>&nbsp;&nbsp;Adding this option adds support for Xilinx SystemACE<BR>&nbsp;&nbsp;chips attached via some sort of local bus. The address<BR>&nbsp;&nbsp;of the chip must also be defined in the<BR>&nbsp;&nbsp;CONFIG_SYS_SYSTEMACE_BASE macro. For example:</P>
<P>&nbsp;&nbsp;#define CONFIG_SYSTEMACE<BR>&nbsp;&nbsp;#define CONFIG_SYS_SYSTEMACE_BASE 0xf0000000</P>
<P>&nbsp;&nbsp;When SystemACE support is added, the "ace" device type<BR>&nbsp;&nbsp;becomes available to the fat commands, i.e. fatls.</P>
<P>- TFTP Fixed UDP Port:<BR>&nbsp;&nbsp;CONFIG_TFTP_PORT</P>
<P>&nbsp;&nbsp;If this is defined, the environment variable tftpsrcp<BR>&nbsp;&nbsp;is used to supply the TFTP UDP source port value.<BR>&nbsp;&nbsp;If tftpsrcp isn't defined, the normal pseudo-random port<BR>&nbsp;&nbsp;number generator is used.</P>
<P>&nbsp;&nbsp;Also, the environment variable tftpdstp is used to supply<BR>&nbsp;&nbsp;the TFTP UDP destination port value.&nbsp; If tftpdstp isn't<BR>&nbsp;&nbsp;defined, the normal port 69 is used.</P>
<P>&nbsp;&nbsp;The purpose for tftpsrcp is to allow a TFTP server to<BR>&nbsp;&nbsp;blindly start the TFTP transfer using the pre-configured<BR>&nbsp;&nbsp;target IP address and UDP port. This has the effect of<BR>&nbsp;&nbsp;"punching through" the (Windows XP) firewall, allowing<BR>&nbsp;&nbsp;the remainder of the TFTP transfer to proceed normally.<BR>&nbsp;&nbsp;A better solution is to properly configure the firewall,<BR>&nbsp;&nbsp;but sometimes that is not allowed.</P>
<P>- Hashing support:<BR>&nbsp;&nbsp;CONFIG_CMD_HASH</P>
<P>&nbsp;&nbsp;This enables a generic 'hash' command which can produce<BR>&nbsp;&nbsp;hashes / digests from a few algorithms (e.g. SHA1, SHA256).</P>
<P>&nbsp;&nbsp;CONFIG_HASH_VERIFY</P>
<P>&nbsp;&nbsp;Enable the hash verify command (hash -v). This adds to code<BR>&nbsp;&nbsp;size a little.</P>
<P>&nbsp;&nbsp;CONFIG_SHA1 - This option enables support of hashing using SHA1<BR>&nbsp;&nbsp;algorithm. The hash is calculated in software.<BR>&nbsp;&nbsp;CONFIG_SHA256 - This option enables support of hashing using<BR>&nbsp;&nbsp;SHA256 algorithm. The hash is calculated in software.<BR>&nbsp;&nbsp;CONFIG_SHA_HW_ACCEL - This option enables hardware acceleration<BR>&nbsp;&nbsp;for SHA1/SHA256 hashing.<BR>&nbsp;&nbsp;This affects the 'hash' command and also the<BR>&nbsp;&nbsp;hash_lookup_algo() function.<BR>&nbsp;&nbsp;CONFIG_SHA_PROG_HW_ACCEL - This option enables<BR>&nbsp;&nbsp;hardware-acceleration for SHA1/SHA256 progressive hashing.<BR>&nbsp;&nbsp;Data can be streamed in a block at a time and the hashing<BR>&nbsp;&nbsp;is performed in hardware.</P>
<P>&nbsp;&nbsp;Note: There is also a sha1sum command, which should perhaps<BR>&nbsp;&nbsp;be deprecated in favour of 'hash sha1'.</P>
<P>- Freescale i.MX specific commands:<BR>&nbsp;&nbsp;CONFIG_CMD_HDMIDETECT<BR>&nbsp;&nbsp;This enables 'hdmidet' command which returns true if an<BR>&nbsp;&nbsp;HDMI monitor is detected.&nbsp; This command is i.MX 6 specific.</P>
<P>&nbsp;&nbsp;CONFIG_CMD_BMODE<BR>&nbsp;&nbsp;This enables the 'bmode' (bootmode) command for forcing<BR>&nbsp;&nbsp;a boot from specific media.</P>
<P>&nbsp;&nbsp;This is useful for forcing the ROM's usb downloader to<BR>&nbsp;&nbsp;activate upon a watchdog reset which is nice when iterating<BR>&nbsp;&nbsp;on U-Boot.&nbsp; Using the reset button or running bmode normal<BR>&nbsp;&nbsp;will set it back to normal.&nbsp; This command currently<BR>&nbsp;&nbsp;supports i.MX53 and i.MX6.</P>
<P>- Signing support:<BR>&nbsp;&nbsp;CONFIG_RSA</P>
<P>&nbsp;&nbsp;This enables the RSA algorithm used for FIT image verification<BR>&nbsp;&nbsp;in U-Boot. See doc/uImage.FIT/signature.txt for more information.</P>
<P>&nbsp;&nbsp;The Modular Exponentiation algorithm in RSA is implemented using<BR>&nbsp;&nbsp;driver model. So CONFIG_DM needs to be enabled by default for this<BR>&nbsp;&nbsp;library to function.</P>
<P>&nbsp;&nbsp;The signing part is build into mkimage regardless of this<BR>&nbsp;&nbsp;option. The software based modular exponentiation is built into<BR>&nbsp;&nbsp;mkimage irrespective of this option.</P>
<P>- bootcount support:<BR>&nbsp;&nbsp;CONFIG_BOOTCOUNT_LIMIT</P>
<P>&nbsp;&nbsp;This enables the bootcounter support, see:<BR>&nbsp;&nbsp;<A href="http://www.denx.de/wiki/DULG/UBootBootCountLimit">http://www.denx.de/wiki/DULG/UBootBootCountLimit</A></P>
<P>&nbsp;&nbsp;CONFIG_AT91SAM9XE<BR>&nbsp;&nbsp;enable special bootcounter support on at91sam9xe based boards.<BR>&nbsp;&nbsp;CONFIG_BLACKFIN<BR>&nbsp;&nbsp;enable special bootcounter support on blackfin based boards.<BR>&nbsp;&nbsp;CONFIG_SOC_DA8XX<BR>&nbsp;&nbsp;enable special bootcounter support on da850 based boards.<BR>&nbsp;&nbsp;CONFIG_BOOTCOUNT_RAM<BR>&nbsp;&nbsp;enable support for the bootcounter in RAM<BR>&nbsp;&nbsp;CONFIG_BOOTCOUNT_I2C<BR>&nbsp;&nbsp;enable support for the bootcounter on an i2c (like RTC) device.<BR>&nbsp;&nbsp;&nbsp;CONFIG_SYS_I2C_RTC_ADDR = i2c chip address<BR>&nbsp;&nbsp;&nbsp;CONFIG_SYS_BOOTCOUNT_ADDR = i2c addr which is used for<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; the bootcounter.<BR>&nbsp;&nbsp;&nbsp;CONFIG_BOOTCOUNT_ALEN = address len</P>
<P>- Show boot progress:<BR>&nbsp;&nbsp;CONFIG_SHOW_BOOT_PROGRESS</P>
<P>&nbsp;&nbsp;Defining this option allows to add some board-<BR>&nbsp;&nbsp;specific code (calling a user-provided function<BR>&nbsp;&nbsp;"show_boot_progress(int)") that enables you to show<BR>&nbsp;&nbsp;the system's boot progress on some display (for<BR>&nbsp;&nbsp;example, some LED's) on your board. At the moment,<BR>&nbsp;&nbsp;the following checkpoints are implemented:</P>
<P>- Detailed boot stage timing<BR>&nbsp;&nbsp;CONFIG_BOOTSTAGE<BR>&nbsp;&nbsp;Define this option to get detailed timing of each stage<BR>&nbsp;&nbsp;of the boot process.</P>
<P>&nbsp;&nbsp;CONFIG_BOOTSTAGE_USER_COUNT<BR>&nbsp;&nbsp;This is the number of available user bootstage records.<BR>&nbsp;&nbsp;Each time you call bootstage_mark(BOOTSTAGE_ID_ALLOC, ...)<BR>&nbsp;&nbsp;a new ID will be allocated from this stash. If you exceed<BR>&nbsp;&nbsp;the limit, recording will stop.</P>
<P>&nbsp;&nbsp;CONFIG_BOOTSTAGE_REPORT<BR>&nbsp;&nbsp;Define this to print a report before boot, similar to this:</P>
<P>&nbsp;&nbsp;Timer summary in microseconds:<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Mark&nbsp;&nbsp;&nbsp; Elapsed&nbsp; Stage<BR>&nbsp;&nbsp;&nbsp;&nbsp; 0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 0&nbsp; reset<BR>&nbsp;&nbsp;&nbsp; 3,575,678&nbsp; 3,575,678&nbsp; board_init_f start<BR>&nbsp;&nbsp;&nbsp; 3,575,695&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 17&nbsp; arch_cpu_init A9<BR>&nbsp;&nbsp;&nbsp; 3,575,777&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 82&nbsp; arch_cpu_init done<BR>&nbsp;&nbsp;&nbsp; 3,659,598&nbsp;&nbsp;&nbsp;&nbsp; 83,821&nbsp; board_init_r start<BR>&nbsp;&nbsp;&nbsp; 3,910,375&nbsp;&nbsp;&nbsp; 250,777&nbsp; main_loop<BR>&nbsp;&nbsp; 29,916,167 26,005,792&nbsp; bootm_start<BR>&nbsp;&nbsp; 30,361,327&nbsp;&nbsp;&nbsp; 445,160&nbsp; start_kernel</P>
<P>&nbsp;&nbsp;CONFIG_CMD_BOOTSTAGE<BR>&nbsp;&nbsp;Add a 'bootstage' command which supports printing a report<BR>&nbsp;&nbsp;and un/stashing of bootstage data.</P>
<P>&nbsp;&nbsp;CONFIG_BOOTSTAGE_FDT<BR>&nbsp;&nbsp;Stash the bootstage information in the FDT. A root 'bootstage'<BR>&nbsp;&nbsp;node is created with each bootstage id as a child. Each child<BR>&nbsp;&nbsp;has a 'name' property and either 'mark' containing the<BR>&nbsp;&nbsp;mark time in microsecond, or 'accum' containing the<BR>&nbsp;&nbsp;accumulated time for that bootstage id in microseconds.<BR>&nbsp;&nbsp;For example:</P>
<P>&nbsp;&nbsp;bootstage {<BR>&nbsp;&nbsp;&nbsp;154 {<BR>&nbsp;&nbsp;&nbsp;&nbsp;name = "board_init_f";<BR>&nbsp;&nbsp;&nbsp;&nbsp;mark = &lt;3575678&gt;;<BR>&nbsp;&nbsp;&nbsp;};<BR>&nbsp;&nbsp;&nbsp;170 {<BR>&nbsp;&nbsp;&nbsp;&nbsp;name = "lcd";<BR>&nbsp;&nbsp;&nbsp;&nbsp;accum = &lt;33482&gt;;<BR>&nbsp;&nbsp;&nbsp;};<BR>&nbsp;&nbsp;};</P>
<P>&nbsp;&nbsp;Code in the Linux kernel can find this in /proc/devicetree.</P>
<P>Legacy uImage format:</P>
<P>&nbsp; Arg&nbsp;Where&nbsp;&nbsp;&nbsp;When<BR>&nbsp;&nbsp;&nbsp; 1&nbsp;common/cmd_bootm.c&nbsp;before attempting to boot an image<BR>&nbsp;&nbsp; -1&nbsp;common/cmd_bootm.c&nbsp;Image header has bad&nbsp; magic number<BR>&nbsp;&nbsp;&nbsp; 2&nbsp;common/cmd_bootm.c&nbsp;Image header has correct magic number<BR>&nbsp;&nbsp; -2&nbsp;common/cmd_bootm.c&nbsp;Image header has bad&nbsp; checksum<BR>&nbsp;&nbsp;&nbsp; 3&nbsp;common/cmd_bootm.c&nbsp;Image header has correct checksum<BR>&nbsp;&nbsp; -3&nbsp;common/cmd_bootm.c&nbsp;Image data&nbsp;&nbsp; has bad&nbsp; checksum<BR>&nbsp;&nbsp;&nbsp; 4&nbsp;common/cmd_bootm.c&nbsp;Image data&nbsp;&nbsp; has correct checksum<BR>&nbsp;&nbsp; -4&nbsp;common/cmd_bootm.c&nbsp;Image is for unsupported architecture<BR>&nbsp;&nbsp;&nbsp; 5&nbsp;common/cmd_bootm.c&nbsp;Architecture check OK<BR>&nbsp;&nbsp; -5&nbsp;common/cmd_bootm.c&nbsp;Wrong Image Type (not kernel, multi)<BR>&nbsp;&nbsp;&nbsp; 6&nbsp;common/cmd_bootm.c&nbsp;Image Type check OK<BR>&nbsp;&nbsp; -6&nbsp;common/cmd_bootm.c&nbsp;gunzip uncompression error<BR>&nbsp;&nbsp; -7&nbsp;common/cmd_bootm.c&nbsp;Unimplemented compression type<BR>&nbsp;&nbsp;&nbsp; 7&nbsp;common/cmd_bootm.c&nbsp;Uncompression OK<BR>&nbsp;&nbsp;&nbsp; 8&nbsp;common/cmd_bootm.c&nbsp;No uncompress/copy overwrite error<BR>&nbsp;&nbsp; -9&nbsp;common/cmd_bootm.c&nbsp;Unsupported OS (not Linux, BSD, VxWorks, QNX)</P>
<P>&nbsp;&nbsp;&nbsp; 9&nbsp;common/image.c&nbsp;&nbsp;Start initial ramdisk verification<BR>&nbsp; -10&nbsp;common/image.c&nbsp;&nbsp;Ramdisk header has bad&nbsp;&nbsp;&nbsp; magic number<BR>&nbsp; -11&nbsp;common/image.c&nbsp;&nbsp;Ramdisk header has bad&nbsp;&nbsp;&nbsp; checksum<BR>&nbsp;&nbsp; 10&nbsp;common/image.c&nbsp;&nbsp;Ramdisk header is OK<BR>&nbsp; -12&nbsp;common/image.c&nbsp;&nbsp;Ramdisk data&nbsp;&nbsp; has bad&nbsp;&nbsp;&nbsp; checksum<BR>&nbsp;&nbsp; 11&nbsp;common/image.c&nbsp;&nbsp;Ramdisk data&nbsp;&nbsp; has correct checksum<BR>&nbsp;&nbsp; 12&nbsp;common/image.c&nbsp;&nbsp;Ramdisk verification complete, start loading<BR>&nbsp; -13&nbsp;common/image.c&nbsp;&nbsp;Wrong Image Type (not PPC Linux ramdisk)<BR>&nbsp;&nbsp; 13&nbsp;common/image.c&nbsp;&nbsp;Start multifile image verification<BR>&nbsp;&nbsp; 14&nbsp;common/image.c&nbsp;&nbsp;No initial ramdisk, no multifile, continue.</P>
<P>&nbsp;&nbsp; 15&nbsp;arch/&lt;arch&gt;/lib/bootm.c All preparation done, transferring control to OS</P>
<P>&nbsp; -30&nbsp;arch/powerpc/lib/board.c&nbsp;Fatal error, hang the system<BR>&nbsp; -31&nbsp;post/post.c&nbsp;&nbsp;POST test failed, detected by post_output_backlog()<BR>&nbsp; -32&nbsp;post/post.c&nbsp;&nbsp;POST test failed, detected by post_run_single()</P>
<P>&nbsp;&nbsp; 34&nbsp;common/cmd_doc.c&nbsp;before loading a Image from a DOC device<BR>&nbsp; -35&nbsp;common/cmd_doc.c&nbsp;Bad usage of "doc" command<BR>&nbsp;&nbsp; 35&nbsp;common/cmd_doc.c&nbsp;correct usage of "doc" command<BR>&nbsp; -36&nbsp;common/cmd_doc.c&nbsp;No boot device<BR>&nbsp;&nbsp; 36&nbsp;common/cmd_doc.c&nbsp;correct boot device<BR>&nbsp; -37&nbsp;common/cmd_doc.c&nbsp;Unknown Chip ID on boot device<BR>&nbsp;&nbsp; 37&nbsp;common/cmd_doc.c&nbsp;correct chip ID found, device available<BR>&nbsp; -38&nbsp;common/cmd_doc.c&nbsp;Read Error on boot device<BR>&nbsp;&nbsp; 38&nbsp;common/cmd_doc.c&nbsp;reading Image header from DOC device OK<BR>&nbsp; -39&nbsp;common/cmd_doc.c&nbsp;Image header has bad magic number<BR>&nbsp;&nbsp; 39&nbsp;common/cmd_doc.c&nbsp;Image header has correct magic number<BR>&nbsp; -40&nbsp;common/cmd_doc.c&nbsp;Error reading Image from DOC device<BR>&nbsp;&nbsp; 40&nbsp;common/cmd_doc.c&nbsp;Image header has correct magic number<BR>&nbsp;&nbsp; 41&nbsp;common/cmd_ide.c&nbsp;before loading a Image from a IDE device<BR>&nbsp; -42&nbsp;common/cmd_ide.c&nbsp;Bad usage of "ide" command<BR>&nbsp;&nbsp; 42&nbsp;common/cmd_ide.c&nbsp;correct usage of "ide" command<BR>&nbsp; -43&nbsp;common/cmd_ide.c&nbsp;No boot device<BR>&nbsp;&nbsp; 43&nbsp;common/cmd_ide.c&nbsp;boot device found<BR>&nbsp; -44&nbsp;common/cmd_ide.c&nbsp;Device not available<BR>&nbsp;&nbsp; 44&nbsp;common/cmd_ide.c&nbsp;Device available<BR>&nbsp; -45&nbsp;common/cmd_ide.c&nbsp;wrong partition selected<BR>&nbsp;&nbsp; 45&nbsp;common/cmd_ide.c&nbsp;partition selected<BR>&nbsp; -46&nbsp;common/cmd_ide.c&nbsp;Unknown partition table<BR>&nbsp;&nbsp; 46&nbsp;common/cmd_ide.c&nbsp;valid partition table found<BR>&nbsp; -47&nbsp;common/cmd_ide.c&nbsp;Invalid partition type<BR>&nbsp;&nbsp; 47&nbsp;common/cmd_ide.c&nbsp;correct partition type<BR>&nbsp; -48&nbsp;common/cmd_ide.c&nbsp;Error reading Image Header on boot device<BR>&nbsp;&nbsp; 48&nbsp;common/cmd_ide.c&nbsp;reading Image Header from IDE device OK<BR>&nbsp; -49&nbsp;common/cmd_ide.c&nbsp;Image header has bad magic number<BR>&nbsp;&nbsp; 49&nbsp;common/cmd_ide.c&nbsp;Image header has correct magic number<BR>&nbsp; -50&nbsp;common/cmd_ide.c&nbsp;Image header has bad&nbsp; checksum<BR>&nbsp;&nbsp; 50&nbsp;common/cmd_ide.c&nbsp;Image header has correct checksum<BR>&nbsp; -51&nbsp;common/cmd_ide.c&nbsp;Error reading Image from IDE device<BR>&nbsp;&nbsp; 51&nbsp;common/cmd_ide.c&nbsp;reading Image from IDE device OK<BR>&nbsp;&nbsp; 52&nbsp;common/cmd_nand.c&nbsp;before loading a Image from a NAND device<BR>&nbsp; -53&nbsp;common/cmd_nand.c&nbsp;Bad usage of "nand" command<BR>&nbsp;&nbsp; 53&nbsp;common/cmd_nand.c&nbsp;correct usage of "nand" command<BR>&nbsp; -54&nbsp;common/cmd_nand.c&nbsp;No boot device<BR>&nbsp;&nbsp; 54&nbsp;common/cmd_nand.c&nbsp;boot device found<BR>&nbsp; -55&nbsp;common/cmd_nand.c&nbsp;Unknown Chip ID on boot device<BR>&nbsp;&nbsp; 55&nbsp;common/cmd_nand.c&nbsp;correct chip ID found, device available<BR>&nbsp; -56&nbsp;common/cmd_nand.c&nbsp;Error reading Image Header on boot device<BR>&nbsp;&nbsp; 56&nbsp;common/cmd_nand.c&nbsp;reading Image Header from NAND device OK<BR>&nbsp; -57&nbsp;common/cmd_nand.c&nbsp;Image header has bad magic number<BR>&nbsp;&nbsp; 57&nbsp;common/cmd_nand.c&nbsp;Image header has correct magic number<BR>&nbsp; -58&nbsp;common/cmd_nand.c&nbsp;Error reading Image from NAND device<BR>&nbsp;&nbsp; 58&nbsp;common/cmd_nand.c&nbsp;reading Image from NAND device OK</P>
<P>&nbsp; -60&nbsp;common/env_common.c&nbsp;Environment has a bad CRC, using default</P>
<P>&nbsp;&nbsp; 64&nbsp;net/eth.c&nbsp;&nbsp;starting with Ethernet configuration.<BR>&nbsp; -64&nbsp;net/eth.c&nbsp;&nbsp;no Ethernet found.<BR>&nbsp;&nbsp; 65&nbsp;net/eth.c&nbsp;&nbsp;Ethernet found.</P>
<P>&nbsp; -80&nbsp;common/cmd_net.c&nbsp;usage wrong<BR>&nbsp;&nbsp; 80&nbsp;common/cmd_net.c&nbsp;before calling NetLoop()<BR>&nbsp; -81&nbsp;common/cmd_net.c&nbsp;some error in NetLoop() occurred<BR>&nbsp;&nbsp; 81&nbsp;common/cmd_net.c&nbsp;NetLoop() back without error<BR>&nbsp; -82&nbsp;common/cmd_net.c&nbsp;size == 0 (File with size 0 loaded)<BR>&nbsp;&nbsp; 82&nbsp;common/cmd_net.c&nbsp;trying automatic boot<BR>&nbsp;&nbsp; 83&nbsp;common/cmd_net.c&nbsp;running "source" command<BR>&nbsp; -83&nbsp;common/cmd_net.c&nbsp;some error in automatic boot or "source" command<BR>&nbsp;&nbsp; 84&nbsp;common/cmd_net.c&nbsp;end without errors</P>
<P>FIT uImage format:</P>
<P>&nbsp; Arg&nbsp;Where&nbsp;&nbsp;&nbsp;When<BR>&nbsp; 100&nbsp;common/cmd_bootm.c&nbsp;Kernel FIT Image has correct format<BR>&nbsp;-100&nbsp;common/cmd_bootm.c&nbsp;Kernel FIT Image has incorrect format<BR>&nbsp; 101&nbsp;common/cmd_bootm.c&nbsp;No Kernel subimage unit name, using configuration<BR>&nbsp;-101&nbsp;common/cmd_bootm.c&nbsp;Can't get configuration for kernel subimage<BR>&nbsp; 102&nbsp;common/cmd_bootm.c&nbsp;Kernel unit name specified<BR>&nbsp;-103&nbsp;common/cmd_bootm.c&nbsp;Can't get kernel subimage node offset<BR>&nbsp; 103&nbsp;common/cmd_bootm.c&nbsp;Found configuration node<BR>&nbsp; 104&nbsp;common/cmd_bootm.c&nbsp;Got kernel subimage node offset<BR>&nbsp;-104&nbsp;common/cmd_bootm.c&nbsp;Kernel subimage hash verification failed<BR>&nbsp; 105&nbsp;common/cmd_bootm.c&nbsp;Kernel subimage hash verification OK<BR>&nbsp;-105&nbsp;common/cmd_bootm.c&nbsp;Kernel subimage is for unsupported architecture<BR>&nbsp; 106&nbsp;common/cmd_bootm.c&nbsp;Architecture check OK<BR>&nbsp;-106&nbsp;common/cmd_bootm.c&nbsp;Kernel subimage has wrong type<BR>&nbsp; 107&nbsp;common/cmd_bootm.c&nbsp;Kernel subimage type OK<BR>&nbsp;-107&nbsp;common/cmd_bootm.c&nbsp;Can't get kernel subimage data/size<BR>&nbsp; 108&nbsp;common/cmd_bootm.c&nbsp;Got kernel subimage data/size<BR>&nbsp;-108&nbsp;common/cmd_bootm.c&nbsp;Wrong image type (not legacy, FIT)<BR>&nbsp;-109&nbsp;common/cmd_bootm.c&nbsp;Can't get kernel subimage type<BR>&nbsp;-110&nbsp;common/cmd_bootm.c&nbsp;Can't get kernel subimage comp<BR>&nbsp;-111&nbsp;common/cmd_bootm.c&nbsp;Can't get kernel subimage os<BR>&nbsp;-112&nbsp;common/cmd_bootm.c&nbsp;Can't get kernel subimage load address<BR>&nbsp;-113&nbsp;common/cmd_bootm.c&nbsp;Image uncompress/copy overwrite error</P>
<P>&nbsp; 120&nbsp;common/image.c&nbsp;&nbsp;Start initial ramdisk verification<BR>&nbsp;-120&nbsp;common/image.c&nbsp;&nbsp;Ramdisk FIT image has incorrect format<BR>&nbsp; 121&nbsp;common/image.c&nbsp;&nbsp;Ramdisk FIT image has correct format<BR>&nbsp; 122&nbsp;common/image.c&nbsp;&nbsp;No ramdisk subimage unit name, using configuration<BR>&nbsp;-122&nbsp;common/image.c&nbsp;&nbsp;Can't get configuration for ramdisk subimage<BR>&nbsp; 123&nbsp;common/image.c&nbsp;&nbsp;Ramdisk unit name specified<BR>&nbsp;-124&nbsp;common/image.c&nbsp;&nbsp;Can't get ramdisk subimage node offset<BR>&nbsp; 125&nbsp;common/image.c&nbsp;&nbsp;Got ramdisk subimage node offset<BR>&nbsp;-125&nbsp;common/image.c&nbsp;&nbsp;Ramdisk subimage hash verification failed<BR>&nbsp; 126&nbsp;common/image.c&nbsp;&nbsp;Ramdisk subimage hash verification OK<BR>&nbsp;-126&nbsp;common/image.c&nbsp;&nbsp;Ramdisk subimage for unsupported architecture<BR>&nbsp; 127&nbsp;common/image.c&nbsp;&nbsp;Architecture check OK<BR>&nbsp;-127&nbsp;common/image.c&nbsp;&nbsp;Can't get ramdisk subimage data/size<BR>&nbsp; 128&nbsp;common/image.c&nbsp;&nbsp;Got ramdisk subimage data/size<BR>&nbsp; 129&nbsp;common/image.c&nbsp;&nbsp;Can't get ramdisk load address<BR>&nbsp;-129&nbsp;common/image.c&nbsp;&nbsp;Got ramdisk load address</P>
<P>&nbsp;-130&nbsp;common/cmd_doc.c&nbsp;Incorrect FIT image format<BR>&nbsp; 131&nbsp;common/cmd_doc.c&nbsp;FIT image format OK</P>
<P>&nbsp;-140&nbsp;common/cmd_ide.c&nbsp;Incorrect FIT image format<BR>&nbsp; 141&nbsp;common/cmd_ide.c&nbsp;FIT image format OK</P>
<P>&nbsp;-150&nbsp;common/cmd_nand.c&nbsp;Incorrect FIT image format<BR>&nbsp; 151&nbsp;common/cmd_nand.c&nbsp;FIT image format OK</P>
<P>- legacy image format:<BR>&nbsp;&nbsp;CONFIG_IMAGE_FORMAT_LEGACY<BR>&nbsp;&nbsp;enables the legacy image format support in U-Boot.</P>
<P>&nbsp;&nbsp;Default:<BR>&nbsp;&nbsp;enabled if CONFIG_FIT_SIGNATURE is not defined.</P>
<P>&nbsp;&nbsp;CONFIG_DISABLE_IMAGE_LEGACY<BR>&nbsp;&nbsp;disable the legacy image format</P>
<P>&nbsp;&nbsp;This define is introduced, as the legacy image format is<BR>&nbsp;&nbsp;enabled per default for backward compatibility.</P>
<P>- FIT image support:<BR>&nbsp;&nbsp;CONFIG_FIT<BR>&nbsp;&nbsp;Enable support for the FIT uImage format.</P>
<P>&nbsp;&nbsp;CONFIG_FIT_BEST_MATCH<BR>&nbsp;&nbsp;When no configuration is explicitly selected, default to the<BR>&nbsp;&nbsp;one whose fdt's compatibility field best matches that of<BR>&nbsp;&nbsp;U-Boot itself. A match is considered "best" if it matches the<BR>&nbsp;&nbsp;most specific compatibility entry of U-Boot's fdt's root node.<BR>&nbsp;&nbsp;The order of entries in the configuration's fdt is ignored.</P>
<P>&nbsp;&nbsp;CONFIG_FIT_SIGNATURE<BR>&nbsp;&nbsp;This option enables signature verification of FIT uImages,<BR>&nbsp;&nbsp;using a hash signed and verified using RSA. If<BR>&nbsp;&nbsp;CONFIG_SHA_PROG_HW_ACCEL is defined, i.e support for progressive<BR>&nbsp;&nbsp;hashing is available using hardware, RSA library will use it.<BR>&nbsp;&nbsp;See doc/uImage.FIT/signature.txt for more details.</P>
<P>&nbsp;&nbsp;WARNING: When relying on signed FIT images with required<BR>&nbsp;&nbsp;signature check the legacy image format is default<BR>&nbsp;&nbsp;disabled. If a board need legacy image format support<BR>&nbsp;&nbsp;enable this through CONFIG_IMAGE_FORMAT_LEGACY</P>
<P>&nbsp;&nbsp;CONFIG_FIT_DISABLE_SHA256<BR>&nbsp;&nbsp;Supporting SHA256 hashes has quite an impact on binary size.<BR>&nbsp;&nbsp;For constrained systems sha256 hash support can be disabled<BR>&nbsp;&nbsp;with this option.</P>
<P>- Standalone program support:<BR>&nbsp;&nbsp;CONFIG_STANDALONE_LOAD_ADDR</P>
<P>&nbsp;&nbsp;This option defines a board specific value for the<BR>&nbsp;&nbsp;address where standalone program gets loaded, thus<BR>&nbsp;&nbsp;overwriting the architecture dependent default<BR>&nbsp;&nbsp;settings.</P>
<P>- Frame Buffer Address:<BR>&nbsp;&nbsp;CONFIG_FB_ADDR</P>
<P>&nbsp;&nbsp;Define CONFIG_FB_ADDR if you want to use specific<BR>&nbsp;&nbsp;address for frame buffer.&nbsp; This is typically the case<BR>&nbsp;&nbsp;when using a graphics controller has separate video<BR>&nbsp;&nbsp;memory.&nbsp; U-Boot will then place the frame buffer at<BR>&nbsp;&nbsp;the given address instead of dynamically reserving it<BR>&nbsp;&nbsp;in system RAM by calling lcd_setmem(), which grabs<BR>&nbsp;&nbsp;the memory for the frame buffer depending on the<BR>&nbsp;&nbsp;configured panel size.</P>
<P>&nbsp;&nbsp;Please see board_init_f function.</P>
<P>- Automatic software updates via TFTP server<BR>&nbsp;&nbsp;CONFIG_UPDATE_TFTP<BR>&nbsp;&nbsp;CONFIG_UPDATE_TFTP_CNT_MAX<BR>&nbsp;&nbsp;CONFIG_UPDATE_TFTP_MSEC_MAX</P>
<P>&nbsp;&nbsp;These options enable and control the auto-update feature;<BR>&nbsp;&nbsp;for a more detailed description refer to doc/README.update.</P>
<P>- MTD Support (mtdparts command, UBI support)<BR>&nbsp;&nbsp;CONFIG_MTD_DEVICE</P>
<P>&nbsp;&nbsp;Adds the MTD device infrastructure from the Linux kernel.<BR>&nbsp;&nbsp;Needed for mtdparts command support.</P>
<P>&nbsp;&nbsp;CONFIG_MTD_PARTITIONS</P>
<P>&nbsp;&nbsp;Adds the MTD partitioning infrastructure from the Linux<BR>&nbsp;&nbsp;kernel. Needed for UBI support.</P>
<P>- UBI support<BR>&nbsp;&nbsp;CONFIG_CMD_UBI</P>
<P>&nbsp;&nbsp;Adds commands for interacting with MTD partitions formatted<BR>&nbsp;&nbsp;with the UBI flash translation layer</P>
<P>&nbsp;&nbsp;Requires also defining CONFIG_RBTREE</P>
<P>&nbsp;&nbsp;CONFIG_UBI_SILENCE_MSG</P>
<P>&nbsp;&nbsp;Make the verbose messages from UBI stop printing.&nbsp; This leaves<BR>&nbsp;&nbsp;warnings and errors enabled.</P>
<P><BR>&nbsp;&nbsp;CONFIG_MTD_UBI_WL_THRESHOLD<BR>&nbsp;&nbsp;This parameter defines the maximum difference between the highest<BR>&nbsp;&nbsp;erase counter value and the lowest erase counter value of eraseblocks<BR>&nbsp;&nbsp;of UBI devices. When this threshold is exceeded, UBI starts performing<BR>&nbsp;&nbsp;wear leveling by means of moving data from eraseblock with low erase<BR>&nbsp;&nbsp;counter to eraseblocks with high erase counter.</P>
<P>&nbsp;&nbsp;The default value should be OK for SLC NAND flashes, NOR flashes and<BR>&nbsp;&nbsp;other flashes which have eraseblock life-cycle 100000 or more.<BR>&nbsp;&nbsp;However, in case of MLC NAND flashes which typically have eraseblock<BR>&nbsp;&nbsp;life-cycle less than 10000, the threshold should be lessened (e.g.,<BR>&nbsp;&nbsp;to 128 or 256, although it does not have to be power of 2).</P>
<P>&nbsp;&nbsp;default: 4096</P>
<P>&nbsp;&nbsp;CONFIG_MTD_UBI_BEB_LIMIT<BR>&nbsp;&nbsp;This option specifies the maximum bad physical eraseblocks UBI<BR>&nbsp;&nbsp;expects on the MTD device (per 1024 eraseblocks). If the<BR>&nbsp;&nbsp;underlying flash does not admit of bad eraseblocks (e.g. NOR<BR>&nbsp;&nbsp;flash), this value is ignored.</P>
<P>&nbsp;&nbsp;NAND datasheets often specify the minimum and maximum NVM<BR>&nbsp;&nbsp;(Number of Valid Blocks) for the flashes' endurance lifetime.<BR>&nbsp;&nbsp;The maximum expected bad eraseblocks per 1024 eraseblocks<BR>&nbsp;&nbsp;then can be calculated as "1024 * (1 - MinNVB / MaxNVB)",<BR>&nbsp;&nbsp;which gives 20 for most NANDs (MaxNVB is basically the total<BR>&nbsp;&nbsp;count of eraseblocks on the chip).</P>
<P>&nbsp;&nbsp;To put it differently, if this value is 20, UBI will try to<BR>&nbsp;&nbsp;reserve about 1.9% of physical eraseblocks for bad blocks<BR>&nbsp;&nbsp;handling. And that will be 1.9% of eraseblocks on the entire<BR>&nbsp;&nbsp;NAND chip, not just the MTD partition UBI attaches. This means<BR>&nbsp;&nbsp;that if you have, say, a NAND flash chip admits maximum 40 bad<BR>&nbsp;&nbsp;eraseblocks, and it is split on two MTD partitions of the same<BR>&nbsp;&nbsp;size, UBI will reserve 40 eraseblocks when attaching a<BR>&nbsp;&nbsp;partition.</P>
<P>&nbsp;&nbsp;default: 20</P>
<P>&nbsp;&nbsp;CONFIG_MTD_UBI_FASTMAP<BR>&nbsp;&nbsp;Fastmap is a mechanism which allows attaching an UBI device<BR>&nbsp;&nbsp;in nearly constant time. Instead of scanning the whole MTD device it<BR>&nbsp;&nbsp;only has to locate a checkpoint (called fastmap) on the device.<BR>&nbsp;&nbsp;The on-flash fastmap contains all information needed to attach<BR>&nbsp;&nbsp;the device. Using fastmap makes only sense on large devices where<BR>&nbsp;&nbsp;attaching by scanning takes long. UBI will not automatically install<BR>&nbsp;&nbsp;a fastmap on old images, but you can set the UBI parameter<BR>&nbsp;&nbsp;CONFIG_MTD_UBI_FASTMAP_AUTOCONVERT to 1 if you want so. Please note<BR>&nbsp;&nbsp;that fastmap-enabled images are still usable with UBI implementations<BR>&nbsp;&nbsp;without&nbsp;fastmap support. On typical flash devices the whole fastmap<BR>&nbsp;&nbsp;fits into one PEB. UBI will reserve PEBs to hold two fastmaps.</P>
<P>&nbsp;&nbsp;CONFIG_MTD_UBI_FASTMAP_AUTOCONVERT<BR>&nbsp;&nbsp;Set this parameter to enable fastmap automatically on images<BR>&nbsp;&nbsp;without a fastmap.<BR>&nbsp;&nbsp;default: 0</P>
<P>- UBIFS support<BR>&nbsp;&nbsp;CONFIG_CMD_UBIFS</P>
<P>&nbsp;&nbsp;Adds commands for interacting with UBI volumes formatted as<BR>&nbsp;&nbsp;UBIFS.&nbsp; UBIFS is read-only in u-boot.</P>
<P>&nbsp;&nbsp;Requires UBI support as well as CONFIG_LZO</P>
<P>&nbsp;&nbsp;CONFIG_UBIFS_SILENCE_MSG</P>
<P>&nbsp;&nbsp;Make the verbose messages from UBIFS stop printing.&nbsp; This leaves<BR>&nbsp;&nbsp;warnings and errors enabled.</P>
<P>- SPL framework<BR>&nbsp;&nbsp;CONFIG_SPL<BR>&nbsp;&nbsp;Enable building of SPL globally.</P>
<P>&nbsp;&nbsp;CONFIG_SPL_LDSCRIPT<BR>&nbsp;&nbsp;LDSCRIPT for linking the SPL binary.</P>
<P>&nbsp;&nbsp;CONFIG_SPL_MAX_FOOTPRINT<BR>&nbsp;&nbsp;Maximum size in memory allocated to the SPL, BSS included.<BR>&nbsp;&nbsp;When defined, the linker checks that the actual memory<BR>&nbsp;&nbsp;used by SPL from _start to __bss_end does not exceed it.<BR>&nbsp;&nbsp;CONFIG_SPL_MAX_FOOTPRINT and CONFIG_SPL_BSS_MAX_SIZE<BR>&nbsp;&nbsp;must not be both defined at the same time.</P>
<P>&nbsp;&nbsp;CONFIG_SPL_MAX_SIZE<BR>&nbsp;&nbsp;Maximum size of the SPL image (text, data, rodata, and<BR>&nbsp;&nbsp;linker lists sections), BSS excluded.<BR>&nbsp;&nbsp;When defined, the linker checks that the actual size does<BR>&nbsp;&nbsp;not exceed it.</P>
<P>&nbsp;&nbsp;CONFIG_SPL_TEXT_BASE<BR>&nbsp;&nbsp;TEXT_BASE for linking the SPL binary.</P>
<P>&nbsp;&nbsp;CONFIG_SPL_RELOC_TEXT_BASE<BR>&nbsp;&nbsp;Address to relocate to.&nbsp; If unspecified, this is equal to<BR>&nbsp;&nbsp;CONFIG_SPL_TEXT_BASE (i.e. no relocation is done).</P>
<P>&nbsp;&nbsp;CONFIG_SPL_BSS_START_ADDR<BR>&nbsp;&nbsp;Link address for the BSS within the SPL binary.</P>
<P>&nbsp;&nbsp;CONFIG_SPL_BSS_MAX_SIZE<BR>&nbsp;&nbsp;Maximum size in memory allocated to the SPL BSS.<BR>&nbsp;&nbsp;When defined, the linker checks that the actual memory used<BR>&nbsp;&nbsp;by SPL from __bss_start to __bss_end does not exceed it.<BR>&nbsp;&nbsp;CONFIG_SPL_MAX_FOOTPRINT and CONFIG_SPL_BSS_MAX_SIZE<BR>&nbsp;&nbsp;must not be both defined at the same time.</P>
<P>&nbsp;&nbsp;CONFIG_SPL_STACK<BR>&nbsp;&nbsp;Adress of the start of the stack SPL will use</P>
<P>&nbsp;&nbsp;CONFIG_SPL_PANIC_ON_RAW_IMAGE<BR>&nbsp;&nbsp;When defined, SPL will panic() if the image it has<BR>&nbsp;&nbsp;loaded does not have a signature.<BR>&nbsp;&nbsp;Defining this is useful when code which loads images<BR>&nbsp;&nbsp;in SPL cannot guarantee that absolutely all read errors<BR>&nbsp;&nbsp;will be caught.<BR>&nbsp;&nbsp;An example is the LPC32XX MLC NAND driver, which will<BR>&nbsp;&nbsp;consider that a completely unreadable NAND block is bad,<BR>&nbsp;&nbsp;and thus should be skipped silently.</P>
<P>&nbsp;&nbsp;CONFIG_SPL_RELOC_STACK<BR>&nbsp;&nbsp;Adress of the start of the stack SPL will use after<BR>&nbsp;&nbsp;relocation.&nbsp; If unspecified, this is equal to<BR>&nbsp;&nbsp;CONFIG_SPL_STACK.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_SPL_MALLOC_START<BR>&nbsp;&nbsp;Starting address of the malloc pool used in SPL.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_SPL_MALLOC_SIZE<BR>&nbsp;&nbsp;The size of the malloc pool used in SPL.</P>
<P>&nbsp;&nbsp;CONFIG_SPL_FRAMEWORK<BR>&nbsp;&nbsp;Enable the SPL framework under common/.&nbsp; This framework<BR>&nbsp;&nbsp;supports MMC, NAND and YMODEM loading of U-Boot and NAND<BR>&nbsp;&nbsp;NAND loading of the Linux Kernel.</P>
<P>&nbsp;&nbsp;CONFIG_SPL_OS_BOOT<BR>&nbsp;&nbsp;Enable booting directly to an OS from SPL.<BR>&nbsp;&nbsp;See also: doc/README.falcon</P>
<P>&nbsp;&nbsp;CONFIG_SPL_DISPLAY_PRINT<BR>&nbsp;&nbsp;For ARM, enable an optional function to print more information<BR>&nbsp;&nbsp;about the running system.</P>
<P>&nbsp;&nbsp;CONFIG_SPL_INIT_MINIMAL<BR>&nbsp;&nbsp;Arch init code should be built for a very small image</P>
<P>&nbsp;&nbsp;CONFIG_SPL_LIBCOMMON_SUPPORT<BR>&nbsp;&nbsp;Support for common/libcommon.o in SPL binary</P>
<P>&nbsp;&nbsp;CONFIG_SPL_LIBDISK_SUPPORT<BR>&nbsp;&nbsp;Support for disk/libdisk.o in SPL binary</P>
<P>&nbsp;&nbsp;CONFIG_SPL_I2C_SUPPORT<BR>&nbsp;&nbsp;Support for drivers/i2c/libi2c.o in SPL binary</P>
<P>&nbsp;&nbsp;CONFIG_SPL_GPIO_SUPPORT<BR>&nbsp;&nbsp;Support for drivers/gpio/libgpio.o in SPL binary</P>
<P>&nbsp;&nbsp;CONFIG_SPL_MMC_SUPPORT<BR>&nbsp;&nbsp;Support for drivers/mmc/libmmc.o in SPL binary</P>
<P>&nbsp;&nbsp;CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_SECTOR,<BR>&nbsp;&nbsp;CONFIG_SYS_U_BOOT_MAX_SIZE_SECTORS,<BR>&nbsp;&nbsp;Address and partition on the MMC to load U-Boot from<BR>&nbsp;&nbsp;when the MMC is being used in raw mode.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_MMCSD_RAW_MODE_U_BOOT_PARTITION<BR>&nbsp;&nbsp;Partition on the MMC to load U-Boot from when the MMC is being<BR>&nbsp;&nbsp;used in raw mode</P>
<P>&nbsp;&nbsp;CONFIG_SYS_MMCSD_RAW_MODE_KERNEL_SECTOR<BR>&nbsp;&nbsp;Sector to load kernel uImage from when MMC is being<BR>&nbsp;&nbsp;used in raw mode (for Falcon mode)</P>
<P>&nbsp;&nbsp;CONFIG_SYS_MMCSD_RAW_MODE_ARGS_SECTOR,<BR>&nbsp;&nbsp;CONFIG_SYS_MMCSD_RAW_MODE_ARGS_SECTORS<BR>&nbsp;&nbsp;Sector and number of sectors to load kernel argument<BR>&nbsp;&nbsp;parameters from when MMC is being used in raw mode<BR>&nbsp;&nbsp;(for falcon mode)</P>
<P>&nbsp;&nbsp;CONFIG_SYS_MMCSD_FS_BOOT_PARTITION<BR>&nbsp;&nbsp;Partition on the MMC to load U-Boot from when the MMC is being<BR>&nbsp;&nbsp;used in fs mode</P>
<P>&nbsp;&nbsp;CONFIG_SPL_FAT_SUPPORT<BR>&nbsp;&nbsp;Support for fs/fat/libfat.o in SPL binary</P>
<P>&nbsp;&nbsp;CONFIG_SPL_EXT_SUPPORT<BR>&nbsp;&nbsp;Support for EXT filesystem in SPL binary</P>
<P>&nbsp;&nbsp;CONFIG_SPL_FS_LOAD_PAYLOAD_NAME<BR>&nbsp;&nbsp;Filename to read to load U-Boot when reading from filesystem</P>
<P>&nbsp;&nbsp;CONFIG_SPL_FS_LOAD_KERNEL_NAME<BR>&nbsp;&nbsp;Filename to read to load kernel uImage when reading<BR>&nbsp;&nbsp;from filesystem (for Falcon mode)</P>
<P>&nbsp;&nbsp;CONFIG_SPL_FS_LOAD_ARGS_NAME<BR>&nbsp;&nbsp;Filename to read to load kernel argument parameters<BR>&nbsp;&nbsp;when reading from filesystem (for Falcon mode)</P>
<P>&nbsp;&nbsp;CONFIG_SPL_MPC83XX_WAIT_FOR_NAND<BR>&nbsp;&nbsp;Set this for NAND SPL on PPC mpc83xx targets, so that<BR>&nbsp;&nbsp;start.S waits for the rest of the SPL to load before<BR>&nbsp;&nbsp;continuing (the hardware starts execution after just<BR>&nbsp;&nbsp;loading the first page rather than the full 4K).</P>
<P>&nbsp;&nbsp;CONFIG_SPL_SKIP_RELOCATE<BR>&nbsp;&nbsp;Avoid SPL relocation</P>
<P>&nbsp;&nbsp;CONFIG_SPL_NAND_BASE<BR>&nbsp;&nbsp;Include nand_base.c in the SPL.&nbsp; Requires<BR>&nbsp;&nbsp;CONFIG_SPL_NAND_DRIVERS.</P>
<P>&nbsp;&nbsp;CONFIG_SPL_NAND_DRIVERS<BR>&nbsp;&nbsp;SPL uses normal NAND drivers, not minimal drivers.</P>
<P>&nbsp;&nbsp;CONFIG_SPL_NAND_ECC<BR>&nbsp;&nbsp;Include standard software ECC in the SPL</P>
<P>&nbsp;&nbsp;CONFIG_SPL_NAND_SIMPLE<BR>&nbsp;&nbsp;Support for NAND boot using simple NAND drivers that<BR>&nbsp;&nbsp;expose the cmd_ctrl() interface.</P>
<P>&nbsp;&nbsp;CONFIG_SPL_MTD_SUPPORT<BR>&nbsp;&nbsp;Support for the MTD subsystem within SPL.&nbsp; Useful for<BR>&nbsp;&nbsp;environment on NAND support within SPL.</P>
<P>&nbsp;&nbsp;CONFIG_SPL_NAND_RAW_ONLY<BR>&nbsp;&nbsp;Support to boot only raw u-boot.bin images. Use this only<BR>&nbsp;&nbsp;if you need to save space.</P>
<P>&nbsp;&nbsp;CONFIG_SPL_MPC8XXX_INIT_DDR_SUPPORT<BR>&nbsp;&nbsp;Set for the SPL on PPC mpc8xxx targets, support for<BR>&nbsp;&nbsp;drivers/ddr/fsl/libddr.o in SPL binary.</P>
<P>&nbsp;&nbsp;CONFIG_SPL_COMMON_INIT_DDR<BR>&nbsp;&nbsp;Set for common ddr init with serial presence detect in<BR>&nbsp;&nbsp;SPL binary.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_NAND_5_ADDR_CYCLE, CONFIG_SYS_NAND_PAGE_COUNT,<BR>&nbsp;&nbsp;CONFIG_SYS_NAND_PAGE_SIZE, CONFIG_SYS_NAND_OOBSIZE,<BR>&nbsp;&nbsp;CONFIG_SYS_NAND_BLOCK_SIZE, CONFIG_SYS_NAND_BAD_BLOCK_POS,<BR>&nbsp;&nbsp;CONFIG_SYS_NAND_ECCPOS, CONFIG_SYS_NAND_ECCSIZE,<BR>&nbsp;&nbsp;CONFIG_SYS_NAND_ECCBYTES<BR>&nbsp;&nbsp;Defines the size and behavior of the NAND that SPL uses<BR>&nbsp;&nbsp;to read U-Boot</P>
<P>&nbsp;&nbsp;CONFIG_SPL_NAND_BOOT<BR>&nbsp;&nbsp;Add support NAND boot</P>
<P>&nbsp;&nbsp;CONFIG_SYS_NAND_U_BOOT_OFFS<BR>&nbsp;&nbsp;Location in NAND to read U-Boot from</P>
<P>&nbsp;&nbsp;CONFIG_SYS_NAND_U_BOOT_DST<BR>&nbsp;&nbsp;Location in memory to load U-Boot to</P>
<P>&nbsp;&nbsp;CONFIG_SYS_NAND_U_BOOT_SIZE<BR>&nbsp;&nbsp;Size of image to load</P>
<P>&nbsp;&nbsp;CONFIG_SYS_NAND_U_BOOT_START<BR>&nbsp;&nbsp;Entry point in loaded image to jump to</P>
<P>&nbsp;&nbsp;CONFIG_SYS_NAND_HW_ECC_OOBFIRST<BR>&nbsp;&nbsp;Define this if you need to first read the OOB and then the<BR>&nbsp;&nbsp;data. This is used, for example, on davinci platforms.</P>
<P>&nbsp;&nbsp;CONFIG_SPL_OMAP3_ID_NAND<BR>&nbsp;&nbsp;Support for an OMAP3-specific set of functions to return the<BR>&nbsp;&nbsp;ID and MFR of the first attached NAND chip, if present.</P>
<P>&nbsp;&nbsp;CONFIG_SPL_SERIAL_SUPPORT<BR>&nbsp;&nbsp;Support for drivers/serial/libserial.o in SPL binary</P>
<P>&nbsp;&nbsp;CONFIG_SPL_SPI_FLASH_SUPPORT<BR>&nbsp;&nbsp;Support for drivers/mtd/spi/libspi_flash.o in SPL binary</P>
<P>&nbsp;&nbsp;CONFIG_SPL_SPI_SUPPORT<BR>&nbsp;&nbsp;Support for drivers/spi/libspi.o in SPL binary</P>
<P>&nbsp;&nbsp;CONFIG_SPL_RAM_DEVICE<BR>&nbsp;&nbsp;Support for running image already present in ram, in SPL binary</P>
<P>&nbsp;&nbsp;CONFIG_SPL_LIBGENERIC_SUPPORT<BR>&nbsp;&nbsp;Support for lib/libgeneric.o in SPL binary</P>
<P>&nbsp;&nbsp;CONFIG_SPL_ENV_SUPPORT<BR>&nbsp;&nbsp;Support for the environment operating in SPL binary</P>
<P>&nbsp;&nbsp;CONFIG_SPL_NET_SUPPORT<BR>&nbsp;&nbsp;Support for the net/libnet.o in SPL binary.<BR>&nbsp;&nbsp;It conflicts with SPL env from storage medium specified by<BR>&nbsp;&nbsp;CONFIG_ENV_IS_xxx but CONFIG_ENV_IS_NOWHERE</P>
<P>&nbsp;&nbsp;CONFIG_SPL_PAD_TO<BR>&nbsp;&nbsp;Image offset to which the SPL should be padded before appending<BR>&nbsp;&nbsp;the SPL payload. By default, this is defined as<BR>&nbsp;&nbsp;CONFIG_SPL_MAX_SIZE, or 0 if CONFIG_SPL_MAX_SIZE is undefined.<BR>&nbsp;&nbsp;CONFIG_SPL_PAD_TO must be either 0, meaning to append the SPL<BR>&nbsp;&nbsp;payload without any padding, or &gt;= CONFIG_SPL_MAX_SIZE.</P>
<P>&nbsp;&nbsp;CONFIG_SPL_TARGET<BR>&nbsp;&nbsp;Final target image containing SPL and payload.&nbsp; Some SPLs<BR>&nbsp;&nbsp;use an arch-specific makefile fragment instead, for<BR>&nbsp;&nbsp;example if more than one image needs to be produced.</P>
<P>&nbsp;&nbsp;CONFIG_FIT_SPL_PRINT<BR>&nbsp;&nbsp;Printing information about a FIT image adds quite a bit of<BR>&nbsp;&nbsp;code to SPL. So this is normally disabled in SPL. Use this<BR>&nbsp;&nbsp;option to re-enable it. This will affect the output of the<BR>&nbsp;&nbsp;bootm command when booting a FIT image.</P>
<P>- TPL framework<BR>&nbsp;&nbsp;CONFIG_TPL<BR>&nbsp;&nbsp;Enable building of TPL globally.</P>
<P>&nbsp;&nbsp;CONFIG_TPL_PAD_TO<BR>&nbsp;&nbsp;Image offset to which the TPL should be padded before appending<BR>&nbsp;&nbsp;the TPL payload. By default, this is defined as<BR>&nbsp;&nbsp;CONFIG_SPL_MAX_SIZE, or 0 if CONFIG_SPL_MAX_SIZE is undefined.<BR>&nbsp;&nbsp;CONFIG_SPL_PAD_TO must be either 0, meaning to append the SPL<BR>&nbsp;&nbsp;payload without any padding, or &gt;= CONFIG_SPL_MAX_SIZE.</P>
<P>Modem Support:<BR>--------------</P>
<P>[so far only for SMDK2400 boards]</P>
<P>- Modem support enable:<BR>&nbsp;&nbsp;CONFIG_MODEM_SUPPORT</P>
<P>- RTS/CTS Flow control enable:<BR>&nbsp;&nbsp;CONFIG_HWFLOW</P>
<P>- Modem debug support:<BR>&nbsp;&nbsp;CONFIG_MODEM_SUPPORT_DEBUG</P>
<P>&nbsp;&nbsp;Enables debugging stuff (char screen[1024], dbg())<BR>&nbsp;&nbsp;for modem support. Useful only with BDI2000.</P>
<P>- Interrupt support (PPC):</P>
<P>&nbsp;&nbsp;There are common interrupt_init() and timer_interrupt()<BR>&nbsp;&nbsp;for all PPC archs. interrupt_init() calls interrupt_init_cpu()<BR>&nbsp;&nbsp;for CPU specific initialization. interrupt_init_cpu()<BR>&nbsp;&nbsp;should set decrementer_count to appropriate value. If<BR>&nbsp;&nbsp;CPU resets decrementer automatically after interrupt<BR>&nbsp;&nbsp;(ppc4xx) it should set decrementer_count to zero.<BR>&nbsp;&nbsp;timer_interrupt() calls timer_interrupt_cpu() for CPU<BR>&nbsp;&nbsp;specific handling. If board has watchdog / status_led<BR>&nbsp;&nbsp;/ other_activity_monitor it works automatically from<BR>&nbsp;&nbsp;general timer_interrupt().</P>
<P>- General:</P>
<P>&nbsp;&nbsp;In the target system modem support is enabled when a<BR>&nbsp;&nbsp;specific key (key combination) is pressed during<BR>&nbsp;&nbsp;power-on. Otherwise U-Boot will boot normally<BR>&nbsp;&nbsp;(autoboot). The key_pressed() function is called from<BR>&nbsp;&nbsp;board_init(). Currently key_pressed() is a dummy<BR>&nbsp;&nbsp;function, returning 1 and thus enabling modem<BR>&nbsp;&nbsp;initialization.</P>
<P>&nbsp;&nbsp;If there are no modem init strings in the<BR>&nbsp;&nbsp;environment, U-Boot proceed to autoboot; the<BR>&nbsp;&nbsp;previous output (banner, info printfs) will be<BR>&nbsp;&nbsp;suppressed, though.</P>
<P>&nbsp;&nbsp;See also: doc/README.Modem</P>
<P>Board initialization settings:<BR>------------------------------</P>
<P>During Initialization u-boot calls a number of board specific functions<BR>to allow the preparation of board specific prerequisites, e.g. pin setup<BR>before drivers are initialized. To enable these callbacks the<BR>following configuration macros have to be defined. Currently this is<BR>architecture specific, so please check arch/your_architecture/lib/board.c<BR>typically in board_init_f() and board_init_r().</P>
<P>- CONFIG_BOARD_EARLY_INIT_F: Call board_early_init_f()<BR>- CONFIG_BOARD_EARLY_INIT_R: Call board_early_init_r()<BR>- CONFIG_BOARD_LATE_INIT: Call board_late_init()<BR>- CONFIG_BOARD_POSTCLK_INIT: Call board_postclk_init()</P>
<P>Configuration Settings:<BR>-----------------------</P>
<P>- CONFIG_SYS_SUPPORT_64BIT_DATA: Defined automatically if compiled as 64-bit.<BR>&nbsp;&nbsp;Optionally it can be defined to support 64-bit memory commands.</P>
<P>- CONFIG_SYS_LONGHELP: Defined when you want long help messages included;<BR>&nbsp;&nbsp;undefine this when you're short of memory.</P>
<P>- CONFIG_SYS_HELP_CMD_WIDTH: Defined when you want to override the default<BR>&nbsp;&nbsp;width of the commands listed in the 'help' command output.</P>
<P>- CONFIG_SYS_PROMPT:&nbsp;This is what U-Boot prints on the console to<BR>&nbsp;&nbsp;prompt for user input.</P>
<P>- CONFIG_SYS_CBSIZE:&nbsp;Buffer size for input from the Console</P>
<P>- CONFIG_SYS_PBSIZE:&nbsp;Buffer size for Console output</P>
<P>- CONFIG_SYS_MAXARGS:&nbsp;max. Number of arguments accepted for monitor commands</P>
<P>- CONFIG_SYS_BARGSIZE: Buffer size for Boot Arguments which are passed to<BR>&nbsp;&nbsp;the application (usually a Linux kernel) when it is<BR>&nbsp;&nbsp;booted</P>
<P>- CONFIG_SYS_BAUDRATE_TABLE:<BR>&nbsp;&nbsp;List of legal baudrate settings for this board.</P>
<P>- CONFIG_SYS_CONSOLE_INFO_QUIET<BR>&nbsp;&nbsp;Suppress display of console information at boot.</P>
<P>- CONFIG_SYS_CONSOLE_IS_IN_ENV<BR>&nbsp;&nbsp;If the board specific function<BR>&nbsp;&nbsp;&nbsp;extern int overwrite_console (void);<BR>&nbsp;&nbsp;returns 1, the stdin, stderr and stdout are switched to the<BR>&nbsp;&nbsp;serial port, else the settings in the environment are used.</P>
<P>- CONFIG_SYS_CONSOLE_OVERWRITE_ROUTINE<BR>&nbsp;&nbsp;Enable the call to overwrite_console().</P>
<P>- CONFIG_SYS_CONSOLE_ENV_OVERWRITE<BR>&nbsp;&nbsp;Enable overwrite of previous console environment settings.</P>
<P>- CONFIG_SYS_MEMTEST_START, CONFIG_SYS_MEMTEST_END:<BR>&nbsp;&nbsp;Begin and End addresses of the area used by the<BR>&nbsp;&nbsp;simple memory test.</P>
<P>- CONFIG_SYS_ALT_MEMTEST:<BR>&nbsp;&nbsp;Enable an alternate, more extensive memory test.</P>
<P>- CONFIG_SYS_MEMTEST_SCRATCH:<BR>&nbsp;&nbsp;Scratch address used by the alternate memory test<BR>&nbsp;&nbsp;You only need to set this if address zero isn't writeable</P>
<P>- CONFIG_SYS_MEM_TOP_HIDE (PPC only):<BR>&nbsp;&nbsp;If CONFIG_SYS_MEM_TOP_HIDE is defined in the board config header,<BR>&nbsp;&nbsp;this specified memory area will get subtracted from the top<BR>&nbsp;&nbsp;(end) of RAM and won't get "touched" at all by U-Boot. By<BR>&nbsp;&nbsp;fixing up gd-&gt;ram_size the Linux kernel should gets passed<BR>&nbsp;&nbsp;the now "corrected" memory size and won't touch it either.<BR>&nbsp;&nbsp;This should work for arch/ppc and arch/powerpc. Only Linux<BR>&nbsp;&nbsp;board ports in arch/powerpc with bootwrapper support that<BR>&nbsp;&nbsp;recalculate the memory size from the SDRAM controller setup<BR>&nbsp;&nbsp;will have to get fixed in Linux additionally.</P>
<P>&nbsp;&nbsp;This option can be used as a workaround for the 440EPx/GRx<BR>&nbsp;&nbsp;CHIP 11 errata where the last 256 bytes in SDRAM shouldn't<BR>&nbsp;&nbsp;be touched.</P>
<P>&nbsp;&nbsp;WARNING: Please make sure that this value is a multiple of<BR>&nbsp;&nbsp;the Linux page size (normally 4k). If this is not the case,<BR>&nbsp;&nbsp;then the end address of the Linux memory will be located at a<BR>&nbsp;&nbsp;non page size aligned address and this could cause major<BR>&nbsp;&nbsp;problems.</P>
<P>- CONFIG_SYS_LOADS_BAUD_CHANGE:<BR>&nbsp;&nbsp;Enable temporary baudrate change while serial download</P>
<P>- CONFIG_SYS_SDRAM_BASE:<BR>&nbsp;&nbsp;Physical start address of SDRAM. _Must_ be 0 here.</P>
<P>- CONFIG_SYS_MBIO_BASE:<BR>&nbsp;&nbsp;Physical start address of Motherboard I/O (if using a<BR>&nbsp;&nbsp;Cogent motherboard)</P>
<P>- CONFIG_SYS_FLASH_BASE:<BR>&nbsp;&nbsp;Physical start address of Flash memory.</P>
<P>- CONFIG_SYS_MONITOR_BASE:<BR>&nbsp;&nbsp;Physical start address of boot monitor code (set by<BR>&nbsp;&nbsp;make config files to be same as the text base address<BR>&nbsp;&nbsp;(CONFIG_SYS_TEXT_BASE) used when linking) - same as<BR>&nbsp;&nbsp;CONFIG_SYS_FLASH_BASE when booting from flash.</P>
<P>- CONFIG_SYS_MONITOR_LEN:<BR>&nbsp;&nbsp;Size of memory reserved for monitor code, used to<BR>&nbsp;&nbsp;determine _at_compile_time_ (!) if the environment is<BR>&nbsp;&nbsp;embedded within the U-Boot image, or in a separate<BR>&nbsp;&nbsp;flash sector.</P>
<P>- CONFIG_SYS_MALLOC_LEN:<BR>&nbsp;&nbsp;Size of DRAM reserved for malloc() use.</P>
<P>- CONFIG_SYS_MALLOC_F_LEN<BR>&nbsp;&nbsp;Size of the malloc() pool for use before relocation. If<BR>&nbsp;&nbsp;this is defined, then a very simple malloc() implementation<BR>&nbsp;&nbsp;will become available before relocation. The address is just<BR>&nbsp;&nbsp;below the global data, and the stack is moved down to make<BR>&nbsp;&nbsp;space.</P>
<P>&nbsp;&nbsp;This feature allocates regions with increasing addresses<BR>&nbsp;&nbsp;within the region. calloc() is supported, but realloc()<BR>&nbsp;&nbsp;is not available. free() is supported but does nothing.<BR>&nbsp;&nbsp;The memory will be freed (or in fact just forgotten) when<BR>&nbsp;&nbsp;U-Boot relocates itself.</P>
<P>&nbsp;&nbsp;Pre-relocation malloc() is only supported on ARM and sandbox<BR>&nbsp;&nbsp;at present but is fairly easy to enable for other archs.</P>
<P>- CONFIG_SYS_MALLOC_SIMPLE<BR>&nbsp;&nbsp;Provides a simple and small malloc() and calloc() for those<BR>&nbsp;&nbsp;boards which do not use the full malloc in SPL (which is<BR>&nbsp;&nbsp;enabled with CONFIG_SYS_SPL_MALLOC_START).</P>
<P>- CONFIG_SYS_NONCACHED_MEMORY:<BR>&nbsp;&nbsp;Size of non-cached memory area. This area of memory will be<BR>&nbsp;&nbsp;typically located right below the malloc() area and mapped<BR>&nbsp;&nbsp;uncached in the MMU. This is useful for drivers that would<BR>&nbsp;&nbsp;otherwise require a lot of explicit cache maintenance. For<BR>&nbsp;&nbsp;some drivers it's also impossible to properly maintain the<BR>&nbsp;&nbsp;cache. For example if the regions that need to be flushed<BR>&nbsp;&nbsp;are not a multiple of the cache-line size, *and* padding<BR>&nbsp;&nbsp;cannot be allocated between the regions to align them (i.e.<BR>&nbsp;&nbsp;if the HW requires a contiguous array of regions, and the<BR>&nbsp;&nbsp;size of each region is not cache-aligned), then a flush of<BR>&nbsp;&nbsp;one region may result in overwriting data that hardware has<BR>&nbsp;&nbsp;written to another region in the same cache-line. This can<BR>&nbsp;&nbsp;happen for example in network drivers where descriptors for<BR>&nbsp;&nbsp;buffers are typically smaller than the CPU cache-line (e.g.<BR>&nbsp;&nbsp;16 bytes vs. 32 or 64 bytes).</P>
<P>&nbsp;&nbsp;Non-cached memory is only supported on 32-bit ARM at present.</P>
<P>- CONFIG_SYS_BOOTM_LEN:<BR>&nbsp;&nbsp;Normally compressed uImages are limited to an<BR>&nbsp;&nbsp;uncompressed size of 8 MBytes. If this is not enough,<BR>&nbsp;&nbsp;you can define CONFIG_SYS_BOOTM_LEN in your board config file<BR>&nbsp;&nbsp;to adjust this setting to your needs.</P>
<P>- CONFIG_SYS_BOOTMAPSZ:<BR>&nbsp;&nbsp;Maximum size of memory mapped by the startup code of<BR>&nbsp;&nbsp;the Linux kernel; all data that must be processed by<BR>&nbsp;&nbsp;the Linux kernel (bd_info, boot arguments, FDT blob if<BR>&nbsp;&nbsp;used) must be put below this limit, unless "bootm_low"<BR>&nbsp;&nbsp;environment variable is defined and non-zero. In such case<BR>&nbsp;&nbsp;all data for the Linux kernel must be between "bootm_low"<BR>&nbsp;&nbsp;and "bootm_low" + CONFIG_SYS_BOOTMAPSZ.&nbsp; The environment<BR>&nbsp;&nbsp;variable "bootm_mapsize" will override the value of<BR>&nbsp;&nbsp;CONFIG_SYS_BOOTMAPSZ.&nbsp; If CONFIG_SYS_BOOTMAPSZ is undefined,<BR>&nbsp;&nbsp;then the value in "bootm_size" will be used instead.</P>
<P>- CONFIG_SYS_BOOT_RAMDISK_HIGH:<BR>&nbsp;&nbsp;Enable initrd_high functionality.&nbsp; If defined then the<BR>&nbsp;&nbsp;initrd_high feature is enabled and the bootm ramdisk subcommand<BR>&nbsp;&nbsp;is enabled.</P>
<P>- CONFIG_SYS_BOOT_GET_CMDLINE:<BR>&nbsp;&nbsp;Enables allocating and saving kernel cmdline in space between<BR>&nbsp;&nbsp;"bootm_low" and "bootm_low" + BOOTMAPSZ.</P>
<P>- CONFIG_SYS_BOOT_GET_KBD:<BR>&nbsp;&nbsp;Enables allocating and saving a kernel copy of the bd_info in<BR>&nbsp;&nbsp;space between "bootm_low" and "bootm_low" + BOOTMAPSZ.</P>
<P>- CONFIG_SYS_MAX_FLASH_BANKS:<BR>&nbsp;&nbsp;Max number of Flash memory banks</P>
<P>- CONFIG_SYS_MAX_FLASH_SECT:<BR>&nbsp;&nbsp;Max number of sectors on a Flash chip</P>
<P>- CONFIG_SYS_FLASH_ERASE_TOUT:<BR>&nbsp;&nbsp;Timeout for Flash erase operations (in ms)</P>
<P>- CONFIG_SYS_FLASH_WRITE_TOUT:<BR>&nbsp;&nbsp;Timeout for Flash write operations (in ms)</P>
<P>- CONFIG_SYS_FLASH_LOCK_TOUT<BR>&nbsp;&nbsp;Timeout for Flash set sector lock bit operation (in ms)</P>
<P>- CONFIG_SYS_FLASH_UNLOCK_TOUT<BR>&nbsp;&nbsp;Timeout for Flash clear lock bits operation (in ms)</P>
<P>- CONFIG_SYS_FLASH_PROTECTION<BR>&nbsp;&nbsp;If defined, hardware flash sectors protection is used<BR>&nbsp;&nbsp;instead of U-Boot software protection.</P>
<P>- CONFIG_SYS_DIRECT_FLASH_TFTP:</P>
<P>&nbsp;&nbsp;Enable TFTP transfers directly to flash memory;<BR>&nbsp;&nbsp;without this option such a download has to be<BR>&nbsp;&nbsp;performed in two steps: (1) download to RAM, and (2)<BR>&nbsp;&nbsp;copy from RAM to flash.</P>
<P>&nbsp;&nbsp;The two-step approach is usually more reliable, since<BR>&nbsp;&nbsp;you can check if the download worked before you erase<BR>&nbsp;&nbsp;the flash, but in some situations (when system RAM is<BR>&nbsp;&nbsp;too limited to allow for a temporary copy of the<BR>&nbsp;&nbsp;downloaded image) this option may be very useful.</P>
<P>- CONFIG_SYS_FLASH_CFI:<BR>&nbsp;&nbsp;Define if the flash driver uses extra elements in the<BR>&nbsp;&nbsp;common flash structure for storing flash geometry.</P>
<P>- CONFIG_FLASH_CFI_DRIVER<BR>&nbsp;&nbsp;This option also enables the building of the cfi_flash driver<BR>&nbsp;&nbsp;in the drivers directory</P>
<P>- CONFIG_FLASH_CFI_MTD<BR>&nbsp;&nbsp;This option enables the building of the cfi_mtd driver<BR>&nbsp;&nbsp;in the drivers directory. The driver exports CFI flash<BR>&nbsp;&nbsp;to the MTD layer.</P>
<P>- CONFIG_SYS_FLASH_USE_BUFFER_WRITE<BR>&nbsp;&nbsp;Use buffered writes to flash.</P>
<P>- CONFIG_FLASH_SPANSION_S29WS_N<BR>&nbsp;&nbsp;s29ws-n MirrorBit flash has non-standard addresses for buffered<BR>&nbsp;&nbsp;write commands.</P>
<P>- CONFIG_SYS_FLASH_QUIET_TEST<BR>&nbsp;&nbsp;If this option is defined, the common CFI flash doesn't<BR>&nbsp;&nbsp;print it's warning upon not recognized FLASH banks. This<BR>&nbsp;&nbsp;is useful, if some of the configured banks are only<BR>&nbsp;&nbsp;optionally available.</P>
<P>- CONFIG_FLASH_SHOW_PROGRESS<BR>&nbsp;&nbsp;If defined (must be an integer), print out countdown<BR>&nbsp;&nbsp;digits and dots.&nbsp; Recommended value: 45 (9..1) for 80<BR>&nbsp;&nbsp;column displays, 15 (3..1) for 40 column displays.</P>
<P>- CONFIG_FLASH_VERIFY<BR>&nbsp;&nbsp;If defined, the content of the flash (destination) is compared<BR>&nbsp;&nbsp;against the source after the write operation. An error message<BR>&nbsp;&nbsp;will be printed when the contents are not identical.<BR>&nbsp;&nbsp;Please note that this option is useless in nearly all cases,<BR>&nbsp;&nbsp;since such flash programming errors usually are detected earlier<BR>&nbsp;&nbsp;while unprotecting/erasing/programming. Please only enable<BR>&nbsp;&nbsp;this option if you really know what you are doing.</P>
<P>- CONFIG_SYS_RX_ETH_BUFFER:<BR>&nbsp;&nbsp;Defines the number of Ethernet receive buffers. On some<BR>&nbsp;&nbsp;Ethernet controllers it is recommended to set this value<BR>&nbsp;&nbsp;to 8 or even higher (EEPRO100 or 405 EMAC), since all<BR>&nbsp;&nbsp;buffers can be full shortly after enabling the interface<BR>&nbsp;&nbsp;on high Ethernet traffic.<BR>&nbsp;&nbsp;Defaults to 4 if not defined.</P>
<P>- CONFIG_ENV_MAX_ENTRIES</P>
<P>&nbsp;Maximum number of entries in the hash table that is used<BR>&nbsp;internally to store the environment settings. The default<BR>&nbsp;setting is supposed to be generous and should work in most<BR>&nbsp;cases. This setting can be used to tune behaviour; see<BR>&nbsp;lib/hashtable.c for details.</P>
<P>- CONFIG_ENV_FLAGS_LIST_DEFAULT<BR>- CONFIG_ENV_FLAGS_LIST_STATIC<BR>&nbsp;Enable validation of the values given to environment variables when<BR>&nbsp;calling env set.&nbsp; Variables can be restricted to only decimal,<BR>&nbsp;hexadecimal, or boolean.&nbsp; If CONFIG_CMD_NET is also defined,<BR>&nbsp;the variables can also be restricted to IP address or MAC address.</P>
<P>&nbsp;The format of the list is:<BR>&nbsp;&nbsp;type_attribute = [s|d|x|b|i|m]<BR>&nbsp;&nbsp;access_attribute = [a|r|o|c]<BR>&nbsp;&nbsp;attributes = type_attribute[access_attribute]<BR>&nbsp;&nbsp;entry = variable_name[:attributes]<BR>&nbsp;&nbsp;list = entry[,list]</P>
<P>&nbsp;The type attributes are:<BR>&nbsp;&nbsp;s - String (default)<BR>&nbsp;&nbsp;d - Decimal<BR>&nbsp;&nbsp;x - Hexadecimal<BR>&nbsp;&nbsp;b - Boolean ([1yYtT|0nNfF])<BR>&nbsp;&nbsp;i - IP address<BR>&nbsp;&nbsp;m - MAC address</P>
<P>&nbsp;The access attributes are:<BR>&nbsp;&nbsp;a - Any (default)<BR>&nbsp;&nbsp;r - Read-only<BR>&nbsp;&nbsp;o - Write-once<BR>&nbsp;&nbsp;c - Change-default</P>
<P>&nbsp;- CONFIG_ENV_FLAGS_LIST_DEFAULT<BR>&nbsp;&nbsp;Define this to a list (string) to define the ".flags"<BR>&nbsp;&nbsp;environment variable in the default or embedded environment.</P>
<P>&nbsp;- CONFIG_ENV_FLAGS_LIST_STATIC<BR>&nbsp;&nbsp;Define this to a list (string) to define validation that<BR>&nbsp;&nbsp;should be done if an entry is not found in the ".flags"<BR>&nbsp;&nbsp;environment variable.&nbsp; To override a setting in the static<BR>&nbsp;&nbsp;list, simply add an entry for the same variable name to the<BR>&nbsp;&nbsp;".flags" variable.</P>
<P>- CONFIG_ENV_ACCESS_IGNORE_FORCE<BR>&nbsp;If defined, don't allow the -f switch to env set override variable<BR>&nbsp;access flags.</P>
<P>- CONFIG_SYS_GENERIC_BOARD<BR>&nbsp;This selects the architecture-generic board system instead of the<BR>&nbsp;architecture-specific board files. It is intended to move boards<BR>&nbsp;to this new framework over time. Defining this will disable the<BR>&nbsp;arch/foo/lib/board.c file and use common/board_f.c and<BR>&nbsp;common/board_r.c instead. To use this option your architecture<BR>&nbsp;must support it (i.e. must select HAVE_GENERIC_BOARD in arch/Kconfig).<BR>&nbsp;If you find problems enabling this option on your board please report<BR>&nbsp;the problem and send patches!</P>
<P>- CONFIG_OMAP_PLATFORM_RESET_TIME_MAX_USEC (OMAP only)<BR>&nbsp;This is set by OMAP boards for the max time that reset should<BR>&nbsp;be asserted. See doc/README.omap-reset-time for details on how<BR>&nbsp;the value can be calculated on a given board.</P>
<P>- CONFIG_USE_STDINT<BR>&nbsp;If stdint.h is available with your toolchain you can define this<BR>&nbsp;option to enable it. You can provide option 'USE_STDINT=1' when<BR>&nbsp;building U-Boot to enable this.</P>
<P>The following definitions that deal with the placement and management<BR>of environment data (variable area); in general, we support the<BR>following configurations:</P>
<P>- CONFIG_BUILD_ENVCRC:</P>
<P>&nbsp;Builds up envcrc with the target environment so that external utils<BR>&nbsp;may easily extract it and embed it in final U-Boot images.</P>
<P>- CONFIG_ENV_IS_IN_FLASH:</P>
<P>&nbsp;Define this if the environment is in flash memory.</P>
<P>&nbsp;a) The environment occupies one whole flash sector, which is<BR>&nbsp;&nbsp;&nbsp; "embedded" in the text segment with the U-Boot code. This<BR>&nbsp;&nbsp;&nbsp; happens usually with "bottom boot sector" or "top boot<BR>&nbsp;&nbsp;&nbsp; sector" type flash chips, which have several smaller<BR>&nbsp;&nbsp;&nbsp; sectors at the start or the end. For instance, such a<BR>&nbsp;&nbsp;&nbsp; layout can have sector sizes of 8, 2x4, 16, Nx32 kB. In<BR>&nbsp;&nbsp;&nbsp; such a case you would place the environment in one of the<BR>&nbsp;&nbsp;&nbsp; 4 kB sectors - with U-Boot code before and after it. With<BR>&nbsp;&nbsp;&nbsp; "top boot sector" type flash chips, you would put the<BR>&nbsp;&nbsp;&nbsp; environment in one of the last sectors, leaving a gap<BR>&nbsp;&nbsp;&nbsp; between U-Boot and the environment.</P>
<P>&nbsp;- CONFIG_ENV_OFFSET:</P>
<P>&nbsp;&nbsp;&nbsp; Offset of environment data (variable area) to the<BR>&nbsp;&nbsp;&nbsp; beginning of flash memory; for instance, with bottom boot<BR>&nbsp;&nbsp;&nbsp; type flash chips the second sector can be used: the offset<BR>&nbsp;&nbsp;&nbsp; for this sector is given here.</P>
<P>&nbsp;&nbsp;&nbsp; CONFIG_ENV_OFFSET is used relative to CONFIG_SYS_FLASH_BASE.</P>
<P>&nbsp;- CONFIG_ENV_ADDR:</P>
<P>&nbsp;&nbsp;&nbsp; This is just another way to specify the start address of<BR>&nbsp;&nbsp;&nbsp; the flash sector containing the environment (instead of<BR>&nbsp;&nbsp;&nbsp; CONFIG_ENV_OFFSET).</P>
<P>&nbsp;- CONFIG_ENV_SECT_SIZE:</P>
<P>&nbsp;&nbsp;&nbsp; Size of the sector containing the environment.</P>
<P><BR>&nbsp;b) Sometimes flash chips have few, equal sized, BIG sectors.<BR>&nbsp;&nbsp;&nbsp; In such a case you don't want to spend a whole sector for<BR>&nbsp;&nbsp;&nbsp; the environment.</P>
<P>&nbsp;- CONFIG_ENV_SIZE:</P>
<P>&nbsp;&nbsp;&nbsp; If you use this in combination with CONFIG_ENV_IS_IN_FLASH<BR>&nbsp;&nbsp;&nbsp; and CONFIG_ENV_SECT_SIZE, you can specify to use only a part<BR>&nbsp;&nbsp;&nbsp; of this flash sector for the environment. This saves<BR>&nbsp;&nbsp;&nbsp; memory for the RAM copy of the environment.</P>
<P>&nbsp;&nbsp;&nbsp; It may also save flash memory if you decide to use this<BR>&nbsp;&nbsp;&nbsp; when your environment is "embedded" within U-Boot code,<BR>&nbsp;&nbsp;&nbsp; since then the remainder of the flash sector could be used<BR>&nbsp;&nbsp;&nbsp; for U-Boot code. It should be pointed out that this is<BR>&nbsp;&nbsp;&nbsp; STRONGLY DISCOURAGED from a robustness point of view:<BR>&nbsp;&nbsp;&nbsp; updating the environment in flash makes it always<BR>&nbsp;&nbsp;&nbsp; necessary to erase the WHOLE sector. If something goes<BR>&nbsp;&nbsp;&nbsp; wrong before the contents has been restored from a copy in<BR>&nbsp;&nbsp;&nbsp; RAM, your target system will be dead.</P>
<P>&nbsp;- CONFIG_ENV_ADDR_REDUND<BR>&nbsp;&nbsp; CONFIG_ENV_SIZE_REDUND</P>
<P>&nbsp;&nbsp;&nbsp; These settings describe a second storage area used to hold<BR>&nbsp;&nbsp;&nbsp; a redundant copy of the environment data, so that there is<BR>&nbsp;&nbsp;&nbsp; a valid backup copy in case there is a power failure during<BR>&nbsp;&nbsp;&nbsp; a "saveenv" operation.</P>
<P>BE CAREFUL! Any changes to the flash layout, and some changes to the<BR>source code will make it necessary to adapt &lt;board&gt;/u-boot.lds*<BR>accordingly!</P>
<P><BR>- CONFIG_ENV_IS_IN_NVRAM:</P>
<P>&nbsp;Define this if you have some non-volatile memory device<BR>&nbsp;(NVRAM, battery buffered SRAM) which you want to use for the<BR>&nbsp;environment.</P>
<P>&nbsp;- CONFIG_ENV_ADDR:<BR>&nbsp;- CONFIG_ENV_SIZE:</P>
<P>&nbsp;&nbsp; These two #defines are used to determine the memory area you<BR>&nbsp;&nbsp; want to use for environment. It is assumed that this memory<BR>&nbsp;&nbsp; can just be read and written to, without any special<BR>&nbsp;&nbsp; provision.</P>
<P>BE CAREFUL! The first access to the environment happens quite early<BR>in U-Boot initialization (when we try to get the setting of for the<BR>console baudrate). You *MUST* have mapped your NVRAM area then, or<BR>U-Boot will hang.</P>
<P>Please note that even with NVRAM we still use a copy of the<BR>environment in RAM: we could work on NVRAM directly, but we want to<BR>keep settings there always unmodified except somebody uses "saveenv"<BR>to save the current settings.</P>
<P><BR>- CONFIG_ENV_IS_IN_EEPROM:</P>
<P>&nbsp;Use this if you have an EEPROM or similar serial access<BR>&nbsp;device and a driver for it.</P>
<P>&nbsp;- CONFIG_ENV_OFFSET:<BR>&nbsp;- CONFIG_ENV_SIZE:</P>
<P>&nbsp;&nbsp; These two #defines specify the offset and size of the<BR>&nbsp;&nbsp; environment area within the total memory of your EEPROM.</P>
<P>&nbsp;- CONFIG_SYS_I2C_EEPROM_ADDR:<BR>&nbsp;&nbsp; If defined, specified the chip address of the EEPROM device.<BR>&nbsp;&nbsp; The default address is zero.</P>
<P>&nbsp;- CONFIG_SYS_I2C_EEPROM_BUS:<BR>&nbsp;&nbsp; If defined, specified the i2c bus of the EEPROM device.</P>
<P>&nbsp;- CONFIG_SYS_EEPROM_PAGE_WRITE_BITS:<BR>&nbsp;&nbsp; If defined, the number of bits used to address bytes in a<BR>&nbsp;&nbsp; single page in the EEPROM device.&nbsp; A 64 byte page, for example<BR>&nbsp;&nbsp; would require six bits.</P>
<P>&nbsp;- CONFIG_SYS_EEPROM_PAGE_WRITE_DELAY_MS:<BR>&nbsp;&nbsp; If defined, the number of milliseconds to delay between<BR>&nbsp;&nbsp; page writes.&nbsp;The default is zero milliseconds.</P>
<P>&nbsp;- CONFIG_SYS_I2C_EEPROM_ADDR_LEN:<BR>&nbsp;&nbsp; The length in bytes of the EEPROM memory array address.&nbsp; Note<BR>&nbsp;&nbsp; that this is NOT the chip address length!</P>
<P>&nbsp;- CONFIG_SYS_I2C_EEPROM_ADDR_OVERFLOW:<BR>&nbsp;&nbsp; EEPROM chips that implement "address overflow" are ones<BR>&nbsp;&nbsp; like Catalyst 24WC04/08/16 which has 9/10/11 bits of<BR>&nbsp;&nbsp; address and the extra bits end up in the "chip address" bit<BR>&nbsp;&nbsp; slots. This makes a 24WC08 (1Kbyte) chip look like four 256<BR>&nbsp;&nbsp; byte chips.</P>
<P>&nbsp;&nbsp; Note that we consider the length of the address field to<BR>&nbsp;&nbsp; still be one byte because the extra address bits are hidden<BR>&nbsp;&nbsp; in the chip address.</P>
<P>&nbsp;- CONFIG_SYS_EEPROM_SIZE:<BR>&nbsp;&nbsp; The size in bytes of the EEPROM device.</P>
<P>&nbsp;- CONFIG_ENV_EEPROM_IS_ON_I2C<BR>&nbsp;&nbsp; define this, if you have I2C and SPI activated, and your<BR>&nbsp;&nbsp; EEPROM, which holds the environment, is on the I2C bus.</P>
<P>&nbsp;- CONFIG_I2C_ENV_EEPROM_BUS<BR>&nbsp;&nbsp; if you have an Environment on an EEPROM reached over<BR>&nbsp;&nbsp; I2C muxes, you can define here, how to reach this<BR>&nbsp;&nbsp; EEPROM. For example:</P>
<P>&nbsp;&nbsp; #define CONFIG_I2C_ENV_EEPROM_BUS&nbsp;&nbsp; 1</P>
<P>&nbsp;&nbsp; EEPROM which holds the environment, is reached over<BR>&nbsp;&nbsp; a pca9547 i2c mux with address 0x70, channel 3.</P>
<P>- CONFIG_ENV_IS_IN_DATAFLASH:</P>
<P>&nbsp;Define this if you have a DataFlash memory device which you<BR>&nbsp;want to use for the environment.</P>
<P>&nbsp;- CONFIG_ENV_OFFSET:<BR>&nbsp;- CONFIG_ENV_ADDR:<BR>&nbsp;- CONFIG_ENV_SIZE:</P>
<P>&nbsp;&nbsp; These three #defines specify the offset and size of the<BR>&nbsp;&nbsp; environment area within the total memory of your DataFlash placed<BR>&nbsp;&nbsp; at the specified address.</P>
<P>- CONFIG_ENV_IS_IN_SPI_FLASH:</P>
<P>&nbsp;Define this if you have a SPI Flash memory device which you<BR>&nbsp;want to use for the environment.</P>
<P>&nbsp;- CONFIG_ENV_OFFSET:<BR>&nbsp;- CONFIG_ENV_SIZE:</P>
<P>&nbsp;&nbsp; These two #defines specify the offset and size of the<BR>&nbsp;&nbsp; environment area within the SPI Flash. CONFIG_ENV_OFFSET must be<BR>&nbsp;&nbsp; aligned to an erase sector boundary.</P>
<P>&nbsp;- CONFIG_ENV_SECT_SIZE:</P>
<P>&nbsp;&nbsp; Define the SPI flash's sector size.</P>
<P>&nbsp;- CONFIG_ENV_OFFSET_REDUND (optional):</P>
<P>&nbsp;&nbsp; This setting describes a second storage area of CONFIG_ENV_SIZE<BR>&nbsp;&nbsp; size used to hold a redundant copy of the environment data, so<BR>&nbsp;&nbsp; that there is a valid backup copy in case there is a power failure<BR>&nbsp;&nbsp; during a "saveenv" operation. CONFIG_ENV_OFFSET_RENDUND must be<BR>&nbsp;&nbsp; aligned to an erase sector boundary.</P>
<P>&nbsp;- CONFIG_ENV_SPI_BUS (optional):<BR>&nbsp;- CONFIG_ENV_SPI_CS (optional):</P>
<P>&nbsp;&nbsp; Define the SPI bus and chip select. If not defined they will be 0.</P>
<P>&nbsp;- CONFIG_ENV_SPI_MAX_HZ (optional):</P>
<P>&nbsp;&nbsp; Define the SPI max work clock. If not defined then use 1MHz.</P>
<P>&nbsp;- CONFIG_ENV_SPI_MODE (optional):</P>
<P>&nbsp;&nbsp; Define the SPI work mode. If not defined then use SPI_MODE_3.</P>
<P>- CONFIG_ENV_IS_IN_REMOTE:</P>
<P>&nbsp;Define this if you have a remote memory space which you<BR>&nbsp;want to use for the local device's environment.</P>
<P>&nbsp;- CONFIG_ENV_ADDR:<BR>&nbsp;- CONFIG_ENV_SIZE:</P>
<P>&nbsp;&nbsp; These two #defines specify the address and size of the<BR>&nbsp;&nbsp; environment area within the remote memory space. The<BR>&nbsp;&nbsp; local device can get the environment from remote memory<BR>&nbsp;&nbsp; space by SRIO or PCIE links.</P>
<P>BE CAREFUL! For some special cases, the local device can not use<BR>"saveenv" command. For example, the local device will get the<BR>environment stored in a remote NOR flash by SRIO or PCIE link,<BR>but it can not erase, write this NOR flash by SRIO or PCIE interface.</P>
<P>- CONFIG_ENV_IS_IN_NAND:</P>
<P>&nbsp;Define this if you have a NAND device which you want to use<BR>&nbsp;for the environment.</P>
<P>&nbsp;- CONFIG_ENV_OFFSET:<BR>&nbsp;- CONFIG_ENV_SIZE:</P>
<P>&nbsp;&nbsp; These two #defines specify the offset and size of the environment<BR>&nbsp;&nbsp; area within the first NAND device.&nbsp; CONFIG_ENV_OFFSET must be<BR>&nbsp;&nbsp; aligned to an erase block boundary.</P>
<P>&nbsp;- CONFIG_ENV_OFFSET_REDUND (optional):</P>
<P>&nbsp;&nbsp; This setting describes a second storage area of CONFIG_ENV_SIZE<BR>&nbsp;&nbsp; size used to hold a redundant copy of the environment data, so<BR>&nbsp;&nbsp; that there is a valid backup copy in case there is a power failure<BR>&nbsp;&nbsp; during a "saveenv" operation.&nbsp; CONFIG_ENV_OFFSET_RENDUND must be<BR>&nbsp;&nbsp; aligned to an erase block boundary.</P>
<P>&nbsp;- CONFIG_ENV_RANGE (optional):</P>
<P>&nbsp;&nbsp; Specifies the length of the region in which the environment<BR>&nbsp;&nbsp; can be written.&nbsp; This should be a multiple of the NAND device's<BR>&nbsp;&nbsp; block size.&nbsp; Specifying a range with more erase blocks than<BR>&nbsp;&nbsp; are needed to hold CONFIG_ENV_SIZE allows bad blocks within<BR>&nbsp;&nbsp; the range to be avoided.</P>
<P>&nbsp;- CONFIG_ENV_OFFSET_OOB (optional):</P>
<P>&nbsp;&nbsp; Enables support for dynamically retrieving the offset of the<BR>&nbsp;&nbsp; environment from block zero's out-of-band data.&nbsp; The<BR>&nbsp;&nbsp; "nand env.oob" command can be used to record this offset.<BR>&nbsp;&nbsp; Currently, CONFIG_ENV_OFFSET_REDUND is not supported when<BR>&nbsp;&nbsp; using CONFIG_ENV_OFFSET_OOB.</P>
<P>- CONFIG_NAND_ENV_DST</P>
<P>&nbsp;Defines address in RAM to which the nand_spl code should copy the<BR>&nbsp;environment. If redundant environment is used, it will be copied to<BR>&nbsp;CONFIG_NAND_ENV_DST + CONFIG_ENV_SIZE.</P>
<P>- CONFIG_ENV_IS_IN_UBI:</P>
<P>&nbsp;Define this if you have an UBI volume that you want to use for the<BR>&nbsp;environment.&nbsp; This has the benefit of wear-leveling the environment<BR>&nbsp;accesses, which is important on NAND.</P>
<P>&nbsp;- CONFIG_ENV_UBI_PART:</P>
<P>&nbsp;&nbsp; Define this to a string that is the mtd partition containing the UBI.</P>
<P>&nbsp;- CONFIG_ENV_UBI_VOLUME:</P>
<P>&nbsp;&nbsp; Define this to the name of the volume that you want to store the<BR>&nbsp;&nbsp; environment in.</P>
<P>&nbsp;- CONFIG_ENV_UBI_VOLUME_REDUND:</P>
<P>&nbsp;&nbsp; Define this to the name of another volume to store a second copy of<BR>&nbsp;&nbsp; the environment in.&nbsp; This will enable redundant environments in UBI.<BR>&nbsp;&nbsp; It is assumed that both volumes are in the same MTD partition.</P>
<P>&nbsp;- CONFIG_UBI_SILENCE_MSG<BR>&nbsp;- CONFIG_UBIFS_SILENCE_MSG</P>
<P>&nbsp;&nbsp; You will probably want to define these to avoid a really noisy system<BR>&nbsp;&nbsp; when storing the env in UBI.</P>
<P>- CONFIG_ENV_IS_IN_FAT:<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Define this if you want to use the FAT file system for the environment.</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - FAT_ENV_INTERFACE:</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Define this to a string that is the name of the block device.</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - FAT_ENV_DEV_AND_PART:</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Define this to a string to specify the partition of the device. It can<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; be as following:</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "D:P", "D:0", "D", "D:" or "D:auto" (D, P are integers. And P &gt;= 1)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - "D:P": device D partition P. Error occurs if device D has no<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; partition table.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - "D:0": device D.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - "D" or "D:": device D partition 1 if device D has partition<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; table, or the whole device D if has no partition<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; table.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - "D:auto": first partition in device D with bootable flag set.<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; If none, first valid partition in device D. If no<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; partition table then means device D.</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - FAT_ENV_FILE:</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; It's a string of the FAT file name. This file use to store the<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; environment.</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; - CONFIG_FAT_WRITE:<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; This should be defined. Otherwise it cannot save the environment file.</P>
<P>- CONFIG_ENV_IS_IN_MMC:</P>
<P>&nbsp;Define this if you have an MMC device which you want to use for the<BR>&nbsp;environment.</P>
<P>&nbsp;- CONFIG_SYS_MMC_ENV_DEV:</P>
<P>&nbsp;&nbsp; Specifies which MMC device the environment is stored in.</P>
<P>&nbsp;- CONFIG_SYS_MMC_ENV_PART (optional):</P>
<P>&nbsp;&nbsp; Specifies which MMC partition the environment is stored in. If not<BR>&nbsp;&nbsp; set, defaults to partition 0, the user area. Common values might be<BR>&nbsp;&nbsp; 1 (first MMC boot partition), 2 (second MMC boot partition).</P>
<P>&nbsp;- CONFIG_ENV_OFFSET:<BR>&nbsp;- CONFIG_ENV_SIZE:</P>
<P>&nbsp;&nbsp; These two #defines specify the offset and size of the environment<BR>&nbsp;&nbsp; area within the specified MMC device.</P>
<P>&nbsp;&nbsp; If offset is positive (the usual case), it is treated as relative to<BR>&nbsp;&nbsp; the start of the MMC partition. If offset is negative, it is treated<BR>&nbsp;&nbsp; as relative to the end of the MMC partition. This can be useful if<BR>&nbsp;&nbsp; your board may be fitted with different MMC devices, which have<BR>&nbsp;&nbsp; different sizes for the MMC partitions, and you always want the<BR>&nbsp;&nbsp; environment placed at the very end of the partition, to leave the<BR>&nbsp;&nbsp; maximum possible space before it, to store other data.</P>
<P>&nbsp;&nbsp; These two values are in units of bytes, but must be aligned to an<BR>&nbsp;&nbsp; MMC sector boundary.</P>
<P>&nbsp;- CONFIG_ENV_OFFSET_REDUND (optional):</P>
<P>&nbsp;&nbsp; Specifies a second storage area, of CONFIG_ENV_SIZE size, used to<BR>&nbsp;&nbsp; hold a redundant copy of the environment data. This provides a<BR>&nbsp;&nbsp; valid backup copy in case the other copy is corrupted, e.g. due<BR>&nbsp;&nbsp; to a power failure during a "saveenv" operation.</P>
<P>&nbsp;&nbsp; This value may also be positive or negative; this is handled in the<BR>&nbsp;&nbsp; same way as CONFIG_ENV_OFFSET.</P>
<P>&nbsp;&nbsp; This value is also in units of bytes, but must also be aligned to<BR>&nbsp;&nbsp; an MMC sector boundary.</P>
<P>&nbsp;- CONFIG_ENV_SIZE_REDUND (optional):</P>
<P>&nbsp;&nbsp; This value need not be set, even when CONFIG_ENV_OFFSET_REDUND is<BR>&nbsp;&nbsp; set. If this value is set, it must be set to the same value as<BR>&nbsp;&nbsp; CONFIG_ENV_SIZE.</P>
<P>- CONFIG_SYS_SPI_INIT_OFFSET</P>
<P>&nbsp;Defines offset to the initial SPI buffer area in DPRAM. The<BR>&nbsp;area is used at an early stage (ROM part) if the environment<BR>&nbsp;is configured to reside in the SPI EEPROM: We need a 520 byte<BR>&nbsp;scratch DPRAM area. It is used between the two initialization<BR>&nbsp;calls (spi_init_f() and spi_init_r()). A value of 0xB00 seems<BR>&nbsp;to be a good choice since it makes it far enough from the<BR>&nbsp;start of the data area as well as from the stack pointer.</P>
<P>Please note that the environment is read-only until the monitor<BR>has been relocated to RAM and a RAM copy of the environment has been<BR>created; also, when using EEPROM you will have to use getenv_f()<BR>until then to read environment variables.</P>
<P>The environment is protected by a CRC32 checksum. Before the monitor<BR>is relocated into RAM, as a result of a bad CRC you will be working<BR>with the compiled-in default environment - *silently*!!! [This is<BR>necessary, because the first environment variable we need is the<BR>"baudrate" setting for the console - if we have a bad CRC, we don't<BR>have any device yet where we could complain.]</P>
<P>Note: once the monitor has been relocated, then it will complain if<BR>the default environment is used; a new CRC is computed as soon as you<BR>use the "saveenv" command to store a valid environment.</P>
<P>- CONFIG_SYS_FAULT_ECHO_LINK_DOWN:<BR>&nbsp;&nbsp;Echo the inverted Ethernet link state to the fault LED.</P>
<P>&nbsp;&nbsp;Note: If this option is active, then CONFIG_SYS_FAULT_MII_ADDR<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; also needs to be defined.</P>
<P>- CONFIG_SYS_FAULT_MII_ADDR:<BR>&nbsp;&nbsp;MII address of the PHY to check for the Ethernet link state.</P>
<P>- CONFIG_NS16550_MIN_FUNCTIONS:<BR>&nbsp;&nbsp;Define this if you desire to only have use of the NS16550_init<BR>&nbsp;&nbsp;and NS16550_putc functions for the serial driver located at<BR>&nbsp;&nbsp;drivers/serial/ns16550.c.&nbsp; This option is useful for saving<BR>&nbsp;&nbsp;space for already greatly restricted images, including but not<BR>&nbsp;&nbsp;limited to NAND_SPL configurations.</P>
<P>- CONFIG_DISPLAY_BOARDINFO<BR>&nbsp;&nbsp;Display information about the board that U-Boot is running on<BR>&nbsp;&nbsp;when U-Boot starts up. The board function checkboard() is called<BR>&nbsp;&nbsp;to do this.</P>
<P>- CONFIG_DISPLAY_BOARDINFO_LATE<BR>&nbsp;&nbsp;Similar to the previous option, but display this information<BR>&nbsp;&nbsp;later, once stdio is running and output goes to the LCD, if<BR>&nbsp;&nbsp;present.</P>
<P>- CONFIG_BOARD_SIZE_LIMIT:<BR>&nbsp;&nbsp;Maximum size of the U-Boot image. When defined, the<BR>&nbsp;&nbsp;build system checks that the actual size does not<BR>&nbsp;&nbsp;exceed it.</P>
<P>Low Level (hardware related) configuration options:<BR>---------------------------------------------------</P>
<P>- CONFIG_SYS_CACHELINE_SIZE:<BR>&nbsp;&nbsp;Cache Line Size of the CPU.</P>
<P>- CONFIG_SYS_DEFAULT_IMMR:<BR>&nbsp;&nbsp;Default address of the IMMR after system reset.</P>
<P>&nbsp;&nbsp;Needed on some 8260 systems (MPC8260ADS, PQ2FADS-ZU,<BR>&nbsp;&nbsp;and RPXsuper) to be able to adjust the position of<BR>&nbsp;&nbsp;the IMMR register after a reset.</P>
<P>- CONFIG_SYS_CCSRBAR_DEFAULT:<BR>&nbsp;&nbsp;Default (power-on reset) physical address of CCSR on Freescale<BR>&nbsp;&nbsp;PowerPC SOCs.</P>
<P>- CONFIG_SYS_CCSRBAR:<BR>&nbsp;&nbsp;Virtual address of CCSR.&nbsp; On a 32-bit build, this is typically<BR>&nbsp;&nbsp;the same value as CONFIG_SYS_CCSRBAR_DEFAULT.</P>
<P>&nbsp;&nbsp;CONFIG_SYS_DEFAULT_IMMR must also be set to this value,<BR>&nbsp;&nbsp;for cross-platform code that uses that macro instead.</P>
<P>- CONFIG_SYS_CCSRBAR_PHYS:<BR>&nbsp;&nbsp;Physical address of CCSR.&nbsp; CCSR can be relocated to a new<BR>&nbsp;&nbsp;physical address, if desired.&nbsp; In this case, this macro should<BR>&nbsp;&nbsp;be set to that address.&nbsp; Otherwise, it should be set to the<BR>&nbsp;&nbsp;same value as CONFIG_SYS_CCSRBAR_DEFAULT.&nbsp; For example, CCSR<BR>&nbsp;&nbsp;is typically relocated on 36-bit builds.&nbsp; It is recommended<BR>&nbsp;&nbsp;that this macro be defined via the _HIGH and _LOW macros:</P>
<P>&nbsp;&nbsp;#define CONFIG_SYS_CCSRBAR_PHYS ((CONFIG_SYS_CCSRBAR_PHYS_HIGH<BR>&nbsp;&nbsp;&nbsp;* 1ull) &lt;&lt; 32 | CONFIG_SYS_CCSRBAR_PHYS_LOW)</P>
<P>- CONFIG_SYS_CCSRBAR_PHYS_HIGH:<BR>&nbsp;&nbsp;Bits 33-36 of CONFIG_SYS_CCSRBAR_PHYS.&nbsp;This value is typically<BR>&nbsp;&nbsp;either 0 (32-bit build) or 0xF (36-bit build).&nbsp;This macro is<BR>&nbsp;&nbsp;used in assembly code, so it must not contain typecasts or<BR>&nbsp;&nbsp;integer size suffixes (e.g. "ULL").</P>
<P>- CONFIG_SYS_CCSRBAR_PHYS_LOW:<BR>&nbsp;&nbsp;Lower 32-bits of CONFIG_SYS_CCSRBAR_PHYS.&nbsp; This macro is<BR>&nbsp;&nbsp;used in assembly code, so it must not contain typecasts or<BR>&nbsp;&nbsp;integer size suffixes (e.g. "ULL").</P>
<P>- CONFIG_SYS_CCSR_DO_NOT_RELOCATE:<BR>&nbsp;&nbsp;If this macro is defined, then CONFIG_SYS_CCSRBAR_PHYS will be<BR>&nbsp;&nbsp;forced to a value that ensures that CCSR is not relocated.</P>
<P>- Floppy Disk Support:<BR>&nbsp;&nbsp;CONFIG_SYS_FDC_DRIVE_NUMBER</P>
<P>&nbsp;&nbsp;the default drive number (default value 0)</P>
<P>&nbsp;&nbsp;CONFIG_SYS_ISA_IO_STRIDE</P>
<P>&nbsp;&nbsp;defines the spacing between FDC chipset registers<BR>&nbsp;&nbsp;(default value 1)</P>
<P>&nbsp;&nbsp;CONFIG_SYS_ISA_IO_OFFSET</P>
<P>&nbsp;&nbsp;defines the offset of register from address. It<BR>&nbsp;&nbsp;depends on which part of the data bus is connected to<BR>&nbsp;&nbsp;the FDC chipset. (default value 0)</P>
<P>&nbsp;&nbsp;If CONFIG_SYS_ISA_IO_STRIDE CONFIG_SYS_ISA_IO_OFFSET and<BR>&nbsp;&nbsp;CONFIG_SYS_FDC_DRIVE_NUMBER are undefined, they take their<BR>&nbsp;&nbsp;default value.</P>
<P>&nbsp;&nbsp;if CONFIG_SYS_FDC_HW_INIT is defined, then the function<BR>&nbsp;&nbsp;fdc_hw_init() is called at the beginning of the FDC<BR>&nbsp;&nbsp;setup. fdc_hw_init() must be provided by the board<BR>&nbsp;&nbsp;source code. It is used to make hardware-dependent<BR>&nbsp;&nbsp;initializations.</P>
<P>- CONFIG_IDE_AHB:<BR>&nbsp;&nbsp;Most IDE controllers were designed to be connected with PCI<BR>&nbsp;&nbsp;interface. Only few of them were designed for AHB interface.<BR>&nbsp;&nbsp;When software is doing ATA command and data transfer to<BR>&nbsp;&nbsp;IDE devices through IDE-AHB controller, some additional<BR>&nbsp;&nbsp;registers accessing to these kind of IDE-AHB controller<BR>&nbsp;&nbsp;is required.</P>
<P>- CONFIG_SYS_IMMR:&nbsp;Physical address of the Internal Memory.<BR>&nbsp;&nbsp;DO NOT CHANGE unless you know exactly what you're<BR>&nbsp;&nbsp;doing! (11-4) [MPC8xx/82xx systems only]</P>
<P>- CONFIG_SYS_INIT_RAM_ADDR:</P>
<P>&nbsp;&nbsp;Start address of memory area that can be used for<BR>&nbsp;&nbsp;initial data and stack; please note that this must be<BR>&nbsp;&nbsp;writable memory that is working WITHOUT special<BR>&nbsp;&nbsp;initialization, i. e. you CANNOT use normal RAM which<BR>&nbsp;&nbsp;will become available only after programming the<BR>&nbsp;&nbsp;memory controller and running certain initialization<BR>&nbsp;&nbsp;sequences.</P>
<P>&nbsp;&nbsp;U-Boot uses the following memory types:<BR>&nbsp;&nbsp;- MPC8xx and MPC8260: IMMR (internal memory of the CPU)<BR>&nbsp;&nbsp;- MPC824X: data cache<BR>&nbsp;&nbsp;- PPC4xx:&nbsp; data cache</P>
<P>- CONFIG_SYS_GBL_DATA_OFFSET:</P>
<P>&nbsp;&nbsp;Offset of the initial data structure in the memory<BR>&nbsp;&nbsp;area defined by CONFIG_SYS_INIT_RAM_ADDR. Usually<BR>&nbsp;&nbsp;CONFIG_SYS_GBL_DATA_OFFSET is chosen such that the initial<BR>&nbsp;&nbsp;data is located at the end of the available space<BR>&nbsp;&nbsp;(sometimes written as (CONFIG_SYS_INIT_RAM_SIZE -<BR>&nbsp;&nbsp;CONFIG_SYS_INIT_DATA_SIZE), and the initial stack is just<BR>&nbsp;&nbsp;below that area (growing from (CONFIG_SYS_INIT_RAM_ADDR +<BR>&nbsp;&nbsp;CONFIG_SYS_GBL_DATA_OFFSET) downward.</P>
<P>&nbsp;Note:<BR>&nbsp;&nbsp;On the MPC824X (or other systems that use the data<BR>&nbsp;&nbsp;cache for initial memory) the address chosen for<BR>&nbsp;&nbsp;CONFIG_SYS_INIT_RAM_ADDR is basically arbitrary - it must<BR>&nbsp;&nbsp;point to an otherwise UNUSED address space between<BR>&nbsp;&nbsp;the top of RAM and the start of the PCI space.</P>
<P>- CONFIG_SYS_SIUMCR:&nbsp;SIU Module Configuration (11-6)</P>
<P>- CONFIG_SYS_SYPCR:&nbsp;System Protection Control (11-9)</P>
<P>- CONFIG_SYS_TBSCR:&nbsp;Time Base Status and Control (11-26)</P>
<P>- CONFIG_SYS_PISCR:&nbsp;Periodic Interrupt Status and Control (11-31)</P>
<P>- CONFIG_SYS_PLPRCR:&nbsp;PLL, Low-Power, and Reset Control Register (15-30)</P>
<P>- CONFIG_SYS_SCCR:&nbsp;System Clock and reset Control Register (15-27)</P>
<P>- CONFIG_SYS_OR_TIMING_SDRAM:<BR>&nbsp;&nbsp;SDRAM timing</P>
<P>- CONFIG_SYS_MAMR_PTA:<BR>&nbsp;&nbsp;periodic timer for refresh</P>
<P>- CONFIG_SYS_DER:&nbsp;Debug Event Register (37-47)</P>
<P>- FLASH_BASE0_PRELIM, FLASH_BASE1_PRELIM, CONFIG_SYS_REMAP_OR_AM,<BR>&nbsp; CONFIG_SYS_PRELIM_OR_AM, CONFIG_SYS_OR_TIMING_FLASH, CONFIG_SYS_OR0_REMAP,<BR>&nbsp; CONFIG_SYS_OR0_PRELIM, CONFIG_SYS_BR0_PRELIM, CONFIG_SYS_OR1_REMAP, CONFIG_SYS_OR1_PRELIM,<BR>&nbsp; CONFIG_SYS_BR1_PRELIM:<BR>&nbsp;&nbsp;Memory Controller Definitions: BR0/1 and OR0/1 (FLASH)</P>
<P>- SDRAM_BASE2_PRELIM, SDRAM_BASE3_PRELIM, SDRAM_MAX_SIZE,<BR>&nbsp; CONFIG_SYS_OR_TIMING_SDRAM, CONFIG_SYS_OR2_PRELIM, CONFIG_SYS_BR2_PRELIM,<BR>&nbsp; CONFIG_SYS_OR3_PRELIM, CONFIG_SYS_BR3_PRELIM:<BR>&nbsp;&nbsp;Memory Controller Definitions: BR2/3 and OR2/3 (SDRAM)</P>
<P>- CONFIG_SYS_MAMR_PTA, CONFIG_SYS_MPTPR_2BK_4K, CONFIG_SYS_MPTPR_1BK_4K, CONFIG_SYS_MPTPR_2BK_8K,<BR>&nbsp; CONFIG_SYS_MPTPR_1BK_8K, CONFIG_SYS_MAMR_8COL, CONFIG_SYS_MAMR_9COL:<BR>&nbsp;&nbsp;Machine Mode Register and Memory Periodic Timer<BR>&nbsp;&nbsp;Prescaler definitions (SDRAM timing)</P>
<P>- CONFIG_SYS_I2C_UCODE_PATCH, CONFIG_SYS_I2C_DPMEM_OFFSET [0x1FC0]:<BR>&nbsp;&nbsp;enable I2C microcode relocation patch (MPC8xx);<BR>&nbsp;&nbsp;define relocation offset in DPRAM [DSP2]</P>
<P>- CONFIG_SYS_SMC_UCODE_PATCH, CONFIG_SYS_SMC_DPMEM_OFFSET [0x1FC0]:<BR>&nbsp;&nbsp;enable SMC microcode relocation patch (MPC8xx);<BR>&nbsp;&nbsp;define relocation offset in DPRAM [SMC1]</P>
<P>- CONFIG_SYS_SPI_UCODE_PATCH, CONFIG_SYS_SPI_DPMEM_OFFSET [0x1FC0]:<BR>&nbsp;&nbsp;enable SPI microcode relocation patch (MPC8xx);<BR>&nbsp;&nbsp;define relocation offset in DPRAM [SCC4]</P>
<P>- CONFIG_SYS_USE_OSCCLK:<BR>&nbsp;&nbsp;Use OSCM clock mode on MBX8xx board. Be careful,<BR>&nbsp;&nbsp;wrong setting might damage your board. Read<BR>&nbsp;&nbsp;doc/README.MBX before setting this variable!</P>
<P>- CONFIG_SYS_CPM_POST_WORD_ADDR: (MPC8xx, MPC8260 only)<BR>&nbsp;&nbsp;Offset of the bootmode word in DPRAM used by post<BR>&nbsp;&nbsp;(Power On Self Tests). This definition overrides<BR>&nbsp;&nbsp;#define'd default value in commproc.h resp.<BR>&nbsp;&nbsp;cpm_8260.h.</P>
<P>- CONFIG_SYS_PCI_SLV_MEM_LOCAL, CONFIG_SYS_PCI_SLV_MEM_BUS, CONFIG_SYS_PICMR0_MASK_ATTRIB,<BR>&nbsp; CONFIG_SYS_PCI_MSTR0_LOCAL, CONFIG_SYS_PCIMSK0_MASK, CONFIG_SYS_PCI_MSTR1_LOCAL,<BR>&nbsp; CONFIG_SYS_PCIMSK1_MASK, CONFIG_SYS_PCI_MSTR_MEM_LOCAL, CONFIG_SYS_PCI_MSTR_MEM_BUS,<BR>&nbsp; CONFIG_SYS_CPU_PCI_MEM_START, CONFIG_SYS_PCI_MSTR_MEM_SIZE, CONFIG_SYS_POCMR0_MASK_ATTRIB,<BR>&nbsp; CONFIG_SYS_PCI_MSTR_MEMIO_LOCAL, CONFIG_SYS_PCI_MSTR_MEMIO_BUS, CPU_PCI_MEMIO_START,<BR>&nbsp; CONFIG_SYS_PCI_MSTR_MEMIO_SIZE, CONFIG_SYS_POCMR1_MASK_ATTRIB, CONFIG_SYS_PCI_MSTR_IO_LOCAL,<BR>&nbsp; CONFIG_SYS_PCI_MSTR_IO_BUS, CONFIG_SYS_CPU_PCI_IO_START, CONFIG_SYS_PCI_MSTR_IO_SIZE,<BR>&nbsp; CONFIG_SYS_POCMR2_MASK_ATTRIB: (MPC826x only)<BR>&nbsp;&nbsp;Overrides the default PCI memory map in arch/powerpc/cpu/mpc8260/pci.c if set.</P>
<P>- CONFIG_PCI_DISABLE_PCIE:<BR>&nbsp;&nbsp;Disable PCI-Express on systems where it is supported but not<BR>&nbsp;&nbsp;required.</P>
<P>- CONFIG_PCI_ENUM_ONLY<BR>&nbsp;&nbsp;Only scan through and get the devices on the buses.<BR>&nbsp;&nbsp;Don't do any setup work, presumably because someone or<BR>&nbsp;&nbsp;something has already done it, and we don't need to do it<BR>&nbsp;&nbsp;a second time.&nbsp;Useful for platforms that are pre-booted<BR>&nbsp;&nbsp;by coreboot or similar.</P>
<P>- CONFIG_PCI_INDIRECT_BRIDGE:<BR>&nbsp;&nbsp;Enable support for indirect PCI bridges.</P>
<P>- CONFIG_SYS_SRIO:<BR>&nbsp;&nbsp;Chip has SRIO or not</P>
<P>- CONFIG_SRIO1:<BR>&nbsp;&nbsp;Board has SRIO 1 port available</P>
<P>- CONFIG_SRIO2:<BR>&nbsp;&nbsp;Board has SRIO 2 port available</P>
<P>- CONFIG_SRIO_PCIE_BOOT_MASTER<BR>&nbsp;&nbsp;Board can support master function for Boot from SRIO and PCIE</P>
<P>- CONFIG_SYS_SRIOn_MEM_VIRT:<BR>&nbsp;&nbsp;Virtual Address of SRIO port 'n' memory region</P>
<P>- CONFIG_SYS_SRIOn_MEM_PHYS:<BR>&nbsp;&nbsp;Physical Address of SRIO port 'n' memory region</P>
<P>- CONFIG_SYS_SRIOn_MEM_SIZE:<BR>&nbsp;&nbsp;Size of SRIO port 'n' memory region</P>
<P>- CONFIG_SYS_NAND_BUSWIDTH_16BIT<BR>&nbsp;&nbsp;Defined to tell the NAND controller that the NAND chip is using<BR>&nbsp;&nbsp;a 16 bit bus.<BR>&nbsp;&nbsp;Not all NAND drivers use this symbol.<BR>&nbsp;&nbsp;Example of drivers that use it:<BR>&nbsp;&nbsp;- drivers/mtd/nand/ndfc.c<BR>&nbsp;&nbsp;- drivers/mtd/nand/mxc_nand.c</P>
<P>- CONFIG_SYS_NDFC_EBC0_CFG<BR>&nbsp;&nbsp;Sets the EBC0_CFG register for the NDFC. If not defined<BR>&nbsp;&nbsp;a default value will be used.</P>
<P>- CONFIG_SPD_EEPROM<BR>&nbsp;&nbsp;Get DDR timing information from an I2C EEPROM. Common<BR>&nbsp;&nbsp;with pluggable memory modules such as SODIMMs</P>
<P>&nbsp; SPD_EEPROM_ADDRESS<BR>&nbsp;&nbsp;I2C address of the SPD EEPROM</P>
<P>- CONFIG_SYS_SPD_BUS_NUM<BR>&nbsp;&nbsp;If SPD EEPROM is on an I2C bus other than the first<BR>&nbsp;&nbsp;one, specify here. Note that the value must resolve<BR>&nbsp;&nbsp;to something your driver can deal with.</P>
<P>- CONFIG_SYS_DDR_RAW_TIMING<BR>&nbsp;&nbsp;Get DDR timing information from other than SPD. Common with<BR>&nbsp;&nbsp;soldered DDR chips onboard without SPD. DDR raw timing<BR>&nbsp;&nbsp;parameters are extracted from datasheet and hard-coded into<BR>&nbsp;&nbsp;header files or board specific files.</P>
<P>- CONFIG_FSL_DDR_INTERACTIVE<BR>&nbsp;&nbsp;Enable interactive DDR debugging. See doc/README.fsl-ddr.</P>
<P>- CONFIG_FSL_DDR_SYNC_REFRESH<BR>&nbsp;&nbsp;Enable sync of refresh for multiple controllers.</P>
<P>- CONFIG_SYS_83XX_DDR_USES_CS0<BR>&nbsp;&nbsp;Only for 83xx systems. If specified, then DDR should<BR>&nbsp;&nbsp;be configured using CS0 and CS1 instead of CS2 and CS3.</P>
<P>- CONFIG_ETHER_ON_FEC[12]<BR>&nbsp;&nbsp;Define to enable FEC[12] on a 8xx series processor.</P>
<P>- CONFIG_FEC[12]_PHY<BR>&nbsp;&nbsp;Define to the hardcoded PHY address which corresponds<BR>&nbsp;&nbsp;to the given FEC; i. e.<BR>&nbsp;&nbsp;&nbsp;#define CONFIG_FEC1_PHY 4<BR>&nbsp;&nbsp;means that the PHY with address 4 is connected to FEC1</P>
<P>&nbsp;&nbsp;When set to -1, means to probe for first available.</P>
<P>- CONFIG_FEC[12]_PHY_NORXERR<BR>&nbsp;&nbsp;The PHY does not have a RXERR line (RMII only).<BR>&nbsp;&nbsp;(so program the FEC to ignore it).</P>
<P>- CONFIG_RMII<BR>&nbsp;&nbsp;Enable RMII mode for all FECs.<BR>&nbsp;&nbsp;Note that this is a global option, we can't<BR>&nbsp;&nbsp;have one FEC in standard MII mode and another in RMII mode.</P>
<P>- CONFIG_CRC32_VERIFY<BR>&nbsp;&nbsp;Add a verify option to the crc32 command.<BR>&nbsp;&nbsp;The syntax is:</P>
<P>&nbsp;&nbsp;=&gt; crc32 -v &lt;address&gt; &lt;count&gt; &lt;crc32&gt;</P>
<P>&nbsp;&nbsp;Where address/count indicate a memory area<BR>&nbsp;&nbsp;and crc32 is the correct crc32 which the<BR>&nbsp;&nbsp;area should have.</P>
<P>- CONFIG_LOOPW<BR>&nbsp;&nbsp;Add the "loopw" memory command. This only takes effect if<BR>&nbsp;&nbsp;the memory commands are activated globally (CONFIG_CMD_MEM).</P>
<P>- CONFIG_MX_CYCLIC<BR>&nbsp;&nbsp;Add the "mdc" and "mwc" memory commands. These are cyclic<BR>&nbsp;&nbsp;"md/mw" commands.<BR>&nbsp;&nbsp;Examples:</P>
<P>&nbsp;&nbsp;=&gt; mdc.b 10 4 500<BR>&nbsp;&nbsp;This command will print 4 bytes (10,11,12,13) each 500 ms.</P>
<P>&nbsp;&nbsp;=&gt; mwc.l 100 12345678 10<BR>&nbsp;&nbsp;This command will write 12345678 to address 100 all 10 ms.</P>
<P>&nbsp;&nbsp;This only takes effect if the memory commands are activated<BR>&nbsp;&nbsp;globally (CONFIG_CMD_MEM).</P>
<P>- CONFIG_SKIP_LOWLEVEL_INIT<BR>&nbsp;&nbsp;[ARM, NDS32, MIPS only] If this variable is defined, then certain<BR>&nbsp;&nbsp;low level initializations (like setting up the memory<BR>&nbsp;&nbsp;controller) are omitted and/or U-Boot does not<BR>&nbsp;&nbsp;relocate itself into RAM.</P>
<P>&nbsp;&nbsp;Normally this variable MUST NOT be defined. The only<BR>&nbsp;&nbsp;exception is when U-Boot is loaded (to RAM) by some<BR>&nbsp;&nbsp;other boot loader or by a debugger which performs<BR>&nbsp;&nbsp;these initializations itself.</P>
<P>- CONFIG_SPL_BUILD<BR>&nbsp;&nbsp;Modifies the behaviour of start.S when compiling a loader<BR>&nbsp;&nbsp;that is executed before the actual U-Boot. E.g. when<BR>&nbsp;&nbsp;compiling a NAND SPL.</P>
<P>- CONFIG_TPL_BUILD<BR>&nbsp;&nbsp;Modifies the behaviour of start.S&nbsp; when compiling a loader<BR>&nbsp;&nbsp;that is executed after the SPL and before the actual U-Boot.<BR>&nbsp;&nbsp;It is loaded by the SPL.</P>
<P>- CONFIG_SYS_MPC85XX_NO_RESETVEC<BR>&nbsp;&nbsp;Only for 85xx systems. If this variable is specified, the section<BR>&nbsp;&nbsp;.resetvec is not kept and the section .bootpg is placed in the<BR>&nbsp;&nbsp;previous 4k of the .text section.</P>
<P>- CONFIG_ARCH_MAP_SYSMEM<BR>&nbsp;&nbsp;Generally U-Boot (and in particular the md command) uses<BR>&nbsp;&nbsp;effective address. It is therefore not necessary to regard<BR>&nbsp;&nbsp;U-Boot address as virtual addresses that need to be translated<BR>&nbsp;&nbsp;to physical addresses. However, sandbox requires this, since<BR>&nbsp;&nbsp;it maintains its own little RAM buffer which contains all<BR>&nbsp;&nbsp;addressable memory. This option causes some memory accesses<BR>&nbsp;&nbsp;to be mapped through map_sysmem() / unmap_sysmem().</P>
<P>- CONFIG_USE_ARCH_MEMCPY<BR>&nbsp; CONFIG_USE_ARCH_MEMSET<BR>&nbsp;&nbsp;If these options are used a optimized version of memcpy/memset will<BR>&nbsp;&nbsp;be used if available. These functions may be faster under some<BR>&nbsp;&nbsp;conditions but may increase the binary size.</P>
<P>- CONFIG_X86_RESET_VECTOR<BR>&nbsp;&nbsp;If defined, the x86 reset vector code is included. This is not<BR>&nbsp;&nbsp;needed when U-Boot is running from Coreboot.</P>
<P>- CONFIG_SYS_MPUCLK<BR>&nbsp;&nbsp;Defines the MPU clock speed (in MHz).</P>
<P>&nbsp;&nbsp;NOTE : currently only supported on AM335x platforms.</P>
<P>- CONFIG_SPL_AM33XX_ENABLE_RTC32K_OSC:<BR>&nbsp;&nbsp;Enables the RTC32K OSC on AM33xx based plattforms</P>
<P>- CONFIG_SYS_NAND_NO_SUBPAGE_WRITE<BR>&nbsp;&nbsp;Option to disable subpage write in NAND driver<BR>&nbsp;&nbsp;driver that uses this:<BR>&nbsp;&nbsp;drivers/mtd/nand/davinci_nand.c</P>
<P>Freescale QE/FMAN Firmware Support:<BR>-----------------------------------</P>
<P>The Freescale QUICCEngine (QE) and Frame Manager (FMAN) both support the<BR>loading of "firmware", which is encoded in the QE firmware binary format.<BR>This firmware often needs to be loaded during U-Boot booting, so macros<BR>are used to identify the storage device (NOR flash, SPI, etc) and the address<BR>within that device.</P>
<P>- CONFIG_SYS_FMAN_FW_ADDR<BR>&nbsp;The address in the storage device where the FMAN microcode is located.&nbsp; The<BR>&nbsp;meaning of this address depends on which CONFIG_SYS_QE_FW_IN_xxx macro<BR>&nbsp;is also specified.</P>
<P>- CONFIG_SYS_QE_FW_ADDR<BR>&nbsp;The address in the storage device where the QE microcode is located.&nbsp; The<BR>&nbsp;meaning of this address depends on which CONFIG_SYS_QE_FW_IN_xxx macro<BR>&nbsp;is also specified.</P>
<P>- CONFIG_SYS_QE_FMAN_FW_LENGTH<BR>&nbsp;The maximum possible size of the firmware.&nbsp; The firmware binary format<BR>&nbsp;has a field that specifies the actual size of the firmware, but it<BR>&nbsp;might not be possible to read any part of the firmware unless some<BR>&nbsp;local storage is allocated to hold the entire firmware first.</P>
<P>- CONFIG_SYS_QE_FMAN_FW_IN_NOR<BR>&nbsp;Specifies that QE/FMAN firmware is located in NOR flash, mapped as<BR>&nbsp;normal addressable memory via the LBC.&nbsp; CONFIG_SYS_FMAN_FW_ADDR is the<BR>&nbsp;virtual address in NOR flash.</P>
<P>- CONFIG_SYS_QE_FMAN_FW_IN_NAND<BR>&nbsp;Specifies that QE/FMAN firmware is located in NAND flash.<BR>&nbsp;CONFIG_SYS_FMAN_FW_ADDR is the offset within NAND flash.</P>
<P>- CONFIG_SYS_QE_FMAN_FW_IN_MMC<BR>&nbsp;Specifies that QE/FMAN firmware is located on the primary SD/MMC<BR>&nbsp;device.&nbsp; CONFIG_SYS_FMAN_FW_ADDR is the byte offset on that device.</P>
<P>- CONFIG_SYS_QE_FMAN_FW_IN_SPIFLASH<BR>&nbsp;Specifies that QE/FMAN firmware is located on the primary SPI<BR>&nbsp;device.&nbsp; CONFIG_SYS_FMAN_FW_ADDR is the byte offset on that device.</P>
<P>- CONFIG_SYS_QE_FMAN_FW_IN_REMOTE<BR>&nbsp;Specifies that QE/FMAN firmware is located in the remote (master)<BR>&nbsp;memory space.&nbsp;CONFIG_SYS_FMAN_FW_ADDR is a virtual address which<BR>&nbsp;can be mapped from slave TLB-&gt;slave LAW-&gt;slave SRIO or PCIE outbound<BR>&nbsp;window-&gt;master inbound window-&gt;master LAW-&gt;the ucode address in<BR>&nbsp;master's memory space.</P>
<P>Freescale Layerscape Management Complex Firmware Support:<BR>---------------------------------------------------------<BR>The Freescale Layerscape Management Complex (MC) supports the loading of<BR>"firmware".<BR>This firmware often needs to be loaded during U-Boot booting, so macros<BR>are used to identify the storage device (NOR flash, SPI, etc) and the address<BR>within that device.</P>
<P>- CONFIG_FSL_MC_ENET<BR>&nbsp;Enable the MC driver for Layerscape SoCs.</P>
<P>- CONFIG_SYS_LS_MC_FW_ADDR<BR>&nbsp;The address in the storage device where the firmware is located.&nbsp; The<BR>&nbsp;meaning of this address depends on which CONFIG_SYS_LS_MC_FW_IN_xxx macro<BR>&nbsp;is also specified.</P>
<P>- CONFIG_SYS_LS_MC_FW_LENGTH<BR>&nbsp;The maximum possible size of the firmware.&nbsp; The firmware binary format<BR>&nbsp;has a field that specifies the actual size of the firmware, but it<BR>&nbsp;might not be possible to read any part of the firmware unless some<BR>&nbsp;local storage is allocated to hold the entire firmware first.</P>
<P>- CONFIG_SYS_LS_MC_FW_IN_NOR<BR>&nbsp;Specifies that MC firmware is located in NOR flash, mapped as<BR>&nbsp;normal addressable memory via the LBC. CONFIG_SYS_LS_MC_FW_ADDR is the<BR>&nbsp;virtual address in NOR flash.</P>
<P>Building the Software:<BR>======================</P>
<P>Building U-Boot has been tested in several native build environments<BR>and in many different cross environments. Of course we cannot support<BR>all possibly existing versions of cross development tools in all<BR>(potentially obsolete) versions. In case of tool chain problems we<BR>recommend to use the ELDK (see <A href="http://www.denx.de/wiki/DULG/ELDK">http://www.denx.de/wiki/DULG/ELDK</A>)<BR>which is extensively used to build and test U-Boot.</P>
<P>If you are not using a native environment, it is assumed that you<BR>have GNU cross compiling tools available in your path. In this case,<BR>you must set the environment variable CROSS_COMPILE in your shell.<BR>Note that no changes to the Makefile or any other source files are<BR>necessary. For example using the ELDK on a 4xx CPU, please enter:</P>
<P>&nbsp;$ CROSS_COMPILE=ppc_4xx-<BR>&nbsp;$ export CROSS_COMPILE</P>
<P>Note: If you wish to generate Windows versions of the utilities in<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; the tools directory you can use the MinGW toolchain<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (<A href="http://www.mingw.org">http://www.mingw.org</A>).&nbsp; Set your HOST tools to the MinGW<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; toolchain and execute 'make tools'.&nbsp; For example:</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; $ make HOSTCC=i586-mingw32msvc-gcc HOSTSTRIP=i586-mingw32msvc-strip tools</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Binaries such as tools/mkimage.exe will be created which can<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; be executed on computers running Windows.</P>
<P>U-Boot is intended to be simple to build. After installing the<BR>sources you must configure U-Boot for one specific board type. This<BR>is done by typing:</P>
<P>&nbsp;make NAME_defconfig</P>
<P>where "NAME_defconfig" is the name of one of the existing configu-<BR>rations; see boards.cfg for supported names.</P>
<P>Note: for some board special configuration names may exist; check if<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; additional information is available from the board vendor; for<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; instance, the TQM823L systems are available without (standard)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; or with LCD support. You can select such additional "features"<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; when choosing the configuration, i. e.</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; make TQM823L_defconfig<BR>&nbsp;- will configure for a plain TQM823L, i. e. no LCD support</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; make TQM823L_LCD_defconfig<BR>&nbsp;- will configure for a TQM823L with U-Boot console on LCD</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; etc.</P>
<P><BR>Finally, type "make all", and you should get some working U-Boot<BR>images ready for download to / installation on your system:</P>
<P>- "u-boot.bin" is a raw binary image<BR>- "u-boot" is an image in ELF binary format<BR>- "u-boot.srec" is in Motorola S-Record format</P>
<P>By default the build is performed locally and the objects are saved<BR>in the source directory. One of the two methods can be used to change<BR>this behavior and build U-Boot to some external directory:</P>
<P>1. Add O= to the make command line invocations:</P>
<P>&nbsp;make O=/tmp/build distclean<BR>&nbsp;make O=/tmp/build NAME_defconfig<BR>&nbsp;make O=/tmp/build all</P>
<P>2. Set environment variable KBUILD_OUTPUT to point to the desired location:</P>
<P>&nbsp;export KBUILD_OUTPUT=/tmp/build<BR>&nbsp;make distclean<BR>&nbsp;make NAME_defconfig<BR>&nbsp;make all</P>
<P>Note that the command line "O=" setting overrides the KBUILD_OUTPUT environment<BR>variable.</P>
<P><BR>Please be aware that the Makefiles assume you are using GNU make, so<BR>for instance on NetBSD you might need to use "gmake" instead of<BR>native "make".</P>
<P><BR>If the system board that you have is not listed, then you will need<BR>to port U-Boot to your hardware platform. To do this, follow these<BR>steps:</P>
<P>1.&nbsp; Add a new configuration option for your board to the toplevel<BR>&nbsp;&nbsp;&nbsp; "boards.cfg" file, using the existing entries as examples.<BR>&nbsp;&nbsp;&nbsp; Follow the instructions there to keep the boards in order.<BR>2.&nbsp; Create a new directory to hold your board specific code. Add any<BR>&nbsp;&nbsp;&nbsp; files you need. In your board directory, you will need at least<BR>&nbsp;&nbsp;&nbsp; the "Makefile", a "&lt;board&gt;.c", "flash.c" and "u-boot.lds".<BR>3.&nbsp; Create a new configuration file "include/configs/&lt;board&gt;.h" for<BR>&nbsp;&nbsp;&nbsp; your board<BR>3.&nbsp; If you're porting U-Boot to a new CPU, then also create a new<BR>&nbsp;&nbsp;&nbsp; directory to hold your CPU specific code. Add any files you need.<BR>4.&nbsp; Run "make &lt;board&gt;_defconfig" with your new name.<BR>5.&nbsp; Type "make", and you should get a working "u-boot.srec" file<BR>&nbsp;&nbsp;&nbsp; to be installed on your target system.<BR>6.&nbsp; Debug and solve any problems that might arise.<BR>&nbsp;&nbsp;&nbsp; [Of course, this last step is much harder than it sounds.]</P>
<P><BR>Testing of U-Boot Modifications, Ports to New Hardware, etc.:<BR>==============================================================</P>
<P>If you have modified U-Boot sources (for instance added a new board<BR>or support for new devices, a new CPU, etc.) you are expected to<BR>provide feedback to the other developers. The feedback normally takes<BR>the form of a "patch", i. e. a context diff against a certain (latest<BR>official or latest in the git repository) version of U-Boot sources.</P>
<P>But before you submit such a patch, please verify that your modifi-<BR>cation did not break existing code. At least make sure that *ALL* of<BR>the supported boards compile WITHOUT ANY compiler warnings. To do so,<BR>just run the "MAKEALL" script, which will configure and build U-Boot<BR>for ALL supported system. Be warned, this will take a while. You can<BR>select which (cross) compiler to use by passing a `CROSS_COMPILE'<BR>environment variable to the script, i. e. to use the ELDK cross tools<BR>you can type</P>
<P>&nbsp;CROSS_COMPILE=ppc_8xx- MAKEALL</P>
<P>or to build on a native PowerPC system you can type</P>
<P>&nbsp;CROSS_COMPILE=' ' MAKEALL</P>
<P>When using the MAKEALL script, the default behaviour is to build<BR>U-Boot in the source directory. This location can be changed by<BR>setting the BUILD_DIR environment variable. Also, for each target<BR>built, the MAKEALL script saves two log files (&lt;target&gt;.ERR and<BR>&lt;target&gt;.MAKEALL) in the &lt;source dir&gt;/LOG directory. This default<BR>location can be changed by setting the MAKEALL_LOGDIR environment<BR>variable. For example:</P>
<P>&nbsp;export BUILD_DIR=/tmp/build<BR>&nbsp;export MAKEALL_LOGDIR=/tmp/log<BR>&nbsp;CROSS_COMPILE=ppc_8xx- MAKEALL</P>
<P>With the above settings build objects are saved in the /tmp/build,<BR>log files are saved in the /tmp/log and the source tree remains clean<BR>during the whole build process.</P>
<P><BR>See also "U-Boot Porting Guide" below.</P>
<P><BR>Monitor Commands - Overview:<BR>============================</P>
<P>go&nbsp;- start application at address 'addr'<BR>run&nbsp;- run commands in an environment variable<BR>bootm&nbsp;- boot application image from memory<BR>bootp&nbsp;- boot image via network using BootP/TFTP protocol<BR>bootz&nbsp;&nbsp; - boot zImage from memory<BR>tftpboot- boot image via network using TFTP protocol<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; and env variables "ipaddr" and "serverip"<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; (and eventually "gatewayip")<BR>tftpput - upload a file via network using TFTP protocol<BR>rarpboot- boot image via network using RARP/TFTP protocol<BR>diskboot- boot from IDE devicebootd&nbsp;&nbsp; - boot default, i.e., run 'bootcmd'<BR>loads&nbsp;- load S-Record file over serial line<BR>loadb&nbsp;- load binary file over serial line (kermit mode)<BR>md&nbsp;- memory display<BR>mm&nbsp;- memory modify (auto-incrementing)<BR>nm&nbsp;- memory modify (constant address)<BR>mw&nbsp;- memory write (fill)<BR>cp&nbsp;- memory copy<BR>cmp&nbsp;- memory compare<BR>crc32&nbsp;- checksum calculation<BR>i2c&nbsp;- I2C sub-system<BR>sspi&nbsp;- SPI utility commands<BR>base&nbsp;- print or set address offset<BR>printenv- print environment variables<BR>setenv&nbsp;- set environment variables<BR>saveenv - save environment variables to persistent storage<BR>protect - enable or disable FLASH write protection<BR>erase&nbsp;- erase FLASH memory<BR>flinfo&nbsp;- print FLASH memory information<BR>nand&nbsp;- NAND memory operations (see doc/README.nand)<BR>bdinfo&nbsp;- print Board Info structure<BR>iminfo&nbsp;- print header information for application image<BR>coninfo - print console devices and informations<BR>ide&nbsp;- IDE sub-system<BR>loop&nbsp;- infinite loop on address range<BR>loopw&nbsp;- infinite write loop on address range<BR>mtest&nbsp;- simple RAM test<BR>icache&nbsp;- enable or disable instruction cache<BR>dcache&nbsp;- enable or disable data cache<BR>reset&nbsp;- Perform RESET of the CPU<BR>echo&nbsp;- echo args to console<BR>version - print monitor version<BR>help&nbsp;- print online help<BR>?&nbsp;- alias for 'help'</P>
<P><BR>Monitor Commands - Detailed Description:<BR>========================================</P>
<P>TODO.</P>
<P>For now: just type "help &lt;command&gt;".</P>
<P><BR>Environment Variables:<BR>======================</P>
<P>U-Boot supports user configuration using Environment Variables which<BR>can be made persistent by saving to Flash memory.</P>
<P>Environment Variables are set using "setenv", printed using<BR>"printenv", and saved to Flash using "saveenv". Using "setenv"<BR>without a value can be used to delete a variable from the<BR>environment. As long as you don't save the environment you are<BR>working with an in-memory copy. In case the Flash area containing the<BR>environment is erased by accident, a default environment is provided.</P>
<P>Some configuration options can be set using Environment Variables.</P>
<P>List of environment variables (most likely not complete):</P>
<P>&nbsp; baudrate&nbsp;- see CONFIG_BAUDRATE</P>
<P>&nbsp; bootdelay&nbsp;- see CONFIG_BOOTDELAY</P>
<P>&nbsp; bootcmd&nbsp;- see CONFIG_BOOTCOMMAND</P>
<P>&nbsp; bootargs&nbsp;- Boot arguments when booting an RTOS image</P>
<P>&nbsp; bootfile&nbsp;- Name of the image to load with TFTP</P>
<P>&nbsp; bootm_low&nbsp;- Memory range available for image processing in the bootm<BR>&nbsp;&nbsp;&nbsp; command can be restricted. This variable is given as<BR>&nbsp;&nbsp;&nbsp; a hexadecimal number and defines lowest address allowed<BR>&nbsp;&nbsp;&nbsp; for use by the bootm command. See also "bootm_size"<BR>&nbsp;&nbsp;&nbsp; environment variable. Address defined by "bootm_low" is<BR>&nbsp;&nbsp;&nbsp; also the base of the initial memory mapping for the Linux<BR>&nbsp;&nbsp;&nbsp; kernel -- see the description of CONFIG_SYS_BOOTMAPSZ and<BR>&nbsp;&nbsp;&nbsp; bootm_mapsize.</P>
<P>&nbsp; bootm_mapsize - Size of the initial memory mapping for the Linux kernel.<BR>&nbsp;&nbsp;&nbsp; This variable is given as a hexadecimal number and it<BR>&nbsp;&nbsp;&nbsp; defines the size of the memory region starting at base<BR>&nbsp;&nbsp;&nbsp; address bootm_low that is accessible by the Linux kernel<BR>&nbsp;&nbsp;&nbsp; during early boot.&nbsp; If unset, CONFIG_SYS_BOOTMAPSZ is used<BR>&nbsp;&nbsp;&nbsp; as the default value if it is defined, and bootm_size is<BR>&nbsp;&nbsp;&nbsp; used otherwise.</P>
<P>&nbsp; bootm_size&nbsp;- Memory range available for image processing in the bootm<BR>&nbsp;&nbsp;&nbsp; command can be restricted. This variable is given as<BR>&nbsp;&nbsp;&nbsp; a hexadecimal number and defines the size of the region<BR>&nbsp;&nbsp;&nbsp; allowed for use by the bootm command. See also "bootm_low"<BR>&nbsp;&nbsp;&nbsp; environment variable.</P>
<P>&nbsp; updatefile&nbsp;- Location of the software update file on a TFTP server, used<BR>&nbsp;&nbsp;&nbsp; by the automatic software update feature. Please refer to<BR>&nbsp;&nbsp;&nbsp; documentation in doc/README.update for more details.</P>
<P>&nbsp; autoload&nbsp;- if set to "no" (any string beginning with 'n'),<BR>&nbsp;&nbsp;&nbsp; "bootp" will just load perform a lookup of the<BR>&nbsp;&nbsp;&nbsp; configuration from the BOOTP server, but not try to<BR>&nbsp;&nbsp;&nbsp; load any image using TFTP</P>
<P>&nbsp; autostart&nbsp;- if set to "yes", an image loaded using the "bootp",<BR>&nbsp;&nbsp;&nbsp; "rarpboot", "tftpboot" or "diskboot" commands will<BR>&nbsp;&nbsp;&nbsp; be automatically started (by internally calling<BR>&nbsp;&nbsp;&nbsp; "bootm")</P>
<P>&nbsp;&nbsp;&nbsp; If set to "no", a standalone image passed to the<BR>&nbsp;&nbsp;&nbsp; "bootm" command will be copied to the load address<BR>&nbsp;&nbsp;&nbsp; (and eventually uncompressed), but NOT be started.<BR>&nbsp;&nbsp;&nbsp; This can be used to load and uncompress arbitrary<BR>&nbsp;&nbsp;&nbsp; data.</P>
<P>&nbsp; fdt_high&nbsp;- if set this restricts the maximum address that the<BR>&nbsp;&nbsp;&nbsp; flattened device tree will be copied into upon boot.<BR>&nbsp;&nbsp;&nbsp; For example, if you have a system with 1 GB memory<BR>&nbsp;&nbsp;&nbsp; at physical address 0x10000000, while Linux kernel<BR>&nbsp;&nbsp;&nbsp; only recognizes the first 704 MB as low memory, you<BR>&nbsp;&nbsp;&nbsp; may need to set fdt_high as 0x3C000000 to have the<BR>&nbsp;&nbsp;&nbsp; device tree blob be copied to the maximum address<BR>&nbsp;&nbsp;&nbsp; of the 704 MB low memory, so that Linux kernel can<BR>&nbsp;&nbsp;&nbsp; access it during the boot procedure.</P>
<P>&nbsp;&nbsp;&nbsp; If this is set to the special value 0xFFFFFFFF then<BR>&nbsp;&nbsp;&nbsp; the fdt will not be copied at all on boot.&nbsp; For this<BR>&nbsp;&nbsp;&nbsp; to work it must reside in writable memory, have<BR>&nbsp;&nbsp;&nbsp; sufficient padding on the end of it for u-boot to<BR>&nbsp;&nbsp;&nbsp; add the information it needs into it, and the memory<BR>&nbsp;&nbsp;&nbsp; must be accessible by the kernel.</P>
<P>&nbsp; fdtcontroladdr- if set this is the address of the control flattened<BR>&nbsp;&nbsp;&nbsp; device tree used by U-Boot when CONFIG_OF_CONTROL is<BR>&nbsp;&nbsp;&nbsp; defined.</P>
<P>&nbsp; i2cfast&nbsp;- (PPC405GP|PPC405EP only)<BR>&nbsp;&nbsp;&nbsp; if set to 'y' configures Linux I2C driver for fast<BR>&nbsp;&nbsp;&nbsp; mode (400kHZ). This environment variable is used in<BR>&nbsp;&nbsp;&nbsp; initialization code. So, for changes to be effective<BR>&nbsp;&nbsp;&nbsp; it must be saved and board must be reset.</P>
<P>&nbsp; initrd_high&nbsp;- restrict positioning of initrd images:<BR>&nbsp;&nbsp;&nbsp; If this variable is not set, initrd images will be<BR>&nbsp;&nbsp;&nbsp; copied to the highest possible address in RAM; this<BR>&nbsp;&nbsp;&nbsp; is usually what you want since it allows for<BR>&nbsp;&nbsp;&nbsp; maximum initrd size. If for some reason you want to<BR>&nbsp;&nbsp;&nbsp; make sure that the initrd image is loaded below the<BR>&nbsp;&nbsp;&nbsp; CONFIG_SYS_BOOTMAPSZ limit, you can set this environment<BR>&nbsp;&nbsp;&nbsp; variable to a value of "no" or "off" or "0".<BR>&nbsp;&nbsp;&nbsp; Alternatively, you can set it to a maximum upper<BR>&nbsp;&nbsp;&nbsp; address to use (U-Boot will still check that it<BR>&nbsp;&nbsp;&nbsp; does not overwrite the U-Boot stack and data).</P>
<P>&nbsp;&nbsp;&nbsp; For instance, when you have a system with 16 MB<BR>&nbsp;&nbsp;&nbsp; RAM, and want to reserve 4 MB from use by Linux,<BR>&nbsp;&nbsp;&nbsp; you can do this by adding "mem=12M" to the value of<BR>&nbsp;&nbsp;&nbsp; the "bootargs" variable. However, now you must make<BR>&nbsp;&nbsp;&nbsp; sure that the initrd image is placed in the first<BR>&nbsp;&nbsp;&nbsp; 12 MB as well - this can be done with</P>
<P>&nbsp;&nbsp;&nbsp; setenv initrd_high 00c00000</P>
<P>&nbsp;&nbsp;&nbsp; If you set initrd_high to 0xFFFFFFFF, this is an<BR>&nbsp;&nbsp;&nbsp; indication to U-Boot that all addresses are legal<BR>&nbsp;&nbsp;&nbsp; for the Linux kernel, including addresses in flash<BR>&nbsp;&nbsp;&nbsp; memory. In this case U-Boot will NOT COPY the<BR>&nbsp;&nbsp;&nbsp; ramdisk at all. This may be useful to reduce the<BR>&nbsp;&nbsp;&nbsp; boot time on your system, but requires that this<BR>&nbsp;&nbsp;&nbsp; feature is supported by your Linux kernel.</P>
<P>&nbsp; ipaddr&nbsp;- IP address; needed for tftpboot command</P>
<P>&nbsp; loadaddr&nbsp;- Default load address for commands like "bootp",<BR>&nbsp;&nbsp;&nbsp; "rarpboot", "tftpboot", "loadb" or "diskboot"</P>
<P>&nbsp; loads_echo&nbsp;- see CONFIG_LOADS_ECHO</P>
<P>&nbsp; serverip&nbsp;- TFTP server IP address; needed for tftpboot command</P>
<P>&nbsp; bootretry&nbsp;- see CONFIG_BOOT_RETRY_TIME</P>
<P>&nbsp; bootdelaykey&nbsp;- see CONFIG_AUTOBOOT_DELAY_STR</P>
<P>&nbsp; bootstopkey&nbsp;- see CONFIG_AUTOBOOT_STOP_STR</P>
<P>&nbsp; ethprime&nbsp;- controls which interface is used first.</P>
<P>&nbsp; ethact&nbsp;- controls which interface is currently active.<BR>&nbsp;&nbsp;&nbsp; For example you can do the following</P>
<P>&nbsp;&nbsp;&nbsp; =&gt; setenv ethact FEC<BR>&nbsp;&nbsp;&nbsp; =&gt; ping 192.168.0.1 # traffic sent on FEC<BR>&nbsp;&nbsp;&nbsp; =&gt; setenv ethact SCC<BR>&nbsp;&nbsp;&nbsp; =&gt; ping 10.0.0.1 # traffic sent on SCC</P>
<P>&nbsp; ethrotate&nbsp;- When set to "no" U-Boot does not go through all<BR>&nbsp;&nbsp;&nbsp; available network interfaces.<BR>&nbsp;&nbsp;&nbsp; It just stays at the currently selected interface.</P>
<P>&nbsp; netretry&nbsp;- When set to "no" each network operation will<BR>&nbsp;&nbsp;&nbsp; either succeed or fail without retrying.<BR>&nbsp;&nbsp;&nbsp; When set to "once" the network operation will<BR>&nbsp;&nbsp;&nbsp; fail when all the available network interfaces<BR>&nbsp;&nbsp;&nbsp; are tried once without success.<BR>&nbsp;&nbsp;&nbsp; Useful on scripts which control the retry operation<BR>&nbsp;&nbsp;&nbsp; themselves.</P>
<P>&nbsp; npe_ucode&nbsp;- set load address for the NPE microcode</P>
<P>&nbsp; silent_linux&nbsp; - If set then Linux will be told to boot silently, by<BR>&nbsp;&nbsp;&nbsp; changing the console to be empty. If "yes" it will be<BR>&nbsp;&nbsp;&nbsp; made silent. If "no" it will not be made silent. If<BR>&nbsp;&nbsp;&nbsp; unset, then it will be made silent if the U-Boot console<BR>&nbsp;&nbsp;&nbsp; is silent.</P>
<P>&nbsp; tftpsrcport&nbsp;- If this is set, the value is used for TFTP's<BR>&nbsp;&nbsp;&nbsp; UDP source port.</P>
<P>&nbsp; tftpdstport&nbsp;- If this is set, the value is used for TFTP's UDP<BR>&nbsp;&nbsp;&nbsp; destination port instead of the Well Know Port 69.</P>
<P>&nbsp; tftpblocksize - Block size to use for TFTP transfers; if not set,<BR>&nbsp;&nbsp;&nbsp; we use the TFTP server's default block size</P>
<P>&nbsp; tftptimeout&nbsp;- Retransmission timeout for TFTP packets (in milli-<BR>&nbsp;&nbsp;&nbsp; seconds, minimum value is 1000 = 1 second). Defines<BR>&nbsp;&nbsp;&nbsp; when a packet is considered to be lost so it has to<BR>&nbsp;&nbsp;&nbsp; be retransmitted. The default is 5000 = 5 seconds.<BR>&nbsp;&nbsp;&nbsp; Lowering this value may make downloads succeed<BR>&nbsp;&nbsp;&nbsp; faster in networks with high packet loss rates or<BR>&nbsp;&nbsp;&nbsp; with unreliable TFTP servers.</P>
<P>&nbsp; vlan&nbsp;&nbsp;- When set to a value &lt; 4095 the traffic over<BR>&nbsp;&nbsp;&nbsp; Ethernet is encapsulated/received over 802.1q<BR>&nbsp;&nbsp;&nbsp; VLAN tagged frames.</P>
<P>The following image location variables contain the location of images<BR>used in booting. The "Image" column gives the role of the image and is<BR>not an environment variable name. The other columns are environment<BR>variable names. "File Name" gives the name of the file on a TFTP<BR>server, "RAM Address" gives the location in RAM the image will be<BR>loaded to, and "Flash Location" gives the image's address in NOR<BR>flash or offset in NAND flash.</P>
<P>*Note* - these variables don't have to be defined for all boards, some<BR>boards currenlty use other variables for these purposes, and some<BR>boards use these variables for other purposes.</P>
<P>Image&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; File Name&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; RAM Address&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Flash Location<BR>-----&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ---------&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -----------&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; --------------<BR>u-boot&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; u-boot&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; u-boot_addr_r&nbsp;&nbsp;&nbsp;&nbsp; u-boot_addr<BR>Linux kernel&nbsp;&nbsp;&nbsp;&nbsp; bootfile&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; kernel_addr_r&nbsp;&nbsp;&nbsp;&nbsp; kernel_addr<BR>device tree blob&nbsp;&nbsp;&nbsp; fdtfile&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fdt_addr_r&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; fdt_addr<BR>ramdisk&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ramdiskfile&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ramdisk_addr_r&nbsp;&nbsp;&nbsp; ramdisk_addr</P>
<P>The following environment variables may be used and automatically<BR>updated by the network boot commands ("bootp" and "rarpboot"),<BR>depending the information provided by your boot server:</P>
<P>&nbsp; bootfile&nbsp;- see above<BR>&nbsp; dnsip&nbsp;&nbsp;- IP address of your Domain Name Server<BR>&nbsp; dnsip2&nbsp;- IP address of your secondary Domain Name Server<BR>&nbsp; gatewayip&nbsp;- IP address of the Gateway (Router) to use<BR>&nbsp; hostname&nbsp;- Target hostname<BR>&nbsp; ipaddr&nbsp;- see above<BR>&nbsp; netmask&nbsp;- Subnet Mask<BR>&nbsp; rootpath&nbsp;- Pathname of the root filesystem on the NFS server<BR>&nbsp; serverip&nbsp;- see above</P>
<P><BR>There are two special Environment Variables:</P>
<P>&nbsp; serial#&nbsp;- contains hardware identification information such<BR>&nbsp;&nbsp;&nbsp; as type string and/or serial number<BR>&nbsp; ethaddr&nbsp;- Ethernet address</P>
<P>These variables can be set only once (usually during manufacturing of<BR>the board). U-Boot refuses to delete or overwrite these variables<BR>once they have been set once.</P>
<P><BR>Further special Environment Variables:</P>
<P>&nbsp; ver&nbsp;&nbsp;- Contains the U-Boot version string as printed<BR>&nbsp;&nbsp;&nbsp; with the "version" command. This variable is<BR>&nbsp;&nbsp;&nbsp; readonly (see CONFIG_VERSION_VARIABLE).</P>
<P><BR>Please note that changes to some configuration parameters may take<BR>only effect after the next boot (yes, that's just like Windoze :-).</P>
<P><BR>Callback functions for environment variables:<BR>---------------------------------------------</P>
<P>For some environment variables, the behavior of u-boot needs to change<BR>when their values are changed.&nbsp; This functionality allows functions to<BR>be associated with arbitrary variables.&nbsp; On creation, overwrite, or<BR>deletion, the callback will provide the opportunity for some side<BR>effect to happen or for the change to be rejected.</P>
<P>The callbacks are named and associated with a function using the<BR>U_BOOT_ENV_CALLBACK macro in your board or driver code.</P>
<P>These callbacks are associated with variables in one of two ways.&nbsp; The<BR>static list can be added to by defining CONFIG_ENV_CALLBACK_LIST_STATIC<BR>in the board configuration to a string that defines a list of<BR>associations.&nbsp; The list must be in the following format:</P>
<P>&nbsp;entry = variable_name[:callback_name]<BR>&nbsp;list = entry[,list]</P>
<P>If the callback name is not specified, then the callback is deleted.<BR>Spaces are also allowed anywhere in the list.</P>
<P>Callbacks can also be associated by defining the ".callbacks" variable<BR>with the same list format above.&nbsp; Any association in ".callbacks" will<BR>override any association in the static list. You can define<BR>CONFIG_ENV_CALLBACK_LIST_DEFAULT to a list (string) to define the<BR>".callbacks" environment variable in the default or embedded environment.</P>
<P><BR>Command Line Parsing:<BR>=====================</P>
<P>There are two different command line parsers available with U-Boot:<BR>the old "simple" one, and the much more powerful "hush" shell:</P>
<P>Old, simple command line parser:<BR>--------------------------------</P>
<P>- supports environment variables (through setenv / saveenv commands)<BR>- several commands on one line, separated by ';'<BR>- variable substitution using "... ${name} ..." syntax<BR>- special characters ('$', ';') can be escaped by prefixing with '\',<BR>&nbsp; for example:<BR>&nbsp;setenv bootcmd bootm \${address}<BR>- You can also escape text by enclosing in single apostrophes, for example:<BR>&nbsp;setenv addip 'setenv bootargs $bootargs ip=$ipaddr:$serverip:$gatewayip:$netmask:$hostname::off'</P>
<P>Hush shell:<BR>-----------</P>
<P>- similar to Bourne shell, with control structures like<BR>&nbsp; if...then...else...fi, for...do...done; while...do...done,<BR>&nbsp; until...do...done, ...<BR>- supports environment ("global") variables (through setenv / saveenv<BR>&nbsp; commands) and local shell variables (through standard shell syntax<BR>&nbsp; "name=value"); only environment variables can be used with "run"<BR>&nbsp; command</P>
<P>General rules:<BR>--------------</P>
<P>(1) If a command line (or an environment variable executed by a "run"<BR>&nbsp;&nbsp;&nbsp; command) contains several commands separated by semicolon, and<BR>&nbsp;&nbsp;&nbsp; one of these commands fails, then the remaining commands will be<BR>&nbsp;&nbsp;&nbsp; executed anyway.</P>
<P>(2) If you execute several variables with one call to run (i. e.<BR>&nbsp;&nbsp;&nbsp; calling run with a list of variables as arguments), any failing<BR>&nbsp;&nbsp;&nbsp; command will cause "run" to terminate, i. e. the remaining<BR>&nbsp;&nbsp;&nbsp; variables are not executed.</P>
<P>Note for Redundant Ethernet Interfaces:<BR>=======================================</P>
<P>Some boards come with redundant Ethernet interfaces; U-Boot supports<BR>such configurations and is capable of automatic selection of a<BR>"working" interface when needed. MAC assignment works as follows:</P>
<P>Network interfaces are numbered eth0, eth1, eth2, ... Corresponding<BR>MAC addresses can be stored in the environment as "ethaddr" (=&gt;eth0),<BR>"eth1addr" (=&gt;eth1), "eth2addr", ...</P>
<P>If the network interface stores some valid MAC address (for instance<BR>in SROM), this is used as default address if there is NO correspon-<BR>ding setting in the environment; if the corresponding environment<BR>variable is set, this overrides the settings in the card; that means:</P>
<P>o If the SROM has a valid MAC address, and there is no address in the<BR>&nbsp; environment, the SROM's address is used.</P>
<P>o If there is no valid address in the SROM, and a definition in the<BR>&nbsp; environment exists, then the value from the environment variable is<BR>&nbsp; used.</P>
<P>o If both the SROM and the environment contain a MAC address, and<BR>&nbsp; both addresses are the same, this MAC address is used.</P>
<P>o If both the SROM and the environment contain a MAC address, and the<BR>&nbsp; addresses differ, the value from the environment is used and a<BR>&nbsp; warning is printed.</P>
<P>o If neither SROM nor the environment contain a MAC address, an error<BR>&nbsp; is raised.</P>
<P>If Ethernet drivers implement the 'write_hwaddr' function, valid MAC addresses<BR>will be programmed into hardware as part of the initialization process.&nbsp; This<BR>may be skipped by setting the appropriate 'ethmacskip' environment variable.<BR>The naming convention is as follows:<BR>"ethmacskip" (=&gt;eth0), "eth1macskip" (=&gt;eth1) etc.</P>
<P>Image Formats:<BR>==============</P>
<P>U-Boot is capable of booting (and performing other auxiliary operations on)<BR>images in two formats:</P>
<P>New uImage format (FIT)<BR>-----------------------</P>
<P>Flexible and powerful format based on Flattened Image Tree -- FIT (similar<BR>to Flattened Device Tree). It allows the use of images with multiple<BR>components (several kernels, ramdisks, etc.), with contents protected by<BR>SHA1, MD5 or CRC32. More details are found in the doc/uImage.FIT directory.</P>
<P><BR>Old uImage format<BR>-----------------</P>
<P>Old image format is based on binary files which can be basically anything,<BR>preceded by a special header; see the definitions in include/image.h for<BR>details; basically, the header defines the following image properties:</P>
<P>* Target Operating System (Provisions for OpenBSD, NetBSD, FreeBSD,<BR>&nbsp; 4.4BSD, Linux, SVR4, Esix, Solaris, Irix, SCO, Dell, NCR, VxWorks,<BR>&nbsp; LynxOS, pSOS, QNX, RTEMS, INTEGRITY;<BR>&nbsp; Currently supported: Linux, NetBSD, VxWorks, QNX, RTEMS, LynxOS,<BR>&nbsp; INTEGRITY).<BR>* Target CPU Architecture (Provisions for Alpha, ARM, AVR32, Intel x86,<BR>&nbsp; IA64, MIPS, NDS32, Nios II, PowerPC, IBM S390, SuperH, Sparc, Sparc 64 Bit;<BR>&nbsp; Currently supported: ARM, AVR32, Intel x86, MIPS, NDS32, Nios II, PowerPC).<BR>* Compression Type (uncompressed, gzip, bzip2)<BR>* Load Address<BR>* Entry Point<BR>* Image Name<BR>* Image Timestamp</P>
<P>The header is marked by a special Magic Number, and both the header<BR>and the data portions of the image are secured against corruption by<BR>CRC32 checksums.</P>
<P><BR>Linux Support:<BR>==============</P>
<P>Although U-Boot should support any OS or standalone application<BR>easily, the main focus has always been on Linux during the design of<BR>U-Boot.</P>
<P>U-Boot includes many features that so far have been part of some<BR>special "boot loader" code within the Linux kernel. Also, any<BR>"initrd" images to be used are no longer part of one big Linux image;<BR>instead, kernel and "initrd" are separate images. This implementation<BR>serves several purposes:</P>
<P>- the same features can be used for other OS or standalone<BR>&nbsp; applications (for instance: using compressed images to reduce the<BR>&nbsp; Flash memory footprint)</P>
<P>- it becomes much easier to port new Linux kernel versions because<BR>&nbsp; lots of low-level, hardware dependent stuff are done by U-Boot</P>
<P>- the same Linux kernel image can now be used with different "initrd"<BR>&nbsp; images; of course this also means that different kernel images can<BR>&nbsp; be run with the same "initrd". This makes testing easier (you don't<BR>&nbsp; have to build a new "zImage.initrd" Linux image when you just<BR>&nbsp; change a file in your "initrd"). Also, a field-upgrade of the<BR>&nbsp; software is easier now.</P>
<P><BR>Linux HOWTO:<BR>============</P>
<P>Porting Linux to U-Boot based systems:<BR>---------------------------------------</P>
<P>U-Boot cannot save you from doing all the necessary modifications to<BR>configure the Linux device drivers for use with your target hardware<BR>(no, we don't intend to provide a full virtual machine interface to<BR>Linux :-).</P>
<P>But now you can ignore ALL boot loader code (in arch/powerpc/mbxboot).</P>
<P>Just make sure your machine specific header file (for instance<BR>include/asm-ppc/tqm8xx.h) includes the same definition of the Board<BR>Information structure as we define in include/asm-&lt;arch&gt;/u-boot.h,<BR>and make sure that your definition of IMAP_ADDR uses the same value<BR>as your U-Boot configuration in CONFIG_SYS_IMMR.</P>
<P>Note that U-Boot now has a driver model, a unified model for drivers.<BR>If you are adding a new driver, plumb it into driver model. If there<BR>is no uclass available, you are encouraged to create one. See<BR>doc/driver-model.</P>
<P><BR>Configuring the Linux kernel:<BR>-----------------------------</P>
<P>No specific requirements for U-Boot. Make sure you have some root<BR>device (initial ramdisk, NFS) for your target system.</P>
<P><BR>Building a Linux Image:<BR>-----------------------</P>
<P>With U-Boot, "normal" build targets like "zImage" or "bzImage" are<BR>not used. If you use recent kernel source, a new build target<BR>"uImage" will exist which automatically builds an image usable by<BR>U-Boot. Most older kernels also have support for a "pImage" target,<BR>which was introduced for our predecessor project PPCBoot and uses a<BR>100% compatible format.</P>
<P>Example:</P>
<P>&nbsp;make TQM850L_defconfig<BR>&nbsp;make oldconfig<BR>&nbsp;make dep<BR>&nbsp;make uImage</P>
<P>The "uImage" build target uses a special tool (in 'tools/mkimage') to<BR>encapsulate a compressed Linux kernel image with header&nbsp; information,<BR>CRC32 checksum etc. for use with U-Boot. This is what we are doing:</P>
<P>* build a standard "vmlinux" kernel image (in ELF binary format):</P>
<P>* convert the kernel into a raw binary image:</P>
<P>&nbsp;${CROSS_COMPILE}-objcopy -O binary \<BR>&nbsp;&nbsp;&nbsp;&nbsp; -R .note -R .comment \<BR>&nbsp;&nbsp;&nbsp;&nbsp; -S vmlinux linux.bin</P>
<P>* compress the binary image:</P>
<P>&nbsp;gzip -9 linux.bin</P>
<P>* package compressed binary image for U-Boot:</P>
<P>&nbsp;mkimage -A ppc -O linux -T kernel -C gzip \<BR>&nbsp;&nbsp;-a 0 -e 0 -n "Linux Kernel Image" \<BR>&nbsp;&nbsp;-d linux.bin.gz uImage</P>
<P><BR>The "mkimage" tool can also be used to create ramdisk images for use<BR>with U-Boot, either separated from the Linux kernel image, or<BR>combined into one file. "mkimage" encapsulates the images with a 64<BR>byte header containing information about target architecture,<BR>operating system, image type, compression method, entry points, time<BR>stamp, CRC32 checksums, etc.</P>
<P>"mkimage" can be called in two ways: to verify existing images and<BR>print the header information, or to build new images.</P>
<P>In the first form (with "-l" option) mkimage lists the information<BR>contained in the header of an existing U-Boot image; this includes<BR>checksum verification:</P>
<P>&nbsp;tools/mkimage -l image<BR>&nbsp;&nbsp; -l ==&gt; list image header information</P>
<P>The second form (with "-d" option) is used to build a U-Boot image<BR>from a "data file" which is used as image payload:</P>
<P>&nbsp;tools/mkimage -A arch -O os -T type -C comp -a addr -e ep \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -n name -d data_file image<BR>&nbsp;&nbsp; -A ==&gt; set architecture to 'arch'<BR>&nbsp;&nbsp; -O ==&gt; set operating system to 'os'<BR>&nbsp;&nbsp; -T ==&gt; set image type to 'type'<BR>&nbsp;&nbsp; -C ==&gt; set compression type 'comp'<BR>&nbsp;&nbsp; -a ==&gt; set load address to 'addr' (hex)<BR>&nbsp;&nbsp; -e ==&gt; set entry point to 'ep' (hex)<BR>&nbsp;&nbsp; -n ==&gt; set image name to 'name'<BR>&nbsp;&nbsp; -d ==&gt; use image data from 'datafile'</P>
<P>Right now, all Linux kernels for PowerPC systems use the same load<BR>address (0x00000000), but the entry point address depends on the<BR>kernel version:</P>
<P>- 2.2.x kernels have the entry point at 0x0000000C,<BR>- 2.3.x and later kernels have the entry point at 0x00000000.</P>
<P>So a typical call to build a U-Boot image would read:</P>
<P>&nbsp;-&gt; tools/mkimage -n '2.4.4 kernel for TQM850L' \<BR>&nbsp;&gt; -A ppc -O linux -T kernel -C gzip -a 0 -e 0 \<BR>&nbsp;&gt; -d /opt/elsk/ppc_8xx/usr/src/linux-2.4.4/arch/powerpc/coffboot/vmlinux.gz \<BR>&nbsp;&gt; examples/uImage.TQM850L<BR>&nbsp;Image Name:&nbsp;&nbsp; 2.4.4 kernel for TQM850L<BR>&nbsp;Created:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Wed Jul 19 02:34:59 2000<BR>&nbsp;Image Type:&nbsp;&nbsp; PowerPC Linux Kernel Image (gzip compressed)<BR>&nbsp;Data Size:&nbsp;&nbsp;&nbsp; 335725 Bytes = 327.86 kB = 0.32 MB<BR>&nbsp;Load Address: 0x00000000<BR>&nbsp;Entry Point:&nbsp; 0x00000000</P>
<P>To verify the contents of the image (or check for corruption):</P>
<P>&nbsp;-&gt; tools/mkimage -l examples/uImage.TQM850L<BR>&nbsp;Image Name:&nbsp;&nbsp; 2.4.4 kernel for TQM850L<BR>&nbsp;Created:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Wed Jul 19 02:34:59 2000<BR>&nbsp;Image Type:&nbsp;&nbsp; PowerPC Linux Kernel Image (gzip compressed)<BR>&nbsp;Data Size:&nbsp;&nbsp;&nbsp; 335725 Bytes = 327.86 kB = 0.32 MB<BR>&nbsp;Load Address: 0x00000000<BR>&nbsp;Entry Point:&nbsp; 0x00000000</P>
<P>NOTE: for embedded systems where boot time is critical you can trade<BR>speed for memory and install an UNCOMPRESSED image instead: this<BR>needs more space in Flash, but boots much faster since it does not<BR>need to be uncompressed:</P>
<P>&nbsp;-&gt; gunzip /opt/elsk/ppc_8xx/usr/src/linux-2.4.4/arch/powerpc/coffboot/vmlinux.gz<BR>&nbsp;-&gt; tools/mkimage -n '2.4.4 kernel for TQM850L' \<BR>&nbsp;&gt; -A ppc -O linux -T kernel -C none -a 0 -e 0 \<BR>&nbsp;&gt; -d /opt/elsk/ppc_8xx/usr/src/linux-2.4.4/arch/powerpc/coffboot/vmlinux \<BR>&nbsp;&gt; examples/uImage.TQM850L-uncompressed<BR>&nbsp;Image Name:&nbsp;&nbsp; 2.4.4 kernel for TQM850L<BR>&nbsp;Created:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Wed Jul 19 02:34:59 2000<BR>&nbsp;Image Type:&nbsp;&nbsp; PowerPC Linux Kernel Image (uncompressed)<BR>&nbsp;Data Size:&nbsp;&nbsp;&nbsp; 792160 Bytes = 773.59 kB = 0.76 MB<BR>&nbsp;Load Address: 0x00000000<BR>&nbsp;Entry Point:&nbsp; 0x00000000</P>
<P><BR>Similar you can build U-Boot images from a 'ramdisk.image.gz' file<BR>when your kernel is intended to use an initial ramdisk:</P>
<P>&nbsp;-&gt; tools/mkimage -n 'Simple Ramdisk Image' \<BR>&nbsp;&gt; -A ppc -O linux -T ramdisk -C gzip \<BR>&nbsp;&gt; -d /LinuxPPC/images/SIMPLE-ramdisk.image.gz examples/simple-initrd<BR>&nbsp;Image Name:&nbsp;&nbsp; Simple Ramdisk Image<BR>&nbsp;Created:&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; Wed Jan 12 14:01:50 2000<BR>&nbsp;Image Type:&nbsp;&nbsp; PowerPC Linux RAMDisk Image (gzip compressed)<BR>&nbsp;Data Size:&nbsp;&nbsp;&nbsp; 566530 Bytes = 553.25 kB = 0.54 MB<BR>&nbsp;Load Address: 0x00000000<BR>&nbsp;Entry Point:&nbsp; 0x00000000</P>
<P>The "dumpimage" is a tool to disassemble images built by mkimage. Its "-i"<BR>option performs the converse operation of the mkimage's second form (the "-d"<BR>option). Given an image built by mkimage, the dumpimage extracts a "data file"<BR>from the image:</P>
<P>&nbsp;tools/dumpimage -i image -T type -p position data_file<BR>&nbsp;&nbsp; -i ==&gt; extract from the 'image' a specific 'data_file'<BR>&nbsp;&nbsp; -T ==&gt; set image type to 'type'<BR>&nbsp;&nbsp; -p ==&gt; 'position' (starting at 0) of the 'data_file' inside the 'image'</P>
<P><BR>Installing a Linux Image:<BR>-------------------------</P>
<P>To downloading a U-Boot image over the serial (console) interface,<BR>you must convert the image to S-Record format:</P>
<P>&nbsp;objcopy -I binary -O srec examples/image examples/image.srec</P>
<P>The 'objcopy' does not understand the information in the U-Boot<BR>image header, so the resulting S-Record file will be relative to<BR>address 0x00000000. To load it to a given address, you need to<BR>specify the target address as 'offset' parameter with the 'loads'<BR>command.</P>
<P>Example: install the image to address 0x40100000 (which on the<BR>TQM8xxL is in the first Flash bank):</P>
<P>&nbsp;=&gt; erase 40100000 401FFFFF</P>
<P>&nbsp;.......... done<BR>&nbsp;Erased 8 sectors</P>
<P>&nbsp;=&gt; loads 40100000<BR>&nbsp;## Ready for S-Record download ...<BR>&nbsp;~&gt;examples/image.srec<BR>&nbsp;1 2 3 4 5 6 7 8 9 10 11 12 13 ...<BR>&nbsp;...<BR>&nbsp;15989 15990 15991 15992<BR>&nbsp;[file transfer complete]<BR>&nbsp;[connected]<BR>&nbsp;## Start Addr = 0x00000000</P>
<P><BR>You can check the success of the download using the 'iminfo' command;<BR>this includes a checksum verification so you can be sure no data<BR>corruption happened:</P>
<P>&nbsp;=&gt; imi 40100000</P>
<P>&nbsp;## Checking Image at 40100000 ...<BR>&nbsp;&nbsp;&nbsp; Image Name:&nbsp; 2.2.13 for initrd on TQM850L<BR>&nbsp;&nbsp;&nbsp; Image Type:&nbsp; PowerPC Linux Kernel Image (gzip compressed)<BR>&nbsp;&nbsp;&nbsp; Data Size:&nbsp; 335725 Bytes = 327 kB = 0 MB<BR>&nbsp;&nbsp;&nbsp; Load Address: 00000000<BR>&nbsp;&nbsp;&nbsp; Entry Point:&nbsp; 0000000c<BR>&nbsp;&nbsp;&nbsp; Verifying Checksum ... OK</P>
<P><BR>Boot Linux:<BR>-----------</P>
<P>The "bootm" command is used to boot an application that is stored in<BR>memory (RAM or Flash). In case of a Linux kernel image, the contents<BR>of the "bootargs" environment variable is passed to the kernel as<BR>parameters. You can check and modify this variable using the<BR>"printenv" and "setenv" commands:</P>
<P><BR>&nbsp;=&gt; printenv bootargs<BR>&nbsp;bootargs=root=/dev/ram</P>
<P>&nbsp;=&gt; setenv bootargs root=/dev/nfs rw nfsroot=10.0.0.2:/LinuxPPC nfsaddrs=10.0.0.99:10.0.0.2</P>
<P>&nbsp;=&gt; printenv bootargs<BR>&nbsp;bootargs=root=/dev/nfs rw nfsroot=10.0.0.2:/LinuxPPC nfsaddrs=10.0.0.99:10.0.0.2</P>
<P>&nbsp;=&gt; bootm 40020000<BR>&nbsp;## Booting Linux kernel at 40020000 ...<BR>&nbsp;&nbsp;&nbsp; Image Name:&nbsp; 2.2.13 for NFS on TQM850L<BR>&nbsp;&nbsp;&nbsp; Image Type:&nbsp; PowerPC Linux Kernel Image (gzip compressed)<BR>&nbsp;&nbsp;&nbsp; Data Size:&nbsp; 381681 Bytes = 372 kB = 0 MB<BR>&nbsp;&nbsp;&nbsp; Load Address: 00000000<BR>&nbsp;&nbsp;&nbsp; Entry Point:&nbsp; 0000000c<BR>&nbsp;&nbsp;&nbsp; Verifying Checksum ... OK<BR>&nbsp;&nbsp;&nbsp; Uncompressing Kernel Image ... OK<BR>&nbsp;Linux version 2.2.13 (<A href="mailto:wd@denx.local.net">wd@denx.local.net</A>) (gcc version 2.95.2 19991024 (release)) #1 Wed Jul 19 02:35:17 MEST 2000<BR>&nbsp;Boot arguments: root=/dev/nfs rw nfsroot=10.0.0.2:/LinuxPPC nfsaddrs=10.0.0.99:10.0.0.2<BR>&nbsp;time_init: decrementer frequency = 187500000/60<BR>&nbsp;Calibrating delay loop... 49.77 BogoMIPS<BR>&nbsp;Memory: 15208k available (700k kernel code, 444k data, 32k init) [c0000000,c1000000]<BR>&nbsp;...</P>
<P>If you want to boot a Linux kernel with initial RAM disk, you pass<BR>the memory addresses of both the kernel and the initrd image (PPBCOOT<BR>format!) to the "bootm" command:</P>
<P>&nbsp;=&gt; imi 40100000 40200000</P>
<P>&nbsp;## Checking Image at 40100000 ...<BR>&nbsp;&nbsp;&nbsp; Image Name:&nbsp; 2.2.13 for initrd on TQM850L<BR>&nbsp;&nbsp;&nbsp; Image Type:&nbsp; PowerPC Linux Kernel Image (gzip compressed)<BR>&nbsp;&nbsp;&nbsp; Data Size:&nbsp; 335725 Bytes = 327 kB = 0 MB<BR>&nbsp;&nbsp;&nbsp; Load Address: 00000000<BR>&nbsp;&nbsp;&nbsp; Entry Point:&nbsp; 0000000c<BR>&nbsp;&nbsp;&nbsp; Verifying Checksum ... OK</P>
<P>&nbsp;## Checking Image at 40200000 ...<BR>&nbsp;&nbsp;&nbsp; Image Name:&nbsp; Simple Ramdisk Image<BR>&nbsp;&nbsp;&nbsp; Image Type:&nbsp; PowerPC Linux RAMDisk Image (gzip compressed)<BR>&nbsp;&nbsp;&nbsp; Data Size:&nbsp; 566530 Bytes = 553 kB = 0 MB<BR>&nbsp;&nbsp;&nbsp; Load Address: 00000000<BR>&nbsp;&nbsp;&nbsp; Entry Point:&nbsp; 00000000<BR>&nbsp;&nbsp;&nbsp; Verifying Checksum ... OK</P>
<P>&nbsp;=&gt; bootm 40100000 40200000<BR>&nbsp;## Booting Linux kernel at 40100000 ...<BR>&nbsp;&nbsp;&nbsp; Image Name:&nbsp; 2.2.13 for initrd on TQM850L<BR>&nbsp;&nbsp;&nbsp; Image Type:&nbsp; PowerPC Linux Kernel Image (gzip compressed)<BR>&nbsp;&nbsp;&nbsp; Data Size:&nbsp; 335725 Bytes = 327 kB = 0 MB<BR>&nbsp;&nbsp;&nbsp; Load Address: 00000000<BR>&nbsp;&nbsp;&nbsp; Entry Point:&nbsp; 0000000c<BR>&nbsp;&nbsp;&nbsp; Verifying Checksum ... OK<BR>&nbsp;&nbsp;&nbsp; Uncompressing Kernel Image ... OK<BR>&nbsp;## Loading RAMDisk Image at 40200000 ...<BR>&nbsp;&nbsp;&nbsp; Image Name:&nbsp; Simple Ramdisk Image<BR>&nbsp;&nbsp;&nbsp; Image Type:&nbsp; PowerPC Linux RAMDisk Image (gzip compressed)<BR>&nbsp;&nbsp;&nbsp; Data Size:&nbsp; 566530 Bytes = 553 kB = 0 MB<BR>&nbsp;&nbsp;&nbsp; Load Address: 00000000<BR>&nbsp;&nbsp;&nbsp; Entry Point:&nbsp; 00000000<BR>&nbsp;&nbsp;&nbsp; Verifying Checksum ... OK<BR>&nbsp;&nbsp;&nbsp; Loading Ramdisk ... OK<BR>&nbsp;Linux version 2.2.13 (<A href="mailto:wd@denx.local.net">wd@denx.local.net</A>) (gcc version 2.95.2 19991024 (release)) #1 Wed Jul 19 02:32:08 MEST 2000<BR>&nbsp;Boot arguments: root=/dev/ram<BR>&nbsp;time_init: decrementer frequency = 187500000/60<BR>&nbsp;Calibrating delay loop... 49.77 BogoMIPS<BR>&nbsp;...<BR>&nbsp;RAMDISK: Compressed image found at block 0<BR>&nbsp;VFS: Mounted root (ext2 filesystem).</P>
<P>&nbsp;bash#</P>
<P>Boot Linux and pass a flat device tree:<BR>-----------</P>
<P>First, U-Boot must be compiled with the appropriate defines. See the section<BR>titled "Linux Kernel Interface" above for a more in depth explanation. The<BR>following is an example of how to start a kernel and pass an updated<BR>flat device tree:</P>
<P>=&gt; print oftaddr<BR>oftaddr=0x300000<BR>=&gt; print oft<BR>oft=oftrees/mpc8540ads.dtb<BR>=&gt; tftp $oftaddr $oft<BR>Speed: 1000, full duplex<BR>Using TSEC0 device<BR>TFTP from server 192.168.1.1; our IP address is 192.168.1.101<BR>Filename 'oftrees/mpc8540ads.dtb'.<BR>Load address: 0x300000<BR>Loading: #<BR>done<BR>Bytes transferred = 4106 (100a hex)<BR>=&gt; tftp $loadaddr $bootfile<BR>Speed: 1000, full duplex<BR>Using TSEC0 device<BR>TFTP from server 192.168.1.1; our IP address is 192.168.1.2<BR>Filename 'uImage'.<BR>Load address: 0x200000<BR>Loading:############<BR>done<BR>Bytes transferred = 1029407 (fb51f hex)<BR>=&gt; print loadaddr<BR>loadaddr=200000<BR>=&gt; print oftaddr<BR>oftaddr=0x300000<BR>=&gt; bootm $loadaddr - $oftaddr<BR>## Booting image at 00200000 ...<BR>&nbsp;&nbsp; Image Name:&nbsp; Linux-2.6.17-dirty<BR>&nbsp;&nbsp; Image Type:&nbsp; PowerPC Linux Kernel Image (gzip compressed)<BR>&nbsp;&nbsp; Data Size:&nbsp; 1029343 Bytes = 1005.2 kB<BR>&nbsp;&nbsp; Load Address: 00000000<BR>&nbsp;&nbsp; Entry Point:&nbsp; 00000000<BR>&nbsp;&nbsp; Verifying Checksum ... OK<BR>&nbsp;&nbsp; Uncompressing Kernel Image ... OK<BR>Booting using flat device tree at 0x300000<BR>Using MPC85xx ADS machine description<BR>Memory CAM mapping: CAM0=256Mb, CAM1=256Mb, CAM2=0Mb residual: 0Mb<BR>[snip]</P>
<P><BR>More About U-Boot Image Types:<BR>------------------------------</P>
<P>U-Boot supports the following image types:</P>
<P>&nbsp;&nbsp; "Standalone Programs" are directly runnable in the environment<BR>&nbsp;provided by U-Boot; it is expected that (if they behave<BR>&nbsp;well) you can continue to work in U-Boot after return from<BR>&nbsp;the Standalone Program.<BR>&nbsp;&nbsp; "OS Kernel Images" are usually images of some Embedded OS which<BR>&nbsp;will take over control completely. Usually these programs<BR>&nbsp;will install their own set of exception handlers, device<BR>&nbsp;drivers, set up the MMU, etc. - this means, that you cannot<BR>&nbsp;expect to re-enter U-Boot except by resetting the CPU.<BR>&nbsp;&nbsp; "RAMDisk Images" are more or less just data blocks, and their<BR>&nbsp;parameters (address, size) are passed to an OS kernel that is<BR>&nbsp;being started.<BR>&nbsp;&nbsp; "Multi-File Images" contain several images, typically an OS<BR>&nbsp;(Linux) kernel image and one or more data images like<BR>&nbsp;RAMDisks. This construct is useful for instance when you want<BR>&nbsp;to boot over the network using BOOTP etc., where the boot<BR>&nbsp;server provides just a single image file, but you want to get<BR>&nbsp;for instance an OS kernel and a RAMDisk image.</P>
<P>&nbsp;"Multi-File Images" start with a list of image sizes, each<BR>&nbsp;image size (in bytes) specified by an "uint32_t" in network<BR>&nbsp;byte order. This list is terminated by an "(uint32_t)0".<BR>&nbsp;Immediately after the terminating 0 follow the images, one by<BR>&nbsp;one, all aligned on "uint32_t" boundaries (size rounded up to<BR>&nbsp;a multiple of 4 bytes).</P>
<P>&nbsp;&nbsp; "Firmware Images" are binary images containing firmware (like<BR>&nbsp;U-Boot or FPGA images) which usually will be programmed to<BR>&nbsp;flash memory.</P>
<P>&nbsp;&nbsp; "Script files" are command sequences that will be executed by<BR>&nbsp;U-Boot's command interpreter; this feature is especially<BR>&nbsp;useful when you configure U-Boot to use a real shell (hush)<BR>&nbsp;as command interpreter.</P>
<P>Booting the Linux zImage:<BR>-------------------------</P>
<P>On some platforms, it's possible to boot Linux zImage. This is done<BR>using the "bootz" command. The syntax of "bootz" command is the same<BR>as the syntax of "bootm" command.</P>
<P>Note, defining the CONFIG_SUPPORT_RAW_INITRD allows user to supply<BR>kernel with raw initrd images. The syntax is slightly different, the<BR>address of the initrd must be augmented by it's size, in the following<BR>format: "&lt;initrd addres&gt;:&lt;initrd size&gt;".</P>
<P><BR>Standalone HOWTO:<BR>=================</P>
<P>One of the features of U-Boot is that you can dynamically load and<BR>run "standalone" applications, which can use some resources of<BR>U-Boot like console I/O functions or interrupt services.</P>
<P>Two simple examples are included with the sources:</P>
<P>"Hello World" Demo:<BR>-------------------</P>
<P>'examples/hello_world.c' contains a small "Hello World" Demo<BR>application; it is automatically compiled when you build U-Boot.<BR>It's configured to run at address 0x00040004, so you can play with it<BR>like that:</P>
<P>&nbsp;=&gt; loads<BR>&nbsp;## Ready for S-Record download ...<BR>&nbsp;~&gt;examples/hello_world.srec<BR>&nbsp;1 2 3 4 5 6 7 8 9 10 11 ...<BR>&nbsp;[file transfer complete]<BR>&nbsp;[connected]<BR>&nbsp;## Start Addr = 0x00040004</P>
<P>&nbsp;=&gt; go 40004 Hello World! This is a test.<BR>&nbsp;## Starting application at 0x00040004 ...<BR>&nbsp;Hello World<BR>&nbsp;argc = 7<BR>&nbsp;argv[0] = "40004"<BR>&nbsp;argv[1] = "Hello"<BR>&nbsp;argv[2] = "World!"<BR>&nbsp;argv[3] = "This"<BR>&nbsp;argv[4] = "is"<BR>&nbsp;argv[5] = "a"<BR>&nbsp;argv[6] = "test."<BR>&nbsp;argv[7] = "&lt;NULL&gt;"<BR>&nbsp;Hit any key to exit ...</P>
<P>&nbsp;## Application terminated, rc = 0x0</P>
<P>Another example, which demonstrates how to register a CPM interrupt<BR>handler with the U-Boot code, can be found in 'examples/timer.c'.<BR>Here, a CPM timer is set up to generate an interrupt every second.<BR>The interrupt service routine is trivial, just printing a '.'<BR>character, but this is just a demo program. The application can be<BR>controlled by the following keys:</P>
<P>&nbsp;? - print current values og the CPM Timer registers<BR>&nbsp;b - enable interrupts and start timer<BR>&nbsp;e - stop timer and disable interrupts<BR>&nbsp;q - quit application</P>
<P>&nbsp;=&gt; loads<BR>&nbsp;## Ready for S-Record download ...<BR>&nbsp;~&gt;examples/timer.srec<BR>&nbsp;1 2 3 4 5 6 7 8 9 10 11 ...<BR>&nbsp;[file transfer complete]<BR>&nbsp;[connected]<BR>&nbsp;## Start Addr = 0x00040004</P>
<P>&nbsp;=&gt; go 40004<BR>&nbsp;## Starting application at 0x00040004 ...<BR>&nbsp;TIMERS=0xfff00980<BR>&nbsp;Using timer 1<BR>&nbsp;&nbsp; tgcr @ 0xfff00980, tmr @ 0xfff00990, trr @ 0xfff00994, tcr @ 0xfff00998, tcn @ 0xfff0099c, ter @ 0xfff009b0</P>
<P>Hit 'b':<BR>&nbsp;[q, b, e, ?] Set interval 1000000 us<BR>&nbsp;Enabling timer<BR>Hit '?':<BR>&nbsp;[q, b, e, ?] ........<BR>&nbsp;tgcr=0x1, tmr=0xff1c, trr=0x3d09, tcr=0x0, tcn=0xef6, ter=0x0<BR>Hit '?':<BR>&nbsp;[q, b, e, ?] .<BR>&nbsp;tgcr=0x1, tmr=0xff1c, trr=0x3d09, tcr=0x0, tcn=0x2ad4, ter=0x0<BR>Hit '?':<BR>&nbsp;[q, b, e, ?] .<BR>&nbsp;tgcr=0x1, tmr=0xff1c, trr=0x3d09, tcr=0x0, tcn=0x1efc, ter=0x0<BR>Hit '?':<BR>&nbsp;[q, b, e, ?] .<BR>&nbsp;tgcr=0x1, tmr=0xff1c, trr=0x3d09, tcr=0x0, tcn=0x169d, ter=0x0<BR>Hit 'e':<BR>&nbsp;[q, b, e, ?] ...Stopping timer<BR>Hit 'q':<BR>&nbsp;[q, b, e, ?] ## Application terminated, rc = 0x0</P>
<P><BR>Minicom warning:<BR>================</P>
<P>Over time, many people have reported problems when trying to use the<BR>"minicom" terminal emulation program for serial download. I (wd)<BR>consider minicom to be broken, and recommend not to use it. Under<BR>Unix, I recommend to use C-Kermit for general purpose use (and<BR>especially for kermit binary protocol download ("loadb" command), and<BR>use "cu" for S-Record download ("loads" command).&nbsp; See<BR><A href="http://www.denx.de/wiki/view/DULG/SystemSetup#Section_4.3">http://www.denx.de/wiki/view/DULG/SystemSetup#Section_4.3</A>.<BR>for help with kermit.</P>
<P><BR>Nevertheless, if you absolutely want to use it try adding this<BR>configuration to your "File transfer protocols" section:</P>
<P>&nbsp;&nbsp;&nbsp; Name&nbsp;&nbsp;&nbsp; Program&nbsp;&nbsp;&nbsp;Name U/D FullScr IO-Red. Multi<BR>&nbsp;X&nbsp; kermit&nbsp; /usr/bin/kermit -i -l %l -s&nbsp; Y&nbsp;&nbsp;&nbsp; U&nbsp;&nbsp;&nbsp; Y&nbsp;&nbsp;&nbsp; N&nbsp;&nbsp; N<BR>&nbsp;Y&nbsp; kermit&nbsp; /usr/bin/kermit -i -l %l -r&nbsp; N&nbsp;&nbsp;&nbsp; D&nbsp;&nbsp;&nbsp; Y&nbsp;&nbsp;&nbsp; N&nbsp;&nbsp; N</P>
<P><BR>NetBSD Notes:<BR>=============</P>
<P>Starting at version 0.9.2, U-Boot supports NetBSD both as host<BR>(build U-Boot) and target system (boots NetBSD/mpc8xx).</P>
<P>Building requires a cross environment; it is known to work on<BR>NetBSD/i386 with the cross-powerpc-netbsd-1.3 package (you will also<BR>need gmake since the Makefiles are not compatible with BSD make).<BR>Note that the cross-powerpc package does not install include files;<BR>attempting to build U-Boot will fail because &lt;machine/ansi.h&gt; is<BR>missing.&nbsp; This file has to be installed and patched manually:</P>
<P>&nbsp;# cd /usr/pkg/cross/powerpc-netbsd/include<BR>&nbsp;# mkdir powerpc<BR>&nbsp;# ln -s powerpc machine<BR>&nbsp;# cp /usr/src/sys/arch/powerpc/include/ansi.h powerpc/ansi.h<BR>&nbsp;# ${EDIT} powerpc/ansi.h&nbsp;## must remove __va_list, _BSD_VA_LIST</P>
<P>Native builds *don't* work due to incompatibilities between native<BR>and U-Boot include files.</P>
<P>Booting assumes that (the first part of) the image booted is a<BR>stage-2 loader which in turn loads and then invokes the kernel<BR>proper. Loader sources will eventually appear in the NetBSD source<BR>tree (probably in sys/arc/mpc8xx/stand/u-boot_stage2/); in the<BR>meantime, see <A href="ftp://ftp.denx.de/pub/u-boot/ppcboot_stage2.tar.gz">ftp://ftp.denx.de/pub/u-boot/ppcboot_stage2.tar.gz</A></P>
<P><BR>Implementation Internals:<BR>=========================</P>
<P>The following is not intended to be a complete description of every<BR>implementation detail. However, it should help to understand the<BR>inner workings of U-Boot and make it easier to port it to custom<BR>hardware.</P>
<P><BR>Initial Stack, Global Data:<BR>---------------------------</P>
<P>The implementation of U-Boot is complicated by the fact that U-Boot<BR>starts running out of ROM (flash memory), usually without access to<BR>system RAM (because the memory controller is not initialized yet).<BR>This means that we don't have writable Data or BSS segments, and BSS<BR>is not initialized as zero. To be able to get a C environment working<BR>at all, we have to allocate at least a minimal stack. Implementation<BR>options for this are defined and restricted by the CPU used: Some CPU<BR>models provide on-chip memory (like the IMMR area on MPC8xx and<BR>MPC826x processors), on others (parts of) the data cache can be<BR>locked as (mis-) used as memory, etc.</P>
<P>&nbsp;Chris Hallinan posted a good summary of these issues to the<BR>&nbsp;U-Boot mailing list:</P>
<P>&nbsp;Subject: RE: [U-Boot-Users] RE: More On Memory Bank x (nothingness)?<BR>&nbsp;From: "Chris Hallinan" &lt;<A href="mailto:clh@net1plus.com">clh@net1plus.com</A>&gt;<BR>&nbsp;Date: Mon, 10 Feb 2003 16:43:46 -0500 (22:43 MET)<BR>&nbsp;...</P>
<P>&nbsp;Correct me if I'm wrong, folks, but the way I understand it<BR>&nbsp;is this: Using DCACHE as initial RAM for Stack, etc, does not<BR>&nbsp;require any physical RAM backing up the cache. The cleverness<BR>&nbsp;is that the cache is being used as a temporary supply of<BR>&nbsp;necessary storage before the SDRAM controller is setup. It's<BR>&nbsp;beyond the scope of this list to explain the details, but you<BR>&nbsp;can see how this works by studying the cache architecture and<BR>&nbsp;operation in the architecture and processor-specific manuals.</P>
<P>&nbsp;OCM is On Chip Memory, which I believe the 405GP has 4K. It<BR>&nbsp;is another option for the system designer to use as an<BR>&nbsp;initial stack/RAM area prior to SDRAM being available. Either<BR>&nbsp;option should work for you. Using CS 4 should be fine if your<BR>&nbsp;board designers haven't used it for something that would<BR>&nbsp;cause you grief during the initial boot! It is frequently not<BR>&nbsp;used.</P>
<P>&nbsp;CONFIG_SYS_INIT_RAM_ADDR should be somewhere that won't interfere<BR>&nbsp;with your processor/board/system design. The default value<BR>&nbsp;you will find in any recent u-boot distribution in<BR>&nbsp;walnut.h should work for you. I'd set it to a value larger<BR>&nbsp;than your SDRAM module. If you have a 64MB SDRAM module, set<BR>&nbsp;it above 400_0000. Just make sure your board has no resources<BR>&nbsp;that are supposed to respond to that address! That code in<BR>&nbsp;start.S has been around a while and should work as is when<BR>&nbsp;you get the config right.</P>
<P>&nbsp;-Chris Hallinan<BR>&nbsp;DS4.COM, Inc.</P>
<P>It is essential to remember this, since it has some impact on the C<BR>code for the initialization procedures:</P>
<P>* Initialized global data (data segment) is read-only. Do not attempt<BR>&nbsp; to write it.</P>
<P>* Do not use any uninitialized global data (or implicitly initialized<BR>&nbsp; as zero data - BSS segment) at all - this is undefined, initiali-<BR>&nbsp; zation is performed later (when relocating to RAM).</P>
<P>* Stack space is very limited. Avoid big data buffers or things like<BR>&nbsp; that.</P>
<P>Having only the stack as writable memory limits means we cannot use<BR>normal global data to share information between the code. But it<BR>turned out that the implementation of U-Boot can be greatly<BR>simplified by making a global data structure (gd_t) available to all<BR>functions. We could pass a pointer to this data as argument to _all_<BR>functions, but this would bloat the code. Instead we use a feature of<BR>the GCC compiler (Global Register Variables) to share the data: we<BR>place a pointer (gd) to the global data into a register which we<BR>reserve for this purpose.</P>
<P>When choosing a register for such a purpose we are restricted by the<BR>relevant&nbsp; (E)ABI&nbsp; specifications for the current architecture, and by<BR>GCC's implementation.</P>
<P>For PowerPC, the following registers have specific use:<BR>&nbsp;R1:&nbsp;stack pointer<BR>&nbsp;R2:&nbsp;reserved for system use<BR>&nbsp;R3-R4:&nbsp;parameter passing and return values<BR>&nbsp;R5-R10: parameter passing<BR>&nbsp;R13:&nbsp;small data area pointer<BR>&nbsp;R30:&nbsp;GOT pointer<BR>&nbsp;R31:&nbsp;frame pointer</P>
<P>&nbsp;(U-Boot also uses R12 as internal GOT pointer. r12<BR>&nbsp;is a volatile register so r12 needs to be reset when<BR>&nbsp;going back and forth between asm and C)</P>
<P>&nbsp;&nbsp;&nbsp; ==&gt; U-Boot will use R2 to hold a pointer to the global data</P>
<P>&nbsp;&nbsp;&nbsp; Note: on PPC, we could use a static initializer (since the<BR>&nbsp;&nbsp;&nbsp; address of the global data structure is known at compile time),<BR>&nbsp;&nbsp;&nbsp; but it turned out that reserving a register results in somewhat<BR>&nbsp;&nbsp;&nbsp; smaller code - although the code savings are not that big (on<BR>&nbsp;&nbsp;&nbsp; average for all boards 752 bytes for the whole U-Boot image,<BR>&nbsp;&nbsp;&nbsp; 624 text + 127 data).</P>
<P>On Blackfin, the normal C ABI (except for P3) is followed as documented here:<BR>&nbsp;<A href="http://docs.blackfin.uclinux.org/doku.php?id=application_binary_interface">http://docs.blackfin.uclinux.org/doku.php?id=application_binary_interface</A></P>
<P>&nbsp;&nbsp;&nbsp; ==&gt; U-Boot will use P3 to hold a pointer to the global data</P>
<P>On ARM, the following registers are used:</P>
<P>&nbsp;R0:&nbsp;function argument word/integer result<BR>&nbsp;R1-R3:&nbsp;function argument word<BR>&nbsp;R9:&nbsp;platform specific<BR>&nbsp;R10:&nbsp;stack limit (used only if stack checking is enabled)<BR>&nbsp;R11:&nbsp;argument (frame) pointer<BR>&nbsp;R12:&nbsp;temporary workspace<BR>&nbsp;R13:&nbsp;stack pointer<BR>&nbsp;R14:&nbsp;link register<BR>&nbsp;R15:&nbsp;program counter</P>
<P>&nbsp;&nbsp;&nbsp; ==&gt; U-Boot will use R9 to hold a pointer to the global data</P>
<P>&nbsp;&nbsp;&nbsp; Note: on ARM, only R_ARM_RELATIVE relocations are supported.</P>
<P>On Nios II, the ABI is documented here:<BR>&nbsp;<A href="http://www.altera.com/literature/hb/nios2/n2cpu_nii51016.pdf">http://www.altera.com/literature/hb/nios2/n2cpu_nii51016.pdf</A></P>
<P>&nbsp;&nbsp;&nbsp; ==&gt; U-Boot will use gp to hold a pointer to the global data</P>
<P>&nbsp;&nbsp;&nbsp; Note: on Nios II, we give "-G0" option to gcc and don't use gp<BR>&nbsp;&nbsp;&nbsp; to access small data sections, so gp is free.</P>
<P>On NDS32, the following registers are used:</P>
<P>&nbsp;R0-R1:&nbsp;argument/return<BR>&nbsp;R2-R5:&nbsp;argument<BR>&nbsp;R15:&nbsp;temporary register for assembler<BR>&nbsp;R16:&nbsp;trampoline register<BR>&nbsp;R28:&nbsp;frame pointer (FP)<BR>&nbsp;R29:&nbsp;global pointer (GP)<BR>&nbsp;R30:&nbsp;link register (LP)<BR>&nbsp;R31:&nbsp;stack pointer (SP)<BR>&nbsp;PC:&nbsp;program counter (PC)</P>
<P>&nbsp;&nbsp;&nbsp; ==&gt; U-Boot will use R10 to hold a pointer to the global data</P>
<P>NOTE: DECLARE_GLOBAL_DATA_PTR must be used with file-global scope,<BR>or current versions of GCC may "optimize" the code too much.</P>
<P>Memory Management:<BR>------------------</P>
<P>U-Boot runs in system state and uses physical addresses, i.e. the<BR>MMU is not used either for address mapping nor for memory protection.</P>
<P>The available memory is mapped to fixed addresses using the memory<BR>controller. In this process, a contiguous block is formed for each<BR>memory type (Flash, SDRAM, SRAM), even when it consists of several<BR>physical memory banks.</P>
<P>U-Boot is installed in the first 128 kB of the first Flash bank (on<BR>TQM8xxL modules this is the range 0x40000000 ... 0x4001FFFF). After<BR>booting and sizing and initializing DRAM, the code relocates itself<BR>to the upper end of DRAM. Immediately below the U-Boot code some<BR>memory is reserved for use by malloc() [see CONFIG_SYS_MALLOC_LEN<BR>configuration setting]. Below that, a structure with global Board<BR>Info data is placed, followed by the stack (growing downward).</P>
<P>Additionally, some exception handler code is copied to the low 8 kB<BR>of DRAM (0x00000000 ... 0x00001FFF).</P>
<P>So a typical memory configuration with 16 MB of DRAM could look like<BR>this:</P>
<P>&nbsp;0x0000 0000&nbsp;Exception Vector code<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :<BR>&nbsp;0x0000 1FFF<BR>&nbsp;0x0000 2000&nbsp;Free for Application Use<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :</P>
<P>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :<BR>&nbsp;0x00FB FF20&nbsp;Monitor Stack (Growing downward)<BR>&nbsp;0x00FB FFAC&nbsp;Board Info Data and permanent copy of global data<BR>&nbsp;0x00FC 0000&nbsp;Malloc Arena<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; :<BR>&nbsp;0x00FD FFFF<BR>&nbsp;0x00FE 0000&nbsp;RAM Copy of Monitor Code<BR>&nbsp;...&nbsp;&nbsp;eventually: LCD or video framebuffer<BR>&nbsp;...&nbsp;&nbsp;eventually: pRAM (Protected RAM - unchanged by reset)<BR>&nbsp;0x00FF FFFF&nbsp;[End of RAM]</P>
<P><BR>System Initialization:<BR>----------------------</P>
<P>In the reset configuration, U-Boot starts at the reset entry point<BR>(on most PowerPC systems at address 0x00000100). Because of the reset<BR>configuration for CS0# this is a mirror of the on board Flash memory.<BR>To be able to re-map memory U-Boot then jumps to its link address.<BR>To be able to implement the initialization code in C, a (small!)<BR>initial stack is set up in the internal Dual Ported RAM (in case CPUs<BR>which provide such a feature like MPC8xx or MPC8260), or in a locked<BR>part of the data cache. After that, U-Boot initializes the CPU core,<BR>the caches and the SIU.</P>
<P>Next, all (potentially) available memory banks are mapped using a<BR>preliminary mapping. For example, we put them on 512 MB boundaries<BR>(multiples of 0x20000000: SDRAM on 0x00000000 and 0x20000000, Flash<BR>on 0x40000000 and 0x60000000, SRAM on 0x80000000). Then UPM A is<BR>programmed for SDRAM access. Using the temporary configuration, a<BR>simple memory test is run that determines the size of the SDRAM<BR>banks.</P>
<P>When there is more than one SDRAM bank, and the banks are of<BR>different size, the largest is mapped first. For equal size, the first<BR>bank (CS2#) is mapped first. The first mapping is always for address<BR>0x00000000, with any additional banks following immediately to create<BR>contiguous memory starting from 0.</P>
<P>Then, the monitor installs itself at the upper end of the SDRAM area<BR>and allocates memory for use by malloc() and for the global Board<BR>Info data; also, the exception vector code is copied to the low RAM<BR>pages, and the final stack is set up.</P>
<P>Only after this relocation will you have a "normal" C environment;<BR>until that you are restricted in several ways, mostly because you are<BR>running from ROM, and because the code will have to be relocated to a<BR>new address in RAM.</P>
<P><BR>U-Boot Porting Guide:<BR>----------------------</P>
<P>[Based on messages by Jerry Van Baren in the U-Boot-Users mailing<BR>list, October 2002]</P>
<P><BR>int main(int argc, char *argv[])<BR>{<BR>&nbsp;sighandler_t no_more_time;</P>
<P>&nbsp;signal(SIGALRM, no_more_time);<BR>&nbsp;alarm(PROJECT_DEADLINE - toSec (3 * WEEK));</P>
<P>&nbsp;if (available_money &gt; available_manpower) {<BR>&nbsp;&nbsp;Pay consultant to port U-Boot;<BR>&nbsp;&nbsp;return 0;<BR>&nbsp;}</P>
<P>&nbsp;Download latest U-Boot source;</P>
<P>&nbsp;Subscribe to u-boot mailing list;</P>
<P>&nbsp;if (clueless)<BR>&nbsp;&nbsp;email("Hi, I am new to U-Boot, how do I get started?");</P>
<P>&nbsp;while (learning) {<BR>&nbsp;&nbsp;Read the README file in the top level directory;<BR>&nbsp;&nbsp;Read <A href="http://www.denx.de/twiki/bin/view/DULG/Manual">http://www.denx.de/twiki/bin/view/DULG/Manual</A>;<BR>&nbsp;&nbsp;Read applicable doc/*.README;<BR>&nbsp;&nbsp;Read the source, Luke;<BR>&nbsp;&nbsp;/* find . -name "*.[chS]" | xargs grep -i &lt;keyword&gt; */<BR>&nbsp;}</P>
<P>&nbsp;if (available_money &gt; toLocalCurrency ($2500))<BR>&nbsp;&nbsp;Buy a BDI3000;<BR>&nbsp;else<BR>&nbsp;&nbsp;Add a lot of aggravation and time;</P>
<P>&nbsp;if (a similar board exists) {&nbsp;/* hopefully... */<BR>&nbsp;&nbsp;cp -a board/&lt;similar&gt; board/&lt;myboard&gt;<BR>&nbsp;&nbsp;cp include/configs/&lt;similar&gt;.h include/configs/&lt;myboard&gt;.h<BR>&nbsp;} else {<BR>&nbsp;&nbsp;Create your own board support subdirectory;<BR>&nbsp;&nbsp;Create your own board include/configs/&lt;myboard&gt;.h file;<BR>&nbsp;}<BR>&nbsp;Edit new board/&lt;myboard&gt; files<BR>&nbsp;Edit new include/configs/&lt;myboard&gt;.h</P>
<P>&nbsp;while (!accepted) {<BR>&nbsp;&nbsp;while (!running) {<BR>&nbsp;&nbsp;&nbsp;do {<BR>&nbsp;&nbsp;&nbsp;&nbsp;Add / modify source code;<BR>&nbsp;&nbsp;&nbsp;} until (compiles);<BR>&nbsp;&nbsp;&nbsp;Debug;<BR>&nbsp;&nbsp;&nbsp;if (clueless)<BR>&nbsp;&nbsp;&nbsp;&nbsp;email("Hi, I am having problems...");<BR>&nbsp;&nbsp;}<BR>&nbsp;&nbsp;Send patch file to the U-Boot email list;<BR>&nbsp;&nbsp;if (reasonable critiques)<BR>&nbsp;&nbsp;&nbsp;Incorporate improvements from email list code review;<BR>&nbsp;&nbsp;else<BR>&nbsp;&nbsp;&nbsp;Defend code as written;<BR>&nbsp;}</P>
<P>&nbsp;return 0;<BR>}</P>
<P>void no_more_time (int sig)<BR>{<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; hire_a_guru();<BR>}</P>
<P><BR>Coding Standards:<BR>-----------------</P>
<P>All contributions to U-Boot should conform to the Linux kernel<BR>coding style; see the file "Documentation/CodingStyle" and the script<BR>"scripts/Lindent" in your Linux kernel source directory.</P>
<P>Source files originating from a different project (for example the<BR>MTD subsystem) are generally exempt from these guidelines and are not<BR>reformatted to ease subsequent migration to newer versions of those<BR>sources.</P>
<P>Please note that U-Boot is implemented in C (and to some small parts in<BR>Assembler); no C++ is used, so please do not use C++ style comments (//)<BR>in your code.</P>
<P>Please also stick to the following formatting rules:<BR>- remove any trailing white space<BR>- use TAB characters for indentation and vertical alignment, not spaces<BR>- make sure NOT to use DOS '\r\n' line feeds<BR>- do not add more than 2 consecutive empty lines to source files<BR>- do not add trailing empty lines to source files</P>
<P>Submissions which do not conform to the standards may be returned<BR>with a request to reformat the changes.</P>
<P><BR>Submitting Patches:<BR>-------------------</P>
<P>Since the number of patches for U-Boot is growing, we need to<BR>establish some rules. Submissions which do not conform to these rules<BR>may be rejected, even when they contain important and valuable stuff.</P>
<P>Please see <A href="http://www.denx.de/wiki/U-Boot/Patches">http://www.denx.de/wiki/U-Boot/Patches</A> for details.</P>
<P>Patches shall be sent to the u-boot mailing list &lt;<A href="mailto:u-boot@lists.denx.de">u-boot@lists.denx.de</A>&gt;;<BR>see <A href="http://lists.denx.de/mailman/listinfo/u-boot">http://lists.denx.de/mailman/listinfo/u-boot</A></P>
<P>When you send a patch, please include the following information with<BR>it:</P>
<P>* For bug fixes: a description of the bug and how your patch fixes<BR>&nbsp; this bug. Please try to include a way of demonstrating that the<BR>&nbsp; patch actually fixes something.</P>
<P>* For new features: a description of the feature and your<BR>&nbsp; implementation.</P>
<P>* A CHANGELOG entry as plaintext (separate from the patch)</P>
<P>* For major contributions, your entry to the CREDITS file</P>
<P>* When you add support for a new board, don't forget to add a<BR>&nbsp; maintainer e-mail address to the boards.cfg file, too.</P>
<P>* If your patch adds new configuration options, don't forget to<BR>&nbsp; document these in the README file.</P>
<P>* The patch itself. If you are using git (which is *strongly*<BR>&nbsp; recommended) you can easily generate the patch using the<BR>&nbsp; "git format-patch". If you then use "git send-email" to send it to<BR>&nbsp; the U-Boot mailing list, you will avoid most of the common problems<BR>&nbsp; with some other mail clients.</P>
<P>&nbsp; If you cannot use git, use "diff -purN OLD NEW". If your version of<BR>&nbsp; diff does not support these options, then get the latest version of<BR>&nbsp; GNU diff.</P>
<P>&nbsp; The current directory when running this command shall be the parent<BR>&nbsp; directory of the U-Boot source tree (i. e. please make sure that<BR>&nbsp; your patch includes sufficient directory information for the<BR>&nbsp; affected files).</P>
<P>&nbsp; We prefer patches as plain text. MIME attachments are discouraged,<BR>&nbsp; and compressed attachments must not be used.</P>
<P>* If one logical set of modifications affects or creates several<BR>&nbsp; files, all these changes shall be submitted in a SINGLE patch file.</P>
<P>* Changesets that contain different, unrelated modifications shall be<BR>&nbsp; submitted as SEPARATE patches, one patch per changeset.</P>
<P><BR>Notes:</P>
<P>* Before sending the patch, run the MAKEALL script on your patched<BR>&nbsp; source tree and make sure that no errors or warnings are reported<BR>&nbsp; for any of the boards.</P>
<P>* Keep your modifications to the necessary minimum: A patch<BR>&nbsp; containing several unrelated changes or arbitrary reformats will be<BR>&nbsp; returned with a request to re-formatting / split it.</P>
<P>* If you modify existing code, make sure that your new code does not<BR>&nbsp; add to the memory footprint of the code ;-) Small is beautiful!<BR>&nbsp; When adding new features, these should compile conditionally only<BR>&nbsp; (using #ifdef), and the resulting code with the new feature<BR>&nbsp; disabled must not need more memory than the old code without your<BR>&nbsp; modification.</P>
<P>* Remember that there is a size limit of 100 kB per message on the<BR>&nbsp; u-boot mailing list. Bigger patches will be moderated. If they are<BR>&nbsp; reasonable and not too big, they will be acknowledged. But patches<BR>&nbsp; bigger than the size limit should be avoided.