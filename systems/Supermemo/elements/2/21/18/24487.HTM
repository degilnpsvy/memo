As discussed previously, interrupt handlers have two conflicting requirements: They are responsible for the bulk of device data processing, but they have to exit as fast as possible. To bail out of this situation, interrupt handlers are designed in two parts: a hurried and harried top half that interacts with the hardware, and a relaxed bottom half that does most of the processing with all interrupts enabled. <FONT class=extract>Unlike interrupts, bottom halves are synchronous because the kernel decides when to execute them.</FONT> The following mechanisms are available in the kernel to defer work to a bottom half: softirqs, tasklets, and work queues.