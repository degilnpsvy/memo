/**<BR>&nbsp;* struct kset - a set of kobjects of a specific type, belonging to a specific subsystem.<BR>&nbsp;*<BR><FONT class=extract>&nbsp;* A kset defines a group of kobjects.&nbsp; They can be individually<BR>&nbsp;* different "types" but overall these kobjects all want to be grouped<BR>&nbsp;* together and operated on in the same manner.&nbsp; ksets are used to<BR>&nbsp;* define the attribute callbacks and other common events that happen to<BR>&nbsp;* a kobject.<BR></FONT>&nbsp;*<BR>&nbsp;* @list: the list of all kobjects for this kset<BR>&nbsp;* @list_lock: a lock for iterating over the kobjects<BR>&nbsp;* @kobj: the embedded kobject for this kset (recursion, isn't it fun...)<BR>&nbsp;* @uevent_ops: the set of uevent operations for this kset.&nbsp; These are<BR>&nbsp;* called whenever a kobject has something happen to it so that the kset<BR>&nbsp;* can add new environment variables, or filter out the uevents if so<BR>&nbsp;* desired.<BR>&nbsp;*/<BR>struct kset {<BR><FONT class=clozed>&nbsp;struct list_head list;<BR>&nbsp;spinlock_t list_lock;<BR>&nbsp;struct kobject kobj;<BR>&nbsp;const struct kset_uevent_ops *uevent_ops;</FONT><BR>};