<B><SPAN lang=EN-US><A href="http://blog.unclesniper.org/archives/2-Linux-programmers,-learn-the-difference-between-EACCES-and-EPERM-already%21.html" target=_blank><FONT color=#0000ff size=5 face=Calibri>Linux programmers, learn the difference between EACCES and EPERM already!</FONT></A></SPAN></B> 
<P><FONT size=5></FONT></P>
<P><SPAN lang=EN-US><FONT class=clozed size=5 face=Calibri>It appears that many programmers are unaware that there is a fundamental difference between the error codesEACCES&nbsp;(aka "Permission denied") and&nbsp;EPERM&nbsp;(aka "Operation not permitted"). In particular, a lot of code returnsEPERM&nbsp;when they really mean&nbsp;EACCES:</FONT></SPAN></P>
<P><SPAN lang=EN-US><FONT class=clozed size=5 face=Calibri>mist% killall sshd</FONT></SPAN></P>
<P><SPAN lang=EN-US><FONT class=clozed size=5 face=Calibri>sshd(2244): Operation not permitted</FONT></SPAN></P>
<P><SPAN lang=EN-US><FONT class=clozed size=5 face=Calibri>To clear this up: "Permission denied" means just that -- the process has insufficient privileges to perform the requested operation. Simply put, this means that "trying the same thing as root will work". For instance, messing around with files you do not have the appropriate permissions to (i.e. in the&nbsp;access(2)&nbsp;sense) will get youEACCES:</FONT></SPAN></P>
<P><SPAN lang=EN-US><FONT class=clozed size=5 face=Calibri>mist% ls /root</FONT></SPAN></P>
<P><SPAN lang=EN-US><FONT class=clozed size=5 face=Calibri>ls: cannot open directory /root: Permission denied</FONT></SPAN></P>
<P><SPAN lang=EN-US><FONT class=clozed size=5 face=Calibri>On the other hand, <FONT class=extract>"Operation not permitted" means the operation is&nbsp;<B>systematically</B>&nbsp;not permissible; in other words it would be unwise for the system to perform the requested operation -- regardless of access privileges (think "I can't let you do that, Dave."). Usually, this means that either the operation is not supported (e.g.chmodding a file residing on a FAT filesystem -- FAT simply does not support permission bits, there is nothing anyone can do about that) or it would endanger the integrity of the system (e.g. creating additional&nbsp;</FONT></FONT><A href="http://blog.unclesniper.org/archives/1-Hardlinks-are-not-symlinks%21.html" target=_blank><FONT class=clozed color=#0000ff size=5 face=Calibri>hardlinks</FONT></A><FONT class=clozed size=5 face=Calibri><FONT class=extract>&nbsp;on a directory -- this would mess up the reference counting mechanism and result in "lost" disk space). Simply put, this means that "it cannot be done, not even as root".</FONT><BR><BR>So next time you write code signalling errors with the&nbsp;E*&nbsp;constants, think hard before choosing: Do user privileges play a role in whether or not the error will occur? If yes, use&nbsp;EACCES. If no, use&nbsp;EPERM.</FONT></SPAN>