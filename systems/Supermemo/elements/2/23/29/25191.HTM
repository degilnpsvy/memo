/**<BR>&nbsp;* <FONT class=clozed>kobject_move</FONT> - move object to another parent<BR>&nbsp;* @kobj: object in question.<BR>&nbsp;* @new_parent: object's new parent (can be NULL)<BR>&nbsp;*/<BR>int kobject_move(struct kobject *kobj, struct kobject *new_parent)<BR>{<BR>&nbsp;int error;<BR>&nbsp;struct kobject *old_parent;<BR>&nbsp;const char *devpath = NULL;<BR>&nbsp;char *devpath_string = NULL;<BR>&nbsp;char *envp[2]; 
<P></P>
<P>&nbsp;kobj = kobject_get(kobj);<BR>&nbsp;if (!kobj)<BR>&nbsp;&nbsp;return -EINVAL;<BR>&nbsp;new_parent = kobject_get(new_parent);<BR>&nbsp;if (!new_parent) {<BR>&nbsp;&nbsp;if (kobj-&gt;kset)<BR>&nbsp;&nbsp;&nbsp;new_parent = kobject_get(&amp;kobj-&gt;kset-&gt;kobj);<BR>&nbsp;}</P>
<P>&nbsp;/* old object path */<BR>&nbsp;devpath = kobject_get_path(kobj, GFP_KERNEL);<BR>&nbsp;if (!devpath) {<BR>&nbsp;&nbsp;error = -ENOMEM;<BR>&nbsp;&nbsp;goto out;<BR>&nbsp;}<BR>&nbsp;devpath_string = kmalloc(strlen(devpath) + 15, GFP_KERNEL);<BR>&nbsp;if (!devpath_string) {<BR>&nbsp;&nbsp;error = -ENOMEM;<BR>&nbsp;&nbsp;goto out;<BR>&nbsp;}<BR>&nbsp;sprintf(devpath_string, "DEVPATH_OLD=%s", devpath);<BR>&nbsp;envp[0] = devpath_string;<BR>&nbsp;envp[1] = NULL;<BR>&nbsp;error = sysfs_move_dir_ns(kobj, new_parent, kobject_namespace(kobj));<BR>&nbsp;if (error)<BR>&nbsp;&nbsp;goto out;<BR>&nbsp;old_parent = kobj-&gt;parent;<BR>&nbsp;kobj-&gt;parent = new_parent;<BR>&nbsp;new_parent = NULL;<BR>&nbsp;kobject_put(old_parent);<BR>&nbsp;kobject_uevent_env(kobj, KOBJ_MOVE, envp);<BR>out:<BR>&nbsp;kobject_put(new_parent);<BR>&nbsp;kobject_put(kobj);<BR>&nbsp;kfree(devpath_string);<BR>&nbsp;kfree(devpath);<BR>&nbsp;return error;<BR>}<BR>EXPORT_SYMBOL_GPL(kobject_move);