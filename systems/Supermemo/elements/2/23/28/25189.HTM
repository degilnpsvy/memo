/**<BR>&nbsp;* kobject_init_and_add - initialize a kobject structure and add it to the kobject hierarchy<BR>&nbsp;* @kobj: pointer to the kobject to initialize<BR>&nbsp;* @ktype: pointer to the ktype for this kobject.<BR>&nbsp;* @parent: pointer to the parent of this kobject.<BR>&nbsp;* @fmt: the name of the kobject.<BR>&nbsp;*<BR>&nbsp;* This function combines the call to kobject_init() and<BR>&nbsp;* kobject_add().&nbsp; The same type of error handling after a call to<BR>&nbsp;* kobject_add() and kobject lifetime rules are the same here.<BR>&nbsp;*/<BR>int kobject_init_and_add(struct kobject *kobj, struct kobj_type *ktype,<BR>&nbsp;&nbsp;&nbsp; struct kobject *parent, const char *fmt, ...)<BR>{<BR>&nbsp;va_list args;<BR>&nbsp;int retval;</P>
<P>&nbsp;kobject_init(kobj, ktype);</P>
<P>&nbsp;va_start(args, fmt);<BR>&nbsp;retval = kobject_add_varg(kobj, parent, fmt, args);<BR>&nbsp;va_end(args);</P>
<P>&nbsp;return retval;<BR>}<BR>EXPORT_SYMBOL_GPL(kobject_init_and_add);