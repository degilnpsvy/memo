static int kobject_add_internal(struct kobject *kobj)<BR>{<BR>&nbsp;int error = 0;<BR>&nbsp;struct kobject *parent; 
<P></P>
<P>&nbsp;if (!kobj)<BR>&nbsp;&nbsp;return -ENOENT;</P>
<P>&nbsp;if (!kobj-&gt;name || !kobj-&gt;name[0]) {<BR>&nbsp;&nbsp;WARN(1, "kobject: (%p): attempted to be registered with empty "<BR>&nbsp;&nbsp;&nbsp; "name!\n", kobj);<BR>&nbsp;&nbsp;return -EINVAL;<BR>&nbsp;}</P>
<P>&nbsp;parent = kobject_get(kobj-&gt;parent);</P>
<P>&nbsp;/* join kset if set, use it as parent if we do not already have one */<BR>&nbsp;if (kobj-&gt;kset) {<BR>&nbsp;&nbsp;if (!parent)<BR>&nbsp;&nbsp;&nbsp;parent = kobject_get(&amp;kobj-&gt;kset-&gt;kobj);<BR>&nbsp;&nbsp;kobj_kset_join(kobj);<BR>&nbsp;&nbsp;kobj-&gt;parent = parent;<BR>&nbsp;}</P>
<P>&nbsp;pr_debug("kobject: '%s' (%p): %s: parent: '%s', set: '%s'\n",<BR>&nbsp;&nbsp; kobject_name(kobj), kobj, __func__,<BR>&nbsp;&nbsp; parent ? kobject_name(parent) : "&lt;NULL&gt;",<BR>&nbsp;&nbsp; kobj-&gt;kset ? kobject_name(&amp;kobj-&gt;kset-&gt;kobj) : "&lt;NULL&gt;");</P>
<P>&nbsp;error = create_dir(kobj);<BR>&nbsp;if (error) {<BR>&nbsp;&nbsp;kobj_kset_leave(kobj);<BR>&nbsp;&nbsp;kobject_put(parent);<BR>&nbsp;&nbsp;kobj-&gt;parent = NULL;</P>
<P>&nbsp;&nbsp;/* be noisy on error issues */<BR>&nbsp;&nbsp;if (error == -EEXIST)<BR>&nbsp;&nbsp;&nbsp;WARN(1, "%s failed for %s with "<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "-EEXIST, don't try to register things with "<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; "the same name in the same directory.\n",<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __func__, kobject_name(kobj));<BR>&nbsp;&nbsp;else<BR>&nbsp;&nbsp;&nbsp;WARN(1, "%s failed for %s (error: %d parent: %s)\n",<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __func__, kobject_name(kobj), error,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; parent ? kobject_name(parent) : "'none'");<BR>&nbsp;} else<BR>&nbsp;&nbsp;kobj-&gt;state_in_sysfs = 1;</P>
<P>&nbsp;return error;<BR>}