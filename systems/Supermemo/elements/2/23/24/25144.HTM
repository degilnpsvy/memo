#ifdef __CHECKER__<BR># define __user&nbsp;&nbsp;__attribute__((noderef, address_space(1)))<BR># define __kernel&nbsp;__attribute__((address_space(0)))<BR># define __safe&nbsp;&nbsp;__attribute__((safe))<BR># define __force&nbsp;__attribute__((force))<BR># define __nocast&nbsp;__attribute__((nocast))<BR># define __iomem&nbsp;__attribute__((noderef, address_space(2)))<BR># define __must_hold(x)&nbsp;__attribute__((context(x,1,1)))<BR># define __acquires(x)&nbsp;__attribute__((context(x,0,1)))<BR># define __releases(x)&nbsp;__attribute__((context(x,1,0)))<BR># define __acquire(x)&nbsp;__context__(x,1)<BR># define __release(x)&nbsp;__context__(x,-1)<BR># define __cond_lock(x,c)&nbsp;((c) ? ({ __acquire(x); 1; }) : 0)<BR># define __percpu&nbsp;__attribute__((noderef, address_space(3)))<BR># define __pmem&nbsp;&nbsp;__attribute__((noderef, address_space(5)))<BR>#ifdef CONFIG_SPARSE_RCU_POINTER<BR># define __rcu&nbsp;&nbsp;__attribute__((noderef, address_space(4)))<BR>#else /* CONFIG_SPARSE_RCU_POINTER */<BR># define __rcu<BR>#endif /* CONFIG_SPARSE_RCU_POINTER */<BR># define __private&nbsp;__attribute__((noderef))<BR>extern void __chk_user_ptr(const volatile void __user *);<BR>extern void __chk_io_ptr(const volatile void __iomem *);<BR># define ACCESS_PRIVATE(p, member) (*((typeof((p)-&gt;member) __force *) &amp;(p)-&gt;member))<BR>#else /* __CHECKER__ */<BR># define __user<BR># define __kernel<BR># define __safe<BR># define __force<BR># define __nocast<BR># define __iomem<BR># define __chk_user_ptr(x) (void)0<BR># define __chk_io_ptr(x) (void)0<BR># define __builtin_warning(x, y...) (1)<BR># define __must_hold(x)<BR># define __acquires(x)<BR># define __releases(x)<BR># define __acquire(x) (void)0<BR># define __release(x) (void)0<BR># define __cond_lock(x,c) (c)<BR># define __percpu<BR># define __rcu<BR># define __pmem<BR># define __private<BR># define ACCESS_PRIVATE(p, member) ((p)-&gt;member)<BR>#endif /* __CHECKER__ */