linux-3.17/include/linux/kobject.h 
<P></P>
<P>/*<BR>&nbsp;* kobject.h - generic kernel object infrastructure.<BR>&nbsp;*<BR>&nbsp;* Copyright (c) 2002-2003 Patrick Mochel<BR>&nbsp;* Copyright (c) 2002-2003 Open Source Development Labs<BR>&nbsp;* Copyright (c) 2006-2008 Greg Kroah-Hartman &lt;<A href="mailto:greg@kroah.com">greg@kroah.com</A>&gt;<BR>&nbsp;* Copyright (c) 2006-2008 Novell Inc.<BR>&nbsp;*<BR>&nbsp;* This file is released under the GPLv2.<BR>&nbsp;*<BR>&nbsp;* Please read Documentation/kobject.txt before using the kobject<BR>&nbsp;* interface, ESPECIALLY the parts about reference counts and object<BR>&nbsp;* destructors.<BR>&nbsp;*/ </P>
<P></P>
<P>#ifndef _KOBJECT_H_<BR>#define _KOBJECT_H_</P>
<P>#include &lt;linux/types.h&gt;<BR>#include &lt;linux/list.h&gt;<BR>#include &lt;linux/sysfs.h&gt;<BR>#include &lt;linux/compiler.h&gt;<BR>#include &lt;linux/spinlock.h&gt;<BR>#include &lt;linux/kref.h&gt;<BR>#include &lt;linux/kobject_ns.h&gt;<BR>#include &lt;linux/kernel.h&gt;<BR>#include &lt;linux/wait.h&gt;<BR>#include &lt;linux/atomic.h&gt;<BR>#include &lt;linux/workqueue.h&gt;</P>
<P>#define UEVENT_HELPER_PATH_LEN&nbsp;&nbsp;256<BR>#define UEVENT_NUM_ENVP&nbsp;&nbsp;&nbsp;32&nbsp;/* number of env pointers */<BR>#define UEVENT_BUFFER_SIZE&nbsp;&nbsp;2048&nbsp;/* buffer for the variables */</P>
<P>#ifdef CONFIG_UEVENT_HELPER<BR>/* path to the userspace helper executed on an event */<BR>extern char uevent_helper[];<BR>#endif</P>
<P>/* counter to tag the uevent, read only except for the kobject core */<BR>extern u64 uevent_seqnum;</P>
<P><FONT class=extract>/*<BR>&nbsp;* The actions here must match the index to the string array<BR>&nbsp;* in lib/kobject_uevent.c<BR>&nbsp;*<BR>&nbsp;* Do not add new actions here without checking with the driver-core<BR>&nbsp;* maintainers. Action strings are not meant to express subsystem<BR>&nbsp;* or device specific properties. In most cases you want to send a<BR>&nbsp;* kobject_uevent_env(kobj, KOBJ_CHANGE, env) with additional event<BR>&nbsp;* specific variables added to the event environment.<BR>&nbsp;*/<BR>enum kobject_action {<BR>&nbsp;KOBJ_ADD,<BR>&nbsp;KOBJ_REMOVE,<BR>&nbsp;KOBJ_CHANGE,<BR>&nbsp;KOBJ_MOVE,<BR>&nbsp;KOBJ_ONLINE,<BR>&nbsp;KOBJ_OFFLINE,<BR>&nbsp;KOBJ_MAX<BR>};</FONT></P>
<P><FONT class=extract>struct kobject {<BR>&nbsp;const char&nbsp;&nbsp;*name;<BR>&nbsp;struct list_head&nbsp;entry;<BR>&nbsp;struct kobject&nbsp;&nbsp;*parent;<BR>&nbsp;struct kset&nbsp;&nbsp;*kset;<BR>&nbsp;struct kobj_type&nbsp;*ktype;<BR>&nbsp;struct kernfs_node&nbsp;*sd;<BR>&nbsp;struct kref&nbsp;&nbsp;kref;<BR>#ifdef CONFIG_DEBUG_KOBJECT_RELEASE<BR>&nbsp;struct delayed_work&nbsp;release;<BR>#endif<BR>&nbsp;unsigned int state_initialized:1;<BR>&nbsp;unsigned int state_in_sysfs:1;<BR>&nbsp;unsigned int state_add_uevent_sent:1;<BR>&nbsp;unsigned int state_remove_uevent_sent:1;<BR>&nbsp;unsigned int uevent_suppress:1;<BR>};</FONT></P>
<P><FONT class=extract>extern __printf(2, 3)<BR>int kobject_set_name(struct kobject *kobj, const char *name, ...);<BR>extern __printf(2, 0)<BR>int kobject_set_name_vargs(struct kobject *kobj, const char *fmt,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; va_list vargs);</FONT></P>
<P><FONT class=extract>static inline const char *kobject_name(const struct kobject *kobj)<BR>{<BR>&nbsp;return kobj-&gt;name;<BR>}</FONT></P>
<P><FONT class=extract>extern void kobject_init(struct kobject *kobj, struct kobj_type *ktype);<BR>extern __printf(3, 4) __must_check<BR>int kobject_add(struct kobject *kobj, struct kobject *parent,<BR>&nbsp;&nbsp;const char *fmt, ...);<BR>extern __printf(4, 5) __must_check<BR>int kobject_init_and_add(struct kobject *kobj,<BR>&nbsp;&nbsp;&nbsp; struct kobj_type *ktype, struct kobject *parent,<BR>&nbsp;&nbsp;&nbsp; const char *fmt, ...);</FONT></P>
<P><FONT class=extract>extern void kobject_del(struct kobject *kobj);</FONT></P>
<P><FONT class=extract>extern struct kobject * __must_check kobject_create(void);<BR>extern struct kobject * __must_check kobject_create_and_add(const char *name,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;struct kobject *parent);</FONT></P>
<P><FONT class=extract>extern int __must_check kobject_rename(struct kobject *, const char *new_name);<BR>extern int __must_check kobject_move(struct kobject *, struct kobject *);</FONT></P>
<P><FONT class=extract>extern struct kobject *kobject_get(struct kobject *kobj);<BR>extern void kobject_put(struct kobject *kobj);</FONT></P>
<P><FONT class=extract>extern const void *kobject_namespace(struct kobject *kobj);<BR>extern char *kobject_get_path(struct kobject *kobj, gfp_t flag);</FONT></P>
<P><FONT class=extract>struct kobj_type {<BR>&nbsp;void (*release)(struct kobject *kobj);<BR>&nbsp;const struct sysfs_ops *sysfs_ops;<BR>&nbsp;struct attribute **default_attrs;<BR>&nbsp;const struct kobj_ns_type_operations *(*child_ns_type)(struct kobject *kobj);<BR>&nbsp;const void *(*namespace)(struct kobject *kobj);<BR>};</FONT></P>
<P><FONT class=extract>struct kobj_uevent_env {<BR>&nbsp;char *argv[3];<BR>&nbsp;char *envp[UEVENT_NUM_ENVP];<BR>&nbsp;int envp_idx;<BR>&nbsp;char buf[UEVENT_BUFFER_SIZE];<BR>&nbsp;int buflen;<BR>};</FONT></P>
<P><FONT class=extract>struct kset_uevent_ops {<BR>&nbsp;int (* const filter)(struct kset *kset, struct kobject *kobj);<BR>&nbsp;const char *(* const name)(struct kset *kset, struct kobject *kobj);<BR>&nbsp;int (* const uevent)(struct kset *kset, struct kobject *kobj,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; struct kobj_uevent_env *env);<BR>};</FONT></P>
<P><FONT class=extract>struct kobj_attribute {<BR>&nbsp;struct attribute attr;<BR>&nbsp;ssize_t (*show)(struct kobject *kobj, struct kobj_attribute *attr,<BR>&nbsp;&nbsp;&nbsp;char *buf);<BR>&nbsp;ssize_t (*store)(struct kobject *kobj, struct kobj_attribute *attr,<BR>&nbsp;&nbsp;&nbsp; const char *buf, size_t count);<BR>};</FONT></P>
<P>extern const struct sysfs_ops kobj_sysfs_ops;</P>
<P>struct sock;</P>
<P><FONT class=extract>/**<BR>&nbsp;* struct kset - a set of kobjects of a specific type, belonging to a specific subsystem.<BR>&nbsp;*<BR>&nbsp;* A kset defines a group of kobjects.&nbsp; They can be individually<BR>&nbsp;* different "types" but overall these kobjects all want to be grouped<BR>&nbsp;* together and operated on in the same manner.&nbsp; ksets are used to<BR>&nbsp;* define the attribute callbacks and other common events that happen to<BR>&nbsp;* a kobject.<BR>&nbsp;*<BR>&nbsp;* @list: the list of all kobjects for this kset<BR>&nbsp;* @list_lock: a lock for iterating over the kobjects<BR>&nbsp;* @kobj: the embedded kobject for this kset (recursion, isn't it fun...)<BR>&nbsp;* @uevent_ops: the set of uevent operations for this kset.&nbsp; These are<BR>&nbsp;* called whenever a kobject has something happen to it so that the kset<BR>&nbsp;* can add new environment variables, or filter out the uevents if so<BR>&nbsp;* desired.<BR>&nbsp;*/<BR>struct kset {<BR>&nbsp;struct list_head list;<BR>&nbsp;spinlock_t list_lock;<BR>&nbsp;struct kobject kobj;<BR>&nbsp;const struct kset_uevent_ops *uevent_ops;<BR>};</FONT></P>
<P><FONT class=extract>extern void kset_init(struct kset *kset);<BR>extern int __must_check kset_register(struct kset *kset);<BR>extern void kset_unregister(struct kset *kset);<BR>extern struct kset * __must_check kset_create_and_add(const char *name,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;const struct kset_uevent_ops *u,<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;struct kobject *parent_kobj);</FONT></P>
<P><FONT class=extract>static inline struct kset *to_kset(struct kobject *kobj)<BR>{<BR>&nbsp;return kobj ? container_of(kobj, struct kset, kobj) : NULL;<BR>}</FONT></P>
<P><FONT class=extract>static inline struct kset *kset_get(struct kset *k)<BR>{<BR>&nbsp;return k ? to_kset(kobject_get(&amp;k-&gt;kobj)) : NULL;<BR>}</FONT></P>
<P><FONT class=extract>static inline void kset_put(struct kset *k)<BR>{<BR>&nbsp;kobject_put(&amp;k-&gt;kobj);<BR>}</FONT></P>
<P><FONT class=extract>static inline struct kobj_type *get_ktype(struct kobject *kobj)<BR>{<BR>&nbsp;return kobj-&gt;ktype;<BR>}</FONT></P>
<P><FONT class=extract>extern struct kobject *kset_find_obj(struct kset *, const char *);</FONT></P>
<P><FONT class=extract>/* The global /sys/kernel/ kobject for people to chain off of */<BR>extern struct kobject *kernel_kobj;<BR>/* The global /sys/kernel/mm/ kobject for people to chain off of */<BR>extern struct kobject *mm_kobj;<BR>/* The global /sys/hypervisor/ kobject for people to chain off of */<BR>extern struct kobject *hypervisor_kobj;<BR>/* The global /sys/power/ kobject for people to chain off of */<BR>extern struct kobject *power_kobj;<BR>/* The global /sys/firmware/ kobject for people to chain off of */<BR>extern struct kobject *firmware_kobj;</FONT></P>
<P><FONT class=extract>int kobject_uevent(struct kobject *kobj, enum kobject_action action);<BR>int kobject_uevent_env(struct kobject *kobj, enum kobject_action action,<BR>&nbsp;&nbsp;&nbsp;char *envp[]);</FONT></P>
<P><FONT class=extract>__printf(2, 3)<BR>int add_uevent_var(struct kobj_uevent_env *env, const char *format, ...);</FONT></P>
<P><FONT class=extract>int kobject_action_type(const char *buf, size_t count,<BR>&nbsp;&nbsp;&nbsp;enum kobject_action *type);</FONT></P>
<P>#endif /* _KOBJECT_H_ */