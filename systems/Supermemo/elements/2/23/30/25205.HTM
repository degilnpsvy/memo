/**<BR>&nbsp;* kobject_create_and_add - create a struct kobject dynamically and register it with sysfs<BR>&nbsp;*<BR>&nbsp;* @name: the name for the kobject<BR>&nbsp;* @parent: the parent kobject of this kobject, if any.<BR>&nbsp;*<BR>&nbsp;* This function creates a kobject structure dynamically and registers it<BR>&nbsp;* with sysfs.&nbsp; When you are finished with this structure, call<BR>&nbsp;* kobject_put() and the structure will be dynamically freed when<BR>&nbsp;* it is no longer being used.<BR>&nbsp;*<BR>&nbsp;* If the kobject was not able to be created, NULL will be returned.<BR>&nbsp;*/<BR>struct kobject *kobject_create_and_add(const char *name, struct kobject *parent)<BR>{<BR>&nbsp;struct kobject *kobj;<BR>&nbsp;int retval;
<P></P>
<P>&nbsp;kobj = kobject_create();<BR>&nbsp;if (!kobj)<BR>&nbsp;&nbsp;return NULL;</P>
<P>&nbsp;retval = kobject_add(kobj, parent, "%s", name);<BR>&nbsp;if (retval) {<BR>&nbsp;&nbsp;printk(KERN_WARNING "%s: kobject_add error: %d\n",<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; __func__, retval);<BR>&nbsp;&nbsp;kobject_put(kobj);<BR>&nbsp;&nbsp;kobj = NULL;<BR>&nbsp;}<BR>&nbsp;return kobj;<BR>}<BR>EXPORT_SYMBOL_GPL(kobject_create_and_add);