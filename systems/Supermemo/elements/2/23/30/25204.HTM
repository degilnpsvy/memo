/**<BR>&nbsp;* kobject_create - create a struct kobject dynamically<BR>&nbsp;*<BR>&nbsp;* This function creates a kobject structure dynamically and sets it up<BR>&nbsp;* to be a "dynamic" kobject with a default release function set up.<BR>&nbsp;*<BR>&nbsp;* If the kobject was not able to be created, NULL will be returned.<BR>&nbsp;* The kobject structure returned from here must be cleaned up with a<BR>&nbsp;* call to kobject_put() and not kfree(), as kobject_init() has<BR>&nbsp;* already been called on this structure.<BR>&nbsp;*/<BR>struct kobject *kobject_create(void)<BR>{<BR>&nbsp;struct kobject *kobj;</P>
<P>&nbsp;kobj = kzalloc(sizeof(*kobj), GFP_KERNEL);<BR>&nbsp;if (!kobj)<BR>&nbsp;&nbsp;return NULL;</P>
<P>&nbsp;kobject_init(kobj, &amp;dynamic_kobj_ktype);<BR>&nbsp;return kobj;<BR>}