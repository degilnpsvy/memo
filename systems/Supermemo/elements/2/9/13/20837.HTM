=== 3 The kbuild files 
<P>Most Makefiles within the kernel are kbuild Makefiles that use the<BR>kbuild infrastructure. This chapter introduces the syntax used in the<BR>kbuild makefiles.<BR><FONT class=extract>The preferred name for the kbuild files are 'Makefile' but 'Kbuild' can<BR>be used and if both a 'Makefile' and a 'Kbuild' file exists, then the 'Kbuild'<BR>file will be used.</FONT></P>
<P>Section 3.1 "Goal definitions" is a quick intro, further chapters provide<BR>more details, with real examples.</P>
<P><FONT class=extract>--- 3.1 Goal definitions</FONT></P>
<P><FONT class=extract>&nbsp;Goal definitions are the main part (heart) of the kbuild Makefile.<BR>&nbsp;These lines define the files to be built, any special compilation<BR>&nbsp;options, and any subdirectories to be entered recursively.</FONT></P>
<P><FONT class=extract>&nbsp;The most simple kbuild makefile contains one line:</FONT></P>
<P><FONT class=extract>&nbsp;Example:<BR>&nbsp;&nbsp;obj-y += foo.o</FONT></P>
<P><FONT class=extract>&nbsp;This tells kbuild that there is one object in that directory, named<BR>&nbsp;foo.o. foo.o will be built from foo.c or foo.S.</FONT></P>
<P><FONT class=extract>&nbsp;If foo.o shall be built as a module, the variable obj-m is used.<BR>&nbsp;Therefore the following pattern is often used:</FONT></P>
<P><FONT class=extract>&nbsp;Example:<BR>&nbsp;&nbsp;obj-$(CONFIG_FOO) += foo.o</FONT></P>
<P><FONT class=extract>&nbsp;$(CONFIG_FOO) evaluates to either y (for built-in) or m (for module).<BR>&nbsp;If CONFIG_FOO is neither y nor m, then the file will not be compiled<BR>&nbsp;nor linked.</FONT></P>
<P><FONT class=extract>--- 3.2 Built-in object goals - obj-y</FONT></P>
<P><FONT class=extract>&nbsp;The kbuild Makefile specifies object files for vmlinux<BR>&nbsp;in the $(obj-y) lists.&nbsp; These lists depend on the kernel<BR>&nbsp;configuration.</FONT></P>
<P><FONT class=extract>&nbsp;Kbuild compiles all the $(obj-y) files.&nbsp; It then calls<BR>&nbsp;"$(LD) -r" to merge these files into one built-in.o file.<BR>&nbsp;built-in.o is later linked into vmlinux by the parent Makefile.</FONT></P>
<P><FONT class=extract>&nbsp;The order of files in $(obj-y) is significant.&nbsp; Duplicates in<BR>&nbsp;the lists are allowed: the first instance will be linked into<BR>&nbsp;built-in.o and succeeding instances will be ignored.</FONT></P>
<P><FONT class=extract>&nbsp;Link order is significant, because certain functions<BR>&nbsp;(module_init() / __initcall) will be called during boot in the<BR>&nbsp;order they appear. So keep in mind that changing the link<BR>&nbsp;order may e.g. change the order in which your SCSI<BR>&nbsp;controllers are detected, and thus your disks are renumbered.</FONT></P>
<P><FONT class=extract>&nbsp;Example:<BR>&nbsp;&nbsp;#drivers/isdn/i4l/Makefile<BR>&nbsp;&nbsp;# Makefile for the kernel ISDN subsystem and device drivers.<BR>&nbsp;&nbsp;# Each configuration option enables a list of files.<BR>&nbsp;&nbsp;obj-$(CONFIG_ISDN_I4L)&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; += isdn.o<BR>&nbsp;&nbsp;obj-$(CONFIG_ISDN_PPP_BSDCOMP) += isdn_bsdcomp.o</FONT></P>
<P><FONT class=extract>--- 3.3 Loadable module goals - obj-m</FONT></P>
<P><FONT class=extract>&nbsp;$(obj-m) specify object files which are built as loadable<BR>&nbsp;kernel modules.</FONT></P>
<P><FONT class=extract>&nbsp;A module may be built from one source file or several source<BR>&nbsp;files. In the case of one source file, the kbuild makefile<BR>&nbsp;simply adds the file to $(obj-m).</FONT></P>
<P><FONT class=extract>&nbsp;Example:<BR>&nbsp;&nbsp;#drivers/isdn/i4l/Makefile<BR>&nbsp;&nbsp;obj-$(CONFIG_ISDN_PPP_BSDCOMP) += isdn_bsdcomp.o</FONT></P>
<P><FONT class=extract>&nbsp;Note: In this example $(CONFIG_ISDN_PPP_BSDCOMP) evaluates to 'm'</FONT></P>
<P><FONT class=extract>&nbsp;If a kernel module is built from several source files, you specify<BR>&nbsp;that you want to build a module in the same way as above; however,<BR>&nbsp;kbuild needs to know which object files you want to build your<BR>&nbsp;module from, so you have to tell it by setting a $(&lt;module_name&gt;-y)<BR>&nbsp;variable.</FONT></P>
<P><FONT class=extract>&nbsp;Example:<BR>&nbsp;&nbsp;#drivers/isdn/i4l/Makefile<BR>&nbsp;&nbsp;obj-$(CONFIG_ISDN_I4L) += isdn.o<BR>&nbsp;&nbsp;isdn-y := isdn_net_lib.o isdn_v110.o isdn_common.o</FONT></P>
<P><FONT class=extract>&nbsp;In this example, the module name will be isdn.o. Kbuild will<BR>&nbsp;compile the objects listed in $(isdn-y) and then run<BR>&nbsp;"$(LD) -r" on the list of these files to generate isdn.o.</FONT></P>
<P><FONT class=extract>&nbsp;Due to kbuild recognizing $(&lt;module_name&gt;-y) for composite objects,<BR>&nbsp;you can use the value of a CONFIG_ symbol to optionally include an<BR>&nbsp;object file as part of a composite object.</FONT></P>
<P><FONT class=extract>&nbsp;Example:<BR>&nbsp;&nbsp;#fs/ext2/Makefile<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; obj-$(CONFIG_EXT2_FS) += ext2.o<BR>&nbsp;&nbsp;ext2-y := balloc.o dir.o file.o ialloc.o inode.o ioctl.o \<BR>&nbsp;&nbsp;&nbsp;&nbsp; namei.o super.o symlink.o<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ext2-$(CONFIG_EXT2_FS_XATTR) += xattr.o xattr_user.o \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;xattr_trusted.o</FONT></P>
<P><FONT class=extract>&nbsp;In this example, xattr.o, xattr_user.o and xattr_trusted.o are only<BR>&nbsp;part of the composite object ext2.o if $(CONFIG_EXT2_FS_XATTR)<BR>&nbsp;evaluates to 'y'.</FONT></P>
<P><FONT class=extract>&nbsp;Note: Of course, when you are building objects into the kernel,<BR>&nbsp;the syntax above will also work. So, if you have CONFIG_EXT2_FS=y,<BR>&nbsp;kbuild will build an ext2.o file for you out of the individual<BR>&nbsp;parts and then link this into built-in.o, as you would expect.</FONT></P>
<P><FONT class=extract>--- 3.4 Objects which export symbols</FONT></P>
<P><FONT class=extract>&nbsp;No special notation is required in the makefiles for<BR>&nbsp;modules exporting symbols.</FONT></P>
<P><FONT class=extract>--- 3.5 Library file goals - lib-y</FONT></P>
<P><FONT class=extract>&nbsp;Objects listed with obj-* are used for modules, or<BR>&nbsp;combined in a built-in.o for that specific directory.<BR>&nbsp;There is also the possibility to list objects that will<BR>&nbsp;be included in a library, lib.a.<BR>&nbsp;All objects listed with lib-y are combined in a single<BR>&nbsp;library for that directory.<BR>&nbsp;Objects that are listed in obj-y and additionally listed in<BR>&nbsp;lib-y will not be included in the library, since they will<BR>&nbsp;be accessible anyway.<BR>&nbsp;For consistency, objects listed in lib-m will be included in lib.a.</FONT></P>
<P><FONT class=extract>&nbsp;Note that the same kbuild makefile may list files to be built-in<BR>&nbsp;and to be part of a library. Therefore the same directory<BR>&nbsp;may contain both a built-in.o and a lib.a file.</FONT></P>
<P><FONT class=extract>&nbsp;Example:<BR>&nbsp;&nbsp;#arch/x86/lib/Makefile<BR>&nbsp;&nbsp;lib-y&nbsp;&nbsp;&nbsp; := delay.o</FONT></P>
<P><FONT class=extract>&nbsp;This will create a library lib.a based on delay.o. For kbuild to<BR>&nbsp;actually recognize that there is a lib.a being built, the directory<BR>&nbsp;shall be listed in libs-y.<BR>&nbsp;See also "6.4 List directories to visit when descending".</FONT></P>
<P><FONT class=extract>&nbsp;Use of lib-y is normally restricted to lib/ and arch/*/lib.</FONT></P>
<P><FONT class=extract>--- 3.6 Descending down in directories</FONT></P>
<P><FONT class=extract>&nbsp;A Makefile is only responsible for building objects in its own<BR>&nbsp;directory. Files in subdirectories should be taken care of by<BR>&nbsp;Makefiles in these subdirs. The build system will automatically<BR>&nbsp;invoke make recursively in subdirectories, provided you let it know of<BR>&nbsp;them.</FONT></P>
<P><FONT class=extract>&nbsp;To do so, obj-y and obj-m are used.<BR>&nbsp;ext2 lives in a separate directory, and the Makefile present in fs/<BR>&nbsp;tells kbuild to descend down using the following assignment.</FONT></P>
<P><FONT class=extract>&nbsp;Example:<BR>&nbsp;&nbsp;#fs/Makefile<BR>&nbsp;&nbsp;obj-$(CONFIG_EXT2_FS) += ext2/</FONT></P>
<P><FONT class=extract>&nbsp;If CONFIG_EXT2_FS is set to either 'y' (built-in) or 'm' (modular)<BR>&nbsp;the corresponding obj- variable will be set, and kbuild will descend<BR>&nbsp;down in the ext2 directory.<BR>&nbsp;Kbuild only uses this information to decide that it needs to visit<BR>&nbsp;the directory, it is the Makefile in the subdirectory that<BR>&nbsp;specifies what is modules and what is built-in.</FONT></P>
<P><FONT class=extract>&nbsp;It is good practice to use a CONFIG_ variable when assigning directory<BR>&nbsp;names. This allows kbuild to totally skip the directory if the<BR>&nbsp;corresponding CONFIG_ option is neither 'y' nor 'm'.</FONT></P>
<P><FONT class=extract>--- 3.7 Compilation flags</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; ccflags-y, asflags-y and ldflags-y<BR>&nbsp;These three flags apply only to the kbuild makefile in which they<BR>&nbsp;are assigned. They are used for all the normal cc, as and ld<BR>&nbsp;invocations happening during a recursive build.<BR>&nbsp;Note: Flags with the same behaviour were previously named:<BR>&nbsp;EXTRA_CFLAGS, EXTRA_AFLAGS and EXTRA_LDFLAGS.<BR>&nbsp;They are still supported but their usage is deprecated.</FONT></P>
<P><FONT class=extract>&nbsp;ccflags-y specifies options for compiling with $(CC).</FONT></P>
<P><FONT class=extract>&nbsp;Example:<BR>&nbsp;&nbsp;# drivers/acpi/Makefile<BR>&nbsp;&nbsp;ccflags-y := -Os<BR>&nbsp;&nbsp;ccflags-$(CONFIG_ACPI_DEBUG) += -DACPI_DEBUG_OUTPUT</FONT></P>
<P><FONT class=extract>&nbsp;This variable is necessary because the top Makefile owns the<BR>&nbsp;variable $(KBUILD_CFLAGS) and uses it for compilation flags for the<BR>&nbsp;entire tree.</FONT></P>
<P><FONT class=extract>&nbsp;asflags-y specifies options for assembling with $(AS).</FONT></P>
<P><FONT class=extract>&nbsp;Example:<BR>&nbsp;&nbsp;#arch/sparc/kernel/Makefile<BR>&nbsp;&nbsp;asflags-y := -ansi</FONT></P>
<P><FONT class=extract>&nbsp;ldflags-y specifies options for linking with $(LD).</FONT></P>
<P><FONT class=extract>&nbsp;Example:<BR>&nbsp;&nbsp;#arch/cris/boot/compressed/Makefile<BR>&nbsp;&nbsp;ldflags-y += -T $(srctree)/$(src)/decompress_$(arch-y).lds</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; subdir-ccflags-y, subdir-asflags-y<BR>&nbsp;The two flags listed above are similar to ccflags-y and asflags-y.<BR>&nbsp;The difference is that the subdir- variants have effect for the kbuild<BR>&nbsp;file where they are present and all subdirectories.<BR>&nbsp;Options specified using subdir-* are added to the commandline before<BR>&nbsp;the options specified using the non-subdir variants.</FONT></P>
<P><FONT class=extract>&nbsp;Example:<BR>&nbsp;&nbsp;subdir-ccflags-y := -Werror</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; CFLAGS_$@, AFLAGS_$@</FONT></P>
<P><FONT class=extract>&nbsp;CFLAGS_$@ and AFLAGS_$@ only apply to commands in current<BR>&nbsp;kbuild makefile.</FONT></P>
<P><FONT class=extract>&nbsp;$(CFLAGS_$@) specifies per-file options for $(CC).&nbsp; The $@<BR>&nbsp;part has a literal value which specifies the file that it is for.</FONT></P>
<P><FONT class=extract>&nbsp;Example:<BR>&nbsp;&nbsp;# drivers/scsi/Makefile<BR>&nbsp;&nbsp;CFLAGS_aha152x.o =&nbsp;&nbsp; -DAHA152X_STAT -DAUTOCONF<BR>&nbsp;&nbsp;CFLAGS_gdth.o&nbsp;&nbsp;&nbsp; = # -DDEBUG_GDTH=2 -D__SERIAL__ -D__COM2__ \<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; -DGDTH_STATISTICS</FONT></P>
<P><FONT class=extract>&nbsp;These two lines specify compilation flags for aha152x.o and gdth.o.</FONT></P>
<P><FONT class=extract>&nbsp;$(AFLAGS_$@) is a similar feature for source files in assembly<BR>&nbsp;languages.</FONT></P>
<P><FONT class=extract>&nbsp;Example:<BR>&nbsp;&nbsp;# arch/arm/kernel/Makefile<BR>&nbsp;&nbsp;AFLAGS_head.o&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := -DTEXT_OFFSET=$(TEXT_OFFSET)<BR>&nbsp;&nbsp;AFLAGS_crunch-bits.o := -Wa,-mcpu=ep9312<BR>&nbsp;&nbsp;AFLAGS_iwmmxt.o&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; := -Wa,-mcpu=iwmmxt</FONT></P>
<P><BR><FONT class=extract>--- 3.9 Dependency tracking</FONT></P>
<P><FONT class=extract>&nbsp;Kbuild tracks dependencies on the following:<BR>&nbsp;1) All prerequisite files (both *.c and *.h)<BR>&nbsp;2) CONFIG_ options used in all prerequisite files<BR>&nbsp;3) Command-line used to compile target</FONT></P>
<P><FONT class=extract>&nbsp;Thus, if you change an option to $(CC) all affected files will<BR>&nbsp;be re-compiled.</FONT></P>
<P><FONT class=extract>--- 3.10 Special Rules</FONT></P>
<P><FONT class=extract>&nbsp;Special rules are used when the kbuild infrastructure does<BR>&nbsp;not provide the required support. A typical example is<BR>&nbsp;header files generated during the build process.<BR>&nbsp;Another example are the architecture-specific Makefiles which<BR>&nbsp;need special rules to prepare boot images etc.</FONT></P>
<P><FONT class=extract>&nbsp;Special rules are written as normal Make rules.<BR>&nbsp;Kbuild is not executing in the directory where the Makefile is<BR>&nbsp;located, so all special rules shall provide a relative<BR>&nbsp;path to prerequisite files and target files.</FONT></P>
<P><FONT class=extract>&nbsp;Two variables are used when defining special rules:</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; $(src)<BR>&nbsp;$(src) is a relative path which points to the directory<BR>&nbsp;where the Makefile is located. Always use $(src) when<BR>&nbsp;referring to files located in the src tree.</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; $(obj)<BR>&nbsp;$(obj) is a relative path which points to the directory<BR>&nbsp;where the target is saved. Always use $(obj) when<BR>&nbsp;referring to generated files.</FONT></P>
<P><FONT class=extract>&nbsp;Example:<BR>&nbsp;&nbsp;#drivers/scsi/Makefile<BR>&nbsp;&nbsp;$(obj)/53c8xx_d.h: $(src)/53c7,8xx.scr $(src)/script_asm.pl<BR>&nbsp;&nbsp;&nbsp;$(CPP) -DCHIP=810 - &lt; $&lt; | ... $(src)/script_asm.pl</FONT></P>
<P><FONT class=extract>&nbsp;This is a special rule, following the normal syntax<BR>&nbsp;required by make.<BR>&nbsp;The target file depends on two prerequisite files. References<BR>&nbsp;to the target file are prefixed with $(obj), references<BR>&nbsp;to prerequisites are referenced with $(src) (because they are not<BR>&nbsp;generated files).</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; $(kecho)<BR>&nbsp;echoing information to user in a rule is often a good practice<BR>&nbsp;but when execution "make -s" one does not expect to see any output<BR>&nbsp;except for warnings/errors.<BR>&nbsp;To support this kbuild define $(kecho) which will echo out the<BR>&nbsp;text following $(kecho) to stdout except if "make -s" is used.</FONT></P>
<P><FONT class=extract>&nbsp;Example:<BR>&nbsp;&nbsp;#arch/blackfin/boot/Makefile<BR>&nbsp;&nbsp;$(obj)/vmImage: $(obj)/vmlinux.gz<BR>&nbsp;&nbsp;&nbsp;$(call if_changed,uimage)<BR>&nbsp;&nbsp;&nbsp;@$(kecho) 'Kernel: $@ is ready'</FONT></P>
<P><BR><FONT class=extract>--- 3.11 $(CC) support functions</FONT></P>
<P><FONT class=extract>&nbsp;The kernel may be built with several different versions of<BR>&nbsp;$(CC), each supporting a unique set of features and options.<BR>&nbsp;kbuild provide basic support to check for valid options for $(CC).<BR>&nbsp;$(CC) is usually the gcc compiler, but other alternatives are<BR>&nbsp;available.</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; as-option<BR>&nbsp;as-option is used to check if $(CC) -- when used to compile<BR>&nbsp;assembler (*.S) files -- supports the given option. An optional<BR>&nbsp;second option may be specified if the first option is not supported.</FONT></P>
<P><FONT class=extract>&nbsp;Example:<BR>&nbsp;&nbsp;#arch/sh/Makefile<BR>&nbsp;&nbsp;cflags-y += $(call as-option,-Wa$(comma)-isa=$(isa-y),)</FONT></P>
<P><FONT class=extract>&nbsp;In the above example, cflags-y will be assigned the option<BR>&nbsp;-Wa$(comma)-isa=$(isa-y) if it is supported by $(CC).<BR>&nbsp;The second argument is optional, and if supplied will be used<BR>&nbsp;if first argument is not supported.</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; cc-ldoption<BR>&nbsp;cc-ldoption is used to check if $(CC) when used to link object files<BR>&nbsp;supports the given option.&nbsp; An optional second option may be<BR>&nbsp;specified if first option are not supported.</FONT></P>
<P><FONT class=extract>&nbsp;Example:<BR>&nbsp;&nbsp;#arch/x86/kernel/Makefile<BR>&nbsp;&nbsp;vsyscall-flags += $(call cc-ldoption, -Wl$(comma)--hash-style=sysv)</FONT></P>
<P><FONT class=extract>&nbsp;In the above example, vsyscall-flags will be assigned the option<BR>&nbsp;-Wl$(comma)--hash-style=sysv if it is supported by $(CC).<BR>&nbsp;The second argument is optional, and if supplied will be used<BR>&nbsp;if first argument is not supported.</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; as-instr<BR>&nbsp;as-instr checks if the assembler reports a specific instruction<BR>&nbsp;and then outputs either option1 or option2<BR>&nbsp;C escapes are supported in the test instruction<BR>&nbsp;Note: as-instr-option uses KBUILD_AFLAGS for $(AS) options</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; cc-option<BR>&nbsp;cc-option is used to check if $(CC) supports a given option, and not<BR>&nbsp;supported to use an optional second option.</FONT></P>
<P><FONT class=extract>&nbsp;Example:<BR>&nbsp;&nbsp;#arch/x86/Makefile<BR>&nbsp;&nbsp;cflags-y += $(call cc-option,-march=pentium-mmx,-march=i586)</FONT></P>
<P><FONT class=extract>&nbsp;In the above example, cflags-y will be assigned the option<BR>&nbsp;-march=pentium-mmx if supported by $(CC), otherwise -march=i586.<BR>&nbsp;The second argument to cc-option is optional, and if omitted,<BR>&nbsp;cflags-y will be assigned no value if first option is not supported.<BR>&nbsp;Note: cc-option uses KBUILD_CFLAGS for $(CC) options</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp; cc-option-yn<BR>&nbsp;cc-option-yn is used to check if gcc supports a given option<BR>&nbsp;and return 'y' if supported, otherwise 'n'.</FONT></P>
<P><FONT class=extract>&nbsp;Example:<BR>&nbsp;&nbsp;#arch/ppc/Makefile<BR>&nbsp;&nbsp;biarch := $(call cc-option-yn, -m32)<BR>&nbsp;&nbsp;aflags-$(biarch) += -a32<BR>&nbsp;&nbsp;cflags-$(biarch) += -m32</FONT></P>
<P><FONT class=extract>&nbsp;In the above example, $(biarch) is set to y if $(CC) supports the -m32<BR>&nbsp;option. When $(biarch) equals 'y', the expanded variables $(aflags-y)<BR>&nbsp;and $(cflags-y) will be assigned the values -a32 and -m32,<BR>&nbsp;respectively.<BR>&nbsp;Note: cc-option-yn uses KBUILD_CFLAGS for $(CC) options</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; cc-option-align<BR>&nbsp;gcc versions &gt;= 3.0 changed the type of options used to specify<BR>&nbsp;alignment of functions, loops etc. $(cc-option-align), when used<BR>&nbsp;as prefix to the align options, will select the right prefix:<BR>&nbsp;gcc &lt; 3.00<BR>&nbsp;&nbsp;cc-option-align = -malign<BR>&nbsp;gcc &gt;= 3.00<BR>&nbsp;&nbsp;cc-option-align = -falign</FONT></P>
<P><FONT class=extract>&nbsp;Example:<BR>&nbsp;&nbsp;KBUILD_CFLAGS += $(cc-option-align)-functions=4</FONT></P>
<P><FONT class=extract>&nbsp;In the above example, the option -falign-functions=4 is used for<BR>&nbsp;gcc &gt;= 3.00. For gcc &lt; 3.00, -malign-functions=4 is used.<BR>&nbsp;Note: cc-option-align uses KBUILD_CFLAGS for $(CC) options</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; cc-disable-warning<BR>&nbsp;cc-disable-warning checks if gcc supports a given warning and returns<BR>&nbsp;the commandline switch to disable it. This special function is needed,<BR>&nbsp;because gcc 4.4 and later accept any unknown -Wno-* option and only<BR>&nbsp;warn about it if there is another warning in the source file.</FONT></P>
<P><FONT class=extract>&nbsp;Example:<BR>&nbsp;&nbsp;KBUILD_CFLAGS += $(call cc-disable-warning, unused-but-set-variable)</FONT></P>
<P><FONT class=extract>&nbsp;In the above example, -Wno-unused-but-set-variable will be added to<BR>&nbsp;KBUILD_CFLAGS only if gcc really accepts it.</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; cc-version<BR>&nbsp;cc-version returns a numerical version of the $(CC) compiler version.<BR>&nbsp;The format is &lt;major&gt;&lt;minor&gt; where both are two digits. So for example<BR>&nbsp;gcc 3.41 would return 0341.<BR>&nbsp;cc-version is useful when a specific $(CC) version is faulty in one<BR>&nbsp;area, for example -mregparm=3 was broken in some gcc versions<BR>&nbsp;even though the option was accepted by gcc.</FONT></P>
<P><FONT class=extract>&nbsp;Example:<BR>&nbsp;&nbsp;#arch/x86/Makefile<BR>&nbsp;&nbsp;cflags-y += $(shell \<BR>&nbsp;&nbsp;if [ $(call cc-version) -ge 0300 ] ; then \<BR>&nbsp;&nbsp;&nbsp;echo "-mregparm=3"; fi ;)</FONT></P>
<P><FONT class=extract>&nbsp;In the above example, -mregparm=3 is only used for gcc version greater<BR>&nbsp;than or equal to gcc 3.0.</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; cc-ifversion<BR>&nbsp;cc-ifversion tests the version of $(CC) and equals last argument if<BR>&nbsp;version expression is true.</FONT></P>
<P><FONT class=extract>&nbsp;Example:<BR>&nbsp;&nbsp;#fs/reiserfs/Makefile<BR>&nbsp;&nbsp;ccflags-y := $(call cc-ifversion, -lt, 0402, -O1)</FONT></P>
<P><FONT class=extract>&nbsp;In this example, ccflags-y will be assigned the value -O1 if the<BR>&nbsp;$(CC) version is less than 4.2.<BR>&nbsp;cc-ifversion takes all the shell operators:<BR>&nbsp;-eq, -ne, -lt, -le, -gt, and -ge<BR>&nbsp;The third parameter may be a text as in this example, but it may also<BR>&nbsp;be an expanded variable or a macro.</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; cc-fullversion<BR>&nbsp;cc-fullversion is useful when the exact version of gcc is needed.<BR>&nbsp;One typical use-case is when a specific GCC version is broken.<BR>&nbsp;cc-fullversion points out a more specific version than cc-version does.</FONT></P>
<P><FONT class=extract>&nbsp;Example:<BR>&nbsp;&nbsp;#arch/powerpc/Makefile<BR>&nbsp;&nbsp;$(Q)if test "$(call cc-fullversion)" = "040200" ; then \<BR>&nbsp;&nbsp;&nbsp;echo -n '*** GCC-4.2.0 cannot compile the 64-bit powerpc ' ; \<BR>&nbsp;&nbsp;&nbsp;false ; \<BR>&nbsp;&nbsp;fi</FONT></P>
<P><FONT class=extract>&nbsp;In this example for a specific GCC version the build will error out explaining<BR>&nbsp;to the user why it stops.</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; cc-cross-prefix<BR>&nbsp;cc-cross-prefix is used to check if there exists a $(CC) in path with<BR>&nbsp;one of the listed prefixes. The first prefix where there exist a<BR>&nbsp;prefix$(CC) in the PATH is returned - and if no prefix$(CC) is found<BR>&nbsp;then nothing is returned.<BR>&nbsp;Additional prefixes are separated by a single space in the<BR>&nbsp;call of cc-cross-prefix.<BR>&nbsp;This functionality is useful for architecture Makefiles that try<BR>&nbsp;to set CROSS_COMPILE to well-known values but may have several<BR>&nbsp;values to select between.<BR>&nbsp;It is recommended only to try to set CROSS_COMPILE if it is a cross<BR>&nbsp;build (host arch is different from target arch). And if CROSS_COMPILE<BR>&nbsp;is already set then leave it with the old value.</FONT></P>
<P><FONT class=extract>&nbsp;Example:<BR>&nbsp;&nbsp;#arch/m68k/Makefile<BR>&nbsp;&nbsp;ifneq ($(SUBARCH),$(ARCH))<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; ifeq ($(CROSS_COMPILE),)<BR>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; CROSS_COMPILE := $(call cc-cross-prefix, m68k-linux-gnu-)<BR>&nbsp;&nbsp;&nbsp;endif<BR>&nbsp;&nbsp;endif</FONT></P>
<P><FONT class=extract>--- 3.12 $(LD) support functions</FONT></P>
<P><FONT class=extract>&nbsp;&nbsp;&nbsp; ld-option<BR>&nbsp;ld-option is used to check if $(LD) supports the supplied option.<BR>&nbsp;ld-option takes two options as arguments.<BR>&nbsp;The second argument is an optional option that can be used if the<BR>&nbsp;first option is not supported by $(LD).</FONT></P>
<P><FONT class=extract>&nbsp;Example:<BR>&nbsp;&nbsp;#Makefile<BR>&nbsp;&nbsp;LDFLAGS_vmlinux += $(call ld-option, -X)</FONT>