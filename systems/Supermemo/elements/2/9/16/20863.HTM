Kconfig syntax<BR>-------------- 
<P></P>
<P><FONT class=extract>The configuration file describes a series of menu entries, where every<BR>line starts with a keyword (except help texts). The following keywords<BR>end a menu entry:<BR>- config<BR>- menuconfig<BR>- choice/endchoice<BR>- comment<BR>- menu/endmenu<BR>- if/endif<BR>- source<BR>The first five also start the definition of a menu entry.</FONT></P>
<P><FONT class=extract>config:</FONT></P>
<P><FONT class=extract>&nbsp;"config" &lt;symbol&gt;<BR>&nbsp;&lt;config options&gt;</FONT></P>
<P><FONT class=extract>This defines a config symbol &lt;symbol&gt; and accepts any of above<BR>attributes as options.</FONT></P>
<P><FONT class=extract>menuconfig:<BR>&nbsp;"menuconfig" &lt;symbol&gt;<BR>&nbsp;&lt;config options&gt;</FONT></P>
<P><FONT class=extract>This is similar to the simple config entry above, but it also gives a<BR>hint to front ends, that all suboptions should be displayed as a<BR>separate list of options.</FONT></P>
<P><FONT class=extract>choices:</FONT></P>
<P><FONT class=extract>&nbsp;"choice" [symbol]<BR>&nbsp;&lt;choice options&gt;<BR>&nbsp;&lt;choice block&gt;<BR>&nbsp;"endchoice"</FONT></P>
<P><FONT class=extract>This defines a choice group and accepts any of the above attributes as<BR>options. A choice can only be of type bool or tristate, while a boolean<BR>choice only allows a single config entry to be selected, a tristate<BR>choice also allows any number of config entries to be set to 'm'. This<BR>can be used if multiple drivers for a single hardware exists and only a<BR>single driver can be compiled/loaded into the kernel, but all drivers<BR>can be compiled as modules.<BR>A choice accepts another option "optional", which allows to set the<BR>choice to 'n' and no entry needs to be selected.<BR>If no [symbol] is associated with a choice, then you can not have multiple<BR>definitions of that choice. If a [symbol] is associated to the choice,<BR>then you may define the same choice (ie. with the same entries) in another<BR>place.</FONT></P>
<P><FONT class=extract>comment:</FONT></P>
<P><FONT class=extract>&nbsp;"comment" &lt;prompt&gt;<BR>&nbsp;&lt;comment options&gt;</FONT></P>
<P><FONT class=extract>This defines a comment which is displayed to the user during the<BR>configuration process and is also echoed to the output files. The only<BR>possible options are dependencies.</FONT></P>
<P><FONT class=extract>menu:</FONT></P>
<P><FONT class=extract>&nbsp;"menu" &lt;prompt&gt;<BR>&nbsp;&lt;menu options&gt;<BR>&nbsp;&lt;menu block&gt;<BR>&nbsp;"endmenu"</FONT></P>
<P><FONT class=extract>This defines a menu block, see "Menu structure" above for more<BR>information. The only possible options are dependencies and "visible"<BR>attributes.</FONT></P>
<P><FONT class=extract>if:</FONT></P>
<P><FONT class=extract>&nbsp;"if" &lt;expr&gt;<BR>&nbsp;&lt;if block&gt;<BR>&nbsp;"endif"</FONT></P>
<P><FONT class=extract>This defines an if block. The dependency expression &lt;expr&gt; is appended<BR>to all enclosed menu entries.</FONT></P>
<P><FONT class=extract>source:</FONT></P>
<P><FONT class=extract>&nbsp;"source" &lt;prompt&gt;</FONT></P>
<P><FONT class=extract>This reads the specified configuration file. This file is always parsed.</FONT></P>
<P><FONT class=extract>mainmenu:</FONT></P>
<P><FONT class=extract>&nbsp;"mainmenu" &lt;prompt&gt;</FONT></P>
<P><FONT class=extract>This sets the config program's title bar if the config program chooses<BR>to use it. It should be placed at the top of the configuration, before any<BR>other statement.</FONT>