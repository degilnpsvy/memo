<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','serif'; FONT-SIZE: 28pt; mso-bidi-font-size: 18.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-SemiLight" lang=EN-US>Playing with the New Devices</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Once you are equipped with the four methods just described, the driver can be compiled and tested; it retains any data you write to it until you overwrite it with new data. The device acts like a data buffer whose length is limited only by the amount of real RAM available. You can try using </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>cp</SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>dd</SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, and input/output redirection to test out the driver.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>free </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>command can be used to see how the amount of free memory shrinks and expands according to how much data is written into </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>scull</SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>To get more confident with reading and writing one quantum at a time, you can add a </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>printk </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>at an appropriate point in the driver and watch what happens while an application reads or writes large chunks of data. Alternatively, use the </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>strace </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>utility to monitor the system calls issued by a program, together with their return values. Tracing a </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>cp </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>or an </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>ls -l &gt; /dev/scull0 </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>shows quantized reads and writes. Monitoring (and debugging) techniques are presented in detail in Chapter 4</SPAN>