<HEAD></HEAD>
<BODY>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','serif'; FONT-SIZE: 28pt; mso-bidi-font-size: 18.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-SemiLight" lang=EN-US>read and write</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>read </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>write </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>methods both perform a similar task, that is, copying data from and to application code. Therefore, their prototypes are pretty similar, and it&#8217;s worth introducing them at the same time:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>ssize_t read(struct file *filp, char __user *buff,</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>size_t count, loff_t *offp);</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>ssize_t write(struct file *filp, const char __user *buff,</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>size_t count, loff_t *offp);</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>For both methods, </SPAN><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>filp </SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>is the file pointer and </SPAN><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>count </SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>is the size of the requested data transfer. The </SPAN><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>buff </SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>argument points to the user buffer holding the data to be written or the empty buffer where the newly read data should be placed. Finally, </SPAN><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>offp </SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>is a pointer to a </SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>long offset type</SPAN>&#8221;<SPAN lang=EN-US> object that indicates the file position the user is accessing. The return value is a </SPAN>&#8220;<SPAN lang=EN-US>signed size type</SPAN>&#8221;<SPAN lang=EN-US>; its use is discussed later.</SPAN></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Let us repeat that the </SPAN><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>buff </SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>argument to the </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>read </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>write </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>methods is a user-space pointer. Therefore, it cannot be directly dereferenced by kernel code. There are a few reasons for this restriction:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US> Depending on which architecture your driver is running on, and how the kernel was configured, the user-space pointer may not be valid while running in kernel mode at all. There may be no mapping for that address, or it could point to some other, random data.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US> Even if the pointer does mean the same thing in kernel space, user-space memory is paged, and the memory in question might not be resident in RAM when the system call is made. Attempting to reference the user-space memory directly could generate a page fault, which is something that kernel code is not allowed to do. The result would be an </SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>oops,</SPAN>&#8221;<SPAN lang=EN-US> which would result in the death of the process that made the system call.</SPAN></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US> The pointer in question has been supplied by a user program, which could be buggy or malicious. If your driver ever blindly dereferences a user-supplied pointer, it provides an open doorway allowing a user-space program to access or overwrite memory anywhere in the system. If you do not wish to be responsible for compromising the security of your users&#8217; systems, you cannot ever dereference a user-space pointer directly.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Obviously, your driver must be able to access the user-space buffer in order to get its job done. This access must always be performed by special, kernel-supplied functions, however, in order to be safe. We introduce some of those functions (which are defined in </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>&lt;asm/uaccess.h&gt;</SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>) here, and the rest in the section </SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>Using the ioctl Argument</SPAN>&#8221; <SPAN lang=EN-US>in Chapter 1; they use some special, architecture-dependent magic to ensure that data transfers between kernel and user space happen in a safe and correct way.</SPAN></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The code for </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>read </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>write </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>in </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>scull </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>needs to copy a whole segment of data to or from the user address space. This capability is offered by the following kernel functions, which copy an arbitrary array of bytes and sit at the heart of most </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>read </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>write </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>implementations:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>unsigned long copy_to_user(void __user *to,</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>const void *from,</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>unsigned long count);</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>unsigned long copy_from_user(void *to,</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>const void __user *from,</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>unsigned long count);</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Although these functions behave like normal </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>memcpy </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>functions, a little extra care must be used when accessing user space from kernel code. The user pages being addressed might not be currently present in memory, and the virtual memory subsystem can put the process to sleep while the page is being transferred into place.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>This happens, for example, when the page must be retrieved from swap space. The net result for the driver writer is that any function that accesses user space must be reentrant, must be able to execute concurrently with other driver functions, and, in particular, must be in a position where it can legally sleep. We return to this subject in Chapter 5.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The role of the two functions is not limited to copying data to and from user-space: they also check whether the user space pointer is valid. If the pointer is invalid, no copy is performed; if an invalid address is encountered during the copy, on the other hand, only part of the data is copied. In both cases, the return value is the amount of memory still to be copied. The </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>scull </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>code looks for this error return, and returns </SPAN><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>-EFAULT </SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>to the user if it&#8217;s not </SPAN><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>0</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The topic of user-space access and invalid user space pointers is somewhat advanced and is discussed in Chapter 6. However, it&#8217;s worth noting that if you don&#8217;t need to check the user-space pointer you can invoke </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>__copy_to_user </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>__copy_from_user </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>instead. This is useful, for example, if you know you already checked the argument. Be careful, however; if, in fact, you do </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>not </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>check a user-space pointer that you pass to these functions, then you can create kernel crashes and/or security holes. As far as the actual device methods are concerned, the task of the </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>read </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>method is to copy data from the device to user space (using </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>copy_to_user</SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>), while the </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>write </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>method must copy data from user space to the device (using </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>copy_from_user</SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>). Each </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>read </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>or </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>write </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>system call requests transfer of a specific number of bytes, but the driver is free to transfer less data</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8212;<SPAN lang=EN-US>the exact rules are slightly different for reading and writing and are described later in this chapter.</SPAN></SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Whatever the amount of data the methods transfer, they should generally update the file position at </SPAN><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>*offp </SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>to represent the current file position after successful completion of the system call. The kernel then propagates the file position change back into the </SPAN><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>file </SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>structure when appropriate. The </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>pread </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>pwrite </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>system calls have different semantics, however; they operate from a given file offset and do not change the file position as seen by any other system calls. These calls pass in a pointer to the user-supplied position, and discard the changes that your driver makes.</SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Figure 3-2 represents how a typical </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>read </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>implementation uses its arguments.</SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 11.0pt; mso-no-proof: yes" lang=EN-US><?xml:namespace prefix = v /><v:shape style="WIDTH: 530.25pt; HEIGHT: 333pt; VISIBILITY: visible; mso-wrap-style: square" id=&#22270;&#29255;_x0020_3 type="#_x0000_t75" o:spid="_x0000_i1025"><v:imagedata o:title="" src="file:///C:\Users\DONPOP~1\AppData\Local\Temp\msohtmlclip1\01\clip_image003.emz"></v:imagedata></v:shape></SPAN><SPAN style="FONT-SIZE: 15.5pt; mso-bidi-font-size: 11.0pt" lang=EN-US></SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>Figure 3-2. The arguments to read</SPAN></I></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Both the </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>read </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>write </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>methods return a negative value if an error occurs. A return value greater than or equal to 0, instead, tells the calling program how many bytes have been successfully transferred. If some data is transferred correctly and then an error happens, the return value must be the count of bytes successfully transferred, and the error does not get reported until the next time the function is called. Implementing this convention requires, of course, that your driver remember that the error has occurred so that it can return the error status in the future.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Although kernel functions return a negative number to signal an error, and the value of the number indicates the kind of error that occurred (as introduced in Chapter 2), programs that run in user space always see </SPAN><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8211;</SPAN><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>1 </SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>as the error return value. They need to access the </SPAN><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>errno </SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>variable to find out what happened. The user-space behavior is dictated by the POSIX standard, but that standard does not make requirements on how the kernel operates internally.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','serif'; FONT-SIZE: 24pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: Birka" lang=EN-US>The read Method</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The return value for </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>read </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>is interpreted by the calling application program:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US> If the value equals the </SPAN><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>count </SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>argument passed to the </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>read </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>system call, the requested number of bytes has been transferred. This is the optimal case.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US> If the value is positive, but smaller than </SPAN><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>count</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, only part of the data has been transferred. This may happen for a number of reasons, depending on the device. Most often, the application program retries the read. For instance, if you read using the </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>fread </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>function, the library function reissues the system call until completion of the requested data transfer.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US> If the value is </SPAN><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>0</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, end-of-file was reached (and no data was read).</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US> A negative value means there was an error. The value specifies what the error was, according to </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>&lt;linux/errno.h&gt;</SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>. Typical values returned on error include </SPAN><SPAN style="FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-SemiLight; mso-ascii-font-family: TheSansMonoCondensed-SemiLight" lang=EN-US><FONT face=Calibri>&#8211;</FONT></SPAN><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>EINTR </SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>(interrupted system call) or </SPAN><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>-EFAULT </SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>(bad address).</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>What is missing from the preceding list is the case of </SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>there is no data, but it may arrive later.</SPAN>&#8221;<SPAN lang=EN-US> In this case, the </SPAN></SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>read </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>system call should block. We&#8217;ll deal with blocking input in Chapter 6.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>scull </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>code takes advantage of these rules. In particular, it takes advantage of the partial-read rule. Each invocation of </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>scull_read </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>deals only with a single data quantum, without implementing a loop to gather all the data; this makes the code shorter and easier to read. If the reading program really wants more data, it reiterates the call. If the standard I/O library (i.e., </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>fread</SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>) is used to read the device, the application won&#8217;t even notice the quantization of the data transfer.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>If the current read position is greater than the device size, the </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>read </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>method of </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>scull </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>returns </SPAN><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>0 </SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>to signal that there&#8217;s no data available (in other words, we&#8217;re at end-of-file). This situation can happen if process A is reading the device while process B opens it for writing, thus truncating the device to a length of 0. Process A suddenly finds itself past end-of-file, and the next </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>read </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>call returns </SPAN><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>0</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Here is the code for </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>read </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>(ignore the calls to </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>down_interruptible </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>up </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>for now; we will get to them in the next chapter):</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>ssize_t scull_read(struct file *filp, char __user *buf, size_t count,</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>loff_t *f_pos)</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>{</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct scull_dev *dev = filp-&gt;private_data;</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct scull_qset *dptr; /* the first listitem */</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>int quantum = dev-&gt;quantum, qset = dev-&gt;qset;</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>int itemsize = quantum * qset; /* how many bytes in the listitem */</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>int item, s_pos, q_pos, rest;</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>ssize_t retval = 0;</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>if (down_interruptible(&amp;dev-&gt;sem))</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>return -ERESTARTSYS;</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>if (*f_pos &gt;= dev-&gt;size)</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>goto out;</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>if (*f_pos + count &gt; dev-&gt;size)</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>count = dev-&gt;size - *f_pos;</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>/* find listitem, qset index, and offset in the quantum */</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>item = (long)*f_pos / itemsize;</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>rest = (long)*f_pos % itemsize;</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>s_pos = rest / quantum; q_pos = rest % quantum;</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>/* follow the list up to the right position (defined elsewhere) */</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>dptr = scull_follow(dev, item);</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>if (dptr = = NULL || !dptr-&gt;data || ! dptr-&gt;data[s_pos])</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>goto out; /* don't fill holes */</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>/* read only up to the end of this quantum */</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>if (count &gt; quantum - q_pos)</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>count = quantum - q_pos;</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>if (copy_to_user(buf, dptr-&gt;data[s_pos] + q_pos, count)) {</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>retval = -EFAULT;</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>goto out;</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>}</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>*f_pos += count;</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>retval = count;</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>out:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>up(&amp;dev-&gt;sem);</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>return retval;</SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>}</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','serif'; FONT-SIZE: 24pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt" lang=EN-US>The write Method</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>write</SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, like </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>read</SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, can transfer less data than was requested, according to the following rules for the return value:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US> If the value equals </SPAN><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>count</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, the requested number of bytes has been transferred.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US> If the value is positive, but smaller than </SPAN><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>count</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, only part of the data has been transferred. The program will most likely retry writing the rest of the data.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US> If the value is </SPAN><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>0</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, nothing was written. This result is not an error, and there is no reason to return an error code. Once again, the standard library retries the call to </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>write</SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>. We&#8217;ll examine the exact meaning of this case in Chapter 6, where blocking </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>write </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>is introduced.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: &#23435;&#20307;; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: &#23435;&#20307;; mso-font-kerning: 0pt">&#8226;</SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US> A negative value means an error occurred; as for </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>read</SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, valid error values are those defined in </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>&lt;linux/errno.h&gt;</SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Unfortunately, there may still be misbehaving programs that issue an error message and abort when a partial transfer is performed. This happens because some programmers are accustomed to seeing </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>write </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>calls that either fail or succeed completely, which is actually what happens most of the time and should be supported by devices as well. This limitation in the </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>scull </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>implementation could be fixed, but we didn&#8217;t want to complicate the code more than necessary.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>scull </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>code for </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>write </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>deals with a single quantum at a time, as the </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>read </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>method does:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>ssize_t scull_write(struct file *filp, const char __user *buf, size_t count,</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>loff_t *f_pos)</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>{</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>struct scull_dev *dev = filp-&gt;private_data;</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>struct scull_qset *dptr;</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>int quantum = dev-&gt;quantum, qset = dev-&gt;qset;</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>int itemsize = quantum * qset;</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>int item, s_pos, q_pos, rest;</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>ssize_t retval = -ENOMEM; /* value used in "goto out" statements */</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>if (down_interruptible(&amp;dev-&gt;sem))</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>return -ERESTARTSYS;</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>/* find listitem, qset index and offset in the quantum */</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>item = (long)*f_pos / itemsize;</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>rest = (long)*f_pos % itemsize;</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>s_pos = rest / quantum; q_pos = rest % quantum;</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>/* follow the list up to the right position */</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>dptr = scull_follow(dev, item);</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>if (dptr = = NULL)</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>goto out;</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>if (!dptr-&gt;data) {</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>dptr-&gt;data = kmalloc(qset * sizeof(char *), GFP_KERNEL);</SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt; mso-hansi-font-family: Myriad-CnSemibold" lang=EN-US>if (!dptr-&gt;data)</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>goto out;</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>memset(dptr-&gt;data, 0, qset * sizeof(char *));</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>}</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>if (!dptr-&gt;data[s_pos]) {</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>dptr-&gt;data[s_pos] = kmalloc(quantum, GFP_KERNEL);</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>if (!dptr-&gt;data[s_pos])</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>goto out;</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>}</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>/* write only up to the end of this quantum */</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>if (count &gt; quantum - q_pos)</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>count = quantum - q_pos;</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>if (copy_from_user(dptr-&gt;data[s_pos]+q_pos, buf, count)) {</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>retval = -EFAULT;</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>goto out;</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>}</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>*f_pos += count;</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>retval = count;</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>/* update the size */</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>if (dev-&gt;size &lt; *f_pos)</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>dev-&gt;size = *f_pos;</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>out:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>up(&amp;dev-&gt;sem);</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>return retval;</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>}</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'Myriad-CnSemibold','serif'; FONT-SIZE: 24pt; mso-bidi-font-size: 15.0pt; mso-bidi-font-family: Myriad-CnSemibold; mso-font-kerning: 0pt; mso-fareast-font-family: TheSansMonoCondensed-SemiLight" lang=EN-US>readv and writev</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Unix systems have long supported two system calls named </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>readv </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>writev</SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>. These </SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt">&#8220;<SPAN lang=EN-US>vector</SPAN>&#8221;<SPAN lang=EN-US> versions of </SPAN></SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>read </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>write </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>take an array of structures, each of which contains a pointer to a buffer and a length value. A </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>readv </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>call would then be expected to read the indicated amount into each buffer in turn. </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>writev</SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, instead, would gather together the contents of each buffer and put them out as a single write operation.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>If your driver does not supply methods to handle the vector operations, </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>readv </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>writev </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>are implemented with multiple calls to your </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>read </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>write </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>methods. In many situations, however, greater efficiency is acheived by implementing </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>readv </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>writev </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>directly.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The prototypes for the vector operations are:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>ssize_t (*readv) (struct file *filp, const struct iovec *iov,</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>unsigned long count, loff_t *ppos);</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>ssize_t (*writev) (struct file *filp, const struct iovec *iov,</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>unsigned long count, loff_t *ppos);</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Here, the </SPAN><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>filp </SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>and </SPAN><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>ppos </SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>arguments are the same as for </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>read </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>write</SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>. The </SPAN><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>iovec </SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>structure, defined in </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>&lt;linux/uio.h&gt;</SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, looks like:</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>struct iovec</SPAN></P>
<P style="MARGIN: 0cm 0cm 0pt" class=MsoNormal><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>{</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>void _ _user *iov_base;</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>__kernel_size_t iov_len;</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 12pt; mso-bidi-font-size: 8.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>};</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Each </SPAN><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>iovec </SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>describes one chunk of data to be transferred; it starts at </SPAN><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>iov_base </SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>(in user space) and is </SPAN><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>iov_len </SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>bytes long. The </SPAN><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>count </SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>parameter tells the method how many </SPAN><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>iovec </SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>structures there are. These structures are created by the application, but the kernel copies them into kernel space before calling the driver.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>The simplest implementation of the vectored operations would be a straightforward loop that just passes the address and length out of each </SPAN><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>iovec </SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>to the driver&#8217;s </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>read </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>or </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>write </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>function. Often, however, efficient and correct behavior requires that the driver do something smarter. For example, a </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>writev </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>on a tape drive should write the contents of all the </SPAN><SPAN style="FONT-FAMILY: 'TheSansMonoCondensed-SemiLight','serif'; FONT-SIZE: 14pt; mso-bidi-font-size: 9.0pt; mso-bidi-font-family: TheSansMonoCondensed-SemiLight; mso-font-kerning: 0pt" lang=EN-US>iovec </SPAN><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>structures as a single record on the tape.</SPAN></P>
<P style="TEXT-ALIGN: left; MARGIN: 0cm 0cm 0pt; mso-layout-grid-align: none" class=MsoNormal align=left><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>Many drivers, however, gain no benefit from implementing these methods themselves. Therefore, </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>scull </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>omits them. The kernel emulates them with </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>read </SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>and </SPAN><I><SPAN style="FONT-FAMILY: 'Birka-Italic','serif'; FONT-SIZE: 16pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka-Italic; mso-font-kerning: 0pt" lang=EN-US>write</SPAN></I><SPAN style="FONT-FAMILY: '&#24494;&#36719;&#38597;&#40657;','sans-serif'; FONT-SIZE: 15pt; mso-bidi-font-size: 10.0pt; mso-bidi-font-family: Birka; mso-font-kerning: 0pt" lang=EN-US>, and the end result is the same.</SPAN></P></BODY>